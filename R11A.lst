00000000                            
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            ;										;
00000000                            ;	Disassembly of R11A from Sonic CD					;
00000000                            ;										;
00000000                            ;	Created by Ralakimus							;
00000000                            ;	Special thanks to flamewing and TheStoneBanana for extensive help	;
00000000                            ;										;
00000000                            ;	File:		r11a.asm						;
00000000                            ;	Contents:	Main source file					;
00000000                            ;										;
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            align macro
00000000                                 cnop 0,\1
00000000                                 endm
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Includes
00000000                            ; -------------------------------------------------------------------------------
00000000                                include	"Debugger.asm"	
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ;
00000000                            ; (c) 2016-2023, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugger customization
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; Enable debugger extensions
00000000                            ; Pressing A/B/C on the exception screen can open other debuggers
00000000                            ; Pressing Start or unmapped button returns to the exception
00000000 =00000001                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON
00000000                            
00000000                            ; Debuggers mapped to pressing A/B/C on the exception screen
00000000                            ; Use 0 to disable button, use debugger's entry point otherwise.
00000000                            DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		Debugger_AddressRegisters	; display address register symbols
00000000                            DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		Debugger_Backtrace			; display exception backtrace
00000000 =00000000                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Creates assertions for debugging
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash!
00000000                            ;	assert.w	d5, eq			; d5 must be $0000!
00000000                            ;	assert.l	a1, hi, a0		; asert a1 > a0, or else crash!
00000000                            ;	assert.b	MemFlag, ne		; MemFlag must be non-zero!
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            assert	macro	src, cond, dest
00000000                            	; Assertions only work in DEBUG builds
00000000                            	if def(__DEBUG__)
00000000                            	if narg=3
00000000                            		cmp.\0	\dest, \src
00000000                            	else narg=2
00000000                            		tst.\0	\src
00000000                            	endc
00000000                            		b\cond\.s	@skip\@
00000000                            		RaiseError	"Assertion failed:%<endl>\src \cond \dest"
00000000                            	@skip\@:
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Raises an error with the given message
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	RaiseError	"Something is wrong"
00000000                            ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
00000000                            ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            	pea		*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		__global__ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			jsr		\console_program										; ... an aligned "jsr" instruction that calls console program itself
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            		endc
00000000                            	else
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)			; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController
00000000                            		else
00000000                            			dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            			even								; ... in case \opts argument is empty or skipped
00000000                            		endc
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Console interface
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	Console.Run	YourConsoleProgram
00000000                            ;	Console.Write "Hello "
00000000                            ;	Console.WriteLine "...world!"
00000000                            ;	Console.SetXY #1, #4
00000000                            ;	Console.WriteLine "Your data is %<.b d0>"
00000000                            ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            Console &
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__Console_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","run")|strcmp("\0","Run")
00000000                            		jsr		__global__ErrorHandler_ConsoleOnly
00000000                            		jsr		\1
00000000                            		bra.s	*
00000000                            	elseif strcmp("\0","clear")|strcmp("\0","Clear")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_ClearConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","pause")|strcmp("\0","Pause")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__ErrorHandler_PauseConsole
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","sleep")|strcmp("\0","Sleep")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	d0, -(sp)
00000000                            		move.l	a0, -(sp)
00000000                            		move.w	\1, d0
00000000                            		subq.w	#1, d0
00000000                            		bcs.s	@sleep_done\@
00000000                            		@sleep_loop\@:
00000000                            			jsr		__global__VSync
00000000                            			dbf		d0, @sleep_loop\@
00000000                            	@sleep_done\@:
00000000                            		move.l	(sp)+, a0
00000000                            		move.w	(sp)+, d0
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","setxy")|strcmp("\0","SetXY")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		__global__Console_SetPosAsXY_Stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__Console_StartNewLine
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            KDebug &
00000000                            	if def(__DEBUG__)	; KDebug interface is only available in DEBUG builds
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		__global__KDebug_\0\_Formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		__global__KDebug_FlushLine
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","starttimer")|strcmp("\0","StartTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9FC0, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","endtimer")|strcmp("\0","EndTimer")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9F00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakpoint")|strcmp("\0","BreakPoint")
00000000                            		move.w	sr, -(sp)
00000000                            		move.w	#$9D00, ($C00004).l
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""KDebug"""
00000000                            	endc
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		__global__ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even													; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		__global__ErrorHandler_PagesController	; ... extensions controller
00000000                            		else
00000000                            			dc.b	\opts+0
00000000                            			even
00000000                            		endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	__stack:set		0						; size of actual stack
00000000                            	__sp:	set		0						; stack displacement
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            	__lpos:	set		1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	while (__pos)
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."    
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			
00000000                            			; Validate format setting ("param")
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			elseif strcmp("\__param","signed")
00000000                            				__param: substr ,,"hex+signed"	; if param is "signed", correct it to "hex+signed"
00000000                            			endc
00000000                            			if (\__param < $80)
00000000                            				inform	2,"Illegal operand format setting: ""\__param\"". Expected ""hex"", ""dec"", ""bin"", ""sym"", ""str"" or their derivatives."
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            		__lpos:	set		__endpos+1
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                                include "Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                                include "Sound Language.asm"
00000000                            ; ===========================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; ===========================================================================
00000000                            ; Permission to use, copy, modify, and/or distribute this software for any
00000000                            ; purpose with or without fee is hereby granted.
00000000                            ;
00000000                            ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
00000000                            ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
00000000                            ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
00000000                            ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
00000000                            ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
00000000                            ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
00000000                            ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
00000000                            ; ===========================================================================
00000000                            
00000000 =00000001                  SonicDriverVer			= 1
00000000 =00000001                  SMPS2ASMVer			= 1
00000000                            ; Set the following to non-zero to use all S2 DAC samples, or to zero otherwise.
00000000                            ; The S1 samples are a subset of this.
00000000 =00000001                  use_s2_samples			= 1
00000000                            ; Set the following to non-zero to use all S3D DAC samples, or to zero
00000000                            ; otherwise. Most of the S3D samples are also present in S3/S&K, but
00000000                            ; there are two samples specific to S3D.
00000000 =00000001                  use_s3d_samples			= 1
00000000                            ; Set the following to non-zero to use all S3 DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_s3_samples			= 1
00000000                            ; Set the following to non-zero to use all S&K DAC samples,
00000000                            ; or to zero otherwise.
00000000 =00000001                  use_sk_samples			= 1
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000                            		rsset	$88
00000000 =00000088                  smpsPitch10lo		rs.b	$C
00000000 =00000094                  smpsPitch09lo		rs.b	$C
00000000 =000000A0                  smpsPitch08lo		rs.b	$C
00000000 =000000AC                  smpsPitch07lo		rs.b	$C
00000000 =000000B8                  smpsPitch06lo		rs.b	$C
00000000 =000000C4                  smpsPitch05lo		rs.b	$C
00000000 =000000D0                  smpsPitch04lo		rs.b	$C
00000000 =000000DC                  smpsPitch03lo		rs.b	$C
00000000 =000000E8                  smpsPitch02lo		rs.b	$C
00000000 =000000F4                  smpsPitch01lo		rs.b	$C
00000000                            	rsreset
00000000 =00000000                  smpsPitch00		rs.b	$C
00000000 =0000000C                  smpsPitch01hi		rs.b	$C
00000000 =00000018                  smpsPitch02hi		rs.b	$C
00000000 =00000024                  smpsPitch03hi		rs.b	$C
00000000 =00000030                  smpsPitch04hi		rs.b	$C
00000000 =0000003C                  smpsPitch05hi		rs.b	$C
00000000 =00000048                  smpsPitch06hi		rs.b	$C
00000000 =00000054                  smpsPitch07hi		rs.b	$C
00000000 =00000060                  smpsPitch08hi		rs.b	$C
00000000 =0000006C                  smpsPitch09hi		rs.b	$C
00000000 =00000078                  smpsPitch10hi		rs.b	$C
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Note Equates
00000000                            		rsset	$80
00000000 =00000080                  nRst		rs.b	1
00000000 =00000081                  nC0		rs.b	1
00000000 =00000082                  nCs0		rs.b	1
00000000 =00000083                  nD0		rs.b	1
00000000 =00000084                  nEb0		rs.b	1
00000000 =00000085                  nE0		rs.b	1
00000000 =00000086                  nF0		rs.b	1
00000000 =00000087                  nFs0		rs.b	1
00000000 =00000088                  nG0		rs.b	1
00000000 =00000089                  nAb0		rs.b	1
00000000 =0000008A                  nA0		rs.b	1
00000000 =0000008B                  nBb0		rs.b	1
00000000 =0000008C                  nB0		rs.b	1
00000000 =0000008D                  nC1		rs.b	1
00000000 =0000008E                  nCs1		rs.b	1 ;8F
00000000 =0000008F                  nD1		rs.b	1
00000000 =00000090                  nEb1		rs.b	1
00000000 =00000091                  nE1		rs.b	1
00000000 =00000092                  nF1		rs.b	1
00000000 =00000093                  nFs1		rs.b	1
00000000 =00000094                  nG1		rs.b	1
00000000 =00000095                  nAb1		rs.b	1
00000000 =00000096                  nA1		rs.b	1
00000000 =00000097                  nBb1		rs.b	1
00000000 =00000098                  nB1		rs.b	1
00000000 =00000099                  nC2		rs.b	1 ;9A
00000000 =0000009A                  nCs2		rs.b	1
00000000 =0000009B                  nD2		rs.b	1
00000000 =0000009C                  nEb2		rs.b	1
00000000 =0000009D                  nE2		rs.b	1
00000000 =0000009E                  nF2		rs.b	1
00000000 =0000009F                  nFs2		rs.b	1
00000000 =000000A0                  nG2		rs.b	1
00000000 =000000A1                  nAb2		rs.b	1
00000000 =000000A2                  nA2		rs.b	1
00000000 =000000A3                  nBb2		rs.b	1
00000000 =000000A4                  nB2		rs.b	1
00000000 =000000A5                  nC3		rs.b	1
00000000 =000000A6                  nCs3		rs.b	1
00000000 =000000A7                  nD3		rs.b	1
00000000 =000000A8                  nEb3		rs.b	1
00000000 =000000A9                  nE3		rs.b	1
00000000 =000000AA                  nF3		rs.b	1
00000000 =000000AB                  nFs3		rs.b	1
00000000 =000000AC                  nG3		rs.b	1
00000000 =000000AD                  nAb3		rs.b	1
00000000 =000000AE                  nA3		rs.b	1
00000000 =000000AF                  nBb3		rs.b	1
00000000 =000000B0                  nB3		rs.b	1
00000000 =000000B1                  nC4		rs.b	1
00000000 =000000B2                  nCs4		rs.b	1
00000000 =000000B3                  nD4		rs.b	1
00000000 =000000B4                  nEb4		rs.b	1
00000000 =000000B5                  nE4		rs.b	1
00000000 =000000B6                  nF4		rs.b	1
00000000 =000000B7                  nFs4		rs.b	1
00000000 =000000B8                  nG4		rs.b	1
00000000 =000000B9                  nAb4		rs.b	1
00000000 =000000BA                  nA4		rs.b	1
00000000 =000000BB                  nBb4		rs.b	1
00000000 =000000BC                  nB4		rs.b	1
00000000 =000000BD                  nC5		rs.b	1
00000000 =000000BE                  nCs5		rs.b	1
00000000 =000000BF                  nD5		rs.b	1
00000000 =000000C0                  nEb5		rs.b	1
00000000 =000000C1                  nE5		rs.b	1
00000000 =000000C2                  nF5		rs.b	1
00000000 =000000C3                  nFs5		rs.b	1
00000000 =000000C4                  nG5		rs.b	1
00000000 =000000C5                  nAb5		rs.b	1
00000000 =000000C6                  nA5		rs.b	1
00000000 =000000C7                  nBb5		rs.b	1
00000000 =000000C8                  nB5		rs.b	1
00000000 =000000C9                  nC6		rs.b	1
00000000 =000000CA                  nCs6		rs.b	1
00000000 =000000CB                  nD6		rs.b	1
00000000 =000000CC                  nEb6		rs.b	1
00000000 =000000CD                  nE6		rs.b	1
00000000 =000000CE                  nF6		rs.b	1
00000000 =000000CF                  nFs6		rs.b	1
00000000 =000000D0                  nG6		rs.b	1
00000000 =000000D1                  nAb6		rs.b	1
00000000 =000000D2                  nA6		rs.b	1
00000000 =000000D3                  nBb6		rs.b	1
00000000 =000000D4                  nB6		rs.b	1
00000000 =000000D5                  nC7		rs.b	1
00000000 =000000D6                  nCs7		rs.b	1
00000000 =000000D7                  nD7		rs.b	1
00000000 =000000D8                  nEb7		rs.b	1
00000000 =000000D9                  nE7		rs.b	1
00000000 =000000DA                  nF7		rs.b	1
00000000 =000000DB                  nFs7		rs.b	1
00000000 =000000DC                  nG7		rs.b	1
00000000 =000000DD                  nAb7		rs.b	1
00000000 =000000DE                  nA7		rs.b	1
00000000 =000000DF                  nBb7		rs.b	1
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; PSG volume envelope equates
00000000                            		rsset	1
00000000 =00000001                  fTone_01	rs.b	1
00000000 =00000002                  fTone_02	rs.b	1
00000000 =00000003                  fTone_03	rs.b	1
00000000 =00000004                  fTone_04	rs.b	1
00000000 =00000005                  fTone_05	rs.b	1
00000000 =00000006                  fTone_06	rs.b	1
00000000 =00000007                  fTone_07	rs.b	1
00000000 =00000008                  fTone_08	rs.b	1
00000000 =00000009                  fTone_09	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000                            		rsset	$81
00000000 =00000081                  dKick		rs.b	1
00000000 =00000082                  dSnare		rs.b	1
00000000 =00000083                  dTimpani	rs.b	1
00000000                            		rsset	$88
00000000 =00000088                  dHiTimpani	rs.b	1
00000000 =00000089                  dMidTimpani	rs.b	1
00000000 =0000008A                  dLowTimpani	rs.b	1
00000000 =0000008B                  dVLowTimpani	rs.b	1
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            little_endian macros
00000000                            		dc.w	((\1<<8)&$FF00)|((\1>>8)&$FF)
00000000                            
00000000                            z80_ptr macros
00000000                            		dc.w	((\1<<8)&$FF00)|((\1>>8)&$7F)|$80
00000000                            
00000000                            ;conv0To256  function n,((n==0)<<8)|n
00000000                            ;s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
00000000                            ;s2TempotoS3 function n,($100-((n==0)|n))&$FF
00000000                            ;s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
00000000                            ;s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
00000000                            ;s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
00000000                            ;s3TempotoS2 function n,s2TempotoS3(n)
00000000                            
00000000                            s2TempotoS1 macro n
00000000                            	s21convval:	= (((768-n)>>1)/(256-n))&$FF
00000000                            	endm
00000000                            
00000000                            s2TempotoS3 macro n
00000000                            	s23convval:	= ($100-((n=0)|n))&$FF
00000000                            	s32convval:	= s23convval
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro n
00000000                            	if n=0
00000000                            		s12convval:	= ((((256-1)<<8)+(256>>1))/256)&$FF
00000000                            	else
00000000                            		s12convval:	= ((((n-1)<<8)+(n>>1))/n)&$FF
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            s1TempotoS3 macro n
00000000                            	s1TempotoS2	n
00000000                            	s2TempotoS3	s12convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS1 macro n
00000000                            	s2TempotoS3	n
00000000                            	s2TempotoS1	s23convval
00000000                            	endm
00000000                            
00000000                            s3TempotoS2 macros
00000000                            	s2TempotoS3	\_
00000000                            
00000000                            convertMainTempoMod macro val
00000000                            	if ((SourceDriver>=3)&(SonicDriverVer>=3))|(SonicDriverVer=SourceDriver)
00000000                            		dc.b	\val
00000000                            	elseif SourceDriver=1
00000000                            		if \val\=1
00000000                            			inform 3,"Invalid main tempo of 1 in song from Sonic 1"
00000000                            		endif
00000000                            		if SonicDriverVer=2
00000000                            			s1TempotoS2	\val
00000000                            			dc.b	s12convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s1TempotoS3	\val
00000000                            			dc.b	s13convval
00000000                            		endif
00000000                            	elseif SourceDriver=2
00000000                            		if \val\=0
00000000                            			inform 3,"Invalid main tempo of 0 in song from Sonic 2"
00000000                            		endif
00000000                            		if SonicDriverVer=1
00000000                            			s2TempotoS1	\val
00000000                            			dc.b	s21convval
00000000                            		else;if SonicDriverVer>=3
00000000                            			s2TempotoS3	\val
00000000                            			dc.b	s23convval
00000000                            		endif
00000000                            	else;if SourceDriver>=3
00000000                            		if \val\=0
00000000                            			inform 2,"Performing approximate conversion of Sonic 3 main tempo modifier of 0"
00000000                            		endif
00000000                            		if SonicDriverVer=1
00000000                            			s3TempotoS1	\val
00000000                            			dc.b	s31convval
00000000                            		else;if SonicDriverVer=2
00000000                            			s3TempotoS2	\val
00000000                            			dc.b	s32convval
00000000                            		endif
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            PSGPitchConvert macro val
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b	(\val\+psgdelta)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b	(\val\-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	\val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            CheckedChannelPointer macro location
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Tracks for Sonic 1 songs must come after the start of the song"
00000000                            		else
00000000                            			dc.w	\location\-songStart
00000000                            		endif
00000000                            	endif
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver,sourcesmps2asmver
00000000                            SourceDriver set ver
00000000                            	if (narg=2)
00000000                            SourceSMPS2ASM set sourcesmps2asmver
00000000                            	else
00000000                            SourceSMPS2ASM set 0
00000000                            	endif
00000000                            songStart set *
00000000                            	if SMPS2ASMVer<SourceSMPS2ASM
00000000                            		inform 1,"Song at 0x%h was made for a newer version of SMPS2ASM (this is version %d, but song wants at least version %d).",songStart,SMPS2ASMVer,SourceSMPS2ASM
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro location
00000000                            	if songStart<>*
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endif
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr	\location\
00000000                            	else
00000000                            		if def(\location)
00000000                            			inform 3,"Voice banks for Sonic 1 songs must come after the song"
00000000                            		else
00000000                            			dc.w	\location\-songStart
00000000                            		endif
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		inform 3,"Missing smpsHeaderStartSong"
00000000                            	endif
00000000                            	if SonicDriverVer>=5
00000000                            		z80_ptr	z80_UniVoiceBank
00000000                            	elseif SonicDriverVer>=3
00000000                            		little_endian	z80_UniVoiceBank
00000000                            	else
00000000                            		inform 3,"Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            	convertMainTempoMod \mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	if strlen("\pitch")>0
00000000                            		dc.b	pitch
00000000                            		if strlen("\vol")>0
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro location,pitch,vol
00000000                            	CheckedChannelPointer \location
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro location,pitch,vol,mod,voice
00000000                            	CheckedChannelPointer \location
00000000                            	PSGPitchConvert \pitch
00000000                            	dc.b	vol
00000000                            	; Frequency envelope
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
00000000                            		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
00000000                            		; other drivers may try to process as valid data, so manually force it to 0 here.
00000000                            		dc.b	0
00000000                            	else
00000000                            		if (SonicDriverVer<3)&(SourceDriver>=3)&(\mod<>0)
00000000                            			inform 1,"This track header specifies a frequency envelope, but this driver does not support them."
00000000                            		endif
00000000                            		dc.b	\mod
00000000                            	endif
00000000                            	; Volume envelope
00000000                            	dc.b	voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,location,pitch,vol
00000000                            	if (SonicDriverVer>=3)&(chanid=cNoise)
00000000                            		inform 3,"Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	elseif (SonicDriverVer<3)&(chanid=cFM6)
00000000                            		inform 3,"Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	CheckedChannelPointer \location\
00000000                            	if (chanid&$80)<>0
00000000                            		PSGPitchConvert \pitch
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000 =00000000                  panNone equ $00
00000000 =00000040                  panRight equ $40
00000000 =00000080                  panLeft equ $80
00000000 =000000C0                  panCentre equ $C0
00000000 =000000C0                  panCenter equ $C0 ; silly Americans :U
00000000                            
00000000                            ; E1xx - Set channel detune to val
00000000                            smpsDetune macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	if SonicDriverVer<3
00000000                            		dc.b	$E2,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b	$F9
00000000                            	else
00000000                            		dc.b	$E3
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b	$E2
00000000                            		if strlen("\val")>0
00000000                            			dc.b	val
00000000                            		else
00000000                            			dc.b	$FF
00000000                            		endif
00000000                            		if SourceDriver<3
00000000                            			smpsStop
00000000                            		endif
00000000                            	elseif (SourceDriver>=3)&(strlen("\val"))&(strcmp("\val","$FF"))
00000000                            		; This is one of those weird S3+ "fades" that we don't need
00000000                            	else
00000000                            		dc.b	$E4
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	if SonicDriverVer>=5
00000000                            		; New flag unique to Flamewing's modified S&K driver
00000000                            		dc.b	$FF,$08,val
00000000                            	elseif SonicDriverVer=3
00000000                            		inform 3,"Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
00000000                            	else
00000000                            		dc.b	$E5,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	if (SonicDriverVer>=5)&(SourceDriver<3)
00000000                            		; Unique to Flamewing's modified driver
00000000                            		dc.b	$FF,$0A,val
00000000                            	else
00000000                            		if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            			inform 1,"Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            			inform 1,"Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
00000000                            		endif
00000000                            		dc.b	$E8,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsChangeTransposition macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b	$FB,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b	$FF,$00
00000000                            	else
00000000                            		dc.b	$EA
00000000                            	endif
00000000                            	convertMainTempoMod \val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b	$FF,$04,val
00000000                            	else
00000000                            		dc.b	$EB,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b	$E4,val
00000000                            	else
00000000                            		inform 3,"Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b	$ED
00000000                            	else
00000000                            		inform 3,"Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	if SonicDriverVer=1
00000000                            		dc.b	$EE
00000000                            	else
00000000                            		inform 2,"Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
00000000                            		smpsStop
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsFMvoice macro voice,songID
00000000                            	if (SonicDriverVer>=3)&(strlen("\songID")>0)
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	else
00000000                            		dc.b	$EF,voice
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            		dc.b	wait+1,speed,change,((step+1)*speed)&$FF
00000000                            	elseif (SonicDriverVer<3)&(SourceDriver>=3)
00000000                            		dc.b	wait-1,speed,change
00000000                            		conv_step:	= ((step=0)<<8)|step
00000000                            		conv_speed:	= ((speed=0)<<8)|speed
00000000                            		dc.b	(conv_step/conv_speed)-1
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro type
00000000                            	if SonicDriverVer>=3
00000000                            		if strlen("\type")>0
00000000                            			dc.b	$F4,type
00000000                            		else
00000000                            			dc.b	$F4,$80
00000000                            		endif
00000000                            	else
00000000                            		dc.b	$F1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	if SonicDriverVer>=3
00000000                            		dc.b	$FA
00000000                            	else
00000000                            		dc.b	$F4
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr loc
00000000                            	else
00000000                            		dc.w	loc-*-1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr loc
00000000                            	else
00000000                            		dc.w	loc-*-1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	if SonicDriverVer<>1
00000000                            		z80_ptr loc
00000000                            	else
00000000                            		dc.w	loc-*-1
00000000                            	endif
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if (SonicDriverVer>=3)&(strlen("\val2")>0)
00000000                            		dc.b	$E5,val1,val2
00000000                            	else
00000000                            		dc.b	$E6,val1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsMaxRelRate macro
00000000                            	if SonicDriverVer>=3
00000000                            		; Emulate it in S3/S&K/S3D driver
00000000                            		smpsFMICommand $88,$0F
00000000                            		smpsFMICommand $8C,$0F
00000000                            	else
00000000                            		dc.b	$F9
00000000                            	endif
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Backwards compatibility
00000000                            smpsAlterNote macro
00000000                            	smpsDetune	\_
00000000                            	endm
00000000                            
00000000                            smpsAlterPitch macro
00000000                            	smpsChangeTransposition	\_
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro
00000000                            	smpsFMVolEnv	\_
00000000                            	endm
00000000                            
00000000                            smpsWeirdD1LRR macro
00000000                            	smpsMaxRelRate \_
00000000                            	endm
00000000                            
00000000                            smpsSetvoice macro
00000000                            	smpsFMvoice \_
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
00000000                            vcUnusedBits set val
00000000                            	if (strlen("\d1r1")>0)&(strlen("\d1r2")>0)&(strlen("\d1r3")>0)&(strlen("\d1r4")>0)
00000000                            vcD1R1Unk set d1r1<<5
00000000                            vcD1R2Unk set d1r2<<5
00000000                            vcD1R3Unk set d1r3<<5
00000000                            vcD1R4Unk set d1r4<<5
00000000                            	else
00000000                            vcD1R1Unk set 0
00000000                            vcD1R2Unk set 0
00000000                            vcD1R3Unk set 0
00000000                            vcD1R4Unk set 0
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
00000000                            ; were the Amplitude Modulation.
00000000                            ; According to several docs, however, it's actually the high bit.
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            	if SourceSMPS2ASM=0
00000000                            vcAM1 set op1<<5
00000000                            vcAM2 set op2<<5
00000000                            vcAM3 set op3<<5
00000000                            vcAM4 set op4<<5
00000000                            	else
00000000                            vcAM1 set op1<<7
00000000                            vcAM2 set op2<<7
00000000                            vcAM3 set op3<<7
00000000                            vcAM4 set op4<<7
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            ; The original SMPS2ASM decides TL high bits automatically,
00000000                            ; but later versions leave it up to the user.
00000000                            ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
00000000                            ; then we *want* the TL bits to match the algorithm, because SMPS 68k
00000000                            ; prefers the algorithm over the TL bits, ignoring the latter, while
00000000                            ; SMPS Z80 does the opposite.
00000000                            ; Unfortunately, there's nothing we can do if we're trying to convert
00000000                            ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
00000000                            ; what we do, so we just print a warning.
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            	if SourceSMPS2ASM=0
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            	else
00000000                            vcTLMask4 set 0
00000000                            vcTLMask3 set 0
00000000                            vcTLMask2 set 0
00000000                            vcTLMask1 set 0
00000000                            	endif
00000000                            	if (SonicDriverVer>=3)&(SourceDriver<3)
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            vcTL1 set vcTL1&$7F
00000000                            vcTL2 set vcTL2&$7F
00000000                            vcTL3 set vcTL3&$7F
00000000                            vcTL4 set vcTL4&$7F
00000000                            	elseif (SonicDriverVer=3)&(SourceDriver>=3)&((((vcTL1|vcTLMask1)&$80)<>$80)|(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))|(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))|(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm=7)<<7)))
00000000                            		inform 1,"Voice at 0x%h has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers.",*
00000000                            	endif
00000000                            	if SonicDriverVer=2
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT2<<4)+vcCF2,       (vcDT3<<4)+vcCF3,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS2<<6)+vcAR2,       (vcRS3<<6)+vcAR3,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R2,                 vcD2R3,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL2<<4)+vcRR2,       (vcDL3<<4)+vcRR3,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL2|vcTLMask2,        vcTL3|vcTLMask3,        vcTL1|vcTLMask1
00000000                            	else
00000000                            		dc.b	(vcDT4<<4)+vcCF4,       (vcDT3<<4)+vcCF3,       (vcDT2<<4)+vcCF2,       (vcDT1<<4)+vcCF1
00000000                            		dc.b	(vcRS4<<6)+vcAR4,       (vcRS3<<6)+vcAR3,       (vcRS2<<6)+vcAR2,       (vcRS1<<6)+vcAR1
00000000                            		dc.b	vcAM4|vcD1R4|vcD1R4Unk, vcAM3|vcD1R3|vcD1R3Unk, vcAM2|vcD1R2|vcD1R2Unk, vcAM1|vcD1R1|vcD1R1Unk
00000000                            		dc.b	vcD2R4,                 vcD2R3,                 vcD2R2,                 vcD2R1
00000000                            		dc.b	(vcDL4<<4)+vcRR4,       (vcDL3<<4)+vcRR3,       (vcDL2<<4)+vcRR2,       (vcDL1<<4)+vcRR1
00000000                            		dc.b	vcTL4|vcTLMask4,        vcTL3|vcTLMask3,        vcTL2|vcTLMask2,        vcTL1|vcTLMask1
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"constants.asm"
00000000                            
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            ;										;
00000000                            ;	Disassembly of R11A from Sonic CD					;
00000000                            ;										;
00000000                            ;	Created by Ralakimus							;
00000000                            ;	Special thanks to flamewing and TheStoneBanana for extensive help	;
00000000                            ;										;
00000000                            ;	File 		constants.asm						;
00000000                            ;	Contents 	Mega Drive constants					;
00000000                            ;										;
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; ROM (Mega Drive)
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00000000                  ROM_START		EQU	$000000			; ROM start
00000000 =00400000                  ROM_END			EQU	$400000			; ROM end
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; SRAM (Mega Drive)
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00200000                  SRAM_START		EQU	$200000			; SRAM start
00000000 =00A130F1                  SRAM_ENABLE		EQU	$A130F1			; SRAM enable port
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Z80
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00A00000                  Z80_RAM			EQU	$A00000			; Z80 RAM start
00000000 =00A00000                  z80_ram         equ Z80_RAM
00000000 =00A02000                  Z80_END			EQU	$A02000			; Z80 RAM end
00000000 =00A11100                  Z80_BUS			EQU	$A11100			; Z80 bus request
00000000 =00A11100                  z80_bus_request equ Z80_BUS
00000000 =00A11200                  Z80_RESET		EQU	$A11200			; Z80 reset
00000000 =00A11200                  z80_reset       equ Z80_RESET
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Work RAM
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00FF0000                  RAM_START		EQU	$FF0000			; Work RAM start
00000000 =01000000                  RAM_END			EQU	$1000000		; Work RAM end
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Sound
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00A04000                  YM_ADDR_0		EQU	$A04000			; YM2612 address port 0
00000000 =00A04001                  YM_DATA_0		EQU	$A04001			; YM2612 data port 0
00000000 =00A04002                  YM_ADDR_1		EQU	$A04002			; YM2612 address port 1
00000000 =00A04003                  YM_DATA_1		EQU	$A04003			; YM2612 data port 1
00000000 =00C00011                  PSG_CTRL		EQU	$C00011			; PSG control port
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; VDP
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00C00000                  VDP_DATA		EQU	$C00000			; VDP data port
00000000 =00C00000                  vdp_data_port   equ VDP_DATA
00000000 =00C00004                  VDP_CTRL		EQU	$C00004			; VDP control port
00000000 =00C00004                  VDPCTRL         equ VDP_CTRL
00000000 =00C00004                  vdp_control_port equ VDP_CTRL
00000000 =00C00008                  VDP_HV			EQU	$C00008			; VDP H/V counter
00000000 =00C0001C                  VDP_DEBUG		EQU	$C0001C			; VDP debug register
00000000 =40000000                  VRAMWRITE	EQU	$40000000		; VRAM write
00000000 =40000000                  vram_write equ VRAMWRITE
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; I/O
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00A10001                  HW_VERSION		EQU	$A10001			; Hardware version
00000000 =00A10003                  IO_A_DATA		EQU	$A10003			; I/O port A data port
00000000 =00A10005                  IO_B_DATA		EQU	$A10005			; I/O port B data port
00000000 =00A10007                  IO_C_DATA		EQU	$A10007			; I/O port C data port
00000000 =00A10009                  IO_A_CTRL		EQU	$A10009			; I/O port A control port
00000000 =00A1000B                  IO_B_CTRL		EQU	$A1000B			; I/O port B control port
00000000 =00A1000D                  IO_C_CTRL		EQU	$A1000D			; I/O port C control port
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; TMSS (Mega Drive)
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00A14000                  TMSS_SEGA		EQU	$A14000			; TMSS "SEGA" register
00000000 =00A14100                  TMSS_MODE		EQU	$A14100			; TMSS bus mode
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; CD memory map (Mega CD)
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00000000                  CD_START		EQU	$000000			; CD memory start
00000000 =00200000                  WORDRAM_2M		EQU	CD_START+$200000	; Word RAM start in 2M mode
00000000 =00200000                  WORDRAM_1M		EQU	CD_START+$200000	; Word RAM start in 1M mode
00000000 =00220000                  CELL_IMAGE		EQU	WORDRAM_1M+$20000	; Bitmap to cell conversion buffer
00000000 =00020000                  PRG_RAM			EQU	CD_START+$20000		; PRG-RAM bank start
00000000 =00026000                  SP_START		EQU	PRG_RAM+$6000		; Sub CPU program start in PRG-RAM bank
00000000 =00FF0000                  IP_START		EQU	RAM_START		; Initial program start
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; System RAM assignments (Mega CD)
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =FFFFFD00                  _EXCPT			EQU	$FFFFFD00		; Exception
00000000 =FFFFFD06                  _LEVEL6			EQU	$FFFFFD06		; V-INT
00000000 =FFFFFD0C                  _LEVEL4			EQU	$FFFFFD0C		; H-INT
00000000 =FFFFFD12                  _LEVEL2			EQU	$FFFFFD12		; EXT-INT
00000000 =FFFFFD18                  _TRAP00			EQU	$FFFFFD18		; TRAP #00
00000000 =FFFFFD1E                  _TRAP01			EQU	$FFFFFD1E		; TRAP #01
00000000 =FFFFFD24                  _TRAP02			EQU	$FFFFFD24		; TRAP #02
00000000 =FFFFFD2A                  _TRAP03			EQU	$FFFFFD2A		; TRAP #03
00000000 =FFFFFD30                  _TRAP04			EQU	$FFFFFD30		; TRAP #04
00000000 =FFFFFD36                  _TRAP05			EQU	$FFFFFD36		; TRAP #05
00000000 =FFFFFD3C                  _TRAP06			EQU	$FFFFFD3C		; TRAP #06
00000000 =FFFFFD42                  _TRAP07			EQU	$FFFFFD42		; TRAP #07
00000000 =FFFFFD48                  _TRAP08			EQU	$FFFFFD48		; TRAP #08
00000000 =FFFFFD4E                  _TRAP09			EQU	$FFFFFD4E		; TRAP #09
00000000 =FFFFFD54                  _TRAP10			EQU	$FFFFFD54		; TRAP #10
00000000 =FFFFFD5A                  _TRAP11			EQU	$FFFFFD5A		; TRAP #11
00000000 =FFFFFD60                  _TRAP12			EQU	$FFFFFD60		; TRAP #12
00000000 =FFFFFD66                  _TRAP13			EQU	$FFFFFD66		; TRAP #13
00000000 =FFFFFD6C                  _TRAP14			EQU	$FFFFFD6C		; TRAP #14
00000000 =FFFFFD72                  _TRAP15			EQU	$FFFFFD72		; TRAP #15
00000000 =FFFFFD78                  _CHKERR			EQU	$FFFFFD78		; CHK exception
00000000 =FFFFFD7E                  _ADRERR			EQU	$FFFFFD7E		; Address error
00000000 =FFFFFD7E                  _CODERR			EQU	$FFFFFD7E		; Illegal instruction
00000000 =FFFFFD84                  _DIVERR			EQU	$FFFFFD84		; Division by zero
00000000 =FFFFFD8A                  _TRPERR			EQU	$FFFFFD8A		; TRAPV
00000000 =FFFFFD90                  _NOCOD0			EQU	$FFFFFD90		; Line A emulator
00000000 =FFFFFD96                  _NOCOD1			EQU	$FFFFFD96		; Line F emulator
00000000 =FFFFFD9C                  _SPVERR			EQU	$FFFFFD9C		; Privilege violation
00000000 =FFFFFDA2                  _TRACE			EQU	$FFFFFDA2		; TRACE exception
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Gate array
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00A12000                  GA_BASE			EQU	$A12000			; Gate array base
00000000 =00A12000                  GA_RESET		EQU	GA_BASE+$0000		; Peripheral reset
00000000 =00A12002                  GA_MEM_MODE		EQU	GA_BASE+$0002		; Memory mode/Write protection
00000000 =00A12004                  GA_CDC_MODE		EQU	GA_BASE+$0004		; CDC mode/Device destination
00000000 =00A12006                  GA_HINT			EQU	GA_BASE+$0006		; H-INT address
00000000 =00A12008                  GA_CDC_HOST		EQU	GA_BASE+$0008		; 16 bit CDC data to host
00000000 =00A1200C                  GA_STOPWATCH		EQU	GA_BASE+$000C		; CDC/gp timer 30.72us LSB
00000000 =00A1200E                  GA_COM_FLAGS		EQU	GA_BASE+$000E		; Communication flags
00000000 =00A1200E                  GA_MAIN_FLAG		EQU	GA_BASE+$000E		; Main CPU communication flag
00000000 =00A1200F                  GA_SUB_FLAG		EQU	GA_BASE+$000F		; Sub CPU communication flag
00000000 =00A12010                  GA_CMDS			EQU	GA_BASE+$0010		; Communication commands
00000000 =00A12010                  GA_CMD_0		EQU	GA_BASE+$0010		; Communication command 0
00000000 =00A12012                  GA_CMD_2		EQU	GA_BASE+$0012		; Communication command 2
00000000 =00A12014                  GA_CMD_4		EQU	GA_BASE+$0014		; Communication command 4
00000000 =00A12016                  GA_CMD_6		EQU	GA_BASE+$0016		; Communication command 6
00000000 =00A12018                  GA_CMD_8		EQU	GA_BASE+$0018		; Communication command 8
00000000 =00A1201A                  GA_CMD_A		EQU	GA_BASE+$001A		; Communication command A
00000000 =00A1201C                  GA_CMD_C		EQU	GA_BASE+$001C		; Communication command C
00000000 =00A1201E                  GA_CMD_E		EQU	GA_BASE+$001E		; Communication command E
00000000 =00A12020                  GA_STATS		EQU	GA_BASE+$0020		; Communication statuses
00000000 =00A12020                  GA_STAT_0		EQU	GA_BASE+$0020		; Communication status 0
00000000 =00A12022                  GA_STAT_2		EQU	GA_BASE+$0022		; Communication status 2
00000000 =00A12024                  GA_STAT_4		EQU	GA_BASE+$0024		; Communication status 4
00000000 =00A12026                  GA_STAT_6		EQU	GA_BASE+$0026		; Communication status 6
00000000 =00A12028                  GA_STAT_8		EQU	GA_BASE+$0028		; Communication status 8
00000000 =00A1202A                  GA_STAT_A		EQU	GA_BASE+$002A		; Communication status A
00000000 =00A1202C                  GA_STAT_C		EQU	GA_BASE+$002C		; Communication status C
00000000 =00A1202E                  GA_STAT_E		EQU	GA_BASE+$002E		; Communication status E
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ; Game modes
00000000                            id_Level:	equ ptr_GM_Level-GameModes	
00000000                            id_SoundTest: equ ptr_GM_ST-GameModes	
00000000                            id_Sega:	equ ptr_GM_Sega-GameModes	
00000000                            id_Title:	equ ptr_GM_Title-GameModes	
00000000                            
00000000                            id_Demo:	equ ptr_GM_Demo-GameModes	
00000000                            id_Special:	equ ptr_GM_Special-GameModes
00000000                            id_Continue:equ ptr_GM_Cont-GameModes	
00000000                            id_Ending:	equ ptr_GM_Ending-GameModes	
00000000                            id_Credits:	equ ptr_GM_Credits-GameModes
00000000                            
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_ST:		equ 7
00000000                            
00000000                            ; PLC Id's
00000000                            PLCID_PPZ:	        equ ptr_PPZ-PLCIndex	
00000000                            PLCID_PPZ_Past:     equ ptr_PPZ_Past-PLCIndex	
00000000                            PLCID_PPZ_Future:	equ ptr_PPZ_Future-PLCIndex	
00000000                            PLCID_PPZ_GFuture:	equ ptr_PPZ_GFuture-PLCIndex	
00000000                            
00000000                            ; Title Screen
00000000 =00000000                  ArtTile_Title_Foreground:	equ $000
00000000 =00000300                  ArtTile_Title_Sonic:		equ $300
00000000 =00000510                  ArtTile_Title_Trademark:	equ $510
00000000 =00000680                  ArtTile_Level_Select_Font:	equ $680
00000000                            
00000000                            ; VRAM Reserved regions, Title screen.
00000000 =0000C000                  VRAM_TtlScr_Plane_A_Name_Table           equ $C000	; Extends until $CFFF
00000000 =0000E000                  VRAM_TtlScr_Plane_B_Name_Table           equ $E000	; Extends until $EFFF
00000000                            
00000000 =000020C0                  ArtTile_Banner equ $20C0
00000000 =00002F80                  ArtTile_Menu equ $2F80
00000000                            
00000000 =00000000                  button_up:			EQU	0
00000000 =00000001                  button_down:			EQU	1
00000000 =00000002                  button_left:			EQU	2
00000000 =00000003                  button_right:			EQU	3
00000000 =00000004                  button_B:			EQU	4
00000000 =00000005                  button_C:			EQU	5
00000000 =00000006                  button_A:			EQU	6
00000000 =00000007                  button_start:			EQU	7
00000000                            ; Buttons masks (1 << x == pow(2, x))
00000000 =00000001                  button_up_mask:			EQU	1<<button_up	; $01
00000000 =00000002                  button_down_mask:		EQU	1<<button_down	; $02
00000000 =00000004                  button_left_mask:		EQU	1<<button_left	; $04
00000000 =00000008                  button_right_mask:		EQU	1<<button_right	; $08
00000000 =00000010                  button_B_mask:			EQU	1<<button_B	; $10
00000000 =00000020                  button_C_mask:			EQU	1<<button_C	; $20
00000000 =00000040                  button_A_mask:			EQU	1<<button_A	; $40
00000000 =00000080                  button_start_mask:		EQU	1<<button_start	; $80
00000000                            
00000000 =00000094                  bgm_S3Boss equ $94
00000000                            ;bgm_SCDBoss equ $8C
00000000 =00000095                  bgm_SSZP equ $95
00000000 =000000C4                  sfx_explosion equ $C4
00000000 =000000CC                  sfx_bumper equ $CC
00000000 =000000CC                  sfx_bumper equ $CC
00000000                            	include	"ram.asm"
00000000                            
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            ;										;
00000000                            ;	Disassembly of R11A from Sonic CD					;
00000000                            ;										;
00000000                            ;	Created by Ralakimus							;
00000000                            ;	Special thanks to flamewing and TheStoneBanana for extensive help	;
00000000                            ;										;
00000000                            ;	File 		level/ram.asm						;
00000000                            ;	Contents 	Level RAM						;
00000000                            ;										;
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Object structure
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsreset
00000000                            
00000000 =00000000                  oID				rs.b	1		; ID
00000000 =00000000                  obj equ oID
00000000 =00000001                  oRender				rs.b	1		; Render flags
00000000 =00000001                  oSprFlags           equ oRender
00000000 =00000002                  oTile				rs.w	1		; Base tile ID
00000000 =00000004                  oMap				rs.l	1		; Sprite mappings pointer
00000000 =00000004                  oSprites            equ oMap
00000000                            
00000000 =00000008                  oX				rs.w	1		; X position
00000000 =0000000A                  oYScr				rs.b	0		; Y position (screen mode)
00000000 =0000000A                  oXSub				rs.w	1		; X position subpixel
00000000 =0000000C                  oY				rs.l	1		; Y position
00000000                            
00000000 =00000010                  oXVel				rs.w	1		; X velocity
00000000 =00000012                  oYVel				rs.w	1		; Y velocity
00000000                            
00000000 =00000014                  oVar14				rs.b	1		; Object specific flags
00000000 =00000015                  oVar15				rs.b	1
00000000                            
00000000 =00000016                  oYRadius			rs.b	1		; Y radius
00000000 =00000017                  oXRadius			rs.b	1		; X radius
00000000 =00000018                  oPriority			rs.b	1		; Sprite draw priority level
00000000 =00000019                  oWidth				rs.b	1		; Width
00000000                            
00000000 =0000001A                  oMapFrame			rs.b	1		; Sprite mapping frame ID
00000000 =0000001A                  oSprFrame           equ oMapFrame
00000000 =0000001B                  oAnimFrame			rs.b	1		; Animation script frame ID
00000000 =0000001C                  oAnim				rs.b	1		; Animation ID
00000000 =0000001D                  oPrevAnim			rs.b	1		; Previous previous animation ID
00000000 =0000001E                  oAnimTime			rs.b	1		; Animation timer
00000000                            
00000000 =0000001F                  oVar1F				rs.b	1		; Object specific flag
00000000                            
00000000 =00000020                  oVar20				rs.b	0		; Object specific flag
00000000 =00000020                  oColType			rs.b	1		; Collision type
00000000 =00000021                  oVar21				rs.b	0		; Object specific flag
00000000 =00000021                  oColStatus			rs.b	1		; Collision status
00000000                            
00000000 =00000022                  oStatus				rs.b	1		; Status flags
00000000 =00000022                  oFlags              equ oStatus
00000000 =00000023                  oRespawn			rs.b	1		; Respawn table entry ID
00000000 =00000024                  oRoutine			rs.b	1		; Routine ID
00000000 =00000025                  oVar25				rs.b	0		; Object specific flag
00000000 =00000025                  oRoutine2			rs.b	1		; Secondary routine ID
00000000 =00000026                  oAngle				rs.b	1		; Angle
00000000                            
00000000 =00000027                  oVar27				rs.b	1		; Object specific flag
00000000                            
00000000 =00000028                  oSubtype			rs.b	1		; Subtype ID
00000000 =00000029                  oSubtype2			rs.b	1		; Secondary subtype ID
00000000                            
00000000 =0000002A                  oVar2A				rs.b	1		; Object specific flags
00000000 =0000002B                  oVar2B				rs.b	1
00000000 =0000002C                  oVar2C				rs.b	1
00000000 =0000002D                  oVar2D				rs.b	1
00000000 =0000002E                  oVar2E				rs.b	1
00000000 =0000002F                  oVar2F				rs.b	1
00000000 =00000030                  oVar30				rs.b	1
00000000 =00000031                  oVar31				rs.b	1
00000000 =00000032                  oVar32				rs.b	1
00000000 =00000033                  oVar33				rs.b	1
00000000 =00000034                  oVar34				rs.b	1
00000000 =00000035                  oVar35				rs.b	1
00000000 =00000036                  oVar36				rs.b	1
00000000 =00000037                  oVar37				rs.b	1
00000000 =00000038                  oVar38				rs.b	1
00000000 =00000039                  oVar39				rs.b	1
00000000 =0000003A                  oVar3A				rs.b	1
00000000 =0000003B                  oVar3B				rs.b	1
00000000 =0000003C                  oVar3C				rs.b	1
00000000 =0000003D                  oVar3D				rs.b	1
00000000 =0000003E                  oVar3E				rs.b	1
00000000 =0000003F                  oVar3F				rs.b	1
00000000                            
00000000 =00000001                  render_flags:	equ oRender	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ oTile	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ oMap	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ oX	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ oY	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ oXVel	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ oYVel	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ oYRadius	; height/2
00000000 =00000017                  x_radius:	equ oXRadius	; width/2
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000                            
00000000 =00000018                  priority:	equ oPriority	; sprite stack priority -- 0 is front
00000000 =00000019                  width_pixels:	equ oWidth	; action width
00000000 =0000001A                  mapping_frame:	equ oMapFrame	; current frame displayed
00000000 =0000001B                  anim_frame:	equ oAnimFrame	; current frame in animation script
00000000 =0000001C                  anim:		equ oAnim	; current animation
00000000 =0000001E                  anim_frame_duration: equ oAnimTime ; time to next frame
00000000 =00000022                  status:		equ oStatus ; orientation or mode
00000000 =00000023                  respawn_index:	equ oRespawn	; respawn list index number
00000000 =00000024                  routine:	equ oRoutine	; routine number
00000000 =00000025                  routine_secondary: equ oRoutine2 ; secondary routine number
00000000 =00000026                  angle:		equ oAngle	; angle
00000000 =00000028                  subtype:	equ oSubtype	; object subtype
00000000                            
00000000 =00000040                  oVarLen				rs.b	0		; Length of object structure
00000000 =00000040                  oSize equ oVarLen
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Player object variables
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000 =00000014                  oPlayerGVel			EQU	oVar14		; Ground velocity
00000000 =0000002A                  oPlayerCharge			EQU	oVar2A		; Peelout/spindash charge timer
00000000                            
00000000 =0000002C                  oPlayerCtrl			EQU	oVar2C		; Control flags
00000000 =0000003C                  oPlayerJump			EQU	oVar3C		; Jump flag
00000000 =0000003E                  oPlayerMoveLock			EQU	oVar3E		; Movement lock timer
00000000                            
00000000 =00000036                  oPlayerPriAngle			EQU	oVar36		; Primary angle
00000000 =00000037                  oPlayerSecAngle			EQU	oVar37		; Secondary angle
00000000 =00000038                  oPlayerStick			EQU	oVar38		; Collision stick flag
00000000                            
00000000 =00000030                  oPlayerHurt			EQU	oVar30		; Hurt timer
00000000 =00000032                  oPlayerInvinc			EQU	oVar32		; Invincibility timer
00000000 =00000034                  oPlayerSpeed			EQU	oVar34		; Speed shoes timer
00000000 =0000003A                  oPlayerReset			EQU	oVar3A		; Reset timer
00000000                            
00000000 =0000002B                  oPlayerRotAngle			EQU	oVar2B		; Platform rotation angle
00000000 =00000039                  oPlayerRotDist			EQU	oVar39		; Platform rotation distance
00000000                            
00000000 =00000020                  oPlayerPushObj			EQU	oVar20		; ID of object being pushed on
00000000 =0000003D                  oPlayerStandObj			EQU	oVar3D		; ID of object being stood on
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; RAM
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            	rsset	RAM_START+$F00
00000000                            
00000000 =00FF0F00                  v_ipx_flags			rs.b	1
00000000 =00FF0F01                  v_time_attack_mode		rs.b	1
00000000 =00FF0F02                  v_saved_zone			rs.w	1
00000000                            				rs.b	$C
00000000 =00FF0F10                  v_time_attack_time		rs.l	1
00000000 =00FF0F14                  v_time_attack_level		rs.w	1
00000000 =00FF0F16                  v_ipx_vdp_reg1			rs.w	1
00000000 =00FF0F18                  v_time_attack_last_lvl		rs.b	1
00000000 =00FF0F19                  v_unk_buram_var			rs.b	1
00000000 =00FF0F1A                  v_good_futures_got		rs.b	1
00000000 =00FF0F1B                  Title_Press_Start				rs.b	1
00000000 =00FF0F1C                  v_demo_id			rs.b	1
00000000 =00FF0F1D                  v_title_menu_flags		rs.b	1
00000000 =00FF0F1E                  v_title_final_state				rs.b	1
00000000 =00FF0F1F                  v_buram_init			rs.b	1
00000000 =00FF0F20                  v_got_time_stones		rs.b	1
00000000 =00FF0F21                  v_cur_spec_stage		rs.b	1
00000000 =00FF0F22                  v_pal_clear_flags		rs.b	1
00000000 =00FF0F23                  v_unk_ending_flag		rs.b	1
00000000 =00FF0F24                  v_ending_id			rs.b	1
00000000 =00FF0F25                  v_spec_stage_beat		rs.b	1
00000000                            				rs.b	$DA
00000000 =00FF1000                  v_unk_buffer 			rs.b	$200
00000000 =00FF1200                  v_obj_respawns 			rs.b	$2FE
00000000 =00FF14FE                  ChunkAddress				rs.l	1
00000000 =00FF1502                  v_level_restart			rs.w	1
00000000 =00FF1504                  v_frame_timer 			rs.w	1
00000000 =00FF1506                  v_zone 				rs.b	1
00000000 =00FF1507                  v_act 				rs.b	1
00000000 =00FF1508                  v_life_count 			rs.b	1
00000000 =00FF1509                  v_use_player2 			rs.b	1
00000000 =00FF150A                  v_air_left 			rs.w	1
00000000 =00FF150C                  v_time_over 			rs.b	1
00000000 =00FF150D                  v_1up_flags 			rs.b	1
00000000 =00FF150E                  v_update_lives 			rs.b	1
00000000 =00FF150F                  v_update_rings 			rs.b	1
00000000 =00FF1510                  v_update_time 			rs.b	1
00000000 =00FF1511                  v_update_score 			rs.b	1
00000000 =00FF1512                  v_ring_count 			rs.w	1
00000000 =00FF1514                  v_time 				rs.l	1
00000000 =00FF1518                  v_score 			rs.l	1
00000000 =00FF151C                  v_load_plc_flags		rs.b	1
00000000 =00FF151D                  v_pal_fade_flags		rs.b	1
00000000 =00FF151E                  v_shield 			rs.b	1
00000000 =00FF151F                  v_invincible 			rs.b	1
00000000 =00FF1520                  v_speed_shoes 			rs.b	1
00000000 =00FF1521                  v_time_warp_on 			rs.b	1
00000000 =00FF1522                  v_reset_lvl_flags		rs.b	1
00000000 =00FF1523                  v_saved_reset_lvl_flags		rs.b	1
00000000 =00FF1524                  v_saved_x 			rs.w	1
00000000 =00FF1526                  v_saved_y 			rs.w	1
00000000 =00FF1528                  v_travel_ring_count		rs.w	1
00000000 =00FF152A                  v_saved_time 			rs.l	1
00000000 =00FF152E                  v_time_zone 			rs.b	1
00000000                            				rs.b	1
00000000 =00FF1530                  v_saved_btm_bound		rs.w	1
00000000 =00FF1532                  v_saved_cam_fg_x		rs.w	1
00000000 =00FF1534                  v_saved_cam_fg_y		rs.w	1
00000000 =00FF1536                  v_saved_cam_bg_x		rs.w	1
00000000 =00FF1538                  v_saved_cam_bg_y		rs.w	1
00000000 =00FF153A                  v_saved_cam_bg2_x		rs.w	1
00000000 =00FF153C                  v_saved_cam_bg2_y		rs.w	1
00000000 =00FF153E                  v_saved_cam_bg3_x		rs.w	1
00000000 =00FF1540                  v_saved_cam_bg3_y		rs.w	1
00000000 =00FF1542                  v_saved_water_height2		rs.b	1
00000000 =00FF1543                  v_saved_water_rout		rs.b	1
00000000 =00FF1544                  v_saved_water_full		rs.b	1
00000000 =00FF1545                  v_travel_1up_flags		rs.b	1
00000000 =00FF1546                  v_travel_reset_lvl_flags	rs.b	1
00000000 =00FF1547                  Title_screen_option				rs.b	1
00000000 =00FF1548                  v_travel_x 			rs.w	1
00000000 =00FF154A                  v_travel_y 			rs.w	1
00000000 =00FF154C                  v_travel_status			rs.b	1
00000000                            				rs.b	1
00000000 =00FF154E                  v_travel_btm_bound		rs.b	2
00000000 =00FF1550                  v_travel_cam_fg_x		rs.w	1
00000000 =00FF1552                  v_travel_cam_fg_y		rs.w	1
00000000 =00FF1554                  v_travel_cam_bg_x		rs.w	1
00000000 =00FF1556                  v_travel_cam_bg_y		rs.w	1
00000000 =00FF1558                  v_travel_cam_bg2_x		rs.b	2
00000000 =00FF155A                  v_travel_cam_bg2_y		rs.b	2
00000000 =00FF155C                  v_travel_cam_bg3_x		rs.b	2
00000000 =00FF155E                  v_travel_cam_bg3_y		rs.b	2
00000000 =00FF1560                  v_travel_water_height2		rs.w	1
00000000 =00FF1562                  v_travel_water_rout		rs.b	1
00000000 =00FF1563                  v_travel_water_full		rs.b	1
00000000 =00FF1564                  v_travel_gvel 			rs.w	1
00000000 =00FF1566                  v_travel_xvel 			rs.w	1
00000000 =00FF1568                  v_travel_yvel 			rs.w	1
00000000 =00FF156A                  v_good_future 			rs.b	1
00000000 =00FF156A                  goodfuture equ v_good_future
00000000 =00FF156B                  v_load_shield_art		rs.b	1
00000000 =00FF156C                  v_unk_flag 			rs.b	1
00000000 =00FF156D                  v_destroyed_projector		rs.b	1
00000000 =00FF156E                  v_entered_big_ring		rs.b	1
00000000 =00FF156F                  v_blue_ring 			rs.b	1
00000000 =00FF1570                  v_travel_time 			rs.l	1
00000000 =00FF1574                  v_last_camera_plc		rs.w	1
00000000 =00FF1576                  v_load_menu_art				rs.b	1
00000000 =00FF1577                  v_amy_taken			rs.b	1
00000000 =00FF1578                  v_next_score_1up		rs.l	1
00000000 =00FF157C                  v_angle_buffer 			rs.b	1
00000000 =00FF157D                  v_angle_normal_buf		rs.b	1
00000000 =00FF157E                  v_quadrant_normal_buf		rs.b	1
00000000 =00FF157F                  v_floor_dist 			rs.b	1
00000000 =00FF1580                  v_demo_mode 			rs.w	1
00000000 =00FF1582                  BlockAddress				rs.l	1
00000000 =00FF1586                  v_hw_version 			rs.b	1
00000000                            				rs.b	1
00000000 =00FF1588                  v_debug_mode_enabled		rs.w	1
00000000 =00FF158A                  v_init_flag 			rs.l	1
00000000 =00FF158E                  v_last_checkpoint		rs.b	1
00000000                            				rs.b	1
00000000 =00FF1590                  v_good_future_flags		rs.b	1
00000000 =00FF1591                  v_saved_mini_sonic		rs.b	1
00000000                            				rs.b	1
00000000 =00FF1593                  v_travel_mini_sonic		rs.b	1
00000000                            				rs.b	$6C
00000000 =00FF1600                  v_flower_pos_buffer		rs.b	$300
00000000 =00FF1900                  v_flower_count			rs.b	3
00000000 =00FF1903                  v_enable_display		rs.b	1
00000000 =00FF1904                  v_debug_object 			rs.b	1
00000000                            				rs.b	1
00000000 =00FF1906                  v_debug_mode 			rs.w	1
00000000                            				rs.w	1
00000000 =00FF190A                  v_frame_count 			rs.l	1
00000000 =00FF190E                  v_time_stop_timer		rs.w	1
00000000 =00FF1910                  v_logspike_anim_timer		rs.b	1
00000000 =00FF1911                  v_logspike_anim_frame		rs.b	1
00000000 =00FF1912                  v_ring_anim_timer		rs.b	1
00000000 =00FF1913                  v_ring_anim_frame		rs.b	1
00000000 =00FF1914                  v_unk_anim_timer		rs.b	1
00000000 =00FF1915                  v_unk_anim_frame		rs.b	1
00000000 =00FF1916                  v_ring_spill_timer		rs.b	1
00000000 =00FF1917                  v_ring_spill_frame		rs.b	1
00000000 =00FF1918                  v_ring_spill_accum		rs.b	2
00000000                            				rs.b	$C
00000000 =00FF1926                  v_cam_x_fg_copy			rs.l	1
00000000 =00FF192A                  v_cam_y_fg_copy			rs.l	1
00000000 =00FF192E                  v_cam_x_bg_copy			rs.l	1
00000000 =00FF1932                  v_cam_y_bg_copy			rs.l	1
00000000 =00FF1936                  v_cam_x_bg2_copy		rs.l	1
00000000 =00FF193A                  v_cam_y_bg2_copy		rs.l	1
00000000 =00FF193E                  v_cam_x_bg3_copy		rs.l	1
00000000 =00FF1942                  v_cam_y_bg3_copy		rs.l	1
00000000 =00FF1946                  v_scroll_flags_copy		rs.l	1
00000000                            				rs.l	1
00000000 =00FF194E                  v_debug_block 			rs.w	1
00000000                            				rs.l	1
00000000 =00FF1954                  v_debug_subtype2		rs.b	1
00000000                            				rs.b	1
00000000 =00FF1956                  v_display_low_plane		rs.b	1
00000000 =00FF1957                  v_level_started			rs.b	1
00000000 =00FF1958                  v_boss_music_playing		rs.b	1
00000000                            				rs.w	1
00000000 =00FF195B                  v_mini_sonic 			rs.b	1
00000000                            				rs.b	$24
00000000 =00FF1980                  v_dma_buffer 			rs.b	$480
00000000 =00FF1E00                  v_layer_speeds 			rs.b	$200
00000000 =00FF2000                  v_level_blocks 			rs.b	$2000
00000000 =00FF4000                  v_unk_buffer2 			rs.b	$1000
00000000 =00FF5000                  v_snddriver_ram  rs.b	$5C0	; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000                            v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000                            v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000                            v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000                            v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000                            v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000                            v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000                            v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000                            v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000                            v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000                            v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000                            v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000                            v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000                            v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000                            v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000                            v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000                            v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000                            v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000                            v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000                            v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000                            v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000                            v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000                            v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000                            v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000                            v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000                            v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000                            v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000                            v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000                            v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000                            v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000                            v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000                            v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000                            v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000                            v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000                            v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000                            				rs.b	$2A40
00000000                            
00000000                            	rsset	RAM_START+$FF008000
00000000                            
00000000                            				rs.b	$2000
00000000 =FFFFA000                  v_lvl_layout 			rs.b	$800
00000000 =FFFFA800                  v_deform_buffer			rs.b	$200
00000000 =FFFFA800                  deformbuffer equ v_deform_buffer
00000000 =FFFFAA00                  v_nem_dec_buffer		rs.b	$200
00000000 =FFFFAC00                  v_obj_draw_queue		rs.b	$400
00000000                            				rs.b	$1800
00000000 =FFFFC800                  v_sonic_art 			rs.b	$300
00000000 =FFFFCB00                  v_sonic_record_buf		rs.b	$100
00000000 =FFFFCC00                  v_hscroll 			rs.b	$400
00000000 =FFFFCC00                  hscroll equ v_hscroll
00000000 =FFFFD000                  v_objects			rs.b	0
00000000 =FFFFD000                  objects equ v_objects
00000000 =FFFFD000                  v_player 			rs.b	$40
00000000 =FFFFD000                  objplayerslot equ v_player
00000000 =FFFFD040                  v_player2 			rs.b	$40
00000000 =FFFFD080                  v_obj_hud_score			rs.b	$40
00000000 =FFFFD0C0                  v_obj_hud_lives			rs.b	$40
00000000 =FFFFD100                  v_obj_title_card		rs.b	$40
00000000 =FFFFD140                  v_obj_hud_rings			rs.b	$40
00000000 =FFFFD180                  v_obj_shield 			rs.b	$40
00000000 =FFFFD1C0                  v_obj_bubbles 			rs.b	$40
00000000 =FFFFD200                  v_obj_inv_star1			rs.b	$40
00000000 =FFFFD240                  v_obj_inv_star2			rs.b	$40
00000000 =FFFFD280                  v_obj_inv_star3			rs.b	$40
00000000 =FFFFD2C0                  v_obj_inv_star4			rs.b	$40
00000000 =FFFFD300                  v_obj_timewarp_star1		rs.b	$40
00000000 =FFFFD340                  v_obj_timewarp_star2		rs.b	$40
00000000 =FFFFD380                  v_obj_timewarp_star3		rs.b	$40
00000000 =FFFFD3C0                  v_obj_timewarp_star4		rs.b	$40
00000000 =FFFFD400                  v_obj_sonicarm				rs.b	$40
00000000 =FFFFD440                  v_obj_banner				rs.b	$40
00000000 =FFFFD480                  v_obj_titlemenu				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000                            				rs.b	$40
00000000 =FFFFD7C0                  v_obj_hud_time_icon		rs.b	$40
00000000 =FFFFD800                  v_dyn_objects 			rs.b	$1800
00000000 =FFFFF000                  v_objects_end			rs.b	$A
00000000 =FFFFF00A                  v_snd_queue_1 			rs.b	1
00000000 =FFFFF00B                  v_snd_queue_2 			rs.b	1
00000000 =FFFFF00C                  v_snd_queue_3 			rs.b	1
00000000                            				rs.b	$5F3
00000000 =FFFFF600                  v_game_mode 			rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF602                  v_player_held 			rs.b	1
00000000 =FFFFF603                  v_player_pressed		rs.b	1
00000000 =FFFFF604                  v_ctrl1_held 			rs.b	1
00000000 =FFFFF605                  v_ctrl1_pressed			rs.b	1
00000000 =FFFFF605                  Ctrl_1_Press equ v_ctrl1_pressed
00000000 =FFFFF606                  v_ctrl2_held 			rs.b	1
00000000 =FFFFF607                  v_ctrl2_pressed			rs.b	1
00000000 =FFFFF607                  Ctrl_2_Press equ v_ctrl2_pressed
00000000                            				rs.l	1
00000000 =FFFFF60C                  v_vdp_reg_1 			rs.w	1
00000000                            				rs.b	6
00000000 =FFFFF614                  v_vint_timer 			rs.w	1
00000000 =FFFFF616                  v_vscroll 			rs.l	1
00000000 =FFFFF616                  vscrollscreen equ v_vscroll
00000000 =FFFFF61A                  v_hscroll_full 			rs.l	1
00000000                            				rs.b	6
00000000 =FFFFF624                  v_hint_counter 			rs.w	1
00000000 =FFFFF626                  v_pal_fade_start		rs.b	1
00000000 =FFFFF627                  v_pal_fade_len 			rs.b	1
00000000 =FFFFF628                  v_misc_variables		rs.b	0
00000000 =FFFFF628                  v_vint_e_count 			rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF62A                  v_vint_routine 			rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF62C                  v_sprite_count 			rs.b	1
00000000                            				rs.b	9
00000000 =FFFFF636                  v_rng_seed 			rs.l	1
00000000 =FFFFF63A                  v_paused 			rs.w	1
00000000                            				rs.l	1
00000000 =FFFFF640                  v_dma_cmd_cache			rs.w	1
00000000                            				rs.l	1
00000000 =FFFFF646                  v_water_height 			rs.w	1
00000000 =FFFFF648                  v_water_height2			rs.w	1
00000000                            				rs.b	3
00000000 =FFFFF64D                  v_water_routine			rs.b	1
00000000 =FFFFF64E                  v_water_full 			rs.b	1
00000000                            				rs.b	$17
00000000 =FFFFF666                  v_ani_art_frames		rs.b	6
00000000 =FFFFF66C                  v_ani_art_timers		rs.b	6
00000000                            				rs.b	$E
00000000 =FFFFF680                  v_plc_buffer 			rs.b	$60
00000000 =FFFFF6E0                  v_plc_nem_write 		rs.l	1
00000000 =FFFFF6E4                  v_plc_repeat 			rs.l	1
00000000 =FFFFF6E8                  v_plc_pixel 			rs.l	1
00000000 =FFFFF6EC                  v_plc_row 			rs.l	1
00000000 =FFFFF6F0                  v_plc_read 			rs.l	1
00000000 =FFFFF6F4                  v_plc_shift 			rs.l	1
00000000 =FFFFF6F8                  v_plc_tile_cnt 			rs.w	1
00000000 =FFFFF6FA                  v_plc_proc_tile_cnt 		rs.w	1
00000000 =FFFFF6FC                  v_hint_flag 			rs.w	1
00000000                            				rs.w	1
00000000 =FFFFF700                  v_cam_fg_x 			rs.l	1
00000000 =FFFFF700                  camerax equ v_cam_fg_x
00000000 =FFFFF704                  v_cam_fg_y 			rs.l	1
00000000 =FFFFF704                  cameray equ v_cam_fg_y
00000000 =FFFFF708                  v_cam_bg_x 			rs.l	1
00000000 =FFFFF708                  camerabgx equ v_cam_bg_x
00000000 =FFFFF70C                  v_cam_bg_y 			rs.l	1
00000000 =FFFFF70C                  camerabgy equ v_cam_bg_y
00000000 =FFFFF710                  v_cam_bg2_x 			rs.l	1
00000000 =FFFFF710                  camerabg2x equ v_cam_bg2_x
00000000 =FFFFF714                  v_cam_bg2_y 			rs.l	1
00000000 =FFFFF714                  camerabg2y equ v_cam_bg2_y
00000000 =FFFFF718                  v_cam_bg3_x 			rs.l	1
00000000 =FFFFF718                  camerabg3x equ v_cam_bg3_x
00000000 =FFFFF71C                  v_cam_bg3_y 			rs.l	1
00000000 =FFFFF71C                  camerabg3y equ v_cam_bg3_y
00000000 =FFFFF720                  v_dest_left_bound		rs.w	1
00000000 =FFFFF720                  destleftbound equ v_dest_left_bound
00000000 =FFFFF722                  v_dest_right_bound		rs.b	2
00000000 =FFFFF722                  destrightbound equ v_dest_right_bound
00000000 =FFFFF724                  v_dest_top_bound		rs.w	1
00000000 =FFFFF726                  v_dest_btm_bound		rs.w	1
00000000 =FFFFF726                  destbottombound equ v_dest_btm_bound
00000000 =FFFFF728                  v_left_bound 			rs.w	1
00000000 =FFFFF728                  leftbound equ v_left_bound
00000000 =FFFFF72A                  v_right_bound 			rs.w	1
00000000 =FFFFF72A                  rightbound equ v_right_bound
00000000 =FFFFF72C                  v_top_bound 			rs.w	1
00000000 =FFFFF72E                  v_bottom_bound 			rs.w	1
00000000 =FFFFF72E                  bottombound equ v_bottom_bound
00000000 =FFFFF730                  v_unused_f730 			rs.w	1
00000000 =FFFFF732                  v_left_bound3 			rs.w	1
00000000                            				rs.b	6
00000000 =FFFFF73A                  v_scroll_diff_x			rs.w	1
00000000 =FFFFF73A                  scrollxdiff equ v_scroll_diff_x
00000000 =FFFFF73C                  v_scroll_diff_y			rs.w	1
00000000 =FFFFF73C                  scrollydiff equ v_scroll_diff_y
00000000 =FFFFF73E                  v_cam_y_center 			rs.w	1
00000000 =FFFFF73E                  camycenter equ v_cam_y_center
00000000 =FFFFF740                  v_unused_f740 			rs.b	1
00000000 =FFFFF741                  v_unused_f741 			rs.b	1
00000000 =FFFFF742                  v_event_routine			rs.w	1
00000000 =FFFFF744                  v_scroll_lock 			rs.w	1
00000000 =FFFFF744                  scrolllock equ v_scroll_lock
00000000 =FFFFF746                  v_unused_f746 			rs.w	1
00000000 =FFFFF748                  v_unused_f748 			rs.w	1
00000000 =FFFFF74A                  v_horiz_blk_crossed_flag	rs.b	1
00000000 =FFFFF74B                  v_verti_blk_crossed_flag	rs.b	1
00000000 =FFFFF74C                  v_horiz_blk_cross_flag_bg	rs.b	1
00000000 =FFFFF74D                  v_verti_blk_cross_flag_bg	rs.b	1
00000000 =FFFFF74E                  v_horiz_blk_cross_flag_bg2	rs.b	2
00000000 =FFFFF750                  v_horiz_blk_cross_flag_bg3	rs.b	1
00000000                            				rs.b	1
00000000                            				rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF754                  v_scroll_flags 			rs.w	1
00000000 =FFFFF754                  scrollflags equ v_scroll_flags
00000000 =FFFFF756                  v_scroll_flags_bg		rs.w	1
00000000 =FFFFF756                  scrollflagsbg equ v_scroll_flags_bg
00000000 =FFFFF758                  v_scroll_flags_bg2		rs.w	1
00000000 =FFFFF758                  scrollflagsbg2 equ v_scroll_flags_bg2
00000000 =FFFFF75A                  v_scroll_flags_bg3		rs.w	1
00000000 =FFFFF75A                  scrollflagsbg3 equ v_scroll_flags_bg3
00000000 =FFFFF75C                  v_btm_bound_shifting		rs.w	1
00000000                            				rs.w	1
00000000 =FFFFF760                  v_sonic_top_speed		rs.w	1
00000000 =FFFFF762                  v_sonic_acceleration		rs.w	1
00000000 =FFFFF764                  v_sonic_deceleration		rs.w	1
00000000 =FFFFF766                  v_sonic_last_frame		rs.b	1
00000000 =FFFFF767                  v_sonic_frame_changed		rs.b	1
00000000 =FFFFF768                  v_primary_angle			rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF76A                  v_secondary_angle		rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF76C                  v_lvl_obj_man_rout		rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF76E                  v_obj_prev_cam_x		rs.w	1
00000000 =FFFFF770                  v_obj_load_addr_right		rs.l	1
00000000 =FFFFF774                  v_obj_load_addr_left		rs.l	1
00000000 =FFFFF778                  v_obj_load_addr2_right		rs.l	1
00000000 =FFFFF77C                  v_obj_load_addr2_left		rs.l	1
00000000 =FFFFF780                  v_bored_timer 			rs.w	1
00000000 =FFFFF782                  v_p2_bored_timer 		rs.w	1
00000000 =FFFFF784                  v_time_warp_dir			rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF786                  v_time_warp_timer		rs.w	1
00000000 =FFFFF788                  v_look_mode 			rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF78A                  v_demo_data_ptr 		rs.l	1
00000000 =FFFFF78E                  v_demo_timer 			rs.w	1
00000000 =FFFFF790                  v_s1_demo_data_index 		rs.w	1
00000000                            				rs.l	1
00000000 =FFFFF796                  v_collision_ptr			rs.l	1
00000000                            				rs.b	6
00000000 =FFFFF7A0                  v_cam_x_center 			rs.w	1
00000000                            				rs.b	5
00000000 =FFFFF7A7                  v_boss_flags			rs.b	1
00000000 =FFFFF7A7                  bossflags equ v_boss_flags
00000000 =FFFFF7A8                  v_sonic_record_index		rs.w	1
00000000 =FFFFF7AA                  v_boss_fight 			rs.b	1
00000000 =FFFFF7AA                  bossfight equ v_boss_fight
00000000                            				rs.b	1
00000000 =FFFFF7AC                  v_loop_chunks 			rs.l	1
00000000 =FFFFF7B0                  v_palcyc_steps 			rs.b	7
00000000 =FFFFF7B7                  v_palcyc_timers			rs.b	7
00000000                            				rs.b	9
00000000 =FFFFF7C7                  v_wind_tunnel_on		rs.b	1
00000000                            				rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF7CA                  v_jump_only 			rs.b	1
00000000                            				rs.b	1
00000000 =FFFFF7CC                  v_ctrl_locked 			rs.b	1
00000000                            				rs.b	3
00000000 =FFFFF7D0                  v_chain_bonus_counter		rs.w	1
00000000 =FFFFF7D2                  v_bonus_countdown_1		rs.w	1
00000000 =FFFFF7D4                  v_bonus_countdown_2		rs.w	1
00000000 =FFFFF7D6                  v_update_bonus_score		rs.b	1
00000000                            				rs.b	3
00000000 =FFFFF7DA                  v_saved_sr 			rs.w	1
00000000                            				rs.b	$24
00000000 =FFFFF800                  v_sprites 			rs.b	$200
00000000 =FFFFFA00                  v_water_fade_pal		rs.b	$80
00000000 =FFFFFA80                  v_water_palette			rs.b	$80
00000000 =FFFFFB00                  v_palette 			rs.b	$80
00000000 =FFFFFB80                  v_fade_palette 			rs.b	$80
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            	include	"macros.asm"
00000000                            
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            ;										;
00000000                            ;	Disassembly of R11A from Sonic CD					;
00000000                            ;										;
00000000                            ;	Created by Ralakimus							;
00000000                            ;	Special thanks to flamewing and TheStoneBanana for extensive help	;
00000000                            ;										;
00000000                            ;	File:		macros.asm						;
00000000                            ;	Contents:	Macros							;
00000000                            ;										;
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Align
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; PARAMETERS:
00000000                            ;	bound	- Size boundary
00000000                            ;	value	- Value to pad with
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            ALIGN macro &
00000000                            	if narg>1
00000000                            		dcb.b	((\bound)-((*)%(\bound)))%(\bound), \value
00000000                            	else
00000000                            		dcb.b	((\bound)-((*)%(\bound)))%(\bound), 0
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ----------------------------------------------------------------------------- ;
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80_S1:	macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80_S2:	macro
00000000                            .wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	.wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80_S1:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80_S1:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            VDPCMD macro ins, addr, type, rwd, end, end2
00000000                            	local	cmd
00000000                            cmd	= (\type\\rwd\)|(((\addr)&$3FFF)<<16)|((\addr)/$4000)
00000000                            	if narg=5
00000000                            		\ins	#\#cmd,\end
00000000                            	elseif narg>=6
00000000                            		\ins	#(\#cmd)\end,\end2
00000000                            	else
00000000                            		\ins	cmd
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ifarg:		macros
00000000                            		if strlen("\1")>0
00000000                            
00000000                            ifnotarg:	macros
00000000                            		if strlen("\1")=0
00000000                            		
00000000                            vdp_comm:	macro inst,addr,cmdtarget,cmd,dest,adjustment
00000000                            		command: = (\cmdtarget\_\cmd\)|((\addr&$3FFF)<<16)|((\addr&$C000)>>14)
00000000                            		ifarg \dest
00000000                            			\inst\.\0	#command\adjustment\,\dest
00000000                            		else
00000000                            			\inst\.\0	command\adjustment\
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000 =00000001                  SonicMappingsVer	EQU	1
00000000                            		include	"SpritePiece.asm"	
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            mappingsTable macro *
00000000                            \* EQU *
00000000                            current_mappings_table = \*
00000000                                endm
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            mappingsTableEntry macro ptr
00000000                            	dc.\0 ptr-current_mappings_table
00000000                                endm
00000000                            
00000000                            spriteHeader macro *
00000000                            \* EQU *
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b ((\*_End-\*-1)/5)
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w ((\*_End-\*-2)/8)
00000000                            	else
00000000                            	dc.w ((\*_End-\*-2)/6)
00000000                            	endif
00000000                                endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((pri&1)<<7)|((pal&3)<<5)|((yflip&1)<<4)|((xflip&1)<<3)|((tile&$700)>>8)
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11)|(tile&$7FF)
00000000                            	dc.w	((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11)|((tile>>1)&$7FF)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11)|(tile&$7FF)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((pri&1)<<7)|((pal&3)<<5)|((yflip&1)<<4)|((xflip&1)<<3)|((tile&$700)>>8)
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11)|(tile&$7FF)
00000000                            	dc.w	((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11)|(tile2&$7FF)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11)|(tile&$7FF)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            dplcHeader macro *
00000000                            \* EQU *
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b ((\*_End-\*-1)/2)
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w ((\*_End-\*-2)/2)
00000000                            	else
00000000                            	dc.w ((\*_End-\*-4)/2)
00000000                            	endif
00000000                                endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicMappingsVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; I don't know why, but S3K uses Sonic 2's DPLC format for players, and its own for everything else
00000000                            ; So to avoid having to set and reset SonicMappingsVer I'll just make special macros
00000000                            s3kPlayerDplcHeader macro *
00000000                            \* EQU *
00000000                            	dc.w ((\*_End-\*-2)/2)
00000000                                endm
00000000                            
00000000                            s3kPlayerDplcEntry macro tiles,offset
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endm
00000000                            	endm
00000000 =00000000                  BOSS = 0
00000000 =00000001                  fixbugs = 1
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            ; -------------------------------------------------------------------------------
00000000                            ; Header
00000000                            ; -------------------------------------------------------------------------------
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 FFFF FF90 0000 0000 FFFF+  		dc.l HBlankRAM,	ErrorTrap, VBlankRAM, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100                            ; byte_100
00000100                            Header:
00000100 5345 4741 204D 4547 4120+  		dc.b "SEGA MEGA DRIVE " ; Console name
00000110 2843 2953 4547 4120 3139+  		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release year (leftover from Sonic 1)
00000120 534F 4E49 4320 5448 4520+  		dc.b "SONIC THE             HEDGEHOG CD               " ; Domestic name
00000150 534F 4E49 4320 5448 4520+  		dc.b "SONIC THE             HEDGEHOG CD               " ; International name
00000180 474D 2030 3030 3034 3034+  		dc.b "GM 00004049-01"   ; Version (leftover from Sonic 1)
0000018E                            ; word_18E
0000018E                            Checksum:
0000018E AFC7                       		dc.w $AFC7		; Checksum (patched later if incorrect)
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  		dc.l StartOfRom		; Start address of ROM
000001A4                            ; dword_1A4
000001A4                            ROMEndLoc:
000001A4 0007 FFFF                  		dc.l $7FFFF 		; End address of ROM (leftover from Sonic 1)
000001A8 00FF 0000                  		dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  		dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020		; Backup RAM ID
000001B4 2020 2020                  		dc.l $20202020		; Backup RAM start address
000001B8 2020 2020                  		dc.l $20202020		; Backup RAM end address
000001BC 2020 2020                  		dc.l $20202020		; Modem support
000001C0 2020 2020 2020 2020 2020+  		dc.b "                                                " ; Notes (unused, anything can be put in this space, but it has to be 48 bytes.)
000001F0 4A55 4520 2020 2020 2020+  		dc.b "JUE             " ; Country code (region)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ���������������������������������������������������������������������������
00000200                            
00000200                            ; -------------------------------------------------------------------------------
00000200                            ; Entry point vector
00000200                            ; -------------------------------------------------------------------------------
00000200                            
00000200                            JmpTo_Entry:
00000200 4EF9 0000 0000             	jmp	EntryPoint
00000206                            
00000206                            ; -------------------------------------------------------------------------------
00000206                            ; Error trap vector
00000206                            ; -------------------------------------------------------------------------------
00000206                            
00000206                            JmpTo_Error:
00000206 4EF9 0000 0000             	jmp	ErrorTrap
0000020C                            
0000020C                            ; -------------------------------------------------------------------------------
0000020C                            ; H-INT routine vector
0000020C                            ; -------------------------------------------------------------------------------
0000020C                            H_Int:
0000020C                            JmpTo_HInt:
0000020C 4EF9 0000 0000             	jmp	H_Interrupt
00000212                            
00000212                            ; -------------------------------------------------------------------------------
00000212                            ; V-INT routine vector
00000212                            ; -------------------------------------------------------------------------------
00000212                            V_Int:
00000212                            JmpTo_VInt:
00000212 4EF9 0000 0000             	jmp	V_Interrupt
00000218                            
00000218                            ; -------------------------------------------------------------------------------
00000218                            ; Error trap loop
00000218                            ; -------------------------------------------------------------------------------
00000218                            
00000218                            ErrorTrap:
00000218 4E71                       	nop
0000021A 4E71                       	nop
0000021C 60FA                       	bra.s	ErrorTrap
0000021E                            
0000021E                            ; -------------------------------------------------------------------------------
0000021E                            ; Entry point
0000021E                            ; -------------------------------------------------------------------------------
0000021E                            
0000021E                            EntryPoint:
0000021E 0839 0006 00A1 000D        	btst	#6,(IO_C_CTRL).l			; Have the controller ports been initialized?
00000226 6700                       	beq.s	.DoInit					; If so, do start RAM clear
00000228 0CB9 696E 6974 00FF 158A   	cmpi.l	#'init',(v_init_flag).l			; Have we already initialized?
00000232 6700 0000                  	beq.w	.GameInit				; If so, branch
00000236                            
00000236                            .DoInit:
00000236 4DF9 00FF 1000             	lea	(v_unk_buffer).l,a6			; Clear RAM section starting at $FF1000
0000023C 7E00                       	moveq	#0,d7
0000023E 3C3C 00FF                  	move.w	#$FF,d6					; Clear $400 bytes...
00000242 3C3C 007F                  	move.w	#$7F,d6					; ...or actually $200 bytes!
00000246                            
00000246                            .ClearRAM:
00000246 2CC7                       	move.l	d7,(a6)+
00000248 51CE FFFC                  	dbf	d6,.ClearRAM				; Clear until finished
0000024C                            
0000024C 1039 00A1 0001             	move.b	(HW_VERSION).l,d0			; Get hardware region
00000252 0200 00C0                  	andi.b	#$C0,d0
00000256 13C0 00FF 1586             	move.b	d0,(v_hw_version).l
0000025C                            
0000025C 23FC 696E 6974 00FF 158A   	move.l	#'init',(v_init_flag).l			; Mark as done
00000266                            
00000266                            .GameInit:
00000266 6100 0000                  	bsr.w	InitVDP					; Initialize VDP
0000026A                            ;	jsr		SoundDriver_2Load		; Initialize SFX Only Sound Driver	
0000026A 4EB9 0000 0000                 jsr     SoundDriverLoad			; Initialize Sound Driver
00000270 6100 0000                  	bsr.w	InitJoypads				; Initialize joypads
00000274 13FC 0001 00FF 152E        	move.b  #1,(v_time_zone).l
0000027C                            
0000027C                            
0000027C 11FC 0008 F600             	move.b	#8,(v_game_mode).w			; Set game mode to "level"
00000282 41FA 0000                  	lea	GML_Int(pc),a0				; load interrupt list
00000286 3258                       	movea.w	(a0)+,a1				; load dump address
00000288 22D8                       	move.l	(a0)+,(a1)+				; jmp $0000
0000028A 22D8                       	move.l	(a0)+,(a1)+				; $0000 jmp
0000028C 22D8                       	move.l	(a0)+,(a1)+				; $00000000
0000028E                            MainGameLoop:
0000028E 1038 F600                  	move.b	(v_game_mode).w,d0			; Go to the current game mode routine
00000292 0240 001C                  	andi.w	#$1C,d0
00000296 4EBB 0000                      jsr	GameModes(pc,d0.w) ; jump to apt location in ROM
0000029A 60F2                       	bra.s	MainGameLoop	; loop indefinitely
0000029C                            
0000029C                            GML_Int:	
0000029C FF90                               dc.w	HBlankRAM&$FFFF
0000029E 4EF9 0000 0000             		jmp	PalToCRAM
000002A4 4EF9 0000 0000             		jmp	loc_B10
000002AA                            ; -------------------------------------------------------------------------------
000002AA                            ; Game modes
000002AA                            ; -------------------------------------------------------------------------------
000002AA                            
000002AA                            GameModes:
000002AA 6000 0000                  ptr_GM_Level:	bra.w	Level		; $00
000002AE 6000 0000                  ptr_GM_ST:    bra.w   Go_SoundTest	; $04
000002B2 6000 0000                  ptr_GM_Sega:	bra.w   Go_SegaScreen  ; $08
000002B6 6000 0000                  ptr_GM_Title:	bra.w   Go_TitleScreen  ; $0C
000002BA                            ; -------------------------------------------------------------------------------
000002BA                            ; Game modes jumps
000002BA                            ; -------------------------------------------------------------------------------	
000002BA                            Go_SoundTest:
000002BA 4EF9 0000 0000                 jmp (SoundTest).l
000002C0                            
000002C0                            Go_SegaScreen:
000002C0 4EF9 0000 0000                 jmp (SegaScreen).l
000002C6                            
000002C6                            Go_TitleScreen:
000002C6 4EF9 0000 0000                  jmp (TitleScreen).l
000002CC                            ; -------------------------------------------------------------------------------
000002CC                            ; Handle palette cycling
000002CC                            ; -------------------------------------------------------------------------------
000002CC                            
000002CC                            PalCycle_Load:
000002CC                            PalCycle:
000002CC 6000 0000                  	bra.w	PalCycle_Do
000002D0                            
000002D0                            	; Dead code: this is the palette cycling routine from the v0.02 prototype
000002D0                            PalCycle_Title:
000002D0 41F9 0000 0000             	lea	(PPZ_ProtoPalCyc1).l,a0			; Prepare first palette data set
000002D6 5338 F7B7                  	subq.b	#1,(v_palcyc_timers).w			; Decrement timer
000002DA 6A00                       	bpl.s	.SkipCycle1				; If this cycle's timer isn't done, branch
000002DC 11FC 0007 F7B7             	move.b	#7,(v_palcyc_timers).w			; Reset the timer
000002E2                            
000002E2 7000                       	moveq	#0,d0					; Get the current palette cycle frame
000002E4 1038 F7B0                  	move.b	(v_palcyc_steps).w,d0
000002E8 0C00 0002                  	cmpi.b	#2,d0					; Should we wrap it back to 0?
000002EC 6600                       	bne.s	.IncCycle1				; If not, don't worry about it
000002EE 7000                       	moveq	#0,d0					; If so, then do it
000002F0 6000                       	bra.s	.ApplyCycle1
000002F2                            
000002F2                            .IncCycle1:
000002F2 5200                       	addq.b	#1,d0					; Increment the palette cycle frame
000002F4                            
000002F4                            .ApplyCycle1:
000002F4 11C0 F7B0                  	move.b	d0,(v_palcyc_steps).w
000002F8                            
000002F8 E748                       	lsl.w	#3,d0					; Store the currnent palette cycle data in palette RAM
000002FA 43F8 FB6A                  	lea	(v_palette+$6A).w,a1
000002FE 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00000302 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00000306                            
00000306                            .SkipCycle1:
00000306 D0FC 0000                  	adda.w	#PPZ_ProtoPalCyc2-PPZ_ProtoPalCyc1,a0	; Prepare second palette data set
0000030A 5338 F7B8                  	subq.b	#1,(v_palcyc_timers+1).w		; Decrement timer
0000030E 6A00                       	bpl.s	.End					; If this cycle's timer isn't done, branch
00000310 11FC 0005 F7B8             	move.b	#5,(v_palcyc_timers+1).w		; Reset the timer
00000316                            
00000316 7000                       	moveq	#0,d0					; Get the current palette cycle frame
00000318 1038 F7B1                  	move.b	(v_palcyc_steps+1).w,d0
0000031C 0C00 0002                  	cmpi.b	#2,d0					; Should we wrap it back to 0?
00000320 6600                       	bne.s	.IncCycle2				; If not, don't worry about it
00000322 7000                       	moveq	#0,d0					; If so, then do it
00000324 6000                       	bra.s	.ApplyCycle2
00000326                            
00000326                            .IncCycle2:
00000326 5200                       	addq.b	#1,d0					; Increment the palette cycle frame
00000328                            
00000328                            .ApplyCycle2:
00000328 11C0 F7B1                  	move.b	d0,(v_palcyc_steps+1).w
0000032C                            
0000032C 0240 0003                  	andi.w	#3,d0					; Store the currnent palette cycle data in palette RAM
00000330 E748                       	lsl.w	#3,d0
00000332 43F8 FB58                  	lea	(v_palette+$58).w,a1
00000336 22F0 0000                  	move.l	(a0,d0.w),(a1)+
0000033A 22B0 0004                  	move.l	4(a0,d0.w),(a1)
0000033E                            
0000033E                            .End:
0000033E 4E75                       	rts
00000340                            
00000340                            ; -------------------------------------------------------------------------------
00000340                            ; Prototype palette cycle data
00000340                            ; -------------------------------------------------------------------------------
00000340                            
00000340                            PPZ_ProtoPalCyc1:
00000340 0ECC 0ECA 0EEE 0EA8        	dc.w	$ECC, $ECA, $EEE, $EA8
00000348 0EA8 0ECC 0ECC 0ECA        	dc.w	$EA8, $ECC, $ECC, $ECA
00000350 0ECA 0EA8 0ECA 0ECC        	dc.w	$ECA, $EA8, $ECA, $ECC
00000358                            
00000358                            PPZ_ProtoPalCyc2:
00000358 0ECA 0EA8 0C60 0E86        	dc.w	$ECA, $EA8, $C60, $E86
00000360 0EA8 0E86 0C60 0ECA        	dc.w	$EA8, $E86, $C60, $ECA
00000368 0E86 0ECA 0C60 0EA8        	dc.w	$E86, $ECA, $C60, $EA8
00000370                            
00000370                            ; -------------------------------------------------------------------------------
00000370                            ; The actual final palette cycling function
00000370                            ; -------------------------------------------------------------------------------
00000370                            
00000370                            PalCycle_Do:
00000370 4BF8 F7B7                  	lea	(v_palcyc_timers).w,a5			; Prepare palette cycle variables
00000374 49F8 F7B0                  	lea	(v_palcyc_steps).w,a4
00000378                            
00000378 43F9 0000 0000             	lea	(PPZ_PalCyc_Script1).l,a1		; Cycle color 1
0000037E 45F9 0000 0000             	lea	(PPZ_PalCyc_Colors1).l,a2
00000384 6100                       	bsr.s	PalCycle_OneColor
00000386                            
00000386 43F9 0000 0000             	lea	(PPZ_PalCyc_Script2).l,a1		; Cycle color 2
0000038C 45F9 0000 0000             	lea	(PPZ_PalCyc_Colors2).l,a2
00000392 6100                       	bsr.s	PalCycle_OneColor
00000394                            
00000394 43F9 0000 0000             	lea	(PPZ_PalCyc_Script3).l,a1		; Cycle color 3
0000039A 45F9 0000 0000             	lea	(PPZ_PalCyc_Colors3).l,a2
000003A0 6100                       	bsr.s	PalCycle_OneColor
000003A2                            
000003A2 43F9 0000 0000             	lea	(PPZ_PalCyc_Script4).l,a1		; Cycle color 4
000003A8 45F9 0000 0000             	lea	(PPZ_PalCyc_Colors4).l,a2
000003AE 6100                       	bsr.s	PalCycle_OneColor
000003B0                            
000003B0 43F9 0000 0000             	lea	(PPZ_PalCyc_Script5).l,a1		; Cycle color 5
000003B6 45F9 0000 0000             	lea	(PPZ_PalCyc_Colors5).l,a2
000003BC 6100                       	bsr.s	PalCycle_OneColor
000003BE                            
000003BE 43F9 0000 0000             	lea	(PPZ_PalCyc_Script6).l,a1		; Cycle color 6
000003C4 45F9 0000 0000             	lea	(PPZ_PalCyc_Colors6).l,a2
000003CA                            
000003CA                            ; -------------------------------------------------------------------------------
000003CA                            ; Cycle a color in the palette
000003CA                            ; -------------------------------------------------------------------------------
000003CA                            ; PARAMETERS:
000003CA                            ;	a4.l	- Pointer to cycle frame
000003CA                            ;	a5.l	- Pointer to timer
000003CA                            ; -------------------------------------------------------------------------------
000003CA                            
000003CA                            PalCycle_OneColor:
000003CA 5315                       	subq.b	#1,(a5)					; Decrement timer
000003CC 6A00                       	bpl.s	.End					; If it hasn't run out, branch
000003CE                            
000003CE 7000                       	moveq	#0,d0
000003D0 1019                       	move.b	(a1)+,d0				; Get palette index
000003D2 1219                       	move.b	(a1)+,d1				; Get total number of cycle frames
000003D4                            
000003D4 D040                       	add.w	d0,d0					; Get pointer to palette entry
000003D6 47F8 FB00                  	lea	(v_palette).w,a3
000003DA 47F3 0000                  	lea	(a3,d0.w),a3
000003DE                            
000003DE 7000                       	moveq	#0,d0					; Get current cycle frame
000003E0 1014                       	move.b	(a4),d0
000003E2 5200                       	addq.b	#1,d0					; Increment it
000003E4 B001                       	cmp.b	d1,d0					; Should we wrap it back to 0?
000003E6 6500                       	bcs.s	.NoReset				; If not, don't worry about it
000003E8 7000                       	moveq	#0,d0					; If so, then do it
000003EA                            
000003EA                            .NoReset:
000003EA 1880                       	move.b	d0,(a4)
000003EC                            
000003EC D040                       	add.w	d0,d0
000003EE 1AB1 0000                  	move.b	(a1,d0.w),(a5)				; Get cycle frame length
000003F2 1031 0001                  	move.b	1(a1,d0.w),d0				; Get cycle color index
000003F6 4880                       	ext.w	d0
000003F8 D040                       	add.w	d0,d0
000003FA 36B2 0000                  	move.w	(a2,d0.w),(a3)				; Store the color in palette RAM
000003FE                            
000003FE                            .End:
000003FE D8FC 0001                  	adda.w	#1,a4					; Go to next cycle frame and timer
00000402 DAFC 0001                  	adda.w	#1,a5
00000406 4E75                       	rts
00000408                            
00000408                            ; -------------------------------------------------------------------------------
00000408                            
00000408                            ; Color 1
00000408                            PPZ_PalCyc_Script1:
00000408 3103                       	dc.b	$31, 3					; Palette index, number of frames
0000040A 0800                       	dc.b	8, 0					; Frame length, color index
0000040C 0801                       	dc.b	8, 1
0000040E 0802                       	dc.b	8, 2
00000410                            PPZ_PalCyc_Colors1:
00000410 0EEE 0CC6 0EEA             	dc.w	$EEE, $CC6, $EEA
00000416                            
00000416                            ; Color 2
00000416                            PPZ_PalCyc_Script2:
00000416 3203                       	dc.b	$32, 3
00000418 0800                       	dc.b	8, 0
0000041A 0801                       	dc.b	8, 1
0000041C 0802                       	dc.b	8, 2
0000041E                            PPZ_PalCyc_Colors2:
0000041E 0EEA 0EEE 0CC6             	dc.w	$EEA, $EEE, $CC6
00000424                            
00000424                            ; Color 3
00000424                            PPZ_PalCyc_Script3:
00000424 3303                       	dc.b	$33, 3
00000426 0800                       	dc.b	8, 0
00000428 0801                       	dc.b	8, 1
0000042A 0802                       	dc.b	8, 2
0000042C                            PPZ_PalCyc_Colors3:
0000042C 0CC6 0EEA 0EEE             	dc.w	$CC6, $EEA, $EEE
00000432                            
00000432                            ; Color 4
00000432                            PPZ_PalCyc_Script4:
00000432 2C03                       	dc.b	$2C, 3
00000434 0600                       	dc.b	6, 0
00000436 0601                       	dc.b	6, 1
00000438 0602                       	dc.b	6, 2
0000043A                            PPZ_PalCyc_Colors4:
0000043A 0ECA 0EA8 0E86             	dc.w	$ECA, $EA8, $E86
00000440                            
00000440                            ; Color 5
00000440                            PPZ_PalCyc_Script5:
00000440 2D03                       	dc.b	$2D, 3
00000442 0600                       	dc.b	6, 0
00000444 0601                       	dc.b	6, 1
00000446 0602                       	dc.b	6, 2
00000448                            PPZ_PalCyc_Colors5:
00000448 0EA8 0E86 0ECA             	dc.w	$EA8, $E86, $ECA
0000044E                            
0000044E                            ; Color 6
0000044E                            PPZ_PalCyc_Script6:
0000044E 2F03                       	dc.b	$2F, 3
00000450 0600                       	dc.b	6, 0
00000452 0601                       	dc.b	6, 1
00000454 0602                       	dc.b	6, 2
00000456                            PPZ_PalCyc_Colors6:
00000456 0C86 0ECA 0EA8             	dc.w	$C86, $ECA, $EA8
0000045C                            
0000045C                            ; -------------------------------------------------------------------------------
0000045C                            ; Fade the screen from black
0000045C                            ; -------------------------------------------------------------------------------
0000045C                            
0000045C                            FadeFromBlack:
0000045C 7000                       	moveq	#0,d0					; Get starting palette fill location
0000045E 41F8 FB00                  	lea	(v_palette).w,a0
00000462 1038 F626                  	move.b	(v_pal_fade_start).w,d0
00000466 D0C0                       	adda.w	d0,a0
00000468 7200                       	moveq	#0,d1					; Get palette fill value (black)
0000046A 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fill length
0000046E                            
0000046E                            .Clear:
0000046E 30C1                       	move.w	d1,(a0)+
00000470 51C8 FFFC                  	dbf	d0,.Clear				; Fill until finished
00000474                            
00000474 383C 0015                  	move.w	#(7*3),d4				; Prepare to do fading
00000478                            
00000478                            .Fade:
00000478 11FC 0012 F62A             	move.b	#$12,(v_vint_routine).w			; VSync
0000047E 6100 0000                  	bsr.w	VSync
00000482 6100                       	bsr.s	FadeColorsFromBlack			; Fade colors once
00000484 6100 0000                  	bsr.w	ProcessPLCs				; Process PLCs
00000488 51CC FFEE                  	dbf	d4,.Fade				; Loop until fading is done
0000048C                            
0000048C 4E75                       	rts
0000048E                            
0000048E                            ; -------------------------------------------------------------------------------
0000048E                            
0000048E                            FadeColorsFromBlack:
0000048E 7000                       	moveq	#0,d0					; Get starting palette fade locations
00000490 41F8 FB00                  	lea	(v_palette).w,a0
00000494 43F8 FB80                  	lea	(v_fade_palette).w,a1
00000498 1038 F626                  	move.b	(v_pal_fade_start).w,d0
0000049C D0C0                       	adda.w	d0,a0
0000049E D2C0                       	adda.w	d0,a1
000004A0 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
000004A4                            
000004A4                            .Loop:
000004A4 6100                       	bsr.s	FadeColorFromBlack			; Fade a color
000004A6 51C8 FFFC                  	dbf	d0,.Loop				; Loop until finished
000004AA                            
000004AA 0C39 0001 00FF 1506        	cmpi.b	#1,(v_zone).l				; Are we in level ID 1 (Labyrinth Zone in Sonic 1)?
000004B2 6600                       	bne.s	.End					; If not, branch
000004B4                            
000004B4 7000                       	moveq	#0,d0					; Get starting palette fade locations for water
000004B6 41F8 FA80                  	lea	(v_water_palette).w,a0
000004BA 43F8 FA00                  	lea	(v_water_fade_pal).w,a1
000004BE 1038 F626                  	move.b	(v_pal_fade_start).w,d0
000004C2 D0C0                       	adda.w	d0,a0
000004C4 D2C0                       	adda.w	d0,a1
000004C6 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
000004CA                            
000004CA                            .LoopWater:
000004CA 6100                       	bsr.s	FadeColorFromBlack			; Fade a color
000004CC 51C8 FFFC                  	dbf	d0,.LoopWater				; Loop until finished
000004D0                            
000004D0                            .End:
000004D0 4E75                       	rts
000004D2                            
000004D2                            ; -------------------------------------------------------------------------------
000004D2                            
000004D2                            FadeColorFromBlack:
000004D2 3419                       	move.w	(a1)+,d2				; Get target color
000004D4 3610                       	move.w	(a0),d3					; Get current color
000004D6 B642                       	cmp.w	d2,d3					; Are they the same?
000004D8 6700                       	beq.s	.Skip					; If so, branch
000004DA                            
000004DA                            .Blue:
000004DA 3203                       	move.w	d3,d1					; Fade blue
000004DC 0641 0200                  	addi.w	#$200,d1
000004E0 B242                       	cmp.w	d2,d1					; Is the blue component done?
000004E2 6200                       	bhi.s	.Green					; If so, start fading green
000004E4 30C1                       	move.w	d1,(a0)+				; Update color
000004E6 4E75                       	rts
000004E8                            
000004E8                            .Green:
000004E8 3203                       	move.w	d3,d1					; Fade green
000004EA 0641 0020                  	addi.w	#$20,d1
000004EE B242                       	cmp.w	d2,d1					; Is the green component done?
000004F0 6200                       	bhi.s	.Red					; If so, start fading red
000004F2 30C1                       	move.w	d1,(a0)+				; Update color
000004F4 4E75                       	rts
000004F6                            
000004F6                            .Red:
000004F6 5458                       	addq.w	#2,(a0)+				; Fade red
000004F8 4E75                       	rts
000004FA                            
000004FA                            
000004FA                            .Skip:
000004FA 5448                       	addq.w	#2,a0					; Skip over this color
000004FC 4E75                       	rts
000004FE                            
000004FE                            ; -------------------------------------------------------------------------------
000004FE                            ; Fade the screen to black
000004FE                            ; -------------------------------------------------------------------------------
000004FE                            Pal_FadeFrom:
000004FE                            FadeToBlack:
000004FE 31FC 003F F626             	move.w	#$3F,(v_pal_fade_start).w		; Set palette fade start and length
00000504                            
00000504 383C 0015                  	move.w	#(7*3),d4				; Prepare to do fading
00000508                            
00000508                            .Fade:
00000508 11FC 0012 F62A             	move.b	#$12,(v_vint_routine).w			; VSync
0000050E 6100 0000                  	bsr.w	VSync
00000512 6100                       	bsr.s	FadeColorsToBlack			; Fade colors once
00000514 6100 0000                  	bsr.w	ProcessPLCs				; Process PLCs
00000518 51CC FFEE                  	dbf	d4,.Fade				; Loop until fading is done
0000051C                            
0000051C 4E75                       	rts
0000051E                            
0000051E                            ; -------------------------------------------------------------------------------
0000051E                            
0000051E                            FadeColorsToBlack:
0000051E 7000                       	moveq	#0,d0					; Get starting palette fade location
00000520 41F8 FB00                  	lea	(v_palette).w,a0
00000524 1038 F626                  	move.b	(v_pal_fade_start).w,d0
00000528 D0C0                       	adda.w	d0,a0
0000052A 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
0000052E                            
0000052E                            .Loop:
0000052E 6100                       	bsr.s	FadeColorToBlack			; Fade a color
00000530 51C8 FFFC                  	dbf	d0,.Loop				; Loop until finished
00000534                            
00000534 7000                       	moveq	#0,d0					; Get starting palette fade location for water
00000536 41F8 FA80                  	lea	(v_water_palette).w,a0
0000053A 1038 F626                  	move.b	(v_pal_fade_start).w,d0
0000053E D0C0                       	adda.w	d0,a0
00000540 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
00000544                            
00000544                            .LoopWater:
00000544 6100                       	bsr.s	FadeColorToBlack			; Fade a color
00000546 51C8 FFFC                  	dbf	d0,.LoopWater				; Loop until finished
0000054A                            
0000054A 4E75                       	rts
0000054C                            
0000054C                            ; -------------------------------------------------------------------------------
0000054C                            
0000054C                            FadeColorToBlack:
0000054C 3410                       	move.w	(a0),d2					; Get color
0000054E 6700                       	beq.s	.Skip					; If it's already black, branch
00000550                            
00000550                            .Red:
00000550 3202                       	move.w	d2,d1					; Get red component
00000552 0241 000E                  	andi.w	#$E,d1					; Is it already 0?
00000556 6700                       	beq.s	.Green					; If so, check green
00000558 5558                       	subq.w	#2,(a0)+				; Fade red
0000055A 4E75                       	rts
0000055C                            
0000055C                            .Green:
0000055C 3202                       	move.w	d2,d1					; Get green component
0000055E 0241 00E0                  	andi.w	#$E0,d1					; Is it already 0?
00000562 6700                       	beq.s	.Blue					; If so, check blue
00000564 0458 0020                  	subi.w	#$20,(a0)+				; Fade green
00000568 4E75                       	rts
0000056A                            
0000056A                            .Blue:
0000056A 3202                       	move.w	d2,d1					; Get blue component
0000056C 0241 0E00                  	andi.w	#$E00,d1				; Is it already 0?
00000570 6700                       	beq.s	.Skip					; If so, we're done
00000572 0458 0200                  	subi.w	#$200,(a0)+				; Fade blue
00000576 4E75                       	rts
00000578                            
00000578                            .Skip:
00000578 5448                       	addq.w	#2,a0					; Skip over this color
0000057A 4E75                       	rts
0000057C                            
0000057C                            ; -------------------------------------------------------------------------------
0000057C                            ; Fade the screen from white
0000057C                            ; -------------------------------------------------------------------------------
0000057C                            Pal_FadeTo:
0000057C                            FadeFromWhite:
0000057C 31FC 003F F626             	move.w	#$3F,(v_pal_fade_start).w		; Set palette fade start and length
00000582                            
00000582 7000                       	moveq	#0,d0					; Get starting palette fill location
00000584 41F8 FB00                  	lea	(v_palette).w,a0
00000588 1038 F626                  	move.b	(v_pal_fade_start).w,d0
0000058C D0C0                       	adda.w	d0,a0
0000058E 323C 0EEE                  	move.w	#$EEE,d1				; Get palette fill value (whiyte)
00000592 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fill length
00000596                            
00000596                            .Fill:
00000596 30C1                       	move.w	d1,(a0)+
00000598 51C8 FFFC                  	dbf	d0,.Fill				; Fill until finished
0000059C                            
0000059C 383C 0015                  	move.w	#(7*3),d4				; Prepare to do fading
000005A0                            
000005A0                            .Fade:
000005A0 11FC 0012 F62A             	move.b	#$12,(v_vint_routine).w			; VSync
000005A6 6100 0000                  	bsr.w	VSync
000005AA 6100                       	bsr.s	FadeColorsFromWhite			; Fade colors once
000005AC 6100 0000                  	bsr.w	ProcessPLCs				; Process PLCs
000005B0 51CC FFEE                  	dbf	d4,.Fade				; Loop until fading is done
000005B4                            
000005B4 4E75                       	rts
000005B6                            
000005B6                            ; -------------------------------------------------------------------------------
000005B6                            
000005B6                            FadeColorsFromWhite:
000005B6 7000                       	moveq	#0,d0					; Get starting palette fade locations
000005B8 41F8 FB00                  	lea	(v_palette).w,a0
000005BC 43F8 FB80                  	lea	(v_fade_palette).w,a1
000005C0 1038 F626                  	move.b	(v_pal_fade_start).w,d0
000005C4 D0C0                       	adda.w	d0,a0
000005C6 D2C0                       	adda.w	d0,a1
000005C8 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
000005CC                            
000005CC                            .Loop:
000005CC 6100                       	bsr.s	FadeColorFromWhite			; Fade a color
000005CE 51C8 FFFC                  	dbf	d0,.Loop				; Loop until finished
000005D2                            
000005D2 0C39 0001 00FF 1506        	cmpi.b	#1,(v_zone).l				; Are we in level ID 1 (Labyrinth Zone in Sonic 1)?
000005DA 6600                       	bne.s	.End					; If not, branch
000005DC                            
000005DC 7000                       	moveq	#0,d0					; Get starting palette fade locations for water
000005DE 41F8 FA80                  	lea	(v_water_palette).w,a0
000005E2 43F8 FA00                  	lea	(v_water_fade_pal).w,a1
000005E6 1038 F626                  	move.b	(v_pal_fade_start).w,d0
000005EA D0C0                       	adda.w	d0,a0
000005EC D2C0                       	adda.w	d0,a1
000005EE 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
000005F2                            
000005F2                            .LoopWater:
000005F2 6100                       	bsr.s	FadeColorFromWhite			; Fade a color
000005F4 51C8 FFFC                  	dbf	d0,.LoopWater				; Loop until finished
000005F8                            
000005F8                            .End:
000005F8 4E75                       	rts
000005FA                            
000005FA                            ; -------------------------------------------------------------------------------
000005FA                            
000005FA                            FadeColorFromWhite:
000005FA 3419                       	move.w	(a1)+,d2				; Get target color
000005FC 3610                       	move.w	(a0),d3					; Get current color
000005FE B642                       	cmp.w	d2,d3					; Are they the same?
00000600 6700                       	beq.s	.Skip					; If so, branch
00000602                            
00000602 3203                       	move.w	d3,d1					; Fade blue
00000604 0441 0200                  	subi.w	#$200,d1				; Is it already 0?
00000608 6500                       	bcs.s	.Green					; If so, start fading green
0000060A B242                       	cmp.w	d2,d1					; Is the blue component done?
0000060C 6500                       	bcs.s	.Green					; If so, start fading green
0000060E 30C1                       	move.w	d1,(a0)+				; Update color
00000610 4E75                       	rts
00000612                            
00000612                            .Green:
00000612 3203                       	move.w	d3,d1					; Fade green
00000614 0441 0020                  	subi.w	#$20,d1					; Is it already 0?
00000618 6500                       	bcs.s	.Red					; If so, start fading red
0000061A B242                       	cmp.w	d2,d1					; Is the green component done?
0000061C 6500                       	bcs.s	.Red					; If so, start fading red
0000061E 30C1                       	move.w	d1,(a0)+				; Update color
00000620 4E75                       	rts
00000622                            
00000622                            .Red:
00000622 5558                       	subq.w	#2,(a0)+				; Fade red
00000624 4E75                       	rts
00000626                            
00000626                            .Skip:
00000626 5448                       	addq.w	#2,a0					; Skip over this color
00000628 4E75                       	rts
0000062A                            
0000062A                            ; -------------------------------------------------------------------------------
0000062A                            ; Fade the screen to white
0000062A                            ; -------------------------------------------------------------------------------
0000062A                            
0000062A                            FadeToWhite:
0000062A 31FC 003F F626             	move.w	#$3F,(v_pal_fade_start).w		; Set palette fade start and length
00000630                            
00000630 383C 0015                  	move.w	#(7*3),d4				; Prepare to do fading
00000634                            
00000634                            .Fade:
00000634 11FC 0012 F62A             	move.b	#$12,(v_vint_routine).w			; VSync
0000063A 6100 0000                  	bsr.w	VSync
0000063E 6100                       	bsr.s	FadeColorsToWhite			; Fade colors once
00000640 6100 0000                  	bsr.w	ProcessPLCs				; Process PLCs
00000644 51CC FFEE                  	dbf	d4,.Fade				; Loop until fading is done
00000648                            
00000648 4E75                       	rts
0000064A                            
0000064A                            ; -------------------------------------------------------------------------------
0000064A                            
0000064A                            FadeColorsToWhite:
0000064A 7000                       	moveq	#0,d0					; Get starting palette fade location
0000064C 41F8 FB00                  	lea	(v_palette).w,a0
00000650 1038 F626                  	move.b	(v_pal_fade_start).w,d0
00000654 D0C0                       	adda.w	d0,a0
00000656 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
0000065A                            
0000065A                            .Loop:
0000065A 6100                       	bsr.s	FadeColorToWhite			; Fade a color
0000065C 51C8 FFFC                  	dbf	d0,.Loop				; Loop until finished
00000660                            
00000660 7000                       	moveq	#0,d0					; Get starting palette fade location for water
00000662 41F8 FA80                  	lea	(v_water_palette).w,a0
00000666 1038 F626                  	move.b	(v_pal_fade_start).w,d0
0000066A D0C0                       	adda.w	d0,a0
0000066C 1038 F627                  	move.b	(v_pal_fade_len).w,d0			; Get palette fade length
00000670                            
00000670                            .LoopWater:
00000670 6100                       	bsr.s	FadeColorToWhite			; Fade a color
00000672 51C8 FFFC                  	dbf	d0,.LoopWater				; Loop until finished
00000676 4E75                       	rts
00000678                            
00000678                            ; -------------------------------------------------------------------------------
00000678                            
00000678                            FadeColorToWhite:
00000678 3410                       	move.w	(a0),d2					; Get color
0000067A 0C42 0EEE                  	cmpi.w	#$EEE,d2				; Is it already white?
0000067E 6700                       	beq.s	.Skip					; If so, branch
00000680                            
00000680                            .Red:
00000680 3202                       	move.w	d2,d1					; Get red component
00000682 0241 000E                  	andi.w	#$E,d1					; Is it already 0?
00000686 0C41 000E                  	cmpi.w	#$E,d1
0000068A 6700                       	beq.s	.Green					; If so, check green
0000068C 5458                       	addq.w	#2,(a0)+				; Fade red
0000068E 4E75                       	rts
00000690                            
00000690                            .Green:
00000690 3202                       	move.w	d2,d1					; Get green component
00000692 0241 00E0                  	andi.w	#$E0,d1					; Is it already 0?
00000696 0C41 00E0                  	cmpi.w	#$E0,d1
0000069A 6700                       	beq.s	.Blue					; If so, check blue
0000069C 0658 0020                  	addi.w	#$20,(a0)+				; Fade green
000006A0 4E75                       	rts
000006A2                            
000006A2                            .Blue:
000006A2 3202                       	move.w	d2,d1					; Get blue component
000006A4 0241 0E00                  	andi.w	#$E00,d1				; Is it already 0?
000006A8 0C41 0E00                  	cmpi.w	#$E00,d1
000006AC 6700                       	beq.s	.Skip					; If so, we're done
000006AE 0658 0200                  	addi.w	#$200,(a0)+				; Fade blue
000006B2 4E75                       	rts
000006B4                            
000006B4                            .Skip:
000006B4 5448                       	addq.w	#2,a0					; Skip over this color
000006B6 4E75                       	rts
000006B8                            
000006B8                            ; -------------------------------------------------------------------------------
000006B8                            ; Load a palette into the fade buffer
000006B8                            ; -------------------------------------------------------------------------------
000006B8                            ; PARAMETERS:
000006B8                            ;	d0.w	- Palette ID
000006B8                            ; -------------------------------------------------------------------------------
000006B8                            PalLoad1:
000006B8                            LoadFadePal:
000006B8 43F9 0000 0000             	lea	(PaletteIndex).l,a1			; Get pointer to palette metadata
000006BE E748                       	lsl.w	#3,d0
000006C0 D2C0                       	adda.w	d0,a1
000006C2                            
000006C2 2459                       	movea.l	(a1)+,a2				; Get palette pointer
000006C4 3659                       	movea.w	(a1)+,a3				; Get palette buffer pointer
000006C6 D6FC 0080                  	adda.w	#$80,a3
000006CA 3E19                       	move.w	(a1)+,d7				; Get palette length
000006CC                            
000006CC                            .Load:
000006CC 26DA                       	move.l	(a2)+,(a3)+
000006CE 51CF FFFC                  	dbf	d7,.Load				; Loop until palette is loaded
000006D2                            
000006D2 4E75                       	rts
000006D4                            
000006D4                            ; -------------------------------------------------------------------------------
000006D4                            ; Load a palette into the palette buffer
000006D4                            ; -------------------------------------------------------------------------------
000006D4                            ; PARAMETERS:
000006D4                            ;	d0.w	- Palette ID
000006D4                            ; -------------------------------------------------------------------------------
000006D4                            PalLoad2:
000006D4                            LoadPalette:
000006D4 43F9 0000 0000             	lea	(PaletteIndex).l,a1			; Get pointer to palette metadata
000006DA E748                       	lsl.w	#3,d0
000006DC D2C0                       	adda.w	d0,a1
000006DE                            
000006DE 2459                       	movea.l	(a1)+,a2				; Get palette pointer
000006E0 3659                       	movea.w	(a1)+,a3				; Get palette buffer pointer
000006E2 3E19                       	move.w	(a1)+,d7				; Get palette length
000006E4                            
000006E4                            .Load:
000006E4 26DA                       	move.l	(a2)+,(a3)+
000006E6 51CF FFFC                  	dbf	d7,.Load				; Loop until palette is loaded
000006EA                            
000006EA 4E75                       	rts
000006EC                            
000006EC                            ; -------------------------------------------------------------------------------
000006EC                            ; Palette index
000006EC                            ; -------------------------------------------------------------------------------
000006EC                            
000006EC                            PaletteIndex:
000006EC 0000 0000                  	dc.l	Pal_S1SegaBG				; Sonic 1 SEGA screen background (leftover)
000006F0 FB00                       	dc.w	v_palette
000006F2 001F                       	dc.w	$1F
000006F4 0000 0000                  	dc.l	Pal_S1Title				; Sonic 1 title screen (leftover)
000006F8 FB00                       	dc.w	v_palette
000006FA 001F                       	dc.w	$1F
000006FC 0000 0000                  	dc.l	Pal_S1LevSel				; Sonic 1 level select screen (leftover)
00000700 FB00                       	dc.w	v_palette
00000702 001F                       	dc.w	$1F
00000704 0000 0000                  	dc.l	Pal_Sonic				; Sonic
00000708 FB00                       	dc.w	v_palette
0000070A 0007                       	dc.w	7
0000070C 0000 0000                  	dc.l	Pal_PPZPresentProto			; Palmtree Panic Present (leftover from the v0.02 prototype)
00000710 FB20                       	dc.w	v_palette+$20
00000712 0017                       	dc.w	$17
00000714 0000 0000                  	dc.l	Pal_PPZPresent				; Palmtree Panic Present
00000718 FB20                       	dc.w	v_palette+$20
0000071A 0017                       	dc.w	$17
0000071C 0000 0000                  	dc.l	Pal_TitleInt				; Title Int
00000720 FB00                       	dc.w	v_palette
00000722 001F                       	dc.w	$1F
00000724                            
00000724                            ; -------------------------------------------------------------------------------
00000724                            
00000724                            Pal_S1SegaBG:						; Sonic 1 SEGA screen background (leftover, data completely removed)
00000724                                incbin	"pallet/sega_bg.bin"
000007A4                            	even
000007A4                            Pal_S1Title:						; Sonic 1 title screen (leftover)
000007A4                            	incbin	"pallet/title.bin"
00000824                            	even
00000824                            
00000824                            Pal_S1LevSel:						; Sonic 1 level select screen (leftover)
00000824                            	incbin	"level/unused/palettes/s1levsel.bin"
000008A4                            	even
000008A4                            
000008A4                            Pal_Sonic:						; Sonic palette
000008A4                            	incbin	"level/objects/sonic/palette.bin"
000008C4                            	even
000008C4                            
000008C4                            Pal_PPZPresent:						; Palmtree Panic Present palette
000008C4                            	incbin	"level/level/PPZ1/Palletes/palette.bin"
00000924                            	even
00000924                            
00000924                            Pal_PPZPresentProto:					; Palmtree Panic Present palette (leftover from the v0.02 prototype)
00000924                            	incbin	"level/level/PPZ1/Palletes/palproto.bin"
00000984                            	even
00000984                            
00000984                            Pal_PPZPresentEnd:					; Palmtree Panic Present palette (loaded at the end of the level after going past Amy)
00000984                            	incbin	"level/level/PPZ1/Palletes/palette.bin"
000009E4                            	even
000009E4                            Pal_TitleInt:
000009E4                                incbin "pallet/TitleBlack.bin"
00000A64                            	even
00000A64                            ; -------------------------------------------------------------------------------
00000A64                            ; Check if an object should despawn offscreen
00000A64                            ; -------------------------------------------------------------------------------
00000A64                            ; PARAMETERS:
00000A64                            ;	a0.l	- Object RAM
00000A64                            ; -------------------------------------------------------------------------------
00000A64                            
00000A64                            CheckObjDespawn:
00000A64 3028 0008                  	move.w	oX(a0),d0				; Get the object's chunk position
00000A68 0240 FF80                  	andi.w	#$FF80,d0
00000A6C 3238 F700                  	move.w	(v_cam_fg_x).w,d1			; Get the camera's chunk position
00000A70 0441 0080                  	subi.w	#$80,d1
00000A74 0241 FF80                  	andi.w	#$FF80,d1
00000A78                            
00000A78 9041                       	sub.w	d1,d0					; Has the object gone offscreen?
00000A7A 0C40 0280                  	cmpi.w	#$80+(320+$40)+$80,d0
00000A7E 6200 0000                  	bhi.w	.NoDraw					; If so, mark it as "gone offscreen"
00000A82 6000 0000                  	bra.w	DrawObject				; If not, draw the object's sprite
00000A86                            
00000A86                            .NoDraw:
00000A86 45F9 00FF 1200             	lea	(v_obj_respawns).l,a2			; Prepare object respawn table
00000A8C 7000                       	moveq	#0,d0
00000A8E 1028 0023                  	move.b	oRespawn(a0),d0				; Get the object's respawn index
00000A92 6700                       	beq.s	.NoClear				; If it doesn't have one, branch
00000A94 08B2 0007 0002             	bclr	#7,2(a2,d0.w)				; Mark it as "gone offscreen"
00000A9A                            
00000A9A                            .NoClear:
00000A9A 6000 0000                  	bra.w	DeleteObject				; Delete the object
00000A9E                            
00000A9E                            ; -------------------------------------------------------------------------------
00000A9E                            ; Perform VSync
00000A9E                            ; -------------------------------------------------------------------------------
00000A9E                            WaitVBlank:
00000A9E                            WaitForVint:
00000A9E                            DelayProgram:
00000A9E                            VSync:
00000A9E 46FC 2300                  	move	#$2300,sr				; Enable interrupts
00000AA2                            
00000AA2                            .Wait:
00000AA2 4A38 F62A                  	tst.b	(v_vint_routine).w			; Has the V-INT routine run?
00000AA6 66FA                       	bne.s	.Wait					; If not, wait for it to
00000AA8                            	
00000AA8 4E75                       	rts
00000AAA                            NullBlank:	
00000AAA 4E73                           rte
00000AAC                            ; -------------------------------------------------------------------------------
00000AAC                            ; Get the sine and cosine of an angle
00000AAC                            ; -------------------------------------------------------------------------------
00000AAC                            ; PARAMETERS:
00000AAC                            ;	d0.b	- Angle
00000AAC                            ; RETURNS:
00000AAC                            ;	d0.w	- Sine
00000AAC                            ;	d1.w	- Cosine
00000AAC                            ; -------------------------------------------------------------------------------
00000AAC                            
00000AAC                            CalcSine:
00000AAC 0240 00FF                  	andi.w	#$FF,d0					; Convert angle into table index
00000AB0 D040                       	add.w	d0,d0
00000AB2 0640 0080                  	addi.w	#$80,d0					; Get cosine
00000AB6 323B 0000                  	move.w	SineTable(pc,d0.w),d1
00000ABA 0440 0080                  	subi.w	#$80,d0					; Get sine
00000ABE 303B 0000                  	move.w	SineTable(pc,d0.w),d0
00000AC2 4E75                       	rts
00000AC4                            
00000AC4                            ; -------------------------------------------------------------------------------
00000AC4                            
00000AC4                            SineTable:
00000AC4 0000 0006 000C 0012 0019+  	dc.w	$0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B, $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
00000AE4 0061 0067 006D 0073 0078+  	dc.w	$0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088, $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
00000B04 00B5 00B9 00BD 00C1 00C5+  	dc.w	$00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1, $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
00000B24 00EC 00EE 00F1 00F3 00F4+  	dc.w	$00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9, $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
00000B44 0100 00FF 00FF 00FF 00FE+  	dc.w	$0100, $00FF, $00FF, $00FF, $00FE, $00FE, $00FD, $00FC, $00FB, $00F9, $00F8, $00F6, $00F4, $00F3, $00F1, $00EE
00000B64 00EC 00EA 00E7 00E4 00E1+  	dc.w	$00EC, $00EA, $00E7, $00E4, $00E1, $00DE, $00DB, $00D8, $00D4, $00D1, $00CD, $00C9, $00C5, $00C1, $00BD, $00B9
00000B84 00B5 00B0 00AB 00A7 00A2+  	dc.w	$00B5, $00B0, $00AB, $00A7, $00A2, $009D, $0098, $0093, $008E, $0088, $0083, $007E, $0078, $0073, $006D, $0067
00000BA4 0061 005C 0056 0050 004A+  	dc.w	$0061, $005C, $0056, $0050, $004A, $0044, $003E, $0038, $0031, $002B, $0025, $001F, $0019, $0012, $000C, $0006
00000BC4 0000 FFFA FFF4 FFEE FFE7+  	dc.w	$0000, $FFFA, $FFF4, $FFEE, $FFE7, $FFE1, $FFDB, $FFD5, $FFCF, $FFC8, $FFC2, $FFBC, $FFB6, $FFB0, $FFAA, $FFA4
00000BE4 FF9F FF99 FF93 FF8B FF88+  	dc.w	$FF9F, $FF99, $FF93, $FF8B, $FF88, $FF82, $FF7D, $FF78, $FF72, $FF6D, $FF68, $FF63, $FF5E, $FF59, $FF55, $FF50
00000C04 FF4B FF47 FF43 FF3F FF3B+  	dc.w	$FF4B, $FF47, $FF43, $FF3F, $FF3B, $FF37, $FF33, $FF2F, $FF2C, $FF28, $FF25, $FF22, $FF1F, $FF1C, $FF19, $FF16
00000C24 FF14 FF12 FF0F FF0D FF0C+  	dc.w	$FF14, $FF12, $FF0F, $FF0D, $FF0C, $FF0A, $FF08, $FF07, $FF05, $FF04, $FF03, $FF02, $FF02, $FF01, $FF01, $FF01
00000C44 FF00 FF01 FF01 FF01 FF02+  	dc.w	$FF00, $FF01, $FF01, $FF01, $FF02, $FF02, $FF03, $FF04, $FF05, $FF07, $FF08, $FF0A, $FF0C, $FF0D, $FF0F, $FF12
00000C64 FF14 FF16 FF19 FF1C FF1F+  	dc.w	$FF14, $FF16, $FF19, $FF1C, $FF1F, $FF22, $FF25, $FF28, $FF2C, $FF2F, $FF33, $FF37, $FF3B, $FF3F, $FF43, $FF47
00000C84 FF4B FF50 FF55 FF59 FF5E+  	dc.w	$FF4B, $FF50, $FF55, $FF59, $FF5E, $FF63, $FF68, $FF6D, $FF72, $FF78, $FF7D, $FF82, $FF88, $FF8B, $FF93, $FF99
00000CA4 FF9F FFA4 FFAA FFB0 FFB6+  	dc.w	$FF9F, $FFA4, $FFAA, $FFB0, $FFB6, $FFBC, $FFC2, $FFC8, $FFCF, $FFD5, $FFDB, $FFE1, $FFE7, $FFEE, $FFF4, $FFFA
00000CC4                            	; Extra data for cosine
00000CC4 0000 0006 000C 0012 0019+  	dc.w	$0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B, $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
00000CE4 0061 0067 006D 0073 0078+  	dc.w	$0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088, $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
00000D04 00B5 00B9 00BD 00C1 00C5+  	dc.w	$00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1, $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
00000D24 00EC 00EE 00F1 00F3 00F4+  	dc.w	$00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9, $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
00000D44                            
00000D44                            ; -------------------------------------------------------------------------------
00000D44                            ; Calculate an angle from (0,0) to (x,y)
00000D44                            ; -------------------------------------------------------------------------------
00000D44                            ; PARAMETERS:
00000D44                            ;	d1.w	- X position
00000D44                            ;	d2.w	- Y position
00000D44                            ; -------------------------------------------------------------------------------
00000D44                            ; RETURNS:
00000D44                            ;	d0.w	- Angle
00000D44                            ; -------------------------------------------------------------------------------
00000D44                            
00000D44                            CalcAngle:
00000D44 48E7 1800                  	movem.l	d3-d4,-(sp)
00000D48 7600                       	moveq	#0,d3
00000D4A 7800                       	moveq	#0,d4
00000D4C 3601                       	move.w	d1,d3
00000D4E 3802                       	move.w	d2,d4
00000D50 8843                       	or.w	d3,d4
00000D52 6700                       	beq.s	.AngleZero				; Special case when both x and y are zero
00000D54 3802                       	move.w	d2,d4
00000D56                            
00000D56 4A43                       	tst.w	d3					; Get absolute value of X
00000D58 6A00 0000                  	bpl.w	.NotNeg1
00000D5C 4443                       	neg.w	d3
00000D5E                            
00000D5E                            .NotNeg1:
00000D5E 4A44                       	tst.w	d4					; Get absolute value of Y
00000D60 6A00 0000                  	bpl.w	.NotNeg2
00000D64 4444                       	neg.w	d4
00000D66                            
00000D66                            .NotNeg2:
00000D66 B843                       	cmp.w	d3,d4
00000D68 6400 0000                  	bcc.w	.YGreater				; If |y| >= |x|
00000D6C E18C                       	lsl.l	#8,d4
00000D6E 88C3                       	divu.w	d3,d4
00000D70 7000                       	moveq	#0,d0
00000D72 103B 4000                  	move.b	ArcTanTable(pc,d4.w),d0
00000D76 6000                       	bra.s	.CheckQuadrant
00000D78                            
00000D78                            .YGreater:
00000D78 E18B                       	lsl.l	#8,d3
00000D7A 86C4                       	divu.w	d4,d3
00000D7C 7040                       	moveq	#$40,d0
00000D7E 903B 3000                  	sub.b	ArcTanTable(pc,d3.w),d0			; arctan(y/x) = 90 - arctan(x/y)
00000D82                            
00000D82                            .CheckQuadrant:
00000D82 4A41                       	tst.w	d1
00000D84 6A00 0000                  	bpl.w	.GotHalf
00000D88 4440                       	neg.w	d0
00000D8A 0640 0080                  	addi.w	#$80,d0					; Place angle in appropriate quadrant
00000D8E                            
00000D8E                            .GotHalf:
00000D8E 4A42                       	tst.w	d2
00000D90 6A00 0000                  	bpl.w	.GotQuadrant
00000D94 4440                       	neg.w	d0
00000D96 0640 0100                  	addi.w	#$100,d0				; Place angle in appropriate quadrant
00000D9A                            
00000D9A                            .GotQuadrant:
00000D9A 4CDF 0018                  	movem.l	(sp)+,d3-d4
00000D9E 4E75                       	rts
00000DA0                            
00000DA0                            .AngleZero:
00000DA0 303C 0040                  	move.w	#$40,d0					; Angle = 90 degrees
00000DA4 4CDF 0018                  	movem.l	(sp)+,d3-d4
00000DA8 4E75                       	rts
00000DAA                            
00000DAA                            ; -------------------------------------------------------------------------------
00000DAA                            
00000DAA                            ArcTanTable:
00000DAA 0000 0000 0101             	dc.b	$00, $00, $00, $00, $01, $01
00000DB0 0101 0101 0202             	dc.b	$01, $01, $01, $01, $02, $02
00000DB6 0202 0202 0303             	dc.b	$02, $02, $02, $02, $03, $03
00000DBC 0303 0303 0304             	dc.b	$03, $03, $03, $03, $03, $04
00000DC2 0404 0404 0405             	dc.b	$04, $04, $04, $04, $04, $05
00000DC8 0505 0505 0506             	dc.b	$05, $05, $05, $05, $05, $06
00000DCE 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
00000DD4 0707 0707 0707             	dc.b	$07, $07, $07, $07, $07, $07
00000DDA 0808 0808 0808             	dc.b	$08, $08, $08, $08, $08, $08
00000DE0 0809 0909 0909             	dc.b	$08, $09, $09, $09, $09, $09
00000DE6 090A 0A0A 0A0A             	dc.b	$09, $0A, $0A, $0A, $0A, $0A
00000DEC 0A0A 0B0B 0B0B             	dc.b	$0A, $0A, $0B, $0B, $0B, $0B
00000DF2 0B0B 0B0C 0C0C             	dc.b	$0B, $0B, $0B, $0C, $0C, $0C
00000DF8 0C0C 0C0C 0D0D             	dc.b	$0C, $0C, $0C, $0C, $0D, $0D
00000DFE 0D0D 0D0D 0D0E             	dc.b	$0D, $0D, $0D, $0D, $0D, $0E
00000E04 0E0E 0E0E 0E0E             	dc.b	$0E, $0E, $0E, $0E, $0E, $0E
00000E0A 0F0F 0F0F 0F0F             	dc.b	$0F, $0F, $0F, $0F, $0F, $0F
00000E10 0F10 1010 1010             	dc.b	$0F, $10, $10, $10, $10, $10
00000E16 1010 1111 1111             	dc.b	$10, $10, $11, $11, $11, $11
00000E1C 1111 1111 1212             	dc.b	$11, $11, $11, $11, $12, $12
00000E22 1212 1212 1213             	dc.b	$12, $12, $12, $12, $12, $13
00000E28 1313 1313 1313             	dc.b	$13, $13, $13, $13, $13, $13
00000E2E 1314 1414 1414             	dc.b	$13, $14, $14, $14, $14, $14
00000E34 1414 1415 1515             	dc.b	$14, $14, $14, $15, $15, $15
00000E3A 1515 1515 1515             	dc.b	$15, $15, $15, $15, $15, $15
00000E40 1616 1616 1616             	dc.b	$16, $16, $16, $16, $16, $16
00000E46 1616 1717 1717             	dc.b	$16, $16, $17, $17, $17, $17
00000E4C 1717 1717 1718             	dc.b	$17, $17, $17, $17, $17, $18
00000E52 1818 1818 1818             	dc.b	$18, $18, $18, $18, $18, $18
00000E58 1818 1919 1919             	dc.b	$18, $18, $19, $19, $19, $19
00000E5E 1919 1919 1919             	dc.b	$19, $19, $19, $19, $19, $19
00000E64 1A1A 1A1A 1A1A             	dc.b	$1A, $1A, $1A, $1A, $1A, $1A
00000E6A 1A1A 1A1B 1B1B             	dc.b	$1A, $1A, $1A, $1B, $1B, $1B
00000E70 1B1B 1B1B 1B1B             	dc.b	$1B, $1B, $1B, $1B, $1B, $1B
00000E76 1B1C 1C1C 1C1C             	dc.b	$1B, $1C, $1C, $1C, $1C, $1C
00000E7C 1C1C 1C1C 1C1C             	dc.b	$1C, $1C, $1C, $1C, $1C, $1C
00000E82 1D1D 1D1D 1D1D             	dc.b	$1D, $1D, $1D, $1D, $1D, $1D
00000E88 1D1D 1D1D 1D1E             	dc.b	$1D, $1D, $1D, $1D, $1D, $1E
00000E8E 1E1E 1E1E 1E1E             	dc.b	$1E, $1E, $1E, $1E, $1E, $1E
00000E94 1E1E 1E1E 1F1F             	dc.b	$1E, $1E, $1E, $1E, $1F, $1F
00000E9A 1F1F 1F1F 1F1F             	dc.b	$1F, $1F, $1F, $1F, $1F, $1F
00000EA0 1F1F 1F1F 2020             	dc.b	$1F, $1F, $1F, $1F, $20, $20
00000EA6 2020 2020 2000             	dc.b	$20, $20, $20, $20, $20, $00
00000EAC                            
00000EAC                            ; -------------------------------------------------------------------------------
00000EAC                            ; Handle the player's collision on the ground
00000EAC                            ; -------------------------------------------------------------------------------
00000EAC                            ; PARAMETERS:
00000EAC                            ;	a0.l	- Player object RAM
00000EAC                            ; -------------------------------------------------------------------------------
00000EAC                            
00000EAC                            Player_LevelColOnGround:
00000EAC 0828 0003 0022             	btst	#3,oStatus(a0)				; Are we standing on an object?
00000EB2 6700                       	beq.s	.OnGround				; If not, then we are on the ground
00000EB4                            
00000EB4 7000                       	moveq	#0,d0					; Reset angle buffers
00000EB6 11C0 F768                  	move.b	d0,(v_primary_angle).w
00000EBA 11C0 F76A                  	move.b	d0,(v_secondary_angle).w
00000EBE 4E75                       	rts
00000EC0                            
00000EC0                            .OnGround:
00000EC0 7003                       	moveq	#3,d0					; Reset angle buffers
00000EC2 11C0 F768                  	move.b	d0,(v_primary_angle).w
00000EC6 11C0 F76A                  	move.b	d0,(v_secondary_angle).w
00000ECA                            
00000ECA 1028 0026                  	move.b	oAngle(a0),d0				; Get the quadrant that we are in
00000ECE 0600 0020                  	addi.b	#$20,d0
00000ED2 6A00                       	bpl.s	.HighAngle
00000ED4 1028 0026                  	move.b	oAngle(a0),d0
00000ED8 6A00                       	bpl.s	.SkipSub
00000EDA 5300                       	subq.b	#1,d0
00000EDC                            
00000EDC                            .SkipSub:
00000EDC 0600 0020                  	addi.b	#$20,d0
00000EE0 6000                       	bra.s	.GotAngle
00000EE2                            
00000EE2                            .HighAngle:
00000EE2 1028 0026                  	move.b	oAngle(a0),d0
00000EE6 6A00                       	bpl.s	.SkipAdd
00000EE8 5200                       	addq.b	#1,d0
00000EEA                            
00000EEA                            .SkipAdd:
00000EEA 0600 001F                  	addi.b	#$1F,d0
00000EEE                            
00000EEE                            .GotAngle:
00000EEE 0200 00C0                  	andi.b	#$C0,d0
00000EF2                            
00000EF2 0C00 0040                  	cmpi.b	#$40,d0					; Are we on a left wall?
00000EF6 6700 0000                  	beq.w	Player_WalkVertL			; If so, branch
00000EFA 0C00 0080                  	cmpi.b	#$80,d0					; Are we on a ceiling?
00000EFE 6700 0000                  	beq.w	Player_WalkCeiling			; If so, branch
00000F02 0C00 00C0                  	cmpi.b	#$C0,d0					; Are we on a right wall?
00000F06 6700 0000                  	beq.w	Player_WalkVertR			; If so, branch
00000F0A                            
00000F0A                            ; -------------------------------------------------------------------------------
00000F0A                            ; Move the player along a floor
00000F0A                            ; -------------------------------------------------------------------------------
00000F0A                            ; PARAMETERS:
00000F0A                            ;	a0.l	- Player object RAM
00000F0A                            ; -------------------------------------------------------------------------------
00000F0A                            
00000F0A                            Player_WalkFloor:
00000F0A 3428 000C                  	move.w	oY(a0),d2				; Get primary sensor position
00000F0E 3628 0008                  	move.w	oX(a0),d3
00000F12 7000                       	moveq	#0,d0
00000F14 1028 0016                  	move.b	oYRadius(a0),d0
00000F18 4880                       	ext.w	d0
00000F1A D440                       	add.w	d0,d2
00000F1C 1028 0017                  	move.b	oXRadius(a0),d0
00000F20 4880                       	ext.w	d0
00000F22 D640                       	add.w	d0,d3
00000F24 49F8 F768                  	lea	(v_primary_angle).w,a4			; Get floor information from this sensor
00000F28 367C 0010                  	movea.w	#$10,a3
00000F2C 3C3C 0000                  	move.w	#0,d6
00000F30 7A0D                       	moveq	#$D,d5
00000F32 6100 0000                  	bsr.w	FindLevelFloor
00000F36 3F01                       	move.w	d1,-(sp)
00000F38                            
00000F38 3428 000C                  	move.w	oY(a0),d2				; Get secondary sensor position
00000F3C 3628 0008                  	move.w	oX(a0),d3
00000F40 7000                       	moveq	#0,d0
00000F42 1028 0016                  	move.b	oYRadius(a0),d0
00000F46 4880                       	ext.w	d0
00000F48 D440                       	add.w	d0,d2
00000F4A 1028 0017                  	move.b	oXRadius(a0),d0
00000F4E 4880                       	ext.w	d0
00000F50 4440                       	neg.w	d0
00000F52 D640                       	add.w	d0,d3
00000F54                            
00000F54 49F8 F76A                  	lea	(v_secondary_angle).w,a4		; Get floor information from this sensor
00000F58 367C 0010                  	movea.w	#$10,a3
00000F5C 3C3C 0000                  	move.w	#0,d6
00000F60 7A0D                       	moveq	#$D,d5
00000F62 6100 0000                  	bsr.w	FindLevelFloor
00000F66 301F                       	move.w	(sp)+,d0
00000F68                            
00000F68 6100 0000                  	bsr.w	Player_PickSensor			; Choose which height and angle to go with
00000F6C 4A41                       	tst.w	d1					; Are we perfectly aligned to the ground?
00000F6E 6700                       	beq.s	.End					; If so, branch
00000F70 6A00                       	bpl.s	.CheckLedge				; If we are outside the floor, branch
00000F72 0C41 FFF2                  	cmpi.w	#-$E,d1					; Have we hit a wall?
00000F76 6D00                       	blt.s	Player_AnglePos_Done			; If so, branch
00000F78 D368 000C                  	add.w	d1,oY(a0)				; Align outselves onto the floor
00000F7C                            
00000F7C                            .End:
00000F7C 4E75                       	rts
00000F7E                            
00000F7E                            .CheckLedge:
00000F7E 0C41 000E                  	cmpi.w	#$E,d1					; Are we about to fall off?
00000F82 6E00                       	bgt.s	.CheckStick				; If so, branch
00000F84                            
00000F84                            .SetY:
00000F84 D368 000C                  	add.w	d1,oY(a0)				; Align ourselves onto the floor
00000F88 4E75                       	rts
00000F8A                            
00000F8A                            .CheckStick:
00000F8A 4A28 0038                  	tst.b	oPlayerStick(a0)			; Are we sticking to a surface?
00000F8E 66F4                       	bne.s	.SetY					; If so, align to the floor anyways
00000F90                            
00000F90 08E8 0001 0022             	bset	#1,oStatus(a0)				; Fall off the ground
00000F96 08A8 0005 0022             	bclr	#5,oStatus(a0)
00000F9C 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
00000FA2 4E75                       	rts
00000FA4                            
00000FA4                            ; -------------------------------------------------------------------------------
00000FA4                            
00000FA4                            Player_AnglePos_Done:
00000FA4 4E75                       	rts
00000FA6                            
00000FA6                            ; -------------------------------------------------------------------------------
00000FA6                            ; Some kind of unsued (and broken) object movement with gravity routine
00000FA6                            ; -------------------------------------------------------------------------------
00000FA6                            ; PARAMETERS:
00000FA6                            ;	a0.l	- Player object RAM
00000FA6                            ; -------------------------------------------------------------------------------
00000FA6                            
00000FA6                            BrokenObjMoveGrv:
00000FA6 2428 0008                  	move.l	oX(a0),d2				; Apply X velocity
00000FAA 3028 0010                  	move.w	oXVel(a0),d0
00000FAE 48C0                       	ext.l	d0
00000FB0 E180                       	asl.l	#8,d0
00000FB2 9480                       	sub.l	d0,d2
00000FB4 2142 0008                  	move.l	d2,oX(a0)
00000FB8                            
00000FB8 303C 0038                  	move.w	#$38,d0					; Apply gravity without first applying Y velocity
00000FBC 48C0                       	ext.l	d0					; ...and getting the Y position first
00000FBE E180                       	asl.l	#8,d0
00000FC0 9680                       	sub.l	d0,d3
00000FC2 2143 000C                  	move.l	d3,oY(a0)
00000FC6 4E75                       	rts
00000FC8                            
00000FC8                            ; -------------------------------------------------------------------------------
00000FC8                            
00000FC8                            Player_WalkVert_Done:
00000FC8 4E75                       	rts
00000FCA                            
00000FCA                            ; -------------------------------------------------------------------------------
00000FCA                            ; Unused routine to apply Y velocity and reverse gravity onto an object
00000FCA                            ; -------------------------------------------------------------------------------
00000FCA                            ; PARAMETERS:
00000FCA                            ;	a0.l	- Player object RAM
00000FCA                            ; -------------------------------------------------------------------------------
00000FCA                            
00000FCA                            ObjMoveYRevGrv:
00000FCA 2628 000C                  	move.l	oY(a0),d3				; Apply Y velocity
00000FCE 3028 0012                  	move.w	oYVel(a0),d0
00000FD2 0440 0038                  	subi.w	#$38,d0					; ...and reversed gravity
00000FD6 3140 0012                  	move.w	d0,oYVel(a0)
00000FDA 48C0                       	ext.l	d0
00000FDC E180                       	asl.l	#8,d0
00000FDE 9680                       	sub.l	d0,d3
00000FE0 2143 000C                  	move.l	d3,oY(a0)
00000FE4 4E75                       	rts
00000FE6 4E75                       	rts
00000FE8                            
00000FE8                            ; -------------------------------------------------------------------------------
00000FE8                            ; Apply X and Y velocity onto an object (unused)
00000FE8                            ; -------------------------------------------------------------------------------
00000FE8                            ; PARAMETERS:
00000FE8                            ;	a0.l	- Player object RAM
00000FE8                            ; -------------------------------------------------------------------------------
00000FE8                            
00000FE8                            ObjMoveUnused:
00000FE8 2428 0008                  	move.l	oX(a0),d2				; Get position
00000FEC 2628 000C                  	move.l	oY(a0),d3
00000FF0                            
00000FF0 3028 0010                  	move.w	oXVel(a0),d0				; Apply X velocity
00000FF4 48C0                       	ext.l	d0
00000FF6 E180                       	asl.l	#8,d0
00000FF8 9480                       	sub.l	d0,d2
00000FFA                            
00000FFA 3028 0012                  	move.w	oYVel(a0),d0				; Apply Y velocity
00000FFE 48C0                       	ext.l	d0
00001000 E180                       	asl.l	#8,d0
00001002 9680                       	sub.l	d0,d3
00001004                            
00001004 2142 0008                  	move.l	d2,oX(a0)				; Update position
00001008 2143 000C                  	move.l	d3,oY(a0)
0000100C 4E75                       	rts
0000100E                            
0000100E                            ; -------------------------------------------------------------------------------
0000100E                            ; Pick a sensor to use to align the player to the ground
0000100E                            ; -------------------------------------------------------------------------------
0000100E                            ; PARAMETERS:
0000100E                            ;	a0.l	- Player object RAM
0000100E                            ; -------------------------------------------------------------------------------
0000100E                            
0000100E                            Player_PickSensor:
0000100E 1438 F76A                  	move.b	(v_secondary_angle).w,d2		; Use secondary angle
00001012 B240                       	cmp.w	d0,d1					; Is the primary sensor on the higher ground?
00001014 6F00                       	ble.s	.GotAngle				; If not, branch
00001016 1438 F768                  	move.b	(v_primary_angle).w,d2			; Use primary angle
0000101A 3200                       	move.w	d0,d1					; Use primary floor height
0000101C                            
0000101C                            .GotAngle:
0000101C 0802 0000                  	btst	#0,d2					; Was the level block found a flat surface?
00001020 6600                       	bne.s	.FlatSurface				; If so, branch
00001022 1142 0026                  	move.b	d2,oAngle(a0)				; Update angle
00001026 4E75                       	rts
00001028                            
00001028                            .FlatSurface:
00001028 1428 0026                  	move.b	oAngle(a0),d2				; Shift ourselves to the next quadrant
0000102C 0602 0020                  	addi.b	#$20,d2
00001030 0202 00C0                  	andi.b	#$C0,d2
00001034 1142 0026                  	move.b	d2,oAngle(a0)
00001038 4E75                       	rts
0000103A                            
0000103A                            ; -------------------------------------------------------------------------------
0000103A                            ; Move the player along a right wall
0000103A                            ; -------------------------------------------------------------------------------
0000103A                            ; PARAMETERS:
0000103A                            ;	a0.l	- Player object RAM
0000103A                            ; -------------------------------------------------------------------------------
0000103A                            
0000103A                            Player_WalkVertR:
0000103A 3428 000C                  	move.w	oY(a0),d2				; Get primary sensor position
0000103E 3628 0008                  	move.w	oX(a0),d3
00001042 7000                       	moveq	#0,d0
00001044 1028 0017                  	move.b	oXRadius(a0),d0
00001048 4880                       	ext.w	d0
0000104A 4440                       	neg.w	d0
0000104C D440                       	add.w	d0,d2
0000104E 1028 0016                  	move.b	oYRadius(a0),d0
00001052 4880                       	ext.w	d0
00001054 D640                       	add.w	d0,d3
00001056 49F8 F768                  	lea	(v_primary_angle).w,a4			; Get floor information from this sensor
0000105A 367C 0010                  	movea.w	#$10,a3
0000105E 3C3C 0000                  	move.w	#0,d6
00001062 7A0D                       	moveq	#$D,d5
00001064 6100 0000                  	bsr.w	FindLevelWall
00001068 3F01                       	move.w	d1,-(sp)
0000106A                            
0000106A 3428 000C                  	move.w	oY(a0),d2				; Get secondary sensor position
0000106E 3628 0008                  	move.w	oX(a0),d3
00001072 7000                       	moveq	#0,d0
00001074 1028 0017                  	move.b	oXRadius(a0),d0
00001078 4880                       	ext.w	d0
0000107A D440                       	add.w	d0,d2
0000107C 1028 0016                  	move.b	oYRadius(a0),d0
00001080 4880                       	ext.w	d0
00001082 D640                       	add.w	d0,d3
00001084 49F8 F76A                  	lea	(v_secondary_angle).w,a4		; Get floor information from this sensor
00001088 367C 0010                  	movea.w	#$10,a3
0000108C 3C3C 0000                  	move.w	#0,d6
00001090 7A0D                       	moveq	#$D,d5
00001092 6100 0000                  	bsr.w	FindLevelWall
00001096 301F                       	move.w	(sp)+,d0
00001098                            
00001098 6100 FF74                  	bsr.w	Player_PickSensor			; Choose which height and angle to go with
0000109C 4A41                       	tst.w	d1					; Are we perfectly aligned to the ground?
0000109E 6700                       	beq.s	.End					; If so, branch
000010A0 6A00                       	bpl.s	.CheckLedge				; If we are outside the wall, branch
000010A2 0C41 FFF2                  	cmpi.w	#-$E,d1					; Have we hit a wall?
000010A6 6D00 FF20                  	blt.w	Player_WalkVert_Done			; If so, branch
000010AA D368 0008                  	add.w	d1,oX(a0)				; Align outselves onto the wall
000010AE                            
000010AE                            .End:
000010AE 4E75                       	rts
000010B0                            
000010B0                            .CheckLedge:
000010B0 0C41 000E                  	cmpi.w	#$E,d1					; Are we about to fall off?
000010B4 6E00                       	bgt.s	.CheckStick				; If so, branch
000010B6                            
000010B6                            .SetX:
000010B6 D368 0008                  	add.w	d1,oX(a0)				; Align ourselves onto the wall
000010BA 4E75                       	rts
000010BC                            
000010BC                            .CheckStick:
000010BC 4A28 0038                  	tst.b	oPlayerStick(a0)			; Are we sticking to a surface?
000010C0 66F4                       	bne.s	.SetX					; If so, align to the wall anyways
000010C2                            
000010C2 08E8 0001 0022             	bset	#1,oStatus(a0)				; Fall off the ground
000010C8 08A8 0005 0022             	bclr	#5,oStatus(a0)
000010CE 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
000010D4 4E75                       	rts
000010D6                            
000010D6                            ; -------------------------------------------------------------------------------
000010D6                            ; Move the player along a ceiling
000010D6                            ; -------------------------------------------------------------------------------
000010D6                            ; PARAMETERS:
000010D6                            ;	a0.l	- Player object RAM
000010D6                            ; -------------------------------------------------------------------------------
000010D6                            
000010D6                            Player_WalkCeiling:
000010D6 3428 000C                  	move.w	oY(a0),d2				; Get primary sensor position
000010DA 3628 0008                  	move.w	oX(a0),d3
000010DE 7000                       	moveq	#0,d0
000010E0 1028 0016                  	move.b	oYRadius(a0),d0
000010E4 4880                       	ext.w	d0
000010E6 9440                       	sub.w	d0,d2
000010E8 0A42 000F                  	eori.w	#$F,d2
000010EC 1028 0017                  	move.b	oXRadius(a0),d0
000010F0 4880                       	ext.w	d0
000010F2 D640                       	add.w	d0,d3
000010F4 49F8 F768                  	lea	(v_primary_angle).w,a4			; Get floor information from this sensor
000010F8 367C FFF0                  	movea.w	#-$10,a3
000010FC 3C3C 1000                  	move.w	#$1000,d6
00001100 7A0D                       	moveq	#$D,d5
00001102 6100 0000                  	bsr.w	FindLevelFloor
00001106 3F01                       	move.w	d1,-(sp)
00001108                            
00001108 3428 000C                  	move.w	oY(a0),d2				; Get secondary sensor position
0000110C 3628 0008                  	move.w	oX(a0),d3
00001110 7000                       	moveq	#0,d0
00001112 1028 0016                  	move.b	oYRadius(a0),d0
00001116 4880                       	ext.w	d0
00001118 9440                       	sub.w	d0,d2
0000111A 0A42 000F                  	eori.w	#$F,d2
0000111E 1028 0017                  	move.b	oXRadius(a0),d0
00001122 4880                       	ext.w	d0
00001124 9640                       	sub.w	d0,d3
00001126 49F8 F76A                  	lea	(v_secondary_angle).w,a4		; Get floor information from this sensor
0000112A 367C FFF0                  	movea.w	#-$10,a3
0000112E 3C3C 1000                  	move.w	#$1000,d6
00001132 7A0D                       	moveq	#$D,d5
00001134 6100 0000                  	bsr.w	FindLevelFloor
00001138 301F                       	move.w	(sp)+,d0
0000113A                            
0000113A 6100 FED2                  	bsr.w	Player_PickSensor			; Choose which height and angle to go with
0000113E 4A41                       	tst.w	d1					; Are we perfectly aligned to the ground?
00001140 6700                       	beq.s	.End					; If so, branch
00001142 6A00                       	bpl.s	.CheckLedge				; If we are outside the ceiling, branch
00001144 0C41 FFF2                  	cmpi.w	#-$E,d1					; Have we hit a ceiling?
00001148 6D00 FE5A                  	blt.w	Player_AnglePos_Done			; If so, branch
0000114C 9368 000C                  	sub.w	d1,oY(a0)				; Align outselves onto the ceiling
00001150                            
00001150                            .End:
00001150 4E75                       	rts
00001152                            
00001152                            .CheckLedge:
00001152 0C41 000E                  	cmpi.w	#$E,d1					; Are we about to fall off?
00001156 6E00                       	bgt.s	.CheckStick				; If so, branch
00001158                            
00001158                            .SetY:
00001158 9368 000C                  	sub.w	d1,oY(a0)				; Align ourselves onto the ceiling
0000115C 4E75                       	rts
0000115E                            
0000115E                            .CheckStick:
0000115E 4A28 0038                  	tst.b	oPlayerStick(a0)			; Are we sticking to a surface?
00001162 66F4                       	bne.s	.SetY					; If so, align to the ceiling anyways
00001164                            
00001164 08E8 0001 0022             	bset	#1,oStatus(a0)				; Fall off the ground
0000116A 08A8 0005 0022             	bclr	#5,oStatus(a0)
00001170 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
00001176 4E75                       	rts
00001178                            
00001178                            ; -------------------------------------------------------------------------------
00001178                            ; Move the player along a left wall
00001178                            ; -------------------------------------------------------------------------------
00001178                            ; PARAMETERS:
00001178                            ;	a0.l	- Player object RAM
00001178                            ; -------------------------------------------------------------------------------
00001178                            
00001178                            Player_WalkVertL:
00001178 3428 000C                  	move.w	oY(a0),d2				; Get primary sensor position
0000117C 3628 0008                  	move.w	oX(a0),d3
00001180 7000                       	moveq	#0,d0
00001182 1028 0017                  	move.b	oXRadius(a0),d0
00001186 4880                       	ext.w	d0
00001188 9440                       	sub.w	d0,d2
0000118A 1028 0016                  	move.b	oYRadius(a0),d0
0000118E 4880                       	ext.w	d0
00001190 9640                       	sub.w	d0,d3
00001192 0A43 000F                  	eori.w	#$F,d3
00001196 49F8 F768                  	lea	(v_primary_angle).w,a4			; Get floor information from this sensor
0000119A 367C FFF0                  	movea.w	#-$10,a3
0000119E 3C3C 0800                  	move.w	#$800,d6
000011A2 7A0D                       	moveq	#$D,d5
000011A4 6100 0000                  	bsr.w	FindLevelWall
000011A8 3F01                       	move.w	d1,-(sp)
000011AA                            
000011AA 3428 000C                  	move.w	oY(a0),d2				; Get secondary sensor position
000011AE 3628 0008                  	move.w	oX(a0),d3
000011B2 7000                       	moveq	#0,d0
000011B4 1028 0017                  	move.b	oXRadius(a0),d0
000011B8 4880                       	ext.w	d0
000011BA D440                       	add.w	d0,d2
000011BC 1028 0016                  	move.b	oYRadius(a0),d0
000011C0 4880                       	ext.w	d0
000011C2 9640                       	sub.w	d0,d3
000011C4 0A43 000F                  	eori.w	#$F,d3
000011C8 49F8 F76A                  	lea	(v_secondary_angle).w,a4		; Get floor information from this sensor
000011CC 367C FFF0                  	movea.w	#-$10,a3
000011D0 3C3C 0800                  	move.w	#$800,d6
000011D4 7A0D                       	moveq	#$D,d5
000011D6 6100 0000                  	bsr.w	FindLevelWall
000011DA 301F                       	move.w	(sp)+,d0
000011DC                            
000011DC 6100 FE30                  	bsr.w	Player_PickSensor			; Choose which height and angle to go with
000011E0 4A41                       	tst.w	d1					; Are we perfectly aligned to the ground?
000011E2 6700                       	beq.s	.End					; If so, branch
000011E4 6A00                       	bpl.s	.CheckLedge				; If we are outside the wall, branch
000011E6 0C41 FFF2                  	cmpi.w	#-$E,d1					; Have we hit a wall?
000011EA 6D00 FDDC                  	blt.w	Player_WalkVert_Done			; If so, branch
000011EE 9368 0008                  	sub.w	d1,oX(a0)				; Align outselves onto the wall
000011F2                            
000011F2                            .End:
000011F2 4E75                       	rts
000011F4                            
000011F4                            .CheckLedge:
000011F4 0C41 000E                  	cmpi.w	#$E,d1					; Are we about to fall off?
000011F8 6E00                       	bgt.s	.CheckStick				; If so, branch
000011FA                            
000011FA                            .SetX:
000011FA 9368 0008                  	sub.w	d1,oX(a0)				; Align ourselves onto the wall
000011FE 4E75                       	rts
00001200                            
00001200                            .CheckStick:
00001200 4A28 0038                  	tst.b	oPlayerStick(a0)			; Are we sticking to a surface?
00001204 66F4                       	bne.s	.SetX					; If so, align to the wall anyways
00001206                            
00001206 08E8 0001 0022             	bset	#1,oStatus(a0)				; Fall off the ground
0000120C 08A8 0005 0022             	bclr	#5,oStatus(a0)
00001212 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
00001218 4E75                       	rts
0000121A                            ; -------------------------------------------------------------------------------
0000121A                            ; Get level Chunk metadata at a position
0000121A                            ; -------------------------------------------------------------------------------
0000121A                            GetChunkAddress:
0000121A 7000                           moveq    #0,d0
0000121C 1039 00FF 1506                 move.b    (v_zone).l,d0
00001222 D040                           add.w    d0,d0
00001224 D040                           add.w    d0,d0
00001226 D039 00FF 1507             	add.b    (v_act).l,d0
0000122C D040                           add.w    d0,d0
0000122E D040                           add.w    d0,d0
00001230 D039 00FF 152E                 add.b    (v_time_zone).l,d0
00001236 D040                           add.w    d0,d0
00001238 D040                           add.w    d0,d0
0000123A 0C39 0002 00FF 152E            cmpi.b   #2,(v_time_zone).l               ; is time zone 2 (future)?
00001242 6600                           bne.s    .Load                            ; if not, go to ".Load"
00001244 0C39 0001 00FF 156A        	cmpi.b   #1,(v_good_future).l             ; if so, then is good future active?
0000124C 6600                       	bne.s    .Load                            ; if not, go to ".Load"
0000124E 5840                       	add.w    #4,d0                            ; if so, add 4 to d0    
00001250                            
00001250                            .Load:
00001250 23FB 0000 00FF 14FE            move.l    .Table(pc,d0.w),(ChunkAddress).l
00001258 4E75                           rts
0000125A                            .Table:    
0000125A                            ;       Past, Present, Future, GoodFuture
0000125A                            ; Palmtree Panic Zone
0000125A 0000 0000                          dc.l    PPZ_ChunksP
0000125E 0000 0000                  		dc.l    LevelChunks
00001262 0000 0000                  		dc.l    PPZ_ChunksGF 
00001266 0000 0000                  		dc.l    PPZ_ChunksBF ; Act 1
0000126A                            
0000126A 0000 0000 0000 0000 0000+          dc.l    PPZ_2_ChunksP, PPZ_2_Chunks, PPZ_2_ChunksGF, PPZ_2_ChunksBF           ; Act 2
0000127A 0000 0000 0000 0000 0000+          dc.l    PPZ_3_Chunks, PPZ_3_Chunks, PPZ_3_Chunks, PPZ_3_Chunks           ; Act 3		
0000128A 0000 0000 0000 0000 0000+          dc.l    0, 0, 0, 0           ; Act 4
0000129A                            
0000129A 0000 0000 0000 0000 0000+          dc.l    0, 0, 0, 0
000012AA 0000 0000 0000 0000 0000+          dc.l    0, 0, 0, 0
000012BA 0000 0000 0000 0000 0000+          dc.l    0, 0, 0, 0
000012CA 0000 0000 0000 0000 0000+          dc.l    0, 0, 0, 0
000012DA                            Reload_Level_PLC:
000012DA 4E75                            rts
000012DC                            ; -------------------------------------------------------------------------------
000012DC                            ; Get level Block metadata at a position
000012DC                            ; -------------------------------------------------------------------------------
000012DC                            ; PARAMETERS:
000012DC                            ;	d2.w	- Y position
000012DC                            ;	d3.w	- X position
000012DC                            ;	a0.l	- Object RAM
000012DC                            ; RETURNS:
000012DC                            ;	a1.l	- Block metadata pointer
000012DC                            ; -------------------------------------------------------------------------------
000012DC                            
000012DC                            GetLevelBlock:
000012DC 3002                       	move.w	d2,d0					; Get Y position
000012DE E248                       	lsr.w	#1,d0
000012E0 0240 0780                  	andi.w	#$780,d0				; Limit from 0 to $EFF in most levels
000012E4 0C39 0002 00FF 1506        	cmpi.b	#2,(v_zone).l				; Are we in Tidal Tempest?
000012EC 6600                       	bne.s	.NotTTZ					; If not, branch
000012EE 0240 0380                  	andi.w	#$380,d0				; Limit from 0 to $6FF in Tidal Tempest
000012F2                            
000012F2                            .NotTTZ:
000012F2 3203                       	move.w	d3,d1					; Get X position
000012F4 E049                       	lsr.w	#8,d1
000012F6 0241 007F                  	andi.w	#$7F,d1
000012FA D041                       	add.w	d1,d0					; Combine the X and Y into a level layout data index value
000012FC                            	
000012FC                            	;move.l	#LevelChunks,d1				; Get base chunk data pointer
000012FC 7200                       	moveq    #0,d1                    ; clear entire long-word of d1
000012FE                            
000012FE 43F8 A000                  	lea	(v_lvl_layout).w,a1			; Get chunk that the block we want is in
00001302                            
00001302 1231 0000                  	move.b	(a1,d0.w),d1
00001306 6700                       	beq.s	.Blank					; If it's a blank chunk, branch
00001308 6B00                       	bmi.s	.LoopChunk				; If it's a loop chunk, branch
0000130A                            
0000130A 0C39 0005 00FF 1506        	cmpi.b	#5,(v_zone).l				; Are we in Stardust Speedway?
00001312 6700                       	beq.s	.SSZ					; If so, branch
00001314 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l				; Are we in Metallic Madness?
0000131C 6600                       	bne.s	.NotMMZ					; If not, branch
0000131E                            
0000131E                            .SSZ:
0000131E 0268 7FFF 0002             	andi.w	#$7FFF,oTile(a0)			; Set the object's sprite to be low priority
00001324                            
00001324                            .NotMMZ:
00001324 0C39 0004 00FF 1506        	cmpi.b	#4,(v_zone).l				; Are we in Wacky Workbench?
0000132C 6600                       	bne.s	.NotWWZ					; If not, branch
0000132E 08A8 0006 0001             	bclr	#6,oRender(a0)				; Move the object onto the lower path layer
00001334                            
00001334                            .NotWWZ:
00001334 5301                       	subq.b	#1,d1					; Prepare chunk data index value from X and Y position
00001336 4881                       	ext.w	d1
00001338 EE59                       	ror.w	#7,d1
0000133A 3002                       	move.w	d2,d0
0000133C D040                       	add.w	d0,d0
0000133E 0240 01E0                  	andi.w	#$1E0,d0
00001342 D240                       	add.w	d0,d1
00001344 3003                       	move.w	d3,d0
00001346 E648                       	lsr.w	#3,d0
00001348 0240 001E                  	andi.w	#$1E,d0
0000134C D240                       	add.w	d0,d1
0000134E D2B9 00FF 14FE             	add.l    (ChunkAddress).l,d1
00001354                            
00001354                            .Blank:
00001354 2241                       	movea.l	d1,a1					; Get pointer to block
00001356 4E75                       	rts
00001358                            
00001358                            ; -------------------------------------------------------------------------------
00001358                            
00001358                            .LoopChunk:
00001358 0241 007F                  	andi.w	#$7F,d1					; Get chunk ID
0000135C                            
0000135C 0C39 0004 00FF 1506        	cmpi.b	#4,(v_zone).l				; Are we in Wacky Workbench?
00001364 6600                       	bne.s	.NotWWZ2				; If not, branch
00001366                            
00001366 0828 0006 0001             	btst	#6,oRender(a0)				; Is the object on the higher path layer?
0000136C 6600                       	bne.s	.LowPlane				; If so, branch
0000136E 0C01 0014                  	cmpi.b	#$14,d1					; Is this chunk $14?
00001372 6600 0000                  	bne.w	.GetBlock				; If not, branch
00001376 08E8 0006 0001             	bset	#6,oRender(a0)				; Move the object onto the higher path layer
0000137C 0228 007F 0002             	andi.b	#$7F,oTile(a0)				; Set the object's sprite to be low priority
00001382 6000 0000                  	bra.w	.GetBlock
00001386                            
00001386                            .LowPlane:
00001386 0C01 0015                  	cmpi.b	#$15,d1					; Is this chunk $15?
0000138A 6600                       	bne.s	.Not15					; If not, branch
0000138C 323C 0060                  	move.w	#$60,d1					; Change it to chunk $60
00001390 6000 0000                  	bra.w	.GetBlock
00001394                            
00001394                            .Not15:
00001394 0C01 001E                  	cmpi.b	#$1E,d1					; Is this chunk $1E?
00001398 6600                       	bne.s	.Not1E					; If not, branch
0000139A 323C 0061                  	move.w	#$61,d1					; Change it to chunk $61
0000139E 6000 0000                  	bra.w	.GetBlock
000013A2                            
000013A2                            .Not1E:
000013A2 0C01 001F                  	cmpi.b	#$1F,d1					; Is this chunk $1F?
000013A6 6600                       	bne.s	.Not1F					; If not, branch
000013A8 323C 0062                  	move.w	#$62,d1					; Change it to chunk $62
000013AC 6000 0000                  	bra.w	.GetBlock
000013B0                            
000013B0                            .Not1F:
000013B0 0C01 0032                  	cmpi.b	#$32,d1					; Is this chunk $32?
000013B4 6600 0000                  	bne.w	.GetBlock				; If not, branch
000013B8 323C 0063                  	move.w	#$63,d1					; Change it to chunk $63
000013BC 6000 0000                  	bra.w	.GetBlock
000013C0                            
000013C0                            ; -------------------------------------------------------------------------------
000013C0                            
000013C0                            .NotWWZ2:
000013C0 0C39 0005 00FF 1506        	cmpi.b	#5,(v_zone).l				; Are we in Stardust Speedway?
000013C8 6600 0000                  	bne.w	.NotSSZ					; If not, branch
000013CC                            
000013CC 0068 8000 0002             	ori.w	#$8000,oTile(a0)			; Set the object's sprite to be high priority
000013D2 0C01 0004                  	cmpi.b	#4,d1					; Is this chunk 4?
000013D6 6700                       	beq.s	.SwapChunkIfLow				; If so, branch
000013D8 0C01 0006                  	cmpi.b	#6,d1					; Is this chunk 6?
000013DC 6700                       	beq.s	.SwapChunkIfLow				; If so, branch
000013DE                            
000013DE 4A39 00FF 1956             	tst.b	(v_display_low_plane).l			; Should things be on the high plane?
000013E4 6700 0000                  	beq.w	.GetBlock				; If so, branch
000013E8 0268 7FFF 0002             	andi.w	#$7FFF,oTile(a0)			; Set the object's sprite to be low priority
000013EE 0C01 0028                  	cmpi.b	#$28,d1					; Is this chunk $28?
000013F2 6700                       	beq.s	.SwapChunk				; If so, branch
000013F4 0C01 003C                  	cmpi.b	#$3C,d1					; Is this chunk $3C?
000013F8 6700                       	beq.s	.SwapChunk				; If so, branch
000013FA 0C01 0037                  	cmpi.b	#$37,d1					; Is this chunk $37?
000013FE 6700                       	beq.s	.SwapChunk				; If so, branch
00001400 0C01 002F                  	cmpi.b	#$2F,d1					; Is this chunk $2F?
00001404 6700                       	beq.s	.SwapChunk				; If so, branch
00001406 0C01 0016                  	cmpi.b	#$16,d1					; Is this chunk $16?
0000140A 6700                       	beq.s	.SwapChunk				; If so, branch
0000140C 6000 0000                  	bra.w	.GetBlock
00001410                            
00001410                            .SwapChunkIfLow:
00001410 0268 7FFF 0002             	andi.w	#$7FFF,oTile(a0)			; Set the object's sprite to be low priority
00001416 0828 0006 0001             	btst	#6,oRender(a0)				; Is the object on the lower path layer?
0000141C 6700 0000                  	beq.w	.GetBlock				; If so, branch
00001420                            
00001420                            .SwapChunk:
00001420 5201                       	addq.b	#1,d1					; Swap chunks
00001422 6000 0000                  	bra.w	.GetBlock
00001426                            
00001426                            ; -------------------------------------------------------------------------------
00001426                            
00001426                            .NotSSZ:
00001426 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l				; Are we in Metallic Madness?
0000142E 6600                       	bne.s	.NotMMZ2				; If not, branch
00001430 0C10 0003                  	cmpi.b	#3,oID(a0)				; Is this a player object?
00001434 6400 0000                  	bcc.w	.GetBlock				; If not, branch
00001438                            
00001438 0068 8000 0002             	ori.w	#$8000,oTile(a0)			; Set the object's sprite to be high priority
0000143E 4A39 00FF 1956             	tst.b	(v_display_low_plane).l			; Should things be on the high plane?
00001444 6700                       	beq.s	.GetBlock				; If so, branch
00001446 0268 7FFF 0002             	andi.w	#$7FFF,oTile(a0)			; Set the object's sprite to be low priority
0000144C                            
0000144C 0C01 0046                  	cmpi.b	#$46,d1					; Is this chunk $28?
00001450 6600                       	bne.s	.Not46
00001452 323C 006A                  	move.w	#$6A,d1
00001456 6000                       	bra.s	.GetBlock
00001458                            
00001458                            .Not46:
00001458 0C01 0048                  	cmpi.b	#$48,d1					; Is this chunk $48?
0000145C 6600                       	bne.s	.Not48					; If not, branch
0000145E 323C 006B                  	move.w	#$6B,d1					; Change it to chunk $6B
00001462 6000                       	bra.s	.GetBlock
00001464                            
00001464                            .Not48:
00001464 0C01 004A                  	cmpi.b	#$4A,d1					; Is this chunk $4A?
00001468 6600                       	bne.s	.Not4A					; If not, branch
0000146A 323C 006C                  	move.w	#$6C,d1					; Change it to chunk $6C
0000146E 6000                       	bra.s	.GetBlock
00001470                            
00001470                            .Not4A:
00001470 0C01 0010                  	cmpi.b	#$10,d1					; Is this chunk $10?
00001474 6600                       	bne.s	.Not10					; If not, branch
00001476 323C 006D                  	move.w	#$6D,d1					; Change it to chunk $6D
0000147A 6000                       	bra.s	.GetBlock
0000147C                            
0000147C                            .Not10:
0000147C 0C01 0063                  	cmpi.b	#$63,d1					; Is this chunk $63?
00001480 6600                       	bne.s	.Not63					; If not, branch
00001482 323C 006E                  	move.w	#$6E,d1					; Change it to chunk $6E
00001486 6000                       	bra.s	.GetBlock
00001488                            
00001488                            .Not63:
00001488 0C01 0043                  	cmpi.b	#$43,d1					; Is this chunk $43?
0000148C 6600                       	bne.s	.GetBlock				; If not, branch
0000148E 323C 006F                  	move.w	#$6F,d1					; Change it to chunk $6F
00001492 6000                       	bra.s	.GetBlock
00001494                            
00001494                            ; -------------------------------------------------------------------------------
00001494                            
00001494                            .NotMMZ2:
00001494 0828 0006 0001             	btst	#6,oRender(a0)				; Is the object on the lower path layer?
0000149A 6700                       	beq.s	.GetBlock				; If so, branch
0000149C                            
0000149C 5241                       	addq.w	#1,d1					; Swap chunks
0000149E 0C41 0029                  	cmpi.w	#$29,d1					; Are we now on chunk $29?
000014A2 6600                       	bne.s	.GetBlock				; If not, branch
000014A4 323C 0051                  	move.w	#$51,d1					; If so, change it to chunk $51
000014A8                            
000014A8                            ; -------------------------------------------------------------------------------
000014A8                            
000014A8                            .GetBlock:
000014A8 5301                       	subq.b	#1,d1					; Prepare chunk data index value from X and Y position
000014AA EE59                       	ror.w	#7,d1
000014AC 3002                       	move.w	d2,d0
000014AE D040                       	add.w	d0,d0
000014B0 0240 01E0                  	andi.w	#$1E0,d0
000014B4 D240                       	add.w	d0,d1
000014B6 3003                       	move.w	d3,d0
000014B8 E648                       	lsr.w	#3,d0
000014BA 0240 001E                  	andi.w	#$1E,d0
000014BE D240                       	add.w	d0,d1
000014C0                            
000014C0 2241                       	movea.l	d1,a1					; Get pointer to block
000014C2 4E75                       	rts
000014C4                            
000014C4                            ; -------------------------------------------------------------------------------
000014C4                            ; Get the distance to the nearest block vertically
000014C4                            ; -------------------------------------------------------------------------------
000014C4                            ; PARAMETERS:
000014C4                            ;	d2.w	- Y position
000014C4                            ;	d3.w	- X position
000014C4                            ;	d5.w	- Bit to check for solidity
000014C4                            ;	d6.w	- Flip bits
000014C4                            ;	a3.w	- Distance in pixels to check for a nearby block
000014C4                            ;	a4.w	- Pointer to where the angle will be stored
000014C4                            ; RETURNS:
000014C4                            ;	d1.w	- Distance from the block
000014C4                            ;	a1.l	- Block metadata pointer
000014C4                            ;	(a4).b	- Angle
000014C4                            ; -------------------------------------------------------------------------------
000014C4                            
000014C4                            FindLevelFloor:
000014C4 6100 FE16                  	bsr.w	GetLevelBlock				; Get block at position
000014C8 B2B9 00FF 14FE             	cmp.l	(ChunkAddress).l,d1				; Is it a blank block?
000014CE 6700                       	beq.s	.IsBlank				; If so, branch
000014D0                            
000014D0 3011                       	move.w	(a1),d0					; Get block ID
000014D2 3800                       	move.w	d0,d4
000014D4 0240 07FF                  	andi.w	#$7FF,d0
000014D8 6700                       	beq.s	.IsBlank				; If it's blank, branch
000014DA 0B04                       	btst	d5,d4					; Is the block solid?
000014DC 6600                       	bne.s	.IsSolid				; If so, branch
000014DE                            
000014DE                            .IsBlank:
000014DE D44B                       	add.w	a3,d2					; Check the nearby block
000014E0 6100 0000                  	bsr.w	FindLevelFloor2
000014E4 944B                       	sub.w	a3,d2					; Restore Y position
000014E6 0641 0010                  	addi.w	#$10,d1					; Increment height
000014EA 4E75                       	rts
000014EC                            
000014EC                            .IsSolid:
000014EC 2478 F796                  	movea.l	(v_collision_ptr).w,a2			; Get collision block ID
000014F0 1032 0000                  	move.b	(a2,d0.w),d0
000014F4 0240 00FF                  	andi.w	#$FF,d0
000014F8 67E4                       	beq.s	.IsBlank				; If it's blank, branch
000014FA                            
000014FA 45F9 0000 0000             	lea	(ColAngleMap).l,a2			; Get collision angle
00001500 18B2 0000                  	move.b	(a2,d0.w),(a4)
00001504                            
00001504 E948                       	lsl.w	#4,d0					; Get base collision block height map index
00001506 3203                       	move.w	d3,d1					; Get X position
00001508 0804 000B                  	btst	#$B,d4					; Is this block horizontally flipped?
0000150C 6700                       	beq.s	.NoXFlip				; If not, branch
0000150E 4641                       	not.w	d1					; Flip the X position
00001510 4414                       	neg.b	(a4)					; Flip the angle
00001512                            
00001512                            .NoXFlip:
00001512 0804 000C                  	btst	#$C,d4					; Is this block vertically flipped?
00001516 6700                       	beq.s	.NoYFlip				; If not, branch
00001518 0614 0040                  	addi.b	#$40,(a4)				; Flip the angle
0000151C 4414                       	neg.b	(a4)
0000151E 0414 0040                  	subi.b	#$40,(a4)
00001522                            
00001522                            .NoYFlip:
00001522 0241 000F                  	andi.w	#$F,d1					; Get block column height
00001526 D240                       	add.w	d0,d1
00001528 45F9 0000 0000             	lea	(ColHeightMap).l,a2
0000152E 1032 1000                  	move.b	(a2,d1.w),d0
00001532 4880                       	ext.w	d0
00001534                            
00001534 BD44                       	eor.w	d6,d4					; Is this block vertically flipped?
00001536 0804 000C                  	btst	#$C,d4
0000153A 6700                       	beq.s	.NoYFlip2				; If not, branch
0000153C 4440                       	neg.w	d0					; Flip the height
0000153E                            
0000153E                            .NoYFlip2:
0000153E 4A40                       	tst.w	d0					; Check the height
00001540 679C                       	beq.s	.IsBlank				; If it's 0, branch
00001542 6B00                       	bmi.s	.CheckNegFloor				; If it's negative, branch
00001544 0C00 0010                  	cmpi.b	#$10,d0					; Is this a full height?
00001548 6700                       	beq.s	.MaxFloor				; If so, branch
0000154A                            
0000154A                            .FoundFloor:
0000154A 3202                       	move.w	d2,d1					; Get how deep the object is into the block
0000154C 0241 000F                  	andi.w	#$F,d1
00001550 D041                       	add.w	d1,d0
00001552 323C 000F                  	move.w	#$F,d1
00001556 9240                       	sub.w	d0,d1
00001558 4E75                       	rts
0000155A                            
0000155A                            .CheckNegFloor:
0000155A B6FC 0010                  	cmpa.w	#$10,a3					; Is the next block above?
0000155E 6600                       	bne.s	.NegFloor				; If so, branch
00001560 303C 0010                  	move.w	#$10,d0					; Force height to be full
00001564 18BC 0000                  	move.b	#0,(a4)					; Set angle to 0
00001568 60E0                       	bra.s	.FoundFloor
0000156A                            
0000156A                            .NegFloor:
0000156A 3202                       	move.w	d2,d1					; Get how deep the object is into the block
0000156C 0241 000F                  	andi.w	#$F,d1
00001570 D041                       	add.w	d1,d0
00001572 6A00 FF6A                  	bpl.w	.IsBlank				; If the object is outside of the block, branch
00001576                            
00001576                            .MaxFloor:
00001576 944B                       	sub.w	a3,d2					; Check the nearby block
00001578 6100 0000                  	bsr.w	FindLevelFloor2
0000157C D44B                       	add.w	a3,d2					; Restore Y position
0000157E 0441 0010                  	subi.w	#$10,d1					; Decrement height
00001582 4E75                       	rts
00001584                            
00001584                            ; -------------------------------------------------------------------------------
00001584                            
00001584                            FindLevelFloor2:
00001584 6100 FD56                  	bsr.w	GetLevelBlock				; Get block at position
00001588 B2B9 00FF 14FE             	cmp.l	(ChunkAddress).l,d1				; Is it a blank block?
0000158E 6700                       	beq.s	.IsBlank				; If so, branch
00001590                            
00001590 3011                       	move.w	(a1),d0					; Get block ID
00001592 3800                       	move.w	d0,d4
00001594 0240 07FF                  	andi.w	#$7FF,d0
00001598 6700                       	beq.s	.IsBlank				; If it's blank, branch
0000159A 0B04                       	btst	d5,d4					; Is the block solid?
0000159C 6600                       	bne.s	.IsSolid				; If so, branch
0000159E                            
0000159E                            .IsBlank:
0000159E 323C 000F                  	move.w	#$F,d1					; Get how deep the object is into the block
000015A2 3002                       	move.w	d2,d0
000015A4 0240 000F                  	andi.w	#$F,d0
000015A8 9240                       	sub.w	d0,d1
000015AA 4E75                       	rts
000015AC                            
000015AC                            .IsSolid:
000015AC 2478 F796                  	movea.l	(v_collision_ptr).w,a2			; Get collision block ID
000015B0 1032 0000                  	move.b	(a2,d0.w),d0
000015B4 0240 00FF                  	andi.w	#$FF,d0
000015B8 67E4                       	beq.s	.IsBlank				; If it's blank, branch
000015BA                            
000015BA 45F9 0000 0000             	lea	(ColAngleMap).l,a2			; Get collision angle
000015C0 18B2 0000                  	move.b	(a2,d0.w),(a4)
000015C4                            
000015C4 E948                       	lsl.w	#4,d0					; Get base collision block height map index
000015C6 3203                       	move.w	d3,d1					; Get X position
000015C8 0804 000B                  	btst	#$B,d4					; Is this block horizontally flipped?
000015CC 6700                       	beq.s	.NoXFlip				; If not, branch
000015CE 4641                       	not.w	d1					; Flip the X position
000015D0 4414                       	neg.b	(a4)					; Flip the angle
000015D2                            
000015D2                            .NoXFlip:
000015D2 0804 000C                  	btst	#$C,d4					; Is this block vertically flipped?
000015D6 6700                       	beq.s	.NoYFlip				; If not, branch
000015D8 0614 0040                  	addi.b	#$40,(a4)				; Flip the angle
000015DC 4414                       	neg.b	(a4)
000015DE 0414 0040                  	subi.b	#$40,(a4)
000015E2                            
000015E2                            .NoYFlip:
000015E2 0241 000F                  	andi.w	#$F,d1					; Get block column height
000015E6 D240                       	add.w	d0,d1
000015E8 45F9 0000 0000             	lea	(ColHeightMap).l,a2
000015EE 1032 1000                  	move.b	(a2,d1.w),d0
000015F2 4880                       	ext.w	d0
000015F4                            
000015F4 BD44                       	eor.w	d6,d4					; Is this block vertically flipped?
000015F6 0804 000C                  	btst	#$C,d4
000015FA 6700                       	beq.s	.NoYFlip2				; If not, branch
000015FC 4440                       	neg.w	d0					; Flip the height
000015FE                            
000015FE                            .NoYFlip2:
000015FE 4A40                       	tst.w	d0					; Check the height
00001600 679C                       	beq.s	.IsBlank				; If it's 0, branch
00001602 6B00                       	bmi.s	.CheckNegFloor				; If it's negative, branch
00001604                            
00001604                            .FoundFloor:
00001604 3202                       	move.w	d2,d1					; Get how deep the object is into the block
00001606 0241 000F                  	andi.w	#$F,d1
0000160A D041                       	add.w	d1,d0
0000160C 323C 000F                  	move.w	#$F,d1
00001610 9240                       	sub.w	d0,d1
00001612 4E75                       	rts
00001614                            
00001614                            .CheckNegFloor:
00001614 B6FC 0010                  	cmpa.w	#$10,a3					; Were we checking above the last block?
00001618 6600                       	bne.s	.NegFloor				; If so, branch
0000161A 303C 0010                  	move.w	#$10,d0					; Force height to be full
0000161E 18BC 0000                  	move.b	#0,(a4)					; Set angle to 0
00001622 60E0                       	bra.s	.FoundFloor
00001624                            
00001624                            .NegFloor:
00001624 3202                       	move.w	d2,d1					; Get how deep the object is into the block
00001626 0241 000F                  	andi.w	#$F,d1
0000162A D041                       	add.w	d1,d0
0000162C 6A00 FF70                  	bpl.w	.IsBlank				; If the object is outside of the block, branch
00001630 4641                       	not.w	d1					; Flip the height
00001632 4E75                       	rts
00001634                            
00001634                            ; -------------------------------------------------------------------------------
00001634                            ; Get the distance to the nearest block horizontally
00001634                            ; -------------------------------------------------------------------------------
00001634                            ; PARAMETERS:
00001634                            ;	d2.w	- Y position
00001634                            ;	d3.w	- X position
00001634                            ;	d5.w	- Bit to check for solidity
00001634                            ;	d6.w	- Flip bits
00001634                            ;	a3.w	- Distance in pixels to check for a nearby block
00001634                            ;	a4.w	- Pointer to where the angle will be stored
00001634                            ; RETURNS:
00001634                            ;	d1.w	- Distance from the block
00001634                            ;	a1.l	- Block metadata pointer
00001634                            ;	(a4).b	- Angle
00001634                            ; -------------------------------------------------------------------------------
00001634                            
00001634                            FindLevelWall:
00001634 6100 FCA6                  	bsr.w	GetLevelBlock				; Get block at position
00001638 B2B9 00FF 14FE             	cmp.l	(ChunkAddress).l,d1				; Is it a blank block?
0000163E 6700                       	beq.s	.IsBlank				; If so, branch
00001640                            
00001640 3011                       	move.w	(a1),d0					; Get block ID
00001642 3800                       	move.w	d0,d4
00001644 0240 07FF                  	andi.w	#$7FF,d0
00001648 6700                       	beq.s	.IsBlank				; If it's blank, branch
0000164A 0B04                       	btst	d5,d4					; Is the block solid?
0000164C 6600                       	bne.s	.IsSolid				; If so, branch
0000164E                            
0000164E                            .IsBlank:
0000164E D64B                       	add.w	a3,d3					; Check the nearby block
00001650 6100 0000                  	bsr.w	FindLevelWall2
00001654 964B                       	sub.w	a3,d3					; Restore Y position
00001656 0641 0010                  	addi.w	#$10,d1					; Increment width
0000165A 4E75                       	rts
0000165C                            
0000165C                            .IsSolid:
0000165C 2478 F796                  	movea.l	(v_collision_ptr).w,a2			; Get collision block ID
00001660 1032 0000                  	move.b	(a2,d0.w),d0
00001664 0240 00FF                  	andi.w	#$FF,d0
00001668 67E4                       	beq.s	.IsBlank				; If it's blank, branch
0000166A                            
0000166A 45F9 0000 0000             	lea	(ColAngleMap).l,a2			; Get collision angle
00001670 18B2 0000                  	move.b	(a2,d0.w),(a4)
00001674                            
00001674 E948                       	lsl.w	#4,d0					; Get base collision block width map index
00001676 3202                       	move.w	d2,d1					; Get Y position
00001678 0804 000C                  	btst	#$C,d4					; Is this block vertically flipped?
0000167C 6700                       	beq.s	.NoYFlip				; If not, branch
0000167E 4641                       	not.w	d1					; Flip the Y position
00001680 0614 0040                  	addi.b	#$40,(a4)				; Flip the angle
00001684 4414                       	neg.b	(a4)
00001686 0414 0040                  	subi.b	#$40,(a4)
0000168A                            
0000168A                            .NoYFlip:
0000168A 0804 000B                  	btst	#$B,d4					; Is this block horizontally flipped?
0000168E 6700                       	beq.s	.NoXFlip				; If not, branch
00001690 4414                       	neg.b	(a4)					; Flip the angle
00001692                            
00001692                            .NoXFlip:
00001692 0241 000F                  	andi.w	#$F,d1					; Get block row width
00001696 D240                       	add.w	d0,d1
00001698 45F9 0000 0000             	lea	(ColWidthMap).l,a2
0000169E 1032 1000                  	move.b	(a2,d1.w),d0
000016A2 4880                       	ext.w	d0
000016A4                            
000016A4 BD44                       	eor.w	d6,d4					; Is this block horizontally flipped?
000016A6 0804 000B                  	btst	#$B,d4
000016AA 6700                       	beq.s	.NoYFlip2				; If not, branch
000016AC 4440                       	neg.w	d0					; Flip the width
000016AE                            
000016AE                            .NoYFlip2:
000016AE 4A40                       	tst.w	d0					; Check the width
000016B0 679C                       	beq.s	.IsBlank				; If it's 0, branch
000016B2 6B00                       	bmi.s	.NegWall				; If it's negative, branch
000016B4 0C00 0010                  	cmpi.b	#$10,d0					; Is this a full width?
000016B8 6700                       	beq.s	.MaxWall				; If so, branch
000016BA 3203                       	move.w	d3,d1					; Get how deep the object is into the block
000016BC 0241 000F                  	andi.w	#$F,d1
000016C0 D041                       	add.w	d1,d0
000016C2 323C 000F                  	move.w	#$F,d1
000016C6 9240                       	sub.w	d0,d1
000016C8 4E75                       	rts
000016CA                            
000016CA                            .NegWall:
000016CA 3203                       	move.w	d3,d1					; Get how deep the object is into the block
000016CC 0241 000F                  	andi.w	#$F,d1
000016D0 D041                       	add.w	d1,d0
000016D2 6A00 FF7A                  	bpl.w	.IsBlank				; If the object is outside of the block, branch
000016D6                            
000016D6                            .MaxWall:
000016D6 964B                       	sub.w	a3,d3					; Check the nearby block
000016D8 6100 0000                  	bsr.w	FindLevelWall2
000016DC D64B                       	add.w	a3,d3					; Restore Y position
000016DE 0441 0010                  	subi.w	#$10,d1					; Decrement width
000016E2 4E75                       	rts
000016E4                            
000016E4                            ; -------------------------------------------------------------------------------
000016E4                            
000016E4                            FindLevelWall2:
000016E4 6100 FBF6                  	bsr.w	GetLevelBlock				; Get block at position
000016E8 B2B9 00FF 14FE             	cmp.l	(ChunkAddress).l,d1				; Is it a blank block?
000016EE 6700                       	beq.s	.IsBlank				; If so, branch
000016F0                            
000016F0 3011                       	move.w	(a1),d0					; Get block ID
000016F2 3800                       	move.w	d0,d4
000016F4 0240 07FF                  	andi.w	#$7FF,d0
000016F8 6700                       	beq.s	.IsBlank				; If it's blank, branch
000016FA 0B04                       	btst	d5,d4					; Is the block solid?
000016FC 6600                       	bne.s	.IsSolid				; If so, branch
000016FE                            
000016FE                            .IsBlank:
000016FE 323C 000F                  	move.w	#$F,d1					; Get how deep the object is into the block
00001702 3003                       	move.w	d3,d0
00001704 0240 000F                  	andi.w	#$F,d0
00001708 9240                       	sub.w	d0,d1
0000170A 4E75                       	rts
0000170C                            
0000170C                            .IsSolid:
0000170C 2478 F796                  	movea.l	(v_collision_ptr).w,a2			; Get collision block ID
00001710 1032 0000                  	move.b	(a2,d0.w),d0
00001714 0240 00FF                  	andi.w	#$FF,d0
00001718 67E4                       	beq.s	.IsBlank				; If it's blank, branch
0000171A                            
0000171A 45F9 0000 0000             	lea	(ColAngleMap).l,a2			; Get collision angle
00001720 18B2 0000                  	move.b	(a2,d0.w),(a4)
00001724                            
00001724 E948                       	lsl.w	#4,d0					; Get base collision block width map index
00001726 3202                       	move.w	d2,d1					; Get Y position
00001728 0804 000C                  	btst	#$C,d4					; Is this block vertically flipped?
0000172C 6700                       	beq.s	.NoYFlip				; If not, branch
0000172E 4641                       	not.w	d1					; Flip the Y position
00001730 0614 0040                  	addi.b	#$40,(a4)				; Flip the angle
00001734 4414                       	neg.b	(a4)
00001736 0414 0040                  	subi.b	#$40,(a4)
0000173A                            
0000173A                            .NoYFlip:
0000173A 0804 000B                  	btst	#$B,d4					; Is this block horizontally flipped?
0000173E 6700                       	beq.s	.NoXFlip				; If not, branch
00001740 4414                       	neg.b	(a4)					; Flip the angle
00001742                            
00001742                            .NoXFlip:
00001742 0241 000F                  	andi.w	#$F,d1					; Get block row width
00001746 D240                       	add.w	d0,d1
00001748 45F9 0000 0000             	lea	(ColWidthMap).l,a2
0000174E 1032 1000                  	move.b	(a2,d1.w),d0
00001752 4880                       	ext.w	d0
00001754                            
00001754 BD44                       	eor.w	d6,d4					; Is this block horizontally flipped?
00001756 0804 000B                  	btst	#$B,d4
0000175A 6700                       	beq.s	.NoYFlip2				; If not, branch
0000175C 4440                       	neg.w	d0					; Flip the width
0000175E                            
0000175E                            .NoYFlip2:
0000175E 4A40                       	tst.w	d0					; Check the width
00001760 679C                       	beq.s	.IsBlank				; If it's 0, branch
00001762 6B00                       	bmi.s	.NegWall				; If it's negative, branch
00001764 3203                       	move.w	d3,d1					; Get how deep the object is into the block
00001766 0241 000F                  	andi.w	#$F,d1
0000176A D041                       	add.w	d1,d0
0000176C 323C 000F                  	move.w	#$F,d1
00001770 9240                       	sub.w	d0,d1
00001772 4E75                       	rts
00001774                            
00001774                            .NegWall:
00001774 3203                       	move.w	d3,d1					; Get how deep the object is into the block
00001776 0241 000F                  	andi.w	#$F,d1
0000177A D041                       	add.w	d1,d0
0000177C 6A00 FF80                  	bpl.w	.IsBlank				; If the object is outside of the block, branch
00001780 4641                       	not.w	d1					; Flip the width
00001782 4E75                       	rts
00001784                            
00001784                            ; -------------------------------------------------------------------------------
00001784                            ; This seems to convert the collision array from an unknown "raw" format to
00001784                            ; its current format, overwriting the original. This function exists in
00001784                            ; Sonic 1, but wouldn't work on a standard ROM cartridge. However, due to
00001784                            ; levels in Sonic CD being loaded in Word RAM, this function performs as
00001784                            ; intended.
00001784                            ; -------------------------------------------------------------------------------
00001784                            
00001784                            ConvColArray:
00001784 4E75                       	rts
00001786                            
00001786 43F9 0000 0000             	lea	(ColHeightMap).l,a1			; Source of "raw" collision array
0000178C 45F9 0000 0000             	lea	(ColHeightMap).l,a2			; Destination of converted collision array
00001792                            
00001792 363C 00FF                  	move.w	#$100-1,d3				; Number of blocks in collision array
00001796                            
00001796                            .BlockLoop:
00001796 7A10                       	moveq	#16,d5					; Start on the leftmost pixel
00001798 343C 000F                  	move.w	#16-1,d2				; Width of a block in pixels
0000179C                            
0000179C                            .ColumnLoop:
0000179C 7800                       	moveq	#0,d4
0000179E 323C 000F                  	move.w	#16-1,d1				; Height of a block of pixels
000017A2                            
000017A2                            .RowLoop:
000017A2 3019                       	move.w	(a1)+,d0				; Get row of collision bits
000017A4 EAA8                       	lsr.l	d5,d0					; Push the selected bit of this row into the extended flag
000017A6 D944                       	addx.w	d4,d4					; Shift d4 to the left, and append the selected bit
000017A8 51C9 FFF8                  	dbf	d1,.RowLoop
000017AC                            
000017AC 34C4                       	move.w	d4,(a2)+				; Store the column of collision bits
000017AE 92FC 0020                  	suba.w	#2*16,a1				; Back to the start of the block
000017B2 5345                       	subq.w	#1,d5					; Get next bit in the row
000017B4 51CA FFE6                  	dbf	d2,.ColumnLoop				; Loop for each column of pixels in a block
000017B8                            
000017B8 D2FC 0020                  	adda.w	#2*16,a1				; Next block
000017BC 51CB FFD8                  	dbf	d3,.BlockLoop				; Loop for each block in the collision array
000017C0                            
000017C0 43F9 0000 0000             	lea	(ColHeightMap).l,a1			; Convert widths
000017C6 45F9 0000 0000             	lea	(ColWidthMap).l,a2
000017CC 6100                       	bsr.s	.ConvToColBlocks
000017CE 43F9 0000 0000             	lea	(ColHeightMap).l,a1			; Convert heights
000017D4 45F9 0000 0000             	lea	(ColHeightMap).l,a2
000017DA                            
000017DA                            ; -------------------------------------------------------------------------------
000017DA                            
000017DA                            .ConvToColBlocks:
000017DA 363C 0FFF                  	move.w	#$1000-1,d3				; Size of a standard collision arary
000017DE                            
000017DE                            .ProcCollision:
000017DE 7400                       	moveq	#0,d2					; Base height
000017E0 323C 000F                  	move.w	#16-1,d1				; Column height
000017E4 3019                       	move.w	(a1)+,d0				; Get current column of collision pixels
000017E6 6700                       	beq.s	.NoCollision				; If there's no collision in this column, branch
000017E8 6B00                       	bmi.s	.InvertedCol				; If the collision is inverted, branch
000017EA                            
000017EA                            .ProcColumnLoop:
000017EA E248                       	lsr.w	#1,d0					; Is there a solid pixel?
000017EC 6400                       	bcc.s	.NotSolid				; If not, branch
000017EE 5202                       	addq.b	#1,d2					; Increment height
000017F0                            
000017F0                            .NotSolid:
000017F0 51C9 FFF8                  	dbf	d1,.ProcColumnLoop			; Loop until finished
000017F4 6000                       	bra.s	.ColumnProcessed
000017F6                            
000017F6                            .InvertedCol:
000017F6 0C40 FFFF                  	cmpi.w	#$FFFF,d0				; Is the entire column solid?
000017FA 6700                       	beq.s	.FullColumn				; If so, branch
000017FC                            
000017FC                            .ProcColumnLoop2:
000017FC E348                       	lsl.w	#1,d0					; Is there a solid pixel?
000017FE 6400                       	bcc.s	.NotSolid2				; If not, branch
00001800 5302                       	subq.b	#1,d2					; Decrement height
00001802                            
00001802                            .NotSolid2:
00001802 51C9 FFF8                  	dbf	d1,.ProcColumnLoop2			; Loop until finished
00001806 6000                       	bra.s	.ColumnProcessed
00001808                            
00001808                            .FullColumn:
00001808 303C 0010                  	move.w	#16,d0					; Set height to 16 pixels
0000180C                            
0000180C                            .NoCollision:
0000180C 3400                       	move.w	d0,d2					; Set fill height
0000180E                            
0000180E                            .ColumnProcessed:
0000180E 14C2                       	move.b	d2,(a2)+				; Store column height
00001810 51CB FFCC                  	dbf	d3,.ProcCollision			; Loop until finished
00001814 4E75                       	rts
00001816                            
00001816                            ; -------------------------------------------------------------------------------
00001816                            ; Leftover music ID list from Sonic 1
00001816                            ; -------------------------------------------------------------------------------
00001816                            MusicList:
00001816                            LevelMusicIDs_S1:
00001816 8182 8384 8586 8D          	dc.b	$81, $82, $83, $84, $85, $86, $8D
0000181E 00                         	even
0000181E                            
0000181E                            ; -------------------------------------------------------------------------------
0000181E                            ; Level game mode
0000181E                            ; -------------------------------------------------------------------------------
0000181E                            
0000181E                            Level:
0000181E 4279 00FF 1580             	clr.w	(v_demo_mode).l				; Clear demo mode flag
00001824                            
00001824 0C39 007F 00FF 0F20        	cmpi.b	#$7F,(v_got_time_stones).l		; Did we get all of the time stones?
0000182C 6600                       	bne.s	.NotGoodFuture				; If not, branch
0000182E 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l			; Are we in time attack mode?
00001834 6600                       	bne.s	.NotGoodFuture				; If not, branch
00001836 13FC 0001 00FF 156A        	move.b	#1,(v_good_future).l			; Force a good future
0000183E                            
0000183E                            .NotGoodFuture:
0000183E 13FC 0000 00FF 1957        	move.b	#0,(v_level_started).l			; Mark the level as not started yet
00001846 4238 F62A                  	clr.b	(v_vint_routine).w			; Reset V-INT routine ID
0000184A 4239 00FF 1509             	clr.b	(v_use_player2).l			; Clear unused "use player 2" flag
00001850 11FC 0000 F63A             	move.b	#0,(v_paused).w				; Clear pause flag
00001856                            
00001856 08F9 0000 00FF 151C        	bset	#0,(v_load_plc_flags).l			; Mark PLCs as loaded
0000185E 6600                       	bne.s	.NoReset				; If they were loaded before, branch
00001860                            
00001860 4239 00FF 151D             	clr.b	(v_pal_fade_flags).l			; Mark palette fading as inactive
00001866 4239 00FF 158E             	clr.b	(v_last_checkpoint).l			; Reset checkpoint
0000186C 23FC 0000 1388 00FF 1578   	move.l	#5000,(v_next_score_1up).l		; Reset next score for 1-UP
00001876                            
00001876 6100 0000                  	bsr.w	ResetRespawnTable			; Clear respawn table
0000187A                            
0000187A 4239 00FF 1522             	clr.b	(v_reset_lvl_flags).l			; Clear level reset flags
00001880 4239 00FF 1590             	clr.b	(v_good_future_flags).l			; Clear good future flags
00001886 42B9 00FF 1518             	clr.l	(v_score).l				; Clear score
0000188C                            
0000188C 13FC 0003 00FF 1508        	move.b	#3,(v_life_count).l			; Reset life count to 3
00001894 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l			; Are we in time attack mode?
0000189A 6700                       	beq.s	.NoReset				; If not, branch
0000189C 13FC 0001 00FF 1508        	move.b	#1,(v_life_count).l			; Reset life count to 1
000018A4                            
000018A4                            .NoReset:
000018A4 08F8 0007 F600             	bset	#7,(v_game_mode).w			; Mark level as initializing
000018AA 6100 0000                  	bsr.w	ClearPLCs				; Clear PLCs
000018AE                            
000018AE 4A39 00FF 156E             	tst.b	(v_entered_big_ring).l			; Have we entered a big ring before?
000018B4 6600                       	bne.s	.EnteredBigRing				; If so, branch
000018B6 0839 0007 00FF 152E        	btst	#7,(v_time_zone).l			; Were we time travelling before?
000018BE 6700                       	beq.s	.FadeToBlack				; If not, branch
000018C0                            
000018C0 08F9 0000 00FF 151D        	bset	#0,(v_pal_fade_flags).l			; Mark palette fading as active
000018C8 6700                       	beq.s	.SkipFade				; If it was active before, branch
000018CA                            
000018CA                            .EnteredBigRing:
000018CA 6100 ED5E                  	bsr.w	FadeToWhite				; Fade to white
000018CE 08B9 0000 00FF 151D        	bclr	#0,(v_pal_fade_flags).l			; Mark palette fading as inactive
000018D6                            
000018D6                            .SkipFade:
000018D6 4238 F784                  	clr.b	(v_time_warp_dir).w			; Reset time travel direction
000018DA 4A79 00FF 1502             	tst.w	(v_level_restart).l			; Was the level restart flag set?
000018E0 6700 0000                  	beq.w	.CheckNormalLoad			; If not, branch
000018E4 33FC 0000 00FF 1502        	move.w	#0,(v_level_restart).l			; Clear level restart flag
000018EC 0C39 0002 00FF 1507        	cmpi.b	#2,(v_act).l				; Are we in act 3?
000018F4 6600                       	bne.s	.End					; If not, branch
000018F6 08B9 0007 00FF 152E        	bclr	#7,(v_time_zone).l			; Clear time travel flag
000018FE                            
000018FE                            .End:
000018FE 4E75                       	rts
00001900                            
00001900                            ; -------------------------------------------------------------------------------
00001900                            
00001900                            .FadeToBlack:
00001900 08F9 0000 00FF 151D        	bset	#0,(v_pal_fade_flags).l			; Mark palette fading as active
00001908 6700                       	beq.s	.SkipFade2				; If it was active before, branch
0000190A 6100 EBF2                  	bsr.w	FadeToBlack				; Fade to black
0000190E                            
0000190E                            .SkipFade2:
0000190E 0C79 0002 00FF 1502        	cmpi.w	#2,(v_level_restart).l			; Were we going to the next level?
00001916 6600                       	bne.s	.CheckNoLives				; If not, branch
00001918 33FC 0000 00FF 1502        	move.w	#0,(v_level_restart).l			; Clear level restart flag
00001920 13FC 0000 00FF 151D        	move.b	#0,(v_pal_fade_flags).l			; Mark palette fading as inactive
00001928 6000                       	bra.s	.ClearPal				; Get out of here
0000192A                            
0000192A                            .CheckNoLives:
0000192A 4A39 00FF 1508             	tst.b	(v_life_count).l			; Do we have any lives?
00001930 6600                       	bne.s	.CheckNormalLoad			; If so, branch
00001932 13FC 0000 00FF 151C        	move.b	#0,(v_load_plc_flags).l			; Mark PLCs as not loaded
0000193A 13FC 0000 00FF 158E        	move.b	#0,(v_last_checkpoint).l		; Clear checkpoint
00001942 13FC 0000 00FF 1522        	move.b	#0,(v_reset_lvl_flags).l		; Clear level level flags
0000194A 13FC 0000 00FF 151D        	move.b	#0,(v_pal_fade_flags).l			; Mark palette fading as inactive
00001952                            
00001952                            .ClearPal:
00001952 43F8 FB00                  	lea	(v_palette).w,a1			; Fill the palette with black
00001956 3C3C 001F                  	move.w	#$80/4-1,d6
0000195A                            
0000195A                            .ClearPalLoop:
0000195A 22FC 0000 0000             	move.l	#0,(a1)+
00001960 51CE FFF8                  	dbf	d6,.ClearPalLoop
00001964                            
00001964 11FC 000C F62A             	move.b	#$C,(v_vint_routine).w			; Process the palette clear in V-INT
0000196A 6100 F132                  	bsr.w	VSync
0000196E 4E75                       	rts
00001970                            
00001970                            ; -------------------------------------------------------------------------------
00001970                            
00001970                            .CheckNormalLoad:
00001970 0C78 0800 F78E             	cmpi.w	#$800,(v_demo_timer).w			; Was a demo running?
00001976 6600                       	bne.s	.NormalLoad				; If not, branch
00001978 31FC 0000 F78E             	move.w	#0,(v_demo_timer).w			; Reset demo timer
0000197E 4279 00FF 1580             	clr.w	(v_demo_mode).l				; Clear demo mode flag
00001984 13FC 0000 00FF 151D        	move.b	#0,(v_pal_fade_flags).l			; Mark palette fading as inactive
0000198C 4E75                       	rts
0000198E                            
0000198E                            ; -------------------------------------------------------------------------------
0000198E                            
0000198E                            .NormalLoad:
0000198E 7000                       	moveq	#0,d0					; Fill palette with black
00001990 0839 0000 00FF 0F22        	btst	#0,(v_pal_clear_flags).l		; Should we fill the palette with white?
00001998 6600                       	bne.s	.UseWhite				; If so, branch
0000199A 0839 0007 00FF 152E        	btst	#7,(v_time_zone).l			; Were we time travelling before?
000019A2 6700                       	beq.s	.ClearPal2				; If not, branch
000019A4                            
000019A4                            .UseWhite:
000019A4 203C 0EEE 0EEE             	move.l	#$0EEE0EEE,d0				; Fill palette with white
000019AA                            
000019AA                            .ClearPal2:
000019AA 43F8 FB00                  	lea	(v_palette).w,a1			; Fill the palette with black or white
000019AE 3C3C 001F                  	move.w	#$80/4-1,d6
000019B2                            
000019B2                            .ClearPalLoop2:
000019B2 22C0                       	move.l	d0,(a1)+
000019B4 51CE FFFC                  	dbf	d6,.ClearPalLoop2			; Loop until finished
000019B8                            
000019B8                            .WaitPLC:
000019B8 11FC 000C F62A             	move.b	#$C,(v_vint_routine).w			; VSync
000019BE 6100 F0DE                  	bsr.w	VSync
000019C2 6100 0000                  	bsr.w	ProcessPLCs				; Process PLCs
000019C6 66F0                       	bne.s	.WaitPLC				; If the queue isn't empty, wait
000019C8 4AB8 F680                  	tst.l	(v_plc_buffer).w
000019CC                            
000019CC                            
000019CC                            
000019CC 7000                       	moveq	#0,d0
000019CE 3039 00FF 1506             	move.w	(v_zone).l,d0
000019D4                            
000019D4 45F9 0000 0000             	lea	(LevelPLCID).l,a2 ; Load Present PLC
000019DA 0C39 0000 00FF 152E        	cmpi.b #0,(v_time_zone).l
000019E2 6600                       	bne.s  .Load
000019E4 45F9 0000 0000             	lea	(LevelPLCID_Past).l,a2 ; Load Past PLC
000019EA                            .Load:
000019EA 45F2 0000                  	lea	(a2,d0.w),a2
000019EE 7000                       	moveq	#0,d0
000019F0 1012                       	move.b	(a2),d0
000019F2                            ;	beq.s	.LoadStdPLCs
000019F2 6100 0000                  	bsr.w	LoadPLCImm				; Load it immediately
000019F6                            
000019F6                            .LoadStdPLCs:
000019F6 7001                       	moveq	#1,d0					; Load standard PLCs immediately
000019F8 6100 0000                  	bsr.w	LoadPLCImm
000019FC                            
000019FC 4239 00FF 156B             	clr.b	(v_load_shield_art).l			; Reset shield art load flag
00001A02 42B9 00FF 1900             	clr.l	(v_flower_count).l			; Clear flower count
00001A08                            
00001A08 43F8 AC00                  	lea	(v_obj_draw_queue).w,a1			; Clear object sprite draw queue
00001A0C 7000                       	moveq	#0,d0
00001A0E 323C 00FF                  	move.w	#$400/4-1,d1
00001A12                            
00001A12                            .ClearObjSprites:
00001A12 22C0                       	move.l	d0,(a1)+
00001A14 51C9 FFFC                  	dbf	d1,.ClearObjSprites
00001A18                            
00001A18 43F9 00FF 1600             	lea	(v_flower_pos_buffer).l,a1		; Clear flower position buffer and other misc. variables
00001A1E 7000                       	moveq	#0,d0
00001A20 323C 027F                  	move.w	#$A00/4-1,d1
00001A24                            
00001A24                            .ClearFlowers:
00001A24 22C0                       	move.l	d0,(a1)+
00001A26 51C9 FFFC                  	dbf	d1,.ClearFlowers
00001A2A                            
00001A2A 43F8 D000                  	lea	(v_objects).w,a1			; Clear object RAM
00001A2E 7000                       	moveq	#0,d0
00001A30 323C 07FF                  	move.w	#$2000/4-1,d1
00001A34                            
00001A34                            .ClearObjects:
00001A34 22C0                       	move.l	d0,(a1)+
00001A36 51C9 FFFC                  	dbf	d1,.ClearObjects
00001A3A                            
00001A3A 43F9 00FF 4000             	lea	(v_unk_buffer2).l,a1			; Clear an unknown buffer
00001A40 7000                       	moveq	#0,d0
00001A42 323C 03FF                  	move.w	#$1000/4-1,d1
00001A46                            
00001A46                            .ClearUnkBuffer:
00001A46 22C0                       	move.l	d0,(a1)+
00001A48 51C9 FFFC                  	dbf	d1,.ClearUnkBuffer
00001A4C                            
00001A4C 43F8 F628                  	lea	(v_misc_variables).w,a1			; Clear misc. variables
00001A50 7000                       	moveq	#0,d0
00001A52 323C 0015                  	move.w	#$58/4-1,d1
00001A56                            
00001A56                            .ClearMiscVars:
00001A56 22C0                       	move.l	d0,(a1)+
00001A58 51C9 FFFC                  	dbf	d1,.ClearMiscVars
00001A5C                            
00001A5C 43F8 F700                  	lea	(v_cam_fg_x).w,a1			; Clear camera RAM
00001A60 7000                       	moveq	#0,d0
00001A62 323C 003F                  	move.w	#$100/4-1,d1
00001A66                            
00001A66                            .ClearCamera:
00001A66 22C0                       	move.l	d0,(a1)+
00001A68 51C9 FFFC                  	dbf	d1,.ClearCamera
00001A6C                            
00001A6C 4EB8 121A                  	jsr    GetChunkAddress
00001A70                            
00001A70 46FC 2700                  	move	#$2700,sr				; Disable interrupts
00001A74 21FC 0000 0000 F78A        	move.l	#LevelChunks+$6C00,(v_demo_data_ptr).w	; Set demo data pointer (in DEMO11A, part of the chunk data
00001A7C                            							; is overwritten with the demo input data. Here, it's unused)
00001A7C 31FC 0000 F78E             	move.w	#0,(v_demo_timer).w			; Reset demo timer
00001A82                            
00001A82 6100 0000                  	bsr.w	ClearScreen				; Clear the screen
00001A86 4DF9 00C0 0004             	lea	(VDP_CTRL).l,a6
00001A8C 3CBC 8B03                  	move.w	#$8B03,(a6)				; HScroll by line, VScroll by screen
00001A90 3CBC 8230                  	move.w	#$8230,(a6)				; Plane A at $C000
00001A94 3CBC 8407                  	move.w	#$8407,(a6)				; Plane B at $E000
00001A98 3CBC 857C                  	move.w	#$857C,(a6)				; Sprite table at $F800
00001A9C 3CBC 8C81                  	move.w  #$8C81,(a6)
00001AA0 3CBC 9001                  	move.w	#$9001,(a6)				; Plane size 64x32
00001AA4 3CBC 8004                  	move.w	#$8004,(a6)				; Disable H-INT
00001AA8 3CBC 8720                  	move.w	#$8720,(a6)				; Background color at line 2, color 0
00001AAC 31FC 8ADF F624             	move.w	#$8ADF,(v_hint_counter).w		; Set H-INT counter to 233
00001AB2 3CB8 F624                  	move.w	(v_hint_counter).w,(a6)
00001AB6                            
00001AB6 33FC 001E 00FF 150A        	move.w	#30,(v_air_left).l			; Set air timer
00001ABE                            
00001ABE 46FC 2300                  	move	#$2300,sr				; Enable interrupts
00001AC2 7003                       	moveq	#3,d0					; Load Sonic's palette into both palette buffers
00001AC4 6100 EC0E                  	bsr.w	LoadPalette
00001AC8 7003                       	moveq	#3,d0
00001ACA 6100 EBEC                  	bsr.w	LoadFadePal
00001ACE                            
00001ACE 6100 0000                  	bsr.w	LevelSizeLoad				; Get level size and start position
00001AD2 6100 0000                  	bsr.w	LevelScroll				; Initialize level scrolling
00001AD6 08F8 0002 F754             	bset	#2,(v_scroll_flags).w			; Force draw a block column on the left side of the screen
00001ADC 6100 0000                  	bsr.w	LoadLevelData				; Load level data
00001AE0 6100 0000                  	bsr.w	LevelDraw_Start				; Begin level drawing
00001AE4 4EB8 1784                  	jsr	ConvColArray				; Convert collision data (dummied out)
00001AE8 6100 0000                  	bsr.w	LoadLevelCollision			; Load collision block IDs
00001AEC                            
00001AEC                            .WaitPLC2:
00001AEC 11FC 000C F62A             	move.b	#$C,(v_vint_routine).w			; VSync
00001AF2 6100 EFAA                  	bsr.w	VSync
00001AF6 6100 0000                  	bsr.w	ProcessPLCs				; Process PLCs
00001AFA 66F0                       	bne.s	.WaitPLC2				; If the queue isn't empty, wait
00001AFC 4AB8 F680                  	tst.l	(v_plc_buffer).w			; Is the queue empty?
00001B00 66EA                       	bne.s	.WaitPLC2				; If not, wait
00001B02                            
00001B02 6100 0000                  	bsr.w	LoadPlayer				; Load the player
00001B06 11FC 001C D080             	move.b	#$1C,(v_obj_hud_score).w		; Load HUD score object
00001B0C 11FC 001C D0C0             	move.b	#$1C,(v_obj_hud_lives).w		; Load HUD lives object
00001B12 11FC 0001 D0E8             	move.b	#1,(v_obj_hud_lives+oSubtype).w
00001B18 11FC 001C D140             	move.b	#$1C,(v_obj_hud_rings).w		; Load HUD rings object
00001B1E 11FC 0001 D169             	move.b	#1,(v_obj_hud_rings+oSubtype2).w
00001B24 6100 0000                  	bsr.w	LoadLifeIcon
00001B28 11FC 0019 D7C0             	move.b	#$19,(v_obj_hud_time_icon).w		; Load HUD time icon object
00001B2E 11FC 000A D7E8             	move.b	#$A,(v_obj_hud_time_icon+oSubtype).w
00001B34                            
00001B34 08F9 0001 00FF 151C        	bset	#1,(v_load_plc_flags).l			; Mark title card as loaded
00001B3C 6600                       	bne.s	.SkipTitleCard				; If it was already loaded, branch
00001B3E 6100 0000                  		bsr.w	PlayLevelMusic				; Play level music
00001B42                            ;	moveq	#0,d0
00001B42                            ;	move.b	(v_zone).l,d0
00001B42                             ;   lea	(MusicList).l,a1 ; load	music playlist
00001B42                            ;	move.b	(a1,d0.w),d0
00001B42                            ;	jsr  	PlayFMSound	; play music
00001B42 11FC 003C D100             	move.b	#$3C,(v_obj_title_card).w		; Load the title card
00001B48 11FC 0001 F7CC             	move.b	#1,(v_ctrl_locked).w			; Lock controls
00001B4E 4239 00FF 1574             	clr.b	(v_last_camera_plc).l			; Reset last camera PLC
00001B54                            
00001B54                            .SkipTitleCard:
00001B54 31FC 0000 F602             	move.w	#0,(v_player_held).w			; Clear controller data
00001B5A 31FC 0000 F604             	move.w	#0,(v_ctrl1_held).w
00001B60 31FC 0000 F606             	move.w	#0,(v_ctrl2_held).w
00001B66 31FC 0000 F780             	move.w	#0,(v_bored_timer).w			; Reset boredom timers
00001B6C 31FC 0000 F782             	move.w	#0,(v_p2_bored_timer).w
00001B72 13FC 0000 00FF 156C        	move.b	#0,(v_unk_flag).l			; Clear unknown flag
00001B7A                            
00001B7A 7000                       	moveq	#0,d0
00001B7C 4A39 00FF 1522             	tst.b	(v_reset_lvl_flags).l			; Was the level reset?
00001B82 6600                       	bne.s	.SkipClear				; If so, branch
00001B84 33C0 00FF 1512             	move.w	d0,(v_ring_count).l			; Reset ring count
00001B8A 23C0 00FF 1514             	move.l	d0,(v_time).l				; Reset time
00001B90 13C0 00FF 150D             	move.b	d0,(v_1up_flags).l			; Reset 1UP flags
00001B96                            
00001B96                            .SkipClear:
00001B96 13C0 00FF 150C             	move.b	d0,(v_time_over).l			; Clear time over flag
00001B9C 13C0 00FF 151E             	move.b	d0,(v_shield).l				; Clear shield flag
00001BA2 13C0 00FF 151F             	move.b	d0,(v_invincible).l			; Clear invincible  flag
00001BA8 13C0 00FF 1520             	move.b	d0,(v_speed_shoes).l			; Clear speed shoes flag
00001BAE 13C0 00FF 1521             	move.b	d0,(v_time_warp_on).l			; Clear time warp flag
00001BB4 33C0 00FF 1906             	move.w	d0,(v_debug_mode).l			; Clear debug mode flag
00001BBA 33FC 0001 00FF 1588        	move.w  #$01,(v_debug_mode_enabled).l
00001BC2 33C0 00FF 1502             	move.w	d0,(v_level_restart).l			; Clear level restart flag
00001BC8 33C0 00FF 1504             	move.w	d0,(v_frame_timer).l			; Reset frame timer
00001BCE 13C0 00FF 1522             	move.b	d0,(v_reset_lvl_flags).l		; Clear level reset flags
00001BD4 13FC 0001 00FF 1511        	move.b	#1,(v_update_score).l			; Update the score in the HUD
00001BDC 13FC 0001 00FF 150F        	move.b	#1,(v_update_rings).l			; Update the ring count in the HUD
00001BE4 13FC 0001 00FF 1510        	move.b	#1,(v_update_time).l			; Update the time in the HUD
00001BEC 13FC 0001 00FF 150E        	move.b	#1,(v_update_lives).l			; Update the life counter in the HUD
00001BF4 13FC 0080 00FF 150F        	move.b	#$80,(v_update_rings).l			; Initialize the score in the HUD
00001BFC 13FC 0080 00FF 1511        	move.b	#$80,(v_update_score).l			; Initialize the score in the HUD
00001C04                            
00001C04 31FC 0000 F790             	move.w	#0,(v_s1_demo_data_index).w		; Clear demo data index (Sonic 1 leftover)
00001C0A 31FC 202F F626             	move.w	#$202F,(v_pal_fade_start).w		; Set to fade palette lines 1-3
00001C10                            
00001C10 4EB9 0000 0000             	jsr	JmpTo_LoadShieldArt			; Load shield art
00001C16                            
00001C16 13FC 0001 00FF 1903        	move.b	#1,(v_enable_display).l			; Set to enable display on palette fade
00001C1E 08B9 0007 00FF 152E        	bclr	#7,(v_time_zone).l			; Stop time travelling
00001C26 6700                       	beq.s	.ChkPalFade				; If we weren't to begin with, branch
00001C28                            
00001C28                            .FromWhite:
00001C28 6100 E952                  	bsr.w	FadeFromWhite				; Fade from white
00001C2C 6000                       	bra.s	.BeginLevel
00001C2E                            
00001C2E                            .ChkPalFade:
00001C2E 08B9 0000 00FF 0F22        	bclr	#0,(v_pal_clear_flags).l		; Did we fill the palette with white?
00001C36 66F0                       	bne.s	.FromWhite				; If so, branch
00001C38 6100 E822                  	bsr.w	FadeFromBlack				; Fade from black
00001C3C                            
00001C3C                            .BeginLevel:
00001C3C 08B8 0007 F600             	bclr	#7,(v_game_mode).w			; Mark level as initialized
00001C42 13FC 0001 00FF 1957        	move.b	#1,(v_level_started).l			; Mark level as started
00001C4A                            
00001C4A                            ; -------------------------------------------------------------------------------
00001C4A                            
00001C4A                            Level_MainLoop:
00001C4A 11FC 0008 F62A             	move.b	#8,(v_vint_routine).w			; VSync
00001C50 6100 EE4C                  	bsr.w	VSync
00001C54                            
00001C54 0C38 0006 D024             	cmpi.b	#6,(v_player+oRoutine).w		; Did the player die?
00001C5A 6400                       	bcc.s	.CheckPaused				; If so, branch
00001C5C 4A38 F7CC                  	tst.b	(v_ctrl_locked).w			; Are controls locked?
00001C60 6600                       	bne.s	.CheckPaused				; If so, branch
00001C62 0838 0007 F605             	btst	#7,(v_ctrl1_pressed).w			; Was the start button pressed?
00001C68 6700                       	beq.s	.CheckPaused				; If not, branch
00001C6A 0A38 0001 F63A             	eori.b	#1,(v_paused).w				; Do pause/unpause
00001C70                            
00001C70                            .CheckPaused:
00001C70 0838 0000 F63A             	btst	#0,(v_paused).w				; Is the game paused?
00001C76 6700 0000                  	beq.w	.NotPaused				; If not, branch
00001C7A                            
00001C7A 6100 0000                  	bsr.w	PauseMusic				; Pause music
00001C7E                            
00001C7E 1038 F605                  	move.b	(v_ctrl1_pressed).w,d0			; Get pressed buttons
00001C82 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l			; Are we in time attack mode?
00001C88 6600                       	bne.s	.CheckReset				; If so, branch
00001C8A                            
00001C8A 0200 0070                  	andi.b	#$70,d0					; Was A, B, or C pressed?
00001C8E 67BA                       	beq.s	Level_MainLoop				; If not, branch
00001C90 5339 00FF 1508             	subq.b	#1,(v_life_count).l			; Take away a life
00001C96 6A00                       	bpl.s	.GotLives				; If we haven't run out, branch
00001C98 4239 00FF 1508             	clr.b	(v_life_count).l			; Cap lives at 0
00001C9E                            
00001C9E                            .GotLives:
00001C9E 303C 000E                  	move.w	#$E,d0					; Fade out music
00001CA2 4EB9 0000 0000             	jsr	SendSubCommand
00001CA8                            
00001CA8 6100 0000                  	bsr.w	ResetRespawnTable			; Clear respawn table
00001CAC 4239 00FF 1522             	clr.b	(v_reset_lvl_flags).l			; Clear level reset flags
00001CB2 33FC 0001 00FF 1502        	move.w	#1,(v_level_restart).l			; Restart the level
00001CBA 6000                       	bra.s	.DoReset
00001CBC                            
00001CBC                            .CheckReset:
00001CBC 0200 0070                  	andi.b	#$70,d0					; Was A, B, or C pressed?
00001CC0 6700 FF88                  	beq.w	Level_MainLoop				; If not, branch
00001CC4 4239 00FF 1508             	clr.b	(v_life_count).l			; Set lives to 0
00001CCA                            
00001CCA                            .DoReset:
00001CCA 4238 F63A                  	clr.b	(v_paused).w				; Clear pause flag
00001CCE 4279 00FF 1580             	clr.w	(v_demo_mode).l				; Clear demo mode flag
00001CD4 4239 00FF 158E             	clr.b	(v_last_checkpoint).l			; Clear checkpoint flag
00001CDA 6000 FB42                  	bra.w	Level					; Restart the level
00001CDE                            
00001CDE                            .NotPaused:
00001CDE 6100 0000                  	bsr.w	UnpauseMusic				; Unpause music
00001CE2                            
00001CE2 5279 00FF 1504             	addq.w	#1,(v_frame_timer).l			; Increment frame timer
00001CE8                            
00001CE8 4EB9 0000 0000             	jsr	LevelObjManager				; Load level objects
00001CEE 4EB9 0000 0000             	jsr	RunObjects				; Run objects
00001CF4                            
00001CF4 0C78 0800 F78E             	cmpi.w	#$800,(v_demo_timer).w			; Has the demo time run out (not applicable here)?
00001CFA 6700 FB22                  	beq.w	Level					; If so, restart the level
00001CFE 4A79 00FF 1502             	tst.w	(v_level_restart).l			; Is the level restarting?
00001D04 6600 FB18                  	bne.w	Level					; If so, restart the level
00001D08 4A79 00FF 1906             	tst.w	(v_debug_mode).l			; Are we in debug mode?
00001D0E 6600                       	bne.s	.DoScroll				; If so, branch
00001D10 0C38 0006 D024             	cmpi.b	#6,(v_player+oRoutine).w		; Is the player dead?
00001D16 6500                       	bcs.s	.DoScroll				; If not, branch
00001D18 31F8 F704 F72E             	move.w	(v_cam_fg_y).w,(v_bottom_bound).w	; Set the bottom boundary of the level to wherever the camera is
00001D1E 31F8 F704 F726             	move.w	(v_cam_fg_y).w,(v_dest_btm_bound).w
00001D24 6000                       	bra.s	.DrawObjects				; Don't handle level scrolling
00001D26                            
00001D26                            .DoScroll:
00001D26 6100 0000                  	bsr.w	LevelScroll				; Handle level scrolling
00001D2A                            
00001D2A                            .DrawObjects:
00001D2A 4EB9 0000 0000             	jsr	DrawObjects				; Draw objects
00001D30                            
00001D30 4A79 00FF 190E             	tst.w	(v_time_stop_timer).l			; Is the time stop timer active?
00001D36 6600                       	bne.s	.SkipPalCycle				; If so, branch
00001D38 6100 E592                  	bsr.w	PalCycle				; Handle palette cycling
00001D3C                            
00001D3C                            .SkipPalCycle:
00001D3C 4EB9 0000 0000             	jsr	LoadCameraPLC_Incr			; Load camera based PLCs
00001D42 6100 0000                  	bsr.w	ProcessPLCs				; Process PLCs
00001D46 6100 0000                  	bsr.w	HandleGlobalAnims			; Handle global animations
00001D4A                            
00001D4A 6000 FEFE                  	bra.w	Level_MainLoop				; Loop
00001D4E                            
00001D4E                            ; -------------------------------------------------------------------------------
00001D4E                            ; Load the player object
00001D4E                            ; -------------------------------------------------------------------------------
00001D4E                            
00001D4E                            LoadPlayer:
00001D4E 43F8 D000                  	lea	(v_player).w,a1				; Player object
00001D52 7001                       	moveq	#1,d0					; Set player object ID
00001D54 1280                       	move.b	d0,oID(a1)
00001D56 4A39 00FF 1522             	tst.b	(v_reset_lvl_flags).l			; Was the level reset midway?
00001D5C 6700                       	beq.s	.End					; If not, branch
00001D5E 337C 0078 0030             	move.w	#$78,oPlayerHurt(a1)			; If so, make the player invulnerable for a bit
00001D64                            
00001D64                            .End:
00001D64 4E75                       	rts
00001D66                            
00001D66                            ; -------------------------------------------------------------------------------
00001D66                            ; Restore zone flowers
00001D66                            ; -------------------------------------------------------------------------------
00001D66                            
00001D66                            RestoreZoneFlowers:
00001D66 43F9 00FF 1900             	lea	(v_flower_count).l,a1			; Get flower count bsaed on time zone
00001D6C 7000                       	moveq	#0,d0
00001D6E 1039 00FF 152E             	move.b	(v_time_zone).l,d0
00001D74 0880 0007                  	bclr	#7,d0
00001D78 1031 0000                  	move.b	(a1,d0.w),d0
00001D7C 6700                       	beq.s	.End					; There are no flowers, exit
00001D7E                            
00001D7E 5300                       	subq.b	#1,d0					; Fix flower count for DBF
00001D80 45F8 D800                  	lea	(v_dyn_objects).w,a2			; Dynamic object RAM
00001D84 7200                       	moveq	#0,d1					; Flower ID
00001D86                            
00001D86                            .Loop:
00001D86 14BC 001F                  	move.b	#$1F,oID(a2)				; Load a flower
00001D8A 3401                       	move.w	d1,d2					; Get flower position buffer index based on time zone
00001D8C D442                       	add.w	d2,d2
00001D8E D442                       	add.w	d2,d2
00001D90 7600                       	moveq	#0,d3
00001D92 1639 00FF 152E             	move.b	(v_time_zone).l,d3
00001D98 0883 0007                  	bclr	#7,d3
00001D9C E14B                       	lsl.w	#8,d3
00001D9E D443                       	add.w	d3,d2
00001DA0 47F9 00FF 1600             	lea	(v_flower_pos_buffer).l,a3		; Get flower position
00001DA6 3573 2000 0008             	move.w	(a3,d2.w),oX(a2)
00001DAC 3573 2002 000C             	move.w	2(a3,d2.w),oY(a2)
00001DB2                            
00001DB2 D4FC 0040                  	adda.w	#oVarLen,a2				; Next object
00001DB6 5201                       	addq.b	#1,d1					; Next flower
00001DB8 51C8 FFCC                  	dbf	d0,.Loop				; Loop until finished
00001DBC                            
00001DBC                            .End:
00001DBC 4E75                       	rts
00001DBE                            
00001DBE                            ; -------------------------------------------------------------------------------
00001DBE                            ; Load level collision
00001DBE                            ; -------------------------------------------------------------------------------
00001DBE                            
00001DBE                            LoadLevelCollision:
00001DBE 7000                       	moveq  #0,d0
00001DC0 1039 00FF 1506                 move.b  (v_zone).l,d0
00001DC6 ED48                           lsl.w  #6,d0
00001DC8 7200                           moveq  #0,d1
00001DCA 1239 00FF 1507                 move.b  (v_act).l,d1
00001DD0 E949                           lsl.w  #4,d1
00001DD2 8041                           or.w  d1,d0
00001DD4 7200                           moveq  #0,d1
00001DD6 1239 00FF 152E                 move.b  (v_time_zone).l,d1
00001DDC E549                           lsl.w  #2,d1
00001DDE 8041                           or.w  d1,d0
00001DE0 21FB 0000 F796             	move.l	LevelColIndex(pc,d0.w),(v_collision_ptr).w
00001DE6 4E75                       	rts
00001DE8                            
00001DE8                            ; -------------------------------------------------------------------------------
00001DE8                            
00001DE8                            LevelColIndex:
00001DE8                            ; Palmtree Panic Zone Act 1
00001DE8 0000 0000                  	dc.l	PPZ1_Collision_P				
00001DEC 0000 0000                  	dc.l	LevelCollision				
00001DF0 0000 0000                  	dc.l	PPZ1_Collision_BF
00001DF4 0000 0000                  	dc.l	PPZ1_Collision_GF
00001DF8                            ; Palmtree Panic Zone Act 2					
00001DF8 0000 0000                  	dc.l	PPZ2_Collision_P	
00001DFC 0000 0000                  	dc.l	PPZ2_Collision
00001E00 0000 0000                  	dc.l	PPZ2_Collision_BF	
00001E04 0000 0000                  	dc.l	PPZ2_Collision_GF
00001E08                            ; Palmtree Panic Zone Act 3	
00001E08 0000 0000                  	dc.l	PPZ3_Collision_GF
00001E0C 0000 0000                  	dc.l	PPZ3_Collision_GF
00001E10 0000 0000                  	dc.l	PPZ3_Collision_GF
00001E14 0000 0000                  	dc.l	PPZ3_Collision_GF
00001E18                            
00001E18                            ; -------------------------------------------------------------------------------
00001E18                            ; Handle global animations
00001E18                            ; -------------------------------------------------------------------------------
00001E18                            
00001E18                            HandleGlobalAnims:
00001E18 5339 00FF 1910             	subq.b	#1,(v_logspike_anim_timer).l		; Decrement Sonic 1 spiked log animation timer
00001E1E 6A00                       	bpl.s	.Rings					; If it hasn't run out, branch
00001E20 13FC 000B 00FF 1910        	move.b	#$B,(v_logspike_anim_timer).l		; Reset animation timer
00001E28 5339 00FF 1911             	subq.b	#1,(v_logspike_anim_frame).l		; Decrement frame
00001E2E 0239 0007 00FF 1911        	andi.b	#7,(v_logspike_anim_frame).l		; Keep the frame in range
00001E36                            
00001E36                            .Rings:
00001E36 5339 00FF 1912             	subq.b	#1,(v_ring_anim_timer).l		; Decrement ring animation timer
00001E3C 6A00                       	bpl.s	.Unknown				; If it hasn't run out, branch
00001E3E 13FC 0007 00FF 1912        	move.b	#7,(v_ring_anim_timer).l		; Reset animation timer
00001E46 5239 00FF 1913             	addq.b	#1,(v_ring_anim_frame).l		; Increment frame
00001E4C 0239 0003 00FF 1913        	andi.b	#3,(v_ring_anim_frame).l		; Keep the frame in range
00001E54                            
00001E54                            .Unknown:
00001E54 5339 00FF 1914             	subq.b	#1,(v_unk_anim_timer).l			; Decrement Sonic 1 unused animation timer
00001E5A 6A00                       	bpl.s	.RingSpill				; If it hasn't run out, branch
00001E5C 13FC 0007 00FF 1914        	move.b	#7,(v_unk_anim_timer).l			; Reset animation timer
00001E64 5239 00FF 1915             	addq.b	#1,(v_unk_anim_frame).l			; Increment frame
00001E6A 0C39 0006 00FF 1915        	cmpi.b	#6,(v_unk_anim_frame).l			; Keep the frame in range
00001E72 6500                       	bcs.s	.RingSpill
00001E74 13FC 0000 00FF 1915        	move.b	#0,(v_unk_anim_frame).l
00001E7C                            
00001E7C                            .RingSpill:
00001E7C 4A39 00FF 1916             	tst.b	(v_ring_spill_timer).l			; Has the ring spill timer run out?
00001E82 6700                       	beq.s	.End					; If so, branch
00001E84 7000                       	moveq	#0,d0					; Increment frame accumulator
00001E86 1039 00FF 1916             	move.b	(v_ring_spill_timer).l,d0
00001E8C D079 00FF 1918             	add.w	(v_ring_spill_accum).l,d0
00001E92 33C0 00FF 1918             	move.w	d0,(v_ring_spill_accum).l
00001E98 EF58                       	rol.w	#7,d0					; Set ring spill frame
00001E9A 0240 0003                  	andi.w	#3,d0
00001E9E 13C0 00FF 1917             	move.b	d0,(v_ring_spill_frame).l
00001EA4 5339 00FF 1916             	subq.b	#1,(v_ring_spill_timer).l		; Decrement ring spill timer
00001EAA                            
00001EAA                            .End:
00001EAA 4E75                       	rts
00001EAC                            
00001EAC                            ; -------------------------------------------------------------------------------
00001EAC                            ; Play level music
00001EAC                            ; -------------------------------------------------------------------------------
00001EAC                            
00001EAC                            PlayLevelMusic:
00001EAC 7000                       	moveq	#0,d0                       ; Set Time Zone to 0
00001EAE 7200                       	moveq	#0,d1                       ; Set Zone to 0
00001EB0 1039 00FF 152E             	move.b	(v_time_zone).l,d0			; Get time zone
00001EB6 0880 0007                  	bclr	#7,d0
00001EBA 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l			; Are we in time attack mode?
00001EC0 6600                       	bne.s	.Notfuture				; If so, branch
00001EC2 0C00 0002                  	cmpi.b	#2,d0					; Are we in the future?
00001EC6 6600                       	bne.s	.NotFuture				; If not, branch
00001EC8 D039 00FF 156A             	add.b	(v_good_future).l,d0			; Apply good future flag
00001ECE                            
00001ECE                            .NotFuture:
00001ECE 1239 00FF 1506             	move.b	(v_zone).l,d1				; Send music play Sub CPU command
00001ED4 D241                       	add.w	d1,d1
00001ED6 D241                       	add.w	d1,d1
00001ED8 D240                       	add.w	d0,d1
00001EDA 7000                       	moveq	#0,d0
00001EDC                            ;	move.b	MusicPlayCmds(pc,d1.w),d0
00001EDC                            ;	jmp	PlayFMSound
00001EDC 4E75                           rts
00001EDE                            
00001EDE                            ; -------------------------------------------------------------------------------
00001EDE =00000081                  bgm_PPZ_P:	equ $81 ; PPZ Past
00001EDE =00000082                  bgm_PPZ:	equ $82 ; PPZ Present
00001EDE =00000083                  bgm_MZ:		equ $83	; SCD Title Theme
00001EDE =00000084                  bgm_SLZ:	equ $84	; SCD Speed Shoes Theme
00001EDE =00000085                  bgm_PPZ_GF:	equ $85 ; PPZ Good Future
00001EDE =00000086                  bgm_PPZ_BF:	equ $86	; PPZ Bad Future
00001EDE =0000008D                  bgm_FZ:		equ $8D	; S1 Final Zone
00001EDE                            
00001EDE                            MusicPlayCmds:
00001EDE                            ;           Past   Present  Future   Good Future	
00001EDE 8195 8685                  	dc.b	bgm_PPZ_P, bgm_SSZP, bgm_PPZ_BF, bgm_PPZ_GF			; PPZ $00
00001EE2 8012 1413                  	dc.b	$80, $12, $14, $13			; CCZ $01
00001EE6 8015 1716                  	dc.b	$80, $15, $17, $16			; TTZ $02
00001EEA 8018 1A19                  	dc.b	$80, $18, $1A, $19			; QQZ $03
00001EEE 801B 1D1C                  	dc.b	$80, $1B, $1D, $1C			; WWZ $04
00001EF2 801E 201F                  	dc.b	$80, $1E, $20, $1F			; SSZ $05
00001EF6 8021 6622                  	dc.b	$80, $21, $66, $22			; MMZ $06
00001EFA                            
00001EFA                            ; -------------------------------------------------------------------------------
00001EFA                            ; Play Palmtree Panic present music
00001EFA                            ; -------------------------------------------------------------------------------
00001EFA                            
00001EFA                            PlayLevelMusic2:
00001EFA 303C 000F                  	move.w	#$F,d0					; Play PPZ present music
00001EFE 4EB9 0000 0000             	jsr	SendSubCommand
00001F04                            	; Continue to load the life icon
00001F04                            
00001F04                            ; -------------------------------------------------------------------------------
00001F04                            ; Load life icon
00001F04                            ; -------------------------------------------------------------------------------
00001F04                            
00001F04                            LoadLifeIcon:
00001F04 203C 7420 0002             	move.l	#$74200002,d0				; Set VDP write command
00001F0A                            
00001F0A 7400                       	moveq	#0,d2					; Get pointer to life icon
00001F0C 1439 00FF 152E             	move.b	(v_time_zone).l,d2
00001F12 0882 0007                  	bclr	#7,d2
00001F16 EF4A                       	lsl.w	#7,d2
00001F18 2D40 0004                  	move.l	d0,4(a6)
00001F1C 43F9 0000 0000             	lea	(ArtUnc_LifeIcon).l,a1
00001F22 47F1 2000                  	lea	(a1,d2.w),a3
00001F26                            
00001F26                            	rept	32
00001F26                            		move.l	(a3)+,(a6)			; Load life icon
00001F26 2C9B 2C9B 2C9B 2C9B 2C9B+  	endr
00001F66                            
00001F66 4E75                       	rts
00001F68                            
00001F68                            ; -------------------------------------------------------------------------------
00001F68                            ; Pause the music
00001F68                            ; -------------------------------------------------------------------------------
00001F68                            
00001F68                            PauseMusic:
00001F68                            ;	move.w	#$AB,d0					; Stop FM sound
00001F68                            ;	jsr	PlayFMSound
00001F68                            
00001F68 08F8 0007 F63A             	bset	#7,(v_paused).w				; Set the music as paused
00001F6E 6600                       	bne.s	.End					; If it was already paused, branch
00001F70                            
00001F70 1039 00FF 152E             	move.b	(v_time_zone).l,d0			; Get time zone
00001F76 0880 0007                  	bclr	#7,d0
00001F7A 4A00                       	tst.b	d0					; Are we in the past?
00001F7C 6700                       	beq.s	.Past					; If so, branch
00001F7E                            
00001F7E                            .PauseMusic:
00001F7E 11FC 0001 F003             	move.b	#1,($FFFFF003).w ; pause music
00001F84                            
00001F84                            .Past:
00001F84 4A39 00FF 151F             	tst.b	(v_invincible).l			; Are we invincible?
00001F8A 66F2                       	bne.s	.PauseMusic				; If so, pause the invincibility music
00001F8C 4A39 00FF 1520             	tst.b	(v_speed_shoes).l			; Do we have speed shoes?
00001F92 66EA                       	bne.s	.PauseMusic				; If so, pause the speed shoes music
00001F94                            
00001F94                            ;	move.w	#$90,d0					; Pause PCM music
00001F94                            ;	jmp	SendSubCommand
00001F94                            
00001F94                            .End:
00001F94 4E75                       	rts
00001F96                            
00001F96                            ; -------------------------------------------------------------------------------
00001F96                            ; Unpause music
00001F96                            ; -------------------------------------------------------------------------------
00001F96                            
00001F96                            UnpauseMusic:
00001F96 08B8 0007 F63A             	bclr	#7,(v_paused).w				; Set the music as unpaused
00001F9C 6700                       	beq.s	.End					; If it was already unpaused, branch
00001F9E                            
00001F9E 1039 00FF 152E             	move.b	(v_time_zone).l,d0			; Get time zone
00001FA4 0880 0007                  	bclr	#7,d0
00001FA8 4A00                       	tst.b	d0					; Are we in the past?
00001FAA 6700                       	beq.s	.Past					; If so, branch
00001FAC                            
00001FAC                            .UnpauseMusic:
00001FAC 11FC 0080 F003             	move.b	#$80,($FFFFF003).w
00001FB2                            
00001FB2                            .Past:
00001FB2 4A39 00FF 151F             	tst.b	(v_invincible).l			; Are we invincible?
00001FB8 66F2                       	bne.s	.UnpauseMusic				; If so, unpause the invincibility music
00001FBA 4A39 00FF 1520             	tst.b	(v_speed_shoes).l			; Do we have speed shoes?
00001FC0 66EA                       	bne.s	.UnpauseMusic				; If so, unpause the speed shoes music
00001FC2                            
00001FC2                            ;	move.w	#$91,d0					; Unpause PCM music
00001FC2                            ;	jmp	SendSubCommand
00001FC2                            
00001FC2                            .End:
00001FC2 4E75                       	rts
00001FC4                            
00001FC4                            ; -------------------------------------------------------------------------------
00001FC4                            ; Vertical interrupt routine
00001FC4                            ; -------------------------------------------------------------------------------
00001FC4                            loc_B10:
00001FC4                            V_Interrupt:
00001FC4 08F9 0000 00A1 2000        	bset	#0,(GA_RESET).l				; Send Sub CPU IRQ2 request
00001FCC 48E7 FFFE                  	movem.l	d0-a6,-(sp)				; Save registers
00001FD0                            
00001FD0 4A38 F62A                  	tst.b	(v_vint_routine).w			; Are we lagging?
00001FD4 6700                       	beq.s	VInt_Lag				; If so, branch
00001FD6                            
00001FD6 3039 00C0 0004             	move.w	(VDP_CTRL).l,d0	
00001FDC 23FC 4000 0010 00C0 0004   	move.l	#$40000010,(VDP_CTRL).l			; Update VScroll
00001FE6 23F8 F616 00C0 0000        	move.l	(v_vscroll).w,(VDP_DATA).l
00001FEE                            
00001FEE 0839 0006 00FF 1586        	btst	#6,(v_hw_version).l			; Is this a PAL console?
00001FF6 6700                       	beq.s	.NotPAL					; If not, branch
00001FF8 303C 0700                  	move.w	#$700,d0				; Delay for a bit
00001FFC 51C8 FFFE                  	dbf	d0,*
00002000                            
00002000                            .NotPAL:
00002000 1038 F62A                  	move.b	(v_vint_routine).w,d0			; Get V-INT routine ID
00002004 11FC 0000 F62A             	move.b	#0,(v_vint_routine).w			; Mark V-INT as run
0000200A 0240 003E                  	andi.w	#$3E,d0
0000200E 303B 0000                  	move.w	VInt_Index(pc,d0.w),d0			; Run the current V-INT routine
00002012 4EBB 0000                  	jsr	VInt_Index(pc,d0.w)
00002016                            
00002016                            VInt_Finish:
00002016 4EB9 0000 0000             	jsr	(sub_71B4C).l				; Update FM driver queues
0000201C 4A38 F63A                  	tst.b	(v_paused).w				; Is the game paused?
00002020 6600                       	bne.s	VInt_Done				; If so, branch
00002022 6100 0000                  	bsr.w	RunBoredTimer				; Run boredom timer
00002026 6100 0000                  	bsr.w	RunTimeWarp				; Run time warp timer
0000202A                            
0000202A                            VInt_Done:
0000202A 52B9 00FF 190A             	addq.l	#1,(v_frame_count).l			; Increment frame counter
00002030                            
00002030 4CDF 7FFF                  	movem.l	(sp)+,d0-a6				; Restore registers
00002034 4E73                       	rte
00002036                            
00002036                            ; -------------------------------------------------------------------------------
00002036                            
00002036                            VInt_Index:
00002036 0000                       	dc.w	VInt_Lag-VInt_Index			    ; Lag
00002038 0000                       	dc.w	VInt_General-VInt_Index			; General
0000203A 0000                       	dc.w	VInt_S1Title-VInt_Index			; Sonic 1 title screen (leftover)
0000203C 0000                       	dc.w	VInt_Unk6-VInt_Index			; Unknown (leftover)
0000203E 0000                       	dc.w	VInt_Level-VInt_Index			; Level
00002040 0000                       	dc.w	VInt_S1SpecStg-VInt_Index		; Sonic 1 special stage (leftover)
00002042 0000                       	dc.w	VInt_LevelLoad-VInt_Index		; Level load
00002044 0000                       	dc.w	VInt_UnkE-VInt_Index			; Unknown (leftover)
00002046 0000                       	dc.w	VInt_Pause-VInt_Index			; Sonic 1 pause (leftover)
00002048 0000                       	dc.w	VInt_PalFade-VInt_Index			; Palette fade
0000204A 0000                       	dc.w	VInt_S1SegaScr-VInt_Index		; Sonic 1 SEGA screen (leftover)
0000204C 0000                       	dc.w	VInt_S1ContScr-VInt_Index		; Sonic 1 continue screen (leftover)
0000204E 0000                       	dc.w	VInt_LevelLoad-VInt_Index		; Level load
00002050                            
00002050                            ; -------------------------------------------------------------------------------
00002050                            ; V-INT lag routine
00002050                            ; -------------------------------------------------------------------------------
00002050                            
00002050                            VInt_Lag:
00002050 4A39 00FF 1957             	tst.b	(v_level_started).l			; Has the level started?
00002056 6700 FFBE                  	beq.w	VInt_Finish				; If not, branch
0000205A 0C39 0002 00FF 1506        	cmpi.b	#2,(v_zone).l				; Are we in Tidal Tempest?
00002062 6600 FFB2                  	bne.w	VInt_Finish				; If not, branch
00002066                            
00002066 3039 00C0 0004             	move.w	(VDP_CTRL).l,d0
0000206C 0839 0006 00FF 1586        	btst	#6,(v_hw_version).l			; Is this a PAL console?
00002074 6700                       	beq.s	.NotPAL					; If not, branch
00002076 303C 0700                  	move.w	#$700,d0				; Delay for a bit
0000207A 51C8 FFFE                  	dbf	d0,*
0000207E                            
0000207E                            .NotPAL:
0000207E 31FC 0001 F6FC             	move.w	#1,(v_hint_flag).w			; Set H-INT flag
00002084 4EB9 0000 0000             	jsr	StopZ80					; Stop the Z80
0000208A                            
0000208A 4A38 F64E                  	tst.b	(v_water_full).w			; Is water filling the screen?
0000208E 6600                       	bne.s	.WaterPal				; If so, branch
00002090 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA palette buffer
00002096 2ABC 9400 9340             	move.l	#$94009340,(a5)
0000209C 2ABC 96FD 9580             	move.l	#$96FD9580,(a5)
000020A2 3ABC 977F                  	move.w	#$977F,(a5)
000020A6 3ABC C000                  	move.w	#$C000,(a5)
000020AA 31FC 0080 F640             	move.w	#$80,(v_dma_cmd_cache).w
000020B0 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
000020B4 6000                       	bra.s	.Done
000020B6                            
000020B6                            .WaterPal:
000020B6 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA water palette buffer
000020BC 2ABC 9400 9340             	move.l	#$94009340,(a5)
000020C2 2ABC 96FD 9540             	move.l	#$96FD9540,(a5)
000020C8 3ABC 977F                  	move.w	#$977F,(a5)
000020CC 3ABC C000                  	move.w	#$C000,(a5)
000020D0 31FC 0080 F640             	move.w	#$80,(v_dma_cmd_cache).w
000020D6 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
000020DA                            
000020DA                            .Done:
000020DA 3AB8 F624                  	move.w	(v_hint_counter).w,(a5)			; Update H-INT counter
000020DE 4EB9 0000 0000             	jsr	StartZ80				; Start the Z80
000020E4                            
000020E4                            
000020E4 6000 FF30                  	bra.w	VInt_Finish				; Finish V-INT
000020E8                            
000020E8                            ; -------------------------------------------------------------------------------
000020E8                            ; V-INT general routine
000020E8                            ; -------------------------------------------------------------------------------
000020E8                            
000020E8                            VInt_General:
000020E8 6100 0000                  	bsr.w	DoVIntUpdates				; Do V-INT updates
000020EC                            
000020EC                            VInt_S1SegaScr:						; Pointer to here is leftover from Sonic 1's
000020EC                            							; SEGA screen V-INT routine
000020EC                            
000020EC 4A78 F614                  	tst.w	(v_vint_timer).w			; Is the V-INT timer running?
000020F0 6700 0000                  	beq.w	.End					; If not, branch
000020F4 5378 F614                  	subq.w	#1,(v_vint_timer).w			; Decrement V-INT timer
000020F8                            
000020F8                            .End:
000020F8 4E75                       	rts
000020FA                            
000020FA                            ; -------------------------------------------------------------------------------
000020FA                            ; Leftover dead code from Sonic 1's title screen V-INT routine
000020FA                            ; -------------------------------------------------------------------------------
000020FA                            
000020FA                            VInt_S1Title:
000020FA 6100 0000                  	bsr.w	DoVIntUpdates				; Do V-INT updates
000020FE 6100 0000                  	bsr.w	LevelDraw_UpdateBG			; Draw level BG
00002102 6100 0000                  	bsr.w	ProcessPLCDec				; Process PLC art decompression
00002106                            
00002106 4A78 F614                  	tst.w	(v_vint_timer).w			; Is the V-INT timer running?
0000210A 6700 0000                  	beq.w	.End					; If not, branch
0000210E 5378 F614                  	subq.w	#1,(v_vint_timer).w			; Decrement V-INT timer
00002112                            
00002112                            .End:
00002112 4E75                       	rts
00002114                            
00002114                            ; -------------------------------------------------------------------------------
00002114                            ; Leftover dead code from Sonic 1's V-INT
00002114                            ; -------------------------------------------------------------------------------
00002114                            
00002114                            VInt_Unk6:
00002114 6100 0000                  	bsr.w	DoVIntUpdates				; Do V-INT updates
00002118 4E75                       	rts
0000211A                            
0000211A                            ; -------------------------------------------------------------------------------
0000211A                            ; Leftover dead code from Sonic 1's pause V-INT routine
0000211A                            ; -------------------------------------------------------------------------------
0000211A                            
0000211A                            VInt_Pause:
0000211A 0C38 0010 F600             	cmpi.b	#$10,(v_game_mode).w			; Are we in the Sonic 1 special stage?
00002120 6700 0000                  	beq.w	VInt_S1SpecStg				; If so, branch
00002124                            
00002124                            ; -------------------------------------------------------------------------------
00002124                            ; V-INT level routine
00002124                            ; -------------------------------------------------------------------------------
00002124                            
00002124                            VInt_Level:
00002124 4EB9 0000 0000             	jsr	StopZ80					; Stop the Z80
0000212A 6100 0000                  	bsr.w	ReadJoypads				; Read joypads
0000212E                            
0000212E 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA palette
00002134 2ABC 9400 9340             	move.l	#$94009340,(a5)
0000213A 2ABC 96FD 9580             	move.l	#$96FD9580,(a5)
00002140 3ABC 977F                  	move.w	#$977F,(a5)
00002144 3ABC C000                  	move.w	#$C000,(a5)
00002148 31FC 0080 F640             	move.w	#$80,(v_dma_cmd_cache).w
0000214E 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002152                            
00002152 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA HScroll
00002158 2ABC 9401 93C0             	move.l	#$940193C0,(a5)
0000215E 2ABC 96E6 9500             	move.l	#$96E69500,(a5)
00002164 3ABC 977F                  	move.w	#$977F,(a5)
00002168 3ABC 7C00                  	move.w	#$7C00,(a5)
0000216C 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
00002172 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002176                            
00002176 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA sprites
0000217C 2ABC 9401 9340             	move.l	#$94019340,(a5)
00002182 2ABC 96FC 9500             	move.l	#$96FC9500,(a5)
00002188 3ABC 977F                  	move.w	#$977F,(a5)
0000218C 3ABC 7800                  	move.w	#$7800,(a5)
00002190 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
00002196 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
0000219A                            
0000219A 41F8 D000                  	lea	(v_player).w,a0				; Load player sprite art
0000219E 6100 0000                  	bsr.w	LoadSonicDynPLC
000021A2 4A38 F767                  	tst.b	(v_sonic_frame_changed).w
000021A6 6700                       	beq.s	.NoArtLoad
000021A8 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5
000021AE 2ABC 9401 9370             	move.l	#$94019370,(a5)
000021B4 2ABC 96E4 9500             	move.l	#$96E49500,(a5)
000021BA 3ABC 977F                  	move.w	#$977F,(a5)
000021BE 3ABC 7000                  	move.w	#$7000,(a5)
000021C2 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
000021C8 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
000021CC 11FC 0000 F767             	move.b	#0,(v_sonic_frame_changed).w
000021D2                            
000021D2                            .NoArtLoad:
000021D2 4EB9 0000 0000             	jsr	JmpTo_LoadShieldArt			; Load shield art
000021D8 4EB9 0000 0000             	jsr	StartZ80				; Start the Z80
000021DE                            
000021DE 4CF8 00FF F700             	movem.l	(v_cam_fg_x).w,d0-d7			; Draw level
000021E4 48F9 00FF 00FF 1926        	movem.l	d0-d7,(v_cam_x_fg_copy).l
000021EC 4CF8 0003 F754             	movem.l	(v_scroll_flags).w,d0-d1
000021F2 48F9 0003 00FF 1946        	movem.l	d0-d1,(v_scroll_flags_copy).l
000021FA 6100 0000                  	bsr.w	LevelDraw_Update
000021FE                            
000021FE 6100 0000                  	bsr.w	ProcessPLCDec_Small			; Process PLC art decompression
00002202 4EF9 0000 0000             	jmp	UpdateHUD				; Update the HUD
00002208                            
00002208                            ; -------------------------------------------------------------------------------
00002208                            ; Emptied out code from Sonic 1's special stage V-INT routine
00002208                            ; -------------------------------------------------------------------------------
00002208                            
00002208                            VInt_S1SpecStg:
00002208 4E75                       	rts
0000220A                            
0000220A                            ; -------------------------------------------------------------------------------
0000220A                            ; V-INT level load routine
0000220A                            ; -------------------------------------------------------------------------------
0000220A                            
0000220A                            VInt_LevelLoad:
0000220A 4EB9 0000 0000             	jsr	StopZ80					; Stop the Z80
00002210 6100 0000                  	bsr.w	ReadJoypads				; Read joypads
00002214                            
00002214 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA palette
0000221A 2ABC 9400 9340             	move.l	#$94009340,(a5)
00002220 2ABC 96FD 9580             	move.l	#$96FD9580,(a5)
00002226 3ABC 977F                  	move.w	#$977F,(a5)
0000222A 3ABC C000                  	move.w	#$C000,(a5)
0000222E 31FC 0080 F640             	move.w	#$80,(v_dma_cmd_cache).w
00002234 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002238                            
00002238 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA HScroll
0000223E 2ABC 9401 93C0             	move.l	#$940193C0,(a5)
00002244 2ABC 96E6 9500             	move.l	#$96E69500,(a5)
0000224A 3ABC 977F                  	move.w	#$977F,(a5)
0000224E 3ABC 7C00                  	move.w	#$7C00,(a5)
00002252 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
00002258 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
0000225C                            
0000225C 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA sprites
00002262 2ABC 9401 9340             	move.l	#$94019340,(a5)
00002268 2ABC 96FC 9500             	move.l	#$96FC9500,(a5)
0000226E 3ABC 977F                  	move.w	#$977F,(a5)
00002272 3ABC 7800                  	move.w	#$7800,(a5)
00002276 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
0000227C 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002280                            
00002280 4EB9 0000 0000             	jsr	StartZ80				; Start the Z80
00002286                            
00002286 4CF8 00FF F700             	movem.l	(v_cam_fg_x).w,d0-d7			; Draw level
0000228C 48F9 00FF 00FF 1926        	movem.l	d0-d7,(v_cam_x_fg_copy).l
00002294 4CF8 0003 F754             	movem.l	(v_scroll_flags).w,d0-d1
0000229A 48F9 0003 00FF 1946        	movem.l	d0-d1,(v_scroll_flags_copy).l
000022A2 6100 0000                  	bsr.w	LevelDraw_Update
000022A6                            
000022A6 6000 0000                  	bra.w	ProcessPLCDec				; Process PLC art decompression
000022AA                            
000022AA                            ; -------------------------------------------------------------------------------
000022AA                            ; Leftover dead code from Sonic 1's V-INT
000022AA                            ; -------------------------------------------------------------------------------
000022AA                            
000022AA                            VInt_UnkE:
000022AA 6100 0000                  	bsr.w	DoVIntUpdates				; Do V-INT updates
000022AE                            
000022AE 5238 F628                  	addq.b	#1,(v_vint_e_count).w			; Increment counter
000022B2 11FC 000E F62A             	move.b	#$E,(v_vint_routine).w			; Set to run this routine again next VBlank
000022B8                            
000022B8 4E75                       	rts
000022BA                            
000022BA                            ; -------------------------------------------------------------------------------
000022BA                            ; V-INT palette fade routine
000022BA                            ; -------------------------------------------------------------------------------
000022BA                            
000022BA                            VInt_PalFade:
000022BA 6100 0000                  	bsr.w	DoVIntUpdates				; Do V-INT updates
000022BE                            
000022BE 0C39 0001 00FF 1903        	cmpi.b	#1,(v_enable_display).l			; Should we enable display?
000022C6 6600                       	bne.s	.SetHIntCounter				; If not, branch
000022C8 5239 00FF 1903             	addq.b	#1,(v_enable_display).l			; Set display as enabled
000022CE                            
000022CE 3038 F60C                  	move.w	(v_vdp_reg_1).w,d0			; Enable display
000022D2 0000 0040                  	ori.b	#$40,d0
000022D6 33C0 00C0 0004             	move.w	d0,(VDP_CTRL).l
000022DC                            
000022DC                            .SetHIntCounter:
000022DC 3AB8 F624                  	move.w	(v_hint_counter).w,(a5)			; Set H-INT counter
000022E0 6000 0000                  	bra.w	ProcessPLCDec				; Process PLC art decompression
000022E4                            
000022E4                            ; -------------------------------------------------------------------------------
000022E4                            ; Leftover dead code from Sonic 1's continue screen V-INT routine
000022E4                            ; -------------------------------------------------------------------------------
000022E4                            
000022E4                            VInt_S1ContScr:
000022E4 4EB9 0000 0000             	jsr	StopZ80					; Stop the Z80
000022EA 6100 0000                  	bsr.w	ReadJoypads				; Read joypads
000022EE                            
000022EE 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA palette
000022F4 2ABC 9400 9340             	move.l	#$94009340,(a5)
000022FA 2ABC 96FD 9580             	move.l	#$96FD9580,(a5)
00002300 3ABC 977F                  	move.w	#$977F,(a5)
00002304 3ABC C000                  	move.w	#$C000,(a5)
00002308 31FC 0080 F640             	move.w	#$80,(v_dma_cmd_cache).w
0000230E 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002312                            
00002312 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA sprites
00002318 2ABC 9401 9340             	move.l	#$94019340,(a5)
0000231E 2ABC 96FC 9500             	move.l	#$96FC9500,(a5)
00002324 3ABC 977F                  	move.w	#$977F,(a5)
00002328 3ABC 7800                  	move.w	#$7800,(a5)
0000232C 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
00002332 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002336                            
00002336 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA HScroll
0000233C 2ABC 9401 93C0             	move.l	#$940193C0,(a5)
00002342 2ABC 96E6 9500             	move.l	#$96E69500,(a5)
00002348 3ABC 977F                  	move.w	#$977F,(a5)
0000234C 3ABC 7C00                  	move.w	#$7C00,(a5)
00002350 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
00002356 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
0000235A                            
0000235A 4EB9 0000 0000             	jsr	StartZ80				; Start the Z80
00002360                            
00002360 41F8 D000                  	lea	(v_player).w,a0				; Load player sprite art
00002364 6100 0000                  	bsr.w	LoadSonicDynPLC
00002368 4A38 F767                  	tst.b	(v_sonic_frame_changed).w
0000236C 6700                       	beq.s	.NoArtLoad
0000236E 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5
00002374 2ABC 9401 9370             	move.l	#$94019370,(a5)
0000237A 2ABC 96E4 9500             	move.l	#$96E49500,(a5)
00002380 3ABC 977F                  	move.w	#$977F,(a5)
00002384 3ABC 7000                  	move.w	#$7000,(a5)
00002388 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
0000238E 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002392 11FC 0000 F767             	move.b	#0,(v_sonic_frame_changed).w
00002398                            
00002398                            .NoArtLoad:
00002398 4A78 F614                  	tst.w	(v_vint_timer).w			; Is the V-INT timer running?
0000239C 6700 0000                  	beq.w	.End					; If not, branch
000023A0 5378 F614                  	subq.w	#1,(v_vint_timer).w			; Decrement V-INT timer
000023A4                            
000023A4                            .End:
000023A4 4E75                       	rts
000023A6                            
000023A6                            ; -------------------------------------------------------------------------------
000023A6                            ; Do common V-INT updates
000023A6                            ; -------------------------------------------------------------------------------
000023A6                            
000023A6                            DoVIntUpdates:
000023A6 4EB9 0000 0000             	jsr	StopZ80					; Stop the Z80
000023AC 6100 0000                  	bsr.w	ReadJoypads				; Read joypads
000023B0                            
000023B0 4A38 F64E                  	tst.b	(v_water_full).w			; Is water filling the screen?
000023B4 6600                       	bne.s	.WaterPal				; If so, branch
000023B6 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA palette buffer
000023BC 2ABC 9400 9340             	move.l	#$94009340,(a5)
000023C2 2ABC 96FD 9580             	move.l	#$96FD9580,(a5)
000023C8 3ABC 977F                  	move.w	#$977F,(a5)
000023CC 3ABC C000                  	move.w	#$C000,(a5)
000023D0 31FC 0080 F640             	move.w	#$80,(v_dma_cmd_cache).w
000023D6 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
000023DA 6000                       	bra.s	.LoadedPal
000023DC                            
000023DC                            .WaterPal:
000023DC 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA water palette buffer
000023E2 2ABC 9400 9340             	move.l	#$94009340,(a5)
000023E8 2ABC 96FD 9540             	move.l	#$96FD9540,(a5)
000023EE 3ABC 977F                  	move.w	#$977F,(a5)
000023F2 3ABC C000                  	move.w	#$C000,(a5)
000023F6 31FC 0080 F640             	move.w	#$80,(v_dma_cmd_cache).w
000023FC 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002400                            
00002400                            .LoadedPal:
00002400 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA sprites
00002406 2ABC 9401 9340             	move.l	#$94019340,(a5)
0000240C 2ABC 96FC 9500             	move.l	#$96FC9500,(a5)
00002412 3ABC 977F                  	move.w	#$977F,(a5)
00002416 3ABC 7800                  	move.w	#$7800,(a5)
0000241A 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
00002420 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002424                            
00002424 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; DMA HScroll
0000242A 2ABC 9401 93C0             	move.l	#$940193C0,(a5)
00002430 2ABC 96E6 9500             	move.l	#$96E69500,(a5)
00002436 3ABC 977F                  	move.w	#$977F,(a5)
0000243A 3ABC 7C00                  	move.w	#$7C00,(a5)
0000243E 31FC 0083 F640             	move.w	#$83,(v_dma_cmd_cache).w
00002444 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00002448 4EF9 0000 0000             	jmp	StartZ80				; Start the Z80
0000244E                            
0000244E                            ; -------------------------------------------------------------------------------
0000244E                            ; Horizontal interrupt routine
0000244E                            ; -------------------------------------------------------------------------------
0000244E                            PalToCRAM:
0000244E                            H_Interrupt:
0000244E 46FC 2700                  		move	#$2700,sr
00002452 4A78 F644                  		tst.w	($FFFFF644).w
00002456 6700                       		beq.s	locret_119C
00002458 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000245E 48E7 00C0                  		movem.l	a0-a1,-(sp)
00002462 43F9 00C0 0000             		lea	(VDP_DATA).l,a1
00002468 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000246C 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00002474 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00002476 2298                       		move.l	(a0)+,(a1)
00002478 2298                       		move.l	(a0)+,(a1)
0000247A 2298                       		move.l	(a0)+,(a1)
0000247C 2298                       		move.l	(a0)+,(a1)
0000247E 2298                       		move.l	(a0)+,(a1)
00002480 2298                       		move.l	(a0)+,(a1)
00002482 2298                       		move.l	(a0)+,(a1)
00002484 2298                       		move.l	(a0)+,(a1)
00002486 2298                       		move.l	(a0)+,(a1)
00002488 2298                       		move.l	(a0)+,(a1)
0000248A 2298                       		move.l	(a0)+,(a1)
0000248C 2298                       		move.l	(a0)+,(a1)
0000248E 2298                       		move.l	(a0)+,(a1)
00002490 2298                       		move.l	(a0)+,(a1)
00002492 2298                       		move.l	(a0)+,(a1)
00002494 2298                       		move.l	(a0)+,(a1)
00002496 2298                       		move.l	(a0)+,(a1)
00002498 2298                       		move.l	(a0)+,(a1)
0000249A 2298                       		move.l	(a0)+,(a1)
0000249C 2298                       		move.l	(a0)+,(a1)
0000249E 2298                       		move.l	(a0)+,(a1)
000024A0 2298                       		move.l	(a0)+,(a1)
000024A2 2298                       		move.l	(a0)+,(a1)
000024A4 2298                       		move.l	(a0)+,(a1)
000024A6 2298                       		move.l	(a0)+,(a1)
000024A8 2298                       		move.l	(a0)+,(a1)
000024AA 2298                       		move.l	(a0)+,(a1)
000024AC 2298                       		move.l	(a0)+,(a1)
000024AE 2298                       		move.l	(a0)+,(a1)
000024B0 2298                       		move.l	(a0)+,(a1)
000024B2 2298                       		move.l	(a0)+,(a1)
000024B4 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000024BA 4CDF 0300                  		movem.l	(sp)+,a0-a1
000024BE 4A38 F64F                  		tst.b	($FFFFF64F).w
000024C2 6600                       		bne.s	loc_119E
000024C4                            
000024C4                            locret_119C:
000024C4 4E73                       		rte	
000024C6                            ; ===========================================================================
000024C6                            
000024C6                            loc_119E:				; XREF: PalToCRAM
000024C6 4238 F64F                  		clr.b	($FFFFF64F).w
000024CA 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000024CE                            ;		bsr.w	Demo_Time
000024CE 4EB9 0000 0000             		jsr	sub_71B4C
000024D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000024D8 4E73                       		rte	
000024DA                            ; End of function PalToCRAM
000024DA                            
000024DA                            
000024DA                            ; -------------------------------------------------------------------------------
000024DA                            ; Run time warp timer
000024DA                            ; -------------------------------------------------------------------------------
000024DA                            
000024DA                            RunTimeWarp:
000024DA 4A38 D02A                  	tst.b	(v_player+oPlayerCharge).w		; Is the player charging?
000024DE 6600                       	bne.s	.End					; If so, branch
000024E0 4A78 F786                  	tst.w	(v_time_warp_timer).w			; Is the time warp timer active?
000024E4 6700                       	beq.s	.End					; If not, branch	
000024E6 5278 F786                  	addq.w	#1,(v_time_warp_timer).w		; Increment time warp timer
000024EA                            
000024EA                            .End:
000024EA 4E75                       	rts
000024EC                            
000024EC                            ; -------------------------------------------------------------------------------
000024EC                            ; Run boredom timer
000024EC                            ; -------------------------------------------------------------------------------
000024EC                            
000024EC                            RunBoredTimer:
000024EC 4A78 F780                  	tst.w	(v_bored_timer).w			; Is the bored timer active?
000024F0 6700                       	beq.s	.CheckP2Timer				; If not, branch
000024F2 5278 F780                  	addq.w	#1,(v_bored_timer).w			; Increment bored timer
000024F6                            
000024F6                            .CheckP2Timer:
000024F6 4A78 F782                  	tst.w	(v_p2_bored_timer).w			; Is the player 2 bored timer active?
000024FA 6700                       	beq.s	.End					; If not, branch
000024FC 5278 F782                  	addq.w	#1,(v_p2_bored_timer).w			; Increment player 2 bored timer
00002500                            
00002500                            .End:
00002500 4E75                       	rts
00002502                            
00002502                            ; -------------------------------------------------------------------------------
00002502                            ; Get a random number
00002502                            ; -------------------------------------------------------------------------------
00002502                            ; RETURNS:
00002502                            ;	d0.l	- Random number
00002502                            ; -------------------------------------------------------------------------------
00002502                            
00002502                            RandomNumber:
00002502 2F01                       	move.l	d1,-(sp)
00002504 2238 F636                  	move.l	(v_rng_seed).w,d1			; Get RNG seed
00002508 6600                       	bne.s	.GotSeed				; If it's set, branch
0000250A 223C 2A6D 365A             	move.l	#$2A6D365A,d1				; Reset RNG seed otherwise
00002510                            
00002510                            .GotSeed:
00002510 2001                       	move.l	d1,d0					; Get random number
00002512 E581                       	asl.l	#2,d1
00002514 D280                       	add.l	d0,d1
00002516 E781                       	asl.l	#3,d1
00002518 D280                       	add.l	d0,d1
0000251A 3001                       	move.w	d1,d0
0000251C 4841                       	swap	d1
0000251E D041                       	add.w	d1,d0
00002520 3200                       	move.w	d0,d1
00002522 4841                       	swap	d1
00002524 21C1 F636                  	move.l	d1,(v_rng_seed).w			; Update RNG seed
00002528 221F                       	move.l	(sp)+,d1
0000252A 4E75                       	rts
0000252C                            
0000252C                            ; -------------------------------------------------------------------------------
0000252C                            ; Initialize joypads
0000252C                            ; -------------------------------------------------------------------------------
0000252C                            
0000252C                            InitJoypads:
0000252C 6100 0000                  	bsr.w	StopZ80					; Stop the Z80
00002530                            
00002530 7040                       	moveq	#$40,d0					; Initialize controller ports
00002532 13C0 00A1 0009             	move.b	d0,(IO_A_CTRL).l
00002538 13C0 00A1 000B             	move.b	d0,(IO_B_CTRL).l
0000253E 13C0 00A1 000D             	move.b	d0,(IO_C_CTRL).l
00002544 6000 0000                  	bra.w	StartZ80				; Start the Z80
00002548                            ; -------------------------------------------------------------------------------
00002548                            ; Read joypad data
00002548                            ; -------------------------------------------------------------------------------
00002548                            
00002548                            ReadJoypads:
00002548 41F8 F604                  	lea	(v_ctrl1_held).w,a0			; Read player 1 controller
0000254C 43F9 00A1 0003             	lea	(IO_A_DATA).l,a1
00002552 6100                       	bsr.s	ReadJoypad
00002554 5449                       	addq.w	#2,a1					; Read player 2 controller
00002556                            
00002556                            ; -------------------------------------------------------------------------------
00002556                            ; Read a joypad's data
00002556                            ; -------------------------------------------------------------------------------
00002556                            
00002556                            ReadJoypad:
00002556 12BC 0000                  	move.b	#0,(a1)					; Pull TH low
0000255A 4E71                       	nop
0000255C 4E71                       	nop
0000255E 1011                       	move.b	(a1),d0					; Get start and A button
00002560 E508                       	lsl.b	#2,d0
00002562 0200 00C0                  	andi.b	#$C0,d0
00002566 12BC 0040                  	move.b	#$40,(a1)				; Pull TH high
0000256A 4E71                       	nop
0000256C 4E71                       	nop
0000256E 1211                       	move.b	(a1),d1					; Get B, C, and directional buttons
00002570 0201 003F                  	andi.b	#$3F,d1
00002574 8001                       	or.b	d1,d0					; Combine buttons
00002576 4600                       	not.b	d0					; Swap bits
00002578 1210                       	move.b	(a0),d1					; Prepare previously held buttons
0000257A B101                       	eor.b	d0,d1
0000257C 10C0                       	move.b	d0,(a0)+				; Store new held buttons
0000257E C200                       	and.b	d0,d1					; Update pressed buttons
00002580 10C1                       	move.b	d1,(a0)+
00002582 4E75                       	rts
00002584                            
00002584                            ; -------------------------------------------------------------------------------
00002584                            ; Initialize the VDP
00002584                            ; -------------------------------------------------------------------------------
00002584                            
00002584                            InitVDP:
00002584 41F9 00C0 0004             	lea	(VDP_CTRL).l,a0				; Get VDP ports
0000258A 43F9 00C0 0000             	lea	(VDP_DATA).l,a1
00002590                            
00002590 45F9 0000 0000             	lea	(VDPInitRegs).l,a2			; Prepare VDP registers
00002596 7E12                       	moveq	#$13-1,d7
00002598                            
00002598                            .InitRegs:
00002598 309A                       	move.w	(a2)+,(a0)				; Set VDP register
0000259A 51CF FFFC                  	dbf	d7,.InitRegs				; Loop until finished
0000259E                            
0000259E 3039 0000 0000             	move.w	(VDPInitReg1).l,d0			; Set VDP register 1 cache
000025A4 31C0 F60C                  	move.w	d0,(v_vdp_reg_1).w
000025A8 31FC 8ADF F624             	move.w	#$8ADF,(v_hint_counter).w		; Set H-INT counter cache
000025AE                            
000025AE 7000                       	moveq	#0,d0					; Clear CRAM
000025B0 23FC C000 0000 00C0 0004   	move.l	#$C0000000,(VDP_CTRL).l
000025BA 3E3C 003F                  	move.w	#$3F,d7
000025BE                            
000025BE                            .ClearCRAM:
000025BE 3280                       	move.w	d0,(a1)
000025C0 51CF FFFC                  	dbf	d7,.ClearCRAM				; Loop until finished
000025C4                            
000025C4 42B8 F616                  	clr.l	(v_vscroll).w				; Clear scroll values
000025C8 42B8 F61A                  	clr.l	(v_hscroll_full).w
000025CC                            
000025CC 2F01                       	move.l	d1,-(sp)				; Clear VRAM via DMA fill
000025CE 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5
000025D4 3ABC 8F01                  	move.w	#$8F01,(a5)
000025D8 2ABC 94FF 93FF             	move.l	#$94FF93FF,(a5)
000025DE 3ABC 9780                  	move.w	#$9780,(a5)
000025E2 2ABC 4000 0080             	move.l	#$40000080,(a5)
000025E8 33FC 0000 00C0 0000        	move.w	#0,(VDP_DATA).l
000025F0                            
000025F0                            .WaitVRAMClear:
000025F0 3215                       	move.w	(a5),d1
000025F2 0801 0001                  	btst	#1,d1
000025F6 66F8                       	bne.s	.WaitVRAMClear
000025F8 3ABC 8F02                  	move.w	#$8F02,(a5)
000025FC 221F                       	move.l	(sp)+,d1
000025FE                            
000025FE 4E75                       	rts
00002600                            
00002600                            ; -------------------------------------------------------------------------------
00002600                            
00002600                            VDPInitRegs:
00002600 8004                       	dc.w	$8004					; H-INT disabled
00002602                            VDPInitReg1:
00002602 8134                       	dc.w	$8134					; DMA and V-INT enabled, display disabled
00002604 8230                       	dc.w	$8230					; Plane A at $C000
00002606 8328                       	dc.w	$8328					; Window plane at $A000
00002608 8407                       	dc.w	$8407					; Plane B at $E000
0000260A 857C                       	dc.w	$857C					; Sprite table at $F800
0000260C 8600                       	dc.w	$8600					; Unused
0000260E 8700                       	dc.w	$8700					; Background color at line 0 color 0
00002610 8800                       	dc.w	$8800					; Unused
00002612 8900                       	dc.w	$8900					; Unused
00002614 8A00                       	dc.w	$8A00					; H-INT counter 0
00002616 8B00                       	dc.w	$8B00					; HScroll by screen, VScroll by screen
00002618 8C81                       	dc.w	$8C81					; H40 mode
0000261A 8D3F                       	dc.w	$8D3F					; HScroll at $FC00
0000261C 8E00                       	dc.w	$8E00					; Unused
0000261E 8F02                       	dc.w	$8F02					; Auto-increment by 2
00002620 9001                       	dc.w	$9001					; Plane size 64x32
00002622 9100                       	dc.w	$9100					; Window X at 0
00002624 9200                       	dc.w	$9200					; Window Y at 0
00002626                            
00002626                            ; -------------------------------------------------------------------------------
00002626                            ; Clear the screen
00002626                            ; -------------------------------------------------------------------------------
00002626                            
00002626                            ClearScreen:
00002626 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; Clear plane A
0000262C 3ABC 8F01                  	move.w	#$8F01,(a5)
00002630 2ABC 940F 93FF             	move.l	#$940F93FF,(a5)
00002636 3ABC 9780                  	move.w	#$9780,(a5)
0000263A 2ABC 4000 0083             	move.l	#$40000083,(a5)
00002640 33FC 0000 00C0 0000        	move.w	#0,(VDP_DATA).l
00002648                            
00002648                            .WaitPlane1Clear:
00002648 3215                       	move.w	(a5),d1
0000264A 0801 0001                  	btst	#1,d1
0000264E 66F8                       	bne.s	.WaitPlane1Clear
00002650 3ABC 8F02                  	move.w	#$8F02,(a5)
00002654                            
00002654 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; Clear plane B
0000265A 3ABC 8F01                  	move.w	#$8F01,(a5)
0000265E 2ABC 940F 93FF             	move.l	#$940F93FF,(a5)
00002664 3ABC 9780                  	move.w	#$9780,(a5)
00002668 2ABC 6000 0083             	move.l	#$60000083,(a5)
0000266E 33FC 0000 00C0 0000        	move.w	#0,(VDP_DATA).l
00002676                            
00002676                            .WaitPlane2Clear:
00002676 3215                       	move.w	(a5),d1
00002678 0801 0001                  	btst	#1,d1
0000267C 66F8                       	bne.s	.WaitPlane2Clear
0000267E 3ABC 8F02                  	move.w	#$8F02,(a5)
00002682                            
00002682 42B8 F616                  	clr.l	(v_vscroll).w				; Reset scroll values
00002686 42B8 F61A                  	clr.l	(v_hscroll_full).w
0000268A                            
0000268A 43F8 F800                  	lea	(v_sprites).w,a1			; Clear sprite cache
0000268E 7000                       	moveq	#0,d0
00002690 323C 00A0                  	move.w	#$280/4,d1				; Should be $280/4-1
00002694                            
00002694                            .ClearSprites:
00002694 22C0                       	move.l	d0,(a1)+
00002696 51C9 FFFC                  	dbf	d1,.ClearSprites
0000269A                            
0000269A 43F8 CC00                  	lea	(v_hscroll).w,a1			; Clear HScroll cache
0000269E 7000                       	moveq	#0,d0
000026A0 323C 0100                  	move.w	#$400/4,d1				; Should be $400/4-1
000026A4                            
000026A4                            .ClearHScroll:
000026A4 22C0                       	move.l	d0,(a1)+
000026A6 51C9 FFFC                  	dbf	d1,.ClearHScroll
000026AA                            
000026AA 4E75                       	rts
000026AC                            
000026AC                            ; -------------------------------------------------------------------------------
000026AC                            ; Insert Z80 Code here
000026AC                            ; -------------------------------------------------------------------------------
000026AC                            ; -------------------------------------------------------------------------------
000026AC                            ; Stop the Z80
000026AC                            ; -------------------------------------------------------------------------------
000026AC                            
000026AC                            StopZ80:
000026AC 33FC 0100 00A1 1100        	move.w	#$0100,($A11100).l			; request Z80 stop (ON)
000026B4 0839 0000 00A1 1100        	btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
000026BC 66F6                       	bne.s	*-$08					; if not, branch
000026BE 4E75                       	rts
000026C0                            
000026C0                            ; -------------------------------------------------------------------------------
000026C0                            ; Start the Z80
000026C0                            ; -------------------------------------------------------------------------------
000026C0                            
000026C0                            StartZ80:
000026C0 33FC 0000 00A1 1100        	move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
000026C8 4E75                       	rts
000026CA                            
000026CA                            ; -------------------------------------------------------------------------------
000026CA                            ; Dead code to initialize the Z80 with dummy code
000026CA                            ; -------------------------------------------------------------------------------
000026CA                            
000026CA                            InitZ80_Dummy:
000026CA 33FC 0100 00A1 1200        	move.w	#$100,(Z80_RESET).l			; Stop Z80 reset
000026D2 4EBA FFD8                  	jsr	StopZ80(pc)				; Stop the Z80
000026D6                            
000026D6 43F9 00A0 0000             	lea	(Z80_RAM).l,a1				; Prepare Z80 RAM
000026DC 12FC 00F3                  	move.b	#$F3,(a1)+				; di
000026E0 12FC 00F3                  	move.b	#$F3,(a1)+				; di
000026E4 12FC 00C3                  	move.b	#$C3,(a1)+				; jp $0000
000026E8 12FC 0000                  	move.b	#0,(a1)+
000026EC 12FC 0000                  	move.b	#0,(a1)+
000026F0                            
000026F0 33FC 0000 00A1 1200        	move.w	#0,(Z80_RESET).l			; Reset the Z80
000026F8 E018                       	ror.b	#8,d0					; Wait
000026FA 33FC 0100 00A1 1200        	move.w	#$100,(Z80_RESET).l			; Stop Z80 reset
00002702 4EFA FFBC                  	jmp	StartZ80(pc)				; Start the Z80
00002706 4E75                       	rts
00002708                            
00002708                            ; -------------------------------------------------------------------------------
00002708                            ; Play an FM sound
00002708                            ; -------------------------------------------------------------------------------
00002708                            
00002708                            PlayFMSound:
00002708                            PlaySound:
00002708 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000270C 4E75                       		rts	
0000270E                            ; End of function PlaySound
0000270E                            
0000270E                            ; ---------------------------------------------------------------------------
0000270E                            ; Subroutine to	play a special sound/music (E0-E4)
0000270E                            ;
0000270E                            ; E0 - Fade out
0000270E                            ; E1 - Sega
0000270E                            ; E2 - Speed up
0000270E                            ; E3 - Normal speed
0000270E                            ; E4 - Stop
0000270E                            ; ---------------------------------------------------------------------------
0000270E                            
0000270E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000270E                            
0000270E                            
0000270E                            PlaySound_Special:
0000270E 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00002712 4E75                       		rts	
00002714                            ; End of function PlaySound_Special
00002714                            
00002714                            ; ===========================================================================
00002714                            ; ---------------------------------------------------------------------------
00002714                            ; Unused sound/music subroutine
00002714                            ; ---------------------------------------------------------------------------
00002714                            
00002714                            PlaySound_Unk:
00002714 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00002718 4E75                       		rts	
0000271A                            
0000271A                            
0000271A                            
0000271A                            ; -------------------------------------------------------------------------------
0000271A                            ; Update FM driver queues
0000271A                            ; -------------------------------------------------------------------------------
0000271A                            
0000271A                            UpdateFMQueues:
0000271A 4EB8 26AC                  	jsr	StopZ80					; Stop the Z80
0000271E                            
0000271E 4A38 F00A                  	tst.b	(v_snd_queue_1).w			; Is queue 1 full?
00002722 6700                       	beq.s	.CheckQueue2				; If not, branch
00002724 13F8 F00A 00A0 1C09        	move.b	(v_snd_queue_1).w,(Z80_RAM+$1C09).l	; Update Z80 queue 1
0000272C 11FC 0000 F00A             	move.b	#0,(v_snd_queue_1).w			; Empty out queue 1
00002732                            
00002732                            .CheckQueue2:
00002732 4A38 F00B                  	tst.b	(v_snd_queue_2).w			; Is queue 2 full?
00002736 6700                       	beq.s	.CheckQueue3				; If not, branch
00002738 13F8 F00B 00A0 1C0A        	move.b	(v_snd_queue_2).w,(Z80_RAM+$1C0A).l	; Update Z80 queue 2
00002740 11FC 0000 F00B             	move.b	#0,(v_snd_queue_2).w			; Empty out queue 2
00002746                            
00002746                            .CheckQueue3:
00002746 4A38 F00C                  	tst.b	(v_snd_queue_3).w			; Is queue 3 full?
0000274A 6700                       	beq.s	.End					; If not, branch
0000274C 13F8 F00C 00A0 1C0B        	move.b	(v_snd_queue_3).w,(Z80_RAM+$1C0B).l	; Update Z80 queue 3
00002754 11FC 0000 F00C             	move.b	#0,(v_snd_queue_3).w			; Empty out queue 3
0000275A                            
0000275A                            .End:
0000275A 6000 FF64                  	bra.w	StartZ80				; Start the Z80
0000275E                            ; -------------------------------------------------------------------------------
0000275E                            ; Draw a tilemap
0000275E                            ; -------------------------------------------------------------------------------
0000275E                            ; PARAMETERS:
0000275E                            ;	d0.l	- Base VDP command
0000275E                            ;	d1.w	- Tilemap width (minus 1)
0000275E                            ;	d2.w	- Tilemap height (minus 1)
0000275E                            ;	a1.l	- Tilemap data pointer
0000275E                            ; -------------------------------------------------------------------------------
0000275E                            ShowVDPGraphics:
0000275E                            DrawTilemap:
0000275E 4DF9 00C0 0000             	lea	(VDP_DATA).l,a6				; Prepare VDP data
00002764 283C 0080 0000             	move.l	#$800000,d4				; VDP command line delta
0000276A                            
0000276A                            .RowLoop:
0000276A 2D40 0004                  	move.l	d0,4(a6)				; Set VDP command
0000276E 3601                       	move.w	d1,d3					; Prepare row width
00002770                            
00002770                            .TileLoop:
00002770 3C99                       	move.w	(a1)+,(a6)				; Copy tile data
00002772 51CB FFFC                  	dbf	d3,.TileLoop				; Loop until row is drawn
00002776                            
00002776 D084                       	add.l	d4,d0					; Next row
00002778 51CA FFF0                  	dbf	d2,.RowLoop				; Loop until tilemap is drawn
0000277C 4E75                       	rts
0000277E                            
0000277E                            ; -------------------------------------------------------------------------------
0000277E                            ; Decompress Nemesis art into VRAM (Note: VDP write command must be
0000277E                            ; set beforehand)
0000277E                            ; -------------------------------------------------------------------------------
0000277E                            ; PARAMETERS:
0000277E                            ;	a0.l	- Nemesis art pointer
0000277E                            ; -------------------------------------------------------------------------------
0000277E                            
0000277E                            NemDec:
0000277E 48E7 FFDC                  	movem.l	d0-a1/a3-a5,-(sp)
00002782 47F9 0000 0000             	lea	(NemPCD_WriteRowToVDP).l,a3		; Write all data to the same location
00002788 49F9 00C0 0000             	lea	(VDP_DATA).l,a4				; (the VDP data port)
0000278E 6000                       	bra.s	NemDecMain
00002790                            
00002790                            ; -------------------------------------------------------------------------------
00002790                            ; Decompress Nemesis data into RAM
00002790                            ; -------------------------------------------------------------------------------
00002790                            ; PARAMETERS:
00002790                            ;	a0.l	- Nemesis data pointer
00002790                            ;	a4.l	- Destination buffer pointer
00002790                            ; -------------------------------------------------------------------------------
00002790                            
00002790                            NemDecToRAM:
00002790 48E7 FFDC                  	movem.l	d0-a1/a3-a5,-(sp)
00002794 47F9 0000 0000             	lea	(NemPCD_WriteRowToRAM).l,a3		; Advance to the next location after each write
0000279A                            
0000279A                            ; -------------------------------------------------------------------------------
0000279A                            
0000279A                            NemDecMain:
0000279A 43F8 AA00                  	lea	(v_nem_dec_buffer).w,a1			; Prepare decompression buffer
0000279E                            
0000279E 2408                           move.l    a0,d2
000027A0 0802 0000                      btst.l    #$00,d2
000027A4 6700                           beq.s    NoTrap
000027A6 46FC 2700                      move.w    #$2700,sr
000027AA 6000 FFFE                      bra.w    *
000027AE                            
000027AE                            NoTrap:
000027AE                            
000027AE                            
000027AE 3418                       	move.w	(a0)+,d2				; Get number of patterns
000027B0 E34A                       	lsl.w	#1,d2
000027B2 6400                       	bcc.s	.NormalMode				; Branch if not in XOR mode
000027B4 D6FC 0000                  	adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3
000027B8                            
000027B8                            .NormalMode:
000027B8 E54A                       	lsl.w	#2,d2					; Get number of 8-pixel rows in the uncompressed data
000027BA 3A42                       	movea.w	d2,a5					; and store it in a5
000027BC 7608                       	moveq	#8,d3					; 8 pixels in a pattern row
000027BE 7400                       	moveq	#0,d2
000027C0 7800                       	moveq	#0,d4
000027C2 6100 0000                  	bsr.w	NemDec_BuildCodeTable
000027C6 1A18                       	move.b	(a0)+,d5				; Get first word of compressed data
000027C8 E145                       	asl.w	#8,d5
000027CA 1A18                       	move.b	(a0)+,d5
000027CC 3C3C 0010                  	move.w	#16,d6					; Set initial shift value
000027D0 6100                       	bsr.s	NemDec_ProcessCompressedData
000027D2 4CDF 3BFF                  	movem.l	(sp)+,d0-a1/a3-a5
000027D6 4E75                       	rts
000027D8                            
000027D8                            ; -------------------------------------------------------------------------------
000027D8                            
000027D8                            NemDec_ProcessCompressedData:
000027D8 3E06                       	move.w	d6,d7
000027DA 5147                       	subq.w	#8,d7					; Get shift value
000027DC 3205                       	move.w	d5,d1
000027DE EE69                       	lsr.w	d7,d1					; Shift so that the high bit of the code is in bit 7
000027E0 0C01 00FC                  	cmpi.b	#%11111100,d1				; Are the high 6 bits set?
000027E4 6400                       	bcc.s	NemPCD_InlineData			; If they are, it signifies inline data
000027E6 0241 00FF                  	andi.w	#$FF,d1
000027EA D241                       	add.w	d1,d1
000027EC 1031 1000                  	move.b	(a1,d1.w),d0				; Get the length of the code in bits
000027F0 4880                       	ext.w	d0
000027F2 9C40                       	sub.w	d0,d6					; Subtract from shift value so that the next code is read next time around
000027F4 0C46 0009                  	cmpi.w	#9,d6					; Does a new byte need to be read?
000027F8 6400                       	bcc.s	.GotEnoughBits				; If not, branch
000027FA 5046                       	addq.w	#8,d6
000027FC E145                       	asl.w	#8,d5
000027FE 1A18                       	move.b	(a0)+,d5				; Read next byte
00002800                            
00002800                            .GotEnoughBits:
00002800 1231 1001                  	move.b	1(a1,d1.w),d1
00002804 3001                       	move.w	d1,d0
00002806 0241 000F                  	andi.w	#$F,d1					; Get palette index for pixel
0000280A 0240 00F0                  	andi.w	#$F0,d0
0000280E                            
0000280E                            NemDec_GetRunLength:
0000280E E848                       	lsr.w	#4,d0					; Get repeat count
00002810                            
00002810                            NemDec_RunLoop:
00002810 E98C                       	lsl.l	#4,d4					; Shift up by a nibble
00002812 8801                       	or.b	d1,d4					; Write pixel
00002814 5343                       	subq.w	#1,d3					; Has an entire 8-pixel row been written?
00002816 6600                       	bne.s	NemPCD_WritePixel_Loop			; If not, loop
00002818 4ED3                       	jmp	(a3)					; Otherwise, write the row to its destination
0000281A                            
0000281A                            ; -------------------------------------------------------------------------------
0000281A                            
0000281A                            NemPCD_NewRow:
0000281A 7800                       	moveq	#0,d4					; Reset row
0000281C 7608                       	moveq	#8,d3					; Reset nibble counter
0000281E                            
0000281E                            NemPCD_WritePixel_Loop:
0000281E 51C8 FFF0                  	dbf	d0,NemDec_RunLoop
00002822 60B4                       	bra.s	NemDec_ProcessCompressedData
00002824                            
00002824                            ; -------------------------------------------------------------------------------
00002824                            
00002824                            NemPCD_InlineData:
00002824 5D46                       	subq.w	#6,d6					; 6 bits needed to signal inline data
00002826 0C46 0009                  	cmpi.w	#9,d6
0000282A 6400                       	bcc.s	.GotEnoughBits
0000282C 5046                       	addq.w	#8,d6
0000282E E145                       	asl.w	#8,d5
00002830 1A18                       	move.b	(a0)+,d5
00002832                            
00002832                            .GotEnoughBits:
00002832 5F46                       	subq.w	#7,d6					; And 7 bits needed for the inline data itself
00002834 3205                       	move.w	d5,d1
00002836 EC69                       	lsr.w	d6,d1					; Shift so that the low bit of the code is in bit 0
00002838 3001                       	move.w	d1,d0
0000283A 0241 000F                  	andi.w	#$F,d1					; Get palette index for pixel
0000283E 0240 0070                  	andi.w	#$70,d0					; High nibble is repeat count for pixel
00002842 0C46 0009                  	cmpi.w	#9,d6
00002846 64C6                       	bcc.s	NemDec_GetRunLength
00002848 5046                       	addq.w	#8,d6
0000284A E145                       	asl.w	#8,d5
0000284C 1A18                       	move.b	(a0)+,d5
0000284E 60BE                       	bra.s	NemDec_GetRunLength
00002850                            
00002850                            ; -------------------------------------------------------------------------------
00002850                            
00002850                            NemPCD_WriteRowToVDP:
00002850 2884                       	move.l	d4,(a4)					; Write 8-pixel row
00002852 534D                       	subq.w	#1,a5
00002854 380D                       	move.w	a5,d4					; Have all the 8-pixel rows been written?
00002856 66C2                       	bne.s	NemPCD_NewRow				; If not, branch
00002858 4E75                       	rts
0000285A                            
0000285A                            ; -------------------------------------------------------------------------------
0000285A                            
0000285A                            NemPCD_WriteRowToVDP_XOR:
0000285A B982                       	eor.l	d4,d2					; XOR the previous row with the current row
0000285C 2882                       	move.l	d2,(a4)					; and store it
0000285E 534D                       	subq.w	#1,a5
00002860 380D                       	move.w	a5,d4					; Have all the 8-pixel rows been written?
00002862 66B6                       	bne.s	NemPCD_NewRow				; If not, branch
00002864 4E75                       	rts
00002866                            
00002866                            ; -------------------------------------------------------------------------------
00002866                            
00002866                            NemPCD_WriteRowToRAM:
00002866 28C4                       	move.l	d4,(a4)+				; Write 8-pixel row
00002868 534D                       	subq.w	#1,a5
0000286A 380D                       	move.w	a5,d4					; Have all the 8-pixel rows been written?
0000286C 66AC                       	bne.s	NemPCD_NewRow				; If not, branch
0000286E 4E75                       	rts
00002870                            
00002870                            ; -------------------------------------------------------------------------------
00002870                            
00002870                            NemPCD_WriteRowToRAM_XOR:
00002870 B982                       	eor.l	d4,d2					; XOR the previous row with the current row
00002872 28C2                       	move.l	d2,(a4)+				; and store it
00002874 534D                       	subq.w	#1,a5
00002876 380D                       	move.w	a5,d4					; Have all the 8-pixel rows been written?
00002878 66A0                       	bne.s	NemPCD_NewRow				; If not, branch
0000287A 4E75                       	rts
0000287C                            
0000287C                            ; -------------------------------------------------------------------------------
0000287C                            
0000287C                            NemDec_BuildCodeTable:
0000287C 1018                       	move.b	(a0)+,d0				; Read first byte
0000287E                            
0000287E                            NemBCT_ChkEnd:
0000287E 0C00 00FF                  	cmpi.b	#$FF,d0					; Has the end of the code table description been reached?
00002882 6600                       	bne.s	NemBCT_NewPALIndex			; If not, branch
00002884 4E75                       	rts
00002886                            
00002886                            NemBCT_NewPALIndex:
00002886 3E00                       	move.w	d0,d7
00002888                            
00002888                            NemBCT_Loop:
00002888 1018                       	move.b	(a0)+,d0				; Read next byte
0000288A 0C00 0080                  	cmpi.b	#$80,d0					; Sign bit signifies a new palette index
0000288E 64EE                       	bcc.s	NemBCT_ChkEnd
00002890                            
00002890 1200                       	move.b	d0,d1
00002892 0247 000F                  	andi.w	#$F,d7					; Get palette index
00002896 0241 0070                  	andi.w	#$70,d1					; Get repeat count for palette index
0000289A 8E41                       	or.w	d1,d7					; Combine the 2
0000289C 0240 000F                  	andi.w	#$F,d0					; Get the length of the code in bits
000028A0 1200                       	move.b	d0,d1
000028A2 E149                       	lsl.w	#8,d1
000028A4 8E41                       	or.w	d1,d7					; Combine with palette index and repeat count to form code table entry
000028A6 7208                       	moveq	#8,d1
000028A8 9240                       	sub.w	d0,d1					; Is the code 8 bits long?
000028AA 6600                       	bne.s	NemBCT_ShortCode			; If not, a bit of extra processing is needed
000028AC 1018                       	move.b	(a0)+,d0				; Get code
000028AE D040                       	add.w	d0,d0					; Each code gets a word sized entry in the table
000028B0 3387 0000                  	move.w	d7,(a1,d0.w)				; Store the entry for the code
000028B4                            
000028B4 60D2                       	bra.s	NemBCT_Loop				; Loop
000028B6                            
000028B6                            NemBCT_ShortCode:
000028B6 1018                       	move.b	(a0)+,d0				; Get code
000028B8 E368                       	lsl.w	d1,d0					; Get index into code table
000028BA D040                       	add.w	d0,d0					; Shift so that the high bit is in bit 7
000028BC 7A01                       	moveq	#1,d5
000028BE E36D                       	lsl.w	d1,d5
000028C0 5345                       	subq.w	#1,d5					; d5 = 2^d1 - 1
000028C2                            
000028C2                            NemBCT_ShortCode_Loop:
000028C2 3387 0000                  	move.w	d7,(a1,d0.w)				; Store entry
000028C6 5440                       	addq.w	#2,d0					; Increment index
000028C8 51CD FFF8                  	dbf	d5,NemBCT_ShortCode_Loop		; Repeat for required number of entries
000028CC                            
000028CC 60BA                       	bra.s	NemBCT_Loop				; Loop
000028CE                            
000028CE                            ; -------------------------------------------------------------------------------
000028CE                            ; Load a PLC list
000028CE                            ; -------------------------------------------------------------------------------
000028CE                            ; PARAMETERS:
000028CE                            ;	d0.w	- PLC list ID
000028CE                            ; -------------------------------------------------------------------------------
000028CE                            AddPLCs:
000028CE                            LoadPLC:
000028CE 48E7 0060                  	movem.l	a1-a2,-(sp)
000028D2 43F9 0000 0000             	lea	(PLCIndex).l,a1				; Prepare PLC list index
000028D8 D040                       	add.w	d0,d0					; Get pointer to PLC list
000028DA 3031 0000                  	move.w	(a1,d0.w),d0
000028DE 43F1 0000                  	lea	(a1,d0.w),a1
000028E2 45F8 F680                  	lea	(v_plc_buffer).w,a2			; Prepare PLC buffer
000028E6                            
000028E6                            .Loop:
000028E6 4A92                       	tst.l	(a2)					; Is this PLC entry free?
000028E8 6700                       	beq.s	.FoundFree				; If so, branch
000028EA 5C4A                       	addq.w	#6,a2					; Check next entry
000028EC 60F8                       	bra.s	.Loop
000028EE                            
000028EE                            .FoundFree:
000028EE 3019                       	move.w	(a1)+,d0				; Get number of PLC entries
000028F0 6B00                       	bmi.s	.Restore				; If it's 0 (or less), branch
000028F2                            
000028F2                            .Load:
000028F2 24D9                       	move.l	(a1)+,(a2)+				; Copy art pointer
000028F4 34D9                       	move.w	(a1)+,(a2)+				; Copy VRAM location
000028F6 51C8 FFFA                  	dbf	d0,.Load				; Loop until all entries are queued
000028FA                            
000028FA                            .Restore:
000028FA 4CDF 0600                  	movem.l	(sp)+,a1-a2
000028FE 4E75                       	rts
00002900                            ; -------------------------------------------------------------------------------
00002900                            ; Clear PLCs and load a PLC list
00002900                            ; -------------------------------------------------------------------------------
00002900                            ; PARAMETERS:
00002900                            ;	d0.w	- PLC list ID
00002900                            ; -------------------------------------------------------------------------------
00002900                            
00002900                            LoadPLC2:
00002900                            ClearAndLoadPLC:
00002900 48E7 0060                  	movem.l	a1-a2,-(sp)
00002904 43F9 0000 0000             	lea	(PLCIndex).l,a1				; Prepare PLC list index
0000290A D040                       	add.w	d0,d0					; Get pointer to PLC list
0000290C 3031 0000                  	move.w	(a1,d0.w),d0
00002910 43F1 0000                  	lea	(a1,d0.w),a1
00002914                            
00002914 6100                       	bsr.s	ClearPLCs				; Clear PLCs
00002916                            
00002916 45F8 F680                  	lea	(v_plc_buffer).w,a2			; Prepare PLC buffer
0000291A                            
0000291A 3019                       	move.w	(a1)+,d0				; Get number of PLC entries
0000291C 6B00                       	bmi.s	.Restore				; If it's 0 (or less), branch
0000291E                            
0000291E                            .Load:
0000291E 24D9                       	move.l	(a1)+,(a2)+				; Copy art pointer
00002920 34D9                       	move.w	(a1)+,(a2)+				; Copy VRAM location
00002922 51C8 FFFA                  	dbf	d0,.Load				; Loop until all entries are queued
00002926                            
00002926                            .Restore:
00002926 4CDF 0600                  	movem.l	(sp)+,a1-a2
0000292A 4E75                       	rts
0000292C                            ; -------------------------------------------------------------------------------
0000292C                            ; Clear PLCs
0000292C                            ; -------------------------------------------------------------------------------
0000292C                            ClearPLC:
0000292C                            ClearPLCs:
0000292C 45F8 F680                  	lea	(v_plc_buffer).w,a2			; Clear PLC buffer
00002930 701F                       	moveq	#$80/4-1,d0
00002932                            
00002932                            .Clear:
00002932 429A                       	clr.l	(a2)+
00002934 51C8 FFFC                  	dbf	d0,.Clear				; Loop until finished
00002938 4E75                       	rts
0000293A                            
0000293A                            ; -------------------------------------------------------------------------------
0000293A                            ; Process PLC queue in RAM
0000293A                            ; -------------------------------------------------------------------------------
0000293A                            RunPLC_RAM:
0000293A                            ProcessPLCs:
0000293A 4AB8 F680                  	tst.l	(v_plc_buffer).w			; Is the PLC queue empty?
0000293E 6700                       	beq.s	.End					; If so, branch
00002940 4A78 F6F8                  	tst.w	(v_plc_tile_cnt).w			; Is there a decompression in process already?
00002944 6600                       	bne.s	.End					; If so, branch
00002946                            
00002946 2078 F680                  	movea.l	(v_plc_buffer).w,a0			; Get art pointer
0000294A 47F9 0000 2850             	lea	(NemPCD_WriteRowToVDP).l,a3		; Write to VRAM
00002950 43F8 AA00                  	lea	(v_nem_dec_buffer).w,a1			; Prepare Nemesis buffer
00002954 3418                       	move.w	(a0)+,d2
00002956 6A00                       	bpl.s	.NotXOR					; Branch if not in XOR mode
00002958 D6FC 000A                  	adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3
0000295C                            
0000295C                            .NotXOR:
0000295C 0242 7FFF                  	andi.w	#$7FFF,d2				; Store number of tiles to decompress
00002960 31C2 F6F8                  	move.w	d2,(v_plc_tile_cnt).w
00002964                            
00002964 6100 FF16                  	bsr.w	NemDec_BuildCodeTable			; Build code table for this art
00002968                            
00002968 1A18                       	move.b	(a0)+,d5				; Get first word of compressed data
0000296A E145                       	asl.w	#8,d5
0000296C 1A18                       	move.b	(a0)+,d5
0000296E 7C10                       	moveq	#$10,d6					; Set initial shift value
00002970                            
00002970 7000                       	moveq	#0,d0					; Prepare decompression registers
00002972 21C8 F680                  	move.l	a0,(v_plc_buffer).w
00002976 21CB F6E0                  	move.l	a3,(v_plc_nem_write).w
0000297A 21C0 F6E4                  	move.l	d0,(v_plc_repeat).w
0000297E 21C0 F6E8                  	move.l	d0,(v_plc_pixel).w
00002982 21C0 F6EC                  	move.l	d0,(v_plc_row).w
00002986 21C5 F6F0                  	move.l	d5,(v_plc_read).w
0000298A 21C6 F6F4                  	move.l	d6,(v_plc_shift).w
0000298E                            
0000298E                            .End:
0000298E 4E75                       	rts
00002990                            
00002990                            ; -------------------------------------------------------------------------------
00002990                            ; Process PLC decompression
00002990                            ; -------------------------------------------------------------------------------
00002990                            
00002990                            ProcessPLCDec:
00002990 4A78 F6F8                  	tst.w	(v_plc_tile_cnt).w			; Is there anything to decompress?
00002994 6700 0000                  	beq.w	ProcessPLCDec_Done			; If not, branch
00002998                            
00002998                            ; -------------------------------------------------------------------------------
00002998                            
00002998                            ProcessPLCDec_Large:
00002998 31FC 0012 F6FA             	move.w	#18,(v_plc_proc_tile_cnt).w		; Decompress 18 tiles in this batch
0000299E 7000                       	moveq	#0,d0					; Get VRAM address
000029A0 3038 F684                  	move.w	(v_plc_buffer+4).w,d0
000029A4 0678 0240 F684             	addi.w	#18*$20,(v_plc_buffer+4).w		; Advance VRAM address
000029AA 6000                       	bra.s	ProcessPLCDec_Main
000029AC                            
000029AC                            ; -------------------------------------------------------------------------------
000029AC                            ; Process PLC decompression (smaller batch)
000029AC                            ; -------------------------------------------------------------------------------
000029AC                            
000029AC                            ProcessPLCDec_Small:
000029AC 4A78 F6F8                  	tst.w	(v_plc_tile_cnt).w			; Is there anything to decompress?
000029B0 6700                       	beq.s	ProcessPLCDec_Done			; If not, branch
000029B2 4A38 F744                  	tst.b	(v_scroll_lock).w			; Is scrolling locked?
000029B6 66E0                       	bne.s	ProcessPLCDec_Large			; If so, go with the large batch instead
000029B8                            
000029B8 31FC 0003 F6FA             	move.w	#3,(v_plc_proc_tile_cnt).w		; Decompress 3 tiles in this batch
000029BE 7000                       	moveq	#0,d0					; Get VRAM address
000029C0 3038 F684                  	move.w	(v_plc_buffer+4).w,d0
000029C4 0678 0060 F684             	addi.w	#3*$20,(v_plc_buffer+4).w		; Advance VRAM address
000029CA                            
000029CA                            ; -------------------------------------------------------------------------------
000029CA                            
000029CA                            ProcessPLCDec_Main:
000029CA 49F9 00C0 0004             	lea	(VDP_CTRL).l,a4				; Set VDP write command
000029D0 E588                       	lsl.l	#2,d0
000029D2 E448                       	lsr.w	#2,d0
000029D4 0040 4000                  	ori.w	#$4000,d0
000029D8 4840                       	swap	d0
000029DA 2880                       	move.l	d0,(a4)
000029DC 594C                       	subq.w	#4,a4					; Prepare data port
000029DE                            
000029DE 2078 F680                  	movea.l	(v_plc_buffer).w,a0			; Get decompression registers
000029E2 2678 F6E0                  	movea.l	(v_plc_nem_write).w,a3
000029E6 2038 F6E4                  	move.l	(v_plc_repeat).w,d0
000029EA 2238 F6E8                  	move.l	(v_plc_pixel).w,d1
000029EE 2438 F6EC                  	move.l	(v_plc_row).w,d2
000029F2 2A38 F6F0                  	move.l	(v_plc_read).w,d5
000029F6 2C38 F6F4                  	move.l	(v_plc_shift).w,d6
000029FA 43F8 AA00                  	lea	(v_nem_dec_buffer).w,a1
000029FE                            
000029FE                            .Decomp:
000029FE 3A7C 0008                  	movea.w	#8,a5					; Store decompressed tile in VRAM
00002A02 6100 FE16                  	bsr.w	NemPCD_NewRow
00002A06 5378 F6F8                  	subq.w	#1,(v_plc_tile_cnt).w			; Decrement total tile count
00002A0A 6700                       	beq.s	ProcessPLCDec_Pop			; If this art is finished being decompressed, branch
00002A0C 5378 F6FA                  	subq.w	#1,(v_plc_proc_tile_cnt).w		; Decrement number of tiles left to decompress in this batch
00002A10 66EC                       	bne.s	.Decomp					; If we are not done, branch
00002A12                            
00002A12 21C8 F680                  	move.l	a0,(v_plc_buffer).w			; Update decompression registers
00002A16 21CB F6E0                  	move.l	a3,(v_plc_nem_write).w
00002A1A 21C0 F6E4                  	move.l	d0,(v_plc_repeat).w
00002A1E 21C1 F6E8                  	move.l	d1,(v_plc_pixel).w
00002A22 21C2 F6EC                  	move.l	d2,(v_plc_row).w
00002A26 21C5 F6F0                  	move.l	d5,(v_plc_read).w
00002A2A 21C6 F6F4                  	move.l	d6,(v_plc_shift).w
00002A2E                            
00002A2E                            ProcessPLCDec_Done:
00002A2E 4E75                       	rts
00002A30                            
00002A30                            ; -------------------------------------------------------------------------------
00002A30                            
00002A30                            ProcessPLCDec_Pop:
00002A30                            	; This code is bugged. Due to the fact that 15 PLC queue entries = $5A bytes,
00002A30                            	; which is not divisible by 4, this code only copies over $58 bytes, which means
00002A30                            	; the last VRAM address in the queue is left out. It also doesn't properly
00002A30                            	; clear out the popped entry, so if the queue is full, then it'll constantly
00002A30                            	; queue the last entry over and over again.
00002A30                            
00002A30 41F8 F680                  	lea	(v_plc_buffer).w,a0			; Pop a PLC queue entry out
00002A34 7015                       	moveq	#($60-6)/4-1,d0				; Copy $58 bytes (instead of the proper $5A)
00002A36                            
00002A36                            .Pop:
00002A36 20E8 0006                  	move.l	6(a0),(a0)+
00002A3A 51C8 FFFA                  	dbf	d0,.Pop
00002A3E 4E75                       	rts
00002A40                            
00002A40                            ; -------------------------------------------------------------------------------
00002A40                            ; Load and decompress a PLC list immediately
00002A40                            ; -------------------------------------------------------------------------------
00002A40                            ; PARAMETERS:
00002A40                            ;	d0.w	- PLC list ID
00002A40                            ; -------------------------------------------------------------------------------
00002A40                            
00002A40                            LoadPLCImm:
00002A40 43F9 0000 0000             	lea	(PLCIndex).l,a1				; Prepare PLC list index
00002A46 D040                       	add.w	d0,d0					; Get pointer to PLC list
00002A48 3031 0000                  	move.w	(a1,d0.w),d0
00002A4C 43F1 0000                  	lea	(a1,d0.w),a1
00002A50                            
00002A50 3219                       	move.w	(a1)+,d1				; Get number of entries
00002A52                            
00002A52                            .Load:
00002A52 2059                       	movea.l	(a1)+,a0				; Get art pointer
00002A54                            
00002A54 7000                       	moveq	#0,d0					; Get VRAM address
00002A56 3019                       	move.w	(a1)+,d0
00002A58 E588                       	lsl.l	#2,d0					; Convert VRAM address to VDP write command and set it
00002A5A E448                       	lsr.w	#2,d0
00002A5C 0040 4000                  	ori.w	#$4000,d0
00002A60 4840                       	swap	d0
00002A62 23C0 00C0 0004             	move.l	d0,(VDP_CTRL).l
00002A68                            
00002A68 6100 FD14                  	bsr.w	NemDec					; Decompress the art
00002A6C                            
00002A6C 51C9 FFE4                  	dbf	d1,.Load
00002A70 4E75                       	rts
00002A72                            
00002A72                            ; -------------------------------------------------------------------------------
00002A72                            ; Decompress Enigma tilemap data into RAM
00002A72                            ; -------------------------------------------------------------------------------
00002A72                            ; PARAMETERS:
00002A72                            ;	a0.l	- Enigma data pointer
00002A72                            ;	a1.l	- Destination buffer pointer
00002A72                            ;	d0.w	- Base tile
00002A72                            ; -------------------------------------------------------------------------------
00002A72                            
00002A72                            EniDec:
00002A72 48E7 FF7C                  	movem.l	d0-d7/a1-a5,-(sp)
00002A76 3640                       	movea.w	d0,a3					; Store base tile
00002A78 1018                       	move.b	(a0)+,d0
00002A7A 4880                       	ext.w	d0
00002A7C 3A40                       	movea.w	d0,a5					; Store number of bits in inline copy value
00002A7E 1818                       	move.b	(a0)+,d4
00002A80 E70C                       	lsl.b	#3,d4					; Store PCCVH flags bitfield
00002A82 3458                       	movea.w	(a0)+,a2
00002A84 D4CB                       	adda.w	a3,a2					; Store incremental copy word
00002A86 3858                       	movea.w	(a0)+,a4
00002A88 D8CB                       	adda.w	a3,a4					; Store literal copy word
00002A8A 1A18                       	move.b	(a0)+,d5
00002A8C E145                       	asl.w	#8,d5
00002A8E 1A18                       	move.b	(a0)+,d5				; Get first word in format list
00002A90 7C10                       	moveq	#16,d6					; Initial shift value
00002A92                            
00002A92                            EniDec_Loop:
00002A92 7007                       	moveq	#7,d0					; Assume a format list entry is 7 bits
00002A94 3E06                       	move.w	d6,d7
00002A96 9E40                       	sub.w	d0,d7
00002A98 3205                       	move.w	d5,d1
00002A9A EE69                       	lsr.w	d7,d1
00002A9C 0241 007F                  	andi.w	#$7F,d1					; Get format list entry
00002AA0 3401                       	move.w	d1,d2					; and copy it
00002AA2 0C41 0040                  	cmpi.w	#$40,d1					; Is the high bit of the entry set?
00002AA6 6400                       	bcc.s	.SevenBitEntry
00002AA8 7006                       	moveq	#6,d0					; If it isn't, the entry is actually 6 bits
00002AAA E24A                       	lsr.w	#1,d2
00002AAC                            
00002AAC                            .SevenBitEntry:
00002AAC 6100 0000                  	bsr.w	EniDec_ChkGetNextByte
00002AB0 0242 000F                  	andi.w	#$F,d2					; Get repeat count
00002AB4 E849                       	lsr.w	#4,d1
00002AB6 D241                       	add.w	d1,d1
00002AB8 4EFB 1000                  	jmp	EniDec_JmpTable(pc,d1.w)
00002ABC                            
00002ABC                            ; -------------------------------------------------------------------------------
00002ABC                            
00002ABC                            EniDec_Sub0:
00002ABC 32CA                       	move.w	a2,(a1)+				; Copy incremental copy word
00002ABE 524A                       	addq.w	#1,a2					; Increment it
00002AC0 51CA FFFA                  	dbf	d2,EniDec_Sub0				; Repeat
00002AC4 60CC                       	bra.s	EniDec_Loop
00002AC6                            
00002AC6                            ; -------------------------------------------------------------------------------
00002AC6                            
00002AC6                            EniDec_Sub4:
00002AC6 32CC                       	move.w	a4,(a1)+				; Copy literal copy word
00002AC8 51CA FFFC                  	dbf	d2,EniDec_Sub4				; Repeat
00002ACC 60C4                       	bra.s	EniDec_Loop
00002ACE                            
00002ACE                            ; -------------------------------------------------------------------------------
00002ACE                            
00002ACE                            EniDec_Sub8:
00002ACE 6100 0000                  	bsr.w	EniDec_GetInlineCopyVal
00002AD2                            
00002AD2                            .Loop:
00002AD2 32C1                       	move.w	d1,(a1)+				; Copy inline value
00002AD4 51CA FFFC                  	dbf	d2,.Loop				; Repeat
00002AD8 60B8                       	bra.s	EniDec_Loop
00002ADA                            
00002ADA                            ; -------------------------------------------------------------------------------
00002ADA                            
00002ADA                            EniDec_SubA:
00002ADA 6100 0000                  	bsr.w	EniDec_GetInlineCopyVal
00002ADE                            
00002ADE                            .Loop:
00002ADE 32C1                       	move.w	d1,(a1)+				; Copy inline value
00002AE0 5241                       	addq.w	#1,d1					; Increment it
00002AE2 51CA FFFA                  	dbf	d2,.Loop				; Repeat
00002AE6 60AA                       	bra.s	EniDec_Loop
00002AE8                            
00002AE8                            ; -------------------------------------------------------------------------------
00002AE8                            
00002AE8                            EniDec_SubC:
00002AE8 6100 0000                  	bsr.w	EniDec_GetInlineCopyVal
00002AEC                            
00002AEC                            .Loop:
00002AEC 32C1                       	move.w	d1,(a1)+				; Copy inline value
00002AEE 5341                       	subq.w	#1,d1					; Decrement it
00002AF0 51CA FFFA                  	dbf	d2,.Loop				; Repeat
00002AF4 609C                       	bra.s	EniDec_Loop
00002AF6                            
00002AF6                            ; -------------------------------------------------------------------------------
00002AF6                            
00002AF6                            EniDec_SubE:
00002AF6 0C42 000F                  	cmpi.w	#$F,d2
00002AFA 6700                       	beq.s	EniDec_End
00002AFC                            
00002AFC                            .Loop4:
00002AFC 6100 0000                  	bsr.w	EniDec_GetInlineCopyVal			; Fetch new inline value
00002B00 32C1                       	move.w	d1,(a1)+				; Copy it
00002B02 51CA FFF8                  	dbf	d2,.Loop4				; Repeat
00002B06 608A                       	bra.s	EniDec_Loop
00002B08                            
00002B08                            ; -------------------------------------------------------------------------------
00002B08                            
00002B08                            EniDec_JmpTable:
00002B08 60B2                       	bra.s	EniDec_Sub0
00002B0A 60B0                       	bra.s	EniDec_Sub0
00002B0C 60B8                       	bra.s	EniDec_Sub4
00002B0E 60B6                       	bra.s	EniDec_Sub4
00002B10 60BC                       	bra.s	EniDec_Sub8
00002B12 60C6                       	bra.s	EniDec_SubA
00002B14 60D2                       	bra.s	EniDec_SubC
00002B16 60DE                       	bra.s	EniDec_SubE
00002B18                            
00002B18                            ; -------------------------------------------------------------------------------
00002B18                            
00002B18                            EniDec_End:
00002B18 5348                       	subq.w	#1,a0					; Go back by one byte
00002B1A 0C46 0010                  	cmpi.w	#16,d6					; Were we going to start a completely new byte?
00002B1E 6600                       	bne.s	.NotNewByte				; If not, branch
00002B20 5348                       	subq.w	#1,a0					; And another one if needed
00002B22                            
00002B22                            .NotNewByte:
00002B22 3008                       	move.w	a0,d0
00002B24 E248                       	lsr.w	#1,d0					; Are we on an odd byte?
00002B26 6400                       	bcc.s	.Even					; If not, branch
00002B28 5248                       	addq.w	#1,a0					; Ensure we're on an even byte
00002B2A                            
00002B2A                            .Even:
00002B2A 4CDF 3EFF                  	movem.l	(sp)+,d0-d7/a1-a5
00002B2E 4E75                       	rts
00002B30                            
00002B30                            ; -------------------------------------------------------------------------------
00002B30                            
00002B30                            EniDec_GetInlineCopyVal:
00002B30 360B                       	move.w	a3,d3					; Copy base tile
00002B32 1204                       	move.b	d4,d1					; Copy PCCVH bitfield
00002B34 D201                       	add.b	d1,d1					; Is the priority bit set?
00002B36 6400                       	bcc.s	.NoPriority				; If not, branch
00002B38 5346                       	subq.w	#1,d6
00002B3A 0D05                       	btst	d6,d5					; Is the priority bit set in the inline render flags?
00002B3C 6700                       	beq.s	.NoPriority				; If not, branch
00002B3E 0043 8000                  	ori.w	#$8000,d3				; Set priority bit in the base tile
00002B42                            
00002B42                            .NoPriority:
00002B42 D201                       	add.b	d1,d1					; Is the high palette line bit set?
00002B44 6400                       	bcc.s	.NoPal1					; If not, branch
00002B46 5346                       	subq.w	#1,d6
00002B48 0D05                       	btst	d6,d5					; Is the high palette line bit set in the inline render flags?
00002B4A 6700                       	beq.s	.NoPal1					; If not, branch
00002B4C 0643 4000                  	addi.w	#$4000,d3				; Set second palette line bit
00002B50                            
00002B50                            .NoPal1:
00002B50 D201                       	add.b	d1,d1					; Is the low palette line bit set?
00002B52 6400                       	bcc.s	.NoPal0					; If not, branch
00002B54 5346                       	subq.w	#1,d6
00002B56 0D05                       	btst	d6,d5					; Is the low palette line bit set in the inline render flags?
00002B58 6700                       	beq.s	.NoPal0					; If not, branch
00002B5A 0643 2000                  	addi.w	#$2000,d3				; Set first palette line bit
00002B5E                            
00002B5E                            .NoPal0:
00002B5E D201                       	add.b	d1,d1					; Is the Y flip bit set?
00002B60 6400                       	bcc.s	.NoYFlip				; If not, branch
00002B62 5346                       	subq.w	#1,d6
00002B64 0D05                       	btst	d6,d5					; Is the Y flip bit set in the inline render flags?
00002B66 6700                       	beq.s	.NoYFlip				; If not, branch
00002B68 0043 1000                  	ori.w	#$1000,d3				; Set Y flip bit
00002B6C                            
00002B6C                            .NoYFlip:
00002B6C D201                       	add.b	d1,d1					; Is the X flip bit set?
00002B6E 6400                       	bcc.s	.NoXFlip				; If not, branch
00002B70 5346                       	subq.w	#1,d6
00002B72 0D05                       	btst	d6,d5					; Is the X flip bit set in the inline render flags?
00002B74 6700                       	beq.s	.NoXFlip				; If not, branch
00002B76 0043 0800                  	ori.w	#$800,d3				; Set X flip bit
00002B7A                            
00002B7A                            .NoXFlip:
00002B7A 3205                       	move.w	d5,d1
00002B7C 3E06                       	move.w	d6,d7
00002B7E 9E4D                       	sub.w	a5,d7					; Subtract length in bits of inline copy value
00002B80 6400                       	bcc.s	.GotEnoughBits				; Branch if a new word doesn't need to be read
00002B82 3C07                       	move.w	d7,d6
00002B84 0646 0010                  	addi.w	#16,d6
00002B88 4447                       	neg.w	d7					; Calculate bit deficit
00002B8A EF69                       	lsl.w	d7,d1					; and make space for that many bits
00002B8C 1A10                       	move.b	(a0),d5					; Get next byte
00002B8E EF3D                       	rol.b	d7,d5					; and rotate the required bits into the lowest positions
00002B90 DE47                       	add.w	d7,d7
00002B92 CA7B 7000                  	and.w	EniDec_Masks-2(pc,d7.w),d5
00002B96 D245                       	add.w	d5,d1					; Combine upper bits with lower bits
00002B98                            
00002B98                            .AddBits:
00002B98 300D                       	move.w	a5,d0					; Get length in bits of inline copy value
00002B9A D040                       	add.w	d0,d0
00002B9C C27B 0000                  	and.w	EniDec_Masks-2(pc,d0.w),d1		; Mask value
00002BA0 D243                       	add.w	d3,d1					; Add base tile
00002BA2 1A18                       	move.b	(a0)+,d5
00002BA4 E14D                       	lsl.w	#8,d5
00002BA6 1A18                       	move.b	(a0)+,d5
00002BA8 4E75                       	rts
00002BAA                            
00002BAA                            .GotEnoughBits:
00002BAA 6700                       	beq.s	.JustEnough				; If the word has been exactly exhausted, branch
00002BAC EE69                       	lsr.w	d7,d1					; Get inline copy value
00002BAE 300D                       	move.w	a5,d0
00002BB0 D040                       	add.w	d0,d0
00002BB2 C27B 0000                  	and.w	EniDec_Masks-2(pc,d0.w),d1		; Mask it
00002BB6 D243                       	add.w	d3,d1					; Add base tile
00002BB8 300D                       	move.w	a5,d0
00002BBA 6000                       	bra.s	EniDec_ChkGetNextByte
00002BBC                            
00002BBC                            .JustEnough:
00002BBC 7C10                       	moveq	#16,d6					; Reset shift value
00002BBE 60D8                       	bra.s	.AddBits
00002BC0                            
00002BC0                            ; -------------------------------------------------------------------------------
00002BC0                            
00002BC0                            EniDec_Masks:
00002BC0 0001 0003 0007 000F        	dc.w	1,     3,     7,     $F
00002BC8 001F 003F 007F 00FF        	dc.w	$1F,   $3F,   $7F,   $FF
00002BD0 01FF 03FF 07FF 0FFF        	dc.w	$1FF,  $3FF,  $7FF,  $FFF
00002BD8 1FFF 3FFF 7FFF FFFF        	dc.w	$1FFF, $3FFF, $7FFF, $FFFF
00002BE0                            
00002BE0                            ; -------------------------------------------------------------------------------
00002BE0                            
00002BE0                            EniDec_ChkGetNextByte:
00002BE0 9C40                       	sub.w	d0,d6					; Subtract length of current entry from shift value so that next entry is read next time around
00002BE2 0C46 0009                  	cmpi.w	#9,d6					; Does a new byte need to be read?
00002BE6 6400                       	bcc.s	.End					; If not, branch
00002BE8 5046                       	addq.w	#8,d6
00002BEA E145                       	asl.w	#8,d5
00002BEC 1A18                       	move.b	(a0)+,d5
00002BEE                            
00002BEE                            .End:
00002BEE 4E75                       	rts
00002BF0                            
00002BF0                            ; -------------------------------------------------------------------------------
00002BF0                            ; Decompress Kosinski data into RAM
00002BF0                            ; -------------------------------------------------------------------------------
00002BF0                            ; PARAMETERS:
00002BF0                            ;	a0.l	- Kosinski data pointer
00002BF0                            ;	a1.l	- Destination buffer pointer
00002BF0                            ; -------------------------------------------------------------------------------
00002BF0                            
00002BF0                            KosDec:
00002BF0 558F                       	subq.l	#2,sp					; Allocate 2 bytes on the stack
00002BF2 1F58 0001                  	move.b	(a0)+,1(sp)
00002BF6 1E98                       	move.b	(a0)+,(sp)
00002BF8 3A17                       	move.w	(sp),d5					; Get first description field
00002BFA 780F                       	moveq	#$F,d4					; Set to loop for 16 bits
00002BFC                            
00002BFC                            KosDec_Loop:
00002BFC E24D                       	lsr.w	#1,d5					; Shift bit into the C flag
00002BFE 40C6                       	move	sr,d6
00002C00 51CC 0000                  	dbf	d4,.ChkBit
00002C04 1F58 0001                  	move.b	(a0)+,1(sp)
00002C08 1E98                       	move.b	(a0)+,(sp)
00002C0A 3A17                       	move.w	(sp),d5
00002C0C 780F                       	moveq	#$F,d4
00002C0E                            
00002C0E                            .ChkBit:
00002C0E 44C6                       	move	d6,ccr					; Was the bit set?
00002C10 6400                       	bcc.s	KosDec_RLE				; If not, branch
00002C12                            
00002C12 12D8                       	move.b	(a0)+,(a1)+				; Copy byte as is
00002C14 60E6                       	bra.s	KosDec_Loop
00002C16                            
00002C16                            ; -------------------------------------------------------------------------------
00002C16                            
00002C16                            KosDec_RLE:
00002C16 7600                       	moveq	#0,d3
00002C18 E24D                       	lsr.w	#1,d5					; Get next bit
00002C1A 40C6                       	move	sr,d6
00002C1C 51CC 0000                  	dbf	d4,.ChkBit
00002C20 1F58 0001                  	move.b	(a0)+,1(sp)
00002C24 1E98                       	move.b	(a0)+,(sp)
00002C26 3A17                       	move.w	(sp),d5
00002C28 780F                       	moveq	#$F,d4
00002C2A                            
00002C2A                            .ChkBit:
00002C2A 44C6                       	move	d6,ccr					; Was the bit set?
00002C2C 6500                       	bcs.s	KosDec_SeparateRLE			; If yes, branch
00002C2E                            
00002C2E E24D                       	lsr.w	#1,d5					; Shift bit into the X flag
00002C30 51CC 0000                  	dbf	d4,.Loop
00002C34 1F58 0001                  	move.b	(a0)+,1(sp)
00002C38 1E98                       	move.b	(a0)+,(sp)
00002C3A 3A17                       	move.w	(sp),d5
00002C3C 780F                       	moveq	#$F,d4
00002C3E                            
00002C3E                            .Loop:
00002C3E E353                       	roxl.w	#1,d3					; Get high repeat count bit
00002C40 E24D                       	lsr.w	#1,d5
00002C42 51CC 0000                  	dbf	d4,.Loop2
00002C46 1F58 0001                  	move.b	(a0)+,1(sp)
00002C4A 1E98                       	move.b	(a0)+,(sp)
00002C4C 3A17                       	move.w	(sp),d5
00002C4E 780F                       	moveq	#$F,d4
00002C50                            
00002C50                            .Loop2:
00002C50 E353                       	roxl.w	#1,d3					; Get low repeat count bit
00002C52 5243                       	addq.w	#1,d3					; Increment repeat count
00002C54 74FF                       	moveq	#$FFFFFFFF,d2
00002C56 1418                       	move.b	(a0)+,d2				; Calculate offset
00002C58 6000                       	bra.s	KosDec_RLELoop
00002C5A                            
00002C5A                            ; -------------------------------------------------------------------------------
00002C5A                            
00002C5A                            KosDec_SeparateRLE:
00002C5A 1018                       	move.b	(a0)+,d0				; Get first byte
00002C5C 1218                       	move.b	(a0)+,d1				; Get second byte
00002C5E 74FF                       	moveq	#$FFFFFFFF,d2
00002C60 1401                       	move.b	d1,d2
00002C62 EB4A                       	lsl.w	#5,d2
00002C64 1400                       	move.b	d0,d2					; Calcualte offset
00002C66 0241 0007                  	andi.w	#7,d1					; Does a third byte need to be read?
00002C6A 6700                       	beq.s	KosDec_SeparateRLE2			; If yes, branch
00002C6C 1601                       	move.b	d1,d3					; Copy repeat count
00002C6E 5243                       	addq.w	#1,d3					; Increment
00002C70                            
00002C70                            KosDec_RLELoop:
00002C70 1031 2000                  	move.b	(a1,d2.w),d0				; Copy appropriate byte
00002C74 12C0                       	move.b	d0,(a1)+				; Repeat
00002C76 51CB FFF8                  	dbf	d3,KosDec_RLELoop
00002C7A 6080                       	bra.s	KosDec_Loop
00002C7C                            
00002C7C                            ; -------------------------------------------------------------------------------
00002C7C                            
00002C7C                            KosDec_SeparateRLE2:
00002C7C 1218                       	move.b	(a0)+,d1
00002C7E 6700                       	beq.s	KosDec_Done				; 0 indicates end of compressed data
00002C80 0C01 0001                  	cmpi.b	#1,d1
00002C84 6700 FF76                  	beq.w	KosDec_Loop				; 1 indicates new description to be read
00002C88 1601                       	move.b	d1,d3					; Otherwise, copy repeat count
00002C8A 60E4                       	bra.s	KosDec_RLELoop
00002C8C                            
00002C8C                            ; -------------------------------------------------------------------------------
00002C8C                            
00002C8C                            KosDec_Done:
00002C8C 548F                       	addq.l	#2,sp					; Deallocate the 2 bytes
00002C8E 4E75                       	rts
00002C90                            
00002C90                            ; -------------------------------------------------------------------------------
00002C90                            ; Get player object
00002C90                            ; -------------------------------------------------------------------------------
00002C90                            ; RETURNS:
00002C90                            ;	a6.l	- Player object RAM
00002C90                            ; -------------------------------------------------------------------------------
00002C90                            
00002C90                            GetPlayerObject:
00002C90 4DF8 D000                  	lea	(v_player).w,a6				; Player 1
00002C94 4A39 00FF 1509             	tst.b	(v_use_player2).l			; Are we using player 2?
00002C9A 6700                       	beq.s	.Done					; If not, branch
00002C9C 4DF8 D040                  	lea	(v_player2).w,a6			; Player 2
00002CA0                            
00002CA0                            .Done:
00002CA0 4E75                       	rts
00002CA2                            
00002CA2                            ; -------------------------------------------------------------------------------
00002CA2                            ; Get level size and start position
00002CA2                            ; -------------------------------------------------------------------------------
00002CA2                            
00002CA2                            LevelSizeLoad:
00002CA2 7000                       	moveq	#0,d0
00002CA4 11C0 F740                  	move.b	d0,(v_unused_f740).w			; Clear unused variables
00002CA8 11C0 F741                  	move.b	d0,(v_unused_f741).w
00002CAC 11C0 F746                  	move.b	d0,(v_unused_f746).w
00002CB0 11C0 F748                  	move.b	d0,(v_unused_f748).w
00002CB4 11C0 F742                  	move.b	d0,(v_event_routine).w			; Clear level event routine
00002CB8                            
00002CB8 3039 00FF 1506             	move.w	(v_zone).l,d0
00002CBE ED08                       	lsl.b	#6,d0
00002CC0 E848                       	lsr.w	#4,d0
00002CC2 3200                       	move.w	d0,d1
00002CC4 D040                       	add.w	d0,d0
00002CC6 D041                       	add.w	d1,d0
00002CC8                            
00002CC8                            	;lea	(LevelSize).l,a0			; Prepare level size information
00002CC8 41FB 0000                      lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00002CCC                            	
00002CCC 3018                       	move.w	(a0)+,d0				; Get unused word
00002CCE 31C0 F730                  	move.w	d0,(v_unused_f730).w
00002CD2 2018                       	move.l	(a0)+,d0				; Get left and right boundaries
00002CD4 21C0 F728                  	move.l	d0,(v_left_bound).w
00002CD8 21C0 F720                  	move.l	d0,(v_dest_left_bound).w
00002CDC 2018                       	move.l	(a0)+,d0				; Get top and bottom boundaries
00002CDE 21C0 F72C                  	move.l	d0,(v_top_bound).w
00002CE2 21C0 F724                  	move.l	d0,(v_dest_top_bound).w
00002CE6 3038 F728                  	move.w	(v_left_bound).w,d0			; Get left boundary + $240
00002CEA 0640 0240                  	addi.w	#$240,d0
00002CEE 31C0 F732                  	move.w	d0,(v_left_bound3).w
00002CF2 31FC 1010 F74A             	move.w	#$1010,(v_horiz_blk_crossed_flag).w	; Initialize horizontal block crossed flags
00002CF8 3018                       	move.w	(a0)+,d0				; Get camera Y center
00002CFA 31C0 F73E                  	move.w	d0,(v_cam_y_center).w
00002CFE 31FC 00A0 F7A0             	move.w	#320/2,(v_cam_x_center).w		; Get camera X center
00002D04                            
00002D04 6000 0000                  	bra.w	LevelSizeLoad_StartPos
00002D08                            
00002D08                            ; -------------------------------------------------------------------------------
00002D08                            
00002D08                            ;LevelSize:
00002D08                            ;	dc.w	4, 0, $2897, 0, $710, $60
00002D08                            ;word_2027F8:
00002D08                            ;        dc.w 4                      ; DATA XREF: InitCamera+16↑o
00002D08                            ;        dc.w 0                      ; DATA XREF: ObjBossEggman_0_Routine8:ObjBossEggman_0_RoutineA↓o
00002D08                            ;        dc.w $D97
00002D08                            ;        dc.w 0
00002D08                            ;        dc.w $310
00002D08                            ;        dc.w $60
00002D08                            LevelSizeArray:
00002D08                            ; Palmtree Panic Zone
00002D08 0004 0000 2897 0000 0710+               		dc.w $0004, $0000, $2897, $0000, $0710, $0060 ; Act 1
00002D14 0004 0000 2897 0000 0310+               		dc.w $0004, $0000, $2897, $0000, $0310, $0060 ; Act 2
00002D20 0004 0000 0D97 0000 0310+  word_2027F8:		dc.w $0004, $0000, $0D97, $0000, $0310, $0060 ; Act 3
00002D2C 0004 0000 2ABF 0000 0300+              		dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00002D38                            		even			
00002D38                            ; -------------------------------------------------------------------------------
00002D38                            
00002D38                            ; Leftover ending demo start positions from Sonic 1
00002D38                            EndingStLocsS1:
00002D38 0050 03B0                  	dc.w	$50, $3B0
00002D3C 0EA0 046C                  	dc.w	$EA0, $46C
00002D40 1750 00BD                  	dc.w	$1750, $BD
00002D44 0A00 062C                  	dc.w	$A00, $62C
00002D48 0BB0 004C                  	dc.w	$BB0, $4C
00002D4C 1570 016C                  	dc.w	$1570, $16C
00002D50 01B0 072C                  	dc.w	$1B0, $72C
00002D54 1400 02AC                  	dc.w	$1400, $2AC
00002D58                            
00002D58                            ; -------------------------------------------------------------------------------
00002D58                            
00002D58                            LevelSizeLoad_StartPos:
00002D58 4A39 00FF 1522             	tst.b	(v_reset_lvl_flags).l			; Was the level reset midway?
00002D5E 6700                       	beq.s	.DefaultStart				; If not, branch
00002D60                            
00002D60 4EB9 0000 0000             	jsr	ObjCheckpoint_LoadData			; Load checkpoint data
00002D66 7000                       	moveq	#0,d0					; Get player position
00002D68 7200                       	moveq	#0,d1
00002D6A 3238 D008                  	move.w	(v_player+oX).w,d1
00002D6E 3038 D00C                  	move.w	(v_player+oY).w,d0
00002D72 6A00                       	bpl.s	.SkipCap				; If the Y position is positive, branch
00002D74 7000                       	moveq	#0,d0					; Cap the Y position at 0 if negative
00002D76                            
00002D76                            .SkipCap:
00002D76 6000                       	bra.s	.SetupCamera
00002D78                            
00002D78                            .DefaultStart:
00002D78 3039 00FF 1506             	move.w	(v_zone).l,d0
00002D7E ED08                       	lsl.b	#6,d0
00002D80 E848                       	lsr.w	#4,d0
00002D82 43FB 0000                  	lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00002D86                            ;	lea	(LevelStartLoc).l,a1			; Prepare level start position
00002D86 7200                       	moveq	#0,d1					; Get starting X position
00002D88 3219                       	move.w	(a1)+,d1
00002D8A 31C1 D008                  	move.w	d1,(v_player+oX).w
00002D8E 7000                       	moveq	#0,d0					; Get starting Y position
00002D90 3011                       	move.w	(a1),d0
00002D92 31C0 D00C                  	move.w	d0,(v_player+oY).w
00002D96                            
00002D96                            .SetupCamera:
00002D96 0441 00A0                  	subi.w	#320/2,d1				; Get camera X position
00002D9A 6400                       	bcc.s	.SkipXLeftBnd				; If it doesn't need to be capped, branch
00002D9C 7200                       	moveq	#0,d1					; If it does, cap at 0
00002D9E                            
00002D9E                            .SkipXLeftBnd:
00002D9E 3438 F72A                  	move.w	(v_right_bound).w,d2			; Is the camera past the right boundary?
00002DA2 B242                       	cmp.w	d2,d1
00002DA4 6500                       	bcs.s	.SkipXRightBnd				; If not, branch
00002DA6 3202                       	move.w	d2,d1					; If so, cap it
00002DA8                            
00002DA8                            .SkipXRightBnd:
00002DA8 31C1 F700                  	move.w	d1,(v_cam_fg_x).w			; Set camera X position
00002DAC                            
00002DAC 0440 0060                  	subi.w	#$60,d0					; Get camera Y position
00002DB0 6400                       	bcc.s	.SkipYTopBnd				; If it doesn't need to be capped, branch
00002DB2 7000                       	moveq	#0,d0					; If it does, cap at 0
00002DB4                            
00002DB4                            .SkipYTopBnd:
00002DB4 B078 F72E                  	cmp.w	(v_bottom_bound).w,d0			; Is the camera past the bottom boundary?
00002DB8 6D00                       	blt.s	.SkipYBtmBnd				; If not, branch
00002DBA 3038 F72E                  	move.w	(v_bottom_bound).w,d0			; If so, cap it
00002DBE                            
00002DBE                            .SkipYBtmBnd:
00002DBE 31C0 F704                  	move.w	d0,(v_cam_fg_y).w			; Set camera Y position
00002DC2                            
00002DC2 6100 0000                  	bsr.w	InitLevelScroll				; Initialize level scrolling
00002DC6                            
00002DC6 43F9 0000 0000             	lea	(LoopChunks).l,a1			; Get loop chunks
00002DCC 0C79 0001 00FF 1506        	cmpi.w #$0001,(v_zone).l        ; Are we in PPZ Act 2
00002DD4 6600                       	bne.s .NormalLoad
00002DD6 43F9 0000 0000             	lea	(PPZ2_LoopChunks).l,a1			; Get loop chunks
00002DDC 0C79 0002 00FF 1506        	cmpi.w #$0002,(v_zone).l        ; Are we in PPZ Act 3
00002DE4 6600                       	bne.s .NormalLoad
00002DE6 43F9 0000 0000             	lea	(PPZ3_LoopChunks).l,a1			; Get loop chunks
00002DEC                            .NormalLoad:
00002DEC 21D1 F7AC                  	move.l	(a1),(v_loop_chunks).w
00002DF0 4E75                       	rts
00002DF2                            
00002DF2                            ; -------------------------------------------------------------------------------
00002DF2                            
00002DF2                            StartLocArray:
00002DF2                            		incbin	"level\level\startpos\R11A.bin"
00002DF6                            		incbin	"level\level\startpos\R12A.bin"
00002DFA                            		incbin	"level\level\startpos\R13C.bin"
00002DFE 0080 00A8                  		dc.w	$80,$A8
00002E02                            
00002E02                            		incbin	"level\level\startpos\R11A.bin"
00002E06                            		incbin	"level\level\startpos\R11A.bin"
00002E0A                            		incbin	"level\level\startpos\R11A.bin"
00002E0E                            		incbin	"level\level\startpos\R11A.bin"
00002E12                            
00002E12                            		incbin	"level\level\startpos\R11A.bin"
00002E16                            		incbin	"level\level\startpos\R11A.bin"
00002E1A                            		incbin	"level\level\startpos\R11A.bin"
00002E1E 0080 00A8                  		dc.w	$80,$A8
00002E22                            
00002E22                            		incbin	"level\level\startpos\R11A.bin"
00002E26                            		incbin	"level\level\startpos\R11A.bin"
00002E2A                            		incbin	"level\level\startpos\R11A.bin"
00002E2E 0080 00A8                  		dc.w	$80,$A8
00002E32                            
00002E32                            		incbin	"level\level\startpos\R11A.bin"
00002E36                            		incbin	"level\level\startpos\R11A.bin"
00002E3A                            		incbin	"level\level\startpos\R11A.bin"
00002E3E 0080 00A8                  		dc.w	$80,$A8
00002E42                            
00002E42                            		incbin	"level\level\startpos\R11A.bin"
00002E46                            		incbin	"level\level\startpos\R11A.bin"
00002E4A                            		incbin	"level\level\startpos\R11A.bin"
00002E4E 0080 00A8                  		dc.w	$80,$A8
00002E52                            
00002E52                            
00002E52                            		incbin	"level\level\startpos\R11A.bin"
00002E56                            		incbin	"level\level\startpos\R11A.bin"
00002E5A 0080 00A8                  		dc.w	$80,$A8
00002E5E 0080 00A8                  		dc.w	$80,$A8
00002E62                            
00002E62                            		even
00002E62                            LevelStartLoc_End		
00002E62                            
00002E62                            LoopChunks:
00002E62 7F7F 7F7F                  	dc.b	$7F, $7F, $7F, $7F
00002E66                            PPZ2_LoopChunks:
00002E66 91B6 7F7F                  	dc.b	$91, $B6, $7F, $7F
00002E6A                            PPZ3_LoopChunks:
00002E6A 917F 1E1E                  	dc.b	$91, $7F, $1E, $1E	
00002E6E                            ; -------------------------------------------------------------------------------
00002E6E                            ; Initialize level scrollings
00002E6E                            ; -------------------------------------------------------------------------------
00002E6E                            
00002E6E                            InitLevelScroll:
00002E6E 0C79 0001 00FF 1506            cmpi.w  #$0001,(v_zone).l
00002E76 6600                       	bne.s   .NoPPZ2
00002E78 4EF9 0000 0000             	jmp (PPZ2_IntScroll).l
00002E7E                            .NoPPZ2:	
00002E7E 0C79 0002 00FF 1506            cmpi.w  #$0002,(v_zone).l
00002E86 6600                       	bne.s   .Load
00002E88 4EF9 0000 0000             	jmp (PPZ3_IntScroll).l
00002E8E                            .Load:	
00002E8E 0C78 0800 D008             	cmpi.w	#$800,(v_player+oX).w			; Has the player gone past the first 3D ramp?
00002E94 6500                       	bcs.s	.No3DRamp				; If not, branch
00002E96 0440 01E0                  	subi.w	#$1E0,d0				; Get background Y position after first 3D ramp
00002E9A 6500                       	bcs.s	.ChgDir
00002E9C E248                       	lsr.w	#1,d0
00002E9E                            
00002E9E                            .ChgDir:
00002E9E 0640 01E0                  	addi.w	#$1E0,d0				; Get background Y position
00002EA2                            
00002EA2                            .No3DRamp:
00002EA2 4840                       	swap	d0					; Set background Y positions
00002EA4 21C0 F70C                  	move.l	d0,(v_cam_bg_y).w
00002EA8 4840                       	swap	d0
00002EAA 31C0 F714                  	move.w	d0,(v_cam_bg2_y).w
00002EAE 31C0 F71C                  	move.w	d0,(v_cam_bg3_y).w
00002EB2                            
00002EB2 E249                       	lsr.w	#1,d1					; Get background X positions
00002EB4 31C1 F708                  	move.w	d1,(v_cam_bg_x).w
00002EB8 E449                       	lsr.w	#2,d1
00002EBA 3401                       	move.w	d1,d2
00002EBC D442                       	add.w	d2,d2
00002EBE D441                       	add.w	d1,d2
00002EC0 31C2 F718                  	move.w	d2,(v_cam_bg3_x).w
00002EC4 E249                       	lsr.w	#1,d1
00002EC6 3401                       	move.w	d1,d2
00002EC8 D442                       	add.w	d2,d2
00002ECA D441                       	add.w	d1,d2
00002ECC 31C2 F710                  	move.w	d2,(v_cam_bg2_x).w
00002ED0                            
00002ED0 45F9 00FF 1E00             	lea	(v_layer_speeds).l,a2			; Clear cloud speeds
00002ED6 7C12                       	moveq	#$12,d6
00002ED8                            
00002ED8                            .ClearSpeeds:
00002ED8 429A                       	clr.l	(a2)+
00002EDA 51CE FFFC                  	dbf	d6,.ClearSpeeds
00002EDE 4E75                       	rts
00002EE0                            
00002EE0                            ; -------------------------------------------------------------------------------
00002EE0                            ; Handle level scrolling
00002EE0                            ; -------------------------------------------------------------------------------
00002EE0                            DeformBgLayer:
00002EE0                            LevelScroll:
00002EE0 0C79 0001 00FF 1506            cmpi.w  #$0001,(v_zone).l
00002EE8 6600                       	bne.s   .NoPPZ2
00002EEA 4EF9 0000 0000             	jmp (PPZ2_Scroll).l
00002EF0                            .NoPPZ2:	
00002EF0 0C79 0002 00FF 1506            cmpi.w  #$0002,(v_zone).l
00002EF8 6600                       	bne.s   .Load
00002EFA 4EF9 0000 0000             	jmp (PPZ3_Scroll).l
00002F00                            .Load:	
00002F00 4A38 F744                  	tst.b	(v_scroll_lock).w			; Is scrolling locked?
00002F04 6700                       	beq.s	.DoScroll				; If not, branch
00002F06 4E75                       	rts
00002F08                            
00002F08                            .DoScroll:
00002F08 4278 F754                  	clr.w	(v_scroll_flags).w			; Clear scroll flags
00002F0C 4278 F756                  	clr.w	(v_scroll_flags_bg).w
00002F10 4278 F758                  	clr.w	(v_scroll_flags_bg2).w
00002F14 4278 F75A                  	clr.w	(v_scroll_flags_bg3).w
00002F18                            
00002F18 6100 0000                  	bsr.w	RunLevelEvents				; Run level events
00002F1C 6100 0000                  	bsr.w	ScrollCamX				; Scroll camera horizontally
00002F20 6100 0000                  	bsr.w	ScrollCamY				; Scroll camera vertically
00002F24                            
00002F24 31F8 F704 F616             	move.w	(v_cam_fg_y).w,(v_vscroll).w		; Update VScroll values
00002F2A 31F8 F70C F618             	move.w	(v_cam_bg_y).w,(v_vscroll+2).w
00002F30                            
00002F30 7A00                       	moveq	#0,d5					; Reset scroll speed offset
00002F32 0838 0001 D02C             	btst	#1,(v_player+oPlayerCtrl).w		; Is the player on a 3D ramp?
00002F38 6700                       	beq.s	.GotSpeed				; If not, branch
00002F3A 4A78 F73A                  	tst.w	(v_scroll_diff_x).w			; Is the camera scrolling horizontally?
00002F3E 6700                       	beq.s	.GotSpeed				; If not, branch
00002F40 3A38 D010                  	move.w	(v_player+oXVel).w,d5			; Set scroll speed offset to the player's X velocity
00002F44 48C5                       	ext.l	d5
00002F46 E185                       	asl.l	#8,d5
00002F48                            
00002F48                            .GotSpeed:
00002F48 3838 F73A                  	move.w	(v_scroll_diff_x).w,d4			; Set scroll offset and flags for the clouds
00002F4C 48C4                       	ext.l	d4
00002F4E EB84                       	asl.l	#5,d4
00002F50 D885                       	add.l	d5,d4
00002F52 7C06                       	moveq	#6,d6
00002F54 6100 0000                  	bsr.w	SetHorizScrollFlagsBG3
00002F58                            
00002F58 3838 F73A                  	move.w	(v_scroll_diff_x).w,d4			; Set scroll offset and flags for the mountains
00002F5C 48C4                       	ext.l	d4
00002F5E E984                       	asl.l	#4,d4
00002F60 2604                       	move.l	d4,d3
00002F62 D683                       	add.l	d3,d3
00002F64 D883                       	add.l	d3,d4
00002F66 D885                       	add.l	d5,d4
00002F68 D885                       	add.l	d5,d4
00002F6A 7C04                       	moveq	#4,d6
00002F6C 6100 0000                  	bsr.w	SetHorizScrollFlagsBG2
00002F70                            
00002F70 43F8 A800                  	lea	(v_deform_buffer).w,a1			; Prepare deformation buffer
00002F74                            
00002F74 3838 F73A                  	move.w	(v_scroll_diff_x).w,d4			; Set scroll offset and flags for the bushes and water
00002F78 48C4                       	ext.l	d4
00002F7A EF84                       	asl.l	#7,d4
00002F7C D885                       	add.l	d5,d4
00002F7E 7C02                       	moveq	#2,d6
00002F80 6100 0000                  	bsr.w	SetHorizScrollFlagsBG
00002F84                            
00002F84 3038 F704                  	move.w	(v_cam_fg_y).w,d0			; Get background Y position
00002F88 0C78 0800 D008             	cmpi.w	#$800,(v_player+oX).w			; Has the player gone past the first 3D ramp?
00002F8E 6500                       	bcs.s	.No3DRamp				; If not, branch
00002F90 0440 01E0                  	subi.w	#$1E0,d0				; Get background Y position past the first 3D ramp
00002F94 6500                       	bcs.s	.ChgDir
00002F96 E248                       	lsr.w	#1,d0
00002F98                            
00002F98                            .ChgDir:
00002F98 0640 01E0                  	addi.w	#$1E0,d0				; Get background Y position before the first 3D ramp
00002F9C                            
00002F9C                            .No3DRamp:
00002F9C 6100 0000                  	bsr.w	SetVertiScrollFlagsBG2			; Set BG2 vertical scroll flags
00002FA0                            
00002FA0 31F8 F70C F618             	move.w	(v_cam_bg_y).w,(v_vscroll+2).w		; Update background Y positions
00002FA6 31F8 F70C F714             	move.w	(v_cam_bg_y).w,(v_cam_bg2_y).w
00002FAC 31F8 F70C F71C             	move.w	(v_cam_bg_y).w,(v_cam_bg3_y).w
00002FB2                            
00002FB2 1038 F75A                  	move.b	(v_scroll_flags_bg3).w,d0		; Combine background scroll flags for the level drawing routine
00002FB6 8038 F758                  	or.b	(v_scroll_flags_bg2).w,d0
00002FBA 8138 F756                  	or.b	d0,(v_scroll_flags_bg).w
00002FBE 4238 F75A                  	clr.b	(v_scroll_flags_bg3).w
00002FC2 4238 F758                  	clr.b	(v_scroll_flags_bg2).w
00002FC6                            
00002FC6 45F9 00FF 1E00             	lea	(v_layer_speeds).l,a2			; Set speeds for the clouds
00002FCC 069A 0001 0000             	addi.l	#$10000,(a2)+
00002FD2 069A 0000 E000             	addi.l	#$E000,(a2)+
00002FD8 069A 0000 C000             	addi.l	#$C000,(a2)+
00002FDE 069A 0000 A000             	addi.l	#$A000,(a2)+
00002FE4 069A 0000 8000             	addi.l	#$8000,(a2)+
00002FEA 069A 0000 6000             	addi.l	#$6000,(a2)+
00002FF0 069A 0000 4800             	addi.l	#$4800,(a2)+
00002FF6 069A 0000 4000             	addi.l	#$4000,(a2)+
00002FFC 069A 0000 2800             	addi.l	#$2800,(a2)+
00003002 069A 0000 2000             	addi.l	#$2000,(a2)+
00003008 069A 0000 2000             	addi.l	#$2000,(a2)+
0000300E 069A 0000 4000             	addi.l	#$4000,(a2)+
00003014 069A 0000 8000             	addi.l	#$8000,(a2)+
0000301A 069A 0000 C000             	addi.l	#$C000,(a2)+
00003020 069A 0001 0000             	addi.l	#$10000,(a2)+
00003026 069A 0000 C000             	addi.l	#$C000,(a2)+
0000302C 069A 0000 8000             	addi.l	#$8000,(a2)+
00003032 069A 0000 4000             	addi.l	#$4000,(a2)+
00003038 069A 0000 2000             	addi.l	#$2000,(a2)+
0000303E                            
0000303E 3038 F700                  	move.w	(v_cam_fg_x).w,d0			; Prepare scroll cache entry
00003042 4440                       	neg.w	d0
00003044 4840                       	swap	d0
00003046                            
00003046 45F9 00FF 1E00             	lea	(v_layer_speeds).l,a2			; Prepare cloud speeds
0000304C 7C09                       	moveq	#10-1,d6				; Number of cloud sections
0000304E                            
0000304E                            .CloudsScroll:
0000304E 221A                       	move.l	(a2)+,d1				; Get cloud section scroll offset
00003050 4841                       	swap	d1
00003052 D278 F718                  	add.w	(v_cam_bg3_x).w,d1
00003056 4441                       	neg.w	d1
00003058                            
00003058 7A00                       	moveq	#0,d5					; Get number of lines in this section
0000305A 47F9 0000 0000             	lea	(CloudSectSizes).l,a3
00003060 1A33 6000                  	move.b	(a3,d6.w),d5
00003064                            
00003064                            .CloudsScrollSect:
00003064 32C1                       	move.w	d1,(a1)+				; Store scroll offset
00003066 51CD FFFC                  	dbf	d5,.CloudsScrollSect			; Loop until this section is stored
0000306A 51CE FFE2                  	dbf	d6,.CloudsScroll			; Loop until the clouds are finished being processed
0000306E                            
0000306E 3038 F710                  	move.w	(v_cam_bg2_x).w,d0			; Scroll top mountains
00003072 4440                       	neg.w	d0
00003074 7C13                       	moveq	#20-1,d6
00003076                            
00003076                            .ScrollMountains:
00003076 32C0                       	move.w	d0,(a1)+
00003078 51CE FFFC                  	dbf	d6,.ScrollMountains
0000307C                            
0000307C 3038 F708                  	move.w	(v_cam_bg_x).w,d0			; Scroll top bushes
00003080 4440                       	neg.w	d0
00003082 7C03                       	moveq	#4-1,d6
00003084                            
00003084                            .ScrollBushes:
00003084 32C0                       	move.w	d0,(a1)+
00003086 51CE FFFC                  	dbf	d6,.ScrollBushes
0000308A                            
0000308A 3038 F708                  	move.w	(v_cam_bg_x).w,d0			; Scroll water (top and upside down)
0000308E 4440                       	neg.w	d0
00003090 3C3C 0037                  	move.w	#(28*2)-1,d6
00003094                            
00003094                            .ScrollWater:
00003094 32C0                       	move.w	d0,(a1)+
00003096 51CE FFFC                  	dbf	d6,.ScrollWater
0000309A                            
0000309A 3038 F708                  	move.w	(v_cam_bg_x).w,d0			; Scroll upside down bushes
0000309E 4440                       	neg.w	d0
000030A0 7C03                       	moveq	#4-1,d6
000030A2                            
000030A2                            .ScrollUpsideDownBushes:
000030A2 32C0                       	move.w	d0,(a1)+
000030A4 51CE FFFC                  	dbf	d6,.ScrollUpsideDownBushes
000030A8                            
000030A8 3038 F710                  	move.w	(v_cam_bg2_x).w,d0			; Scroll upside down mountains
000030AC 4440                       	neg.w	d0
000030AE 7C13                       	moveq	#20-1,d6
000030B0                            
000030B0                            .ScrollUpsideDownMountains:
000030B0 32C0                       	move.w	d0,(a1)+
000030B2 51CE FFFC                  	dbf	d6,.ScrollUpsideDownMountains
000030B6                            
000030B6 7C08                       	moveq	#9-1,d6					; Number of cloud sections
000030B8                            
000030B8                            .UpsideDownCloudsScroll:
000030B8 221A                       	move.l	(a2)+,d1				; Get cloud section scroll offset
000030BA 4841                       	swap	d1
000030BC D278 F718                  	add.w	(v_cam_bg3_x).w,d1
000030C0 4441                       	neg.w	d1
000030C2                            
000030C2 7A00                       	moveq	#0,d5					; Get number of lines in this section
000030C4 47F9 0000 0000             	lea	(CloudUpsideDownSectSizes).l,a3
000030CA 1A33 6000                  	move.b	(a3,d6.w),d5
000030CE                            
000030CE                            .UpsideDownCloudsScrollSect:
000030CE 32C1                       	move.w	d1,(a1)+				; Store scroll offset
000030D0 51CD FFFC                  	dbf	d5,.UpsideDownCloudsScrollSect		; Loop until this section is stored
000030D4 51CE FFE2                  	dbf	d6,.UpsideDownCloudsScroll		; Loop until the clouds are finished being processed
000030D8                            
000030D8 3038 F710                  	move.w	(v_cam_bg2_x).w,d0			; Scroll bottom mountains
000030DC 4440                       	neg.w	d0
000030DE 7C13                       	moveq	#20-1,d6
000030E0                            
000030E0                            .ScrollBtmMountains:
000030E0 32C0                       	move.w	d0,(a1)+
000030E2 51CE FFFC                  	dbf	d6,.ScrollBtmMountains
000030E6                            
000030E6 3038 F708                  	move.w	(v_cam_bg_x).w,d0			; Scroll bottom bushes
000030EA 4440                       	neg.w	d0
000030EC 7C03                       	moveq	#4-1,d6
000030EE                            
000030EE                            .ScrollBtmBushes:
000030EE 32C0                       	move.w	d0,(a1)+
000030F0 51CE FFFC                  	dbf	d6,.ScrollBtmBushes
000030F4                            
000030F4 3038 F708                  	move.w	(v_cam_bg_x).w,d0			; Scroll bottom water
000030F8 4440                       	neg.w	d0
000030FA 3C3C 000F                  	move.w	#16-1,d6
000030FE                            
000030FE                            .ScrollBtmWater:
000030FE 32C0                       	move.w	d0,(a1)+
00003100 51CE FFFC                  	dbf	d6,.ScrollBtmWater
00003104                            
00003104 43F8 CC00                  	lea	(v_hscroll).w,a1			; Prepare HScroll cache
00003108 45F8 A800                  	lea	(v_deform_buffer).w,a2			; Prepare deformation buffer
0000310C                            
0000310C 3038 F70C                  	move.w	(v_cam_bg_y).w,d0			; Get background Y position
00003110 3400                       	move.w	d0,d2
00003112 3800                       	move.w	d0,d4
00003114 0240 07F8                  	andi.w	#$7F8,d0
00003118 E448                       	lsr.w	#2,d0
0000311A 721D                       	moveq	#(240/8)-1,d1				; Max number of blocks to scroll
0000311C 45F2 0000                  	lea	(a2,d0.w),a2				; Get starting scroll block
00003120 47F9 0000 0000             	lea	(WaterDeformSects).l,a3			; Prepare water deformation section information
00003126 6000 0000                  	bra.w	ApplyBGHScroll				; Apply HScroll
0000312A                            
0000312A                            ; -------------------------------------------------------------------------------
0000312A                            
0000312A                            CloudSectSizes:						; Top cloud section sizes
0000312A 01                         	dc.b	2-1
0000312B 03                         	dc.b	4-1
0000312C 05                         	dc.b	6-1
0000312D 07                         	dc.b	8-1
0000312E 07                         	dc.b	8-1
0000312F 07                         	dc.b	8-1
00003130 03                         	dc.b	4-1
00003131 05                         	dc.b	6-1
00003132 05                         	dc.b	6-1
00003133 03                         	dc.b	4-1
00003134                            
00003134                            CloudUpsideDownSectSizes:				; Upside down and bottom cloud section sizes
00003134 01                         	dc.b	2-1
00003135 03                         	dc.b	4-1
00003136 05                         	dc.b	6-1
00003137 07                         	dc.b	8-1
00003138 0F                         	dc.b	16-1
00003139 03                         	dc.b	4-1
0000313A 09                         	dc.b	10-1
0000313B 03                         	dc.b	4-1
0000313C 01                         	dc.b	2-1
0000313E 00                         	even
0000313E                            
0000313E                            WaterDeformSects:					; Water deform section positions and sizes
0000313E 0280 00E0                  	dc.w	$280, $E0
00003142 0780 0080                  	dc.w	$780, $80
00003146 7FFF 0360                  	dc.w	$7FFF, $360
0000314A                            
0000314A                            ; -------------------------------------------------------------------------------
0000314A                            
0000314A                            ApplyBGHScroll:
0000314A B853                       	cmp.w	(a3),d4					; Is the background scrolled past the current water section?
0000314C 6400                       	bcc.s	.FoundWaterSection			; If so, branch
0000314E                            
0000314E                            .ScrollUnmodified:
0000314E 0242 0007                  	andi.w	#7,d2					; Get the number of lines to scroll for the first block of lines
00003152 9842                       	sub.w	d2,d4
00003154 5044                       	addq.w	#8,d4
00003156 D442                       	add.w	d2,d2
00003158                            
00003158 301A                       	move.w	(a2)+,d0				; Start scrolling
0000315A 4EFB 2000                  	jmp	.ScrollBlock(pc,d2.w)
0000315E                            
0000315E                            .ScrollLoop:
0000315E 4A41                       	tst.w	d1					; Are we done scrolling?
00003160 6B00                       	bmi.s	.End					; If so, branch
00003162 B853                       	cmp.w	(a3),d4					; Is the background scrolled past the current water section?
00003164 6400                       	bcc.s	.FoundWaterSection			; If so, branch
00003166                            
00003166 5044                       	addq.w	#8,d4					; Scroll another block of lines
00003168 301A                       	move.w	(a2)+,d0
0000316A                            
0000316A                            .ScrollBlock:
0000316A                            	rept	8					; Scroll a block of 8 lines
0000316A                            		move.l	d0,(a1)+
0000316A 22C0 22C0 22C0 22C0 22C0+  	endr
0000317A 51C9 FFE2                  	dbf	d1,.ScrollLoop				; Loop until finished
0000317E                            
0000317E                            .End:
0000317E 4E75                       	rts
00003180                            
00003180                            .FoundWaterSection:
00003180 3A04                       	move.w	d4,d5					; Determine how deep we are into the section
00003182 9A53                       	sub.w	(a3),d5
00003184 3C2B 0002                  	move.w	2(a3),d6				; Get number of scanlines to scroll
00003188 9C45                       	sub.w	d5,d6
0000318A 6500                       	bcs.s	.SectOffscreen				; If the section is offscreen now, branch
0000318C 6700                       	beq.s	.NextSection
0000318E                            
0000318E 363C 00E0                  	move.w	#224,d3					; Get base water deformation speed
00003192 3038 F708                  	move.w	(v_cam_bg_x).w,d0
00003196 3438 F700                  	move.w	(v_cam_fg_x).w,d2
0000319A 9440                       	sub.w	d0,d2
0000319C 48C2                       	ext.l	d2
0000319E E182                       	asl.l	#8,d2
000031A0 85C3                       	divs.w	d3,d2
000031A2 48C2                       	ext.l	d2
000031A4 E182                       	asl.l	#8,d2
000031A6 7600                       	moveq	#0,d3
000031A8 3600                       	move.w	d0,d3
000031AA                            
000031AA 5345                       	subq.w	#1,d5					; Get number of scanlines in which the section is offscreen
000031AC 6B00                       	bmi.s	.GotStartWaterSpeed			; to help get the starting water deformation speed
000031AE                            
000031AE                            .GetStartWaterSpeed:
000031AE 3003                       	move.w	d3,d0					; Increment starting water deformation speed
000031B0 4843                       	swap	d3
000031B2 D682                       	add.l	d2,d3
000031B4 4843                       	swap	d3
000031B6 51CD FFF6                  	dbf	d5,.GetStartWaterSpeed			; Loop until we got it
000031BA                            
000031BA                            .GotStartWaterSpeed:
000031BA 3A06                       	move.w	d6,d5					; Decrement section size from scroll block count
000031BC E64D                       	lsr.w	#3,d5
000031BE 9245                       	sub.w	d5,d1
000031C0 6400                       	bcc.s	.StartWaterDeform			; If we still have some scroll blocks left over, branch
000031C2                            
000031C2 3A01                       	move.w	d1,d5					; Shrink the size of the section down to fit only up to the bottom of the screen
000031C4 4445                       	neg.w	d5
000031C6 E74D                       	lsl.w	#3,d5
000031C8 9C45                       	sub.w	d5,d6
000031CA 6700                       	beq.s	.NextSection				; If the size of the section shrinks down to 0 pixels, branch
000031CC                            
000031CC                            .StartWaterDeform:
000031CC 5346                       	subq.w	#1,d6					; Prepare section size
000031CE                            
000031CE                            .DoWaterDeform:
000031CE 3003                       	move.w	d3,d0					; Scroll line
000031D0 4440                       	neg.w	d0
000031D2 22C0                       	move.l	d0,(a1)+
000031D4                            
000031D4 4843                       	swap	d3					; Increment water deformation speed
000031D6 D682                       	add.l	d2,d3
000031D8 4843                       	swap	d3
000031DA                            
000031DA 5244                       	addq.w	#1,d4					; Next line
000031DC 3004                       	move.w	d4,d0
000031DE 0240 0007                  	andi.w	#7,d0					; Have we crossed a block?
000031E2 6600                       	bne.s	.NextLine				; If not, branch
000031E4 544A                       	addq.w	#2,a2					; Skip block in the deformation buffer
000031E6                            
000031E6                            .NextLine:
000031E6 51CE FFE6                  	dbf	d6,.DoWaterDeform			; Loop until section is scrolled
000031EA                            
000031EA                            .NextSection:
000031EA 584B                       	addq.w	#4,a3					; Next section
000031EC 6000 FF70                  	bra.w	.ScrollLoop				; Start scrolling regular blocks of lines again
000031F0                            
000031F0                            .SectOffscreen:
000031F0 584B                       	addq.w	#4,a3					; Next section
000031F2 3404                       	move.w	d4,d2					; Start scrolling regular blocks of lines again
000031F4 6000 FF58                  	bra.w	.ScrollUnmodified
000031F8                            
000031F8                            ; -------------------------------------------------------------------------------
000031F8                            ; Scroll the camera horizontally
000031F8                            ; -------------------------------------------------------------------------------
000031F8                            MoveCameraX:
000031F8                            ScrollCamX:
000031F8 3838 F700                  	move.w	(v_cam_fg_x).w,d4			; Handle camera movement
000031FC 6100                       	bsr.s	MoveScreenHoriz
000031FE                            
000031FE 3038 F700                  	move.w	(v_cam_fg_x).w,d0			; Check if a block has been crossed and set flags accordingly
00003202 0240 0010                  	andi.w	#$10,d0
00003206 1238 F74A                  	move.b	(v_horiz_blk_crossed_flag).w,d1
0000320A B300                       	eor.b	d1,d0
0000320C 6600                       	bne.s	.End
0000320E 0A38 0010 F74A             	eori.b	#$10,(v_horiz_blk_crossed_flag).w
00003214 3038 F700                  	move.w	(v_cam_fg_x).w,d0
00003218 9044                       	sub.w	d4,d0
0000321A 6A00                       	bpl.s	.Forward
0000321C 08F8 0002 F754             	bset	#2,(v_scroll_flags).w
00003222 4E75                       	rts
00003224                            
00003224                            .Forward:
00003224 08F8 0003 F754             	bset	#3,(v_scroll_flags).w
0000322A                            
0000322A                            .End:
0000322A 4E75                       	rts
0000322C                            
0000322C                            ; -------------------------------------------------------------------------------
0000322C                            
0000322C                            MoveScreenHoriz:
0000322C 3038 D008                  	move.w	(v_player+oX).w,d0			; Get the distance scrolled
00003230 9078 F700                  	sub.w	(v_cam_fg_x).w,d0
00003234 9078 F7A0                  	sub.w	(v_cam_x_center).w,d0
00003238 6700                       	beq.s	.AtDest					; If not scrolled at all, branch
0000323A 6500                       	bcs.s	MoveScreenHoriz_CamBehind		; If scrolled to the left, branch
0000323C 6000                       	bra.s	MoveScreenHoriz_CamAhead		; If scrolled to the right, branch
0000323E                            
0000323E                            .AtDest:
0000323E 4278 F73A                  	clr.w	(v_scroll_diff_x).w			; Didn't scroll at all
00003242 4E75                       	rts
00003244                            
00003244                            MoveScreenHoriz_CamAhead:
00003244 0C40 0010                  	cmpi.w	#16,d0					; Have we scrolled past 16 pixels?
00003248 6D00                       	blt.s	.CapSpeed				; If not, branch
0000324A 303C 0010                  	move.w	#16,d0					; Cap at 16 pixels
0000324E                            
0000324E                            .CapSpeed:
0000324E D078 F700                  	add.w	(v_cam_fg_x).w,d0			; Have we gone past the right boundary?
00003252 B078 F72A                  	cmp.w	(v_right_bound).w,d0
00003256 6D00                       	blt.s	MoveScreenHoriz_MoveCam			; If not, branch
00003258 3038 F72A                  	move.w	(v_right_bound).w,d0			; Cap at the right boundary
0000325C                            
0000325C                            MoveScreenHoriz_MoveCam:
0000325C 3200                       	move.w	d0,d1					; Update camera position
0000325E 9278 F700                  	sub.w	(v_cam_fg_x).w,d1
00003262 E141                       	asl.w	#8,d1
00003264 31C0 F700                  	move.w	d0,(v_cam_fg_x).w
00003268 31C1 F73A                  	move.w	d1,(v_scroll_diff_x).w			; Get scroll delta
0000326C 4E75                       	rts
0000326E                            
0000326E                            MoveScreenHoriz_CamBehind:
0000326E 0C40 FFF0                  	cmpi.w	#-16,d0					; Have we scrolled past 16 pixels?
00003272 6C00                       	bge.s	.CapSpeed				; If not, branch
00003274 303C FFF0                  	move.w	#-16,d0					; Cap at 16 pixels
00003278                            
00003278                            .CapSpeed:
00003278 D078 F700                  	add.w	(v_cam_fg_x).w,d0			; Have we gone past the left boundary?
0000327C B078 F728                  	cmp.w	(v_left_bound).w,d0
00003280 6EDA                       	bgt.s	MoveScreenHoriz_MoveCam			; If not, branch
00003282 3038 F728                  	move.w	(v_left_bound).w,d0			; Cap at the left boundary
00003286 60D4                       	bra.s	MoveScreenHoriz_MoveCam
00003288                            
00003288                            ; -------------------------------------------------------------------------------
00003288                            ; Shift the camera horizontally
00003288                            ; -------------------------------------------------------------------------------
00003288                            ; PARAMETERS:
00003288                            ;	d0.w	- Scroll direction
00003288                            ; -------------------------------------------------------------------------------
00003288                            
00003288                            ShiftCameraHoriz:
00003288 4A40                       	tst.w	d0					; Are we shifting to the right?
0000328A 6A00                       	bpl.s	.MoveRight				; If so, branch
0000328C 303C FFFE                  	move.w	#-2,d0					; Shift to the left
00003290 60DC                       	bra.s	MoveScreenHoriz_CamBehind
00003292                            
00003292                            .MoveRight:
00003292 303C 0002                  	move.w	#2,d0					; Shift to the right
00003296 60AC                       	bra.s	MoveScreenHoriz_CamAhead
00003298                            
00003298                            ; -------------------------------------------------------------------------------
00003298                            ; Scroll the camera vertically
00003298                            ; -------------------------------------------------------------------------------
00003298                            MoveCameraY:
00003298                            ScrollCamY:
00003298 7200                       	moveq	#0,d1					; Get how far we have scrolled vertically
0000329A 3038 D00C                  	move.w	(v_player+oY).w,d0
0000329E 9078 F704                  	sub.w	(v_cam_fg_y).w,d0
000032A2 0838 0002 D022             	btst	#2,(v_player+oStatus).w			; Is the player rolling?
000032A8 6700                       	beq.s	.NoRoll					; If not, branch
000032AA 5B40                       	subq.w	#5,d0					; Account for the different height
000032AC                            
000032AC                            .NoRoll:
000032AC 0838 0001 D022             	btst	#1,(v_player+oStatus).w			; Is the player in the air?
000032B2 6700                       	beq.s	.OnGround				; If not, branch
000032B4                            
000032B4 0640 0020                  	addi.w	#$20,d0
000032B8 9078 F73E                  	sub.w	(v_cam_y_center).w,d0
000032BC 6500                       	bcs.s	.DoScrollFast				; If the player is above the boundary, scroll to catch up
000032BE 0440 0040                  	subi.w	#$20*2,d0
000032C2 6400                       	bcc.s	.DoScrollFast				; If the player is below the boundary, scroll to catch up
000032C4                            
000032C4 4A38 F75C                  	tst.b	(v_btm_bound_shifting).w		; Is the bottom boundary shifting?
000032C8 6600                       	bne.s	.StopCam				; If it is, branch
000032CA 6000                       	bra.s	.DoNotScroll
000032CC                            
000032CC                            .OnGround:
000032CC 9078 F73E                  	sub.w	(v_cam_y_center).w,d0			; Subtract center position
000032D0 6600                       	bne.s	.CamMoving				; If the player has moved, scroll to catch up
000032D2 4A38 F75C                  	tst.b	(v_btm_bound_shifting).w		; Is the bottom boundary shifting?
000032D6 6600                       	bne.s	.StopCam				; If it is, branch
000032D8                            
000032D8                            .DoNotScroll:
000032D8 4278 F73C                  	clr.w	(v_scroll_diff_y).w			; Didn't scroll at all
000032DC 4E75                       	rts
000032DE                            
000032DE                            ; -------------------------------------------------------------------------------
000032DE                            
000032DE                            .CamMoving:
000032DE 0C78 0060 F73E             	cmpi.w	#$60,(v_cam_y_center).w			; Is the camera center normal?
000032E4 6600                       	bne.s	.DoScrollSlow				; If not, branch
000032E6 3238 D014                  	move.w	(v_player+oPlayerGVel).w,d1		; Get the player's ground velocity
000032EA 6A00                       	bpl.s	.DoScrollMedium
000032EC 4441                       	neg.w	d1
000032EE                            
000032EE                            .DoScrollMedium:
000032EE 0C41 0800                  	cmpi.w	#8<<8,d1				; Is the player moving very fast?
000032F2 6400                       	bcc.s	.DoScrollFast				; If they are, branch
000032F4 323C 0600                  	move.w	#6<<8,d1				; If the player is going too fast, cap the movement to 6 pixels/frame
000032F8 0C40 0006                  	cmpi.w	#6,d0					; Is the player going down too fast?
000032FC 6E00                       	bgt.s	.MovingDown				; If so, move the camera at the capped speed
000032FE 0C40 FFFA                  	cmpi.w	#-6,d0					; Is the player going up too fast?
00003302 6D00                       	blt.s	.MovingUp				; If so, move the camera at the capped speed
00003304 6000                       	bra.s	.GotCamSpeed				; Otherwise, move the camera at the player's speed
00003306                            
00003306                            .DoScrollSlow:
00003306 323C 0200                  	move.w	#2<<8,d1				; If the player is going too fast, cap the movement to 2 pixels/frame
0000330A 0C40 0002                  	cmpi.w	#2,d0					; Is the player going down too fast?
0000330E 6E00                       	bgt.s	.MovingDown				; If so, move the camera at the capped speed
00003310 0C40 FFFE                  	cmpi.w	#-2,d0					; Is the player going up too fast?
00003314 6D00                       	blt.s	.MovingUp				; If so, move the camera at the capped speed
00003316 6000                       	bra.s	.GotCamSpeed				; Otherwise, move the camera at the player's speed
00003318                            
00003318                            .DoScrollFast:
00003318 323C 1000                  	move.w	#16<<8,d1				; If the player is going too fast, cap the movement to 16 pixels/frame
0000331C 0C40 0010                  	cmpi.w	#16,d0					; Is the player going down too fast?
00003320 6E00                       	bgt.s	.MovingDown				; If so, move the camera at the capped speed
00003322 0C40 FFF0                  	cmpi.w	#-16,d0					; Is the player going up too fast?
00003326 6D00                       	blt.s	.MovingUp				; If so, move the camera at the capped speed
00003328 6000                       	bra.s	.GotCamSpeed				; Otherwise, move the camera at the player's speed
0000332A                            
0000332A                            ; -------------------------------------------------------------------------------
0000332A                            
0000332A                            .StopCam:
0000332A 7000                       	moveq	#0,d0					; Stop the camera
0000332C 11C0 F75C                  	move.b	d0,(v_btm_bound_shifting).w		; Clear bottom boundary shifting flag
00003330                            
00003330                            .GotCamSpeed:
00003330 7200                       	moveq	#0,d1
00003332 3200                       	move.w	d0,d1					; Get position difference
00003334 D278 F704                  	add.w	(v_cam_fg_y).w,d1			; Add old camera Y position
00003338 4A40                       	tst.w	d0					; Is the camera scrolling down?
0000333A 6A00 0000                  	bpl.w	.ChkBottom				; If so, branch
0000333E 6000 0000                  	bra.w	.ChkTop
00003342                            
00003342                            .MovingUp:
00003342 4441                       	neg.w	d1					; Make the value negative
00003344 48C1                       	ext.l	d1
00003346 E181                       	asl.l	#8,d1					; Move this into the upper word to align with the camera's Y position variable
00003348 D2B8 F704                  	add.l	(v_cam_fg_y).w,d1			; Shift the camera over
0000334C 4841                       	swap	d1					; Get the proper Y position
0000334E                            
0000334E                            .ChkTop:
0000334E B278 F72C                  	cmp.w	(v_top_bound).w,d1			; Is the new position past the top boundary?
00003352 6E00                       	bgt.s	.MoveCam				; If not, branch
00003354 0C41 FF00                  	cmpi.w	#-$100,d1				; Is Y wrapping enabled?
00003358 6E00                       	bgt.s	.CapTop					; If not, branch
0000335A 0241 07FF                  	andi.w	#$7FF,d1				; Apply wrapping
0000335E 0278 07FF D00C             	andi.w	#$7FF,(v_player+oY).w
00003364 0278 07FF F704             	andi.w	#$7FF,(v_cam_fg_y).w
0000336A 0278 03FF F70C             	andi.w	#$3FF,(v_cam_bg_y).w
00003370 6000                       	bra.s	.MoveCam
00003372                            
00003372                            ; -------------------------------------------------------------------------------
00003372                            
00003372                            .CapTop:
00003372 3238 F72C                  	move.w	(v_top_bound).w,d1			; Cap at the top boundary
00003376 6000                       	bra.s	.MoveCam
00003378                            
00003378                            .MovingDown:
00003378 48C1                       	ext.l	d1
0000337A E181                       	asl.l	#8,d1					; Move this into the upper word to align with the camera's Y position variable
0000337C D2B8 F704                  	add.l	(v_cam_fg_y).w,d1			; Shift the camera over
00003380 4841                       	swap	d1					; Get the proper Y position
00003382                            
00003382                            .ChkBottom:
00003382 B278 F72E                  	cmp.w	(v_bottom_bound).w,d1			; Is the new position past the bottom boundary?
00003386 6D00                       	blt.s	.MoveCam				; If not, branch
00003388 0441 0800                  	subi.w	#$800,d1				; Should we wrap?
0000338C 6500                       	bcs.s	.CapBottom				; If not, branch
0000338E 0278 07FF D00C             	andi.w	#$7FF,(v_player+oY).w			; Apply wrapping
00003394 0478 0800 F704             	subi.w	#$800,(v_cam_fg_y).w
0000339A 0278 03FF F70C             	andi.w	#$3FF,(v_cam_bg_y).w
000033A0 6000                       	bra.s	.MoveCam
000033A2                            
000033A2                            ; -------------------------------------------------------------------------------
000033A2                            
000033A2                            .CapBottom:
000033A2 3238 F72E                  	move.w	(v_bottom_bound).w,d1			; Cap at the bottom boundary
000033A6                            
000033A6                            .MoveCam:
000033A6 3838 F704                  	move.w	(v_cam_fg_y).w,d4			; Update the camera position and get the scroll delta
000033AA 4841                       	swap	d1
000033AC 2601                       	move.l	d1,d3
000033AE 96B8 F704                  	sub.l	(v_cam_fg_y).w,d3
000033B2 E09B                       	ror.l	#8,d3
000033B4 31C3 F73C                  	move.w	d3,(v_scroll_diff_y).w
000033B8 21C1 F704                  	move.l	d1,(v_cam_fg_y).w
000033BC                            
000033BC 3038 F704                  	move.w	(v_cam_fg_y).w,d0			; Check if a block has been crossed and set flags accordingly
000033C0 0240 0010                  	andi.w	#$10,d0
000033C4 1238 F74B                  	move.b	(v_verti_blk_crossed_flag).w,d1
000033C8 B300                       	eor.b	d1,d0
000033CA 6600                       	bne.s	.End
000033CC 0A38 0010 F74B             	eori.b	#$10,(v_verti_blk_crossed_flag).w
000033D2 3038 F704                  	move.w	(v_cam_fg_y).w,d0
000033D6 9044                       	sub.w	d4,d0
000033D8 6A00                       	bpl.s	.Downward
000033DA 08F8 0000 F754             	bset	#0,(v_scroll_flags).w
000033E0 4E75                       	rts
000033E2                            
000033E2                            .Downward:
000033E2 08F8 0001 F754             	bset	#1,(v_scroll_flags).w
000033E8                            
000033E8                            .End:
000033E8 4E75                       	rts
000033EA                            
000033EA                            ; -------------------------------------------------------------------------------
000033EA                            ; Set scroll flags for the background while scrolling the position
000033EA                            ; -------------------------------------------------------------------------------
000033EA                            ; PARAMETERS:
000033EA                            ;	d4.w	- X scroll offset
000033EA                            ;	d5.w	- Y scroll offset
000033EA                            ; -------------------------------------------------------------------------------
000033EA                            
000033EA                            SetScrollFlagsBG:
000033EA 2438 F708                  	move.l	(v_cam_bg_x).w,d2			; Scroll horizontally
000033EE 2002                       	move.l	d2,d0
000033F0 D084                       	add.l	d4,d0
000033F2 21C0 F708                  	move.l	d0,(v_cam_bg_x).w
000033F6                            
000033F6 2200                       	move.l	d0,d1					; Check if a block has been crossed and set flags accordingly
000033F8 4841                       	swap	d1
000033FA 0241 0010                  	andi.w	#$10,d1
000033FE 1638 F74C                  	move.b	(v_horiz_blk_cross_flag_bg).w,d3
00003402 B701                       	eor.b	d3,d1
00003404 6600                       	bne.s	.ChkY
00003406 0A38 0010 F74C             	eori.b	#$10,(v_horiz_blk_cross_flag_bg).w
0000340C 9082                       	sub.l	d2,d0
0000340E 6A00                       	bpl.s	.MoveRight
00003410 08F8 0002 F756             	bset	#2,(v_scroll_flags_bg).w
00003416 6000                       	bra.s	.ChkY
00003418                            
00003418                            .MoveRight:
00003418 08F8 0003 F756             	bset	#3,(v_scroll_flags_bg).w
0000341E                            
0000341E                            ; -------------------------------------------------------------------------------
0000341E                            
0000341E                            .ChkY:
0000341E 2638 F70C                  	move.l	(v_cam_bg_y).w,d3			; Scroll vertically
00003422 2003                       	move.l	d3,d0
00003424 D085                       	add.l	d5,d0
00003426 21C0 F70C                  	move.l	d0,(v_cam_bg_y).w
0000342A                            
0000342A 2200                       	move.l	d0,d1					; Check if a block has been crossed and set flags accordingly
0000342C 4841                       	swap	d1
0000342E 0241 0010                  	andi.w	#$10,d1
00003432 1438 F74D                  	move.b	(v_verti_blk_cross_flag_bg).w,d2
00003436 B501                       	eor.b	d2,d1
00003438 6600                       	bne.s	.End
0000343A 0A38 0010 F74D             	eori.b	#$10,(v_verti_blk_cross_flag_bg).w
00003440 9083                       	sub.l	d3,d0
00003442 6A00                       	bpl.s	.MoveDown
00003444 08F8 0000 F756             	bset	#0,(v_scroll_flags_bg).w
0000344A 4E75                       	rts
0000344C                            
0000344C                            .MoveDown:
0000344C 08F8 0001 F756             	bset	#1,(v_scroll_flags_bg).w
00003452                            
00003452                            .End:
00003452 4E75                       	rts
00003454                            
00003454                            ; -------------------------------------------------------------------------------
00003454                            ; Set vertical scroll flags for the background camera while scrolling the
00003454                            ; position
00003454                            ; -------------------------------------------------------------------------------
00003454                            ; PARAMETERS:
00003454                            ;	d5.w	- Y scroll offset
00003454                            ; -------------------------------------------------------------------------------
00003454                            
00003454                            SetVertiScrollFlagsBG:
00003454 2638 F70C                  	move.l	(v_cam_bg_y).w,d3			; Scroll vertically
00003458 2003                       	move.l	d3,d0
0000345A D085                       	add.l	d5,d0
0000345C 21C0 F70C                  	move.l	d0,(v_cam_bg_y).w
00003460                            
00003460 2200                       	move.l	d0,d1					; Check if a block has been crossed and set flags accordingly
00003462 4841                       	swap	d1
00003464 0241 0010                  	andi.w	#$10,d1
00003468 1438 F74D                  	move.b	(v_verti_blk_cross_flag_bg).w,d2
0000346C B501                       	eor.b	d2,d1
0000346E 6600                       	bne.s	.End
00003470 0A38 0010 F74D             	eori.b	#$10,(v_verti_blk_cross_flag_bg).w
00003476 9083                       	sub.l	d3,d0
00003478 6A00                       	bpl.s	.MoveDown
0000347A 08F8 0004 F756             	bset	#4,(v_scroll_flags_bg).w
00003480 4E75                       	rts
00003482                            
00003482                            .MoveDown:
00003482 08F8 0005 F756             	bset	#5,(v_scroll_flags_bg).w
00003488                            
00003488                            .End:
00003488 4E75                       	rts
0000348A                            
0000348A                            ; -------------------------------------------------------------------------------
0000348A                            ; Set vertical scroll flags for the background camera while setting the
0000348A                            ; position directly
0000348A                            ; -------------------------------------------------------------------------------
0000348A                            ; PARAMETERS:
0000348A                            ;	d0.w	- New Y position
0000348A                            ; -------------------------------------------------------------------------------
0000348A                            
0000348A                            SetVertiScrollFlagsBG2:
0000348A 3638 F70C                  	move.w	(v_cam_bg_y).w,d3			; Set new position
0000348E 31C0 F70C                  	move.w	d0,(v_cam_bg_y).w
00003492                            
00003492 3200                       	move.w	d0,d1					; Check if a block has been crossed and set flags accordingly
00003494 0241 0010                  	andi.w	#$10,d1
00003498 1438 F74D                  	move.b	(v_verti_blk_cross_flag_bg).w,d2
0000349C B501                       	eor.b	d2,d1
0000349E 6600                       	bne.s	.End
000034A0 0A38 0010 F74D             	eori.b	#$10,(v_verti_blk_cross_flag_bg).w
000034A6 9043                       	sub.w	d3,d0
000034A8 6A00                       	bpl.s	.MoveDown
000034AA 08F8 0000 F756             	bset	#0,(v_scroll_flags_bg).w
000034B0 4E75                       	rts
000034B2                            
000034B2                            .MoveDown:
000034B2 08F8 0001 F756             	bset	#1,(v_scroll_flags_bg).w
000034B8                            
000034B8                            .End:
000034B8 4E75                       	rts
000034BA                            
000034BA                            ; -------------------------------------------------------------------------------
000034BA                            ; Set horizontal scroll flags for the background camera while scrolling the
000034BA                            ; position
000034BA                            ; -------------------------------------------------------------------------------
000034BA                            ; PARAMETERS:
000034BA                            ;	d4.w	- X scroll offset
000034BA                            ;	d6.b	- Base scroll flag bit
000034BA                            ; -------------------------------------------------------------------------------
000034BA                            
000034BA                            SetHorizScrollFlagsBG:
000034BA 2438 F708                  	move.l	(v_cam_bg_x).w,d2			; Scroll horizontally
000034BE 2002                       	move.l	d2,d0
000034C0 D084                       	add.l	d4,d0
000034C2 21C0 F708                  	move.l	d0,(v_cam_bg_x).w
000034C6                            
000034C6 2200                       	move.l	d0,d1					; Check if a block has been crossed and set flags accordingly
000034C8 4841                       	swap	d1
000034CA 0241 0010                  	andi.w	#$10,d1
000034CE 1638 F74C                  	move.b	(v_horiz_blk_cross_flag_bg).w,d3
000034D2 B701                       	eor.b	d3,d1
000034D4 6600                       	bne.s	.End
000034D6 0A38 0010 F74C             	eori.b	#$10,(v_horiz_blk_cross_flag_bg).w
000034DC 9082                       	sub.l	d2,d0
000034DE 6A00                       	bpl.s	.MoveRight
000034E0 0DF8 F756                  	bset	d6,(v_scroll_flags_bg).w
000034E4 6000                       	bra.s	.End
000034E6                            
000034E6                            .MoveRight:
000034E6 5206                       	addq.b	#1,d6
000034E8 0DF8 F756                  	bset	d6,(v_scroll_flags_bg).w
000034EC                            
000034EC                            .End:
000034EC 4E75                       	rts
000034EE                            
000034EE                            ; -------------------------------------------------------------------------------
000034EE                            ; Set horizontal scroll flags for the background camera #2 while scrolling the
000034EE                            ; position
000034EE                            ; -------------------------------------------------------------------------------
000034EE                            ; PARAMETERS:
000034EE                            ;	d4.w	- X scroll offset
000034EE                            ;	d6.b	- Base scroll flag bit
000034EE                            ; -------------------------------------------------------------------------------
000034EE                            SetHScrollFlagsBG2:
000034EE                            SetHorizScrollFlagsBG2:
000034EE 2438 F710                  	move.l	(v_cam_bg2_x).w,d2			; Scroll horizontally
000034F2 2002                       	move.l	d2,d0
000034F4 D084                       	add.l	d4,d0
000034F6 21C0 F710                  	move.l	d0,(v_cam_bg2_x).w
000034FA                            
000034FA 2200                       	move.l	d0,d1					; Check if a block has been crossed and set flags accordingly
000034FC 4841                       	swap	d1
000034FE 0241 0010                  	andi.w	#$10,d1
00003502 1638 F74E                  	move.b	(v_horiz_blk_cross_flag_bg2).w,d3
00003506 B701                       	eor.b	d3,d1
00003508 6600                       	bne.s	.End
0000350A 0A38 0010 F74E             	eori.b	#$10,(v_horiz_blk_cross_flag_bg2).w
00003510 9082                       	sub.l	d2,d0
00003512 6A00                       	bpl.s	.MoveRight
00003514 0DF8 F758                  	bset	d6,(v_scroll_flags_bg2).w
00003518 6000                       	bra.s	.End
0000351A                            
0000351A                            
0000351A                            .MoveRight:
0000351A 5206                       	addq.b	#1,d6
0000351C 0DF8 F758                  	bset	d6,(v_scroll_flags_bg2).w
00003520                            
00003520                            .End:
00003520 4E75                       	rts
00003522                            
00003522                            ; -------------------------------------------------------------------------------
00003522                            ; Set horizontal scroll flags for the background camera #3 while scrolling the
00003522                            ; position
00003522                            ; -------------------------------------------------------------------------------
00003522                            ; PARAMETERS:
00003522                            ;	d4.w	- X scroll offset
00003522                            ;	d6.b	- Base scroll flag bit
00003522                            ; -------------------------------------------------------------------------------
00003522                            SetHScrollFlagsBG3:
00003522                            SetHorizScrollFlagsBG3:
00003522 2438 F718                  	move.l	(v_cam_bg3_x).w,d2			; Scroll horizontally
00003526 2002                       	move.l	d2,d0
00003528 D084                       	add.l	d4,d0
0000352A 21C0 F718                  	move.l	d0,(v_cam_bg3_x).w
0000352E                            
0000352E 2200                       	move.l	d0,d1					; Check if a block has been crossed and set flags accordingly
00003530 4841                       	swap	d1
00003532 0241 0010                  	andi.w	#$10,d1
00003536 1638 F750                  	move.b	(v_horiz_blk_cross_flag_bg3).w,d3
0000353A B701                       	eor.b	d3,d1
0000353C 6600                       	bne.s	.End
0000353E 0A38 0010 F750             	eori.b	#$10,(v_horiz_blk_cross_flag_bg3).w
00003544 9082                       	sub.l	d2,d0
00003546 6A00                       	bpl.s	.MoveRight
00003548 0DF8 F75A                  	bset	d6,(v_scroll_flags_bg3).w
0000354C 6000                       	bra.s	.End
0000354E                            
0000354E                            .MoveRight:
0000354E 5206                       	addq.b	#1,d6
00003550 0DF8 F75A                  	bset	d6,(v_scroll_flags_bg3).w
00003554                            
00003554                            .End:
00003554 4E75                       	rts
00003556                            
00003556                            ; -------------------------------------------------------------------------------
00003556                            ; Update level background drawing
00003556                            ; -------------------------------------------------------------------------------
00003556                            
00003556                            LevelDraw_UpdateBG:
00003556 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; Prepare VDP ports
0000355C 4DF9 00C0 0000             	lea	(VDP_DATA).l,a6
00003562                            
00003562 45F8 F756                  	lea	(v_scroll_flags_bg).w,a2		; Update background section 1
00003566 47F8 F708                  	lea	(v_cam_bg_x).w,a3
0000356A 49F8 A040                  	lea	(v_lvl_layout+$40).w,a4
0000356E 343C 6000                  	move.w	#$6000,d2
00003572 6100 0000                  	bsr.w	DrawLevelBG1
00003576                            
00003576 45F8 F758                  	lea	(v_scroll_flags_bg2).w,a2		; Update background section 2
0000357A 47F8 F710                  	lea	(v_cam_bg2_x).w,a3
0000357E 6000 0000                  	bra.w	DrawLevelBG2
00003582                            
00003582                            ; -------------------------------------------------------------------------------
00003582                            ; Update level drawing
00003582                            ; -------------------------------------------------------------------------------
00003582                            
00003582                            LevelDraw_Update:
00003582 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; Prepare VDP ports
00003588 4DF9 00C0 0000             	lea	(VDP_DATA).l,a6
0000358E                            
0000358E 45F9 00FF 1948             	lea	(v_scroll_flags_copy+2).l,a2		; Update background
00003594 47F9 00FF 192E             	lea	(v_cam_x_bg_copy).l,a3
0000359A 49F8 A040                  	lea	(v_lvl_layout+$40).w,a4
0000359E 343C 6000                  	move.w	#$6000,d2
000035A2 6100 0000                  	bsr.w	DrawLevelBG1
000035A6                            
000035A6 45F9 00FF 1946             	lea	(v_scroll_flags_copy).l,a2		; Update foreground
000035AC 47F9 00FF 1926             	lea	(v_cam_x_fg_copy).l,a3
000035B2 49F8 A000                  	lea	(v_lvl_layout).w,a4
000035B6 343C 4000                  	move.w	#$4000,d2
000035BA                            
000035BA                            ; -------------------------------------------------------------------------------
000035BA                            ; Draw foreground
000035BA                            ; -------------------------------------------------------------------------------
000035BA                            ; PARAMETERS:
000035BA                            ;	d2.w	- Base high VDP write command
000035BA                            ;	a2.l	- Scroll flags pointer
000035BA                            ;	a3.l	- Camera position pointer
000035BA                            ;	a4.l	- Layout data pointer
000035BA                            ;	a5.l	- VDP control port
000035BA                            ;	a6.l	- VDP data port
000035BA                            ; -------------------------------------------------------------------------------
000035BA                            
000035BA                            DrawLevelFG:
000035BA 4A12                       	tst.b	(a2)					; Are any scroll flags set?
000035BC 6700                       	beq.s	.End					; If not, branch
000035BE                            
000035BE 0892 0000                  	bclr	#0,(a2)					; Should we draw a row at the top?
000035C2 6700                       	beq.s	.ChkBottomRow				; If not, branch
000035C4 78F0                       	moveq	#-16,d4					; Draw a row at (-16, -16)
000035C6 7AF0                       	moveq	#-16,d5
000035C8 6100 0000                  	bsr.w	GetBlockVDPCmd
000035CC 78F0                       	moveq	#-16,d4
000035CE 7AF0                       	moveq	#-16,d5
000035D0 6100 0000                  	bsr.w	DrawBlockRow
000035D4                            
000035D4                            .ChkBottomRow:
000035D4 0892 0001                  	bclr	#1,(a2)					; Should we draw a row at the bottom?
000035D8 6700                       	beq.s	.ChkLeftCol				; If not, branch
000035DA 383C 00E0                  	move.w	#224,d4					; Draw a row at (-16, 224)
000035DE 7AF0                       	moveq	#-16,d5
000035E0 6100 0000                  	bsr.w	GetBlockVDPCmd
000035E4 383C 00E0                  	move.w	#224,d4
000035E8 7AF0                       	moveq	#-16,d5
000035EA 6100 0000                  	bsr.w	DrawBlockRow
000035EE                            
000035EE                            .ChkLeftCol:
000035EE 0892 0002                  	bclr	#2,(a2)					; Should we draw a column on the left?
000035F2 6700                       	beq.s	.ChkRightCol				; If not, branch
000035F4 78F0                       	moveq	#-16,d4					; Draw a column at (-16, -16)
000035F6 7AF0                       	moveq	#-16,d5
000035F8 6100 0000                  	bsr.w	GetBlockVDPCmd
000035FC 78F0                       	moveq	#-16,d4
000035FE 7AF0                       	moveq	#-16,d5
00003600 6100 0000                  	bsr.w	DrawBlockCol
00003604                            
00003604                            .ChkRightCol:
00003604 0892 0003                  	bclr	#3,(a2)					; Should we draw a column on the right?
00003608 6700                       	beq.s	.End					; If not, branch
0000360A 78F0                       	moveq	#-16,d4					; Draw a column at (320, -16)
0000360C 3A3C 0140                  	move.w	#320,d5
00003610 6100 0000                  	bsr.w	GetBlockVDPCmd
00003614 78F0                       	moveq	#-16,d4
00003616 3A3C 0140                  	move.w	#320,d5
0000361A 6100 0000                  	bsr.w	DrawBlockCol
0000361E                            
0000361E                            .End:
0000361E 4E75                       	rts
00003620                            
00003620                            ; -------------------------------------------------------------------------------
00003620                            ; Draw background section #1
00003620                            ; -------------------------------------------------------------------------------
00003620                            ; PARAMETERS:
00003620                            ;	d2.w	- Base high VDP write command
00003620                            ;	a2.l	- Scroll flags pointer
00003620                            ;	a3.l	- Camera position pointer
00003620                            ;	a4.l	- Layout data pointer
00003620                            ;	a5.l	- VDP control port
00003620                            ;	a6.l	- VDP data port
00003620                            ; -------------------------------------------------------------------------------
00003620                            
00003620                            DrawLevelBG1:
00003620 41F9 0000 0000             	lea	(BGCameraSectIDs).l,a0			; Prepare background section camera IDs
00003626 D0FC 0001                  	adda.w	#1,a0
0000362A                            
0000362A 78F0                       	moveq	#-$10,d4				; Prepare to draw a row at the top
0000362C                            
0000362C 0892 0000                  	bclr	#0,(a2)					; Should we draw a row at the top?
00003630 6600                       	bne.s	.GotRowPos				; If so, branch
00003632 0892 0001                  	bclr	#1,(a2)					; Should we draw a row at the bottom?
00003636 6700                       	beq.s	.ChkHorizScroll				; If not, branch
00003638                            
00003638 383C 00E0                  	move.w	#224,d4					; Prepare to draw a row at the bottom
0000363C                            
0000363C                            .GotRowPos:
0000363C 3038 F70C                  	move.w	(v_cam_bg_y).w,d0			; Get which camera the current block section is using
00003640 D044                       	add.w	d4,d0
00003642 0240 FFF0                  	andi.w	#$FFF0,d0
00003646 E840                       	asr.w	#4,d0
00003648 1030 0000                  	move.b	(a0,d0.w),d0
0000364C 4880                       	ext.w	d0
0000364E D040                       	add.w	d0,d0
00003650 267B 0000                  	movea.l	.CameraSects(pc,d0.w),a3
00003654 6700                       	beq.s	.StaticRow				; If it's a statically drawn row of blocks, branch
00003656                            
00003656 7AF0                       	moveq	#-$10,d5				; Draw a row of blocks
00003658 2F08                       	move.l	a0,-(sp)
0000365A 48E7 0C00                  	movem.l	d4-d5,-(sp)
0000365E 6100 0000                  	bsr.w	GetBlockVDPCmd
00003662 4CDF 0030                  	movem.l	(sp)+,d4-d5
00003666 6100 0000                  	bsr.w	DrawBlockRow
0000366A 205F                       	movea.l	(sp)+,a0
0000366C                            
0000366C 6000                       	bra.s	.ChkHorizScroll
0000366E                            
0000366E                            .StaticRow:
0000366E 7A00                       	moveq	#0,d5					; Draw a full statically drawn row of blocks
00003670 2F08                       	move.l	a0,-(sp)
00003672 48E7 0C00                  	movem.l	d4-d5,-(sp)
00003676 6100 0000                  	bsr.w	GetBlockVDPCmdAbsX
0000367A 4CDF 0030                  	movem.l	(sp)+,d4-d5
0000367E 7C1F                       	moveq	#(512/16)-1,d6
00003680 6100 0000                  	bsr.w	DrawBlockRowAbsX
00003684 205F                       	movea.l	(sp)+,a0
00003686                            
00003686                            .ChkHorizScroll:
00003686 4A12                       	tst.b	(a2)					; Did the screen background horizontally at all?
00003688 6600                       	bne.s	.DidScrollHoriz				; If so, branch
0000368A 4E75                       	rts
0000368C                            
0000368C                            .DidScrollHoriz:
0000368C 78F0                       	moveq	#-$10,d4				; Prepare to draw a column on the left
0000368E 7AF0                       	moveq	#-$10,d5
00003690 1012                       	move.b	(a2),d0					; Should we draw a column on the right?
00003692 0200 00A8                  	andi.b	#%10101000,d0
00003696 6700                       	beq.s	.GotScrollDir				; If not, branch
00003698 E208                       	lsr.b	#1,d0					; Shift scroll flags to fit camera ID array later on
0000369A 1480                       	move.b	d0,(a2)
0000369C 3A3C 0140                  	move.w	#320,d5					; Prepare to draw a column on the right
000036A0                            
000036A0                            .GotScrollDir:
000036A0 3038 F70C                  	move.w	(v_cam_bg_y).w,d0			; Prepare background section camera ID array
000036A4 0240 FFF0                  	andi.w	#$FFF0,d0
000036A8 E840                       	asr.w	#4,d0
000036AA 90FC 0001                  	suba.w	#1,a0
000036AE 41F0 0000                  	lea	(a0,d0.w),a0
000036B2                            
000036B2 6000 0000                  	bra.w	.DrawColumn
000036B6                            
000036B6                            ; -------------------------------------------------------------------------------
000036B6                            
000036B6                            .CameraSects:
000036B6 00FF 192E                  	dc.l	v_cam_x_bg_copy				; BG1 (static)
000036BA 00FF 192E                  	dc.l	v_cam_x_bg_copy				; BG1 (dynamic)
000036BE 00FF 1936                  	dc.l	v_cam_x_bg2_copy			; BG2 (dynamic)
000036C2 00FF 193E                  	dc.l	v_cam_x_bg3_copy			; BG3 (dynamic)
000036C6                            
000036C6                            ; -------------------------------------------------------------------------------
000036C6                            
000036C6                            .DrawColumn:
000036C6 7C0F                       	moveq	#((224+(16*2))/16)-1,d6			; 16 blocks in a column
000036C8 2E3C 0080 0000             	move.l	#$800000,d7				; VDP command row delta
000036CE                            
000036CE                            .Loop:
000036CE 7000                       	moveq	#0,d0					; Get camera ID for this block section
000036D0 1018                       	move.b	(a0)+,d0
000036D2 6700                       	beq.s	.NextBlock				; If this is a static row of blocks, branch
000036D4 0112                       	btst	d0,(a2)					; Has this block section scrolled enough to warrant a new block to be drawn?
000036D6 6700                       	beq.s	.NextBlock				; If not, branch
000036D8                            
000036D8 D040                       	add.w	d0,d0					; Draw a block
000036DA 267B 00DA                  	movea.l	.CameraSects(pc,d0.w),a3
000036DE 48E7 0C80                  	movem.l	d4-d5/a0,-(sp)
000036E2 48E7 0C00                  	movem.l	d4-d5,-(sp)
000036E6 6100 0000                  	bsr.w	GetBlockData
000036EA 4CDF 0030                  	movem.l	(sp)+,d4-d5
000036EE 6100 0000                  	bsr.w	GetBlockVDPCmd
000036F2 6100 0000                  	bsr.w	DrawBlock
000036F6 4CDF 0130                  	movem.l	(sp)+,d4-d5/a0
000036FA                            
000036FA                            .NextBlock:
000036FA 0644 0010                  	addi.w	#16,d4					; Shift down
000036FE 51CE FFCE                  	dbf	d6,.Loop				; Loop until finished
00003702                            
00003702 4212                       	clr.b	(a2)					; Clear scroll flags
00003704 4E75                       	rts
00003706                            
00003706                            ; -------------------------------------------------------------------------------
00003706                            ; Draw background section #2 (unused)
00003706                            ; -------------------------------------------------------------------------------
00003706                            ; PARAMETERS:
00003706                            ;	d2.w	- Base high VDP write command
00003706                            ;	a2.l	- Scroll flags pointer
00003706                            ;	a3.l	- Camera position pointer
00003706                            ;	a4.l	- Layout data pointer
00003706                            ;	a5.l	- VDP control port
00003706                            ;	a6.l	- VDP data port
00003706                            ; -------------------------------------------------------------------------------
00003706                            
00003706                            DrawLevelBG2:
00003706 4E75                       	rts
00003708                            
00003708                            ; -------------------------------------------------------------------------------
00003708                            ; Draw background section #3 (unused)
00003708                            ; -------------------------------------------------------------------------------
00003708                            ; PARAMETERS:
00003708                            ;	d2.w	- Base high VDP write command
00003708                            ;	a2.l	- Scroll flags pointer
00003708                            ;	a3.l	- Camera position pointer
00003708                            ;	a4.l	- Layout data pointer
00003708                            ;	a5.l	- VDP control port
00003708                            ;	a6.l	- VDP data port
00003708                            ; -------------------------------------------------------------------------------
00003708                            
00003708                            DrawLevelBG3:
00003708 4E75                       	rts
0000370A                            
0000370A                            ; -------------------------------------------------------------------------------
0000370A                            ; Draw a row of blocks
0000370A                            ; -------------------------------------------------------------------------------
0000370A                            ; PARAMETERS:
0000370A                            ;	d0.l	- Swapped VDP write command
0000370A                            ;	d4.w	- Y position
0000370A                            ;	d5.w	- X position
0000370A                            ;	a3.l	- Camera position pointer
0000370A                            ;	a4.l	- Layout data pointer
0000370A                            ;	a5.l	- VDP control port
0000370A                            ;	a6.l	- VDP data port
0000370A                            ; -------------------------------------------------------------------------------
0000370A                            
0000370A                            DrawBlockRow:
0000370A 7C15                       	moveq	#((320+(16*2))/16)-1,d6			; 22 blocks in a row
0000370C                            
0000370C                            DrawBlockRow2:
0000370C 2E3C 0080 0000             	move.l	#$800000,d7				; VDP command row delta
00003712 2200                       	move.l	d0,d1					; Copy VDP command
00003714                            
00003714                            .Loop:
00003714 48E7 0C00                  	movem.l	d4-d5,-(sp)				; Draw a block
00003718 6100 0000                  	bsr.w	GetBlockData
0000371C 2001                       	move.l	d1,d0
0000371E 6100 0000                  	bsr.w	DrawBlock
00003722 5801                       	addq.b	#4,d1					; Set up VDP command for next block
00003724 0201 007F                  	andi.b	#$7F,d1
00003728 4CDF 0030                  	movem.l	(sp)+,d4-d5
0000372C                            
0000372C 0645 0010                  	addi.w	#16,d5					; Move right
00003730 51CE FFE2                  	dbf	d6,.Loop				; Loop until finished
00003734                            
00003734 4E75                       	rts
00003736                            
00003736                            ; -------------------------------------------------------------------------------
00003736                            ; Draw a static row of blocks
00003736                            ; -------------------------------------------------------------------------------
00003736                            ; PARAMETERS:
00003736                            ;	d0.l	- Swapped VDP write command
00003736                            ;	d4.w	- Y position
00003736                            ;	d5.w	- X position
00003736                            ;	a3.l	- Camera position pointer
00003736                            ;	a4.l	- Layout data pointer
00003736                            ;	a5.l	- VDP control port
00003736                            ;	a6.l	- VDP data port
00003736                            ; -------------------------------------------------------------------------------
00003736                            
00003736                            DrawBlockRowAbsX:
00003736 2E3C 0080 0000             	move.l	#$800000,d7				; VDP command row delta
0000373C 2200                       	move.l	d0,d1					; Copy VDP command
0000373E                            
0000373E                            .Draw:
0000373E 48E7 0C00                  	movem.l	d4-d5,-(sp)				; Draw a block
00003742 6100 0000                  	bsr.w	GetBlockDataAbsX
00003746 2001                       	move.l	d1,d0
00003748 6100 0000                  	bsr.w	DrawBlock
0000374C 5801                       	addq.b	#4,d1					; Set up VDP command for next block
0000374E 0201 007F                  	andi.b	#$7F,d1
00003752 4CDF 0030                  	movem.l	(sp)+,d4-d5
00003756                            
00003756 0645 0010                  	addi.w	#16,d5					; Move right
0000375A 51CE FFE2                  	dbf	d6,.Draw				; Loop until finished
0000375E                            
0000375E 4E75                       	rts
00003760                            
00003760                            ; -------------------------------------------------------------------------------
00003760                            ; Draw a column of blocks
00003760                            ; -------------------------------------------------------------------------------
00003760                            ; PARAMETERS:
00003760                            ;	d0.l	- Swapped VDP write command
00003760                            ;	d4.w	- Y position
00003760                            ;	d5.w	- X position
00003760                            ;	a3.l	- Camera position pointer
00003760                            ;	a4.l	- Layout data pointer
00003760                            ;	a5.l	- VDP control port
00003760                            ;	a6.l	- VDP data port
00003760                            ; -------------------------------------------------------------------------------
00003760                            
00003760                            DrawBlockCol:
00003760 7C0F                       	moveq	#((224+(16*2))/16)-1,d6			; 16 blocks in a column
00003762 2E3C 0080 0000             	move.l	#$800000,d7				; VDP command row delta
00003768 2200                       	move.l	d0,d1					; Copy VDP command
0000376A                            
0000376A                            .Draw:
0000376A 48E7 0C00                  	movem.l	d4-d5,-(sp)				; Draw a block
0000376E 6100 0000                  	bsr.w	GetBlockData
00003772 2001                       	move.l	d1,d0
00003774 6100 0000                  	bsr.w	DrawBlock
00003778 0641 0100                  	addi.w	#$100,d1				; Set up VDP command for next block
0000377C 0241 0FFF                  	andi.w	#$FFF,d1
00003780 4CDF 0030                  	movem.l	(sp)+,d4-d5
00003784                            
00003784 0644 0010                  	addi.w	#16,d4					; Move down
00003788 51CE FFE0                  	dbf	d6,.Draw				; Loop until finished
0000378C                            
0000378C 4E75                       	rts
0000378E                            
0000378E                            ; -------------------------------------------------------------------------------
0000378E                            ; Draw a block
0000378E                            ; -------------------------------------------------------------------------------
0000378E                            ; PARAMETERS:
0000378E                            ;	d0.l	- Swapped VDP write command
0000378E                            ;	d4.w	- Y position
0000378E                            ;	d5.w	- X position
0000378E                            ;	a0.l	- Block metadata pointer
0000378E                            ;	a1.l	- Block data pointer
0000378E                            ;	a5.l	- VDP control port
0000378E                            ;	a6.l	- VDP data port
0000378E                            ; -------------------------------------------------------------------------------
0000378E                            
0000378E                            DrawBlock:
0000378E 8042                       	or.w	d2,d0					; Add base high VDP word
00003790 4840                       	swap	d0
00003792                            
00003792 0810 0004                  	btst	#4,(a0)					; Is this block flipped vertically?
00003796 6600                       	bne.s	.FlipY					; If so, branch
00003798 0810 0003                  	btst	#3,(a0)					; Is this block flipped horizontally?
0000379C 6600                       	bne.s	.FlipX					; If so, branch
0000379E                            
0000379E 2A80                       	move.l	d0,(a5)					; Draw a block
000037A0 2C99                       	move.l	(a1)+,(a6)
000037A2 D087                       	add.l	d7,d0
000037A4 2A80                       	move.l	d0,(a5)
000037A6 2C99                       	move.l	(a1)+,(a6)
000037A8 4E75                       	rts
000037AA                            
000037AA                            ; -------------------------------------------------------------------------------
000037AA                            
000037AA                            .FlipX:
000037AA 2A80                       	move.l	d0,(a5)					; Draw a block (flipped horizontally)
000037AC 2819                       	move.l	(a1)+,d4
000037AE 0A84 0800 0800             	eori.l	#$8000800,d4
000037B4 4844                       	swap	d4
000037B6 2C84                       	move.l	d4,(a6)
000037B8 D087                       	add.l	d7,d0
000037BA 2A80                       	move.l	d0,(a5)
000037BC 2819                       	move.l	(a1)+,d4
000037BE 0A84 0800 0800             	eori.l	#$8000800,d4
000037C4 4844                       	swap	d4
000037C6 2C84                       	move.l	d4,(a6)
000037C8 4E75                       	rts
000037CA                            
000037CA                            ; -------------------------------------------------------------------------------
000037CA                            
000037CA                            .FlipY:
000037CA 0810 0003                  	btst	#3,(a0)					; Is this block flipped horizontally?
000037CE 6600                       	bne.s	.FlipXY					; If so, branch
000037D0                            
000037D0 2A80                       	move.l	d0,(a5)					; Draw a block (flipped vertically)
000037D2 2A19                       	move.l	(a1)+,d5
000037D4 2819                       	move.l	(a1)+,d4
000037D6 0A84 1000 1000             	eori.l	#$10001000,d4
000037DC 2C84                       	move.l	d4,(a6)
000037DE D087                       	add.l	d7,d0
000037E0 2A80                       	move.l	d0,(a5)
000037E2 0A85 1000 1000             	eori.l	#$10001000,d5
000037E8 2C85                       	move.l	d5,(a6)
000037EA 4E75                       	rts
000037EC                            
000037EC                            ; -------------------------------------------------------------------------------
000037EC                            
000037EC                            .FlipXY:
000037EC 2A80                       	move.l	d0,(a5)					; Draw a block (flipped both ways)
000037EE 2A19                       	move.l	(a1)+,d5
000037F0 2819                       	move.l	(a1)+,d4
000037F2 0A84 1800 1800             	eori.l	#$18001800,d4
000037F8 4844                       	swap	d4
000037FA 2C84                       	move.l	d4,(a6)
000037FC D087                       	add.l	d7,d0
000037FE 2A80                       	move.l	d0,(a5)
00003800 0A85 1800 1800             	eori.l	#$18001800,d5
00003806 4845                       	swap	d5
00003808 2C85                       	move.l	d5,(a6)
0000380A 4E75                       	rts
0000380C                            
0000380C                            ; -------------------------------------------------------------------------------
0000380C                            ; Get the addresses of a block's metadata and data at a position relative
0000380C                            ; to a camera
0000380C                            ; -------------------------------------------------------------------------------
0000380C                            ; PARAMETERS:
0000380C                            ;	d4.w	- Y position
0000380C                            ;	d5.w	- X position
0000380C                            ;	a3.l	- Camera position pointer
0000380C                            ;	a4.l	- Layout data pointer
0000380C                            ; RETURNS:
0000380C                            ;	a0.l	- Block metadata pointer
0000380C                            ;	a1.l	- Block data pointer
0000380C                            ; -------------------------------------------------------------------------------
0000380C                            
0000380C                            GetBlockData:
0000380C DA53                       	add.w	(a3),d5					; Add camera X position
0000380E                            
0000380E                            GetBlockDataAbsX:
0000380E D86B 0004                  	add.w	4(a3),d4				; Add camera Y position
00003812                            
00003812                            GetBlockDataAbsXY:
00003812 43F9 00FF 2000             	lea	(v_level_blocks).l,a1			; Prepare block data pointer
00003818                            
00003818 3604                       	move.w	d4,d3					; Get the chunk that the block we want is in
0000381A E24B                       	lsr.w	#1,d3
0000381C 0243 0380                  	andi.w	#$380,d3
00003820 E64D                       	lsr.w	#3,d5
00003822 3005                       	move.w	d5,d0
00003824 EA48                       	lsr.w	#5,d0
00003826 0240 007F                  	andi.w	#$7F,d0
0000382A D043                       	add.w	d3,d0
0000382C                            ;	move.l	#LevelChunks,d3
0000382C 7600                           moveq    #0,d3
0000382E 1634 0000                  	move.b	(a4,d0.w),d3
00003832 6700                       	beq.s	.End					; If it's a blank chunk, branch out of here
00003834                            
00003834 5303                       	subq.b	#1,d3					; Get pointer to block metadata in the chunk
00003836 0243 007F                  	andi.w	#$7F,d3
0000383A EE5B                       	ror.w	#7,d3
0000383C D844                       	add.w	d4,d4
0000383E 0244 01E0                  	andi.w	#$1E0,d4
00003842 0245 001E                  	andi.w	#$1E,d5
00003846 D644                       	add.w	d4,d3
00003848 D645                       	add.w	d5,d3
0000384A                            .End:
0000384A D6B9 00FF 14FE                 add.l    (ChunkAddress).l,d3
00003850 2043                       	movea.l	d3,a0
00003852                            
00003852 3610                       	move.w	(a0),d3					; Get pointer to block data
00003854 0243 03FF                  	andi.w	#$3FF,d3
00003858 E74B                       	lsl.w	#3,d3
0000385A D2C3                       	adda.w	d3,a1
0000385C                            
0000385C                            
0000385C 7001                       	moveq	#1,d0					; Mark block as retrieved
0000385E                            
0000385E                            
0000385E 4E75                       	rts
00003860                            
00003860                            ; -------------------------------------------------------------------------------
00003860                            ; Get the address of a block's metadata at a position
00003860                            ; -------------------------------------------------------------------------------
00003860                            ; PARAMETERS:
00003860                            ;	d4.w	- Y position
00003860                            ;	d5.w	- X position
00003860                            ;	a4.l	- Layout data pointer
00003860                            ; RETURNS:
00003860                            ;	a0.l	- Block metadata pointer
00003860                            ;	a1.l	- Block data pointer
00003860                            ; -------------------------------------------------------------------------------
00003860                            
00003860                            GetBlockMetadata:
00003860 3604                       	move.w	d4,d3					; Get the chunk that the block we want is in
00003862 E24B                       	lsr.w	#1,d3
00003864 0243 0380                  	andi.w	#$380,d3
00003868 E64D                       	lsr.w	#3,d5
0000386A 3005                       	move.w	d5,d0
0000386C EA48                       	lsr.w	#5,d0
0000386E 0240 007F                  	andi.w	#$7F,d0
00003872 D043                       	add.w	d3,d0
00003874                            ;	move.l	#LevelChunks,d3
00003874 7600                           moveq    #0,d3
00003876 1634 0000                  	move.b	(a4,d0.w),d3
0000387A                            
0000387A 5303                       	subq.b	#1,d3					; Get pointer to block metadata in the chunk
0000387C 0243 007F                  	andi.w	#$7F,d3
00003880 EE5B                       	ror.w	#7,d3
00003882 D844                       	add.w	d4,d4
00003884 0244 01E0                  	andi.w	#$1E0,d4
00003888 0245 001E                  	andi.w	#$1E,d5
0000388C D644                       	add.w	d4,d3
0000388E D645                       	add.w	d5,d3
00003890 D6B9 00FF 14FE             	add.l (ChunkAddress).l,d3
00003896 2043                       	movea.l	d3,a0
00003898                            
00003898 4E75                       	rts
0000389A                            
0000389A                            ; -------------------------------------------------------------------------------
0000389A                            ; Draw a block at a position in the level
0000389A                            ; -------------------------------------------------------------------------------
0000389A                            ; NOTE: This routine is possibly bugged. It was designed to only ever place a 
0000389A                            ; single block in the entire level, but because it also overwrites chunk data in
0000389A                            ; order for Sonic to interact with it, it affects all instances of the
0000389A                            ; overwritten chunk. Best used on a chunk that only has 1 instance of use.
0000389A                            ; -------------------------------------------------------------------------------
0000389A                            ; PARAMETERS:
0000389A                            ;	d3.w	- Block metadata
0000389A                            ;	d4.w	- Y position
0000389A                            ;	d5.w	- X position
0000389A                            ; -------------------------------------------------------------------------------
0000389A                            
0000389A                            DrawBlockAtPos:
0000389A 2F08                       	move.l	a0,-(sp)
0000389C                            
0000389C 49F8 A000                  	lea	(v_lvl_layout).w,a4			; Prepare level layout
000038A0 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; Prepare VDP ports
000038A6 4DF9 00C0 0000             	lea	(VDP_DATA).l,a6
000038AC 343C 4000                  	move.w	#$4000,d2				; Set to draw on plane A
000038B0 2E3C 0080 0000             	move.l	#$800000,d7				; VDP command row delta
000038B6                            
000038B6 48E7 1C00                  	movem.l	d3-d5,-(sp)
000038BA 6100 FF56                  	bsr.w	GetBlockDataAbsXY			; Get the pointer to the block at our position
000038BE 6600                       	bne.s	.GotBlock				; If we ended up getting a block, branch
000038C0 4CDF 0038                  	movem.l	(sp)+,d3-d5
000038C4 6000                       	bra.s	.End
000038C6                            
000038C6                            .GotBlock:
000038C6 4CDF 0038                  	movem.l	(sp)+,d3-d5
000038CA                            
000038CA 3083                       	move.w	d3,(a0)					; Overwrite the block in the chunk found
000038CC 6100 0000                  	bsr.w	ChkBlockPosOnscreen			; Check if this block is onscreen
000038D0 6600                       	bne.s	.End					; If it's not, branch
000038D2                            
000038D2 48E7 1C00                  	movem.l	d3-d5,-(sp)				; Draw the block
000038D6 43F9 00FF 2000             	lea	(v_level_blocks).l,a1
000038DC 0243 03FF                  	andi.w	#$3FF,d3
000038E0 E74B                       	lsl.w	#3,d3
000038E2 D2C3                       	adda.w	d3,a1
000038E4 6100 0000                  	bsr.w	GetBlockVDPCmdAbsXY
000038E8 6100 FEA4                  	bsr.w	DrawBlock
000038EC 4CDF 0038                  	movem.l	(sp)+,d3-d5
000038F0                            
000038F0                            .End:
000038F0 205F                       	movea.l	(sp)+,a0
000038F2 4E75                       	rts
000038F4                            
000038F4                            ; -------------------------------------------------------------------------------
000038F4                            ; Check if a block position is onscreen
000038F4                            ; -------------------------------------------------------------------------------
000038F4                            ; PARAMETERS:
000038F4                            ;	d4.w	- Y position
000038F4                            ;	d5.w	- X position
000038F4                            ; RETURNS:
000038F4                            ;	d0.w	- Return status
000038F4                            ;	z/nz	- Onscreen/offscreen
000038F4                            ; -------------------------------------------------------------------------------
000038F4                            
000038F4                            ChkBlockPosOnscreen:
000038F4 3038 F704                  	move.w	(v_cam_fg_y).w,d0			; Is the block above the top of the screen?
000038F8 3200                       	move.w	d0,d1
000038FA 0240 FFF0                  	andi.w	#$FFF0,d0
000038FE 0440 0010                  	subi.w	#16,d0
00003902 B840                       	cmp.w	d0,d4
00003904 6500                       	bcs.s	.Offscreen				; If so, branch
00003906                            
00003906 0641 00F0                  	addi.w	#224+16,d1				; Is the block below the bottom of the screen?
0000390A 0241 FFF0                  	andi.w	#$FFF0,d1
0000390E B841                       	cmp.w	d1,d4
00003910 6E00                       	bgt.s	.Offscreen				; If so, branch
00003912                            
00003912 3038 F700                  	move.w	(v_cam_fg_x).w,d0			; Is the block left of the left side of the screen?
00003916 3200                       	move.w	d0,d1
00003918 0240 FFF0                  	andi.w	#$FFF0,d0
0000391C 0440 0010                  	subi.w	#16,d0
00003920 BA40                       	cmp.w	d0,d5
00003922 6500                       	bcs.s	.Offscreen				; If so, branch
00003924                            
00003924 0641 0150                  	addi.w	#320+16,d1				; Is the block right of the right side of the screen?
00003928 0241 FFF0                  	andi.w	#$FFF0,d1
0000392C BA41                       	cmp.w	d1,d5
0000392E 6E00                       	bgt.s	.Offscreen				; If so, branch
00003930                            
00003930 7000                       	moveq	#0,d0					; Mark as onscreen
00003932 4E75                       	rts
00003934                            
00003934                            .Offscreen:
00003934 7001                       	moveq	#1,d0					; Mark as offscreen
00003936 4E75                       	rts
00003938                            
00003938                            ; -------------------------------------------------------------------------------
00003938                            ; Calculate the base VDP command for drawing blocks with
00003938                            ; (For VRAM addresses $C000-$FFFF)
00003938                            ; -------------------------------------------------------------------------------
00003938                            ; PARAMETERS:
00003938                            ;	d4.w	- Y position
00003938                            ;	d5.w	- X position
00003938                            ;	a3.l	- Camera position pointer
00003938                            ; RETURNS:
00003938                            ;	d0.l	- Base VDP command 
00003938                            ; -------------------------------------------------------------------------------
00003938                            
00003938                            GetBlockVDPCmd:
00003938 DA53                       	add.w	(a3),d5					; Add camera X position
0000393A                            
0000393A                            GetBlockVDPCmdAbsX:
0000393A D86B 0004                  	add.w	4(a3),d4				; Add camera Y position
0000393E                            
0000393E                            GetBlockVDPCmdAbsXY:
0000393E 0244 00F0                  	andi.w	#$F0,d4					; Calculate VDP command
00003942 0245 01F0                  	andi.w	#$1F0,d5
00003946 E94C                       	lsl.w	#4,d4
00003948 E44D                       	lsr.w	#2,d5
0000394A D845                       	add.w	d5,d4
0000394C 7003                       	moveq	#3,d0
0000394E 4840                       	swap	d0
00003950 3004                       	move.w	d4,d0
00003952                            
00003952 4E75                       	rts
00003954                            
00003954                            ; -------------------------------------------------------------------------------
00003954                            ; Calculate the base VDP command for drawing blocks with
00003954                            ; (For VRAM addresses $8000-$BFFF)
00003954                            ; -------------------------------------------------------------------------------
00003954                            ; PARAMETERS:
00003954                            ;	d4.w	- Y position
00003954                            ;	d5.w	- X position
00003954                            ;	a3.l	- Camera position pointer
00003954                            ; RETURNS:
00003954                            ;	d0.l	- Base VDP command 
00003954                            ; -------------------------------------------------------------------------------
00003954                            
00003954                            GetBlockVDPCmd2:
00003954 D86B 0004                  	add.w	4(a3),d4				; Add camera Y position
00003958 DA53                       	add.w	(a3),d5					; Add camera X position
0000395A                            
0000395A 0244 00F0                  	andi.w	#$F0,d4					; Calculate VDP command
0000395E 0245 01F0                  	andi.w	#$1F0,d5
00003962 E94C                       	lsl.w	#4,d4
00003964 E44D                       	lsr.w	#2,d5
00003966 D845                       	add.w	d5,d4
00003968 7002                       	moveq	#2,d0
0000396A 4840                       	swap	d0
0000396C 3004                       	move.w	d4,d0
0000396E                            
0000396E 4E75                       	rts
00003970                            
00003970                            ; -------------------------------------------------------------------------------
00003970                            ; Start level drawing
00003970                            ; -------------------------------------------------------------------------------
00003970                            
00003970                            LevelDraw_Start:
00003970 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5				; Prepare VDP ports
00003976 4DF9 00C0 0000             	lea	(VDP_DATA).l,a6
0000397C                            
0000397C 47F8 F700                  	lea	(v_cam_fg_x).w,a3			; Initialize foreground
00003980 49F8 A000                  	lea	(v_lvl_layout).w,a4
00003984 343C 4000                  	move.w	#$4000,d2
00003988 6100                       	bsr.s	LevelDraw_StartFG
0000398A                            
0000398A 47F8 F708                  	lea	(v_cam_bg_x).w,a3			; Initialize background
0000398E 49F8 A040                  	lea	(v_lvl_layout+$40).w,a4
00003992 343C 6000                  	move.w	#$6000,d2
00003996 6000 0000                  	bra.w	LevelDraw_StartBG
0000399A                            
0000399A                            ; -------------------------------------------------------------------------------
0000399A                            ; Draw foreground
0000399A                            ; -------------------------------------------------------------------------------
0000399A                            ; PARAMETERS:
0000399A                            ;	d2.w	- Base high VDP write command
0000399A                            ;	a3.l	- Camera position pointer
0000399A                            ;	a4.l	- Layout data pointer
0000399A                            ;	a5.l	- VDP control port
0000399A                            ;	a6.l	- VDP data port
0000399A                            ; -------------------------------------------------------------------------------
0000399A                            LoadTilesFromStart2:
0000399A                            LevelDraw_StartFG:
0000399A 78F0                       	moveq	#-16,d4					; Start drawing at the top of the screen
0000399C 7C0F                       	moveq	#((224+(16*2))/16)-1,d6			; 16 blocks in a column
0000399E                            
0000399E                            .Draw:
0000399E 48E7 0E00                  	movem.l	d4-d6,-(sp)				; Draw a full row of blocks
000039A2 7A00                       	moveq	#0,d5
000039A4 3204                       	move.w	d4,d1
000039A6 6100 FF90                  	bsr.w	GetBlockVDPCmd
000039AA 3801                       	move.w	d1,d4
000039AC 7A00                       	moveq	#0,d5
000039AE 7C1F                       	moveq	#(512/16)-1,d6
000039B0 6100 FD5A                  	bsr.w	DrawBlockRow2
000039B4 4CDF 0070                  	movem.l	(sp)+,d4-d6
000039B8                            
000039B8 0644 0010                  	addi.w	#16,d4					; Move down
000039BC 51CE FFE0                  	dbf	d6,.Draw				; Loop until finished
000039C0                            
000039C0 4E75                       	rts
000039C2                            
000039C2                            ; -------------------------------------------------------------------------------
000039C2                            ; Draw background
000039C2                            ; -------------------------------------------------------------------------------
000039C2                            ; PARAMETERS:
000039C2                            ;	d2.w	- Base high VDP write command
000039C2                            ;	a3.l	- Camera position pointer
000039C2                            ;	a4.l	- Layout data pointer
000039C2                            ;	a5.l	- VDP control port
000039C2                            ;	a6.l	- VDP data port
000039C2                            ; -------------------------------------------------------------------------------
000039C2                            
000039C2                            LevelDraw_StartBG:
000039C2 78F0                       	moveq	#-16,d4					; Start drawing at the top of the screen
000039C4 7C0F                       	moveq	#((224+(16*2))/16)-1,d6			; 16 blocks in a column
000039C6                            
000039C6                            .Draw:
000039C6 48E7 0E80                  	movem.l	d4-d6/a0,-(sp)				; Draw a row of blocks
000039CA 41F9 0000 0000             	lea	(BGCameraSectIDs).l,a0
000039D0 D0FC 0001                  	adda.w	#1,a0
000039D4 3038 F70C                  	move.w	(v_cam_bg_y).w,d0
000039D8 D044                       	add.w	d4,d0
000039DA 0240 07F0                  	andi.w	#$7F0,d0
000039DE 6100 0000                  	bsr.w	DrawBGBlockRow
000039E2 4CDF 0170                  	movem.l	(sp)+,d4-d6/a0
000039E6                            
000039E6 0644 0010                  	addi.w	#16,d4					; Move down
000039EA 51CE FFDA                  	dbf	d6,.Draw				; Loop until finished
000039EE                            
000039EE 4E75                       	rts
000039F0                            
000039F0                            ; -------------------------------------------------------------------------------
000039F0                            ; Background camera sections
000039F0                            ; -------------------------------------------------------------------------------
000039F0                            ; Each row of blocks is assigned a background camera section to help determine
000039F0                            ; how to draw it
000039F0                            ; -------------------------------------------------------------------------------
000039F0                            ; 0 = Background 1 (Static)
000039F0                            ; 2 = Background 1 (Dynamic)
000039F0                            ; 4 = Background 2 (Dynamic)
000039F0                            ; 6 = Background 3 (Dynamic)
000039F0                            ; -------------------------------------------------------------------------------
000039F0                            
000039F0 =00000000                  BG_STATIC	EQU	0
000039F0 =00000002                  BG_DYNAMIC_1	EQU	2
000039F0 =00000004                  BG_DYNAMIC_2	EQU	4
000039F0 =00000006                  BG_DYNAMIC_3	EQU	6
000039F0                            
000039F0                            BG_CAM_SECT macros size, id
000039F0                            
000039F0                            	dcb.b	(\size)/16, \id
000039F0                            
000039F0                            ; -------------------------------------------------------------------------------
000039F0                            
000039F0                            BGCameraSectIDs:
000039F0 00                         	BG_CAM_SECT 16,  BG_STATIC			; Offscreen top row, required to be here
000039F1                            
000039F1 00                         	BG_CAM_SECT 16,	 BG_STATIC			; Top clouds
000039F2 0000                       	BG_CAM_SECT 32,	 BG_STATIC
000039F4 0000 00                    	BG_CAM_SECT 48,	 BG_STATIC
000039F7 0000 0000                  	BG_CAM_SECT 64,	 BG_STATIC
000039FB 0000 0000                  	BG_CAM_SECT 64,	 BG_STATIC
000039FF 0000 0000                  	BG_CAM_SECT 64,	 BG_STATIC
00003A03 0000                       	BG_CAM_SECT 32,	 BG_STATIC
00003A05 0000 00                    	BG_CAM_SECT 48,	 BG_STATIC
00003A08 0000 00                    	BG_CAM_SECT 48,	 BG_STATIC
00003A0B 0000                       	BG_CAM_SECT 32,	 BG_STATIC
00003A0D 0000 0000 0000 0000 0000   	BG_CAM_SECT 160, BG_STATIC			; Top mountains
00003A17 0000                       	BG_CAM_SECT 32,	 BG_STATIC			; Top bushes
00003A19 0000 0000 0000 0000 0000+  	BG_CAM_SECT 224, BG_STATIC			; Top water
00003A27                            
00003A27 0000 0000 0000 0000 0000+  	BG_CAM_SECT 224, BG_STATIC			; Upside down water
00003A35 0000                       	BG_CAM_SECT 32,  BG_STATIC			; Upside down bushes
00003A37 0404 0404 0404 0404 0404   	BG_CAM_SECT 160, BG_DYNAMIC_2			; Upside down mountains
00003A41 00                         	BG_CAM_SECT 16,  BG_STATIC			; Upside down clouds
00003A42 0000                       	BG_CAM_SECT 32,  BG_STATIC
00003A44 0000 00                    	BG_CAM_SECT 48,  BG_STATIC
00003A47 0000 0000                  	BG_CAM_SECT 64,  BG_STATIC
00003A4B 0000 0000                  	BG_CAM_SECT 64,  BG_STATIC
00003A4F                            
00003A4F 0000 0000                  	BG_CAM_SECT 64,  BG_STATIC			; Bottom clouds
00003A53 0000                       	BG_CAM_SECT 32,  BG_STATIC
00003A55 0000 0000 00               	BG_CAM_SECT 80,  BG_STATIC
00003A5A 0000                       	BG_CAM_SECT 32,  BG_STATIC
00003A5C 00                         	BG_CAM_SECT 16,  BG_STATIC
00003A5D 0404 0404 0404 0404 0404   	BG_CAM_SECT 160, BG_DYNAMIC_2			; Bottom mountains
00003A67 0000                       	BG_CAM_SECT 32,  BG_STATIC			; Bottom bushes
00003A69 0000 0000 0000 0000 00     	BG_CAM_SECT 144, BG_STATIC			; Bottom water
00003A72                            
00003A72                            	even
00003A72                            
00003A72                            ; -------------------------------------------------------------------------------
00003A72                            
00003A72                            BGCameraSects:
00003A72 00FF F708                  	dc.l	v_cam_bg_x&$FFFFFF			; BG1 (static)
00003A76 00FF F708                  	dc.l	v_cam_bg_x&$FFFFFF			; BG1 (dynamic)
00003A7A 00FF F710                  	dc.l	v_cam_bg2_x&$FFFFFF			; BG2 (dynamic)
00003A7E 00FF F718                  	dc.l	v_cam_bg3_x&$FFFFFF			; BG3 (dynamic)
00003A82                            
00003A82                            ; -------------------------------------------------------------------------------
00003A82                            ; Draw row of blocks for the background
00003A82                            ; -------------------------------------------------------------------------------
00003A82                            ; PARAMETERS:
00003A82                            ;	d2.w	- Base high VDP write command
00003A82                            ;	a0.l	- Background camera sections
00003A82                            ;	a3.l	- Camera position pointer
00003A82                            ;	a4.l	- Layout data pointer
00003A82                            ;	a5.l	- VDP control port
00003A82                            ;	a6.l	- VDP data port
00003A82                            ; -------------------------------------------------------------------------------
00003A82                            
00003A82                            DrawBGBlockRow:
00003A82 E848                       	lsr.w	#4,d0					; Get camera section ID
00003A84 1030 0000                  	move.b	(a0,d0.w),d0
00003A88 D040                       	add.w	d0,d0
00003A8A 267B 00E6                  	movea.l	BGCameraSects(pc,d0.w),a3
00003A8E 6700                       	beq.s	.StaticRow				; If it's a statically drawn row of blocks, branch
00003A90                            
00003A90 7AF0                       	moveq	#-16,d5					; Draw a row of blocks
00003A92 48E7 0C00                  	movem.l	d4-d5,-(sp)
00003A96 6100 FEA0                  	bsr.w	GetBlockVDPCmd
00003A9A 4CDF 0030                  	movem.l	(sp)+,d4-d5
00003A9E 6100 FC6A                  	bsr.w	DrawBlockRow
00003AA2 6000                       	bra.s	.End
00003AA4                            
00003AA4                            .StaticRow:
00003AA4 7A00                       	moveq	#0,d5					; Draw a full statically drawn row of blocks
00003AA6 48E7 0C00                  	movem.l	d4-d5,-(sp)
00003AAA 6100 FE8E                  	bsr.w	GetBlockVDPCmdAbsX
00003AAE 4CDF 0030                  	movem.l	(sp)+,d4-d5
00003AB2 7C1F                       	moveq	#(512/16)-1,d6
00003AB4 6100 FC80                  	bsr.w	DrawBlockRowAbsX
00003AB8                            
00003AB8                            .End:
00003AB8 4E75                       	rts
00003ABA                            
00003ABA                            ; -------------------------------------------------------------------------------
00003ABA                            ; Load level data
00003ABA                            ; -------------------------------------------------------------------------------
00003ABA                            
00003ABA                            LoadLevelData:
00003ABA 7000                       	moveq	#0,d0					; Prepare level data index
00003ABC 1039 00FF 1506             	move.b	(v_zone).l,d0
00003AC2 ED48                           lsl.w  #6,d0
00003AC4 7200                           moveq  #0,d1
00003AC6 1239 00FF 1507                 move.b  (v_act).l,d1
00003ACC E949                           lsl.w  #4,d1
00003ACE 8041                           or.w  d1,d0
00003AD0 7200                           moveq  #0,d1
00003AD2 1239 00FF 152E                 move.b  (v_time_zone).l,d1
00003AD8 D201                           add.b    d1,d1
00003ADA D241                           add.w    d1,d1
00003ADC 8041                           or.w  d1,d0		
00003ADE 45F9 0000 0000             	lea	(LevelDataBlocks).l,a2
00003AE4 45F2 0000                  	lea	(a2,d0.w),a2
00003AE8 2F0A                       	move.l	a2,-(sp)
00003AEA                            
00003AEA 588A                       	addq.l	#4,a2					; Skip over level art pointer (art is loaded in PLCs instead)
00003AEC                            
00003AEC 221A                       	move.l	(a2)+,d1				; Load level blocks
00003AEE 0281 003F FFFF             	andi.l	#$3FFFFF,d1
00003AF4 2041                       	movea.l	d1,a0
00003AF6 49F9 00FF 2000             	lea	(v_level_blocks).l,a4
00003AFC 6100 EC92                  	bsr.w	NemDecToRAM
00003B00                            
00003B00                            
00003B00 205A                       	movea.l	(a2)+,a0				; Skip over level chunks (chunks are uncompressed, and are referenced directly
00003B02                            							; by collision and drawing routines)
00003B02                            
00003B02 6100 0000                  	bsr.w	LoadLevelLayout				; Load level layout
00003B06                            
00003B06 45F9 0000 0000                 lea     (Level_PalleteID).l,a2
00003B0C 7000                       	moveq  #0,d0
00003B0E 1039 00FF 1506                 move.b  (v_zone).l,d0
00003B14 E548                           lsl.w  #2,d0
00003B16                                
00003B16 727F                       	moveq    #$7F,d1
00003B18 C239 00FF 152E                 and.b    (v_time_zone).l,d1
00003B1E 8001                           or.b    d1,d0
00003B20                            	
00003B20 45F2 0000                  	lea	(a2,d0.w),a2
00003B24 7000                       	moveq	#0,d0
00003B26 101A                       	move.b   (a2)+,d0 ; get pallete ids
00003B28                            
00003B28                            ;	move.w	(a2)+,d0				; Load level palette
00003B28                            ;	move.w	(a2),d0
00003B28                            ;	andi.w	#$FF,d0
00003B28 6100 CB8E                  	bsr.w	LoadFadePal
00003B2C                            
00003B2C 245F                       	movea.l	(sp)+,a2				; Skip over to PLC ID
00003B2E 584A                       	addq.w	#4,a2
00003B30                            
00003B30 4A39 00FF 1522             	tst.b	(v_reset_lvl_flags).l			; Was the level reset midway?
00003B36 6700                       	beq.s	.ChkStdPLC				; If not, branch
00003B38                            
00003B38 4EF9 0000 0000             	jmp	LoadCameraPLC_Full			; Reload camera based PLCs
00003B3E                            
00003B3E                            .ChkStdPLC:
00003B3E 0839 0001 00FF 151C        	btst	#1,(v_load_plc_flags).l			; Was the title card marked as loaded?
00003B46 6700                       	beq.s	.End					; If not, branch
00003B48                            
00003B48 7000                       	moveq	#0,d0					; Load PLCs
00003B4A 1012                       	move.b	(a2),d0
00003B4C 6700                       	beq.s	.End					; If the PLC ID is 0, branch
00003B4E 6100 ED7E                  	bsr.w	LoadPLC
00003B52                            
00003B52                            .End:
00003B52 303C 0089                      move.w	#$89,d0 ; Play 1UP Theme
00003B56 4EB8 2708                  	jsr	PlayFMSound
00003B5A 4E75                       	rts
00003B5C                            
00003B5C                            ; -------------------------------------------------------------------------------
00003B5C                            ; Load a level layout
00003B5C                            ; -------------------------------------------------------------------------------
00003B5C                            LevelLayoutLoad:
00003B5C                            LoadLevelLayout:
00003B5C 47F8 A000                  	lea	(v_lvl_layout).w,a3			; Clear layout RAM
00003B60 323C 01FF                  	move.w	#$1FF,d1
00003B64 7000                       	moveq	#0,d0
00003B66                            
00003B66                            .Clear:
00003B66 26C0                       	move.l	d0,(a3)+
00003B68 51C9 FFFC                  	dbf	d1,.Clear				; Loop until finished
00003B6C                            
00003B6C 47F8 A000                  	lea	(v_lvl_layout).w,a3			; Load foreground layout
00003B70 7200                       	moveq	#0,d1
00003B72 6100 0000                  	bsr.w	.LoadPlane
00003B76                            
00003B76 47F8 A040                  	lea	(v_lvl_layout+$40).w,a3			; Load background layout
00003B7A 7202                       	moveq	#2,d1
00003B7C                            
00003B7C                            ; -------------------------------------------------------------------------------
00003B7C                            
00003B7C                            .LoadPlane:
00003B7C 3039 00FF 1506             	move.w	(v_zone).l,d0
00003B82 ED08                       	lsl.b	#6,d0
00003B84 EA48                       	lsr.w	#5,d0
00003B86 3400                       	move.w	d0,d2
00003B88 D040                       	add.w	d0,d0
00003B8A D042                       	add.w	d2,d0
00003B8C D041                       	add.w	d1,d0
00003B8E 43F9 0000 0000             	lea	(LevelLayoutIndex).l,a1
00003B94 0C39 0000 00FF 152E        	cmpi.b  #0,(v_time_zone).l
00003B9C 6600                       	bne.s .Load
00003B9E 43F9 0000 0000             	lea	(LevelLayoutIndex_Past).l,a1
00003BA4                            .Load:
00003BA4 3031 0000                  	move.w	(a1,d0.w),d0
00003BA8 43F1 0000                  	lea	(a1,d0.w),a1
00003BAC                            
00003BAC 7200                       	moveq	#0,d1					; Get layout size
00003BAE 3401                       	move.w	d1,d2
00003BB0 1219                       	move.b	(a1)+,d1
00003BB2 1419                       	move.b	(a1)+,d2
00003BB4                            
00003BB4                            .RowLoop:
00003BB4 3001                       	move.w	d1,d0					; Prepare to copy row
00003BB6 204B                       	movea.l	a3,a0
00003BB8                            
00003BB8                            .ChunkLoop:
00003BB8 10D9                       	move.b	(a1)+,(a0)+				; Copy row of layout data
00003BBA 51C8 FFFC                  	dbf	d0,.ChunkLoop				; Loop until finished
00003BBE                            
00003BBE 47EB 0080                  	lea	$80(a3),a3				; Next row
00003BC2 51CA FFF0                  	dbf	d2,.RowLoop				; Loop until finished
00003BC6                            
00003BC6 4E75                       	rts
00003BC8                            
00003BC8                            ; -------------------------------------------------------------------------------
00003BC8                            ; Run level events
00003BC8                            ; -------------------------------------------------------------------------------
00003BC8                            
00003BC8                            RunLevelEvents:
00003BC8 7000                       	moveq	#0,d0					; Run level events
00003BCA 1039 00FF 1506             	move.b	(v_zone).l,d0
00003BD0 D040                       	add.w	d0,d0
00003BD2 303B 0000                  	move.w	LevelEventIndex(pc,d0.w),d0
00003BD6 4EBB 0000                  	jsr	LevelEventIndex(pc,d0.w)
00003BDA                            
00003BDA 0C38 002B D01C             	cmpi.b	#$2B,(v_player+oAnim).w			; Is the player giving up from boredom?
00003BE0 6600                       	bne.s	.NotGivingUp				; If not, branch
00003BE2 31F8 F704 F72E             	move.w	(v_cam_fg_y).w,(v_bottom_bound).w	; Set the bottom boundary of the level to wherever the camera is
00003BE8 31F8 F704 F726             	move.w	(v_cam_fg_y).w,(v_dest_btm_bound).w
00003BEE                            
00003BEE                            .NotGivingUp:
00003BEE 7204                       	moveq	#4,d1					; Bottom boundary shift speed
00003BF0 3038 F726                  	move.w	(v_dest_btm_bound).w,d0			; Is the bottom boundary shifting?
00003BF4 9078 F72E                  	sub.w	(v_bottom_bound).w,d0
00003BF8 6700                       	beq.s	.End					; If not, branch
00003BFA 6400                       	bcc.s	.MoveDown				; If it's scrolling down, branch
00003BFC                            
00003BFC 4441                       	neg.w	d1					; Set the speed to go up
00003BFE 3038 F704                  	move.w	(v_cam_fg_y).w,d0			; Is the camera past the target bottom boundary?
00003C02 B078 F726                  	cmp.w	(v_dest_btm_bound).w,d0
00003C06 6300                       	bls.s	.ShiftUp				; If not, branch
00003C08 31C0 F72E                  	move.w	d0,(v_bottom_bound).w			; Set the bottom boundary to be where the camera id
00003C0C 0278 FFFE F72E             	andi.w	#$FFFE,(v_bottom_bound).w
00003C12                            
00003C12                            .ShiftUp:
00003C12 D378 F72E                  	add.w	d1,(v_bottom_bound).w			; Shift the boundary up
00003C16 11FC 0001 F75C             	move.b	#1,(v_btm_bound_shifting).w		; Mark as shifting
00003C1C                            
00003C1C                            .End:
00003C1C 4E75                       	rts
00003C1E                            
00003C1E                            .MoveDown:
00003C1E 3038 F704                  	move.w	(v_cam_fg_y).w,d0			; Is the camera near the bottom boundary?
00003C22 5040                       	addq.w	#8,d0
00003C24 B078 F72E                  	cmp.w	(v_bottom_bound).w,d0
00003C28 6500                       	bcs.s	.ShiftDown				; If not, branch
00003C2A 0838 0001 D022             	btst	#1,(v_player+oStatus).w			; Is the player in the air?
00003C30 6700                       	beq.s	.ShiftDown				; If not, branch
00003C32 D241                       	add.w	d1,d1					; If so, quadruple the shift speed
00003C34 D241                       	add.w	d1,d1
00003C36                            
00003C36                            .ShiftDown:
00003C36 D378 F72E                  	add.w	d1,(v_bottom_bound).w			; Shift the boundary down
00003C3A 11FC 0001 F75C             	move.b	#1,(v_btm_bound_shifting).w		; Mark as shifting
00003C40 4E75                       	rts
00003C42                            
00003C42                            ; -------------------------------------------------------------------------------
00003C42                            
00003C42                            LevelEventIndex:
00003C42 0000                       	dc.w	LevEvents_PPZ-LevelEventIndex		; PPZ
00003C44 0000                       	dc.w	LevEvents_CCZ-LevelEventIndex		; CCZ
00003C46 0000                       	dc.w	LevEvents_TTZ-LevelEventIndex		; TTZ
00003C48 0000                       	dc.w	LevEvents_QQZ-LevelEventIndex		; QQZ
00003C4A 0000                       	dc.w	LevEvents_WWZ-LevelEventIndex		; WWZ
00003C4C 0000                       	dc.w	LevEvents_SSZ-LevelEventIndex		; SSZ
00003C4E 0000                       	dc.w	LevEvents_MMZ-LevelEventIndex		; MMZ
00003C50                            
00003C50                            ; -------------------------------------------------------------------------------
00003C50                            ; Palmtree Panic level events
00003C50                            ; -------------------------------------------------------------------------------
00003C50                            
00003C50                            LevEvents_PPZ:
00003C50 7000                       	moveq	#0,d0					; Run act specific level events
00003C52 1039 00FF 1507             	move.b	(v_act).l,d0
00003C58 D040                       	add.w	d0,d0
00003C5A 303B 0000                  	move.w	LevEvents_PPZ_Index(pc,d0.w),d0
00003C5E 4EFB 0000                  	jmp	LevEvents_PPZ_Index(pc,d0.w)
00003C62                            
00003C62                            ; -------------------------------------------------------------------------------
00003C62                            
00003C62                            LevEvents_PPZ_Index:
00003C62 0000                       	dc.w	LevEvents_PPZ1-LevEvents_PPZ_Index
00003C64 0000                       	dc.w	LevEvents_PPZ2-LevEvents_PPZ_Index
00003C66 0000                       	dc.w	LevEvents_PPZ3-LevEvents_PPZ_Index
00003C68                            
00003C68                            ; -------------------------------------------------------------------------------
00003C68                            
00003C68                            LevEvents_PPZ1:
00003C68 0C39 0001 00FF 152E        	cmpi.b	#1,(v_time_zone).l			; Are we in the present?
00003C70 6600                       	bne.s	LevEvents_PPZ2				; If not, branch
00003C72                            
00003C72 0C78 1C16 D008             	cmpi.w	#$1C16,(v_player+oX).w			; Is the player within the second 3D ramp?
00003C78 6500                       	bcs.s	.Not3DRamp				; If not, branch
00003C7A 0C78 21C6 D008             	cmpi.w	#$21C6,(v_player+oX).w
00003C80 6400                       	bcc.s	.Not3DRamp				; If not, branch
00003C82 31FC 0088 F73E             	move.w	#$88,(v_cam_y_center).w			; If so, change the camera Y center
00003C88                            
00003C88                            .Not3DRamp:
00003C88 31FC 0710 F726             	move.w	#$710,(v_dest_btm_bound).w		; Set bottom boundary before the first 3D ramp
00003C8E                            
00003C8E 0C78 0840 F700             	cmpi.w	#$840,(v_cam_fg_x).w			; Is the camera's X position < $840?
00003C94 6500                       	bcs.s	.End					; If so, branch
00003C96                            
00003C96 4A39 00FF 1510             	tst.b	(v_update_time).l			; Is the level timer running?
00003C9C 6700                       	beq.s	.AlreadySet				; If not, branch
00003C9E                            
00003C9E 0C78 0820 F728             	cmpi.w	#$820,(v_left_bound).w			; Has the left boundary been set
00003CA4 6400                       	bcc.s	.AlreadySet				; If not, branch
00003CA6 31FC 0820 F728             	move.w	#$820,(v_left_bound).w			; Set the left boundary so that the player can't go back to the first 3D ramp
00003CAC 31FC 0820 F720             	move.w	#$820,(v_dest_left_bound).w
00003CB2                            
00003CB2                            .AlreadySet:
00003CB2 31FC 0410 F726             	move.w	#$410,(v_dest_btm_bound).w		; Set bottom boundary after the first 3D ramp
00003CB8 0C78 0E00 F700             	cmpi.w	#$E00,(v_cam_fg_x).w			; Is the camera's X position < $E00?
00003CBE 6500                       	bcs.s	.End					; If so, branch
00003CC0 31FC 0310 F726             	move.w	#$310,(v_dest_btm_bound).w		; Update the bottom boundary
00003CC6                            
00003CC6                            .End:
00003CC6 4E75                       	rts
00003CC8                            
00003CC8                            ; -------------------------------------------------------------------------------
00003CC8                            
00003CC8                            LevEvents_PPZ2:
00003CC8 31FC 0310 F726             	move.w	#$310,(v_dest_btm_bound).w		; Set default bottom boundary
00003CCE 4E75                       	rts
00003CD0                            
00003CD0                            ; -------------------------------------------------------------------------------
00003CD0                            
00003CD0                            LevEvents_PPZ3:
00003CD0 4A38 F7A7                  	tst.b	(v_boss_flags).w			; Is the boss active?
00003CD4 6600                       	bne.s	.BossActive				; If so, branch
00003CD6 31FC 0310 F726             	move.w	#$310,(v_dest_btm_bound).w		; Set default bottom boundary
00003CDC 303C 0D70                  	move.w	#$D70,d0				; Handle end of act 3 boundary
00003CE0 323C 0310                  	move.w	#$310,d1
00003CE4 6100 0000                  	bsr.w	ChkSetAct3EndBounds
00003CE8                            
00003CE8                            .BossActive:
00003CE8                            	;move.w	#$8C,d0					; Play Boss Theme
00003CE8                            	;jsr	PlayFMSound
00003CE8 4E75                       	rts
00003CEA                            
00003CEA                            ; -------------------------------------------------------------------------------
00003CEA                            ; Collision Chaos level events
00003CEA                            ; -------------------------------------------------------------------------------
00003CEA                            
00003CEA                            LevEvents_CCZ:
00003CEA 7000                       	moveq	#0,d0					; Run act specific level events
00003CEC 1039 00FF 1507             	move.b	(v_act).l,d0
00003CF2 D040                       	add.w	d0,d0
00003CF4 303B 0000                  	move.w	LevEvents_CCZ_Index(pc,d0.w),d0
00003CF8 4EFB 0000                  	jmp	LevEvents_CCZ_Index(pc,d0.w)
00003CFC                            
00003CFC                            ; -------------------------------------------------------------------------------
00003CFC                            
00003CFC                            LevEvents_CCZ_Index:
00003CFC 0000                       	dc.w	LevEvents_CCZ12-LevEvents_CCZ_Index
00003CFE 0000                       	dc.w	LevEvents_CCZ12-LevEvents_CCZ_Index
00003D00 0000                       	dc.w	LevEvents_CCZ3-LevEvents_CCZ_Index
00003D02                            
00003D02                            ; -------------------------------------------------------------------------------
00003D02                            
00003D02                            LevEvents_CCZ12:
00003D02 31FC 0510 F726             	move.w	#$510,(v_dest_btm_bound).w		; Set default bottom boundary
00003D08 4E75                       	rts
00003D0A                            
00003D0A                            ; -------------------------------------------------------------------------------
00003D0A                            
00003D0A                            LevEvents_CCZ3:
00003D0A 4A38 F7A7                  	tst.b	(v_boss_flags).w			; Was the boss defeated?
00003D0E 6600 0000                  	bne.w	.ChkLock				; If so, branch
00003D12 31FC 0510 F726             	move.w	#$510,(v_dest_btm_bound).w		; Set default bottom boundary
00003D18 4E75                       	rts
00003D1A                            
00003D1A                            .ChkLock:
00003D1A 323C 0060                  	move.w	#$60,d1					; Handle end of act 3 boundary
00003D1E 6000 0000                  	bra.w	SetAct3EndBounds
00003D22                            
00003D22                            ; -------------------------------------------------------------------------------
00003D22                            ; Wacky Workbench level events
00003D22                            ; -------------------------------------------------------------------------------
00003D22                            
00003D22                            LevEvents_WWZ:
00003D22 0838 0004 F7A7             	btst	#4,(v_boss_flags).w			; Is the boss active?
00003D28 6600                       	bne.s	.BossActive				; If so, branch
00003D2A 31FC 0710 F726             	move.w	#$710,(v_dest_btm_bound).w		; Set default bottom boundary
00003D30 4E75                       	rts
00003D32                            
00003D32                            .BossActive:
00003D32 303C 0BA0                  	move.w	#$BA0,d0				; Handle end of act 3 boundary
00003D36 323C 01D0                  	move.w	#$1D0,d1
00003D3A 6100 0000                  	bsr.w	ChkSetAct3EndBounds
00003D3E 6600 0000                  	bne.w	.End					; If the boundary was set, branch
00003D42                            
00003D42 43F8 D000                  	lea	(v_player).w,a1				; Check where the player is
00003D46 0C69 0298 000C             	cmpi.w	#$298,oY(a1)				; Are they at the top of the boss arena?
00003D4C 6F00                       	ble.s	.BoundTop				; If so, branch
00003D4E 0C69 0498 000C             	cmpi.w	#$498,oY(a1)				; Are they in the middle of the boss arena?
00003D54 6F00                       	ble.s	.BoundMiddle				; If so, branch
00003D56                            
00003D56                            .BoundBottom:
00003D56 303C 05D0                  	move.w	#$5D0,d0				; Set the bottom boundary at the bottom
00003D5A 6000                       	bra.s	.SetBound
00003D5C                            
00003D5C                            .BoundMiddle:
00003D5C 303C 03D0                  	move.w	#$3D0,d0				; Set the bottom boundary in the middle
00003D60 6000                       	bra.s	.SetBound
00003D62                            
00003D62                            .BoundTop:
00003D62 303C 01D0                  	move.w	#$1D0,d0				; Set the bottom boundary at the top
00003D66                            
00003D66                            .SetBound:
00003D66 3200                       	move.w	d0,d1					; Set target bottom boundary
00003D68 31C0 F726                  	move.w	d0,(v_dest_btm_bound).w
00003D6C                            
00003D6C 9078 F72E                  	sub.w	(v_bottom_bound).w,d0			; Is the current bottom boundary near the target?
00003D70 6C00                       	bge.s	.CheckNearBound
00003D72 4440                       	neg.w	d0
00003D74                            
00003D74                            .CheckNearBound:
00003D74 0C40 0002                  	cmpi.w	#2,d0
00003D78 6E00                       	bgt.s	.End					; If not, branch
00003D7A 31C1 F72E                  	move.w	d1,(v_bottom_bound).w			; Update bottom boundary
00003D7E                            
00003D7E                            .End:
00003D7E 4E75                       	rts
00003D80                            
00003D80                            ; -------------------------------------------------------------------------------
00003D80                            ; Quartz Quadrant level events
00003D80                            ; -------------------------------------------------------------------------------
00003D80                            
00003D80                            LevEvents_QQZ:
00003D80 7000                       	moveq	#0,d0					; Run act specific level events
00003D82 1039 00FF 1507             	move.b	(v_act).l,d0
00003D88 D040                       	add.w	d0,d0
00003D8A 303B 0000                  	move.w	LevEvents_QQZ_Index(pc,d0.w),d0
00003D8E 4EFB 0000                  	jmp	LevEvents_QQZ_Index(pc,d0.w)
00003D92                            
00003D92                            ; -------------------------------------------------------------------------------
00003D92                            
00003D92                            LevEvents_QQZ_Index:
00003D92 0000                       	dc.w	LevEvents_QQZ12-LevEvents_QQZ_Index
00003D94 0000                       	dc.w	LevEvents_QQZ12-LevEvents_QQZ_Index
00003D96 0000                       	dc.w	LevEvents_QQZ3-LevEvents_QQZ_Index
00003D98                            
00003D98                            ; -------------------------------------------------------------------------------
00003D98                            
00003D98                            LevEvents_QQZ12:
00003D98 31FC 0310 F726             	move.w	#$310,(v_dest_btm_bound).w		; Set default bottom boundary
00003D9E 4E75                       	rts
00003DA0                            
00003DA0                            ; -------------------------------------------------------------------------------
00003DA0                            
00003DA0                            LevEvents_QQZ3:
00003DA0 303C 0E10                  	move.w	#$E10,d0				; Handle end of act 3 boundary
00003DA4 323C 01F8                  	move.w	#$1F8,d1
00003DA8 6100 0000                  	bsr.w	ChkSetAct3EndBounds
00003DAC 6600                       	bne.s	.End					; If the boundary was set, branch
00003DAE                            
00003DAE 4A38 F7A7                  	tst.b	(v_boss_flags).w			; Is the boss active?
00003DB2 6600                       	bne.s	.BossActive				; If so, branch
00003DB4 31FC 0320 F726             	move.w	#$320,(v_dest_btm_bound).w		; Set default bottom boundary
00003DBA                            
00003DBA                            .End:
00003DBA 4E75                       	rts
00003DBC                            
00003DBC                            .BossActive:
00003DBC 31FC 01F8 F72E             	move.w	#$1F8,(v_bottom_bound).w		; Set bottom boundary for the boss
00003DC2 31FC 01F8 F726             	move.w	#$1F8,(v_dest_btm_bound).w
00003DC8 4E75                       	rts
00003DCA                            
00003DCA                            ; -------------------------------------------------------------------------------
00003DCA                            ; Metallic Madness level events
00003DCA                            ; -------------------------------------------------------------------------------
00003DCA                            
00003DCA                            LevEvents_MMZ:
00003DCA 7000                       	moveq	#0,d0					; Run act specific level events
00003DCC 1039 00FF 1507             	move.b	(v_act).l,d0
00003DD2 D040                       	add.w	d0,d0
00003DD4 303B 0000                  	move.w	LevEvents_MMZ_Index(pc,d0.w),d0
00003DD8 4EFB 0000                  	jmp	LevEvents_MMZ_Index(pc,d0.w)
00003DDC                            
00003DDC                            ; -------------------------------------------------------------------------------
00003DDC                            
00003DDC                            LevEvents_MMZ_Index:
00003DDC 0000                       	dc.w	LevEvents_MMZ12-LevEvents_MMZ_Index
00003DDE 0000                       	dc.w	LevEvents_MMZ12-LevEvents_MMZ_Index
00003DE0 0000                       	dc.w	LevEvents_MMZ3-LevEvents_MMZ_Index
00003DE2                            
00003DE2                            ; -------------------------------------------------------------------------------
00003DE2                            
00003DE2                            LevEvents_MMZ12:
00003DE2 31FC 0710 F726             	move.w	#$710,(v_dest_btm_bound).w		; Set default bottom boundary
00003DE8 4E75                       	rts
00003DEA                            
00003DEA                            ; -------------------------------------------------------------------------------
00003DEA                            
00003DEA                            LevEvents_MMZ3:
00003DEA 4A38 F7A7                  	tst.b	(v_boss_flags).w			; Is the boss active?
00003DEE 6600                       	bne.s	.BossActive				; If so, branch
00003DF0 31FC 0310 F726             	move.w	#$310,(v_dest_btm_bound).w		; Set default bottom boundary
00003DF6 4E75                       	rts
00003DF8                            
00003DF8                            .BossActive:
00003DF8 303C 010C                  	move.w	#$10C,d0				; Set boundaries for the boss
00003DFC 31C0 F72C                  	move.w	d0,(v_top_bound).w
00003E00 31C0 F724                  	move.w	d0,(v_dest_top_bound).w
00003E04 31C0 F72E                  	move.w	d0,(v_bottom_bound).w
00003E08 31C0 F726                  	move.w	d0,(v_dest_btm_bound).w
00003E0C 4E75                       	rts
00003E0E                            
00003E0E                            ; -------------------------------------------------------------------------------
00003E0E                            ; Tidal Tempest level events
00003E0E                            ; -------------------------------------------------------------------------------
00003E0E                            
00003E0E                            LevEvents_TTZ:
00003E0E 7000                       	moveq	#0,d0					; Run act specific level events
00003E10 1039 00FF 1507             	move.b	(v_act).l,d0
00003E16 D040                       	add.w	d0,d0
00003E18 303B 0000                  	move.w	LevEvents_TTZ_Index(pc,d0.w),d0
00003E1C 4EFB 0000                  	jmp	LevEvents_TTZ_Index(pc,d0.w)
00003E20                            
00003E20                            ; -------------------------------------------------------------------------------
00003E20                            
00003E20                            LevEvents_TTZ_Index:
00003E20 0000                       	dc.w	LevEvents_TTZ1-LevEvents_TTZ_Index
00003E22 0000                       	dc.w	LevEvents_TTZ2-LevEvents_TTZ_Index
00003E24 0000                       	dc.w	LevEvents_TTZ3-LevEvents_TTZ_Index
00003E26                            
00003E26                            ; -------------------------------------------------------------------------------
00003E26                            
00003E26                            LevEvents_TTZ1:
00003E26 31FC 0510 F726             	move.w	#$510,(v_dest_btm_bound).w		; Set default bottom boundary
00003E2C 4E75                       	rts
00003E2E                            
00003E2E                            ; -------------------------------------------------------------------------------
00003E2E                            
00003E2E                            LevEvents_TTZ2:
00003E2E 0C38 002B D01C             	cmpi.b	#$2B,(v_player+oAnim).w			; Is the player giving up from boredom?
00003E34 6700                       	beq.s	.NoWrap					; If so, branch
00003E36 0C38 0006 D024             	cmpi.b	#6,(v_player+oRoutine).w		; Is the player dead?
00003E3C 6400                       	bcc.s	.NoWrap					; If so, branch
00003E3E                            
00003E3E 31FC 0800 F72E             	move.w	#$800,(v_bottom_bound).w		; Set bottom boundary for wrapping section
00003E44 31FC 0800 F726             	move.w	#$800,(v_dest_btm_bound).w
00003E4A 0C78 0200 F700             	cmpi.w	#$200,(v_cam_fg_x).w			; Is the camera's X position < $200?
00003E50 6500                       	bcs.s	.End					; If so, branch
00003E52                            
00003E52                            .NoWrap:
00003E52 31FC 0710 F72E             	move.w	#$710,(v_bottom_bound).w		; Set bottom boundary after the wrapping section
00003E58 31FC 0710 F726             	move.w	#$710,(v_dest_btm_bound).w
00003E5E                            
00003E5E                            .End:
00003E5E 4E75                       	rts
00003E60                            
00003E60                            ; -------------------------------------------------------------------------------
00003E60                            
00003E60                            LevEvents_TTZ3:
00003E60 303C 0AF8                  	move.w	#$AF8,d0				; Handle end of act 3 boundary
00003E64 323C 04C0                  	move.w	#$4C0,d1
00003E68 6100 0000                  	bsr.w	ChkSetAct3EndBounds
00003E6C 6600                       	bne.s	.End					; If the boundary was set, branch
00003E6E                            
00003E6E 4A38 F7A7                  	tst.b	(v_boss_flags).w			; Has the boss fight been started?
00003E72 6600                       	bne.s	.BossActive				; If so, branch
00003E74                            
00003E74                            .End:
00003E74 4E75                       	rts
00003E76                            
00003E76                            .BossActive:
00003E76 31FC 04F0 F72E             	move.w	#$4F0,(v_bottom_bound).w		; Set bottom boundary for the boss fight
00003E7C 31FC 04F0 F726             	move.w	#$4F0,(v_dest_btm_bound).w
00003E82 4E75                       	rts
00003E84                            
00003E84                            ; -------------------------------------------------------------------------------
00003E84                            ; Stardust Speedway level events
00003E84                            ; -------------------------------------------------------------------------------
00003E84                            
00003E84                            LevEvents_SSZ:
00003E84 7000                       	moveq	#0,d0					; Run act specific level events
00003E86 1039 00FF 1507             	move.b	(v_act).l,d0
00003E8C D040                       	add.w	d0,d0
00003E8E 303B 0000                  	move.w	LevEvents_SSZ_Index(pc,d0.w),d0
00003E92 4EFB 0000                  	jmp	LevEvents_SSZ_Index(pc,d0.w)
00003E96                            
00003E96                            ; -------------------------------------------------------------------------------
00003E96                            
00003E96                            LevEvents_SSZ_Index:
00003E96 0000                       	dc.w	LevEvents_SSZ1-LevEvents_SSZ_Index
00003E98 0000                       	dc.w	LevEvents_SSZ2-LevEvents_SSZ_Index
00003E9A 0000                       	dc.w	LevEvents_SSZ3-LevEvents_SSZ_Index
00003E9C                            
00003E9C                            ; -------------------------------------------------------------------------------
00003E9C                            
00003E9C                            LevEvents_SSZ1:
00003E9C 31FC 0510 F726             	move.w	#$510,(v_dest_btm_bound).w		; Set default bottom boundary
00003EA2 4E75                       	rts
00003EA4                            
00003EA4                            ; -------------------------------------------------------------------------------
00003EA4                            
00003EA4                            LevEvents_SSZ2:
00003EA4 31FC 0710 F726             	move.w	#$710,(v_dest_btm_bound).w		; Set default bottom boundary
00003EAA 4E75                       	rts
00003EAC                            
00003EAC                            ; -------------------------------------------------------------------------------
00003EAC                            
00003EAC                            LevEvents_SSZ3:
00003EAC 43F8 D000                  	lea	(v_player).w,a1				; Have we reached Metal Sonic?
00003EB0 0C69 0930 0008             	cmpi.w	#$930,oX(a1)
00003EB6 6C00                       	bge.s	.FoundMetalSonic			; If so, branch
00003EB8 31FC 0210 F726             	move.w	#$210,(v_dest_btm_bound).w		; If not, set default bottom boundary
00003EBE 4E75                       	rts
00003EC0                            
00003EC0                            .FoundMetalSonic:
00003EC0 0C69 0DC0 0008             	cmpi.w	#$DC0,oX(a1)				; Has the race started?
00003EC6 6D00                       	blt.s	.RaceStarted				; If so, branch
00003EC8 31FC 0210 F726             	move.w	#$210,(v_dest_btm_bound).w		; If not, set default bottom boundary
00003ECE 4E75                       	rts
00003ED0                            
00003ED0                            .RaceStarted:
00003ED0 303C 0120                  	move.w	#$120,d0				; Set bottom boundary for the race
00003ED4 3200                       	move.w	d0,d1
00003ED6 31C0 F726                  	move.w	d0,(v_dest_btm_bound).w
00003EDA                            
00003EDA 9278 F72E                  	sub.w	(v_bottom_bound).w,d1			; Is the current bottom boundary near the target?
00003EDE 6A00                       	bpl.s	.CheckNearBound
00003EE0 4441                       	neg.w	d1
00003EE2                            
00003EE2                            .CheckNearBound:
00003EE2 0C41 0004                  	cmpi.w	#4,d1
00003EE6 6C00                       	bge.s	.End					; If not, branch
00003EE8 31C0 F72E                  	move.w	d0,(v_bottom_bound).w			; Update bottom boundary
00003EEC                            
00003EEC                            .End:
00003EEC 4E75                       	rts
00003EEE                            
00003EEE                            ; -------------------------------------------------------------------------------
00003EEE                            ; Check if the end of act 3 boundaries should be set
00003EEE                            ; -------------------------------------------------------------------------------
00003EEE                            ; PARAMETERS:
00003EEE                            ;	d0.w	- X position in which boundaries are set
00003EEE                            ;	d1.w	- Bottom boundary value
00003EEE                            ; -------------------------------------------------------------------------------
00003EEE                            
00003EEE                            ChkSetAct3EndBounds:
00003EEE B078 D008                  	cmp.w	(v_player+oX).w,d0			; Has the player reached the point where boundaries should be set?
00003EF2 6F00                       	ble.s	SetAct3EndBounds			; If so, branch
00003EF4                            
00003EF4 7000                       	moveq	#0,d0					; Mark boundaries as not set
00003EF6 4E75                       	rts
00003EF8                            
00003EF8                            ; -------------------------------------------------------------------------------
00003EF8                            
00003EF8                            SetAct3EndBounds:
00003EF8 31C1 F726                  	move.w	d1,(v_dest_btm_bound).w			; Set bottom boundary
00003EFC                            
00003EFC 9278 F72E                  	sub.w	(v_bottom_bound).w,d1			; Is the current bottom boundary near the target?
00003F00 6A00                       	bpl.s	.CheckNearBound
00003F02 4441                       	neg.w	d1
00003F04                            
00003F04                            .CheckNearBound:
00003F04 0C41 0004                  	cmpi.w	#4,d1
00003F08 6C00                       	bge.s	.NoYLock				; If not, branch
00003F0A 31F8 F726 F72E             	move.w	(v_dest_btm_bound).w,(v_bottom_bound).w	; Update bottom boundary
00003F10                            
00003F10                            .NoYLock:
00003F10 3038 D008                  	move.w	(v_player+oX).w,d0			; Get player's position
00003F14 0440 00A0                  	subi.w	#320/2,d0
00003F18 B078 F728                  	cmp.w	(v_left_bound).w,d0			; Has the left boundary already been set?
00003F1C 6D00                       	blt.s	.BoundsSet				; If so, branch
00003F1E B078 F72A                  	cmp.w	(v_right_bound).w,d0			; Have we reached the right boundary?
00003F22 6F00                       	ble.s	.NoBoundSet				; If not, branch
00003F24 3038 F72A                  	move.w	(v_right_bound).w,d0			; Set to bound at the right boundary
00003F28                            
00003F28                            .NoBoundSet:
00003F28 31C0 F728                  	move.w	d0,(v_left_bound).w			; Update the left boundary
00003F2C 31C0 F720                  	move.w	d0,(v_dest_left_bound).w
00003F30                            
00003F30                            .BoundsSet:
00003F30 7001                       	moveq	#1,d0					; Mark boundaries as set
00003F32 4E75                       	rts
00003F34                            
00003F34                            ; -------------------------------------------------------------------------------
00003F34                            ; Run objects
00003F34                            ; -------------------------------------------------------------------------------
00003F34                            SpawnObject:
00003F34                            ObjectsLoad:
00003F34                            RunObjects:
00003F34 41F8 D000                  	lea	(v_objects).w,a0			; Prepare objects
00003F38 7E7F                       	moveq	#(v_objects_end-v_objects)/oVarLen-1,d7
00003F3A                            
00003F3A 7000                       	moveq	#0,d0					; Prepare to get object ID
00003F3C                            
00003F3C                            .Loop:
00003F3C 1010                       	move.b	(a0),d0					; Get object ID
00003F3E 6700                       	beq.s	.NextObj				; If it's 0, branch
00003F40                            
00003F40 D040                       	add.w	d0,d0					; Run object
00003F42 D040                       	add.w	d0,d0
00003F44 43F9 0000 0000             	lea	(ObjectIndex).l,a1
00003F4A 2271 00FC                  	movea.l	-4(a1,d0.w),a1
00003F4E 4E91                       	jsr	(a1)
00003F50                            
00003F50 7000                       	moveq	#0,d0					; Prepare to get object ID
00003F52                            
00003F52                            .NextObj:
00003F52 41E8 0040                  	lea	oVarLen(a0),a0				; Get next object
00003F56 51CF FFE4                  	dbf	d7,.Loop				; Loop until finished
00003F5A                            
00003F5A 4E75                       	rts
00003F5C                            
00003F5C                            ; -------------------------------------------------------------------------------
00003F5C                            ; Handle player movement with gravity
00003F5C                            ; -------------------------------------------------------------------------------
00003F5C                            ; PARAMETERS:
00003F5C                            ;	a0.l	- Player object RAM
00003F5C                            ; -------------------------------------------------------------------------------
00003F5C                            
00003F5C                            ObjMoveGrv:
00003F5C 2428 0008                  	move.l	oX(a0),d2				; Get position
00003F60 2628 000C                  	move.l	oY(a0),d3
00003F64                            
00003F64 3028 0010                  	move.w	oXVel(a0),d0				; Apply X velocity
00003F68 48C0                       	ext.l	d0
00003F6A E180                       	asl.l	#8,d0
00003F6C D480                       	add.l	d0,d2
00003F6E                            
00003F6E 3028 0012                  	move.w	oYVel(a0),d0				; Get Y velocity
00003F72                            
00003F72 0828 0003 002C             	btst	#3,oPlayerCtrl(a0)			; Is gravity disabled (ignores the 3D ramp)?
00003F78 6600                       	bne.s	.NoGravity				; If so, branch
00003F7A                            
00003F7A 6A00                       	bpl.s	.CheckGravity				; If we are moving downwards, branch
00003F7C                            
00003F7C 0828 0001 002C             	btst	#1,oPlayerCtrl(a0)			; Are we on a 3D ramp?
00003F82 6700                       	beq.s	.CheckGravity				; If not, branch
00003F84 0C68 F800 0012             	cmpi.w	#-$800,oYVel(a0)			; Are we going fast enough?
00003F8A 6500                       	bcs.s	.NoGravity				; If so, branch
00003F8C                            
00003F8C                            .CheckGravity:
00003F8C 0828 0002 002C             	btst	#2,oPlayerCtrl(a0)			; Is gravity disabled?
00003F92 6600                       	bne.s	.NoGravity				; If so, branch
00003F94 0668 0038 0012             	addi.w	#$38,oYVel(a0)				; Apply gravity
00003F9A                            
00003F9A                            .NoGravity:
00003F9A 4A68 0012                  	tst.w	oYVel(a0)				; Are we moving up?
00003F9E 6B00                       	bmi.s	.NoDownVelCap				; If so, branch
00003FA0 0C68 1000 0012             	cmpi.w	#$1000,oYVel(a0)			; Are we falling down too fast?
00003FA6 6500                       	bcs.s	.NoDownVelCap				; If not, branch
00003FA8 317C 1000 0012             	move.w	#$1000,oYVel(a0)			; Cap the fall speed
00003FAE                            
00003FAE                            .NoDownVelCap:
00003FAE 48C0                       	ext.l	d0					; Apply Y velocity
00003FB0 E180                       	asl.l	#8,d0
00003FB2 D680                       	add.l	d0,d3
00003FB4                            
00003FB4 2142 0008                  	move.l	d2,oX(a0)				; Update position
00003FB8 2143 000C                  	move.l	d3,oY(a0)
00003FBC 4E75                       	rts
00003FBE                            
00003FBE                            ; -------------------------------------------------------------------------------
00003FBE                            ; Handle player movement
00003FBE                            ; -------------------------------------------------------------------------------
00003FBE                            ; PARAMETERS:
00003FBE                            ;	a0.l	- Player object RAM
00003FBE                            ; -------------------------------------------------------------------------------
00003FBE                            
00003FBE                            ObjMove:
00003FBE 2428 0008                  	move.l	oX(a0),d2				; Get position
00003FC2 2628 000C                  	move.l	oY(a0),d3
00003FC6                            
00003FC6 3028 0010                  	move.w	oXVel(a0),d0				; Get X velocity
00003FCA                            
00003FCA 0828 0003 0022             	btst	#3,oStatus(a0)				; Are we standing on an object?
00003FD0 6700                       	beq.s	.NotOnObj				; If not, branch
00003FD2                            
00003FD2 7200                       	moveq	#0,d1					; Get the object we are standing on
00003FD4 1228 003D                  	move.b	oPlayerStandObj(a0),d1
00003FD8 ED49                       	lsl.w	#6,d1
00003FDA 0681 00FF D000             	addi.l	#v_objects&$FFFFFF,d1
00003FE0 2241                       	movea.l	d1,a1
00003FE2 0C11 001E                  	cmpi.b	#$1E,oID(a1)				; Is it a pinball flipper from CCZ?
00003FE6 6600                       	bne.s	.NotOnObj				; If not, branch
00003FE8                            
00003FE8 323C FF00                  	move.w	#-$100,d1				; Get resistance value
00003FEC 0829 0000 0022             	btst	#0,oStatus(a1)				; Is the object flipped?
00003FF2 6700                       	beq.s	.NotNeg					; If not, branch
00003FF4 4441                       	neg.w	d1					; Flip the resistance value
00003FF6                            
00003FF6                            .NotNeg:
00003FF6 D041                       	add.w	d1,d0					; Apply resistance on the X velocity
00003FF8                            
00003FF8                            .NotOnObj:
00003FF8 48C0                       	ext.l	d0					; Apply X velocity
00003FFA E180                       	asl.l	#8,d0
00003FFC D480                       	add.l	d0,d2
00003FFE                            
00003FFE 3028 0012                  	move.w	oYVel(a0),d0				; Apply Y velocity
00004002 48C0                       	ext.l	d0
00004004 E180                       	asl.l	#8,d0
00004006 D680                       	add.l	d0,d3
00004008                            
00004008 2142 0008                  	move.l	d2,oX(a0)				; Update position
0000400C 2143 000C                  	move.l	d3,oY(a0)
00004010 4E75                       	rts
00004012                            
00004012                            ; -------------------------------------------------------------------------------
00004012                            ; Draw an object's sprite
00004012                            ; -------------------------------------------------------------------------------
00004012                            ; PARAMETERS:
00004012                            ;	a0.l	- Object RAM
00004012                            ; -------------------------------------------------------------------------------
00004012                            DisplaySprite:
00004012                            DrawObject:
00004012 08A8 0007 0001             	bclr	#7,oRender(a0)				; Mark this object as offscreen
00004018                            
00004018 1028 0001                  	move.b	oRender(a0),d0				; Is this object to be drawn relative to a camera?
0000401C 0240 000C                  	andi.w	#$C,d0
00004020 6700 0000                  	beq.w	.DrawObj				; If not, branch
00004024                            
00004024 1028 0019                  	move.b	oWidth(a0),d0				; Is this object onscreen horizontally?
00004028 3628 0008                  	move.w	oX(a0),d3
0000402C 9678 F700                  	sub.w	(v_cam_fg_x).w,d3
00004030 3203                       	move.w	d3,d1
00004032 D240                       	add.w	d0,d1
00004034 6B00                       	bmi.s	.End					; If not, branch
00004036 3203                       	move.w	d3,d1
00004038 9240                       	sub.w	d0,d1
0000403A 0C41 0140                  	cmpi.w	#320,d1
0000403E 6C00                       	bge.s	.End					; If not, branch
00004040                            
00004040 1028 0016                  	move.b	oYRadius(a0),d0				; Get object Y position and radius
00004044 3628 000C                  	move.w	oY(a0),d3
00004048                            
00004048 0C78 0100 F704             	cmpi.w	#$100,(v_cam_fg_y).w			; Are we near the top of the screen?
0000404E 6400                       	bcc.s	.ChkBottomWrap				; If not, branch
00004050 0C43 0800                  	cmpi.w	#$800,d3				; Is this object at the bottom of the level?
00004054 6500                       	bcs.s	.CheckY					; If not, branch
00004056 0443 0800                  	subi.w	#$800,d3				; Wrap to the top of the screen
0000405A 6000                       	bra.s	.CheckY
0000405C                            
0000405C                            .ChkBottomWrap:
0000405C 0C78 0700 F704             	cmpi.w	#$700,(v_cam_fg_y).w			; Are we near the bottom of the screen?
00004062 6500                       	bcs.s	.CheckY					; If not, branch
00004064 0C43 0100                  	cmpi.w	#$100,d3				; Is this object at the top of the level?
00004068 6400                       	bcc.s	.CheckY					; If not, branch
0000406A 0643 0800                  	addi.w	#$800,d3				; Wrap to the bottom of the screen
0000406E                            
0000406E                            .CheckY:
0000406E 9678 F704                  	sub.w	(v_cam_fg_y).w,d3			; Is this object onscreen vertically?
00004072 3203                       	move.w	d3,d1
00004074 D240                       	add.w	d0,d1
00004076 6B00                       	bmi.s	.End					; If not, branch
00004078 3203                       	move.w	d3,d1
0000407A 9240                       	sub.w	d0,d1
0000407C 0C41 00E0                  	cmpi.w	#$E0,d1
00004080 6C00                       	bge.s	.End					; If not, branch
00004082                            
00004082                            .DrawObj:
00004082 43F8 AC00                  	lea	(v_obj_draw_queue).w,a1			; Get the object draw queue for this object's priority level
00004086 3028 0018                  	move.w	oPriority(a0),d0
0000408A E248                       	lsr.w	#1,d0
0000408C 0240 0380                  	andi.w	#$380,d0
00004090 D2C0                       	adda.w	d0,a1
00004092                            
00004092 0C51 007E                  	cmpi.w	#$7E,(a1)				; Is the queue full?
00004096 6400                       	bcc.s	.End					; If so, branch
00004098 5451                       	addq.w	#2,(a1)					; Add this object to the queue
0000409A D2D1                       	adda.w	(a1),a1
0000409C 3288                       	move.w	a0,(a1)
0000409E                            
0000409E                            .End:
0000409E 4E75                       	rts
000040A0                            
000040A0                            ; -------------------------------------------------------------------------------
000040A0                            ; Draw another object's sprite
000040A0                            ; -------------------------------------------------------------------------------
000040A0                            ; PARAMETERS:
000040A0                            ;	a1.l	- Object RAM
000040A0                            ; -------------------------------------------------------------------------------
000040A0                            DisplaySprite1:
000040A0                            DrawOtherObject:
000040A0 45F8 AC00                  	lea	(v_obj_draw_queue).w,a2			; Get the object draw queue for this object's priority level
000040A4 3029 0018                  	move.w	$18(a1),d0
000040A8 E248                       	lsr.w	#1,d0
000040AA 0240 0380                  	andi.w	#$380,d0
000040AE D4C0                       	adda.w	d0,a2
000040B0                            
000040B0 0C52 007E                  	cmpi.w	#$7E,(a2)				; Is the queue full?
000040B4 6400                       	bcc.s	.End					; If so, branch
000040B6 5452                       	addq.w	#2,(a2)					; Add this object to the queue
000040B8 D4D2                       	adda.w	(a2),a2
000040BA 3489                       	move.w	a1,(a2)
000040BC                            
000040BC                            .End:
000040BC 4E75                       	rts
000040BE                            
000040BE                            ; -------------------------------------------------------------------------------
000040BE                            ; Make an object delete itself
000040BE                            ; -------------------------------------------------------------------------------
000040BE                            ; PARAMETERS:
000040BE                            ;	a0.l	- Object RAM
000040BE                            ; -------------------------------------------------------------------------------
000040BE                            
000040BE                            DeleteObject:
000040BE 2248                       	movea.l	a0,a1					; Clear object slot RAM
000040C0 7200                       	moveq	#0,d1
000040C2 700F                       	moveq	#oVarLen/4-1,d0
000040C4                            
000040C4                            .Clear:
000040C4 22C1                       	move.l	d1,(a1)+
000040C6 51C8 FFFC                  	dbf	d0,.Clear
000040CA                            
000040CA 4E75                       	rts
000040CC                            
000040CC                            ; -------------------------------------------------------------------------------
000040CC                            ; Draw all of the queued object sprites
000040CC                            ; -------------------------------------------------------------------------------
000040CC                            
000040CC                            ObjDrawCameras:
000040CC 0000 0000                  	dc.l	0					; Absolute position
000040D0 00FF F700                  	dc.l	v_cam_fg_x&$FFFFFF			; Relative to FG camera
000040D4 00FF F708                  	dc.l	v_cam_bg_x&$FFFFFF			; Relative to BG camera
000040D8 00FF F718                  	dc.l	v_cam_bg3_x&$FFFFFF			; Relative to BG3 camera
000040DC                            
000040DC                            ; -------------------------------------------------------------------------------
000040DC                            BuildSprites:
000040DC                            DrawObjects:
000040DC 45F8 F800                  	lea	(v_sprites).w,a2			; Prepare sprite table cache
000040E0 7A00                       	moveq	#0,d5					; Prepare sprite counter
000040E2 49F8 AC00                  	lea	(v_obj_draw_queue).w,a4			; Prepare object draw queue
000040E6                            
000040E6 7E07                       	moveq	#8-1,d7					; Number of priority levels
000040E8                            
000040E8                            .LevelLoop:
000040E8 4A54                       	tst.w	(a4)					; Does this priority level's queue have any entries?
000040EA 6700 0000                  	beq.w	.NextLevel				; If not, branch
000040EE 7C02                       	moveq	#2,d6					; Prepare to go through the queue
000040F0                            
000040F0                            .ObjLoop:
000040F0 3074 6000                  	movea.w	(a4,d6.w),a0				; Get entry object RAM
000040F4                            
000040F4 4A10                       	tst.b	(a0)					; Is this object loaded?
000040F6 6700 0000                  	beq.w	.NextObj				; If not, branch
000040FA                            
000040FA 1028 0001                  	move.b	oRender(a0),d0				; Is this object to be drawn relative to a camera?
000040FE 1800                       	move.b	d0,d4
00004100 0240 000C                  	andi.w	#$C,d0
00004104 6700 0000                  	beq.w	.ScreenPos				; If not, branch
00004108                            
00004108 227B 00C2                  	movea.l	ObjDrawCameras(pc,d0.w),a1		; Get camera that the object is relative to
0000410C                            
0000410C 7000                       	moveq	#0,d0					; Get object's X position onscreen
0000410E 1028 0019                  	move.b	oWidth(a0),d0
00004112 3628 0008                  	move.w	oX(a0),d3
00004116 9651                       	sub.w	(a1),d3
00004118 0643 0080                  	addi.w	#128,d3
0000411C                            
0000411C 7000                       	moveq	#0,d0					; Get object's Y position
0000411E 1028 0016                  	move.b	oYRadius(a0),d0
00004122 3428 000C                  	move.w	oY(a0),d2
00004126 0C69 0100 0004             	cmpi.w	#$100,4(a1)				; Is the camera near the top of the level?
0000412C 6400                       	bcc.s	.ChkBottomWrap				; If not, branch
0000412E 0C42 0800                  	cmpi.w	#$800,d2				; Is this object near the bottom of the level?
00004132 6500                       	bcs.s	.EndWrap				; If not, branch
00004134 0442 0800                  	subi.w	#$800,d2				; Wrap the object to the top of the screen
00004138 6000                       	bra.s	.EndWrap
0000413A                            
0000413A                            .ChkBottomWrap:
0000413A 0C69 0700 0004             	cmpi.w	#$700,4(a1)				; Is the camera near the bottom of the level?
00004140 6500                       	bcs.s	.EndWrap				; If not, branch
00004142 0C42 0100                  	cmpi.w	#$100,d2				; Is this object near the top of the level?
00004146 6400                       	bcc.s	.EndWrap				; If not, branch
00004148 0642 0800                  	addi.w	#$800,d2				; Wrap the object to the bottom of the screen
0000414C                            
0000414C                            .EndWrap:
0000414C 9469 0004                  	sub.w	4(a1),d2				; Get object's Y position onscreen
00004150 0642 0080                  	addi.w	#128,d2
00004154 6000                       	bra.s	.DrawSprite
00004156                            
00004156                            .ScreenPos:
00004156 3428 000A                  	move.w	oYScr(a0),d2				; The object's position is an absolute screen position
0000415A 3628 0008                  	move.w	oX(a0),d3
0000415E 6000                       	bra.s	.DrawSprite
00004160                            
00004160                            ; -------------------------------------------------------------------------------
00004160                            ; Dead code. It's a leftover from Sonic 1, in which if bit 4 of the object's
00004160                            ; render flags is clear, it ignores the object's Y radius for its Y position
00004160                            ; onscreen check. However, since DrawObject handles the onscreen check now, this
00004160                            ; is left unused.
00004160                            ; -------------------------------------------------------------------------------
00004160                            
00004160                            
00004160                            .NoYRadChk:
00004160 3428 000C                  	move.w	oY(a0),d2				; Get object's Y position onscreen
00004164 9469 0004                  	sub.w	4(a1),d2
00004168 0642 0080                  	addi.w	#128,d2
0000416C 0C42 0060                  	cmpi.w	#0-32+128,d2				; Is it onscreen?
00004170 6500                       	bcs.s	.NextObj				; If not, branch
00004172 0C42 0180                  	cmpi.w	#224+32+128,d2
00004176 6400                       	bcc.s	.NextObj				; If not, branch
00004178                            
00004178                            ; -------------------------------------------------------------------------------
00004178                            
00004178                            .DrawSprite:
00004178 2268 0004                  	movea.l	oMap(a0),a1				; Get object mappings
0000417C 7200                       	moveq	#0,d1
0000417E 0804 0005                  	btst	#5,d4					; Is the pointer to the mappings a pointer to static mappings data?
00004182 6600                       	bne.s	.StaticMap				; If so, branch
00004184                            
00004184 1228 001A                  	move.b	oMapFrame(a0),d1			; Get pointer to the object's frame mappings
00004188 D241                       	add.w	d1,d1
0000418A D2F1 1000                  	adda.w	(a1,d1.w),a1
0000418E                            
0000418E 7200                       	moveq	#0,d1					; Get number of pieces to draw
00004190 1219                       	move.b	(a1)+,d1
00004192 5301                       	subq.b	#1,d1
00004194 6B00                       	bmi.s	.DrawDone				; If there are no pieces to draw, branch
00004196                            
00004196                            .StaticMap:
00004196 6100 0000                  	bsr.w	DrawSprite				; Draw the sprite
0000419A                            
0000419A                            .DrawDone:
0000419A 08E8 0007 0001             	bset	#7,oRender(a0)				; Mark the object as onscreen
000041A0                            
000041A0                            .NextObj:
000041A0 5446                       	addq.w	#2,d6					; Next entry in the draw queue
000041A2 5554                       	subq.w	#2,(a4)					; Decrement queue entry count
000041A4 6600 FF4A                  	bne.w	.ObjLoop				; If we haven't run out, branch
000041A8                            
000041A8                            .NextLevel:
000041A8 49EC 0080                  	lea	$80(a4),a4				; Next priority level draw queue
000041AC 51CF FF3A                  	dbf	d7,.LevelLoop				; Loop until all the priority levels have been gone through
000041B0                            
000041B0 11C5 F62C                  	move.b	d5,(v_sprite_count).w			; Save sprite count
000041B4 0C05 0050                  	cmpi.b	#80,d5					; Is the sprite table full?
000041B8 6700                       	beq.s	.TableFull				; If so, branch
000041BA                            
000041BA 24BC 0000 0000             	move.l	#0,(a2)					; Mark the current sprite table entry as the last
000041C0 4E75                       	rts
000041C2                            
000041C2                            .TableFull:
000041C2 157C 0000 FFFB             	move.b	#0,-5(a2)				; Mark the last sprite table entry as the last
000041C8 4E75                       	rts
000041CA                            
000041CA                            ; -------------------------------------------------------------------------------
000041CA                            ; Draw a sprite from mappings data
000041CA                            ; -------------------------------------------------------------------------------
000041CA                            ; PARAMETERS:
000041CA                            ;	d1.w	- Sprite piece count
000041CA                            ;	d2.w	- Y position
000041CA                            ;	d3.w	- X position
000041CA                            ;	d4.b	- Render flags
000041CA                            ;	d5.b	- Previous sprite link value
000041CA                            ;	a0.l	- Object RAM
000041CA                            ;	a1.l	- Sprite mappings data pointer
000041CA                            ;	a2.l	- Sprite table cache pointer
000041CA                            ; -------------------------------------------------------------------------------
000041CA                            
000041CA                            DrawSprite:
000041CA 3668 0002                  	movea.w	oTile(a0),a3				; Get base tile
000041CE                            
000041CE 0804 0000                  	btst	#0,d4					; Is the sprite flipped horizontally?
000041D2 6600                       	bne.s	DrawSprite_FlipX			; If so, branch
000041D4 0804 0001                  	btst	#1,d4					; Is the sprite flipped vertically?
000041D8 6600 0000                  	bne.w	DrawSprite_FlipY			; If so, branch
000041DC                            
000041DC                            .Loop:
000041DC 0C05 0050                  	cmpi.b	#80,d5					; Is the sprite table full?
000041E0 6700                       	beq.s	.End					; If so, branch
000041E2                            
000041E2 1019                       	move.b	(a1)+,d0				; Set Y position
000041E4 4880                       	ext.w	d0
000041E6 D042                       	add.w	d2,d0
000041E8 34C0                       	move.w	d0,(a2)+
000041EA                            
000041EA 14D9                       	move.b	(a1)+,(a2)+				; Set sprite size
000041EC                            
000041EC 5205                       	addq.b	#1,d5					; Set sprite link
000041EE 14C5                       	move.b	d5,(a2)+
000041F0                            
000041F0 1019                       	move.b	(a1)+,d0				; Set sprite tile
000041F2 E148                       	lsl.w	#8,d0
000041F4 1019                       	move.b	(a1)+,d0
000041F6 D04B                       	add.w	a3,d0
000041F8 34C0                       	move.w	d0,(a2)+
000041FA                            
000041FA 1019                       	move.b	(a1)+,d0				; Set X position
000041FC 4880                       	ext.w	d0
000041FE D043                       	add.w	d3,d0
00004200 0240 01FF                  	andi.w	#$1FF,d0
00004204 6600                       	bne.s	.SetX
00004206 5240                       	addq.w	#1,d0
00004208                            
00004208                            .SetX:
00004208 34C0                       	move.w	d0,(a2)+
0000420A                            
0000420A 51C9 FFD0                  	dbf	d1,.Loop				; Loop until all pieces are drawn
0000420E                            
0000420E                            .End:
0000420E 4E75                       	rts
00004210                            
00004210                            ; -------------------------------------------------------------------------------
00004210                            
00004210                            DrawSprite_FlipX:
00004210 0804 0001                  	btst	#1,d4					; Is the sprite flipped vertically?
00004214 6600 0000                  	bne.w	DrawSprite_FlipXY
00004218                            
00004218                            .Loop:
00004218 0C05 0050                  	cmpi.b	#80,d5					; Is the sprite table full?
0000421C 6700                       	beq.s	.End					; If so, branch
0000421E                            
0000421E 1019                       	move.b	(a1)+,d0				; Set Y position
00004220 4880                       	ext.w	d0
00004222 D042                       	add.w	d2,d0
00004224 34C0                       	move.w	d0,(a2)+
00004226                            
00004226 1819                       	move.b	(a1)+,d4				; Set sprite size
00004228 14C4                       	move.b	d4,(a2)+
0000422A                            
0000422A 5205                       	addq.b	#1,d5					; Set sprite link
0000422C 14C5                       	move.b	d5,(a2)+
0000422E                            
0000422E 1019                       	move.b	(a1)+,d0				; Set sprite tile
00004230 E148                       	lsl.w	#8,d0
00004232 1019                       	move.b	(a1)+,d0
00004234 D04B                       	add.w	a3,d0
00004236 0A40 0800                  	eori.w	#$800,d0
0000423A 34C0                       	move.w	d0,(a2)+
0000423C                            
0000423C 1019                       	move.b	(a1)+,d0				; Set X position
0000423E 4880                       	ext.w	d0
00004240 4440                       	neg.w	d0
00004242 D804                       	add.b	d4,d4
00004244 0244 0018                  	andi.w	#$18,d4
00004248 5044                       	addq.w	#8,d4
0000424A 9044                       	sub.w	d4,d0
0000424C D043                       	add.w	d3,d0
0000424E 0240 01FF                  	andi.w	#$1FF,d0
00004252 6600                       	bne.s	.SetX
00004254 5240                       	addq.w	#1,d0
00004256                            
00004256                            .SetX:
00004256 34C0                       	move.w	d0,(a2)+
00004258                            
00004258 51C9 FFBE                  	dbf	d1,.Loop				; Loop until all pieces are drawn
0000425C                            
0000425C                            .End:
0000425C 4E75                       	rts
0000425E                            
0000425E                            ; -------------------------------------------------------------------------------
0000425E                            
0000425E                            DrawSprite_FlipY:
0000425E                            .Loop:
0000425E 0C05 0050                  	cmpi.b	#80,d5					; Is the sprite table full?
00004262 6700                       	beq.s	.End					; If so, branch
00004264                            
00004264 1019                       	move.b	(a1)+,d0				; Set Y position
00004266 1811                       	move.b	(a1),d4
00004268 4880                       	ext.w	d0
0000426A 4440                       	neg.w	d0
0000426C E70C                       	lsl.b	#3,d4
0000426E 0244 0018                  	andi.w	#$18,d4
00004272 5044                       	addq.w	#8,d4
00004274 9044                       	sub.w	d4,d0
00004276 D042                       	add.w	d2,d0
00004278 34C0                       	move.w	d0,(a2)+
0000427A                            
0000427A 14D9                       	move.b	(a1)+,(a2)+				; Set sprite size
0000427C                            
0000427C 5205                       	addq.b	#1,d5					; Set sprite link
0000427E 14C5                       	move.b	d5,(a2)+
00004280                            
00004280 1019                       	move.b	(a1)+,d0				; Set sprite tile
00004282 E148                       	lsl.w	#8,d0
00004284 1019                       	move.b	(a1)+,d0
00004286 D04B                       	add.w	a3,d0
00004288 0A40 1000                  	eori.w	#$1000,d0
0000428C 34C0                       	move.w	d0,(a2)+
0000428E                            
0000428E 1019                       	move.b	(a1)+,d0				; Set X position
00004290 4880                       	ext.w	d0
00004292 D043                       	add.w	d3,d0
00004294 0240 01FF                  	andi.w	#$1FF,d0
00004298 6600                       	bne.s	.SetX
0000429A 5240                       	addq.w	#1,d0
0000429C                            
0000429C                            .SetX:
0000429C 34C0                       	move.w	d0,(a2)+
0000429E                            
0000429E 51C9 FFBE                  	dbf	d1,.Loop				; Loop until all pieces are drawn
000042A2                            
000042A2                            .End:
000042A2 4E75                       	rts
000042A4                            
000042A4                            ; -------------------------------------------------------------------------------
000042A4                            
000042A4                            DrawSprite_FlipXY:
000042A4                            .Loop:
000042A4 0C05 0050                  	cmpi.b	#80,d5					; Is the sprite table full?
000042A8 6700                       	beq.s	.End					; If so, branch
000042AA                            
000042AA 1019                       	move.b	(a1)+,d0				; Set Y position
000042AC 1811                       	move.b	(a1),d4
000042AE 4880                       	ext.w	d0
000042B0 4440                       	neg.w	d0
000042B2 E70C                       	lsl.b	#3,d4
000042B4 0244 0018                  	andi.w	#$18,d4
000042B8 5044                       	addq.w	#8,d4
000042BA 9044                       	sub.w	d4,d0
000042BC D042                       	add.w	d2,d0
000042BE 34C0                       	move.w	d0,(a2)+
000042C0                            
000042C0 1819                       	move.b	(a1)+,d4				; Set sprite size
000042C2 14C4                       	move.b	d4,(a2)+
000042C4                            
000042C4 5205                       	addq.b	#1,d5					; Set sprite link
000042C6 14C5                       	move.b	d5,(a2)+
000042C8                            
000042C8 1019                       	move.b	(a1)+,d0				; Set sprite tile
000042CA E148                       	lsl.w	#8,d0
000042CC 1019                       	move.b	(a1)+,d0
000042CE D04B                       	add.w	a3,d0
000042D0 0A40 1800                  	eori.w	#$1800,d0
000042D4 34C0                       	move.w	d0,(a2)+
000042D6                            
000042D6 1019                       	move.b	(a1)+,d0				; Set X position
000042D8 4880                       	ext.w	d0
000042DA 4440                       	neg.w	d0
000042DC D804                       	add.b	d4,d4
000042DE 0244 0018                  	andi.w	#$18,d4
000042E2 5044                       	addq.w	#8,d4
000042E4 9044                       	sub.w	d4,d0
000042E6 D043                       	add.w	d3,d0
000042E8 0240 01FF                  	andi.w	#$1FF,d0
000042EC 6600                       	bne.s	.SetX
000042EE 5240                       	addq.w	#1,d0
000042F0                            
000042F0                            .SetX:
000042F0 34C0                       	move.w	d0,(a2)+
000042F2                            
000042F2 51C9 FFB0                  	dbf	d1,.Loop				; Loop until all pieces are drawn
000042F6                            
000042F6                            .End:
000042F6 4E75                       	rts
000042F8                            
000042F8                            ; -------------------------------------------------------------------------------
000042F8                            ; Check if an object is onscreen
000042F8                            ; -------------------------------------------------------------------------------
000042F8                            ; PARAMETERS:
000042F8                            ;	a0.l	- Object RAM
000042F8                            ; -------------------------------------------------------------------------------
000042F8                            
000042F8                            ChkObjOnScreen:
000042F8 3028 0008                  	move.w	oX(a0),d0				; Is the object onscreen horizontally?
000042FC 9078 F700                  	sub.w	(v_cam_fg_x).w,d0
00004300 6B00                       	bmi.s	.OffScreen				; If not, branch
00004302 0C40 0140                  	cmpi.w	#320,d0
00004306 6C00                       	bge.s	.OffScreen				; If not, branch
00004308                            
00004308 3228 000C                  	move.w	oY(a0),d1				; Is the object onscreen vertically?
0000430C 9278 F704                  	sub.w	(v_cam_fg_y).w,d1
00004310 6B00                       	bmi.s	.OffScreen				; If not, branch
00004312 0C41 00E0                  	cmpi.w	#224,d1
00004316 6C00                       	bge.s	.OffScreen				; If not, branch
00004318                            
00004318 7000                       	moveq	#0,d0					; Mark as onscreen
0000431A 4E75                       	rts
0000431C                            
0000431C                            .OffScreen:
0000431C 7001                       	moveq	#1,d0					; Mark as offscreen
0000431E 4E75                       	rts
00004320                            
00004320                            ; -------------------------------------------------------------------------------
00004320                            
00004320                            ChkObjOnScrWidth:
00004320 7200                       	moveq	#0,d1					; Is the object onscreen horizontally?
00004322 1228 0019                  	move.b	oWidth(a0),d1
00004326 3028 0008                  	move.w	oX(a0),d0
0000432A 9078 F700                  	sub.w	(v_cam_fg_x).w,d0
0000432E D041                       	add.w	d1,d0
00004330 6B00                       	bmi.s	.OffScreen				; If not, branch
00004332 D241                       	add.w	d1,d1
00004334 9041                       	sub.w	d1,d0
00004336 0C40 0140                  	cmpi.w	#320,d0
0000433A 6C00                       	bge.s	.OffScreen				; If not, branch
0000433C                            
0000433C 3228 000C                  	move.w	oY(a0),d1				; Is the object onscreen vertically?
00004340 9278 F704                  	sub.w	(v_cam_fg_y).w,d1
00004344 6B00                       	bmi.s	.OffScreen				; If not, branch
00004346 0C41 00E0                  	cmpi.w	#224,d1
0000434A 6C00                       	bge.s	.OffScreen				; If not, branch
0000434C                            
0000434C 7000                       	moveq	#0,d0					; Mark as onscreen
0000434E 4E75                       	rts
00004350                            
00004350                            .OffScreen:
00004350 7001                       	moveq	#1,d0					; Mark as offscreen
00004352 4E75                       	rts
00004354                            
00004354                            ; -------------------------------------------------------------------------------
00004354                            ; Object index
00004354                            ; -------------------------------------------------------------------------------
00004354                            
00004354                            ObjectIndex:
00004354 0000 0000                  	dc.l	ObjSonic				; 01 - Sonic
00004358 0000 0000                  	dc.l	ObjSonic				; 02 - Player 2 Sonic
0000435C 0000 0000                  	dc.l	ObjPowerup				; 03 - Power up
00004360 0000 0000                  	dc.l	ObjWaterfall				; 04 - Unused (broken) waterfall generator
00004364 0000 0000                  	dc.l	ObjNull5				; 05 - Blank
00004368 0000 0000                  	dc.l	ObjUnusedBadnik				; 06 - Unused badnik
0000436C 0000 0000                  	dc.l	ObjSpinTunnel				; 07 - Spin tunnel
00004370 0000 0000                  	dc.l	ObjNull8				; 08 - Blank
00004374 0000 0000                  	dc.l	ObjRotPlatform				; 09 - Rotating platform
00004378 0000 0000                  	dc.l	ObjSpring				; 0A - Spring
0000437C 0000 0000                  	dc.l	ObjWaterSplash				; 0B - Water splash
00004380 0000 0000                  	dc.l	ObjUnkC					; 0C - Unknown
00004384 0000 0000                  	dc.l	ObjFlapDoorH				; 0D - Horizontal flap door
00004388 0000 0000                  	dc.l	ObjWaterfallSplash			; 0E - Waterfall splash
0000438C 0000 0000                  	dc.l	ObjMovingSpring				; 0F - Moving spring
00004390 0000 0000                  	dc.l	ObjRing					; 10 - Ring
00004394 0000 0000                  	dc.l	ObjLostRing				; 11 - Lost ring
00004398 0000 0000                  	dc.l	ObjSmallPlatform			; 12 - Small platform
0000439C 0000 0000                  	dc.l	ObjCheckpoint				; 13 - Checkpoint
000043A0 0000 0000                  	dc.l	ObjBigRing				; 14 - Big ring
000043A4 0000 0000                  	dc.l	ObjCapsule				; 15 - Flower capsule
000043A8 0000 0000                  	dc.l	ObjGoalPost				; 16 - Goal post
000043AC 0000 0000                  	dc.l	ObjSignpost				; 17 - Signpost
000043B0 0000 0000                  	dc.l	ObjExplosion				; 18 - Explosion
000043B4 0000 0000                  	dc.l	ObjMonitor_Timepost			; 19 - Monitor/Time post
000043B8 0000 0000                  	dc.l	ObjMonitorContents			; 1A - Monitor contents
000043BC 0000 0000                  	dc.l	ObjGrayRock				; 1B - Gray rock
000043C0 0000 0000                  	dc.l	ObjHUD_Points				; 1C - HUD/Points
000043C4 0000 0000                  	dc.l	ObjDelete				; 1D - Blank
000043C8 0000 0000                  	dc.l	ObjDelete				; 1E - Blank (CCZ flipper)
000043CC 0000 0000                  	dc.l	ObjFlower				; 1F - Flower
000043D0 0000 0000                  	dc.l	ObjCollapsePlatform			; 20 - Collaping platform
000043D4 0000 0000                  	dc.l	ObjPlatform				; 21 - Platform
000043D8 0000 0000                  	dc.l	ObjTamabboh				; 22 - Tamabboh badnik/projectiles
000043DC 0000 0000                  	dc.l	ObjNull23				; 23 - Blank
000043E0 0000 0000                  	dc.l	ObjAnimal				; 24 - Animal
000043E4 0000 0000                  	dc.l	ObjDelete				; 25 - Blank
000043E8 0000 0000                  	dc.l	ObjSpikes				; 26 - Spikes
000043EC 0000 0000                  	dc.l	ObjDelete				; 27 - Blank
000043F0 0000 0000                  	dc.l	ObjSpringBoard				; 28 - Springboard
000043F4 0000 0000                  	dc.l	ObjDelete				; 29 - Blank
000043F8 0000 0000                  	dc.l	Obj3DRamp				; 2A - 3D ramp marker
000043FC 0000 0000                  	dc.l	ObjDelete				; 2B - Blank
00004400 0000 0000                  	dc.l	Obj3DPlant				; 2C - Plant surrounding 3D ramp
00004404 0000 0000                  	dc.l	ObjRobotGenerator			; 2D - Robot generator
00004408 0000 0000                  	dc.l	ObjProjector				; 2E - Metal Sonic holographic projector
0000440C 0000 0000                  	dc.l	ObjAmyRose				; 2F - Amy Rose
00004410 0000 0000                  	dc.l	ObjAmyHeart				; 30 - Amy Rose heart
00004414 0000 0000                  	dc.l	ObjSonicHole				; 31 - Sonic hole
00004418 0000 0000                  	dc.l	ObjDelete				; 32 - Blank - Important to Boss!
0000441C 0000 0000                  	dc.l	ObjHollowLogBG				; 33 - Hollow log background
00004420 0000 0000                  	dc.l	ObjForceSpin				; 34 - Force spin marker
00004424 0000 0000                  	dc.l	ObjFlapDoorV				; 35 - Vertical flap door
00004428 0000 0000                  	dc.l	ObjBreakableWall			; 36 - Breakable wall
0000442C 0000 0000                  	dc.l	ObjDelete				; 37 - Blank
00004430 0000 0000                  	dc.l	ObjDelete				; 38 - Blank
00004434 0000 0000                  	dc.l	ObjDelete				; 39 - Blank
00004438 0000 0000                  	dc.l	ObjResults				; 3A - End of level results
0000443C 0000 0000                  	dc.l	ObjGameOver				; 3B - Game over text
00004440 0000 0000                  	dc.l	ObjTitleCard				; 3C - Title card
00004444 0000 0000                  	dc.l	ObjMosqui				; 3D - Mosqui badnik
00004448 0000 0000                  	dc.l	ObjPataBata				; 3E - Pata-Bata badnik
0000444C 0000 0000                  	dc.l	ObjAnton				; 3F - Anton badnik
00004450 0000 0000                  	dc.l	ObjTagaTaga				; 40 - Taga-Taga badnik
00004454 0000 0000                  	dc.l    ObjTitleSonic           ; 41 - Sonic in TitleScreen
00004458 0000 0000                  	dc.l    ObjBossEggman           ; 42 - PPZ Boss ($2A in OG MMD)
0000445C 0000 0000                  	dc.l    ObjBossBody             ; 43 - PPZ Boss Body ($2B in OG MMD)
00004460 0000 0000                  	dc.l    ObjBossThigh            ; 44 - PPZ Boss Thigh ($2C in OG MMD)
00004464 0000 0000                  	dc.l    ObjBossCalf             ; 45 - PPZ Boss Calf ($2D in OG MMD)
00004468 0000 0000                  	dc.l    ObjBossFoot             ; 46 - PPZ Boss Foot ($2E in OG MMD)
0000446C 0000 0000                  	dc.l    ObjBossElbow            ; 47 - PPZ Boss Elbow ($2F in OG MMD)
00004470 0000 0000                  	dc.l    ObjBossUpperArm         ; 48 - PPZ Boss Upper Arm ($30 in OG MMD)
00004474 0000 0000                  	dc.l    ObjBossForearm          ; 49 - PPZ Boss Fore Arm ($31 in OG MMD)
00004478 0000 0000                  	dc.l    ObjBossBumper           ; 4A - PPZ Boss Bumper ($32 in OG MMD)
0000447C 0000 0000                  	dc.l    TitleMenu               ; 4B - Free Slot
00004480                            
00004480                            ; -------------------------------------------------------------------------------
00004480                            ; An object that deletes itself
00004480                            ; -------------------------------------------------------------------------------
00004480                            
00004480                            ObjDelete:
00004480 10BC 0000                  	move.b	#0,(a0)
00004484 4E75                       	rts
00004486                            
00004486                            ; -------------------------------------------------------------------------------
00004486                            ; Sonic object
00004486                            ; -------------------------------------------------------------------------------
00004486                            
00004486                            ; -------------------------------------------------------------------------------
00004486                            ; Check to see if Sonic should give up from boredom
00004486                            ; -------------------------------------------------------------------------------
00004486                            
00004486                            ObjSonic_ChkBoredom:
00004486 43F8 F780                  	lea	(v_bored_timer).w,a1			; Get boredom timer
0000448A                            
0000448A 0C28 0005 001C             	cmpi.b	#5,oAnim(a0)				; Is the player idle?
00004490 6700                       	beq.s	.WaitAnim				; If so, branch
00004492                            
00004492 32BC 0000                  	move.w	#0,(a1)					; Reset the boredom timer
00004496 4E75                       	rts
00004498                            
00004498                            .WaitAnim:
00004498 4A51                       	tst.w	(a1)					; Is the timer active?
0000449A 6600                       	bne.s	.TimerGoing				; If so, branch
0000449C 137C 0001 0001             	move.b	#1,1(a1)				; Make the timer active
000044A2                            
000044A2                            .TimerGoing:
000044A2 0C51 2A30                  	cmpi.w	#3*60*60,(a1)				; Have 3 minutes passed?
000044A6 6500                       	bcs.s	.End					; If not, branch
000044A8                            
000044A8 32BC 0000                  	move.w	#0,(a1)					; Stop the timer
000044AC                            
000044AC 117C 002B 001C             	move.b	#$2B,oAnim(a0)				; Set the player's animation accordingly
000044B2 0028 0080 0002             	ori.b	#$80,oTile(a0)
000044B8 117C 0000 0018             	move.b	#0,oPriority(a0)
000044BE                            
000044BE 13FC 0001 00FF 1508        	move.b	#1,(v_life_count).l			; Make it so a game over happens
000044C6                            
000044C6 317C FB00 0012             	move.w	#-$500,oYVel(a0)			; Make the player jump
000044CC 317C 0100 0010             	move.w	#$100,oXVel(a0)
000044D2 0828 0000 0022             	btst	#0,oStatus(a0)
000044D8 6700                       	beq.s	.GotXVel
000044DA 4468 0010                  	neg.w	oXVel(a0)
000044DE                            
000044DE                            .GotXVel:
000044DE 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)
000044E4                            
000044E4 303C 0089                  	move.w	#$89,d0					; Play "I'm outta here" sound
000044E8 4EB8 2708                  	jsr	PlayFMSound
000044EC                            
000044EC                            .End:
000044EC 4E75                       	rts
000044EE                            
000044EE                            ; -------------------------------------------------------------------------------
000044EE                            ; Main Sonic object code
000044EE                            ; -------------------------------------------------------------------------------
000044EE                            
000044EE                            ObjSonic:
000044EE 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l			; Are we in time attack mode?
000044F4 6600                       	bne.s	.NormalMode				; If so, branch
000044F6 B0FC D040                  	cmpa.w	#v_player2,a0				; Are we the second player?
000044FA 6700                       	beq.s	.NormalMode				; If so, branch
000044FC 4A39 00FF 1906             	tst.b	(v_debug_mode).l			; Are we in debug mode?
00004502 6700                       	beq.s	.NormalMode				; If not, branch
00004504 4EF9 0000 0000             	jmp	DebugMode				; Handle debug mode
0000450A                            
0000450A                            .NormalMode:
0000450A 1028 002A                  	move.b	oPlayerCharge(a0),d0			; Get charge time
0000450E 6700                       	beq.s	.RunRoutines				; If it's 0, branch
00004510 5200                       	addq.b	#1,d0					; Increment the charge time
00004512 0828 0002 0022             	btst	#2,oStatus(a0)				; Are we spindashing?
00004518 6700                       	beq.s	.Peelout				; If not, branch
0000451A 0C00 002D                  	cmpi.b	#45,d0					; Is the spindash fully charged?
0000451E 6500                       	bcs.s	.SetChargeTimer				; If not, branch
00004520 103C 002D                  	move.b	#45,d0					; Cap the charge time
00004524 6000                       	bra.s	.SetChargeTimer
00004526                            
00004526                            .Peelout:
00004526 0C00 001E                  	cmpi.b	#30,d0					; Is the peelout fully charged?
0000452A 6500                       	bcs.s	.SetChargeTimer				; If not, branch
0000452C 103C 001E                  	move.b	#30,d0					; Cap the charge time
00004530                            
00004530                            .SetChargeTimer:
00004530 1140 002A                  	move.b	d0,oPlayerCharge(a0)			; Update the charge time
00004534                            
00004534                            .RunRoutines:
00004534 7000                       	moveq	#0,d0					; Run object routine
00004536 1028 0024                  	move.b	oRoutine(a0),d0
0000453A 323B 0000                  	move.w	.Index(pc,d0.w),d1
0000453E 4EFB 1000                  	jmp	.Index(pc,d1.w)
00004542                            
00004542                            ; -------------------------------------------------------------------------------
00004542                            
00004542                            .Index:
00004542 0000                       	dc.w	ObjSonic_Init-.Index			; Initialization
00004544 0000                       	dc.w	ObjSonic_Main-.Index			; Main
00004546 0000                       	dc.w	ObjSonic_Hurt-.Index			; Hurt
00004548 0000                       	dc.w	ObjSonic_Dead-.Index			; Death
0000454A 0000                       	dc.w	ObjSonic_Restart-.Index			; Death delay and level restart
0000454C                            
0000454C                            ; -------------------------------------------------------------------------------
0000454C                            ; Create time warp stars
0000454C                            ; -------------------------------------------------------------------------------
0000454C                            
0000454C                            ObjSonic_MakeTimeWarpStars:
0000454C 4A38 D300                  	tst.b	(v_obj_timewarp_star1).w		; Are they already loaded?
00004550 6600                       	bne.s	.End					; If so, branch
00004552                            
00004552 13FC 0001 00FF 1521        	move.b	#1,(v_time_warp_on).l			; Set time warp flag
0000455A                            
0000455A 11FC 0003 D300             	move.b	#3,(v_obj_timewarp_star1).w		; Load time warp stars
00004560 11FC 0005 D31C             	move.b	#5,(v_obj_timewarp_star1+oAnim).w
00004566 11FC 0003 D340             	move.b	#3,(v_obj_timewarp_star2).w
0000456C 11FC 0006 D35C             	move.b	#6,(v_obj_timewarp_star2+oAnim).w
00004572 11FC 0003 D380             	move.b	#3,(v_obj_timewarp_star3).w
00004578 11FC 0007 D39C             	move.b	#7,(v_obj_timewarp_star3+oAnim).w
0000457E 11FC 0003 D3C0             	move.b	#3,(v_obj_timewarp_star4).w
00004584 11FC 0008 D3DC             	move.b	#8,(v_obj_timewarp_star4+oAnim).w
0000458A                            
0000458A                            .End:
0000458A 4E75                       	rts
0000458C 4E75                       	rts
0000458E                            
0000458E                            ; -------------------------------------------------------------------------------
0000458E                            ; Sonic's initialization routine
0000458E                            ; -------------------------------------------------------------------------------
0000458E                            
0000458E                            ObjSonic_Init:
0000458E 5428 0024                  	addq.b	#2,oRoutine(a0)				; Advance routine
00004592                            
00004592 117C 0013 0016             	move.b	#$13,oYRadius(a0)			; Default hitbox size
00004598 117C 0009 0017             	move.b	#9,oXRadius(a0)
0000459E 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
000045A4 6700                       	beq.s	.NotMini				; If not, branch
000045A6 117C 000A 0016             	move.b	#$A,oYRadius(a0)			; Mini hitbox size
000045AC 117C 0005 0017             	move.b	#5,oXRadius(a0)
000045B2                            
000045B2                            .NotMini:
000045B2 217C 0000 0000 0004        	move.l	#MapSpr_Sonic,oMap(a0)			; Set mappings
000045BA 317C 0780 0002             	move.w	#$780,oTile(a0)				; Set base tile
000045C0 117C 0002 0018             	move.b	#2,oPriority(a0)			; Set priority
000045C6 117C 0018 0019             	move.b	#$18,oWidth(a0)				; Set width
000045CC 117C 0004 0001             	move.b	#4,oRender(a0)				; Set render flags
000045D2                            
000045D2 31FC 0600 F760             	move.w	#$600,(v_sonic_top_speed).w		; Set physics values
000045D8 31FC 000C F762             	move.w	#$C,(v_sonic_acceleration).w
000045DE 31FC 0080 F764             	move.w	#$80,(v_sonic_deceleration).w
000045E4 4E75                       	rts
000045E6                            
000045E6                            ; -------------------------------------------------------------------------------
000045E6                            ; Create waterfall splashes
000045E6                            ; -------------------------------------------------------------------------------
000045E6                            
000045E6                            ObjSonic_MakeWaterfallSplash:
000045E6 4A39 00FF 1506             	tst.b	(v_zone).l				; Are we in Palmtree Panic zone?
000045EC 6600                       	bne.s	.End					; If not, branch
000045EE                            
000045EE 1039 00FF 1505             	move.b	(v_frame_timer+1).l,d0			; Are we on an odd numbered frame?
000045F4 0200 0001                  	andi.b	#1,d0
000045F8 6600                       	bne.s	.End					; If so, branch
000045FA                            
000045FA 1428 0016                  	move.b	oYRadius(a0),d2				; Are we behind a waterfall?
000045FE 4882                       	ext.w	d2
00004600 D468 000C                  	add.w	oY(a0),d2
00004604 3628 0008                  	move.w	oX(a0),d3
00004608 6100 0000                  	bsr.w	ObjSonic_GetChunkAtPos
0000460C 0C01 002F                  	cmpi.b	#$2F,d1
00004610 6600                       	bne.s	.End2					; If not, branch
00004612                            
00004612 0C68 15C0 0008             	cmpi.w	#$15C0,oX(a0)				; Are we too far into the level?
00004618 6400                       	bcc.s	.End					; If so, branch
0000461A 4A28 002C                  	tst.b	oPlayerCtrl(a0)				; Are we in a spin tunnel?
0000461E 6700                       	beq.s	.End					; If not, branch
00004620                            
00004620 4EB9 0000 0000             	jsr	FindObjSlot				; Create a waterfall splash at our position
00004626 6600                       	bne.s	.End
00004628 12BC 000E                  	move.b	#$E,oID(a1)
0000462C 3368 0008 0008             	move.w	oX(a0),oX(a1)
00004632 3368 000C 000C             	move.w	oY(a0),oY(a1)
00004638                            
00004638 7001                       	moveq	#1,d0					; Set splash direction
0000463A 4A68 0010                  	tst.w	oXVel(a0)
0000463E 6B00                       	bmi.s	.SetFlip
00004640 7000                       	moveq	#0,d0
00004642                            
00004642                            .SetFlip:
00004642 1340 0001                  	move.b	d0,oRender(a1)
00004646 1340 0022                  	move.b	d0,oStatus(a1)
0000464A                            
0000464A                            .End:
0000464A 4E75                       	rts
0000464C                            
0000464C                            .End2:
0000464C 4E75                       	rts
0000464E                            
0000464E                            ; -------------------------------------------------------------------------------
0000464E                            ; Get the chunk at a specific position
0000464E                            ; -------------------------------------------------------------------------------
0000464E                            ; PARAMETERS:
0000464E                            ;	d2.w	- Y position
0000464E                            ;	d3.w	- X position
0000464E                            ; RETURNS:
0000464E                            ;	d1.b	- Chunk ID
0000464E                            ; -------------------------------------------------------------------------------
0000464E                            
0000464E                            ObjSonic_GetChunkAtPos:
0000464E 3002                       	move.w	d2,d0					; Get the chunk at the given position
00004650 E248                       	lsr.w	#1,d0
00004652 0240 0380                  	andi.w	#$380,d0
00004656 3203                       	move.w	d3,d1
00004658 E049                       	lsr.w	#8,d1
0000465A 0241 007F                  	andi.w	#$7F,d1
0000465E D041                       	add.w	d1,d0
00004660                            ;	move.l	#LevelChunks,d1
00004660 7200                           moveq    #0,d1
00004662 43F8 A000                  	lea	(v_lvl_layout).w,a1
00004666 1231 0000                  	move.b	(a1,d0.w),d1
0000466A 0201 007F                  	andi.b	#$7F,d1
0000466E 4E75                       	rts
00004670                            
00004670                            ; -------------------------------------------------------------------------------
00004670                            ; Handle the extended camera
00004670                            ; -------------------------------------------------------------------------------
00004670                            
00004670                            ObjSonic_ExtCamera:
00004670 3238 F7A0                  	move.w	(v_cam_x_center).w,d1			; Get camera X center position
00004674                            
00004674 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get how fast we are moving
00004678 6A00                       	bpl.s	.PosInertia
0000467A 4440                       	neg.w	d0
0000467C                            
0000467C                            .PosInertia:
0000467C 0828 0001 002C             	btst	#1,oPlayerCtrl(a0)			; Are we on a 3D ramp?
00004682 6700                       	beq.s	.No3DRamp				; If not, branch
00004684 0C68 1B00 0008             	cmpi.w	#$1B00,oX(a0)				; Are we on the 3D ramp at the start of the level?
0000468A 6500                       	bcs.s	.ResetPan				; If so, branch
0000468C                            
0000468C                            .No3DRamp:
0000468C 0C40 0600                  	cmpi.w	#$600,d0				; Are we going at max regular speed?
00004690 6500                       	bcs.s	.ResetPan				; If not, branch
00004692                            
00004692 4A68 0014                  	tst.w	oPlayerGVel(a0)				; Are we moving right?
00004696 6A00                       	bpl.s	.MovingRight				; If so, branch
00004698                            
00004698                            .MovingLeft:
00004698 5441                       	addq.w	#2,d1					; Pan the camera to the right
0000469A 0C41 00E0                  	cmpi.w	#(320/2)+64,d1				; Has it panned far enough?
0000469E 6500                       	bcs.s	.SetPanVal				; If not, branch
000046A0 323C 00E0                  	move.w	#(320/2)+64,d1				; Cap the camera's position
000046A4 6000                       	bra.s	.SetPanVal
000046A6                            
000046A6                            .MovingRight:
000046A6 5541                       	subq.w	#2,d1					; Pan the camera to the left
000046A8 0C41 0060                  	cmpi.w	#(320/2)-64,d1				; Has it panned far enough
000046AC 6400                       	bcc.s	.SetPanVal				; If not, branch
000046AE 323C 0060                  	move.w	#(320/2)-64,d1				; Cap the camera's position
000046B2 6000                       	bra.s	.SetPanVal
000046B4                            
000046B4                            .ResetPan:
000046B4 0C41 00A0                  	cmpi.w	#320/2,d1				; Has the camera panned back to the middle?
000046B8 6700                       	beq.s	.SetPanVal				; If so, branch
000046BA 6400                       	bcc.s	.ResetLeft				; If it's panning back left
000046BC                            
000046BC                            .ResetRight:
000046BC 5441                       	addq.w	#2,d1					; Pan back to the right
000046BE 6000                       	bra.s	.SetPanVal
000046C0                            
000046C0                            .ResetLeft:
000046C0 5541                       	subq.w	#2,d1					; Pan back to the left
000046C2                            
000046C2                            .SetPanVal:
000046C2 31C1 F7A0                  	move.w	d1,(v_cam_x_center).w			; Update camera X center position
000046C6 4E75                       	rts
000046C8                            
000046C8                            ; -------------------------------------------------------------------------------
000046C8                            ; Sonic's main routine
000046C8                            ; -------------------------------------------------------------------------------
000046C8                            
000046C8                            ObjSonic_Main:
000046C8 61A6                       	bsr.s	ObjSonic_ExtCamera			; Handle extended camera
000046CA 6100 FF1A                  	bsr.w	ObjSonic_MakeWaterfallSplash		; Handle waterfall splash creation
000046CE                            
000046CE 4A79 00FF 1588             	tst.w	(v_debug_mode_enabled).l		; Is debug mode enabled?
000046D4 6700                       	beq.s	.NoDebug				; If not, branch
000046D6 0838 0004 F605             	btst	#4,(v_ctrl1_pressed).w			; Was the B button pressed?
000046DC 6700                       	beq.s	.NoDebug				; If not, branch
000046DE 13FC 0001 00FF 1906        	move.b	#1,(v_debug_mode).l			; Enter debug mode
000046E6 4E75                       	rts
000046E8                            
000046E8                            .NoDebug:
000046E8 4A38 F7CC                  	tst.b	(v_ctrl_locked).w			; Are controls locked?
000046EC 6600                       	bne.s	.CtrlLock				; If so, branch
000046EE 31F8 F604 F602             	move.w	(v_ctrl1_held).w,(v_player_held).w	; Copy controller data
000046F4                            
000046F4                            .CtrlLock:
000046F4 0828 0000 002C             	btst	#0,oPlayerCtrl(a0)			; Are we being controlled by another object?
000046FA 6700                       	beq.s	.NormalCtrl				; If not, branch
000046FC 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l				; Are we in Metallic Madness?
00004704 6600                       	bne.s	.NotMMZ					; If not, branch
00004706                            
00004706 4278 F786                  	clr.w	(v_time_warp_timer).w			; Disable time warping
0000470A 4239 00FF 1521             	clr.b	(v_time_warp_on).l
00004710 6000                       	bra.s	.SkipControl
00004712                            
00004712                            
00004712                            .NotMMZ:
00004712 6100 0000                  	bsr.w	ObjSonic_TimeWarp			; Handle time warping
00004716 6000                       	bra.s	.SkipControl
00004718                            
00004718                            .NormalCtrl:
00004718 7000                       	moveq	#0,d0					; Run player mode routine
0000471A 1028 0022                  	move.b	oStatus(a0),d0
0000471E 0240 0006                  	andi.w	#6,d0
00004722 323B 0000                  	move.w	ObjSonic_ModeIndex(pc,d0.w),d1
00004726 4EBB 1000                  	jsr	ObjSonic_ModeIndex(pc,d1.w)
0000472A                            
0000472A 4EB9 0000 0000             	jsr	ObjSonic_Null				; Some kind of nulled out function
00004730                            
00004730                            .SkipControl:
00004730 6100                       	bsr.s	ObjSonic_Display			; Draw sprite and handle timers
00004732 6100 0000                  	bsr.w	ObjSonic_RecordPos			; Save current position into the position buffer
00004736 6100 0000                  	bsr.w	ObjSonic_Water				; Handle water
0000473A                            
0000473A 1178 F768 0036             	move.b	(v_primary_angle).w,oPlayerPriAngle(a0)	; Update our angle buffers
00004740 1178 F76A 0037             	move.b	(v_secondary_angle).w,oPlayerSecAngle(a0)
00004746                            
00004746 4A38 F7C7                  	tst.b	(v_wind_tunnel_on).w			; Are we in a wind tunnel?
0000474A 6700                       	beq.s	.NoWindTunnel				; If not, branch
0000474C 4A28 001C                  	tst.b	oAnim(a0)				; Are we in the walking animation?
00004750 6600                       	bne.s	.NoWindTunnel				; If not, branch
00004752 1168 001D 001C             	move.b	oPrevAnim(a0),oAnim(a0)			; Set animation to the previously saved animation ID
00004758                            
00004758                            .NoWindTunnel:
00004758 6100 0000                  	bsr.w	ObjSonic_Animate			; Animate sprite
0000475C                            
0000475C 4A28 002C                  	tst.b	oPlayerCtrl(a0)				; Has object collision been disabled?
00004760 6B00                       	bmi.s	.NoObjCol				; If so, branch
00004762 0C28 002B 001C             	cmpi.b	#$2B,oAnim(a0)				; Are we giving up from boredom?
00004768 6700                       	beq.s	.NoObjCol				; If so, branch
0000476A                            
0000476A 4EB9 0000 0000             	jsr	Player_ObjCollide			; Handle object collision
00004770                            
00004770                            .NoObjCol:
00004770 6100 0000                  	bsr.w	ObjSonic_SpecialChunks			; Handle special chunks
00004774 4E75                       	rts
00004776                            
00004776                            ; -------------------------------------------------------------------------------
00004776                            
00004776                            ObjSonic_ModeIndex:
00004776 0000                       	dc.w	ObjSonic_MdGround-ObjSonic_ModeIndex
00004778 0000                       	dc.w	ObjSonic_MdAir-ObjSonic_ModeIndex
0000477A 0000                       	dc.w	ObjSonic_MdRoll-ObjSonic_ModeIndex
0000477C 0000                       	dc.w	ObjSonic_MdJump-ObjSonic_ModeIndex
0000477E                            
0000477E                            ; -------------------------------------------------------------------------------
0000477E                            ; Leftover music ID list from Sonic 1
0000477E                            ; -------------------------------------------------------------------------------
0000477E                            
0000477E                            LevelMusicIDs2_S1:
0000477E 8182 8384 8586             	dc.b	$81, $82, $83, $84, $85, $86
00004784                            	even
00004784                            
00004784                            ; -------------------------------------------------------------------------------
00004784                            ; Display Sonic's sprite and update timers
00004784                            ; -------------------------------------------------------------------------------
00004784                            
00004784                            ObjSonic_Display:
00004784 0C78 00D2 F786             	cmpi.w	#210,(v_time_warp_timer).w		; Are we about to time travel?
0000478A 6400                       	bcc.s	.SkipDisplay				; If so, branch
0000478C                            
0000478C 3028 0030                  	move.w	oPlayerHurt(a0),d0			; Get current hurt time
00004790 6700                       	beq.s	.NotFlashing				; If we are not hurting, branch
00004792 5368 0030                  	subq.w	#1,oPlayerHurt(a0)			; Decrement hurt time
00004796 E648                       	lsr.w	#3,d0					; Should we flash our sprite?
00004798 6400                       	bcc.s	.SkipDisplay				; If so, branch
0000479A                            
0000479A                            .NotFlashing:
0000479A 0828 0006 002C             	btst	#6,oPlayerCtrl(a0)			; Is our sprite disabled?
000047A0 6600                       	bne.s	.SkipDisplay				; If so, branch
000047A2 4EB8 4012                  	jsr	DrawObject				; Draw sprite
000047A6                            
000047A6                            .SkipDisplay:
000047A6 4A39 00FF 151F             	tst.b	(v_invincible).l			; Are we invincible?
000047AC 6700                       	beq.s	.NotInvincible				; If not, branch
000047AE 4A68 0032                  	tst.w	oPlayerInvinc(a0)			; Is the invincibility timer active?
000047B2 6700                       	beq.s	.NotInvincible				; If not, branch
000047B4                            
000047B4 5368 0032                  	subq.w	#1,oPlayerInvinc(a0)			; Decrement invincibility time
000047B8 6600                       	bne.s	.NotInvincible				; If it hasn't run out, branch
000047BA                            
000047BA 4A39 00FF 1520             	tst.b	(v_speed_shoes).l			; Is the speed shoes music playing?
000047C0 6600                       	bne.s	.StopInvinc				; If so, branch
000047C2 4A39 00FF 1958             	tst.b	(v_boss_music_playing).l		; Is the boss music playing?
000047C8 6600                       	bne.s	.StopInvinc				; If so, branch
000047CA 4A39 00FF 152E             	tst.b	(v_time_zone).l				; Are we in the past?
000047D0 6600                       	bne.s	.NotPast				; If not, branch
000047D2 303C 000E                  	move.w	#$E,d0					; Fade out music
000047D6 4EB9 0000 0000             	jsr	SendSubCommand
000047DC                            
000047DC                            .NotPast:
000047DC 4EB8 1EAC                  	jsr	PlayLevelMusic				; Play level music
000047E0                            
000047E0                            .StopInvinc:
000047E0 13FC 0000 00FF 151F        	move.b	#0,(v_invincible).l			; Stop invincibility
000047E8                            
000047E8                            .NotInvincible:
000047E8 4A39 00FF 1520             	tst.b	(v_speed_shoes).l			; Do we have speed shoes?
000047EE 6700                       	beq.s	.End					; If not, branch
000047F0 4A68 0034                  	tst.w	oPlayerSpeed(a0)			; Is the speed shoes timer active?
000047F4 6700                       	beq.s	.End					; If not, branch
000047F6                            
000047F6 5368 0034                  	subq.w	#1,oPlayerSpeed(a0)			; Decrement speed shoes time
000047FA 6600                       	bne.s	.End					; If it hasn't run out, branch
000047FC                            
000047FC 31FC 0600 F760             	move.w	#$600,(v_sonic_top_speed).w		; Return physics back to normal
00004802 31FC 000C F762             	move.w	#$C,(v_sonic_acceleration).w
00004808 31FC 0080 F764             	move.w	#$80,(v_sonic_deceleration).w
0000480E                            
0000480E 4A39 00FF 151F             	tst.b	(v_invincible).l			; Is the invincibility music playing?
00004814 6600                       	bne.s	.StopSpeedShoes				; If so, branch
00004816 4A39 00FF 1958             	tst.b	(v_boss_music_playing).l		; Is the boss music playing?
0000481C 6600                       	bne.s	.StopSpeedShoes				; If so, branch
0000481E 4A39 00FF 152E             	tst.b	(v_time_zone).l				; Are we in the past?
00004824 6600                       	bne.s	.NotPast2				; If not, branch
00004826 303C 000E                  	move.w	#$E,d0					; Fade out music
0000482A 4EB9 0000 0000             	jsr	SendSubCommand
00004830                            
00004830                            .NotPast2:
00004830 4EB8 1EAC                  	jsr	PlayLevelMusic				; Play level music
00004834                            
00004834                            .StopSpeedShoes:
00004834 13FC 0000 00FF 1520        	move.b	#0,(v_speed_shoes).l			; Stop speed shoes
0000483C                            
0000483C                            .End:
0000483C 4E75                       	rts
0000483E                            
0000483E                            ; -------------------------------------------------------------------------------
0000483E                            ; Save Sonic's current position into the position buffer
0000483E                            ; -------------------------------------------------------------------------------
0000483E                            
0000483E                            ObjSonic_RecordPos:
0000483E 3038 F7A8                  	move.w	(v_sonic_record_index).w,d0		; Get pointer to current position buffer index
00004842 43F8 CB00                  	lea	(v_sonic_record_buf).w,a1
00004846 43F1 0000                  	lea	(a1,d0.w),a1
0000484A                            
0000484A 32E8 0008                  	move.w	oX(a0),(a1)+				; Save our position
0000484E 32E8 000C                  	move.w	oY(a0),(a1)+
00004852                            
00004852 5838 F7A9                  	addq.b	#4,(v_sonic_record_index+1).w		; Advance position buffer index
00004856 4E75                       	rts
00004858                            
00004858                            ; -------------------------------------------------------------------------------
00004858                            ; Handle Sonic underwater
00004858                            ; -------------------------------------------------------------------------------
00004858                            
00004858                            ObjSonic_Water:
00004858 0C39 0002 00FF 1506        	cmpi.b	#2,(v_zone).l				; Are we in Tidal Tempest?
00004860 6700                       	beq.s	.HasWater				; If so, branch
00004862                            
00004862                            .End:
00004862 4E75                       	rts
00004864                            
00004864                            .HasWater:
00004864 0C39 0001 00FF 1507        	cmpi.b	#1,(v_act).l				; Are we in act 2 of Tidal Tempest?
0000486C 6600                       	bne.s	.NotAct2				; If not, branch
0000486E 0C68 00C8 0008             	cmpi.w	#$C8,oX(a0)				; Are we in the wrapping section?
00004874 65EC                       	bcs.s	.End					; If so, branch
00004876                            
00004876                            .NotAct2:
00004876 3038 F646                  	move.w	(v_water_height).w,d0			; Are we in the water?
0000487A B068 000C                  	cmp.w	oY(a0),d0
0000487E 6C00                       	bge.s	.OutWater				; If not, branch
00004880                            
00004880 08E8 0006 0022             	bset	#6,oStatus(a0)				; Mark as underwater
00004886 66DA                       	bne.s	.End					; If we were already marked as such, branch
00004888                            
00004888 6100 0000                  	bsr.w	ResumeMusicS1				; In Sonic 1, this routine would resume the background music from the drowning music
0000488C                            
0000488C 11FC 0021 D1C0             	move.b	#$21,(v_obj_bubbles).w			; Create bubbles that come out of our mouth
00004892 11FC 0081 D1E8             	move.b	#$81,(v_obj_bubbles+oSubtype).w
00004898                            
00004898 31FC 0300 F760             	move.w	#$300,(v_sonic_top_speed).w		; Set to water physics
0000489E 31FC 0006 F762             	move.w	#6,(v_sonic_acceleration).w
000048A4 31FC 0040 F764             	move.w	#$40,(v_sonic_deceleration).w
000048AA                            
000048AA E0E8 0010                  	asr	oXVel(a0)				; Slow ourselves down in the water
000048AE E0E8 0012                  	asr	oYVel(a0)
000048B2 E0E8 0012                  	asr	oYVel(a0)
000048B6 67AA                       	beq.s	.End					; If we entered the water slowly, branch
000048B8 6000                       	bra.s	.LoadSplash				; Go create a water splash
000048BA                            
000048BA                            ; -------------------------------------------------------------------------------
000048BA                            
000048BA                            .OutWater:
000048BA 4A68 0012                  	tst.w	oYVel(a0)				; Are we moving vertically?
000048BE 6700                       	beq.s	.LeaveWater				; If not, branch
000048C0 6AA0                       	bpl.s	.End					; If we are moving downwards, branch
000048C2                            
000048C2                            .LeaveWater:
000048C2 08A8 0006 0022             	bclr	#6,oStatus(a0)				; Mark as not underwater
000048C8 6798                       	beq.s	.End					; If we were already marked as such, branch
000048CA                            
000048CA 31FC 0600 F760             	move.w	#$600,(v_sonic_top_speed).w		; Return physics back to normal
000048D0 31FC 000C F762             	move.w	#$C,(v_sonic_acceleration).w
000048D6 31FC 0080 F764             	move.w	#$80,(v_sonic_deceleration).w
000048DC                            
000048DC E1E8 0012                  	asl	oYVel(a0)				; Accelerate ourselves out of the water
000048E0 6700 FF80                  	beq.w	.End					; If we are still moving up too slowly, branch
000048E4 0C68 F000 0012             	cmpi.w	#-$1000,oYVel(a0)			; Are we moving up too fast?
000048EA 6E00                       	bgt.s	.LoadSplash				; If not, branch
000048EC 317C F000 0012             	move.w	#-$1000,oYVel(a0)			; Cap our speed
000048F2                            
000048F2                            .LoadSplash:
000048F2 4EB9 0000 0000             	jsr	FindObjSlot				; Create a water splash at our position
000048F8 6600                       	bne.s	.End2
000048FA 12BC 000B                  	move.b	#$B,oID(a1)
000048FE 3368 0008 0008             	move.w	oX(a0),oX(a1)
00004904                            
00004904                            .End2:
00004904 4E75                       	rts
00004906                            
00004906                            ; -------------------------------------------------------------------------------
00004906                            ; Save various variables for time travel
00004906                            ; -------------------------------------------------------------------------------
00004906                            
00004906                            TimeTravel_SaveData:					; Save some values
00004906 13F9 00FF 1522 00FF 1546   	move.b	(v_reset_lvl_flags).l,(v_travel_reset_lvl_flags).l
00004910 33E8 0008 00FF 1548        	move.w	oX(a0),(v_travel_x).l
00004918 33E8 000C 00FF 154A        	move.w	oY(a0),(v_travel_y).l
00004920 33E8 0014 00FF 1564        	move.w	oPlayerGVel(a0),(v_travel_gvel).l
00004928 33E8 0010 00FF 1566        	move.w	oXVel(a0),(v_travel_xvel).l
00004930 33E8 0012 00FF 1568        	move.w	oYVel(a0),(v_travel_yvel).l
00004938 13E8 0022 00FF 154C        	move.b	oStatus(a0),(v_travel_status).l
00004940 08B9 0003 00FF 154C        	bclr	#3,(v_travel_status).l			; Don't be marked as standing on an object
00004948 08B9 0006 00FF 154C        	bclr	#6,(v_travel_status).l			; Don't be marked as being underwater
00004950 13F8 F64D 00FF 1562        	move.b	(v_water_routine).w,(v_travel_water_rout).l
00004958 33F8 F72E 00FF 154E        	move.w	(v_bottom_bound).w,(v_travel_btm_bound).l
00004960 33F8 F700 00FF 1550        	move.w	(v_cam_fg_x).w,(v_travel_cam_fg_x).l
00004968 33F8 F704 00FF 1552        	move.w	(v_cam_fg_y).w,(v_travel_cam_fg_y).l
00004970 33F8 F708 00FF 1554        	move.w	(v_cam_bg_x).w,(v_travel_cam_bg_x).l
00004978 33F8 F70C 00FF 1556        	move.w	(v_cam_bg_y).w,(v_travel_cam_bg_y).l
00004980 33F8 F710 00FF 1558        	move.w	(v_cam_bg2_x).w,(v_travel_cam_bg2_x).l
00004988 33F8 F714 00FF 155A        	move.w	(v_cam_bg2_y).w,(v_travel_cam_bg2_y).l
00004990 33F8 F718 00FF 155C        	move.w	(v_cam_bg3_x).w,(v_travel_cam_bg3_x).l
00004998 33F8 F71C 00FF 155E        	move.w	(v_cam_bg3_y).w,(v_travel_cam_bg3_y).l
000049A0 33F8 F648 00FF 1560        	move.w	(v_water_height2).w,(v_travel_water_height2).l
000049A8 13F8 F64D 00FF 1562        	move.b	(v_water_routine).w,(v_travel_water_rout).l
000049B0 13F8 F64E 00FF 1563        	move.b	(v_water_full).w,(v_travel_water_full).l
000049B8 33F9 00FF 1512 00FF 1528   	move.w	(v_ring_count).l,(v_travel_ring_count).l
000049C2 13F9 00FF 150D 00FF 1545   	move.b	(v_1up_flags).l,(v_travel_1up_flags).l
000049CC                            
000049CC 2039 00FF 1514             	move.l	(v_time).l,d0				; Move the level timer to 5:00 if we are past that
000049D2 0C80 0005 0000             	cmpi.l	#$50000,d0
000049D8 6500                       	bcs.s	.CapTime
000049DA 203C 0005 0000             	move.l	#$50000,d0
000049E0                            
000049E0                            .CapTime:
000049E0 23C0 00FF 1570             	move.l	d0,(v_travel_time).l
000049E6                            
000049E6 13F9 00FF 195B 00FF 1593   	move.b	(v_mini_sonic).l,(v_travel_mini_sonic).l
000049F0 4E75                       	rts
000049F2                            
000049F2                            ; -------------------------------------------------------------------------------
000049F2                            ; Handle time warping for Sonic
000049F2                            ; -------------------------------------------------------------------------------
000049F2                            
000049F2                            ObjSonic_TimeWarp:
000049F2 0C79 0000 00FF 1506        	cmpi.w	#0,(v_zone).l				; Are we in Palmtree Panic act 1?
000049FA 6600                       	bne.s	.NotPPZ1				; If not, branch
000049FC 4A39 00FF 152E             	tst.b	(v_time_zone).l				; Are we in the past?
00004A02 6700                       	beq.s	.Past					; If so, branch
00004A04 0C39 0002 00FF 152E        	cmpi.b	#2,(v_time_zone).l			; Are we in the future?
00004A0C 6600                       	bne.s	.NotPPZ1				; If not, branch
00004A0E                            
00004A0E                            .Past:
00004A0E 0C68 0900 0008             	cmpi.w	#$900,oX(a0)				; Are we in the first 3D ramp section?
00004A14 6500 0000                  	bcs.w	.StopTimeWarp				; If so, branch
00004A18                            
00004A18                            .NotPPZ1:
00004A18 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout or spindash?
00004A1C 6600 0000                  	bne.w	.End2					; If so, branch
00004A20 4A38 F784                  	tst.b	(v_time_warp_dir).w			; Have we touched a time post?
00004A24 6700 0000                  	beq.w	.End2					; If not, branch
00004A28                            
00004A28 343C 0600                  	move.w	#$600,d2				; Minimum speed in which to keep the time warp going
00004A2C                            
00004A2C 7000                       	moveq	#0,d0					; Get current ground velocity
00004A2E 3028 0014                  	move.w	oPlayerGVel(a0),d0
00004A32 6A00                       	bpl.s	.PosInertia
00004A34 4440                       	neg.w	d0
00004A36                            
00004A36                            .PosInertia:
00004A36 4A78 F786                  	tst.w	(v_time_warp_timer).w			; Is the time warp timer active?
00004A3A 6600                       	bne.s	.TimerGoing				; If so, branch
00004A3C 31FC 0001 F786             	move.w	#1,(v_time_warp_timer).w		; Make the time warp timer active
00004A42                            
00004A42                            .TimerGoing:
00004A42 3238 F786                  	move.w	(v_time_warp_timer).w,d1		; Get current time warp time
00004A46 0C41 00E6                  	cmpi.w	#230,d1					; Should we time travel now?
00004A4A 6500                       	bcs.s	.KeepGoing				; If not, branch
00004A4C                            
00004A4C 13FC 0001 00FF 1502        	move.b	#1,(v_level_restart).l			; Set to go to the time travel cutscene
00004A54 6000 0000                  	bra.w	FadeOutMusic
00004A58                            
00004A58                            .KeepGoing:
00004A58 0C41 00D2                  	cmpi.w	#210,d1					; Are we about to time travel soon?
00004A5C 6500                       	bcs.s	.CheckStars				; If not, branch
00004A5E                            
00004A5E 0C39 0002 00FF 1522        	cmpi.b	#2,(v_reset_lvl_flags).l		; Are we already in the process of time travelling?
00004A66 6700                       	beq.s	.End					; If so, branch
00004A68                            
00004A68 11FC 0001 F744             	move.b	#1,(v_scroll_lock).w			; Lock the screen in place
00004A6E                            
00004A6E 1039 00FF 152E             	move.b	(v_time_zone).l,d0			; Get current time zone
00004A74 6600                       	bne.s	.GetNewTime				; If we are not in the past, branch
00004A76                            
00004A76 303C 0082                  	move.w	#$82,d0					; Fade out music
00004A7A 4EB9 0000 0000             	jsr	SendSubCommand
00004A80                            
00004A80 7000                       	moveq	#0,d0					; We are currently in the past
00004A82                            
00004A82                            .GetNewTime:
00004A82 D038 F784                  	add.b	(v_time_warp_dir).w,d0			; Set the new time period
00004A86 6A00                       	bpl.s	.NoUnderflow				; If we aren't trying to go past the past, branch
00004A88 7000                       	moveq	#0,d0					; Stay in this game's "past" time period
00004A8A 6000                       	bra.s	.GotNewTime
00004A8C                            
00004A8C                            .NoUnderflow:
00004A8C 0C00 0003                  	cmpi.b	#3,d0					; Are we trying to go forward past the future?
00004A90 6500                       	bcs.s	.GotNewTime				; If not, branch
00004A92 7002                       	moveq	#2,d0					; Stay in this game's "future" time period
00004A94                            
00004A94                            .GotNewTime:
00004A94 08C0 0007                  	bset	#7,d0					; Mark time travel as active
00004A98 13C0 00FF 152E             	move.b	d0,(v_time_zone).l
00004A9E                            
00004A9E 6100 FE66                  	bsr.w	TimeTravel_SaveData			; Save time travel data
00004AA2                            
00004AA2 13FC 0002 00FF 1522        	move.b	#2,(v_reset_lvl_flags).l		; Mark that we are now in the process of time travelling
00004AAA                            
00004AAA                            
00004AAA                            .End:
00004AAA 4E75                       	rts
00004AAC                            
00004AAC                            .CheckStars:
00004AAC 0C41 005A                  	cmpi.w	#90,d1					; Have we tried time travelling for a bit already?
00004AB0 6400                       	bcc.s	.CheckStop				; If so, branch
00004AB2                            
00004AB2 B042                       	cmp.w	d2,d0					; Are we going fast enough?
00004AB4 6400 FA96                  	bcc.w	ObjSonic_MakeTimeWarpStars		; If so, branch
00004AB8 4278 F786                  	clr.w	(v_time_warp_timer).w			; If not, reset time warping until we go fast again
00004ABC 4239 00FF 1521             	clr.b	(v_time_warp_on).l
00004AC2 4E75                       	rts
00004AC4                            
00004AC4                            .CheckStop:
00004AC4 B042                       	cmp.w	d2,d0					; Are we going fast enough?
00004AC6 6400                       	bcc.s	.End2					; If so, branch
00004AC8                            
00004AC8                            .StopTimeWarp:
00004AC8 4278 F786                  	clr.w	(v_time_warp_timer).w			; Disable time warping altogether until the next time post is touched
00004ACC 4238 F784                  	clr.b	(v_time_warp_dir).w
00004AD0 4239 00FF 1521             	clr.b	(v_time_warp_on).l
00004AD6                            
00004AD6                            .End2:
00004AD6                            ;   jsr GetChunkAddress ; This line doesnt crash
00004AD6                            ;	jsr LevelLayoutLoad ; This line crashes
00004AD6                            ;   jsr Reload_Level_PLC ; This line crashes x2
00004AD6 4E75                       	rts
00004AD8                            
00004AD8                            ; -------------------------------------------------------------------------------
00004AD8                            ; Sonic's ground mode routine
00004AD8                            ; -------------------------------------------------------------------------------
00004AD8                            
00004AD8                            ObjSonic_MdGround:
00004AD8 6100 F9AC                  	bsr.w	ObjSonic_ChkBoredom			; Check boredom timer
00004ADC                            
00004ADC 0C28 002B 001C             	cmpi.b	#$2B,oAnim(a0)				; Are we giving up from boredom?
00004AE2 6600                       	bne.s	.NotGivingUp				; If not, branch
00004AE4 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
00004AEA 6700                       	beq.s	.NotMini				; If not, branch
00004AEC 0C28 0079 001A             	cmpi.b	#$79,oMapFrame(a0)			; Are we jumping?
00004AF2 6600                       	bne.s	.End					; If not, branch
00004AF4 6000                       	bra.s	.GivingUp
00004AF6                            
00004AF6                            .NotMini:
00004AF6 0C28 0017 001A             	cmpi.b	#$17,oMapFrame(a0)			; Are we jumping?
00004AFC 6500                       	bcs.s	.End					; If not, branch
00004AFE                            
00004AFE                            .GivingUp:
00004AFE 6100 0000                  	bsr.w	ObjSonic_LevelBound			; Handle level boundary collision
00004B02 4EF8 3F5C                  	jmp	ObjMoveGrv				; Apply velocity
00004B06                            
00004B06                            .NotGivingUp:
00004B06 6100 0000                  	bsr.w	ObjSonic_Handle3DRamp			; Check for a 3D ramp
00004B0A 6100 FEE6                  	bsr.w	ObjSonic_TimeWarp			; Handle time warp
00004B0E 6100 0000                  	bsr.w	ObjSonic_CheckJump			; Check for jumping
00004B12 6100 0000                  	bsr.w	ObjSonic_SlopeResist			; Handle slope resistance
00004B16 6100 0000                  	bsr.w	ObjSonic_MoveGround			; Handle movement
00004B1A 6100 0000                  	bsr.w	ObjSonic_CheckRoll			; Check for rolling
00004B1E 6100 0000                  	bsr.w	ObjSonic_LevelBound			; Handle level boundary collision
00004B22 4EB8 3FBE                  	jsr	ObjMove					; Apply velocity
00004B26 6100 C384                  	bsr.w	Player_LevelColOnGround			; Handle level collision
00004B2A 6100 0000                  	bsr.w	ObjSonic_CheckFallOff			; Check for falling off a steep slope or ceiling
00004B2E                            
00004B2E                            .End:
00004B2E 4E75                       	rts
00004B30                            
00004B30                            ; -------------------------------------------------------------------------------
00004B30                            ; Sonic's air mode routine
00004B30                            ; -------------------------------------------------------------------------------
00004B30                            
00004B30                            ObjSonic_MdAir:
00004B30 4A38 F7C7                  	tst.b	(v_wind_tunnel_on).w			; Are we in a wind tunnel?
00004B34 6600                       	bne.s	.NotMovingDown				; If so, branch
00004B36 0C28 0015 001C             	cmpi.b	#$15,oAnim(a0)				; Were we breathing in a bubble?
00004B3C 6700                       	beq.s	.NotMovingDown				; If so, branch
00004B3E 4A68 0012                  	tst.w	oYVel(a0)				; Are we moving upwards?
00004B42 6B00                       	bmi.s	.NotMovingDown				; If so, branch
00004B44 117C 0000 001C             	move.b	#0,oAnim(a0)				; Reset animation to walking animation
00004B4A                            
00004B4A                            .NotMovingDown:
00004B4A 6100 0000                  	bsr.w	ObjSonic_Handle3DRamp			; Check for a 3D ramp
00004B4E 6100 FEA2                  	bsr.w	ObjSonic_TimeWarp			; Handle time warp
00004B52 6100 0000                  	bsr.w	ObjSonic_JumpHeight			; Handle jump height
00004B56 6100 0000                  	bsr.w	ObjSonic_MoveAir			; Handle movement
00004B5A 6100 0000                  	bsr.w	ObjSonic_LevelBound			; Handle level boundary collision
00004B5E 4EB8 3F5C                  	jsr	ObjMoveGrv				; Apply velocity
00004B62 0828 0006 0022             	btst	#6,oStatus(a0)				; Are we underwater?
00004B68 6700                       	beq.s	.NoWater				; If not, branch
00004B6A 0468 0028 0012             	subi.w	#$28,oYVel(a0)				; Apply water gravity resistance
00004B70                            
00004B70                            .NoWater:
00004B70 6100 0000                  	bsr.w	ObjSonic_JumpAngle			; Reset angle
00004B74 6100 0000                  	bsr.w	Player_LevelColInAir			; Handle level collision
00004B78 4E75                       	rts
00004B7A                            
00004B7A                            ; -------------------------------------------------------------------------------
00004B7A                            ; Sonic's roll mode routine
00004B7A                            ; -------------------------------------------------------------------------------
00004B7A                            
00004B7A                            ObjSonic_MdRoll:
00004B7A 6100 0000                  	bsr.w	ObjSonic_Handle3DRamp			; Check for  3D ramp
00004B7E 6100 FE72                  	bsr.w	ObjSonic_TimeWarp			; Handle time warp
00004B82 6100 0000                  	bsr.w	ObjSonic_CheckJump			; Check for jumping
00004B86 6100 0000                  	bsr.w	ObjSonic_SlopeResistRoll		; Handle slope resistance
00004B8A 6100 0000                  	bsr.w	ObjSonic_MoveRoll			; Handle movement
00004B8E 6100 0000                  	bsr.w	ObjSonic_LevelBound			; Handle level boundary collision
00004B92 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we spindashing?
00004B96 6600                       	bne.s	.IsCharging				; If so, branch
00004B98 4EB8 3FBE                  	jsr	ObjMove					; Apply velocity
00004B9C                            
00004B9C                            .IsCharging:
00004B9C 6100 C30E                  	bsr.w	Player_LevelColOnGround			; Handle level collision
00004BA0 6100 0000                  	bsr.w	ObjSonic_CheckFallOff			; Check for falling off a steep slope or ceiling
00004BA4 4E75                       	rts
00004BA6                            
00004BA6                            ; -------------------------------------------------------------------------------
00004BA6                            ; Sonic's jump mode routine
00004BA6                            ; -------------------------------------------------------------------------------
00004BA6                            
00004BA6                            ObjSonic_MdJump:
00004BA6 6100 0000                  	bsr.w	ObjSonic_Handle3DRamp			; Check for a 3D ramp
00004BAA 6100 FE46                  	bsr.w	ObjSonic_TimeWarp			; Handle time warp
00004BAE 6100 0000                  	bsr.w	ObjSonic_JumpHeight			; Handle jump height
00004BB2 6100 0000                  	bsr.w	ObjSonic_MoveAir			; Handle movement
00004BB6 6100 0000                  	bsr.w	ObjSonic_LevelBound			; Handle level boundary collision
00004BBA 4EB8 3F5C                  	jsr	ObjMoveGrv				; Apply velocity
00004BBE 0828 0006 0022             	btst	#6,oStatus(a0)				; Are we underwater?
00004BC4 6700                       	beq.s	.NoWater				; If not, branch
00004BC6 0468 0028 0012             	subi.w	#$28,oYVel(a0)				; Apply water gravity resistance
00004BCC                            
00004BCC                            .NoWater:
00004BCC 6100 0000                  	bsr.w	ObjSonic_JumpAngle			; Reset angle
00004BD0 6100 0000                  	bsr.w	Player_LevelColInAir			; Handle level collision
00004BD4 4E75                       	rts
00004BD6                            
00004BD6                            ; -------------------------------------------------------------------------------
00004BD6                            ; Check for a 3D ramp for Sonic
00004BD6                            ; -------------------------------------------------------------------------------
00004BD6                            
00004BD6                            ObjSonic_Handle3DRamp:
00004BD6 0C39 0001 00FF 152E        	cmpi.b	#1,(v_time_zone).l			; Are we in the present?
00004BDE 6600                       	bne.s	.End					; If not, branch
00004BE0 4A79 00FF 1506             	tst.w	(v_zone).l				; Are we in Palmtree Panic act 1?
00004BE6 6600                       	bne.s	.End					; If not, branch
00004BE8                            
00004BE8 3028 000C                  	move.w	oY(a0),d0				; Get current chunk that we are in
00004BEC E248                       	lsr.w	#1,d0
00004BEE 0240 0380                  	andi.w	#$380,d0
00004BF2 1228 0008                  	move.b	oX(a0),d1
00004BF6 0241 007F                  	andi.w	#$7F,d1
00004BFA D041                       	add.w	d1,d0
00004BFC 43F8 A000                  	lea	(v_lvl_layout).w,a1
00004C00 1231 0000                  	move.b	(a1,d0.w),d1
00004C04                            
00004C04 45F9 0000 0000             	lea	(.ChunkList).l,a2			; Get list of 3D ramp chunks
00004C0A                            
00004C0A                            .CheckChunk:
00004C0A 101A                       	move.b	(a2)+,d0				; Are we in a 3D ramp chunk at all?
00004C0C 6B00                       	bmi.s	.NotFound				; If not, branch
00004C0E B200                       	cmp.b	d0,d1					; Have we found the 3D ramp chunk that we are in?
00004C10 66F8                       	bne.s	.CheckChunk				; If not, keep searching
00004C12 08E8 0001 002C             	bset	#1,oPlayerCtrl(a0)			; Mark as on a 3D ramp
00004C18 4E75                       	rts
00004C1A                            
00004C1A                            .NotFound:
00004C1A 08A8 0001 002C             	bclr	#1,oPlayerCtrl(a0)			; Mark as not on a 3D ramp
00004C20 6700                       	beq.s	.End					; If we weren't on one to begin with, branch
00004C22 4A68 0012                  	tst.w	oYVel(a0)				; Are we moving upwards?
00004C26 6A00                       	bpl.s	.End					; If not, branch
00004C28 0C68 F800 0012             	cmpi.w	#-$800,oYVel(a0)			; Are we launching off the 3D ramp?
00004C2E 6400                       	bcc.s	.End					; If not, branch
00004C30                            
00004C30 317C 0600 0010             	move.w	#$600,oXVel(a0)				; Gain a horizontal boost off the 3D ramp
00004C36 0828 0000 0022             	btst	#0,oStatus(a0)
00004C3C 6700                       	beq.s	.End
00004C3E 4468 0010                  	neg.w	oXVel(a0)
00004C42                            
00004C42                            .End:
00004C42 4E75                       	rts
00004C44                            
00004C44                            ; -------------------------------------------------------------------------------
00004C44                            
00004C44                            .ChunkList:
00004C44 06                         	dc.b	6
00004C45 07                         	dc.b	7
00004C46 08                         	dc.b	8
00004C47 49                         	dc.b	$49
00004C48 4C                         	dc.b	$4C
00004C49 FF                         	dc.b	-1
00004C4A                            
00004C4A                            ; -------------------------------------------------------------------------------
00004C4A                            ; Handle Sonic's movement on the ground
00004C4A                            ; -------------------------------------------------------------------------------
00004C4A                            
00004C4A                            ObjSonic_MoveGround:
00004C4A 3C38 F760                  	move.w	(v_sonic_top_speed).w,d6		; Get top speed
00004C4E 3A38 F762                  	move.w	(v_sonic_acceleration).w,d5		; Get acceleration
00004C52 3838 F764                  	move.w	(v_sonic_deceleration).w,d4		; Get deceleration
00004C56                            
00004C56 4A38 F7CA                  	tst.b	(v_jump_only).w				; Can we only jump?
00004C5A 6600 0000                  	bne.w	.CalcXYVels				; If so, branch
00004C5E 4A68 003E                  	tst.w	oPlayerMoveLock(a0)			; Is our movement locked temporarily?
00004C62 6600 0000                  	bne.w	.ResetScreen				; If so, branch
00004C66                            
00004C66 0838 0002 F602             	btst	#2,(v_player_held).w			; Are we holding left?
00004C6C 6700                       	beq.s	.NotLeft				; If not, branch
00004C6E 6100 0000                  	bsr.w	ObjSonic_MoveGndLeft			; Move left
00004C72                            
00004C72                            .NotLeft:
00004C72 0838 0003 F602             	btst	#3,(v_player_held).w			; Are we holding right
00004C78 6700                       	beq.s	.NotRight				; If not, branch
00004C7A 6100 0000                  	bsr.w	ObjSonic_MoveGndRight			; Move right
00004C7E                            
00004C7E                            .NotRight:
00004C7E 1028 0026                  	move.b	oAngle(a0),d0				; Are we on firm on the ground?
00004C82 0600 0020                  	addi.b	#$20,d0
00004C86 0200 00C0                  	andi.b	#$C0,d0
00004C8A 6600 0000                  	bne.w	.ResetScreen				; If not, branch
00004C8E 4A68 0014                  	tst.w	oPlayerGVel(a0)				; Are we moving at all?
00004C92 6700                       	beq.s	.Stand					; If not, branch
00004C94 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout or spindash?
00004C98 6700 0000                  	beq.w	.ResetScreen				; If not, branch
00004C9C 6000                       	bra.s	.CheckBalance				; Check for balancing
00004C9E                            
00004C9E                            .Stand:
00004C9E 08A8 0005 0022             	bclr	#5,oStatus(a0)				; Stop pushing
00004CA4 117C 0005 001C             	move.b	#5,oAnim(a0)				; Set animation to idle animation
00004CAA                            
00004CAA                            ; -------------------------------------------------------------------------------
00004CAA                            
00004CAA                            .CheckBalance:
00004CAA 0828 0003 0022             	btst	#3,oStatus(a0)				; Are we standing on an object?
00004CB0 6700                       	beq.s	.BalanceGround				; If not, branch
00004CB2                            
00004CB2 7000                       	moveq	#0,d0					; Get the object we are standing on
00004CB4 1028 003D                  	move.b	oPlayerStandObj(a0),d0
00004CB8 ED48                       	lsl.w	#6,d0
00004CBA 43F8 D000                  	lea	(v_objects).w,a1
00004CBE 43F1 0000                  	lea	(a1,d0.w),a1
00004CC2 4A29 0022                  	tst.b	oStatus(a1)				; Is it a special hazardous object?
00004CC6 6B00 0000                  	bmi.w	.CheckCharge				; If so, branch
00004CCA 0C11 001E                  	cmpi.b	#$1E,oID(a1)				; Is it a pinball flipper from CCZ?
00004CCE 6600                       	bne.s	.CheckObjBalance			; If not, branch
00004CD0 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
00004CD6 6000 0000                  	bra.w	.ResetScreen				; Reset screen position
00004CDA                            
00004CDA                            .CheckObjBalance:
00004CDA 7200                       	moveq	#0,d1					; Get distance from an edge of the object
00004CDC 1229 0019                  	move.b	oWidth(a1),d1
00004CE0 3401                       	move.w	d1,d2
00004CE2 D442                       	add.w	d2,d2
00004CE4 5942                       	subq.w	#4,d2
00004CE6 D268 0008                  	add.w	oX(a0),d1
00004CEA 9269 0008                  	sub.w	oX(a1),d1
00004CEE 0C41 0004                  	cmpi.w	#4,d1					; Are we at least 4 pixels away from the left edge?
00004CF2 6D00                       	blt.s	.BalanceLeft				; If so, branch
00004CF4 B242                       	cmp.w	d2,d1					; Are we at least 4 pixels away from the right edge?
00004CF6 6C00                       	bge.s	.BalanceRight				; If so, branch
00004CF8 6000                       	bra.s	.CheckCharge				; Check for peelout/spindash charge
00004CFA                            
00004CFA                            .BalanceGround:
00004CFA 4EB9 0000 0000             	jsr	CheckFloorEdge				; Are we leaning near a ledge on either side?
00004D00 0C41 000C                  	cmpi.w	#$C,d1
00004D04 6D00                       	blt.s	.CheckCharge				; If not, branch
00004D06                            
00004D06 303C 00AB                  	move.w	#$AB,d0					; Stop any charging
00004D0A 4EB8 2708                  	jsr	PlayFMSound
00004D0E 117C 0000 002A             	move.b	#0,oPlayerCharge(a0)
00004D14 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)
00004D1A                            
00004D1A 0C28 0003 0036             	cmpi.b	#3,oPlayerPriAngle(a0)			; Are we leaning near a ledge on the right?
00004D20 6600                       	bne.s	.CheckLeft				; If not, branch
00004D22                            
00004D22                            .BalanceRight:
00004D22 0828 0000 0022             	btst	#0,oStatus(a0)				; Are we facing left?
00004D28 6600                       	bne.s	.BalanceAniBackwards			; If so, use the backwards animation
00004D2A 6000                       	bra.s	.BalanceAniForwards			; Use the forwards animation
00004D2C                            
00004D2C                            .CheckLeft:
00004D2C 0C28 0003 0037             	cmpi.b	#3,oPlayerSecAngle(a0)			; Are we leaning near a ledge on the left?
00004D32 6600                       	bne.s	.CheckCharge				; If not, branch
00004D34                            
00004D34                            .BalanceLeft:
00004D34 0828 0000 0022             	btst	#0,oStatus(a0)				; Are we facing left?
00004D3A 6600                       	bne.s	.BalanceAniForwards			; If so, use the forwards animation
00004D3C                            
00004D3C                            .BalanceAniBackwards:
00004D3C 117C 0032 001C             	move.b	#$32,oAnim(a0)				; Set animation to balancing backwards animation
00004D42 6000 0000                  	bra.w	.ResetScreen				; Reset screen position
00004D46                            
00004D46                            .BalanceAniForwards:
00004D46 117C 0006 001C             	move.b	#6,oAnim(a0)				; Set animation to balancing forwards animation
00004D4C 6000 0000                  	bra.w	.ResetScreen				; Reset screen position
00004D50                            
00004D50                            ; -------------------------------------------------------------------------------
00004D50                            
00004D50                            .CheckCharge:
00004D50 1038 F788                  	move.b	(v_look_mode).w,d0			; Get double tap timer
00004D54 0200 000F                  	andi.b	#$F,d0
00004D58 6700                       	beq.s	.DblTapNotInit				; If it's not active, branch
00004D5A 5238 F788                  	addq.b	#1,(v_look_mode).w			; Increment timer
00004D5E 0238 00CF F788             	andi.b	#$CF,(v_look_mode).w			; Cap the timer properly
00004D64                            
00004D64                            .DblTapNotInit:
00004D64 0838 0007 F788             	btst	#7,(v_look_mode).w			; Is the look up flag set?
00004D6A 6600 0000                  	bne.w	.LookUp					; If so, branch
00004D6E 0838 0006 F788             	btst	#6,(v_look_mode).w			; Is the look down flag set?
00004D74 6600 0000                  	bne.w	.CheckForSpindash			; If so, branch
00004D78                            
00004D78 0838 0001 F602             	btst	#1,(v_player_held).w			; Is down being held?
00004D7E 6600 0000                  	bne.w	.CheckForSpindash			; If so, branch
00004D82 0238 000F F788             	andi.b	#$F,(v_look_mode).w			; Clear out look flags
00004D88 6700                       	beq.s	.CheckUpPress				; If the double tap timer wasn't set, branch
00004D8A                            
00004D8A 0838 0000 F603             	btst	#0,(v_player_pressed).w			; Have we double tapped up?
00004D90 6700                       	beq.s	.CheckUpHeld				; If not, branch
00004D92 08F8 0007 F788             	bset	#7,(v_look_mode).w			; Set the look up flag
00004D98 6000 0000                  	bra.w	.Settle					; Settle movement
00004D9C                            
00004D9C                            .CheckUpPress:
00004D9C 0838 0000 F603             	btst	#0,(v_player_pressed).w			; Have we just pressed up?
00004DA2 6700 0000                  	beq.w	.CheckUpHeld				; If not, branch
00004DA6 11FC 0001 F788             	move.b	#1,(v_look_mode).w			; Set the double tap timer to be active
00004DAC 6000 0000                  	bra.w	.Settle					; Settle movement
00004DB0                            
00004DB0                            .CheckUpHeld:
00004DB0 0838 0000 F602             	btst	#0,(v_player_held).w			; Are we holding up?
00004DB6 6700                       	beq.s	.CheckUnleashPeelout			; If not, branch
00004DB8                            
00004DB8 117C 0007 001C             	move.b	#7,oAnim(a0)				; Set animation to looking up animation
00004DBE 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout?
00004DC2 6700                       	beq.s	.CheckStartCharge			; If not, branch
00004DC4                            
00004DC4                            ; -------------------------------------------------------------------------------
00004DC4                            
00004DC4                            .Peelout:
00004DC4 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to charging peelout animation
00004DCA                            
00004DCA 7064                       	moveq	#100,d0					; Get charge speed increment value
00004DCC 3238 F760                  	move.w	(v_sonic_top_speed).w,d1		; Get max charge speed (top speed * 2)
00004DD0 3401                       	move.w	d1,d2
00004DD2 E341                       	asl.w	#1,d1
00004DD4 4A39 00FF 1520             	tst.b	(v_speed_shoes).l			; Do we have speed shoes?
00004DDA 6700                       	beq.s	.NoSpeedShoes				; If not, branch
00004DDC E242                       	asr.w	#1,d2					; Get max charge speed for speed shoes ((top speed * 2) - (top speed / 2))
00004DDE 9242                       	sub.w	d2,d1
00004DE0                            
00004DE0                            .NoSpeedShoes:
00004DE0 0828 0000 0022             	btst	#0,oStatus(a0)				; Are we facing left?
00004DE6 6700                       	beq.s	.IncPeeloutCharge			; If not, branch
00004DE8 4440                       	neg.w	d0					; Negate the charge speed increment value
00004DEA 4441                       	neg.w	d1					; Negate the max charge speed
00004DEC                            
00004DEC                            .IncPeeloutCharge:
00004DEC D168 0014                  	add.w	d0,oPlayerGVel(a0)			; Increment charge speed
00004DF0                            
00004DF0 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current charge speed
00004DF4 0828 0000 0022             	btst	#0,oStatus(a0)				; Are we facing left?
00004DFA 6700                       	beq.s	.CheckMaxRight				; If not, branch
00004DFC B240                       	cmp.w	d0,d1					; Have we reached the max charge speed?
00004DFE 6F00                       	ble.s	.SetChargeSpeed				; If not, branch
00004E00 6000                       	bra.s	.CapCharge				; If so, cap it
00004E02                            
00004E02                            .CheckMaxRight:
00004E02 B041                       	cmp.w	d1,d0					; Have we reached the max charge speed?
00004E04 6F00                       	ble.s	.SetChargeSpeed				; If not, branch
00004E06                            
00004E06                            .CapCharge:
00004E06 3001                       	move.w	d1,d0					; Cap the charge speed
00004E08                            
00004E08                            .SetChargeSpeed:
00004E08 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update the charge speed
00004E0C 4E75                       	rts
00004E0E                            
00004E0E                            .CheckStartCharge:
00004E0E 1038 F603                  	move.b	(v_player_pressed).w,d0			; Did we press A, B, or C while we were holding up?
00004E12 0200 0070                  	andi.b	#$70,d0
00004E16 6700                       	beq.s	.DontCharge				; If not, branch
00004E18                            
00004E18 117C 0001 002A             	move.b	#1,oPlayerCharge(a0)			; Set the look double tap timer to be active
00004E1E 303C 00BE                  	move.w	#$BE,d0					; Play charge sound
00004E22 4EB8 2708                  	jsr	PlayFMSound
00004E26                            
00004E26                            .DontCharge:
00004E26 6000 0000                  	bra.w	.Settle					; Settle movement
00004E2A                            
00004E2A                            .CheckUnleashPeelout:
00004E2A 0C28 001E 002A             	cmpi.b	#30,oPlayerCharge(a0)			; Have we fully charged the peelout?
00004E30 6700                       	beq.s	.UnleashPeelout				; If so, branch
00004E32                            
00004E32 303C 00AB                  	move.w	#$AB,d0					; Play charge stop sound
00004E36 4EB8 2708                  	jsr	PlayFMSound
00004E3A 117C 0000 002A             	move.b	#0,oPlayerCharge(a0)			; Stop charging
00004E40 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)
00004E46 6000                       	bra.s	.CheckForSpindash			; Check for spindash
00004E48                            
00004E48                            .UnleashPeelout:
00004E48 117C 0000 002A             	move.b	#0,oPlayerCharge(a0)			; Stop charging
00004E4E 303C 00BC                  	move.w	#$BC,d0					; Play charge release sound
00004E52 4EB8 2708                  	jsr	PlayFMSound
00004E56 6000 0000                  	bra.w	.ResetScreen				; Reset screen position
00004E5A                            
00004E5A                            ; -------------------------------------------------------------------------------
00004E5A                            
00004E5A 6100 0000                  	bsr.w	ObjSonic_MoveGndLeft			; Move left
00004E5E 6000 0000                  	bra.w	.ResetScreen				; Reset screen position
00004E62                            
00004E62                            ; -------------------------------------------------------------------------------
00004E62                            
00004E62                            .LookUp:
00004E62 0838 0000 F602             	btst	#0,(v_player_held).w			; Are we holding up?
00004E68 6700                       	beq.s	.CheckForSpindash			; If not, branch
00004E6A                            
00004E6A 117C 0007 001C             	move.b	#7,oAnim(a0)				; Set animation to looking up animation
00004E70 0C78 00C8 F73E             	cmpi.w	#$C8,(v_cam_y_center).w			; Has the screen scrolled up all the way?
00004E76 6700 0000                  	beq.w	.Settle					; If so, branch
00004E7A 5478 F73E                  	addq.w	#2,(v_cam_y_center).w			; Move the screen up
00004E7E 6000 0000                  	bra.w	.Settle					; Settle movement
00004E82                            
00004E82                            ; -------------------------------------------------------------------------------
00004E82                            
00004E82                            .CheckForSpindash:
00004E82 0838 0006 F788             	btst	#6,(v_look_mode).w			; Is the look down flag set?
00004E88 6600 0000                  	bne.w	.Duck					; If so, branch
00004E8C 0238 000F F788             	andi.b	#$F,(v_look_mode).w			; Clear out the look flags
00004E92 6700                       	beq.s	.CheckDownPress				; If the double tap timer wasn't set, branch
00004E94                            
00004E94 0838 0001 F603             	btst	#1,(v_player_pressed).w			; Have we double tapped down?
00004E9A 6700                       	beq.s	.CheckSpindash				; If not, branch
00004E9C 08F8 0006 F788             	bset	#6,(v_look_mode).w			; Set the look down flag
00004EA2 6000 0000                  	bra.w	.Settle					; Settle movement
00004EA6                            
00004EA6                            .CheckDownPress:
00004EA6 0838 0001 F603             	btst	#1,(v_player_pressed).w			; Have we just pressed down?
00004EAC 6700                       	beq.s	.CheckSpindash				; If not, branch
00004EAE 11FC 0001 F788             	move.b	#1,(v_look_mode).w			; Set the double tap timer to be active
00004EB4 6000 0000                  	bra.w	.Settle					; Settle movement
00004EB8                            
00004EB8                            .CheckSpindash:
00004EB8 0838 0001 F602             	btst	#1,(v_player_held).w			; Are we holding down?
00004EBE 6700                       	beq.s	.ResetScreen				; If not, branch
00004EC0                            
00004EC0 117C 0008 001C             	move.b	#8,oAnim(a0)				; Set animation to ducking animation
00004EC6 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a spindash?
00004ECA 6600                       	bne.s	.DoSettle				; If so, branch
00004ECC                            
00004ECC 1038 F603                  	move.b	(v_player_pressed).w,d0			; Did we press A, B, or C while we were holding down?
00004ED0 0200 0070                  	andi.b	#$70,d0
00004ED4 6700                       	beq.s	.DoSettle				; If not, branch
00004ED6                            
00004ED6 117C 0001 002A             	move.b	#1,oPlayerCharge(a0)			; Set the look double tap timer to be active
00004EDC 317C 0016 0014             	move.w	#$16,oPlayerGVel(a0)			; Set initial spindash charge speed
00004EE2 0828 0000 0022             	btst	#0,oStatus(a0)
00004EE8 6700                       	beq.s	.PlaySpindashSound
00004EEA 4468 0014                  	neg.w	oPlayerGVel(a0)
00004EEE                            
00004EEE                            .PlaySpindashSound:
00004EEE 303C 00BE                  	move.w	#$BE,d0					; Play charge sound
00004EF2 4EB8 2708                  	jsr	PlayFMSound
00004EF6 6100 0000                  	bsr.w	ObjSonic_StartRoll			; Start rolling for the spindash
00004EFA                            
00004EFA                            .DoSettle:
00004EFA 6000                       	bra.s	.Settle					; Settle movement
00004EFC                            
00004EFC                            ; -------------------------------------------------------------------------------
00004EFC                            
00004EFC                            .Duck:
00004EFC 0838 0001 F602             	btst	#1,(v_player_held).w			; Are we holding down?
00004F02 6700                       	beq.s	.ResetScreen				; If not, branch
00004F04                            
00004F04 117C 0008 001C             	move.b	#8,$1C(a0)				; Set animation to ducking animation
00004F0A 0C78 0008 F73E             	cmpi.w	#8,(v_cam_y_center).w			; Has the screen scrolled dowm all the way?
00004F10 6700                       	beq.s	.Settle					; If so, branch
00004F12 5578 F73E                  	subq.w	#2,(v_cam_y_center).w			; Move the screen down
00004F16 6000                       	bra.s	.Settle					; Settle movement
00004F18                            
00004F18                            ; -------------------------------------------------------------------------------
00004F18                            
00004F18                            .ResetScreen:
00004F18 0C78 0060 F73E             	cmpi.w	#$60,(v_cam_y_center).w			; Is the screen centered?
00004F1E 6600                       	bne.s	.CheckIncShift				; If not, branch
00004F20                            
00004F20 1038 F788                  	move.b	(v_look_mode).w,d0			; Get look double tap timer
00004F24 0200 000F                  	andi.b	#$F,d0
00004F28 6600                       	bne.s	.Settle					; If it's active, branch
00004F2A 11FC 0000 F788             	move.b	#0,(v_look_mode).w			; Reset double tap timer and charge lock flags
00004F30 6000                       	bra.s	.Settle					; Settle movement
00004F32                            
00004F32                            .CheckIncShift:
00004F32 6400                       	bcc.s	.DecShift				; If the screen needs to move back down, branch
00004F34 5878 F73E                  	addq.w	#4,(v_cam_y_center).w			; Move the screen back up
00004F38                            
00004F38                            .DecShift:
00004F38 5578 F73E                  	subq.w	#2,(v_cam_y_center).w			; Move the screen back down
00004F3C                            
00004F3C                            ; -------------------------------------------------------------------------------
00004F3C                            
00004F3C                            .Settle:
00004F3C 1038 F602                  	move.b	(v_player_held).w,d0			; Are we holding left or right?
00004F40 0200 000C                  	andi.b	#$C,d0
00004F44 6600                       	bne.s	.CalcXYVels				; If so, branch
00004F46                            
00004F46 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current ground velocity
00004F4A 6700                       	beq.s	.CalcXYVels				; If we aren't moving at all, branch
00004F4C 6B00                       	bmi.s	.SettleLeft				; If we are moving left, branch
00004F4E                            
00004F4E 9045                       	sub.w	d5,d0					; Settle right
00004F50 6400                       	bcc.s	.SetGVel				; If we are still moving, branch
00004F52 303C 0000                  	move.w	#0,d0					; Stop moving
00004F56                            
00004F56                            .SetGVel:
00004F56 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
00004F5A 6000                       	bra.s	.CalcXYVels				; Calculate X and Y velocities
00004F5C                            
00004F5C                            .SettleLeft:
00004F5C D045                       	add.w	d5,d0					; Settle left
00004F5E 6400                       	bcc.s	.SetGVel2				; If we are still moving, branch
00004F60 303C 0000                  	move.w	#0,d0					; Stop moving
00004F64                            
00004F64                            .SetGVel2:
00004F64 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
00004F68                            
00004F68                            .CalcXYVels:
00004F68 1028 0026                  	move.b	oAngle(a0),d0				; Get sine and cosine of our current angle
00004F6C 4EB8 0AAC                  	jsr	CalcSine
00004F70 C3E8 0014                  	muls.w	oPlayerGVel(a0),d1			; Get X velocity (ground velocity * cos(angle))
00004F74 E081                       	asr.l	#8,d1
00004F76 3141 0010                  	move.w	d1,oXVel(a0)
00004F7A C1E8 0014                  	muls.w	oPlayerGVel(a0),d0			; Get Y velocity (ground velocity * sin(angle))
00004F7E E080                       	asr.l	#8,d0
00004F80 3140 0012                  	move.w	d0,oYVel(a0)
00004F84                            
00004F84                            ; -------------------------------------------------------------------------------
00004F84                            ; Handle wall collision for Sonic
00004F84                            ; -------------------------------------------------------------------------------
00004F84                            
00004F84                            ObjSonic_CheckWallCol:
00004F84 1028 0026                  	move.b	oAngle(a0),d0				; Are we moving on a ceiling?
00004F88 0600 0040                  	addi.b	#$40,d0
00004F8C 6B00                       	bmi.s	.End					; If so, branch
00004F8E                            
00004F8E 123C 0040                  	move.b	#$40,d1					; Get angle to point the sensor towards (angle +/- 90 degrees)
00004F92 4A68 0014                  	tst.w	oPlayerGVel(a0)
00004F96 6700                       	beq.s	.End
00004F98 6B00                       	bmi.s	.RotAngle
00004F9A 4441                       	neg.w	d1
00004F9C                            
00004F9C                            .RotAngle:
00004F9C 1028 0026                  	move.b	oAngle(a0),d0
00004FA0 D001                       	add.b	d1,d0
00004FA2                            
00004FA2 3F00                       	move.w	d0,-(sp)				; Get distance from wall
00004FA4 6100 0000                  	bsr.w	Player_CalcRoomInFront
00004FA8 301F                       	move.w	(sp)+,d0
00004FAA 4A41                       	tst.w	d1
00004FAC 6A00                       	bpl.s	.End					; If we aren't colliding with a wall, branch
00004FAE E141                       	asl.w	#8,d1					; Get zip distance
00004FB0                            
00004FB0 0600 0020                  	addi.b	#$20,d0					; Get the angle of the wall
00004FB4 0200 00C0                  	andi.b	#$C0,d0
00004FB8 6700                       	beq.s	.ZipUp					; If we are facing a wall downwards, branch
00004FBA 0C00 0040                  	cmpi.b	#$40,d0					; Are we facing a wall on the left?
00004FBE 6700                       	beq.s	.ZipRight				; If so, branch
00004FC0 0C00 0080                  	cmpi.b	#$80,d0					; Are we facing a wall upwards?
00004FC4 6700                       	beq.s	.ZipDown				; If so, branch
00004FC6                            
00004FC6                            .ZipLeft:
00004FC6 D368 0010                  	add.w	d1,oXVel(a0)				; Zip to the left
00004FCA 08E8 0005 0022             	bset	#5,oStatus(a0)				; Mark as pushing
00004FD0 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)			; Stop moving
00004FD6 4E75                       	rts
00004FD8                            
00004FD8                            .ZipDown:
00004FD8 9368 0012                  	sub.w	d1,oYVel(a0)				; Zip downwards
00004FDC 4E75                       	rts
00004FDE                            
00004FDE                            .ZipRight:
00004FDE 9368 0010                  	sub.w	d1,oXVel(a0)				; Zip to the right
00004FE2 08E8 0005 0022             	bset	#5,oStatus(a0)				; Mark as pushing
00004FE8 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)			; Stop moving
00004FEE 4E75                       	rts
00004FF0                            
00004FF0                            .ZipUp:
00004FF0 D368 0012                  	add.w	d1,oYVel(a0)				; Zip upwards
00004FF4                            
00004FF4                            .End:
00004FF4 4E75                       	rts
00004FF6                            
00004FF6                            ; -------------------------------------------------------------------------------
00004FF6                            ; Move Sonic left on the ground
00004FF6                            ; -------------------------------------------------------------------------------
00004FF6                            
00004FF6                            ObjSonic_MoveGndLeft:
00004FF6 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout or spindash?
00004FFA 6600                       	bne.s	.End					; If so, branch
00004FFC                            
00004FFC 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current ground velocity
00005000 6700                       	beq.s	.Normal					; If we aren't moving at all, branch
00005002 6A00                       	bpl.s	.Skid					; If we are moving right, branch
00005004                            
00005004                            .Normal:
00005004 08E8 0000 0022             	bset	#0,oStatus(a0)				; Face left
0000500A 6600                       	bne.s	.Accelerate				; If we were already facing left, branch
0000500C 08A8 0005 0022             	bclr	#5,oStatus(a0)				; Stop pushing
00005012 117C 0001 001D             	move.b	#1,oPrevAnim(a0)			; Reset animation
00005018                            
00005018                            .Accelerate:
00005018 3206                       	move.w	d6,d1					; Get top speed
0000501A 4441                       	neg.w	d1
0000501C B041                       	cmp.w	d1,d0					; Have we already reached it?
0000501E 6F00                       	ble.s	.SetGVel				; If so, branch
00005020 9045                       	sub.w	d5,d0					; Apply acceleration
00005022 B041                       	cmp.w	d1,d0					; Have we reached top speed?
00005024 6E00                       	bgt.s	.SetGVel				; If not, branch
00005026 3001                       	move.w	d1,d0					; Cap our velocity
00005028                            
00005028                            .SetGVel:
00005028 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
0000502C 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
00005032 4E75                       	rts
00005034                            
00005034                            .Skid:
00005034 9044                       	sub.w	d4,d0					; Apply deceleration
00005036 6400                       	bcc.s	.SetGVel2				; If we are still moving right, branch
00005038 303C FF80                  	move.w	#-$80,d0				; If we are now moving left, set velocity to -0.5
0000503C                            
0000503C                            .SetGVel2:
0000503C 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
00005040                            
00005040 1028 0026                  	move.b	oAngle(a0),d0				; Are we on a floor?
00005044 0600 0020                  	addi.b	#$20,d0
00005048 0200 00C0                  	andi.b	#$C0,d0
0000504C 6600                       	bne.s	.End					; If not, branch
0000504E 0C40 0400                  	cmpi.w	#$400,d0				; Is our ground velocity at least 4?
00005052 6D00                       	blt.s	.End					; If not, branch
00005054                            
00005054 117C 000D 001C             	move.b	#$D,oAnim(a0)				; Set animation to skidding animation
0000505A 08A8 0000 0022             	bclr	#0,oStatus(a0)				; Face right
00005060 303C 00A4                  	move.w	#$A4,d0					; Play skidding sound
00005064 4EB8 2708                  	jsr	PlayFMSound
00005068                            
00005068                            .End:
00005068 4E75                       	rts
0000506A                            
0000506A                            ; -------------------------------------------------------------------------------
0000506A                            ; Move Sonic right on the ground
0000506A                            ; -------------------------------------------------------------------------------
0000506A                            
0000506A                            ObjSonic_MoveGndRight:
0000506A 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout or spindash?
0000506E 6600                       	bne.s	.End					; If so, branch
00005070                            
00005070 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current ground velocity
00005074 6B00                       	bmi.s	.Skid
00005076                            
00005076                            .Normal:
00005076 08A8 0000 0022             	bclr	#0,oStatus(a0)				; Face right
0000507C 6700                       	beq.s	.Accelerate				; If we were already facing right, branch
0000507E 08A8 0005 0022             	bclr	#5,oStatus(a0)				; Stop pushing
00005084 117C 0001 001D             	move.b	#1,oPrevAnim(a0)			; Reset animation
0000508A                            
0000508A                            .Accelerate:
0000508A B046                       	cmp.w	d6,d0					; Have we already reached top speed?
0000508C 6C00                       	bge.s	.SetGVel				; If so, branch
0000508E D045                       	add.w	d5,d0					; Apply acceleration
00005090 B046                       	cmp.w	d6,d0					; Have we reached top speed?
00005092 6D00                       	blt.s	.SetGVel				; If not, branch
00005094 3006                       	move.w	d6,d0					; Cap our velocity
00005096                            
00005096                            .SetGVel:
00005096 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
0000509A 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
000050A0 4E75                       	rts
000050A2                            
000050A2                            .Skid:
000050A2 D044                       	add.w	d4,d0					; Apply deceleration
000050A4 6400                       	bcc.s	.SetGVel2				; If we are still moving left, branch
000050A6 303C 0080                  	move.w	#$80,d0					; If we are now moving right, set velocity to 0.5
000050AA                            
000050AA                            .SetGVel2:
000050AA 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
000050AE                            
000050AE 1028 0026                  	move.b	oAngle(a0),d0				; Are we on a floor?
000050B2 0600 0020                  	addi.b	#$20,d0
000050B6 0200 00C0                  	andi.b	#$C0,d0
000050BA 6600                       	bne.s	.End					; If not, branch
000050BC 0C40 FC00                  	cmpi.w	#-$400,d0				; Is our ground velocity at least -4?
000050C0 6E00                       	bgt.s	.End					; If not, branch
000050C2                            
000050C2 117C 000D 001C             	move.b	#$D,oAnim(a0)				; Set animation to skidding animation
000050C8 08E8 0000 0022             	bset	#0,oStatus(a0)				; Face left
000050CE 303C 00A4                  	move.w	#$A4,d0					; Play skidding sound
000050D2 4EB8 2708                  	jsr	PlayFMSound
000050D6                            
000050D6                            .End:
000050D6 4E75                       	rts
000050D8                            
000050D8                            ; -------------------------------------------------------------------------------
000050D8                            ; Handle Sonic's movement while rolling on the ground
000050D8                            ; -------------------------------------------------------------------------------
000050D8                            
000050D8                            ObjSonic_MoveRoll:
000050D8 3C38 F760                  	move.w	(v_sonic_top_speed).w,d6		; Get top speed (multiplied by 2)
000050DC E346                       	asl.w	#1,d6
000050DE 3A38 F762                  	move.w	(v_sonic_acceleration).w,d5		; Get acceleration (divided by 2)
000050E2 E245                       	asr.w	#1,d5
000050E4 3838 F764                  	move.w	(v_sonic_deceleration).w,d4		; Get deceleration (divided by 4)
000050E8 E444                       	asr.w	#2,d4
000050EA                            
000050EA 4A38 F7CA                  	tst.b	(v_jump_only).w				; Can we only jump?
000050EE 6600 0000                  	bne.w	.CalcXYVels				; If so, branch
000050F2 4A68 003E                  	tst.w	oPlayerMoveLock(a0)			; Is our movement locked temporarily?
000050F6 6600                       	bne.s	.NotRight				; If so, branch
000050F8                            
000050F8 0838 0002 F602             	btst	#2,(v_player_held).w			; Are we holding left?
000050FE 6700                       	beq.s	.NotLeft				; If not, branch
00005100 6100 0000                  	bsr.w	ObjSonic_MoveRollLeft			; Move left
00005104                            
00005104                            .NotLeft:
00005104 0838 0003 F602             	btst	#3,(v_player_held).w			; Are we holding right
0000510A 6700                       	beq.s	.NotRight				; If not, branch
0000510C 6100 0000                  	bsr.w	ObjSonic_MoveRollRight			; Move right
00005110                            
00005110                            .NotRight:
00005110 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a spindash?
00005114 6700 0000                  	beq.w	.Settle					; If not, branch
00005118                            
00005118                            ; -------------------------------------------------------------------------------
00005118                            
00005118                            .Spindash:
00005118 303C 004B                  	move.w	#75,d0					; Get charge speed increment value
0000511C 3238 F760                  	move.w	(v_sonic_top_speed).w,d1		; Get max charge speed (top speed * 2)
00005120 3401                       	move.w	d1,d2
00005122 E341                       	asl.w	#1,d1
00005124 4A39 00FF 1520             	tst.b	(v_speed_shoes).l			; Do we have speed shoes?
0000512A 6700                       	beq.s	.NoSpeedShoes				; If not, branch
0000512C E242                       	asr.w	#1,d2					; Get max charge speed for speed shoes ((top speed * 2) - (top speed / 2))
0000512E 9242                       	sub.w	d2,d1
00005130                            
00005130                            .NoSpeedShoes:
00005130 0828 0000 0022             	btst	#0,oStatus(a0)				; Are we facing left?
00005136 6700                       	beq.s	.IncSpindashCharge			; If not, branch
00005138 4440                       	neg.w	d0					; Negate the charge speed increment value
0000513A 4441                       	neg.w	d1					; Negate the max charge speed
0000513C                            
0000513C                            .IncSpindashCharge:
0000513C D168 0014                  	add.w	d0,oPlayerGVel(a0)			; Increment charge speed
00005140                            
00005140 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current charge speed
00005144 0828 0000 0022             	btst	#0,oStatus(a0)				; Are we facing left?
0000514A 6700                       	beq.s	.CheckMaxRight				; If not, branch
0000514C B240                       	cmp.w	d0,d1					; Have we reached the max charge speed?
0000514E 6F00                       	ble.s	.SetChargeSpeed				; If not, branch
00005150 6000                       	bra.s	.CapCharge				; If so, cap it
00005152                            
00005152                            .CheckMaxRight:
00005152 B041                       	cmp.w	d1,d0					; Have we reached the max charge speed?
00005154 6F00                       	ble.s	.SetChargeSpeed				; If not, branch
00005156                            
00005156                            .CapCharge:
00005156 3001                       	move.w	d1,d0					; Cap the charge speed
00005158                            
00005158                            .SetChargeSpeed:
00005158 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update the charge speed
0000515C                            
0000515C 0838 0001 F602             	btst	#1,(v_player_held).w			; Are we holding down?
00005162 6700                       	beq.s	.NotDown				; If not, branch
00005164 4E75                       	rts
00005166                            
00005166                            .ChargeNotFull:
00005166 303C 00AB                  	move.w	#$AB,d0					; Play charge stop sound
0000516A 4EB8 2708                  	jsr	PlayFMSound
0000516E                            
0000516E 117C 0000 002A             	move.b	#0,oPlayerCharge(a0)			; Stop charging
00005174 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)
0000517A 317C 0000 0010             	move.w	#0,oXVel(a0)
00005180 317C 0000 0012             	move.w	#0,oYVel(a0)
00005186                            
00005186 6000 0000                  	bra.w	.StopRolling				; Stop rolling
0000518A                            
0000518A                            .NotDown:
0000518A 0C28 002D 002A             	cmpi.b	#45,oPlayerCharge(a0)			; Have we fully charged the spindash?
00005190 66D4                       	bne.s	.ChargeNotFull				; If not, branch
00005192                            
00005192 117C 0000 002A             	move.b	#0,oPlayerCharge(a0)			; Stop charging
00005198 303C 00BC                  	move.w	#$BC,d0					; Play charge release sound
0000519C 4EB8 2708                  	jsr	PlayFMSound
000051A0                            
000051A0 0828 0000 0022             	btst	#0,oStatus(a0)				; Are we facing left?
000051A6 6600                       	bne.s	.ChargeLeft				; If so, branch
000051A8 6100 0000                  	bsr.w	ObjSonic_MoveRollRight			; Charge towards the right
000051AC 6000                       	bra.s	.Settle					; Settle movement
000051AE                            
000051AE                            .ChargeLeft:
000051AE 6100 0000                  	bsr.w	ObjSonic_MoveRollLeft			; Charge towards the left
000051B2 6000                       	bra.s	.Settle					; Settle movement
000051B4 4E75                       	rts
000051B6                            
000051B6                            ; -------------------------------------------------------------------------------
000051B6                            
000051B6                            .Settle:
000051B6 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current ground velocity
000051BA 6700                       	beq.s	.CheckStopRoll				; If we aren't moving at all, branch
000051BC 6B00                       	bmi.s	.SettleLeft				; If we are moving left, branch
000051BE                            
000051BE 9045                       	sub.w	d5,d0					; Settle right
000051C0 6400                       	bcc.s	.SetGVel				; If we are still moving, branch
000051C2 303C 0000                  	move.w	#0,d0					; Stop moving
000051C6                            
000051C6                            .SetGVel:
000051C6 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
000051CA 6000                       	bra.s	.CheckStopRoll				; Calculate X and Y velocities
000051CC                            
000051CC                            .SettleLeft:
000051CC D045                       	add.w	d5,d0					; Settle left
000051CE 6400                       	bcc.s	.SetGVel2				; If we are still moving, branch
000051D0 303C 0000                  	move.w	#0,d0					; Stop moving
000051D4                            
000051D4                            .SetGVel2:
000051D4 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
000051D8                            
000051D8                            .CheckStopRoll:
000051D8 4A68 0014                  	tst.w	oPlayerGVel(a0)				; Are we still moving?
000051DC 6600                       	bne.s	.CalcXYVels				; If so, branch
000051DE 303C 00AB                  	move.w	#$AB,d0					; Play charge stop sound
000051E2 4EB8 2708                  	jsr	PlayFMSound
000051E6                            
000051E6                            .StopRolling:
000051E6 08A8 0002 0022             	bclr	#2,oStatus(a0)				; Stop rolling
000051EC                            
000051EC 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
000051F2 6700                       	beq.s	.NotMini				; If not, branch
000051F4 117C 000A 0016             	move.b	#$A,oYRadius(a0)			; Restore miniature hitbox size
000051FA 117C 0005 0017             	move.b	#5,oXRadius(a0)
00005200 5568 000C                  	subq.w	#2,oY(a0)
00005204 6000                       	bra.s	.ResetAnim
00005206                            
00005206                            .NotMini:
00005206 117C 0013 0016             	move.b	#$13,oYRadius(a0)			; Restore hitbox size
0000520C 117C 0009 0017             	move.b	#9,oXRadius(a0)
00005212 5B68 000C                  	subq.w	#5,oY(a0)
00005216                            
00005216                            .ResetAnim:
00005216 117C 0005 001C             	move.b	#5,oAnim(a0)				; Set animation to idle animation
0000521C                            
0000521C                            .CalcXYVels:
0000521C 1028 0026                  	move.b	oAngle(a0),d0				; Get sine and cosine of our current angle
00005220 4EB8 0AAC                  	jsr	CalcSine
00005224 C1E8 0014                  	muls.w	oPlayerGVel(a0),d0			; Get Y velocity (ground velocity * sin(angle))
00005228 E080                       	asr.l	#8,d0
0000522A 3140 0012                  	move.w	d0,oYVel(a0)
0000522E C3E8 0014                  	muls.w	oPlayerGVel(a0),d1			; Get X velocity (ground velocity * cos(angle))
00005232 E081                       	asr.l	#8,d1
00005234 0C41 1000                  	cmpi.w	#$1000,d1				; Is the X velocity greater than 16?
00005238 6F00                       	ble.s	.CheckCapLeft				; If not, branch
0000523A 323C 1000                  	move.w	#$1000,d1				; Cap the X velocity at 16
0000523E                            
0000523E                            .CheckCapLeft:
0000523E 0C41 F000                  	cmpi.w	#-$1000,d1				; Is the X velocity less than -16?
00005242 6C00                       	bge.s	.SetXVel				; If not, branch
00005244 323C F000                  	move.w	#-$1000,d1				; Cap the X velocity at -16
00005248                            
00005248                            .SetXVel:
00005248 3141 0010                  	move.w	d1,oXVel(a0)				; Set X velocity
0000524C                            
0000524C 6000 FD36                  	bra.w	ObjSonic_CheckWallCol			; Handle wall collision
00005250                            
00005250                            ; -------------------------------------------------------------------------------
00005250                            ; Move Sonic left on the ground while rolling
00005250                            ; -------------------------------------------------------------------------------
00005250                            
00005250                            ObjSonic_MoveRollLeft:
00005250 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current ground velocity
00005254 6700                       	beq.s	.StartRoll				; If we aren't moving at all, branch
00005256 6A00                       	bpl.s	.DecelRoll				; If we are moving right, branch
00005258                            
00005258                            .StartRoll:
00005258 08E8 0000 0022             	bset	#0,oStatus(a0)				; Face left
0000525E 117C 0002 001C             	move.b	#2,oAnim(a0)				; Set animation to rolling animation
00005264 4E75                       	rts
00005266                            
00005266                            .DecelRoll:
00005266 9044                       	sub.w	d4,d0					; Apply deceleration
00005268 6400                       	bcc.s	.SetGVel				; If we are still moving right, branch
0000526A 303C FF80                  	move.w	#-$80,d0				; If we are now moving left, set velocity to -0.5
0000526E                            
0000526E                            .SetGVel:
0000526E 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
00005272 4E75                       	rts
00005274                            
00005274                            ; -------------------------------------------------------------------------------
00005274                            ; Move Sonic right on the ground while rolling
00005274                            ; -------------------------------------------------------------------------------
00005274                            
00005274                            ObjSonic_MoveRollRight:
00005274 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current ground velocity
00005278 6B00                       	bmi.s	.DecelRoll				; If we are moving left, branch
0000527A                            
0000527A                            .StartRoll:
0000527A 08A8 0000 0022             	bclr	#0,oStatus(a0)				; Face right
00005280 117C 0002 001C             	move.b	#2,oAnim(a0)				; Set animation to rolling animation
00005286 4E75                       	rts
00005288                            
00005288                            .DecelRoll:
00005288 D044                       	add.w	d4,d0					; Apply deceleration
0000528A 6400                       	bcc.s	.SetGVel				; If we are still moving left, branch
0000528C 303C 0080                  	move.w	#$80,d0					; If we are now moving left, set velocity to 0.5
00005290                            
00005290                            .SetGVel:
00005290 3140 0014                  	move.w	d0,oPlayerGVel(a0)			; Update ground velocity
00005294 4E75                       	rts
00005296                            
00005296                            ; -------------------------------------------------------------------------------
00005296                            ; Handle Sonic's movement in the air
00005296                            ; -------------------------------------------------------------------------------
00005296                            
00005296                            ObjSonic_MoveAir:
00005296 3C38 F760                  	move.w	(v_sonic_top_speed).w,d6		; Get top speed
0000529A 3A38 F762                  	move.w	(v_sonic_acceleration).w,d5		; Get acceleration (multiplied by 2)
0000529E E345                       	asl.w	#1,d5
000052A0                            
000052A0 3028 0010                  	move.w	oXVel(a0),d0				; Get current X velocity
000052A4                            
000052A4 0C39 0001 00FF 152E        	cmpi.b	#1,(v_time_zone).l			; Are we in the present?
000052AC 6600                       	bne.s	.CheckLeft				; If not, branch
000052AE 4A79 00FF 1506             	tst.w	(v_zone).l				; Are we in Palmtree Panic act 1?
000052B4 6600                       	bne.s	.CheckLeft				; If not, branch
000052B6                            
000052B6 0C68 06C8 0008             	cmpi.w	#$6C8,oX(a0)				; Are we left of the first 3D ramp launch area?
000052BC 6500                       	bcs.s	.Check3DRamp				; If so, branch
000052BE 0C68 0840 0008             	cmpi.w	#$840,oX(a0)				; Are we right of the first 3D ramp launch area?
000052C4 6400                       	bcc.s	.Check3DRamp				; If so, branch
000052C6 4E75                       	rts						; Lock our horizontal movement while we launch off the first 3D ramp
000052C8                            
000052C8                            .Check3DRamp:
000052C8 0828 0001 002C             	btst	#1,oPlayerCtrl(a0)			; Are we on a 3D ramp?
000052CE 6600                       	bne.s	.SetXVel				; If so, branch
000052D0                            
000052D0                            .CheckLeft:
000052D0 0838 0002 F602             	btst	#2,(v_player_held).w			; Are we holding left?
000052D6 6700                       	beq.s	.CheckRight				; If not, branch
000052D8 08E8 0000 0022             	bset	#0,oStatus(a0)				; Face left
000052DE 9045                       	sub.w	d5,d0					; Apply acceleration
000052E0 3206                       	move.w	d6,d1					; Get top speed
000052E2 4441                       	neg.w	d1
000052E4 B041                       	cmp.w	d1,d0					; Have we reached top speed?
000052E6 6E00                       	bgt.s	.CheckRight				; If not, branch
000052E8 3001                       	move.w	d1,d0					; Cap at top speed
000052EA                            
000052EA                            .CheckRight:
000052EA 0838 0003 F602             	btst	#3,(v_player_held).w			; Are we holding right?
000052F0 6700                       	beq.s	.SetXVel				; If not, branch
000052F2 08A8 0000 0022             	bclr	#0,oStatus(a0)				; Face right
000052F8 D045                       	add.w	d5,d0					; Apply acceleration
000052FA B046                       	cmp.w	d6,d0					; Have we reached top speed?
000052FC 6D00                       	blt.s	.SetXVel				; If not, branch
000052FE 3006                       	move.w	d6,d0					; Cap at top speed
00005300                            
00005300                            .SetXVel:
00005300 3140 0010                  	move.w	d0,oXVel(a0)				; Update X velocity
00005304                            
00005304                            ; -------------------------------------------------------------------------------
00005304                            
00005304                            .ResetScreen:
00005304 0C78 0060 F73E             	cmpi.w	#$60,(v_cam_y_center).w			; Is the screen centered?
0000530A 6700                       	beq.s	.CheckDrag				; If not, branch
0000530C 6400                       	bcc.s	.DecShift				; If the screen needs to move back down, branch
0000530E 5878 F73E                  	addq.w	#4,(v_cam_y_center).w			; Move the screen back up
00005312                            
00005312                            .DecShift:
00005312 5578 F73E                  	subq.w	#2,(v_cam_y_center).w			; Move the screen back down
00005316                            
00005316                            ; -------------------------------------------------------------------------------
00005316                            
00005316                            .CheckDrag:
00005316 0C68 FC00 0012             	cmpi.w	#-$400,oYVel(a0)			; Are we moving upwards at a velocity greater than -4?
0000531C 6500                       	bcs.s	.End					; If not, branch
0000531E                            
0000531E 3028 0010                  	move.w	oXVel(a0),d0				; Get air drag value (X velocity / $20)
00005322 3200                       	move.w	d0,d1
00005324 EA41                       	asr.w	#5,d1
00005326 6700                       	beq.s	.End					; If there is no air drag to apply, branch
00005328 6B00                       	bmi.s	.DecLXVel				; If we are moving left, branch
0000532A                            
0000532A                            .DecRXVel:
0000532A 9041                       	sub.w	d1,d0					; Apply air drag
0000532C 6400                       	bcc.s	.SetRAirDrag				; If we haven't stopped horizontally, branch
0000532E 303C 0000                  	move.w	#0,d0					; Stop our horizontal movement
00005332                            
00005332                            .SetRAirDrag:
00005332 3140 0010                  	move.w	d0,oXVel(a0)				; Update X velocity
00005336 4E75                       	rts
00005338                            
00005338                            .DecLXVel:
00005338 9041                       	sub.w	d1,d0					; Apply air drag
0000533A 6500                       	bcs.s	.SetLAirDrag				; If we haven't stopped horizontally, branch
0000533C 303C 0000                  	move.w	#0,d0					; Stop our horizontal movement
00005340                            
00005340                            .SetLAirDrag:
00005340 3140 0010                  	move.w	d0,oXVel(a0)				; Update X velocity
00005344                            
00005344                            .End:
00005344 4E75                       	rts
00005346                            
00005346                            ; -------------------------------------------------------------------------------
00005346                            ; Leftover unused function from Sonic 1 that handles squashing Sonic
00005346                            ; -------------------------------------------------------------------------------
00005346                            
00005346                            ObjSonic_CheckSquash:
00005346 1028 0026                  	move.b	oAngle(a0),d0				; Are we on the floor?
0000534A 0600 0020                  	addi.b	#$20,d0
0000534E 0200 00C0                  	andi.b	#$C0,d0
00005352 6600                       	bne.s	.End					; If not, branch
00005354                            
00005354 6100 0000                  	bsr.w	Player_CheckCeiling			; Are we also colliding with the ceiling?
00005358 4A41                       	tst.w	d1
0000535A 6A00                       	bpl.s	.End					; If not, branch
0000535C                            
0000535C 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)			; Stop movement
00005362 317C 0000 0010             	move.w	#0,oXVel(a0)
00005368 317C 0000 0012             	move.w	#0,oYVel(a0)
0000536E 117C 000B 001C             	move.b	#$B,oAnim(a0)				; Set animation to squished/warping animation (leftover from Sonic 1)
00005374                            
00005374                            .End:
00005374 4E75                       	rts
00005376                            
00005376                            ; -------------------------------------------------------------------------------
00005376                            ; Handle level boundaries for Sonic
00005376                            ; -------------------------------------------------------------------------------
00005376                            
00005376                            ObjSonic_LevelBound:
00005376 2228 0008                  	move.l	oX(a0),d1				; Get X position for horizontal boundary checking (X position + X velocity)
0000537A 3028 0010                  	move.w	oXVel(a0),d0
0000537E 48C0                       	ext.l	d0
00005380 E180                       	asl.l	#8,d0
00005382 D280                       	add.l	d0,d1
00005384 4841                       	swap	d1
00005386                            
00005386 3038 F728                  	move.w	(v_left_bound).w,d0			; Have we crossed the left boundary?
0000538A 0640 0010                  	addi.w	#16,d0
0000538E B041                       	cmp.w	d1,d0
00005390 6200                       	bhi.s	.Sides					; If so, branch
00005392                            
00005392 3038 F72A                  	move.w	(v_right_bound).w,d0			; Get right boundary
00005396 0640 0130                  	addi.w	#320-16,d0
0000539A 4A38 F7AA                  	tst.b	(v_boss_fight).w			; Are we in a boss fight?
0000539E 6600                       	bne.s	.ScreenLocked				; If so, branch
000053A0 0640 0038                  	addi.w	#56,d0					; If not, extend the boundary beyond the screen
000053A4                            
000053A4                            .ScreenLocked:
000053A4 B041                       	cmp.w	d1,d0					; Have we crossed the right boundary?
000053A6 6300                       	bls.s	.Sides					; If so, branch
000053A8                            
000053A8                            .CheckBottom:
000053A8 3038 F72E                  	move.w	(v_bottom_bound).w,d0			; Have we crossed the bottom boundary?
000053AC 0640 00E0                  	addi.w	#224,d0
000053B0 B068 000C                  	cmp.w	$C(a0),d0
000053B4 6D00                       	blt.s	.Bottom					; If so, branch
000053B6 4E75                       	rts
000053B8                            
000053B8                            .Bottom:
000053B8 0C28 002B 001C             	cmpi.b	#$2B,oAnim(a0)				; Is the player giving up from boredom?
000053BE 6600 0000                  	bne.w	KillPlayer				; If not, kill Sonic as normal
000053C2 117C 0006 0024             	move.b	#6,oRoutine(a0)				; If so, just set the routine to death
000053C8 4E75                       	rts
000053CA                            
000053CA                            .Sides:
000053CA 3140 0008                  	move.w	d0,oX(a0)				; Stop at the boundary
000053CE 317C 0000 000A             	move.w	#0,oXSub(a0)
000053D4 317C 0000 0010             	move.w	#0,oXVel(a0)
000053DA 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)
000053E0 60C6                       	bra.s	.CheckBottom				; Continue checking for bottom boundary collision
000053E2                            
000053E2                            ; -------------------------------------------------------------------------------
000053E2                            ; Check for rolling for Sonic
000053E2                            ; -------------------------------------------------------------------------------
000053E2                            
000053E2                            ObjSonic_CheckRoll:
000053E2 4A38 F7CA                  	tst.b	(v_jump_only).w				; Can we only jump?
000053E6 6600                       	bne.s	.End					; If so, branch
000053E8                            
000053E8 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get absolute value of our ground velocity
000053EC 6A00                       	bpl.s	.PosInertia
000053EE 4440                       	neg.w	d0
000053F0                            
000053F0                            .PosInertia:
000053F0 0C40 0080                  	cmpi.w	#$80,d0					; Is it at least 0.5?
000053F4 6500                       	bcs.s	.End					; If not, branch
000053F6 1038 F602                  	move.b	(v_player_held).w,d0			; Are we holding left or right?
000053FA 0200 000C                  	andi.b	#$C,d0
000053FE 6600                       	bne.s	.End					; If not, branch
00005400 0838 0001 F602             	btst	#1,(v_player_held).w			; Are we holding down?
00005406 6600                       	bne.s	ObjSonic_StartRoll			; If so, branch
00005408                            
00005408                            .End:
00005408 4E75                       	rts
0000540A                            
0000540A                            ; -------------------------------------------------------------------------------
0000540A                            ; Make Sonic start rolling
0000540A                            ; -------------------------------------------------------------------------------
0000540A                            
0000540A                            ObjSonic_StartRoll:
0000540A 0828 0002 0022             	btst	#2,oStatus(a0)				; Are we already rolling?
00005410 6700                       	beq.s	.DoRoll					; If not, branch
00005412 6000                       	bra.s	.SetRollAnim				; If so, don't worry about fixing the hitbox size
00005414                            
00005414                            .DoRoll:
00005414 08E8 0002 0022             	bset	#2,oStatus(a0)				; Mark as rolling
0000541A 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
00005420 6700                       	beq.s	.NotMini				; If not, branch
00005422 117C 0008 0016             	move.b	#8,oYRadius(a0)				; Set miniature rolling hitbox size
00005428 117C 0005 0017             	move.b	#5,oXRadius(a0)
0000542E 5468 000C                  	addq.w	#2,oY(a0)
00005432 6000                       	bra.s	.SetRollAnim				; Set animatiion
00005434                            
00005434                            .NotMini:
00005434 117C 000E 0016             	move.b	#$E,oYRadius(a0)			; Set rolling hitbox size
0000543A 117C 0007 0017             	move.b	#7,oXRadius(a0)
00005440 5A68 000C                  	addq.w	#5,oY(a0)
00005444                            
00005444                            .SetRollAnim:
00005444 117C 0002 001C             	move.b	#2,oAnim(a0)				; Set animation to rolling animation
0000544A                            
0000544A 4A68 0014                  	tst.w	oPlayerGVel(a0)				; Are we moving left?
0000544E 6B00                       	bmi.s	.End					; If not, branch
00005450 0C68 0200 0014             	cmpi.w	#$200,oPlayerGVel(a0)			; Is our ground velocity less than 2?
00005456 6400                       	bcc.s	.End					; If not, branch
00005458 317C 0200 0014             	move.w	#$200,oPlayerGVel(a0)			; If so, cap our ground velocity at 2
0000545E                            
0000545E                            .End:
0000545E 4E75                       	rts
00005460                            
00005460                            ; -------------------------------------------------------------------------------
00005460                            ; Check for jumping for Sonic
00005460                            ; -------------------------------------------------------------------------------
00005460                            
00005460                            ObjSonic_CheckJump:
00005460 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout or spindash?
00005464 6700                       	beq.s	.CanJump				; If not, branch
00005466 4E75                       	rts
00005468                            
00005468                            .CanJump:
00005468 1038 F602                  	move.b	(v_player_held).w,d0			; Are we holding up or down?
0000546C 0200 0003                  	andi.b	#3,d0
00005470 6700                       	beq.s	.NotUpDown				; If not, branch
00005472 4A68 0014                  	tst.w	oPlayerGVel(a0)				; Are we moving at all?
00005476 6700 0000                  	beq.w	.End					; If not, branch
0000547A                            
0000547A                            .NotUpDown:
0000547A 1038 F603                  	move.b	(v_player_pressed).w,d0			; Have we pressed A, B, or C?
0000547E 0200 0070                  	andi.b	#$70,d0
00005482 6700 0000                  	beq.w	.End					; If not, branch
00005486                            
00005486 0828 0003 0022             	btst	#3,oStatus(a0)				; Are we standing on an object?
0000548C 6700                       	beq.s	.NotOnObj				; If not, branch
0000548E 4EB9 0000 0000             	jsr	ObjSonic_ChkFlipper			; Check if we are on a pinball flipper, and if so, get the angle and speed to launch at
00005494 6700                       	beq.s	.GotAngle				; If we were on a pinball flipper, branch
00005496                            
00005496                            .NotOnObj:
00005496 7000                       	moveq	#0,d0					; Get the amount of space over our head
00005498 1028 0026                  	move.b	oAngle(a0),d0
0000549C 0600 0080                  	addi.b	#$80,d0
000054A0 6100 0000                  	bsr.w	Player_CalcRoomOverHead
000054A4 0C41 0006                  	cmpi.w	#6,d1					; Is there at least 6 pixels of space?
000054A8 6D00 0000                  	blt.w	.End					; If not, branch
000054AC                            
000054AC 343C 0680                  	move.w	#$680,d2				; Get jump speed (6.5)
000054B0 0828 0006 0022             	btst	#6,oStatus(a0)				; Are we underwater?
000054B6 6700                       	beq.s	.NoWater				; If not, branch
000054B8 343C 0380                  	move.w	#$380,d2				; Get underwater jump speed (3.5)
000054BC                            
000054BC                            .NoWater:
000054BC 7000                       	moveq	#0,d0					; Get our angle on the ground
000054BE 1028 0026                  	move.b	oAngle(a0),d0
000054C2 0400 0040                  	subi.b	#$40,d0
000054C6                            
000054C6                            .GotAngle:
000054C6 4EB8 0AAC                  	jsr	CalcSine				; Get the sine and cosine of our angle
000054CA C3C2                       	muls.w	d2,d1					; Get X velocity to jump at (jump speed * cos(angle))
000054CC E081                       	asr.l	#8,d1
000054CE D368 0010                  	add.w	d1,oXVel(a0)
000054D2 C1C2                       	muls.w	d2,d0					; Get Y velocity to jump at (jump speed * sin(angle))
000054D4 E080                       	asr.l	#8,d0
000054D6 D168 0012                  	add.w	d0,oYVel(a0)
000054DA                            
000054DA 08E8 0001 0022             	bset	#1,oStatus(a0)				; Mark as in air
000054E0 08A8 0005 0022             	bclr	#5,oStatus(a0)				; Stop pushing
000054E6 588F                       	addq.l	#4,sp					; Stop handling ground specific routines after this
000054E8 117C 0001 003C             	move.b	#1,oPlayerJump(a0)			; Mark as jumping
000054EE 4228 0038                  	clr.b	oPlayerStick(a0)			; Mark as not sticking to terrain
000054F2 4238 F788                  	clr.b	(v_look_mode).w				; Reset look double tap timer and flags
000054F6                            
000054F6 303C 00A0                  	move.w	#$A0,d0					; Play jump sound
000054FA 4EB8 2708                  	jsr	PlaySound
000054FE                            
000054FE 0828 0002 0022             	btst	#2,oStatus(a0)				; Were we rolling?
00005504 6600                       	bne.s	.RollJump				; If so, branch
00005506 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
0000550C 6700                       	beq.s	.SetJumpSize				; If not, branch
0000550E 117C 0008 0016             	move.b	#8,oYRadius(a0)				; Set miniature jumping hitbox size
00005514 117C 0005 0017             	move.b	#5,oXRadius(a0)
0000551A 5468 000C                  	addq.w	#2,oY(a0)
0000551E 6000                       	bra.s	.StartJump				; Mark as jumping
00005520                            
00005520                            .SetJumpSize:
00005520 117C 000E 0016             	move.b	#$E,oYRadius(a0)			; Set jumping hitbox size
00005526 117C 0007 0017             	move.b	#7,oXRadius(a0)
0000552C 5A68 000C                  	addq.w	#5,oY(a0)
00005530                            
00005530                            .StartJump:
00005530 08E8 0002 0022             	bset	#2,oStatus(a0)				; Mark as rolling
00005536 117C 0002 001C             	move.b	#2,oAnim(a0)				; Set animation to rolling animation
0000553C                            
0000553C                            .End:
0000553C 4E75                       	rts
0000553E                            
0000553E                            .RollJump:
0000553E 08E8 0004 0022             	bset	#4,oStatus(a0)				; Mark as roll-jumping
00005544 4E75                       	rts
00005546                            
00005546                            ; -------------------------------------------------------------------------------
00005546                            ; Handle Sonic's jump height
00005546                            ; -------------------------------------------------------------------------------
00005546                            
00005546                            ObjSonic_JumpHeight:
00005546 4A28 003C                  	tst.b	oPlayerJump(a0)				; Are we jumping?
0000554A 6700                       	beq.s	.NotJump				; If not, branch
0000554C                            
0000554C 323C FC00                  	move.w	#-$400,d1				; Get minimum jump velocity
00005550 0828 0006 0022             	btst	#6,oStatus(a0)				; Are we underwater?
00005556 6700                       	beq.s	.GotCapVel				; If not, branch
00005558 323C FE00                  	move.w	#-$200,d1				; Get minimum underwater jump velocity
0000555C                            
0000555C                            .GotCapVel:
0000555C B268 0012                  	cmp.w	oYVel(a0),d1				; Are we going up faster than the minimum jump velocity?
00005560 6F00                       	ble.s	.End					; If so, branch
00005562 1038 F602                  	move.b	(v_player_held).w,d0			; Are we holding A, B, or C?
00005566 0200 0070                  	andi.b	#$70,d0
0000556A 6600                       	bne.s	.End					; If so, branch
0000556C                            
0000556C 117C 0000 002A             	move.b	#0,oPlayerCharge(a0)			; Stop charging
00005572 3141 0012                  	move.w	d1,oYVel(a0)				; Cap our Y velocity at the minimum jump velocity
00005576                            
00005576                            .End:
00005576 4E75                       	rts
00005578                            
00005578                            .NotJump:
00005578 0C68 F040 0012             	cmpi.w	#-$FC0,oYVel(a0)			; Is our Y velocity less than -15.75?
0000557E 6C00                       	bge.s	.End2					; If not, branch
00005580 317C F040 0012             	move.w	#-$FC0,oYVel(a0)			; Cap our Y velocity at -15.75
00005586                            
00005586                            .End2:
00005586 4E75                       	rts
00005588                            
00005588                            ; -------------------------------------------------------------------------------
00005588                            ; Handle slope resistance for Sonic
00005588                            ; -------------------------------------------------------------------------------
00005588                            
00005588                            ObjSonic_SlopeResist:
00005588 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout or spindash?
0000558C 6600                       	bne.s	.End2					; If so, branch
0000558E                            
0000558E 1028 0026                  	move.b	oAngle(a0),d0				; Are we on a ceiling?
00005592 0600 0060                  	addi.b	#$60,d0
00005596 0C00 00C0                  	cmpi.b	#$C0,d0
0000559A 6400                       	bcc.s	.End2					; If so, branch
0000559C                            
0000559C 1028 0026                  	move.b	oAngle(a0),d0				; Get slope resistance value (sin(angle) / 8)
000055A0 4EB8 0AAC                  	jsr	CalcSine
000055A4 C1FC 0020                  	muls.w	#$20,d0
000055A8 E080                       	asr.l	#8,d0
000055AA                            
000055AA 4A68 0014                  	tst.w	oPlayerGVel(a0)				; Are we moving at all?
000055AE 6700                       	beq.s	.End2					; If not, branch
000055B0 6B00                       	bmi.s	.MovingLeft				; If we are moving left, branch
000055B2 4A40                       	tst.w	d0					; Is the slope resistance value 0?
000055B4 6700                       	beq.s	.End					; If so, branch
000055B6 D168 0014                  	add.w	d0,oPlayerGVel(a0)			; Apply slope resistance
000055BA                            
000055BA                            .End:
000055BA 4E75                       	rts
000055BC                            
000055BC                            .MovingLeft:
000055BC D168 0014                  	add.w	d0,oPlayerGVel(a0)			; Apply slope resistance
000055C0                            
000055C0                            .End2:
000055C0 4E75                       	rts
000055C2                            
000055C2                            ; -------------------------------------------------------------------------------
000055C2                            ; Handle slope resistance for Sonic while rolling
000055C2                            ; -------------------------------------------------------------------------------
000055C2                            
000055C2                            ObjSonic_SlopeResistRoll:
000055C2 4A28 002A                  	tst.b	oPlayerCharge(a0)			; Are we charging a peelout or spindash?
000055C6 6600                       	bne.s	.End					; If so, branch
000055C8                            
000055C8 1028 0026                  	move.b	oAngle(a0),d0				; Are we on a ceiling?
000055CC 0600 0060                  	addi.b	#$60,d0
000055D0 0C00 00C0                  	cmpi.b	#$C0,d0
000055D4 6400                       	bcc.s	.End					; If so, branch
000055D6                            
000055D6 1028 0026                  	move.b	oAngle(a0),d0				; Get slope resistance value (sin(angle) / 3.2)
000055DA 4EB8 0AAC                  	jsr	CalcSine
000055DE C1FC 0050                  	muls.w	#$50,d0
000055E2 E080                       	asr.l	#8,d0
000055E4                            
000055E4 4A68 0014                  	tst.w	oPlayerGVel(a0)				; Are we moving at all?
000055E8 6B00                       	bmi.s	.MovingLeft				; If we are moving left, branch
000055EA 4A40                       	tst.w	d0					; Is the slope resistance value positive?
000055EC 6A00                       	bpl.s	.ApplyResist				; If so, branch
000055EE E480                       	asr.l	#2,d0					; If it's negative, divide it by 4
000055F0                            
000055F0                            .ApplyResist:
000055F0 D168 0014                  	add.w	d0,oPlayerGVel(a0)			; Apply slope resistance
000055F4 4E75                       	rts
000055F6                            
000055F6                            .MovingLeft:
000055F6 4A40                       	tst.w	d0					; Is the slope resistance value negatie?
000055F8 6B00                       	bmi.s	.ApplyResist2				; If so, branch
000055FA E480                       	asr.l	#2,d0					; If it's positive, divide it by 4
000055FC                            
000055FC                            .ApplyResist2:
000055FC D168 0014                  	add.w	d0,oPlayerGVel(a0)			; Apply slope resistance
00005600                            
00005600                            .End:
00005600 4E75                       	rts
00005602                            
00005602                            ; -------------------------------------------------------------------------------
00005602                            ; Check if Sonic should fall off a steep slope or ceiling
00005602                            ; -------------------------------------------------------------------------------
00005602                            
00005602                            ObjSonic_CheckFallOff:
00005602 4E71                       	nop
00005604 4A28 0038                  	tst.b	oPlayerStick(a0)			; Are we stuck to the terrain?
00005608 6600                       	bne.s	.End					; If so, branch
0000560A 4A68 003E                  	tst.w	oPlayerMoveLock(a0)			; Is our movement currently temporarily locked?
0000560E 6600                       	bne.s	.RunMoveLock				; If so, branch
00005610                            
00005610 1028 0026                  	move.b	oAngle(a0),d0				; Are we on a steep enough slope or ceiling?
00005614 0600 0020                  	addi.b	#$20,d0
00005618 0200 00C0                  	andi.b	#$C0,d0
0000561C 6700                       	beq.s	.End					; If not, branch
0000561E                            
0000561E 3028 0014                  	move.w	oPlayerGVel(a0),d0			; Get current ground speed
00005622 6A00                       	bpl.s	.CheckSpeed
00005624 4440                       	neg.w	d0
00005626                            
00005626                            .CheckSpeed:
00005626 0C40 0280                  	cmpi.w	#$280,d0				; Is our ground speed less than 2.5?
0000562A 6400                       	bcc.s	.End					; If not, branch
0000562C                            
0000562C 4268 0014                  	clr.w	oPlayerGVel(a0)				; Set ground velocity to 0
00005630 4E71                       	nop
00005632 4E71                       	nop
00005634 4E71                       	nop
00005636 4E71                       	nop
00005638 08E8 0001 0022             	bset	#1,oStatus(a0)				; Mark as in air
0000563E 317C 001E 003E             	move.w	#30,oPlayerMoveLock(a0)			; Set movement lock timer
00005644                            
00005644                            .End:
00005644 4E75                       	rts
00005646                            
00005646                            .RunMoveLock:
00005646 5368 003E                  	subq.w	#1,oPlayerMoveLock(a0)			; Decrement movement lock timer
0000564A 4E75                       	rts
0000564C                            
0000564C                            ; -------------------------------------------------------------------------------
0000564C                            ; Reset Sonic's angle in the air
0000564C                            ; -------------------------------------------------------------------------------
0000564C                            
0000564C                            ObjSonic_JumpAngle:
0000564C 0828 0001 002C             	btst	#1,oPlayerCtrl(a0)			; Are we on a 3D ramp?
00005652 6600                       	bne.s	.End					; If so, branch
00005654                            
00005654 1028 0026                  	move.b	oAngle(a0),d0				; Get current angle
00005658 6700                       	beq.s	.End					; If it's 0, branch
0000565A 6A00                       	bpl.s	.DecPosAngle				; If it's positive, branch
0000565C                            
0000565C 5400                       	addq.b	#2,d0					; Slowly set angle back to 0
0000565E 6400                       	bcc.s	.DontCap
00005660 7000                       	moveq	#0,d0
00005662                            
00005662                            .DontCap:
00005662 6000                       	bra.s	.SetNewAngle				; Update the angle value
00005664                            
00005664                            .DecPosAngle:
00005664 5500                       	subq.b	#2,d0					; Slowly set angle back to 0
00005666 6400                       	bcc.s	.SetNewAngle
00005668 7000                       	moveq	#0,d0
0000566A                            
0000566A                            .SetNewAngle:
0000566A 1140 0026                  	move.b	d0,oAngle(a0)				; Update angle
0000566E                            
0000566E                            .End:
0000566E 4E75                       	rts
00005670                            
00005670                            ; -------------------------------------------------------------------------------
00005670                            ; Handle level collision while in the air
00005670                            ; -------------------------------------------------------------------------------
00005670                            ; PARAMETERS:
00005670                            ;	a0.l	- Player object RAM
00005670                            ; -------------------------------------------------------------------------------
00005670                            
00005670                            Player_LevelColInAir:
00005670 3228 0010                  	move.w	oXVel(a0),d1				; Get the angle that we are moving at
00005674 3428 0012                  	move.w	oYVel(a0),d2
00005678 4EB8 0D44                  	jsr	CalcAngle
0000567C                            
0000567C 13C0 00FF 157C             	move.b	d0,(v_angle_buffer).l			; Update debug angle buffers
00005682 0400 0020                  	subi.b	#$20,d0
00005686 13C0 00FF 157D             	move.b	d0,(v_angle_normal_buf).l
0000568C 0200 00C0                  	andi.b	#$C0,d0
00005690 13C0 00FF 157E             	move.b	d0,(v_quadrant_normal_buf).l
00005696                            
00005696 0C00 0040                  	cmpi.b	#$40,d0					; Are we moving left?
0000569A 6700 0000                  	beq.w	Player_LvlColAir_Left			; If so, branch
0000569E 0C00 0080                  	cmpi.b	#$80,d0					; Are we moving up?
000056A2 6700 0000                  	beq.w	Player_LvlColAir_Up			; If so, branch
000056A6 0C00 00C0                  	cmpi.b	#$C0,d0					; Are we moving right?
000056AA 6700 0000                  	beq.w	Player_LvlColAir_Right			; If so, branch
000056AE                            
000056AE                            ; -------------------------------------------------------------------------------
000056AE                            ; Handle level collision while moving downwards in the air
000056AE                            ; -------------------------------------------------------------------------------
000056AE                            ; PARAMETERS:
000056AE                            ;	a0.l	- Player object RAM
000056AE                            ; -------------------------------------------------------------------------------
000056AE                            
000056AE                            Player_LvlColAir_Down:
000056AE 6100 0000                  	bsr.w	Player_GetLWallDist			; Are we colliding with a wall on the left?
000056B2 4A41                       	tst.w	d1
000056B4 6A00                       	bpl.s	.NotLeftWall				; If not, branch
000056B6                            
000056B6 9368 0008                  	sub.w	d1,oX(a0)				; Move outside of the wall
000056BA 317C 0000 0010             	move.w	#0,oXVel(a0)				; Stop moving horizontally
000056C0                            
000056C0                            .NotLeftWall:
000056C0 6100 0000                  	bsr.w	Player_GetRWallDist			; Are we colliding with a wall on the right?
000056C4 4A41                       	tst.w	d1
000056C6 6A00                       	bpl.s	.NotRightWall				; If not, branch
000056C8                            
000056C8 D368 0008                  	add.w	d1,oX(a0)				; Move outside of the wall
000056CC 317C 0000 0010             	move.w	#0,oXVel(a0)				; Stop moving horizontally
000056D2                            
000056D2                            .NotRightWall:
000056D2 6100 0000                  	bsr.w	Player_CheckFloor			; Are we colliding with the floor?
000056D6 13C1 00FF 157F             	move.b	d1,(v_floor_dist).l
000056DC 4A41                       	tst.w	d1
000056DE 6A00                       	bpl.s	.End					; If not, branch
000056E0                            
000056E0 1428 0012                  	move.b	oYVel(a0),d2				; Are we moving too fast downwards?
000056E4 5002                       	addq.b	#8,d2
000056E6 4402                       	neg.b	d2
000056E8 B202                       	cmp.b	d2,d1
000056EA 6C00                       	bge.s	.NotFallThrough				; If not, branch
000056EC B002                       	cmp.b	d2,d0
000056EE 6D00                       	blt.s	.End					; If so, branch
000056F0                            
000056F0                            .NotFallThrough:
000056F0 D368 000C                  	add.w	d1,oY(a0)				; Move outside of the floor
000056F4 1143 0026                  	move.b	d3,oAngle(a0)				; Set angle
000056F8 6100 0000                  	bsr.w	Player_ResetOnFloor			; Reset flags
000056FC 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
00005702                            
00005702 1003                       	move.b	d3,d0					; Did we land on a steep slope?
00005704 0600 0020                  	addi.b	#$20,d0
00005708 0200 0040                  	andi.b	#$40,d0
0000570C 6600                       	bne.s	.LandSteepSlope				; If so, branch
0000570E                            
0000570E 1003                       	move.b	d3,d0					; Did we land on a more flat surface?
00005710 0600 0010                  	addi.b	#$10,d0
00005714 0200 0020                  	andi.b	#$20,d0
00005718 6700                       	beq.s	.LandFloor				; If so, branch
0000571A                            
0000571A                            .LandSlope:
0000571A E0E8 0012                  	asr	oYVel(a0)				; Halve the landing speed
0000571E 6000                       	bra.s	.KeepYVel
00005720                            
00005720                            .LandFloor:
00005720 317C 0000 0012             	move.w	#0,oYVel(a0)				; Stop moving vertically
00005726 3168 0010 0014             	move.w	oXVel(a0),oPlayerGVel(a0)		; Set landing speed
0000572C 4E75                       	rts
0000572E                            
0000572E                            .LandSteepSlope:
0000572E 317C 0000 0010             	move.w	#0,oXVel(a0)				; Stop moving horizontally
00005734 0C68 0FC0 0012             	cmpi.w	#$FC0,oYVel(a0)				; Is our landing speed greater than 15.75?
0000573A 6F00                       	ble.s	.KeepYVel				; If not, branch
0000573C 317C 0FC0 0012             	move.w	#$FC0,oYVel(a0)				; Cap it at 15.75
00005742                            
00005742                            .KeepYVel:
00005742 3168 0012 0014             	move.w	oYVel(a0),oPlayerGVel(a0)		; Set landing speed
00005748 4A03                       	tst.b	d3					; Is our angle 0-$7F?
0000574A 6A00                       	bpl.s	.End					; If so, branch
0000574C 4468 0014                  	neg.w	oPlayerGVel(a0)				; If not, negate our landing speed
00005750                            
00005750                            .End:
00005750 4E75                       	rts
00005752                            
00005752                            ; -------------------------------------------------------------------------------
00005752                            ; Handle level collision while moving left in the air
00005752                            ; -------------------------------------------------------------------------------
00005752                            ; PARAMETERS:
00005752                            ;	a0.l	- Player object RAM
00005752                            ; -------------------------------------------------------------------------------
00005752                            
00005752                            Player_LvlColAir_Left:
00005752 6100 0000                  	bsr.w	Player_GetLWallDist			; Are we colliding with a wall on the left?
00005756 4A41                       	tst.w	d1
00005758 6A00                       	bpl.s	.NotLeftWall				; If not, branch
0000575A                            
0000575A 9368 0008                  	sub.w	d1,oX(a0)				; Move outside of the wall
0000575E 317C 0000 0010             	move.w	#0,oXVel(a0)				; Stop moving horizontally
00005764 3168 0012 0014             	move.w	oYVel(a0),oPlayerGVel(a0)		; Set landing speed
0000576A 4E75                       	rts
0000576C                            
0000576C                            .NotLeftWall:
0000576C 6100 0000                  	bsr.w	Player_CheckCeiling			; Are we colliding with a ceiling?
00005770 4A41                       	tst.w	d1
00005772 6A00                       	bpl.s	.NotCeiling				; If not, branch
00005774                            
00005774 9368 000C                  	sub.w	d1,oY(a0)				; Move outside of the ceiling
00005778 4A68 0012                  	tst.w	oYVel(a0)				; Were we moving upwards?
0000577C 6A00                       	bpl.s	.End					; If not, branch
0000577E 317C 0000 0012             	move.w	#0,oYVel(a0)				; If so, stop moving vertically
00005784                            
00005784                            .End:
00005784 4E75                       	rts
00005786                            
00005786                            .NotCeiling:
00005786 4A68 0012                  	tst.w	oYVel(a0)				; Are we moving upwards?
0000578A 6B00                       	bmi.s	.End2					; If so, branch
0000578C                            
0000578C 6100 0000                  	bsr.w	Player_CheckFloor			; Are we colliding with the floor?
00005790 4A41                       	tst.w	d1
00005792 6A00                       	bpl.s	.End2					; If not, branch
00005794                            
00005794 D368 000C                  	add.w	d1,oY(a0)				; Move outside of the floor
00005798 1143 0026                  	move.b	d3,oAngle(a0)				; Set angle
0000579C 6100 0000                  	bsr.w	Player_ResetOnFloor			; Reset flags
000057A0 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
000057A6 317C 0000 0012             	move.w	#0,oYVel(a0)				; Stop moving vertically
000057AC 3168 0010 0014             	move.w	oXVel(a0),oPlayerGVel(a0)		; Set landing speed
000057B2                            
000057B2                            .End2:
000057B2 4E75                       	rts
000057B4                            
000057B4                            ; -------------------------------------------------------------------------------
000057B4                            ; Handle level collision while moving upwards in the air
000057B4                            ; -------------------------------------------------------------------------------
000057B4                            ; PARAMETERS:
000057B4                            ;	a0.l	- Player object RAM
000057B4                            ; -------------------------------------------------------------------------------
000057B4                            
000057B4                            Player_LvlColAir_Up:
000057B4 6100 0000                  	bsr.w	Player_GetLWallDist			; Are we colliding with a wall on the left?
000057B8 4A41                       	tst.w	d1
000057BA 6A00                       	bpl.s	.NotLeftWall				; If not, branch
000057BC                            
000057BC 9368 0008                  	sub.w	d1,oX(a0)				; Move outside of the wall
000057C0 317C 0000 0010             	move.w	#0,oXVel(a0)				; Stop moving horizontally
000057C6                            
000057C6                            .NotLeftWall:
000057C6 6100 0000                  	bsr.w	Player_GetRWallDist			; Are we colliding with a wall on the right?
000057CA 4A41                       	tst.w	d1
000057CC 6A00                       	bpl.s	.NotRightWall				; If not, branch
000057CE                            
000057CE D368 0008                  	add.w	d1,oX(a0)				; Move outside of the wall
000057D2 317C 0000 0010             	move.w	#0,oXVel(a0)				; Stop moving horizontally
000057D8                            
000057D8                            .NotRightWall:
000057D8 6100 0000                  	bsr.w	Player_CheckCeiling			; Are we colliding with a ceiling?
000057DC 4A41                       	tst.w	d1
000057DE 6A00                       	bpl.s	.End					; If not, branch
000057E0                            
000057E0 9368 000C                  	sub.w	d1,oY(a0)				; Move outside of the ceiling
000057E4                            
000057E4 1003                       	move.b	d3,d0					; Did we land on a steep slope?
000057E6 0600 0020                  	addi.b	#$20,d0
000057EA 0200 0040                  	andi.b	#$40,d0
000057EE 6600                       	bne.s	.LandSteepSlope				; If so, branch
000057F0                            
000057F0                            .LandCeiling:
000057F0 317C 0000 0012             	move.w	#0,oYVel(a0)				; Stop moving vertically
000057F6 4E75                       	rts
000057F8                            
000057F8                            .LandSteepSlope:
000057F8 1143 0026                  	move.b	d3,oAngle(a0)				; Set angle
000057FC 6100 0000                  	bsr.w	Player_ResetOnSteepSlope		; Reset flags
00005800 3168 0012 0014             	move.w	oYVel(a0),oPlayerGVel(a0)		; Set landing speed
00005806                            
00005806 4A03                       	tst.b	d3					; Is our angle 0-$7F?
00005808 6A00                       	bpl.s	.End					; If so, branch
0000580A 4468 0014                  	neg.w	oPlayerGVel(a0)				; If not, negate our landing speed
0000580E                            
0000580E                            .End:
0000580E 4E75                       	rts
00005810                            
00005810                            ; -------------------------------------------------------------------------------
00005810                            ; Handle level collision while moving right in the air
00005810                            ; -------------------------------------------------------------------------------
00005810                            ; PARAMETERS:
00005810                            ;	a0.l	- Player object RAM
00005810                            ; -------------------------------------------------------------------------------
00005810                            
00005810                            Player_LvlColAir_Right:
00005810 6100 0000                  	bsr.w	Player_GetRWallDist			; Are we colliding with a wall on the right?
00005814 4A41                       	tst.w	d1
00005816 6A00                       	bpl.s	.NotRightWall				; If not, branch
00005818                            
00005818 D368 0008                  	add.w	d1,oX(a0)				; Move outside of the wall
0000581C 317C 0000 0010             	move.w	#0,oXVel(a0)				; Stop moving horizontally
00005822 3168 0012 0014             	move.w	oYVel(a0),oPlayerGVel(a0)		; Set landing speed
00005828 4E75                       	rts
0000582A                            
0000582A                            .NotRightWall:
0000582A 6100 0000                  	bsr.w	Player_CheckCeiling			; Are we colliding with a ceiling?
0000582E 4A41                       	tst.w	d1
00005830 6A00                       	bpl.s	.NotCeiling				; If not, branch
00005832                            
00005832 9368 000C                  	sub.w	d1,oY(a0)				; Move outside of the ceiling
00005836 4A68 0012                  	tst.w	oYVel(a0)				; Were we moving upwards?
0000583A 6A00                       	bpl.s	.End					; If not, branch
0000583C 317C 0000 0012             	move.w	#0,oYVel(a0)				; If so, stop moving vertically
00005842                            
00005842                            .End:
00005842 4E75                       	rts
00005844                            
00005844                            .NotCeiling:
00005844 4A68 0012                  	tst.w	oYVel(a0)				; Are we moving upwards?
00005848 6B00                       	bmi.s	.End2					; If so, branch
0000584A                            
0000584A 6100 0000                  	bsr.w	Player_CheckFloor			; Are we colliding with the floor?
0000584E 4A41                       	tst.w	d1
00005850 6A00                       	bpl.s	.End2					; If not, branch
00005852                            
00005852 D368 000C                  	add.w	d1,oY(a0)				; Move outside of the floor
00005856 1143 0026                  	move.b	d3,oAngle(a0)				; Set angle
0000585A 6100 0000                  	bsr.w	Player_ResetOnFloor			; Reset flags
0000585E 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
00005864 317C 0000 0012             	move.w	#0,oYVel(a0)				; Stop moving vertically
0000586A 3168 0010 0014             	move.w	oXVel(a0),oPlayerGVel(a0)		; Set landing speed
00005870                            
00005870                            .End2:
00005870 4E75                       	rts
00005872                            
00005872                            ; -------------------------------------------------------------------------------
00005872                            ; Reset flags for when the player lands on the floor
00005872                            ; -------------------------------------------------------------------------------
00005872                            ; PARAMETERS:
00005872                            ;	a0.l	- Player object RAM
00005872                            ; -------------------------------------------------------------------------------
00005872                            
00005872                            Player_ResetOnFloor:
00005872 0828 0004 0022             	btst	#4,oStatus(a0)				; Did we jump after rolling?
00005878 6700                       	beq.s	.NoRollJump				; If not, branch
0000587A 4E71                       	nop
0000587C                            
0000587C                            .NoRollJump:
0000587C 08A8 0005 0022             	bclr	#5,oStatus(a0)				; Stop puishing
00005882 08A8 0001 0022              	bclr	#1,oStatus(a0)				; Mark as on the ground
00005888 08A8 0004 0022             	bclr	#4,oStatus(a0)				; Clear roll jump flag
0000588E                            
0000588E 0828 0002 0022             	btst	#2,oStatus(a0)				; Did we land from a jump?
00005894 6700                       	beq.s	.NotJumping				; If not, branch
00005896 08A8 0002 0022             	bclr	#2,oStatus(a0)				; Mark as not jumping
0000589C                            
0000589C 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
000058A2 6700                       	beq.s	.NormalSize				; If not, branch
000058A4                            
000058A4 117C 000A 0016             	move.b	#$A,oYRadius(a0)			; Restore miniature hitbox size
000058AA 117C 0005 0017             	move.b	#5,oXRadius(a0)
000058B0 5568 000C                  	subq.w	#2,oY(a0)
000058B4 6000                       	bra.s	.LandSound				; Continue resetting more flags
000058B6                            
000058B6                            .NormalSize:
000058B6 117C 0013 0016             	move.b	#$13,oYRadius(a0)			; Restore hitbox size
000058BC 117C 0009 0017             	move.b	#9,oXRadius(a0)
000058C2 5B68 000C                  	subq.w	#5,oY(a0)
000058C6                            
000058C6                            .LandSound:
000058C6 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
000058CC 303C 00AB                  	move.w	#$AB,d0					; Play charge stop sound
000058D0 4EB8 2708                  	jsr	PlayFMSound
000058D4                            
000058D4                            .NotJumping:
000058D4 117C 0000 003C             	move.b	#0,oPlayerJump(a0)			; Clear jumping flag
000058DA 31FC 0000 F7D0             	move.w	#0,(v_chain_bonus_counter).w		; Clear chain bonus counter
000058E0 4E75                       	rts
000058E2                            
000058E2                            ; -------------------------------------------------------------------------------
000058E2                            ; Reset flags for when the player lands on a steep slope
000058E2                            ; -------------------------------------------------------------------------------
000058E2                            ; PARAMETERS:
000058E2                            ;	a0.l	- Player object RAM
000058E2                            ; -------------------------------------------------------------------------------
000058E2                            
000058E2                            Player_ResetOnSteepSlope:
000058E2 08A8 0005 0022             	bclr	#5,oStatus(a0)				; Stop puishing
000058E8 08A8 0001 0022              	bclr	#1,oStatus(a0)				; Mark as on the ground
000058EE 08A8 0004 0022             	bclr	#4,oStatus(a0)				; Clear roll jump flag
000058F4 117C 0000 003C             	move.b	#0,oPlayerJump(a0)			; Clear jumping flag
000058FA 31FC 0000 F7D0             	move.w	#0,(v_chain_bonus_counter).w		; Clear chain bonus counter
00005900 4E75                       	rts
00005902                            
00005902                            ; -------------------------------------------------------------------------------
00005902                            ; Sonic's hurt routine
00005902                            ; -------------------------------------------------------------------------------
00005902                            
00005902                            ObjSonic_Hurt:
00005902 4EB8 3FBE                  	jsr	ObjMove					; Apply velocity
00005906                            
00005906 0668 0030 0012             	addi.w	#$30,oYVel(a0)				; Make gravity stronger
0000590C 0828 0006 0022             	btst	#6,oStatus(a0)				; Is Sonic underwater?
00005912 6700                       	beq.s	.NoWater				; If not, branch
00005914 0468 0020 0012             	subi.w	#$20,oYVel(a0)				; Make the gravity less strong underwater
0000591A                            
0000591A                            .NoWater:
0000591A 4EB9 0000 0000             	jsr	ObjSonic_Null				; Some kind of nulled out function
00005920                            
00005920 6100 0000                  	bsr.w	ObjSonic_HurtChkLand			; Check for landing on the ground
00005924 6100 FA50                  	bsr.w	ObjSonic_LevelBound			; Handle level boundary collision
00005928 6100 EF14                  	bsr.w	ObjSonic_RecordPos			; Save current position into the position buffer
0000592C 6100 0000                  	bsr.w	ObjSonic_Animate			; Animate sprite
00005930                            
00005930 4EF8 4012                  	jmp	DrawObject				; Draw sprite
00005934                            
00005934                            ; -------------------------------------------------------------------------------
00005934                            ; Check for Sonic landing on the ground while hurting
00005934                            ; -------------------------------------------------------------------------------
00005934                            
00005934                            ObjSonic_HurtChkLand:
00005934 3038 F72E                  	move.w	(v_bottom_bound).w,d0			; Have we gone past the bottom level boundary?
00005938 0640 00E0                  	addi.w	#224,d0
0000593C B068 000C                  	cmp.w	oY(a0),d0
00005940 6500 0000                  	bcs.w	KillPlayer				; If so, branch
00005944                            
00005944 6100 FD2A                  	bsr.w	Player_LevelColInAir			; Handle level collision
00005948 0828 0001 0022             	btst	#1,oStatus(a0)				; Are we still in the air?
0000594E 6600                       	bne.s	.End					; If so, branch
00005950                            
00005950 7000                       	moveq	#0,d0					; Stop movement
00005952 3140 0012                  	move.w	d0,oYVel(a0)
00005956 3140 0010                  	move.w	d0,oXVel(a0)
0000595A 3140 0014                  	move.w	d0,oPlayerGVel(a0)
0000595E 117C 0000 001C             	move.b	#0,oAnim(a0)				; Set animation to walking animation
00005964 5528 0024                  	subq.b	#2,oRoutine(a0)				; Go back to the main routine
00005968 317C 0078 0030             	move.w	#120,oPlayerHurt(a0)			; Set hurt time
0000596E                            
0000596E                            .End:
0000596E 4E75                       	rts
00005970                            
00005970                            ; -------------------------------------------------------------------------------
00005970                            ; Sonic's death routine
00005970                            ; -------------------------------------------------------------------------------
00005970                            
00005970                            ObjSonic_Dead:
00005970 6100 0000                  	bsr.w	ObjSonic_DeadChkGone			; Check if we have gone offscreen
00005974                            
00005974 4EB8 3F5C                  	jsr	ObjMoveGrv				; Apply velocity
00005978 6100 EEC4                  	bsr.w	ObjSonic_RecordPos			; Save current position into the position buffer
0000597C 6100 0000                  	bsr.w	ObjSonic_Animate			; Animate sprite
00005980                            
00005980 4EF8 4012                  	jmp	DrawObject				; Draw sprite
00005984                            
00005984                            ; -------------------------------------------------------------------------------
00005984                            ; Check for Sonic going offscreen when he's dead
00005984                            ; -------------------------------------------------------------------------------
00005984                            
00005984                            ObjSonic_DeadChkGone:
00005984 3038 F72E                  	move.w	(v_bottom_bound).w,d0			; Have we gone past the bottom level boundary?
00005988 0640 0100                  	addi.w	#256,d0
0000598C B068 000C                  	cmp.w	oY(a0),d0
00005990 6400 0000                  	bcc.w	.End					; If not, branch
00005994                            
00005994 317C FFC8 0012             	move.w	#-$38,oYVel(a0)				; Make us go upwards a little
0000599A 5428 0024                  	addq.b	#2,oRoutine(a0)				; Set routine to gone
0000599E                            
0000599E 4239 00FF 1510             	clr.b	(v_update_time).l			; Stop the level timer
000059A4 5239 00FF 150E             	addq.b	#1,(v_update_lives).l			; Decrement life counter
000059AA 5339 00FF 1508             	subq.b	#1,(v_life_count).l
000059B0 6A00                       	bpl.s	.CapLives				; If we still have lives left, branch
000059B2 4239 00FF 1508             	clr.b	(v_life_count).l			; Cap lives at 0
000059B8                            
000059B8                            .CapLives:
000059B8 0C28 002B 001C             	cmpi.b	#$2B,oAnim(a0)				; Were we giving up from boredom?
000059BE 6700                       	beq.s	.LoadGameOver				; If so, branch
000059C0                            
000059C0 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l			; Are we in time attack mode?
000059C6 6700                       	beq.s	.LoadGameOver				; If not, branch
000059C8                            
000059C8 13FC 0000 00FF 1508        	move.b	#0,(v_life_count).l			; Set lives to 0
000059D0 6000                       	bra.s	.ResetDelay				; Continue setting the delay timer
000059D2                            
000059D2                            .LoadGameOver:
000059D2 4EB9 0000 0000             	jsr	FindObjSlot				; Load the game over text object
000059D8 12BC 003B                  	move.b	#$3B,oID(a1)
000059DC                            
000059DC 317C 01E0 003A             	move.w	#8*60,oPlayerReset(a0)			; Set game over delay timer to 8 seconds
000059E2 4A39 00FF 1508             	tst.b	(v_life_count).l			; Do we still have lives left?
000059E8 6700                       	beq.s	.End					; If not, branch
000059EA                            
000059EA                            .ResetDelay:
000059EA 317C 003C 003A             	move.w	#60,oPlayerReset(a0)			; Set delay timer to 1 second
000059F0                            
000059F0                            .End:
000059F0 4E75                       	rts
000059F2                            
000059F2                            ; -------------------------------------------------------------------------------
000059F2                            ; Handle Sonic's death delay timer and handle level reseting
000059F2                            ; -------------------------------------------------------------------------------
000059F2                            
000059F2                            ObjSonic_Restart:
000059F2 4A68 003A                  	tst.w	oPlayerReset(a0)			; Is the delay timer active?
000059F6 6700 0000                  	beq.w	.End					; If not, branch
000059FA 5368 003A                  	subq.w	#1,oPlayerReset(a0)			; Decrement the delay timer
000059FE 6600 0000                  	bne.w	.End					; If it hasn't run out, branch
00005A02                            
00005A02 33FC 0001 00FF 1502        	move.w	#1,(v_level_restart).l			; Set to restart the level
00005A0A                            
00005A0A 4EB8 26AC                  	jsr	StopZ80					; Allow conditional jumps to jump in FM sound effects
00005A0E 13FC 0001 00A0 1C3E        	move.b	#1,(Z80_RAM+$1C3E).l
00005A16 4EB8 26C0                  	jsr	StartZ80
00005A1A                            
00005A1A 6100 0000                  	bsr.w	ResetRespawnTable			; Reset the respawn table
00005A1E 42B9 00FF 1900             	clr.l	(v_flower_count).l			; Reset flower count
00005A24                            
00005A24 4A39 00FF 158E             	tst.b	(v_last_checkpoint).l			; Have we hit a checkpoint?
00005A2A 6600                       	bne.s	.Skip					; If so, branch
00005A2C 0C39 0001 00FF 152E        	cmpi.b	#1,(v_time_zone).l			; Are we in the present?
00005A34 6600                       	bne.s	.Skip					; If not, branch
00005A36 08B9 0001 00FF 151C        	bclr	#1,(v_load_plc_flags).l			; Set to reload the title card upon restarting
00005A3E                            
00005A3E                            .Skip:
00005A3E 303C 000E                  	move.w	#$E,d0					; Set to fade out music
00005A42                            
00005A42 4A39 00FF 1508             	tst.b	(v_life_count).l			; Are we out of lives?
00005A48 6700                       	beq.s	.SendCmd				; If so, branch
00005A4A 0C39 0001 00FF 152E        	cmpi.b	#1,(v_time_zone).l			; Are we in the present?
00005A52 6600                       	bne.s	.ClearFlag				; If not, branch
00005A54 4A39 00FF 158E             	tst.b	(v_last_checkpoint).l			; Have we hit a checkpoint?
00005A5A 6700                       	beq.s	.SendCmd				; If not, branch
00005A5C                            
00005A5C 13FC 0001 00FF 1522        	move.b	#1,(v_reset_lvl_flags).l		; Mark as restarted midway through the level
00005A64 6000                       	bra.s	.SendCmd				; Continue setting the fade out command
00005A66                            
00005A66                            .ClearFlag:
00005A66 4239 00FF 1522             	clr.b	(v_reset_lvl_flags).l			; Set to fully restart the level
00005A6C                            
00005A6C                            .SendCmd:
00005A6C 6000 0000                  	bra.w	SendSubCommand				; Set the fade out command
00005A70                            
00005A70                            .End:
00005A70 4E75                       	rts
00005A72                            
00005A72                            ; -------------------------------------------------------------------------------
00005A72                            ; Handle special chunks for Sonic
00005A72                            ; -------------------------------------------------------------------------------
00005A72                            
00005A72                            ObjSonic_SpecialChunks:
00005A72 0C39 0003 00FF 1506        	cmpi.b	#3,(v_zone).l				; Are we in Quartz Quadrant?
00005A7A 6700                       	beq.s	.HasSpecChunks				; If so, branch
00005A7C 0C39 0005 00FF 1506        	cmpi.b	#5,(v_zone).l				; Are we in Stardust Speedway?
00005A84 6700                       	beq.s	.HasSpecChunks				; If so, branch
00005A86 0C39 0002 00FF 1506        	cmpi.b	#2,(v_zone).l				; Are we in Tidal Tempest?
00005A8E 6700                       	beq.s	.HasSpecChunks				; If so, branch
00005A90 4A39 00FF 1506             	tst.b	(v_zone).l				; Are we in Palmtree Panic?
00005A96 6600 0000                  	bne.w	.End					; If not, branch
00005A9A                            
00005A9A                            .HasSpecChunks:
00005A9A 3028 000C                  	move.w	oY(a0),d0				; Get current chunk that we are in
00005A9E E248                       	lsr.w	#1,d0
00005AA0 0240 0380                  	andi.w	#$380,d0
00005AA4 1228 0008                  	move.b	oX(a0),d1
00005AA8 0241 007F                  	andi.w	#$7F,d1
00005AAC D041                       	add.w	d1,d0
00005AAE 43F8 A000                  	lea	(v_lvl_layout).w,a1
00005AB2 1231 0000                  	move.b	(a1,d0.w),d1
00005AB6                            
00005AB6                            ; -------------------------------------------------------------------------------
00005AB6                            .NormalCode:
00005AB6 B238 F7AE                  	cmp.b	(v_loop_chunks+2).w,d1			; Are we in a special roll tunnel?
00005ABA 6600                       	bne.s	.NotRoll				; If not, branch
00005ABC 4A39 00FF 1506             	tst.b	(v_zone).l				; Are we in Palmtree Panic?
00005AC2 6600 0000                  	bne.w	.RollTunnel				; If not, branch
00005AC6                            
00005AC6 3028 000C                  	move.w	oY(a0),d0				; Is our Y position greater than or equal to $90?
00005ACA 0240 00FF                  	andi.w	#$FF,d0
00005ACE 0C40 0090                  	cmpi.w	#$90,d0
00005AD2 6400 0000                  	bcc.w	.RollTunnel				; If so, branch
00005AD6                            
00005AD6 6000                       	bra.s	.CheckIfLoop				; Continue checking other chunks
00005AD8                            
00005AD8                            .NotRoll:
00005AD8 B238 F7AF                  	cmp.b	(v_loop_chunks+3).w,d1			; Are we in a regular roll tunnel?
00005ADC 6700 0000                  	beq.w	.RollTunnel				; If so, branch
00005AE0                            
00005AE0                            ; -------------------------------------------------------------------------------
00005AE0                            
00005AE0                            .CheckIfLoop:
00005AE0 B238 F7AC                  	cmp.b	(v_loop_chunks).w,d1			; Are we on a loop?
00005AE4 6700                       	beq.s	.CheckIfLeft				; If so, branch
00005AE6 B238 F7AD                  	cmp.b	(v_loop_chunks+1).w,d1			; Are we on a special loop?
00005AEA 6700                       	beq.s	.CheckIfInAir				; If so, branch
00005AEC                            
00005AEC 08A8 0006 0001             	bclr	#6,oRender(a0)				; Set to lower path layer
00005AF2 4E75                       	rts
00005AF4                            
00005AF4                            .CheckIfInAir:
00005AF4 0C39 0005 00FF 1506        	cmpi.b	#5,(v_zone).l				; Are we in Stardust Speedway?
00005AFC 6700 0000                  	beq.w	.SSZ					; If so, branch
00005B00                            
00005B00 0828 0001 0022             	btst	#1,oStatus(a0)				; Are we in the air?
00005B06 6700                       	beq.s	.CheckIfLeft				; If not, branch
00005B08 08A8 0006 0001             	bclr	#6,oRender(a0)				; Set to lower path layer
00005B0E 4E75                       	rts
00005B10                            
00005B10                            .CheckIfLeft:
00005B10 3428 0008                  	move.w	oX(a0),d2				; Are we left of the loop check section?
00005B14 0C02 002C                  	cmpi.b	#$2C,d2
00005B18 6400                       	bcc.s	.CheckIfRight				; If not, branch
00005B1A 08A8 0006 0001             	bclr	#6,oRender(a0)				; Set to lower path layer
00005B20 4E75                       	rts
00005B22                            
00005B22                            .CheckIfRight:
00005B22 0C02 00E0                  	cmpi.b	#$E0,d2					; Are we right of the loop check section?
00005B26 6500                       	bcs.s	.CheckAngle				; If not, branch
00005B28 08E8 0006 0001             	bset	#6,oRender(a0)				; Set to higher path layer
00005B2E 4E75                       	rts
00005B30                            
00005B30                            .CheckAngle:
00005B30 0828 0006 0001             	btst	#6,oRender(a0)				; Are we on the higher path layer?
00005B36 6600                       	bne.s	.HighPath				; If so, branch
00005B38                            
00005B38 1228 0026                  	move.b	oAngle(a0),d1				; Get angle
00005B3C 6700                       	beq.s	.End					; If we are flat on the floor, branch
00005B3E                            
00005B3E 0C01 0080                  	cmpi.b	#$80,d1					; Are right of the path swap position?
00005B42 6200                       	bhi.s	.End					; If so, branch
00005B44 08E8 0006 0001             	bset	#6,oRender(a0)				; Set to higher path layer
00005B4A 4E75                       	rts
00005B4C                            
00005B4C                            .HighPath:
00005B4C 1228 0026                  	move.b	oAngle(a0),d1				; Are left of the path swap position?
00005B50 0C01 0080                  	cmpi.b	#$80,d1
00005B54 6300                       	bls.s	.End					; If so, branch
00005B56 08A8 0006 0001             	bclr	#6,oRender(a0)				; Set to lower path layer
00005B5C                            
00005B5C                            .End:
00005B5C 4E75                       	rts
00005B5E                            
00005B5E                            ; -------------------------------------------------------------------------------
00005B5E                            
00005B5E                            .RollTunnel:
00005B5E 4EF8 540A                  	jmp	ObjSonic_StartRoll			; Start rolling
00005B62                            
00005B62                            ; -------------------------------------------------------------------------------
00005B62                            
00005B62                            .SSZ:
00005B62 4A68 0012                  	tst.w	oYVel(a0)				; Are we moving upwards?
00005B66 6B00                       	bmi.s	.End2					; If so, branch
00005B68                            
00005B68 3228 000C                  	move.w	oY(a0),d1				; Get position within chunk
00005B6C 0241 00FF                  	andi.w	#$FF,d1
00005B70 3028 0008                  	move.w	oX(a0),d0
00005B74 0240 00FF                  	andi.w	#$FF,d0
00005B78                            
00005B78 0C40 0080                  	cmpi.w	#$80,d0					; Are we on the right side of the chunk?
00005B7C 6400                       	bcc.s	.CheckIfAbove				; If so, branch
00005B7E 0C41 0038                  	cmpi.w	#$38,d1					; Are we at the top of the chunk?
00005B82 6500                       	bcs.s	.SetLowPlane				; If so, branch
00005B84 0C41 0080                  	cmpi.w	#$80,d1					; Are we on the top side of the chunk?
00005B88 6500                       	bcs.s	.End2					; If so, branch
00005B8A                            
00005B8A                            .SetHighPlane:
00005B8A 08A8 0006 0001             	bclr	#6,oRender(a0)				; Set to lower path layer
00005B90 4E75                       	rts
00005B92                            
00005B92                            .SetLowPlane:
00005B92 08E8 0006 0001             	bset	#6,oRender(a0)				; Set to higher path layer
00005B98 4E75                       	rts
00005B9A                            
00005B9A                            .CheckIfAbove:
00005B9A 0C41 0038                  	cmpi.w	#$38,d1					; Are we at the top of the chunk?
00005B9E 65EA                       	bcs.s	.SetHighPlane				; If so, branch
00005BA0 0C41 0080                  	cmpi.w	#$80,d1					; Are we on the bottom side of the chunk?
00005BA4 64EC                       	bcc.s	.SetLowPlane				; If so, branch
00005BA6                            
00005BA6                            .End2:
00005BA6 4E75                       	rts
00005BA8                            
00005BA8                            ; -------------------------------------------------------------------------------
00005BA8                            ; Animate Sonic's sprite
00005BA8                            ; -------------------------------------------------------------------------------
00005BA8                            
00005BA8                            ObjSonic_Animate:
00005BA8 43F9 0000 0000             	lea	(Ani_Sonic).l,a1			; Get animation script
00005BAE                            
00005BAE 7000                       	moveq	#0,d0					; Get current animation
00005BB0 1028 001C                  	move.b	oAnim(a0),d0
00005BB4 B028 001D                  	cmp.b	oPrevAnim(a0),d0			; Are we changing animations?
00005BB8 6700                       	beq.s	.Do					; If not, branch
00005BBA                            
00005BBA 1140 001D                  	move.b	d0,oPrevAnim(a0)			; Reset animation flags
00005BBE 117C 0000 001B             	move.b	#0,oAnimFrame(a0)
00005BC4 117C 0000 001E             	move.b	#0,oAnimTime(a0)
00005BCA                            
00005BCA                            .Do:
00005BCA 6100 0000                  	bsr.w	ObjSonic_GetMiniAnim			; If we are miniature, get the mini version of the current animation
00005BCE                            
00005BCE D040                       	add.w	d0,d0					; Get pointer to animation data
00005BD0 D2F1 0000                  	adda.w	(a1,d0.w),a1
00005BD4 1011                       	move.b	(a1),d0					; Get animation speed/special flag
00005BD6 6B00                       	bmi.s	.SpecialAnim				; If it's a special flag, branch
00005BD8                            
00005BD8 1228 0022                  	move.b	oStatus(a0),d1				; Apply status flip flags to render flip flags
00005BDC 0201 0001                  	andi.b	#1,d1
00005BE0 0228 00FC 0001             	andi.b	#$FC,oRender(a0)
00005BE6 8328 0001                  	or.b	d1,oRender(a0)
00005BEA                            
00005BEA 5328 001E                  	subq.b	#1,oAnimTime(a0)			; Decrement frame duration time
00005BEE 6A00                       	bpl.s	.AniDelay				; If it hasn't run out, branch
00005BF0 1140 001E                  	move.b	d0,oAnimTime(a0)			; Reset frame duration time
00005BF4                            
00005BF4                            ; -------------------------------------------------------------------------------
00005BF4                            
00005BF4                            .RunAnimScript:
00005BF4 7200                       	moveq	#0,d1					; Get animation frame
00005BF6 1228 001B                  	move.b	oAnimFrame(a0),d1
00005BFA 1031 1001                  	move.b	1(a1,d1.w),d0
00005BFE 6700                       	beq.s	.AniNext				; If it's a frame ID, branch
00005C00 6A00                       	bpl.s	.AniNext
00005C02 0C00 00FD                  	cmpi.b	#$FD,d0					; Is it a flag?
00005C06 6C00                       	bge.s	.AniFF					; If so, branch
00005C08                            
00005C08                            .AniNext:
00005C08 1140 001A                  	move.b	d0,oMapFrame(a0)			; Update animation frame
00005C0C 5228 001B                  	addq.b	#1,oAnimFrame(a0)
00005C10                            
00005C10                            .AniDelay:
00005C10 4E75                       	rts
00005C12                            
00005C12                            .AniFF:
00005C12 5200                       	addq.b	#1,d0					; Is the flag $FF (loop)?
00005C14 6600                       	bne.s	.AniFE					; If not, branch
00005C16                            
00005C16 117C 0000 001B             	move.b	#0,oAnimFrame(a0)			; Set animation script frame back to 0
00005C1C 1029 0001                  	move.b	1(a1),d0				; Get animation frame at that point
00005C20 60E6                       	bra.s	.AniNext
00005C22                            
00005C22                            .AniFE:
00005C22 5200                       	addq.b	#1,d0					; Is the flag $FE (loop back to frame)?
00005C24 6600                       	bne.s	.AniFD
00005C26                            
00005C26 1031 1002                  	move.b	2(a1,d1.w),d0				; Get animation script frame to go back to
00005C2A 9128 001B                  	sub.b	d0,oAnimFrame(a0)
00005C2E 9200                       	sub.b	d0,d1					; Get animation frame at that point
00005C30 1031 1001                  	move.b	1(a1,d1.w),d0
00005C34 60D2                       	bra.s	.AniNext
00005C36                            
00005C36                            .AniFD:
00005C36 5200                       	addq.b	#1,d0					; Is the flag $FD (new animation)?
00005C38 6600                       	bne.s	.End
00005C3A 1171 1002 001C             	move.b	2(a1,d1.w),oAnim(a0)			; Set new animation ID
00005C40                            
00005C40                            .End:
00005C40 4E75                       	rts
00005C42                            
00005C42                            ; -------------------------------------------------------------------------------
00005C42                            
00005C42                            .SpecialAnim:
00005C42 5328 001E                  	subq.b	#1,oAnimTime(a0)			; Decrement frame duration time
00005C46 6AC8                       	bpl.s	.AniDelay				; If it hasn't run out, branch
00005C48                            
00005C48 5200                       	addq.b	#1,d0					; Is this special animation $FF (walking/running)?
00005C4A 6600 0000                  	bne.w	.RollAnim				; If not, branch
00005C4E                            
00005C4E 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we minature?
00005C54 6600 0000                  	bne.w	.MiniSonicRun				; If so, branch
00005C58                            
00005C58 7200                       	moveq	#0,d1					; Initialize flip flags
00005C5A 1028 0026                  	move.b	oAngle(a0),d0				; Get angle
00005C5E 1428 0022                  	move.b	oStatus(a0),d2				; Are we flipped horizontally?
00005C62 0202 0001                  	andi.b	#1,d2
00005C66 6600                       	bne.s	.Flipped				; If so, branch
00005C68 4600                       	not.b	d0					; If not, flip the angle
00005C6A                            
00005C6A                            .Flipped:
00005C6A 0828 0001 002C             	btst	#1,oPlayerCtrl(a0)			; Are we on a 3D ramp?
00005C70 6600                       	bne.s	.3DRamp					; If so, branch
00005C72 0600 0010                  	addi.b	#$10,d0					; Center the angle
00005C76 6000                       	bra.s	.CheckInvert				; Continue setting up the animation
00005C78                            
00005C78                            .3DRamp:
00005C78 5000                       	addq.b	#8,d0					; Center the angle for the 3D ramp
00005C7A                            
00005C7A                            .CheckInvert:
00005C7A 6A00                       	bpl.s	.NoInvert				; If we aren't on an angle where we should flip the sprite, branch
00005C7C 7203                       	moveq	#3,d1					; If we are, set the flip flags accordingly
00005C7E                            
00005C7E                            .NoInvert:
00005C7E 0228 00FC 0001             	andi.b	#$FC,oRender(a0)			; Apply angle flip flags to render flip flags
00005C84 B302                       	eor.b	d1,d2
00005C86 8528 0001                  	or.b	d2,oRender(a0)
00005C8A                            
00005C8A 0828 0005 0022             	btst	#5,oStatus(a0)				; Are we pushing on something?
00005C90 6600 0000                  	bne.w	.PushAnim				; If so, branch
00005C94                            
00005C94 3428 0014                  	move.w	oPlayerGVel(a0),d2			; Get ground speed
00005C98 6A00                       	bpl.s	.CheckSpeed
00005C9A 4442                       	neg.w	d2
00005C9C                            
00005C9C                            .CheckSpeed:
00005C9C 0828 0001 002C             	btst	#1,oPlayerCtrl(a0)			; Are we on a 3D ramp?
00005CA2 6700                       	beq.s	.No3DRamp				; If not, branch
00005CA4                            
00005CA4 E808                       	lsr.b	#4,d0					; Get offset of the angled sprites we need for 3D running
00005CA6 E308                       	lsl.b	#1,d0					; ((((angle + 8) / 8) & 0xE) * 2)
00005CA8 0200 000E                  	andi.b	#$E,d0					; (angle is NOT'd if we are facing right)
00005CAC                            
00005CAC 43F9 0000 0000             	lea	(SonAni_Run3D).l,a1			; Get 3D running sprites
00005CB2 6000                       	bra.s	.GotRunAnim				; Continue setting up animation
00005CB4                            
00005CB4                            .No3DRamp:
00005CB4 E808                       	lsr.b	#4,d0					; Get offset of the angled sprites we need for running and peelout
00005CB6 0200 0006                  	andi.b	#6,d0					; ((((angle + 16) / 16) & 6) * 2)
00005CBA                            							; (angle is NOT'd if we are facing right)
00005CBA                            
00005CBA 43F9 0000 0000             	lea	(SonAni_Peelout).l,a1			; Get peelout sprites
00005CC0 0C42 0A00                  	cmpi.w	#$A00,d2				; Are we running at peelout speed?
00005CC4 6400                       	bcc.s	.GotRunAnim				; If so, branch
00005CC6 43F9 0000 0000             	lea	(SonAni_Run).l,a1			; Get running sprites
00005CCC 0C42 0600                  	cmpi.w	#$600,d2				; Are we running at running speed?
00005CD0 6400                       	bcc.s	.GotRunAnim				; If so, branch
00005CD2 43F9 0000 0000             	lea	(SonAni_Walk).l,a1			; Get walking sprites
00005CD8                            
00005CD8 1200                       	move.b	d0,d1					; Get offset of the angled sprites we need for walking
00005CDA E209                       	lsr.b	#1,d1					; ((((angle + 16) / 16) & 6) * 3)
00005CDC D001                       	add.b	d1,d0					; (angle is NOT'd if we are facing right)
00005CDE                            
00005CDE                            .GotRunAnim:
00005CDE D000                       	add.b	d0,d0
00005CE0                            
00005CE0 1600                       	move.b	d0,d3					; Get animation duration
00005CE2 4442                       	neg.w	d2					; max(-ground speed + 8, 0)
00005CE4 0642 0800                  	addi.w	#$800,d2
00005CE8 6A00                       	bpl.s	.BelowMax
00005CEA 7400                       	moveq	#0,d2
00005CEC                            
00005CEC                            .BelowMax:
00005CEC E04A                       	lsr.w	#8,d2
00005CEE 1142 001E                  	move.b	d2,oAnimTime(a0)
00005CF2                            
00005CF2 6100 FF00                  	bsr.w	.RunAnimScript				; Run animation script
00005CF6 D728 001A                  	add.b	d3,oMapFrame(a0)			; Add angle offset
00005CFA 4E75                       	rts
00005CFC                            
00005CFC                            ; -------------------------------------------------------------------------------
00005CFC                            
00005CFC                            .RollAnim:
00005CFC 5200                       	addq.b	#1,d0					; Is this special animation $FE (rolling)?
00005CFE 6600                       	bne.s	.CheckPush				; If not, branch
00005D00                            
00005D00 3428 0014                  	move.w	oPlayerGVel(a0),d2			; Get ground speed
00005D04 6A00                       	bpl.s	.CheckSpeed2
00005D06 4442                       	neg.w	d2
00005D08                            
00005D08                            .CheckSpeed2:
00005D08 43F9 0000 0000             	lea	(SonAni_RollMini).l,a1			; Get mini rolling sprites
00005D0E 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
00005D14 6600                       	bne.s	.GotRollAnim				; If so, branch
00005D16                            
00005D16 43F9 0000 0000             	lea	(SonAni_RollFast).l,a1			; Get fast rolling sprites
00005D1C 0828 0001 002C             	btst	#1,oPlayerCtrl(a0)			; Are we on a 3D ramp?
00005D22 6700                       	beq.s	.No3DRoll				; If not, branch
00005D24 1028 0026                  	move.b	oAngle(a0),d0				; Are we going upwards on the ramp?
00005D28 0600 0010                  	addi.b	#$10,d0
00005D2C 0200 00C0                  	andi.b	#$C0,d0
00005D30 6700                       	beq.s	.GotRollAnim				; If not, branch
00005D32 43F9 0000 0000             	lea	(SonAni_Roll3D).l,a1			; Get 3D rolling sprites
00005D38 6000                       	bra.s	.GotRollAnim				; Continue setting up animation
00005D3A                            
00005D3A                            .No3DRoll:
00005D3A 0C42 0600                  	cmpi.w	#$600,d2				; Are we rolling fast?
00005D3E 6400                       	bcc.s	.GotRollAnim				; If so, branch
00005D40 43F9 0000 0000             	lea	(SonAni_Roll).l,a1			; If not, use the regular rolling sprites
00005D46                            
00005D46                            .GotRollAnim:
00005D46 4442                       	neg.w	d2					; Get animation duration
00005D48 0642 0400                  	addi.w	#$400,d2				; max(-ground speed + 4, 0)
00005D4C 6A00                       	bpl.s	.BelowMax2
00005D4E 7400                       	moveq	#0,d2
00005D50                            
00005D50                            .BelowMax2:
00005D50 E04A                       	lsr.w	#8,d2
00005D52 1142 001E                  	move.b	d2,oAnimTime(a0)
00005D56                            
00005D56 1228 0022                  	move.b	oStatus(a0),d1				; Apply status flip flags to render flip flags
00005D5A 0201 0001                  	andi.b	#1,d1
00005D5E 0228 00FC 0001             	andi.b	#$FC,oRender(a0)
00005D64 8328 0001                  	or.b	d1,oRender(a0)
00005D68                            
00005D68 6000 FE8A                  	bra.w	.RunAnimScript				; Run animation script
00005D6C                            
00005D6C                            ; -------------------------------------------------------------------------------
00005D6C                            
00005D6C                            .CheckPush:
00005D6C 5200                       	addq.b	#1,d0					; Is this special animation $FD (pushing)?
00005D6E 6600                       	bne.s	.FrozenAnim				; If not, branch
00005D70                            
00005D70                            .PushAnim:
00005D70 3428 0014                  	move.w	oPlayerGVel(a0),d2			; Get ground speed (negated)
00005D74 6B00                       	bmi.s	.CheckSpeed3
00005D76 4442                       	neg.w	d2
00005D78                            
00005D78                            .CheckSpeed3:
00005D78 0642 0800                  	addi.w	#$800,d2				; Get animation duration
00005D7C 6A00                       	bpl.s	.BelowMax3				; max(-ground speed + 8, 0) * 4
00005D7E 7400                       	moveq	#0,d2
00005D80                            
00005D80                            .BelowMax3:
00005D80 EC4A                       	lsr.w	#6,d2
00005D82 1142 001E                  	move.b	d2,oAnimTime(a0)
00005D86                            
00005D86 43F9 0000 0000             	lea	(SonAni_PushMini).l,a1			; Get mini pushing sprites
00005D8C 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
00005D92 6600                       	bne.s	.GotPushAnim				; If so, branch
00005D94 43F9 0000 0000             	lea	(SonAni_Push).l,a1			; Get normal pushing sprites
00005D9A                            
00005D9A                            .GotPushAnim:
00005D9A 1228 0022                  	move.b	oStatus(a0),d1				; Apply status flip flags to render flip flags
00005D9E 0201 0001                  	andi.b	#1,d1
00005DA2 0228 00FC 0001             	andi.b	#$FC,oRender(a0)
00005DA8 8328 0001                  	or.b	d1,oRender(a0)
00005DAC                            
00005DAC 6000 FE46                  	bra.w	.RunAnimScript				; Run animation script
00005DB0                            
00005DB0                            ; -------------------------------------------------------------------------------
00005DB0                            
00005DB0                            .FrozenAnim:
00005DB0 7200                       	moveq	#0,d1					; This is special animation $FC (frozen animation)
00005DB2 1228 001B                  	move.b	oAnimFrame(a0),d1			; Get animation frame
00005DB6 1171 1001 001A             	move.b	1(a1,d1.w),oMapFrame(a0)
00005DBC 117C 0000 001E             	move.b	#0,oAnimTime(a0)			; Keep duration at 0 and don't advance the animation frame
00005DC2 4E75                       	rts
00005DC4                            
00005DC4                            ; -------------------------------------------------------------------------------
00005DC4                            
00005DC4                            .MiniSonicRun:
00005DC4 7200                       	moveq	#0,d1					; Initialize flip flags
00005DC6 1028 0026                  	move.b	oAngle(a0),d0				; Get angle
00005DCA 1428 0022                  	move.b	oStatus(a0),d2				; Are we flipped horizontally?
00005DCE 0202 0001                  	andi.b	#1,d2
00005DD2 6600                       	bne.s	.Flipped2				; If so, branch
00005DD4 4600                       	not.b	d0					; If not, flip the angle
00005DD6                            
00005DD6                            .Flipped2:
00005DD6 0600 0010                  	addi.b	#$10,d0					; Center the angle
00005DDA 6A00                       	bpl.s	.NoFlip2				; If we aren't on an angle where we should flip the sprite, branch
00005DDC 7200                       	moveq	#0,d1					; If we are, then don't set the flags anyways
00005DDE                            
00005DDE                            .NoFlip2:
00005DDE 0228 00FC 0001             	andi.b	#$FC,oRender(a0)			; Apply status horizontal flip flag to render flip flags
00005DE4 8528 0001                  	or.b	d2,oRender(a0)
00005DE8                            
00005DE8 0600 0030                  	addi.b	#$30,d0					; Are we running on the floor?
00005DEC 0C00 0060                  	cmpi.b	#$60,d0
00005DF0 6500                       	bcs.s	.MiniOnFloor				; If so, branch
00005DF2                            
00005DF2 08E8 0002 0022             	bset	#2,oStatus(a0)				; Mark as rolling
00005DF8 117C 000A 0016             	move.b	#$A,oYRadius(a0)			; Set miniature rolling hitbox size
00005DFE 117C 0005 0017             	move.b	#5,oXRadius(a0)
00005E04 103C 00FF                  	move.b	#$FF,d0					; Go run the rolling animation instead
00005E08 6000 FEF2                  	bra.w	.RollAnim
00005E0C                            
00005E0C                            .MiniOnFloor:
00005E0C 3428 0014                  	move.w	oPlayerGVel(a0),d2			; Get ground speed
00005E10 6A00                       	bpl.s	.CheckSpeed4
00005E12 4442                       	neg.w	d2
00005E14                            
00005E14                            .CheckSpeed4:
00005E14 43F9 0000 0000             	lea	(SonAni_RunMini).l,a1			; Get mini running sprites
00005E1A 0C42 0600                  	cmpi.w	#$600,d2				; Are we running at running speed?
00005E1E 6400                       	bcc.s	.GotRunAnim2				; If so, branch
00005E20 43F9 0000 0000             	lea	(SonAni_WalkMini).l,a1			; Get mini walking sprites
00005E26                            
00005E26                            .GotRunAnim2:
00005E26 4442                       	neg.w	d2					; Get animation duration
00005E28 0642 0800                  	addi.w	#$800,d2				; max(-ground speed + 8, 0)
00005E2C 6A00                       	bpl.s	.BelowMax4
00005E2E 7400                       	moveq	#0,d2
00005E30                            
00005E30                            .BelowMax4:
00005E30 E04A                       	lsr.w	#8,d2
00005E32 1142 001E                  	move.b	d2,oAnimTime(a0)
00005E36                            
00005E36 6000 FDBC                  	bra.w	.RunAnimScript				; Run animation script
00005E3A                            
00005E3A                            ; -------------------------------------------------------------------------------
00005E3A                            ; Get the mini version of Sonic's animation if Sonic is miniature
00005E3A                            ; -------------------------------------------------------------------------------
00005E3A                            
00005E3A                            ObjSonic_GetMiniAnim:
00005E3A 4A39 00FF 195B             	tst.b	(v_mini_sonic).l			; Are we miniature?
00005E40 6700                       	beq.s	.End					; If not, branch
00005E42 103B 0000                  	move.b	.MiniAnims(pc,d0.w),d0			; Get mini animation ID
00005E46                            
00005E46                            .End:
00005E46 4E75                       	rts
00005E48                            
00005E48                            ; -------------------------------------------------------------------------------
00005E48                            
00005E48                            .MiniAnims:
00005E48 21                         	dc.b	$21					; $00
00005E49 18                         	dc.b	$18					; $01
00005E4A 23                         	dc.b	$23					; $02
00005E4B 23                         	dc.b	$23					; $03
00005E4C 27                         	dc.b	$27					; $04
00005E4D 1F                         	dc.b	$1F					; $05
00005E4E 26                         	dc.b	$26					; $06
00005E4F 28                         	dc.b	$28					; $07
00005E50 20                         	dc.b	$20					; $08
00005E51 09                         	dc.b	$09					; $09
00005E52 0A                         	dc.b	$0A					; $0A
00005E53 0B                         	dc.b	$0B					; $0B
00005E54 0C                         	dc.b	$0C					; $0C
00005E55 24                         	dc.b	$24					; $0D
00005E56 0E                         	dc.b	$0E					; $0E
00005E57 0F                         	dc.b	$0F					; $0F
00005E58 28                         	dc.b	$28					; $10
00005E59 11                         	dc.b	$11					; $11
00005E5A 12                         	dc.b	$12					; $12
00005E5B 13                         	dc.b	$13					; $13
00005E5C 14                         	dc.b	$14					; $14
00005E5D 15                         	dc.b	$15					; $15
00005E5E 16                         	dc.b	$16					; $16
00005E5F 17                         	dc.b	$17					; $17
00005E60 18                         	dc.b	$18					; $18
00005E61 19                         	dc.b	$19					; $19
00005E62 25                         	dc.b	$25					; $1A
00005E63 25                         	dc.b	$25					; $1B
00005E64 1C                         	dc.b	$1C					; $1C
00005E65 1D                         	dc.b	$1D					; $1D
00005E66 1E                         	dc.b	$1E					; $1E
00005E67 1F                         	dc.b	$1F					; $1F
00005E68 20                         	dc.b	$20					; $20
00005E69 21                         	dc.b	$21					; $21
00005E6A 22                         	dc.b	$22					; $22
00005E6B 23                         	dc.b	$23					; $23
00005E6C 24                         	dc.b	$24					; $24
00005E6D 25                         	dc.b	$25					; $25
00005E6E 26                         	dc.b	$26					; $26
00005E6F 27                         	dc.b	$27					; $27
00005E70 28                         	dc.b	$28					; $28
00005E71 29                         	dc.b	$29					; $29
00005E72 2A                         	dc.b	$2A					; $2A
00005E73 30                         	dc.b	$30					; $2B
00005E74 2C                         	dc.b	$2C					; $2C
00005E75 2D                         	dc.b	$2D					; $2D
00005E76 2E                         	dc.b	$2E					; $2E
00005E77 2F                         	dc.b	$2F					; $2F
00005E78 00                         	dc.b	$00					; $30
00005E79 00                         	dc.b	$00					; $31
00005E7A 00                         	dc.b	$00					; $32
00005E7B 00                         	dc.b	$00					; $33
00005E7C 00                         	dc.b	$00					; $34
00005E7D 00                         	dc.b	$00					; $35
00005E7E 00                         	dc.b	$00					; $36
00005E7F 00                         	dc.b	$00					; $37
00005E80 39                         	dc.b	$39					; $38
00005E81 00                         	dc.b	$00					; $39
00005E82 00                         	dc.b	$00					; $3A
00005E83 00                         	dc.b	$00					; $3B
00005E84 00                         	dc.b	$00					; $3C
00005E85 00                         	dc.b	$00					; $3D
00005E86 00                         	dc.b	$00					; $3E
00005E87 00                         	dc.b	$00					; $3F
00005E88 00                         	dc.b	$00					; $40
00005E89 00                         	dc.b	$00					; $41
00005E8A 00                         	dc.b	$00					; $42
00005E8B 00                         	dc.b	$00					; $43
00005E8C 00                         	dc.b	$00					; $44
00005E8D 00                         	dc.b	$00					; $45
00005E8E 00                         	dc.b	$00					; $46
00005E8F 00                         	dc.b	$00					; $47
00005E90 00                         	dc.b	$00					; $48
00005E91 00                         	dc.b	$00					; $49
00005E92 00                         	dc.b	$00					; $4A
00005E93 00                         	dc.b	$00					; $4B
00005E94 00                         	dc.b	$00					; $4C
00005E95 00                         	dc.b	$00					; $4D
00005E96 00                         	dc.b	$00					; $4E
00005E97 00                         	dc.b	$00					; $4F
00005E98                            
00005E98                            ; -------------------------------------------------------------------------------
00005E98                            ; Sonic's animation script
00005E98                            ; -------------------------------------------------------------------------------
00005E98                            
00005E98                            Ani_Sonic:
00005E98                            	include	"level/objects/sonic/anim.asm"
00005E98                            .Anim:
00005E98 0000                       	dc.w	SonAni_Walk-.Anim
00005E9A 0000                       	dc.w	SonAni_Run-.Anim
00005E9C 0000                       	dc.w	SonAni_Roll-.Anim
00005E9E 0000                       	dc.w	SonAni_RollFast-.Anim
00005EA0 0000                       	dc.w	SonAni_Push-.Anim
00005EA2 0000                       	dc.w	SonAni_Idle-.Anim
00005EA4 0000                       	dc.w	SonAni_Balance-.Anim
00005EA6 0000                       	dc.w	SonAni_LookUp-.Anim
00005EA8 0000                       	dc.w	SonAni_Duck-.Anim
00005EAA 0000                       	dc.w	SonAni_Walk0-.Anim
00005EAC 0000                       	dc.w	SonAni_Walk1-.Anim
00005EAE 0000                       	dc.w	SonAni_Walk2-.Anim
00005EB0 0000                       	dc.w	SonAni_Walk3-.Anim
00005EB2 0000                       	dc.w	SonAni_Skid-.Anim
00005EB4 0000                       	dc.w	SonAni_Unk0E-.Anim
00005EB6 0000                       	dc.w	SonAni_Float-.Anim
00005EB8 0000                       	dc.w	SonAni_Spring-.Anim
00005EBA 0000                       	dc.w	SonAni_Hang-.Anim
00005EBC 0000                       	dc.w	SonAni_Unk12-.Anim
00005EBE 0000                       	dc.w	SonAni_Unk13-.Anim
00005EC0 0000                       	dc.w	SonAni_Unk14-.Anim
00005EC2 0000                       	dc.w	SonAni_Bubble-.Anim
00005EC4 0000                       	dc.w	SonAni_DeathBW-.Anim
00005EC6 0000                       	dc.w	SonAni_Drown-.Anim
00005EC8 0000                       	dc.w	SonAni_Death-.Anim
00005ECA 0000                       	dc.w	SonAni_Unk19-.Anim
00005ECC 0000                       	dc.w	SonAni_Hurt-.Anim
00005ECE 0000                       	dc.w	SonAni_Slide-.Anim
00005ED0 0000                       	dc.w	SonAni_Blank-.Anim
00005ED2 0000                       	dc.w	SonAni_Unk1D-.Anim
00005ED4 0000                       	dc.w	SonAni_Unk1E-.Anim
00005ED6 0000                       	dc.w	SonAni_IdleMini-.Anim
00005ED8 0000                       	dc.w	SonAni_DuckMini-.Anim
00005EDA 0000                       	dc.w	SonAni_WalkMini-.Anim
00005EDC 0000                       	dc.w	SonAni_RunMini-.Anim
00005EDE 0000                       	dc.w	SonAni_RollMini-.Anim
00005EE0 0000                       	dc.w	SonAni_SkidMini-.Anim
00005EE2 0000                       	dc.w	SonAni_HurtMini-.Anim
00005EE4 0000                       	dc.w	SonAni_BalanceMini-.Anim
00005EE6 0000                       	dc.w	SonAni_PushMini-.Anim
00005EE8 0000                       	dc.w	SonAni_StandMini-.Anim
00005EEA 0000                       	dc.w	SonAni_LookBack-.Anim
00005EEC 0000                       	dc.w	SonAni_Sneeze-.Anim
00005EEE 0000                       	dc.w	SonAni_GiveUp-.Anim
00005EF0 0000                       	dc.w	SonAni_Hang2-.Anim
00005EF2 0000                       	dc.w	SonAni_Balance3D-.Anim
00005EF4 0000                       	dc.w	SonAni_Wade-.Anim
00005EF6 0000                       	dc.w	SonAni_Float2-.Anim
00005EF8 0000                       	dc.w	SonAni_Unk30-.Anim
00005EFA 0000                       	dc.w	SonAni_Peelout-.Anim
00005EFC 0000                       	dc.w	SonAni_Balance2-.Anim
00005EFE 0000                       	dc.w	SonAni_RotateBack-.Anim
00005F00 0000                       	dc.w	SonAni_RotateFront-.Anim
00005F02 0000                       	dc.w	SonAni_Run3D-.Anim
00005F04 0000                       	dc.w	SonAni_Roll3D-.Anim
00005F06 0000                       	dc.w	SonAni_FallAway-.Anim
00005F08 0000                       	dc.w	SonAni_Grow-.Anim
00005F0A 0000                       	dc.w	SonAni_Shrink-.Anim
00005F0C 0000                       	dc.w	SonAni_Roll3D-.Anim
00005F0E 0000                       	dc.w	SonAni_FallAway-.Anim
00005F10 FF35 3637 3833 34FF        SonAni_Walk:	dc.b	$FF, $35, $36, $37, $38, $33, $34, $FF
00005F18 FF4B 4C4D 4EFF FFFF        SonAni_Run:	dc.b	$FF, $4B, $4C, $4D, $4E, $FF, $FF, $FF
00005F20 FE2D 2E2F 3031 FFFF        SonAni_Roll:	dc.b	$FE, $2D, $2E, $2F, $30, $31, $FF, $FF
00005F28 FE2D 2E31 2F30 31FF        SonAni_RollFast:dc.b	$FE, $2D, $2E, $31, $2F, $30, $31, $FF
00005F30 FD64 6566 67FF FFFF        SonAni_Push:	dc.b	$FD, $64, $65, $66, $67, $FF, $FF, $FF
00005F38 1701 0101 0101 0101 0101+  SonAni_Idle:	dc.b	$17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 3, 4, $FE, 2
00005F4D 00                         		dc.b	0
00005F4E 0F6D 6E83 84FF             SonAni_Balance:	dc.b	$F, $6D, $6E, $83, $84, $FF
00005F54 3F05 FF                    SonAni_LookUp:	dc.b	$3F, 5, $FF
00005F57 00                         		dc.b	0
00005F58 3F60 FF                    SonAni_Duck:	dc.b	$3F, $60, $FF
00005F5B 00                         		dc.b	0
00005F5C 3F33 FF                    SonAni_Walk0:	dc.b	$3F, $33, $FF
00005F5F 00                         		dc.b	0
00005F60 3F34 FF                    SonAni_Walk1:	dc.b	$3F, $34, $FF
00005F63 00                         		dc.b	0
00005F64 3F35 FF                    SonAni_Walk2:	dc.b	$3F, $35, $FF
00005F67 00                         		dc.b	0
00005F68 3F36 FF                    SonAni_Walk3:	dc.b	$3F, $36, $FF
00005F6B 00                         		dc.b	0
00005F6C 075B 5C7F FF               SonAni_Skid:	dc.b	7, $5B, $5C, $7F, $FF
00005F71 00                         		dc.b	0
00005F72 073C 3FFF                  SonAni_Unk0E:	dc.b	7, $3C, $3F, $FF
00005F76 0761 62B9 63BA FF          SonAni_Float:	dc.b	7, $61, $62, $B9, $63, $BA, $FF
00005F7D 00                         		dc.b	0
00005F7E 0332 9091 9293 FF          SonAni_Spring:	dc.b	3, $32, $90, $91, $92, $93, $FF
00005F85 00                         		dc.b	0
00005F86 046B 6CFF                  SonAni_Hang:	dc.b	4, $6B, $6C, $FF
00005F8A 0F43 4343 FE01             SonAni_Unk12:	dc.b	$F, $43, $43, $43, $FE, 1
00005F90 0F43 44FE 01               SonAni_Unk13:	dc.b	$F, $43, $44, $FE, 1
00005F95 00                         		dc.b	0
00005F96 3F49 FF                    SonAni_Unk14:	dc.b	$3F, $49, $FF
00005F99 00                         		dc.b	0
00005F9A 0B5F 5F37 38FD 00          SonAni_Bubble:	dc.b	$B, $5F, $5F, $37, $38, $FD, 0
00005FA1 00                         		dc.b	0
00005FA2 2068 FF                    SonAni_DeathBW:	dc.b	$20, $68, $FF
00005FA5 00                         		dc.b	0
00005FA6 2F69 FF                    SonAni_Drown:	dc.b	$2F, $69, $FF
00005FA9 00                         		dc.b	0
00005FAA 036A FF                    SonAni_Death:	dc.b	3, $6A, $FF
00005FAD 00                         		dc.b	0
00005FAE 034E 4F50 5152 00FE 01     SonAni_Unk19:	dc.b	3, $4E, $4F, $50, $51, $52, 0, $FE, 1
00005FB7 00                         		dc.b	0
00005FB8 035D FF                    SonAni_Hurt:	dc.b	3, $5D, $FF
00005FBB 00                         		dc.b	0
00005FBC 075D 5EFF                  SonAni_Slide:	dc.b	7, $5D, $5E, $FF
00005FC0 7700 FD00                  SonAni_Blank:	dc.b	$77, 0, $FD, 0
00005FC4 033C 3D53 3E54 FF          SonAni_Unk1D:	dc.b	3, $3C, $3D, $53, $3E, $54, $FF
00005FCB 00                         		dc.b	0
00005FCC 033C FD                    SonAni_Unk1E:	dc.b	3, $3C, $FD
00005FCF 00                         		dc.b	0
00005FD0 176F 6F6F 6F6F 6F6F 6F6F+  SonAni_IdleMini:dc.b	$17, $6F, $6F, $6F, $6F, $6F, $6F, $6F, $6F, $6F, $6F, $6F, $6F, $70, $70, $70, $71, $70, $71, $FE, 2
00005FE5 00                         		dc.b	0
00005FE6 3F72 FF                    SonAni_DuckMini:dc.b	$3F, $72, $FF
00005FE9 00                         		dc.b	0
00005FEA FF73 7475 74FF             SonAni_WalkMini:dc.b	$FF, $73, $74, $75, $74, $FF
00005FF0 FF76 77FF FFFF             SonAni_RunMini:	dc.b	$FF, $76, $77, $FF, $FF, $FF
00005FF6 FE7C 7D7E FFFF             SonAni_RollMini:dc.b	$FE, $7C, $7D, $7E, $FF, $FF
00005FFC 0778 78FF                  SonAni_SkidMini:dc.b	7, $78, $78, $FF
00006000 0379 FF                    SonAni_HurtMini:dc.b	3, $79, $FF
00006003 00                         		dc.b	0
00006004 1F7A 7BFF                  SonAni_BalanceMini:dc.b	$1F, $7A, $7B, $FF
00006008 FD73 7475 FFFF FF          SonAni_PushMini:dc.b	$FD, $73, $74, $75, $FF, $FF, $FF
0000600F 00                         		dc.b	0
00006010 3F6F FF                    SonAni_StandMini:dc.b	$3F, $6F, $FF
00006013 00                         		dc.b	0
00006014 3F06 FF                    SonAni_LookBack:dc.b	$3F, 6, $FF
00006017 00                         		dc.b	0
00006018 0307 0707 0707 0909 0808+  SonAni_Sneeze:	dc.b	3, 7, 7, 7, 7, 7, 9, 9, 8, 8, 8, 1, $A, $A, $FD, 5
00006028 0411 1212 1313 1212 1313+  SonAni_GiveUp:	dc.b	4, $11, $12, $12, $13, $13, $12, $12, $13, $13, $12, $12, $13, $13, $11, $11
00006038 1111 1414 1414 1515 1616+  		dc.b	$11, $11, $14, $14, $14, $14, $15, $15, $16, $16, $16, $16, $16, $16, $17, $17
00006048 1717 1717 A4A5 FE02        		dc.b	$17, $17, $17, $17, $A4, $A5, $FE, 2
00006050 FC18 19A6 19FF             SonAni_Hang2:	dc.b	$FC, $18, $19, $A6, $19, $FF
00006056 FC1A 1B1C 1F1D 1EFF        SonAni_Balance3D:dc.b	$FC, $1A, $1B, $1C, $1F, $1D, $1E, $FF
0000605E FF0D 0E0F 100B 0CFF        SonAni_Wade:	dc.b	$FF, $D, $E, $F, $10, $B, $C, $FF
00006066 FF61 6263 FF               SonAni_Float2:	dc.b	$FF, $61, $62, $63, $FF
0000606B 00                         		dc.b	0
0000606C 1370 6F70 79FE 01          SonAni_Unk30:	dc.b	$13, $70, $6F, $70, $79, $FE, 1
00006073 00                         		dc.b	0
00006074 FF94 9596 97FF FFFF        SonAni_Peelout:	dc.b	$FF, $94, $95, $96, $97, $FF, $FF, $FF
0000607C 0F85 8687 88FF             SonAni_Balance2:dc.b	$F, $85, $86, $87, $88, $FF
00006082 0301 B5B5 B6B6 B7B7 BBFD+  SonAni_RotateBack:dc.b	3, 1, $B5, $B5, $B6, $B6, $B7, $B7, $BB, $FD, 5
0000608D 00                         		dc.b	0
0000608E 0301 B5B5 0101 B8B8 BBFD+  SonAni_RotateFront:dc.b	3, 1, $B5, $B5, 1, 1, $B8, $B8, $BB, $FD, 5
00006099 00                         		dc.b	0
0000609A FFA6 A7A8 A9FF FFFF        SonAni_Run3D:	dc.b	$FF, $A6, $A7, $A8, $A9, $FF, $FF, $FF
000060A2 FE20 2123 2425 31FF        SonAni_Roll3D:	dc.b	$FE, $20, $21, $23, $24, $25, $31, $FF
000060AA 01A4 A5FF                  SonAni_FallAway:dc.b	1, $A4, $A5, $FF
000060AE 0179 ABAC ABAC ABAC A9AA+  SonAni_Grow:	dc.b	1, $79, $AB, $AC, $AB, $AC, $AB, $AC, $A9, $AA, $A9, $AA, $A9, $AA, $A7, $A8, $A7, $A8, $A7, $A8, $FD, $1A
000060C4 015D A7A8 A7A8 A7A8 A9AA+  SonAni_Shrink:	dc.b	1, $5D, $A7, $A8, $A7, $A8, $A7, $A8, $A9, $AA, $A9, $AA, $A9, $AA, $AB, $AC, $AB, $AC, $AB, $AC, $FD, $1A
000060C4 015D A7A8 A7A8 A7A8 A9AA+  SonAni_Shrink:	dc.b	1, $5D, $A7, $A8, $A7, $A8, $A7, $A8, $A9, $AA, $A9, $AA, $A9, $AA, $AB, $AC, $AB, $AC, $AB, $AC, $FD, $1A
000060DA                            	even
000060DA                            
000060DA                            ; -------------------------------------------------------------------------------
000060DA                            ; Load the tiles for Sonic's current sprite frame
000060DA                            ; -------------------------------------------------------------------------------
000060DA                            
000060DA                            LoadSonicDynPLC:
000060DA 4A10                       	tst.b	(a0)					; Are we even loaded at all?
000060DC 6700 0000                  	beq.w	.End					; If not, branch
000060E0                            
000060E0 45F8 F766                  	lea	(v_sonic_last_frame).w,a2		; Get the ID of the last sprite frame that was loaded
000060E4 7000                       	moveq	#0,d0
000060E6 1028 001A                  	move.b	oMapFrame(a0),d0			; Get current sprite frame ID
000060EA B012                       	cmp.b	(a2),d0					; Has our sprite frame changed?
000060EC 6700                       	beq.s	.End					; If not, branch
000060EE 1480                       	move.b	d0,(a2)					; Update last sprite frame ID
000060F0                            
000060F0 45F9 0000 0000             	lea	(DPLC_Sonic).l,a2			; Get DPLC data for our current sprite frame
000060F6 D040                       	add.w	d0,d0
000060F8 D4F2 0000                  	adda.w	(a2,d0.w),a2
000060FC                            
000060FC 7200                       	moveq	#0,d1					; Get number of DPLC entries
000060FE 321A                       	move.w	(a2)+,d1
00006100 5301                       	subq.b	#1,d1
00006102 6B00                       	bmi.s	.End					; If there are none, branch
00006104                            
00006104 47F8 C800                  	lea	(v_sonic_art).w,a3			; Get sprite frame tile buffer
00006108 11FC 0001 F767             	move.b	#1,(v_sonic_frame_changed).w		; Mark buffer as updated
0000610E                            
0000610E                            .PieceLoop:
0000610E 7400                       	moveq	#0,d2					; Get number of tiles to load
00006110 141A                       	move.b	(a2)+,d2
00006112 3002                       	move.w	d2,d0
00006114 E808                       	lsr.b	#4,d0
00006116                            
00006116 E14A                       	lsl.w	#8,d2					; Get starting tile to load
00006118 141A                       	move.b	(a2)+,d2
0000611A 0242 0FFF                  	andi.w	#$FFF,d2
0000611E EB8A                       	lsl.l	#5,d2
00006120 43F9 0000 0000             	lea	(ArtUnc_Sonic).l,a1
00006126 D3C2                       	adda.l	d2,a1
00006128                            
00006128                            .CopyPieceLoop:
00006128 4CD9 707C                  	movem.l	(a1)+,d2-d6/a4-a6			; Load tile data for this entry
0000612C 48D3 707C                  	movem.l	d2-d6/a4-a6,(a3)
00006130 47EB 0020                  	lea	$20(a3),a3
00006134 51C8 FFF2                  	dbf	d0,.CopyPieceLoop			; Loop until all tiles in this entry are loaded
00006138                            
00006138 51C9 FFD4                  	dbf	d1,.PieceLoop				; Loop until all entries are processed
0000613C                            
0000613C                            .End:
0000613C 4E75                       	rts
0000613E                            
0000613E                            ; -------------------------------------------------------------------------------
0000613E                            ; Check if Sonic is on a pinball flipper, and if so, get the angle to launch
0000613E                            ; Sonic at when jumping off of it
0000613E                            ; -------------------------------------------------------------------------------
0000613E                            ; RETURNS:
0000613E                            ;	d0.b	- Angle to launch at
0000613E                            ;	d2.w	- Speed to launch at
0000613E                            ;	eq/ne	- Was on flipper/Was not on flipper
0000613E                            ; -------------------------------------------------------------------------------
0000613E                            
0000613E                            ObjSonic_ChkFlipper:
0000613E 7000                       	moveq	#0,d0					; Get object we are standing on
00006140 1028 003D                  	move.b	oPlayerStandObj(a0),d0
00006144 ED48                       	lsl.w	#6,d0
00006146 0680 00FF D000             	addi.l	#v_player&$FFFFFF,d0
0000614C 2240                       	movea.l	d0,a1
0000614E                            
0000614E 0C11 001E                  	cmpi.b	#$1E,oID(a1)				; Is it a pinball flipper from CCZ?
00006152 6600                       	bne.s	.End					; If not, branch
00006154                            
00006154 303C 00CC                  	move.w	#$CC,d0					; Play spring sound
00006158 4EB8 2708                  	jsr	PlayFMSound
0000615C 137C 0001 001C             	move.b	#1,oAnim(a1)				; Set flipper animation to move
00006162                            
00006162 3229 0008                  	move.w	oX(a1),d1				; Get angle in which to launch at
00006166 3429 000C                  	move.w	oY(a1),d2				; arctan((object Y + 24 - player Y) / (object X - player X))
0000616A 0642 0018                  	addi.w	#24,d2
0000616E 9268 0008                  	sub.w	oX(a0),d1
00006172 9468 000C                  	sub.w	oY(a0),d2
00006176 4EB8 0D44                  	jsr	CalcAngle
0000617A                            
0000617A 7400                       	moveq	#0,d2					; Get the amount of force used to get the speed to launch us at, depending on
0000617C 1429 0019                  	move.b	oWidth(a1),d2				; the distance we are from the flipper's rotation pivot
00006180 3628 0008                  	move.w	oX(a0),d3				; (object width + (player X - object X))
00006184 9669 0008                  	sub.w	oX(a1),d3
00006188 D642                       	add.w	d2,d3
0000618A                            
0000618A 0829 0000 0022             	btst	#0,oStatus(a1)				; Is the flipper object flipped horizontally?
00006190 6600                       	bne.s	.XFlip					; If so, branch
00006192                            
00006192 323C 0040                  	move.w	#64,d1					; Invert the force to account for the horizontal flip
00006196 9243                       	sub.w	d3,d1					; (64 - (object width + (player X - object X)))
00006198 3601                       	move.w	d1,d3
0000619A                            
0000619A                            .XFlip:
0000619A 343C F600                  	move.w	#-$A00,d2				; Get the speed to launch us at
0000619E 3202                       	move.w	d2,d1					; (-10 + ((-10 * force) / 64))
000061A0 48C1                       	ext.l	d1
000061A2 C3C3                       	muls.w	d3,d1
000061A4 83FC 0040                  	divs.w	#64,d1
000061A8 D441                       	add.w	d1,d2
000061AA                            
000061AA 7200                       	moveq	#0,d1					; Mark as having been on the flipper
000061AC                            
000061AC                            .End:
000061AC 4E75                       	rts
000061AE                            
000061AE                            ; -------------------------------------------------------------------------------
000061AE                            ; Fade out music
000061AE                            ; -------------------------------------------------------------------------------
000061AE                            
000061AE                            FadeOutMusic:
000061AE 303C 000E                  	move.w	#$E,d0
000061B2                            
000061B2                            ; -------------------------------------------------------------------------------
000061B2                            ; Send a command to the Sub CPU
000061B2                            ; -------------------------------------------------------------------------------
000061B2                            ; PARAMETERS:
000061B2                            ;	d0.w	- Command ID
000061B2                            ; -------------------------------------------------------------------------------
000061B2                            SubCPUCmd:
000061B2                            SendSubCommand:
000061B2 4E75                               rts
000061B4 0C40 0067                  	cmpi.w	#$67,d0					; Is this the command to play the boss music?
000061B8 6600                       	bne.s	.NotBossMusic				; If not, branch
000061BA 13FC 0001 00FF 1958        	move.b	#1,(v_boss_music_playing).l		; Mark boss music as being played
000061C2                            
000061C2                            .NotBossMusic:
000061C2 33C0 00A1 2010             	move.w	d0,(GA_CMD_0).l				; Send the command
000061C8                            
000061C8                            .WaitSubCPU:
000061C8 3039 00A1 2020             	move.w	(GA_STAT_0).l,d0			; Has the Sub CPU received the command?
000061CE 67F8                       	beq.s	.WaitSubCPU				; If not, wait
000061D0 B079 00A1 2020             	cmp.w	(GA_STAT_0).l,d0
000061D6 66F0                       	bne.s	.WaitSubCPU				; If not, wait
000061D8                            
000061D8 33FC 0000 00A1 2010        	move.w	#0,(GA_CMD_0).l				; Mark as ready to send commands again
000061E0                            
000061E0                            .WaitSubCPUDone:
000061E0 3039 00A1 2020             	move.w	(GA_STAT_0).l,d0			; Is the Sub CPU done processing the command?
000061E6 66F8                       	bne.s	.WaitSubCPUDone				; If not, wait
000061E8 3039 00A1 2020             	move.w	(GA_STAT_0).l,d0
000061EE                            
000061EE 66F0                       	bne.s	.WaitSubCPUDone				; If not, wait
000061F0 4E75                       	rts
000061F2                            
000061F2                            ; -------------------------------------------------------------------------------
000061F2                            
000061F2 0000                       	dc.w	0
000061F4                            
000061F4                            ; -------------------------------------------------------------------------------
000061F4                            ; Animate an object's sprite
000061F4                            ; -------------------------------------------------------------------------------
000061F4                            ; PARAMETERS:
000061F4                            ;	a0.l	- Object RAM
000061F4                            ; -------------------------------------------------------------------------------
000061F4                            
000061F4                            AnimateObject:
000061F4 7000                       	moveq	#0,d0					; Get current animation
000061F6 1028 001C                  	move.b	oAnim(a0),d0
000061FA B028 001D                  	cmp.b	oPrevAnim(a0),d0			; Are we changing animations?
000061FE 6700                       	beq.s	.Do					; If not, branch
00006200                            
00006200 1140 001D                  	move.b	d0,oPrevAnim(a0)			; Reset animation flags
00006204 117C 0000 001B             	move.b	#0,oAnimFrame(a0)
0000620A 117C 0000 001E             	move.b	#0,oAnimTime(a0)
00006210                            
00006210                            .Do:
00006210 5328 001E                  	subq.b	#1,oAnimTime(a0)
00006214 6A00                       	bpl.s	.End
00006216 D040                       	add.w	d0,d0					; Get pointer to animation data
00006218 D2F1 0000                  	adda.w	(a1,d0.w),a1
0000621C 1151 001E                  	move.b	(a1),oAnimTime(a0)			; Get animation speed
00006220                            
00006220 7200                       	moveq	#0,d1					; Get animation frame
00006222 1228 001B                  	move.b	oAnimFrame(a0),d1
00006226 1031 1001                  	move.b	1(a1,d1.w),d0
0000622A 6B00                       	bmi.s	.AniFF					; If it's a flag, branch
0000622C                            
0000622C                            .AniNext:
0000622C 1200                       	move.b	d0,d1					; Copy flip flags
0000622E 0200 001F                  	andi.b	#$1F,d0					; Set sprite frame
00006232 1140 001A                  	move.b	d0,oMapFrame(a0)
00006236                            
00006236 1028 0022                  	move.b	oStatus(a0),d0				; Apply status flip flags to render flip flags
0000623A E719                       	rol.b	#3,d1
0000623C B101                       	eor.b	d0,d1
0000623E 0201 0003                  	andi.b	#3,d1
00006242 0228 00FC 0001             	andi.b	#$FC,oRender(a0)
00006248 8328 0001                  	or.b	d1,oRender(a0)
0000624C                            
0000624C 5228 001B                  	addq.b	#1,oAnimFrame(a0)			; Update animation frame
00006250                            
00006250                            .End:
00006250 4E75                       	rts
00006252                            
00006252                            ; -------------------------------------------------------------------------------
00006252                            
00006252                            .AniFF:
00006252 5200                       	addq.b	#1,d0					; Is the flag $FF (loop)?
00006254 6600                       	bne.s	.AniFE					; If not, branch
00006256                            
00006256 117C 0000 001B             	move.b	#0,oAnimFrame(a0)			; Set animation script frame back to 0
0000625C 1029 0001                  	move.b	1(a1),d0				; Get animation frame at that point
00006260 60CA                       	bra.s	.AniNext
00006262                            
00006262                            .AniFE:
00006262 5200                       	addq.b	#1,d0					; Is the flag $FE (loop back to frame)?
00006264 6600                       	bne.s	.AniFD
00006266                            
00006266 1031 1002                  	move.b	2(a1,d1.w),d0				; Get animation script frame to go back to
0000626A 9128 001B                  	sub.b	d0,oAnimFrame(a0)
0000626E 9200                       	sub.b	d0,d1					; Get animation frame at that point
00006270 1031 1001                  	move.b	1(a1,d1.w),d0
00006274 60B6                       	bra.s	.AniNext
00006276                            
00006276                            .AniFD:
00006276 5200                       	addq.b	#1,d0					; Is the flag $FD (new animation)?
00006278 6600                       	bne.s	.AniFC
0000627A 1171 1002 001C             	move.b	2(a1,d1.w),oAnim(a0)			; Set new animation ID
00006280                            
00006280                            .AniFC:
00006280 5200                       	addq.b	#1,d0					; Is the flag $FC (increment routine ID)?
00006282 6600                       	bne.s	.AniFB					; If not, branch
00006284 5428 0024                  	addq.b	#2,oRoutine(a0)				; Increment routine ID
00006288                            
00006288                            .AniFB:
00006288 5200                       	addq.b	#1,d0					; Is the flag $FB (loop and reset secondary routine ID)?
0000628A 6600                       	bne.s	.AniFA					; If not, branch
0000628C 117C 0000 001B             	move.b	#0,oAnimFrame(a0)			; Set animation script frame back to 0
00006292 4228 0025                  	clr.b	oRoutine2(a0)				; Reset secondary routine ID
00006296                            
00006296                            .AniFA:
00006296 5200                       	addq.b	#1,d0					; Is the flag $FA (increment secondary routine ID)?
00006298 6600                       	bne.s	.End2					; If not, branch
0000629A 5428 0025                  	addq.b	#2,oRoutine2(a0)			; Increment secondary routine ID
0000629E                            
0000629E                            .End2:
0000629E 4E75                       	rts
000062A0                            
000062A0                            ; -------------------------------------------------------------------------------
000062A0                            ; Save data at a checkpoint
000062A0                            ; -------------------------------------------------------------------------------
000062A0                            
000062A0                            ObjCheckpoint_SaveData:					; Save some values
000062A0 13F9 00FF 1522 00FF 1523   	move.b	(v_reset_lvl_flags).l,(v_saved_reset_lvl_flags).l
000062AA 33F8 D008 00FF 1524        	move.w	(v_player+oX).w,(v_saved_x).l
000062B2 33F8 D00C 00FF 1526        	move.w	(v_player+oY).w,(v_saved_y).l
000062BA 13F8 F64D 00FF 1543        	move.b	(v_water_routine).w,(v_saved_water_rout).l
000062C2 33F8 F72E 00FF 1530        	move.w	(v_bottom_bound).w,(v_saved_btm_bound).l
000062CA 33F8 F700 00FF 1532        	move.w	(v_cam_fg_x).w,(v_saved_cam_fg_x).l
000062D2 33F8 F704 00FF 1534        	move.w	(v_cam_fg_y).w,(v_saved_cam_fg_y).l
000062DA 33F8 F708 00FF 1536        	move.w	(v_cam_bg_x).w,(v_saved_cam_bg_x).l
000062E2 33F8 F70C 00FF 1538        	move.w	(v_cam_bg_y).w,(v_saved_cam_bg_y).l
000062EA 33F8 F710 00FF 153A        	move.w	(v_cam_bg2_x).w,(v_saved_cam_bg2_x).l
000062F2 33F8 F714 00FF 153C        	move.w	(v_cam_bg2_y).w,(v_saved_cam_bg2_y).l
000062FA 33F8 F718 00FF 153E        	move.w	(v_cam_bg3_x).w,(v_saved_cam_bg3_x).l
00006302 33F8 F71C 00FF 1540        	move.w	(v_cam_bg3_y).w,(v_saved_cam_bg3_y).l
0000630A 33F8 F648 00FF 1542        	move.w	(v_water_height2).w,(v_saved_water_height2).l
00006312 13F8 F64D 00FF 1543        	move.b	(v_water_routine).w,(v_saved_water_rout).l
0000631A 13F8 F64E 00FF 1544        	move.b	(v_water_full).w,(v_saved_water_full).l
00006322                            
00006322 2039 00FF 1514             	move.l	(v_time).l,d0				; Move the level timer to 5:00 if we are past that
00006328 0C80 0005 0000             	cmpi.l	#$50000,d0
0000632E 6500                       	bcs.s	.StoreTime
00006330 203C 0005 0000             	move.l	#$50000,d0
00006336                            
00006336                            .StoreTime:
00006336 23C0 00FF 152A             	move.l	d0,(v_saved_time).l
0000633C                            
0000633C 13F9 00FF 195B 00FF 1591   	move.b	(v_mini_sonic).l,(v_saved_mini_sonic).l
00006346 4E75                       	rts
00006348                            
00006348                            ; -------------------------------------------------------------------------------
00006348                            ; Checkpoint object
00006348                            ; -------------------------------------------------------------------------------
00006348                            
00006348 =0000002A                  oChkPntBallX		EQU	oVar2A			; Ball X origin
00006348 =0000002C                  oChkPntBallY		EQU	oVar2C			; Ball Y origin
00006348 =0000002E                  oChkPntActive		EQU	oVar2E			; Activated flag
00006348 =00000030                  oChkPntParent		EQU	oVar30			; Parent object
00006348 =00000034                  oChkPntBallAngle	EQU	oVar34			; Ball angle
00006348                            
00006348                            ; -------------------------------------------------------------------------------
00006348                            
00006348                            ObjCheckpoint:
00006348 7000                       	moveq	#0,d0					; Run object routine
0000634A 1028 0024                  	move.b	oRoutine(a0),d0
0000634E 303B 0000                  	move.w	.Index(pc,d0.w),d0
00006352 4EBB 0000                  	jsr	.Index(pc,d0.w)
00006356                            
00006356 4EB8 4012                  	jsr	DrawObject				; Draw sprite
0000635A 4EF9 0000 0000             	jmp	CheckObjDespawnTime			; Check if we should despawn
00006360                            
00006360                            ; -------------------------------------------------------------------------------
00006360                            
00006360                            .Index:
00006360 0000                       	dc.w	ObjCheckpoint_Init-.Index		; Initialization
00006362 0000                       	dc.w	ObjCheckpoint_Main-.Index		; Main
00006364 0000                       	dc.w	ObjCheckpoint_Ball-.Index		; Ball main
00006366 0000                       	dc.w	ObjCheckpoint_Animate-.Index		; Animation
00006368                            
00006368                            ; -------------------------------------------------------------------------------
00006368                            ; Checkpoint initialization routine
00006368                            ; -------------------------------------------------------------------------------
00006368                            
00006368                            ObjCheckpoint_Init:
00006368 5428 0024                  	addq.b	#2,oRoutine(a0)				; Advance routine
0000636C                            
0000636C 217C 0000 0000 0004        	move.l	#MapSpr_Checkpoint,oMap(a0)		; Set mappings
00006374 317C 06CB 0002             	move.w	#$6CB,oTile(a0)				; Set base tile
0000637A 117C 0004 0001             	move.b	#4,oRender(a0)				; Set render flags
00006380 117C 0008 0019             	move.b	#8,oWidth(a0)				; Set width
00006386 117C 0018 0016             	move.b	#$18,oYRadius(a0)			; Set Y radius
0000638C 117C 0004 0018             	move.b	#4,oPriority(a0)			; Set priority
00006392                            
00006392 1039 00FF 158E             	move.b	(v_last_checkpoint).l,d0		; Has a later checkpoint already been activated?
00006398 B028 0028                  	cmp.b	oSubtype(a0),d0
0000639C 6500                       	bcs.s	.Unactivated				; If not, branch
0000639E                            
0000639E 117C 0001 002E             	move.b	#1,oChkPntActive(a0)			; Mark as activated
000063A4 6000                       	bra.s	.GenBall				; Continue initialization
000063A6                            
000063A6                            .Unactivated:
000063A6 117C 00E3 0020             	move.b	#$E3,oColType(a0)			; Enable collision
000063AC                            
000063AC                            .GenBall:
000063AC 4EB9 0000 0000             	jsr	FindObjSlot				; Find a free object slot
000063B2 6600                       	bne.s	.Delete					; If one was not found, don't bother having the checkpoint loaded at all
000063B4                            
000063B4 12BC 0013                  	move.b	#$13,oID(a1)				; Load the checkpoint ball object
000063B8 5829 0024                  	addq.b	#4,oRoutine(a1)				; Set ball routine to the main ball routine
000063BC 4A28 002E                  	tst.b	oChkPntActive(a0)			; Were we already activated?
000063C0 6700                       	beq.s	.Unactivated2				; If not, branch
000063C2 5429 0024                  	addq.b	#2,oRoutine(a1)				; Set ball routine to just animate
000063C6                            
000063C6                            .Unactivated2:
000063C6 237C 0000 0000 0004        	move.l	#MapSpr_Checkpoint,oMap(a1)		; Set ball mappings
000063CE 337C 06CB 0002             	move.w	#$6CB,oTile(a1)				; Set ball base tile
000063D4 137C 0004 0001             	move.b	#4,oRender(a1)				; Set ball render flags
000063DA 137C 0008 0019             	move.b	#8,oWidth(a1)				; Set ball width
000063E0 137C 0008 0016             	move.b	#8,oYRadius(a1)				; Set ball Y radius
000063E6 137C 0003 0018             	move.b	#3,oPriority(a1)			; Set ball priority
000063EC 137C 0001 001A             	move.b	#1,oMapFrame(a1)			; Set ball sprite frame
000063F2 2348 0030                  	move.l	a0,oChkPntParent(a1)			; Set ball parent object to us
000063F6                            
000063F6 3368 0008 0008             	move.w	oX(a0),oX(a1)				; Set ball position to our position
000063FC 3368 000C 000C             	move.w	oY(a0),oY(a1)
00006402 0469 0020 000C             	subi.w	#32,oY(a1)				; Offset ball Y position up by 32 pixels
00006408                            
00006408 3368 0008 002A             	move.w	oX(a0),oChkPntBallX(a1)			; Set ball center position
0000640E 3368 000C 002C             	move.w	oY(a0),oChkPntBallY(a1)
00006414 0469 0018 002C             	subi.w	#32-8,oChkPntBallY(a1)
0000641A 4E75                       	rts
0000641C                            
0000641C                            .Delete:
0000641C 4EF8 40BE                  	jmp	DeleteObject				; Delete ourselves
00006420                            
00006420                            ; -------------------------------------------------------------------------------
00006420                            ; Main checkpoint routine
00006420                            ; -------------------------------------------------------------------------------
00006420                            
00006420                            ObjCheckpoint_Main:
00006420 4A28 002E                  	tst.b	oChkPntActive(a0)			; Have we been activated?
00006424 6600                       	bne.s	.End					; If so, branch
00006426 4A28 0021                  	tst.b	oColStatus(a0)				; Has the player touched us yet?
0000642A 6700                       	beq.s	.End					; If not, branch
0000642C                            
0000642C 4228 0020                  	clr.b	oColType(a0)				; Disable collision
00006430 117C 0001 002E             	move.b	#1,oChkPntActive(a0)			; Mark as activated
00006436 13E8 0028 00FF 158E        	move.b	oSubtype(a0),(v_last_checkpoint).l	; Set current checkpoint ID to ours
0000643E                            
0000643E 13FC 0001 00FF 1522        	move.b	#1,(v_reset_lvl_flags).l		; Mark checkpoint as active in the level
00006446 6100 FE58                  	bsr.w	ObjCheckpoint_SaveData			; Save level data at this point
0000644A                            
0000644A 303C 00A1                  	move.w	#$A1,d0					; Play checkpoint sound
0000644E 4EF8 2708                  	jmp	PlayFMSound
00006452                            
00006452                            .End:
00006452 4E75                       	rts
00006454                            
00006454                            ; -------------------------------------------------------------------------------
00006454                            ; Main checkpoint ball routine
00006454                            ; -------------------------------------------------------------------------------
00006454                            
00006454                            ObjCheckpoint_Ball:
00006454 4A28 002E                  	tst.b	oChkPntActive(a0)			; Have we been activated?
00006458 6600                       	bne.s	.Spin					; If not, branch
0000645A                            
0000645A 2268 0030                  	movea.l	oChkPntParent(a0),a1			; Has the main checkpoint object been touched by the player?
0000645E 4A29 002E                  	tst.b	oChkPntActive(a1)
00006462 6700                       	beq.s	.End					; If not, branch
00006464                            
00006464 117C 0001 002E             	move.b	#1,oChkPntActive(a0)			; Mark as activated
0000646A                            
0000646A                            .Spin:
0000646A 5028 0034                  	addq.b	#8,oChkPntBallAngle(a0)			; Increment angle
0000646E                            
0000646E 7000                       	moveq	#0,d0					; Get sine and cosine of our angle
00006470 1028 0034                  	move.b	oChkPntBallAngle(a0),d0
00006474 4EB8 0AAC                  	jsr	CalcSine
00006478                            
00006478 C1FC 0008                  	muls.w	#8,d0					; Get X offset (center X + (sin(angle) * 8))
0000647C E088                       	lsr.l	#8,d0
0000647E 3168 002A 0008             	move.w	oChkPntBallX(a0),oX(a0)
00006484 D168 0008                  	add.w	d0,oX(a0)
00006488                            
00006488 C3FC FFF8                  	muls.w	#-8,d1					; Get Y offset (center Y + (cos(angle) * -8))
0000648C E089                       	lsr.l	#8,d1
0000648E 3168 002C 000C             	move.w	oChkPntBallY(a0),oY(a0)
00006494 D368 000C                  	add.w	d1,oY(a0)
00006498                            
00006498 4A28 0034                  	tst.b	oChkPntBallAngle(a0)			; Have we fully spun around?
0000649C 6600                       	bne.s	.End					; If not, branch
0000649E 5428 0024                  	addq.b	#2,oRoutine(a0)				; Set routine to just animate now
000064A2                            
000064A2                            .End:
000064A2 4E75                       	rts
000064A4                            
000064A4                            ; -------------------------------------------------------------------------------
000064A4                            ; Checkpoint animation routine
000064A4                            ; -------------------------------------------------------------------------------
000064A4                            
000064A4                            ObjCheckpoint_Animate:
000064A4 43F9 0000 0000             	lea	(Ani_Checkpoint).l,a1			; Animate sprite
000064AA 6000 FD48                  	bra.w	AnimateObject
000064AE                            
000064AE                            ; -------------------------------------------------------------------------------
000064AE                            ; Dummied out function that originally resumed the music from the drowning
000064AE                            ; music in Sonic 1
000064AE                            ; -------------------------------------------------------------------------------
000064AE                            
000064AE                            ResumeMusicS1:
000064AE 4E75                       	rts
000064B0                            
000064B0                            ; -------------------------------------------------------------------------------
000064B0                            ; Some kind of unused badnik of sorts. Just sits completely still with the
000064B0                            ; shield sprite mappings.
000064B0                            ; -------------------------------------------------------------------------------
000064B0                            
000064B0 =00000030                  oUnusedBadX		EQU	oVar30			; X position copy
000064B0                            
000064B0                            ; -------------------------------------------------------------------------------
000064B0                            
000064B0                            ObjUnusedBadnik:
000064B0 7000                       	moveq	#0,d0					; Run object routine
000064B2 1028 0024                  	move.b	oRoutine(a0),d0
000064B6 303B 0000                  	move.w	.Index(pc,d0.w),d0
000064BA 4EFB 0000                  	jmp	.Index(pc,d0.w)
000064BE                            
000064BE                            ; -------------------------------------------------------------------------------
000064BE                            
000064BE                            .Index:
000064BE 0000                       	dc.w	ObjUnusedBadnik_Init-.Index		; Initialization
000064C0 0000                       	dc.w	ObjUnusedBadnik_Main-.Index		; Main
000064C2                            
000064C2                            ; -------------------------------------------------------------------------------
000064C2                            ; Unused badnik initialization routine
000064C2                            ; -------------------------------------------------------------------------------
000064C2                            
000064C2                            ObjUnusedBadnik_Init:
000064C2 0828 0007 0022             	btst	#7,oStatus(a0)				; Are we offscreen?
000064C8 6600 DBF4                  	bne.w	DeleteObject				; If so, delete ourselves
000064CC                            
000064CC 5428 0024                  	addq.b	#2,oRoutine(a0)				; Advance routine
000064D0                            
000064D0 117C 0004 0001             	move.b	#4,oRender(a0)				; Set render flags
000064D6 117C 0001 0018             	move.b	#1,oPriority(a0)			; Set priority
000064DC 217C 0000 0000 0004        	move.l	#MapSpr_Powerup,oMap(a0)		; Set mappings
000064E4 317C 0541 0002             	move.w	#$541,oTile(a0)				; Set base tile
000064EA 3168 0008 0030             	move.w	oX(a0),oUnusedBadX(a0)			; Copy X position
000064F0 117C 0006 0020             	move.b	#6,oColType(a0)				; Enable collision
000064F6                            
000064F6                            ; -------------------------------------------------------------------------------
000064F6                            ; Main unused badnik routine
000064F6                            ; -------------------------------------------------------------------------------
000064F6                            
000064F6                            ObjUnusedBadnik_Main:
000064F6 3028 0030                  	move.w	oUnusedBadX(a0),d0			; Get the object's chunk position
000064FA 0240 FF80                  	andi.w	#$FF80,d0
000064FE 3238 F700                  	move.w	(v_cam_fg_x).w,d1			; Get the camera's chunk position
00006502 0441 0080                  	subi.w	#$80,d1
00006506 0241 FF80                  	andi.w	#$FF80,d1
0000650A                            
0000650A 9041                       	sub.w	d1,d0					; Has the object gone offscreen?
0000650C 0C40 0280                  	cmpi.w	#$80+(320+$40)+$80,d0
00006510 6200 DBAC                  	bhi.w	DeleteObject				; If so, delete ourselves
00006514                            
00006514 43F9 0000 0000             	lea	(Ani_Powerup).l,a1			; Animate sprite
0000651A 6100 FCD8                  	bsr.w	AnimateObject
0000651E 4EF8 4012                  	jmp	DrawObject				; Draw sprite
00006522                            
00006522                            ; -------------------------------------------------------------------------------
00006522                            ; Explosion object
00006522                            ; -------------------------------------------------------------------------------
00006522                            
00006522 =00000025                  oExplodeBadnik		EQU	oRoutine2		; Explosion from badnik flag
00006522 =00000029                  oExplodeLoPrio		EQU	oSubtype2		; Low priority sprite flag
00006522 =0000003E                  oExplodePoints		EQU	oVar3E			; Sprite ID for points object
00006522                            
00006522                            ; -------------------------------------------------------------------------------
00006522                            ; Create a points object from an explosion object
00006522                            ; -------------------------------------------------------------------------------
00006522                            
00006522                            ObjExplosion_MakePoints:
00006522 4A28 0025                  	tst.b	oExplodeBadnik(a0)			; Was this explosion from a badnik?
00006526 6600                       	bne.s	.End					; If not, branch
00006528                            
00006528 7200                       	moveq	#0,d1					; Get points sprite to display
0000652A 3228 003E                  	move.w	oExplodePoints(a0),d1
0000652E E209                       	lsr.b	#1,d1
00006530 0001 0080                  	ori.b	#$80,d1
00006534                            
00006534 4EB9 0000 0000             	jsr	FindObjSlot				; Find a free object slot
0000653A 6600                       	bne.s	.End					; If one was not found, branch
0000653C                            
0000653C 12BC 001C                  	move.b	#$1C,oID(a1)				; Load points object
00006540 3368 0008 0008             	move.w	oX(a0),oX(a1)				; Set the points position to ours
00006546 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000654C 1341 0028                  	move.b	d1,oSubtype(a1)				; Set points sprite frame ID
00006550                            
00006550                            .End:
00006550 4E75                       	rts
00006552                            
00006552                            ; -------------------------------------------------------------------------------
00006552                            ; Main explosion object code
00006552                            ; -------------------------------------------------------------------------------
00006552                            
00006552                            ObjExplosion:
00006552 7000                       	moveq	#0,d0					; Run object routine
00006554 1028 0024                  	move.b	oRoutine(a0),d0
00006558 303B 0000                  	move.w	.Index(pc,d0.w),d0
0000655C 4EFB 0000                  	jmp	.Index(pc,d0.w)
00006560                            
00006560                            ; -------------------------------------------------------------------------------
00006560                            
00006560                            .Index:
00006560 0000                       	dc.w	ObjExplosion_Init-.Index		; Initialization
00006562 0000                       	dc.w	ObjExplosion_Main-.Index		; Main
00006564 0000                       	dc.w	ObjExplosion_Done-.Index		; Finished
00006566                            
00006566                            ; -------------------------------------------------------------------------------
00006566                            ; Explosion initialization routine
00006566                            ; -------------------------------------------------------------------------------
00006566                            
00006566                            ObjExplosion_Init:
00006566 5428 0024                  	addq.b	#2,oRoutine(a0)				; Advance routine
0000656A                            
0000656A 0028 0004 0001             	ori.b	#4,oRender(a0)				; Set render flags
00006570 117C 0001 0018             	move.b	#1,oPriority(a0)			; Set priority
00006576 317C 8680 0002             	move.w	#$8680,oTile(a0)			; Set base tile
0000657C 4A28 0029                  	tst.b	oExplodeLoPrio(a0)			; Should our sprite be low priority?
00006580 6700                       	beq.s	.HighPriority				; If not, branch
00006582 0228 007F 0002             	andi.b	#$7F,oTile(a0)				; Clear tile priority bit
00006588                            
00006588                            .HighPriority:
00006588 217C 0000 0000 0004        	move.l	#MapSpr_Explosion,oMap(a0)		; Set mappings
00006590                            
00006590 6190                       	bsr.s	ObjExplosion_MakePoints			; Make points object if it should
00006592                            
00006592 117C 0000 0020             	move.b	#0,oColType(a0)				; Disable collision
00006598 117C 0000 001B             	move.b	#0,oAnimFrame(a0)			; Initialize animation
0000659E 117C 0000 001E             	move.b	#0,oAnimTime(a0)
000065A4 317C 0000 001C             	move.w	#0,oAnim(a0)
000065AA 4A28 0028                  	tst.b	oSubtype(a0)				; Should we use the alternate animation?
000065AE 6700                       	beq.s	ObjExplosion_Main			; If not, branch
000065B0 317C 0100 001C             	move.w	#$100,oAnim(a0)				; If so, use it
000065B6                            
000065B6                            ; -------------------------------------------------------------------------------
000065B6                            ; Main explosion routine
000065B6                            ; -------------------------------------------------------------------------------
000065B6                            
000065B6                            ObjExplosion_Main:
000065B6 43F9 0000 0000             	lea	(Ani_Explosion).l,a1			; Animate sprite
000065BC 6100 FC36                  	bsr.w	AnimateObject
000065C0 4EF8 4012                  	jmp	DrawObject				; Draw sprite
000065C4                            
000065C4                            ; -------------------------------------------------------------------------------
000065C4                            ; Explosion finished routine
000065C4                            ; -------------------------------------------------------------------------------
000065C4                            
000065C4                            ObjExplosion_Done:
000065C4 4A28 0025                  	tst.b	oExplodeBadnik(a0)			; Was this explosion from a badnik?
000065C8 6700                       	beq.s	.MakeFlower				; If so, branch
000065CA 4EF8 40BE                  	jmp	DeleteObject				; If not, just delete ourselves
000065CE                            
000065CE                            .MakeFlower:
000065CE 10BC 001F                  	move.b	#$1F,oID(a0)				; Change into a flower object
000065D2 117C 0000 0024             	move.b	#0,oRoutine(a0)
000065D8 4E75                       	rts
000065DA                            
000065DA                            ; -------------------------------------------------------------------------------
000065DA                            ; Flower object
000065DA                            ; -------------------------------------------------------------------------------
000065DA                            
000065DA =00000029                  oFlowerLoPrio		EQU	oSubtype2		; Low priority sprite flag
000065DA                            
000065DA                            ; -------------------------------------------------------------------------------
000065DA                            
000065DA                            ObjFlower:
000065DA 7000                       	moveq	#0,d0					; Run object routine
000065DC 1028 0024                  	move.b	oRoutine(a0),d0
000065E0 303B 0000                  	move.w	.Index(pc,d0.w),d0
000065E4 4EBB 0000                  	jsr	.Index(pc,d0.w)
000065E8                            
000065E8 4EF8 4012                  	jmp	DrawObject				; Draw sprite
000065EC                            
000065EC                            ; -------------------------------------------------------------------------------
000065EC                            
000065EC                            .Index:
000065EC 0000                       	dc.w	ObjFlower_Init-.Index			; Initialization
000065EE 0000                       	dc.w	ObjFlower_Seed-.Index			; Seed
000065F0 0000                       	dc.w	ObjFlower_Animate-.Index		; Animation
000065F2 0000                       	dc.w	ObjFlower_Growing-.Index		; Growth
000065F4 0000                       	dc.w	ObjFlower_Done-.Index			; Finish
000065F6                            
000065F6                            ; -------------------------------------------------------------------------------
000065F6                            ; Flower initialization routine
000065F6                            ; -------------------------------------------------------------------------------
000065F6                            
000065F6                            ObjFlower_Init:
000065F6 0028 0004 0001             	ori.b	#4,oRender(a0)				; Set render flags
000065FC 117C 0001 0018             	move.b	#1,oPriority(a0)			; Set priority
00006602 117C 0000 0016             	move.b	#0,oYRadius(a0)				; Set Y radius
00006608 317C A6D7 0002             	move.w	#$A6D7,oTile(a0)			; Set base tile
0000660E 4A28 0029                  	tst.b	oFlowerLoPrio(a0)			; Should our sprite be low priority?
00006612 6700                       	beq.s	.GotPriority				; If not, branch
00006614 0228 007F 0002             	andi.b	#$7F,oTile(a0)				; Clear tile priority bit
0000661A                            
0000661A                            .GotPriority:
0000661A 217C 0000 0000 0004        	move.l	#MapSpr_Flower,oMap(a0)			; Set mappings
00006622                            
00006622 4A28 0028                  	tst.b	oSubtype(a0)				; Should we be able to respawn?
00006626 6600                       	bne.s	.NoRespawn				; If not, branch
00006628                            
00006628 6100 0000                  	bsr.w	ObjFlower_GetRespawnAddr		; Get respawn flags
0000662C 1011                       	move.b	(a1),d0
0000662E 117C 0004 0024             	move.b	#4,oRoutine(a0)				; Set routine to animate
00006634 117C 0003 001C             	move.b	#3,oAnim(a0)				; Set animation to flower animation
0000663A 0800 0006                  	btst	#6,d0					; Have we already spawned?
0000663E 6600                       	bne.s	ObjFlower_Animate			; If so, branch
00006640                            
00006640                            .NoRespawn:
00006640 317C 0002 001C             	move.w	#2,oAnim(a0)				; Set animation to seed animation (and have it reset)
00006646 117C 0002 0024             	move.b	#2,oRoutine(a0)				; Set routine to seed
0000664C 317C 06D7 0002             	move.w	#$6D7,oTile(a0)				; Set base tile to use palette line 0
00006652                            
00006652                            ; -------------------------------------------------------------------------------
00006652                            ; Flower seed routine
00006652                            ; -------------------------------------------------------------------------------
00006652                            
00006652                            ObjFlower_Seed:
00006652 4EB9 0000 0000             	jsr	CheckFloorEdge				; Have we touched the floor yet?
00006658 4A41                       	tst.w	d1
0000665A 6A00                       	bpl.s	.Fall					; If not, branch
0000665C D368 000C                  	add.w	d1,oY(a0)				; Align to the floor
00006660                            
00006660 4A28 0028                  	tst.b	oSubtype(a0)				; Should we be able to respawn?
00006664 6600                       	bne.s	.TouchDown				; If not, branch
00006666                            
00006666 6100 0000                  	bsr.w	ObjFlower_GetRespawnAddr		; Get flower index and increment flower count in this time zone
0000666A 45F9 00FF 1900             	lea	(v_flower_count).l,a2
00006670 1032 1000                  	move.b	(a2,d1.w),d0
00006674 5232 1000                  	addq.b	#1,(a2,d1.w)
00006678                            
00006678 6100 0000                  	bsr.w	ObjFlower_GetPosBuffer			; Mark our position
0000667C 33A8 0008 0000             	move.w	oX(a0),(a1,d0.w)
00006682 33A8 000C 0002             	move.w	oY(a0),2(a1,d0.w)
00006688                            
00006688                            .TouchDown:
00006688 117C 0004 0024             	move.b	#4,oRoutine(a0)				; Set routine to animate
0000668E 117C 0001 001C             	move.b	#1,oAnim(a0)				; Set animation to seed planted animation
00006694 117C 0030 0016             	move.b	#$30,oYRadius(a0)			; Set Y radius
0000669A 6000 0000                  	bra.w	ObjFlower_Animate			; Continue to animate sprite
0000669E                            
0000669E                            .Fall:
0000669E 5468 000C                  	addq.w	#2,oY(a0)				; Fall down slowly
000066A2                            
000066A2                            ; -------------------------------------------------------------------------------
000066A2                            ; Flower animation routine
000066A2                            ; -------------------------------------------------------------------------------
000066A2                            
000066A2                            ObjFlower_Animate:
000066A2 43F9 0000 0000             	lea	(Ani_Flower).l,a1			; Animate sprite
000066A8 6000 FB4A                  	bra.w	AnimateObject
000066AC                            
000066AC                            ; -------------------------------------------------------------------------------
000066AC                            ; Get a flower object's respawn table entry
000066AC                            ; -------------------------------------------------------------------------------
000066AC                            ; RETURNS:
000066AC                            ;	d1.w	- Offset in table
000066AC                            ;	a1.l	- Address of table entry
000066AC                            ; -------------------------------------------------------------------------------
000066AC                            
000066AC                            ObjFlower_GetRespawnAddr:
000066AC 7000                       	moveq	#0,d0					; Get base respawn table entry offset
000066AE 1028 0023                  	move.b	oRespawn(a0),d0
000066B2 3200                       	move.w	d0,d1
000066B4 D241                       	add.w	d1,d1
000066B6 D041                       	add.w	d1,d0
000066B8                            
000066B8 7200                       	moveq	#0,d1					; Add time zone to the offset
000066BA 1239 00FF 152E             	move.b	(v_time_zone).l,d1
000066C0 0881 0007                  	bclr	#7,d1
000066C4 D041                       	add.w	d1,d0
000066C6                            
000066C6 43F9 00FF 1200             	lea	(v_obj_respawns).l,a1			; Get respawn table entry address
000066CC 43F1 0002                  	lea	2(a1,d0.w),a1
000066D0 4E75                       	rts
000066D2                            
000066D2                            ; -------------------------------------------------------------------------------
000066D2                            ; Get a flower object's respawn table entry
000066D2                            ; -------------------------------------------------------------------------------
000066D2                            ; PARAMETERS:
000066D2                            ;	d0.w	- Flower index
000066D2                            ; RETURNS:
000066D2                            ;	a1.l	- Flower position table address
000066D2                            ; -------------------------------------------------------------------------------
000066D2                            
000066D2                            ObjFlower_GetPosBuffer:
000066D2 0240 003F                  	andi.w	#$3F,d0					; Get flower position table offset
000066D6 D040                       	add.w	d0,d0
000066D8 D040                       	add.w	d0,d0
000066DA                            
000066DA 7200                       	moveq	#0,d1					; Add time zone to the offset
000066DC 1239 00FF 152E             	move.b	(v_time_zone).l,d1
000066E2 0881 0007                  	bclr	#7,d1
000066E6 E149                       	lsl.w	#8,d1
000066E8 D041                       	add.w	d1,d0
000066EA                            
000066EA 43F9 00FF 1600             	lea	(v_flower_pos_buffer).l,a1		; Get flower position table address
000066F0 4E75                       	rts
000066F2                            
000066F2                            ; -------------------------------------------------------------------------------
000066F2                            ; Flower growth routine
000066F2                            ; -------------------------------------------------------------------------------
000066F2                            
000066F2                            ObjFlower_Growing:
000066F2 317C 26D7 0002             	move.w	#$26D7,oTile(a0)			; Set base tile to use palette line 1
000066F8 117C 0002 001C             	move.b	#2,oAnim(a0)				; Set animation to growing animation
000066FE 60A2                       	bra.s	ObjFlower_Animate			; Continue to animate sprite
00006700                            
00006700                            ; -------------------------------------------------------------------------------
00006700                            ; Flower finished routine
00006700                            ; -------------------------------------------------------------------------------
00006700                            
00006700                            ObjFlower_Done:
00006700 117C 0003 001C             	move.b	#3,oAnim(a0)				; Set animation to flower animation
00006706 117C 0004 0024             	move.b	#4,oRoutine(a0)				; Set routine to animation
0000670C 6094                       	bra.s	ObjFlower_Animate			; Continue to animate sprite
0000670E                            
0000670E                            ; -------------------------------------------------------------------------------
0000670E                            ; Splash object that appears when the player goes past a waterfall in
0000670E                            ; a spin tunnel
0000670E                            ; -------------------------------------------------------------------------------
0000670E                            
0000670E                            ObjWaterfallSplash:
0000670E 7000                       	moveq	#0,d0					; Run object routine
00006710 1028 0024                  	move.b	oRoutine(a0),d0
00006714 303B 0000                  	move.w	.Index(pc,d0.w),d0
00006718 4EFB 0000                  	jmp	.Index(pc,d0.w)
0000671C                            
0000671C                            ; -------------------------------------------------------------------------------
0000671C                            
0000671C                            .Index:
0000671C 0000                       	dc.w	ObjWaterfallSplash_Init-.Index		; Initialization
0000671E 0000                       	dc.w	ObjWaterfallSplash_Main-.Index		; Main
00006720 0000                       	dc.w	ObjWaterfallSplash_Destroy-.Index	; Destruction
00006722                            
00006722                            ; -------------------------------------------------------------------------------
00006722                            ; Waterfall splash object initialization routine
00006722                            ; -------------------------------------------------------------------------------
00006722                            
00006722                            ObjWaterfallSplash_Init:
00006722 5428 0024                  	addq.b	#2,oRoutine(a0)				; Advance routine
00006726                            
00006726 0028 0004 0001             	ori.b	#4,oRender(a0)
0000672C 217C 0000 0000 0004        	move.l	#MapSpr_WaterfallSplash,oMap(a0)
00006734 317C 03E4 0002             	move.w	#$3E4,oTile(a0)
0000673A 4A39 00FF 152E             	tst.b	(v_time_zone).l
00006740 6600                       	bne.s	.NotPast
00006742 317C 039E 0002             	move.w	#$39E,oTile(a0)
00006748                            
00006748                            .NotPast:
00006748 117C 0001 0018             	move.b	#1,oPriority(a0)
0000674E                            
0000674E                            ; -------------------------------------------------------------------------------
0000674E                            ; Main waterfall splash object routine
0000674E                            ; -------------------------------------------------------------------------------
0000674E                            
0000674E                            ObjWaterfallSplash_Main:
0000674E 43F9 0000 0000             	lea	(Ani_WaterfallSplash).l,a1		; Animate sprite
00006754 6100 FA9E                  	bsr.w	AnimateObject
00006758 4EF8 4012                  	jmp	DrawObject				; Draw sprite
0000675C                            
0000675C                            ; -------------------------------------------------------------------------------
0000675C                            ; Waterfall splash object destruction routine
0000675C                            ; -------------------------------------------------------------------------------
0000675C                            
0000675C                            ObjWaterfallSplash_Destroy:
0000675C 4EF8 40BE                  	jmp	DeleteObject				; Delete ourselves
00006760                            
00006760                            ; -------------------------------------------------------------------------------
00006760                            
00006760                            ObjFlapDoorH:
00006760 7000                       	moveq	#0,d0
00006762 1028 0024                  	move.b	oRoutine(a0),d0
00006766 303B 0000                  	move.w	ObjFlapDoorH_Index(pc,d0.w),d0
0000676A 4EBB 0000                  	jsr	ObjFlapDoorH_Index(pc,d0.w)
0000676E 4EB8 4012                  	jsr	DrawObject
00006772 4EF9 0000 0000             	jmp	CheckObjDespawnTime
00006778                            ; End of function ObjFlapDoorH
00006778                            
00006778                            ; -------------------------------------------------------------------------------
00006778 0000                       ObjFlapDoorH_Index:dc.w	ObjFlapDoorH_Init-ObjFlapDoorH_Index
0000677A 0000                       	dc.w	ObjFlapDoorH_Main-ObjFlapDoorH_Index
0000677C 0000                       	dc.w	ObjFlapDoorH_Animate-ObjFlapDoorH_Index
0000677E 0000                       	dc.w	ObjFlapDoorH_Reset-ObjFlapDoorH_Index
00006780                            ; -------------------------------------------------------------------------------
00006780                            
00006780                            ObjFlapDoorH_ChkPlayer:
00006780 4A69 0012                  	tst.w	oYVel(a1)
00006784 6A00                       	bpl.s	.Solid
00006786 6100 0000                  	bsr.w	ObjFlapDoorH_ChkCollision
0000678A 6700                       	beq.s	.Solid
0000678C 117C 0004 0024             	move.b	#4,oRoutine(a0)
00006792 4A28 0028                  	tst.b	oSubtype(a0)
00006796 6600                       	bne.s	.End
00006798 4EB9 0000 0000             	jsr	FindObjSlot
0000679E 6600                       	bne.s	.End
000067A0 12BC 000B                  	move.b	#$B,oID(a1)
000067A4 3368 0008 0008             	move.w	oX(a0),oX(a1)
000067AA 3368 000C 000C             	move.w	oY(a0),oY(a1)
000067B0 5969 000C                  	subq.w	#4,oY(a1)
000067B4 303C 00BB                  	move.w	#$BB,d0
000067B8 4EF8 2708                  	jmp	PlayFMSound
000067BC                            
000067BC                            ; -------------------------------------------------------------------------------
000067BC                            
000067BC                            .End:
000067BC 4E75                       	rts
000067BE                            
000067BE                            ; -------------------------------------------------------------------------------
000067BE                            
000067BE                            .Solid:
000067BE 3628 0008                  	move.w	oX(a0),d3
000067C2 3828 000C                  	move.w	oY(a0),d4
000067C6 4EF9 0000 0000             	jmp	SolidObject1
000067CC                            ; End of function ObjFlapDoorH_ChkPlayer
000067CC                            
000067CC                            ; -------------------------------------------------------------------------------
000067CC                            
000067CC                            ObjFlapDoorH_Init:
000067CC 5428 0024                  	addq.b	#2,oRoutine(a0)
000067D0 217C 0000 0000 0004        	move.l	#MapSpr_FlapDoorH,oMap(a0)
000067D8 117C 0001 0018             	move.b	#1,oPriority(a0)
000067DE 0028 0004 0001             	ori.b	#4,oRender(a0)
000067E4 117C 002C 0019             	move.b	#$2C,oWidth(a0)
000067EA 0C28 0002 0028             	cmpi.b	#2,oSubtype(a0)
000067F0 6600                       	bne.s	.NotNarrow
000067F2 117C 0018 0019             	move.b	#$18,oWidth(a0)
000067F8                            
000067F8                            .NotNarrow:
000067F8 117C 0008 0016             	move.b	#8,oYRadius(a0)
000067FE 700C                       	moveq	#$C,d0
00006800 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
00006806                            ; End of function ObjFlapDoorH_Init
00006806                            
00006806                            ; -------------------------------------------------------------------------------
00006806                            
00006806                            ObjFlapDoorH_Main:
00006806 43F8 D000                  	lea	(v_player).w,a1
0000680A 6100 FF74                  	bsr.w	ObjFlapDoorH_ChkPlayer
0000680E 43F8 D040                  	lea	(v_player2).w,a1
00006812 6000 FF6C                  	bra.w	ObjFlapDoorH_ChkPlayer
00006816                            ; End of function ObjFlapDoorH_Main
00006816                            
00006816                            ; -------------------------------------------------------------------------------
00006816                            
00006816                            ObjFlapDoorH_Animate:
00006816 43F9 0000 0000             	lea	(Ani_FlapDoorH).l,a1
0000681C 6000 F9D6                  	bra.w	AnimateObject
00006820                            ; End of function ObjFlapDoorH_Animate
00006820                            
00006820                            ; -------------------------------------------------------------------------------
00006820                            
00006820                            ObjFlapDoorH_Reset:
00006820 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
00006826 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000682C 5928 0024                  	subq.b	#4,oRoutine(a0)
00006830 4E75                       	rts
00006832                            ; End of function ObjFlapDoorH_Reset
00006832                            
00006832                            ; -------------------------------------------------------------------------------
00006832                            
00006832                            ObjUnkC:
00006832                            
00006832                            ; -------------------------------------------------------------------------------
00006832                            
00006832                            ObjFlapDoorH_ChkCollision:
00006832 3029 0008                  	move.w	oX(a1),d0
00006836 9068 0008                  	sub.w	oX(a0),d0
0000683A 7200                       	moveq	#0,d1
0000683C 1228 0019                  	move.b	oWidth(a0),d1
00006840 D041                       	add.w	d1,d0
00006842 6B00                       	bmi.s	.NoCollision
00006844 D241                       	add.w	d1,d1
00006846 B041                       	cmp.w	d1,d0
00006848 6400                       	bcc.s	.NoCollision
0000684A 3029 000C                  	move.w	oY(a1),d0
0000684E 9068 000C                  	sub.w	oY(a0),d0
00006852 7200                       	moveq	#0,d1
00006854 1228 0016                  	move.b	oYRadius(a0),d1
00006858 D041                       	add.w	d1,d0
0000685A 6B00                       	bmi.s	.NoCollision
0000685C D241                       	add.w	d1,d1
0000685E B041                       	cmp.w	d1,d0
00006860 6400                       	bcc.s	.NoCollision
00006862 7001                       	moveq	#1,d0
00006864 4E75                       	rts
00006866                            
00006866                            ; -------------------------------------------------------------------------------
00006866                            
00006866                            .NoCollision:
00006866 7000                       	moveq	#0,d0
00006868 4E75                       	rts
0000686A                            ; End of function ObjFlapDoorH_ChkCollision
0000686A                            
0000686A                            ; -------------------------------------------------------------------------------
0000686A                            
0000686A                            ObjWaterSplash:
0000686A 7000                       	moveq	#0,d0
0000686C 1028 0024                  	move.b	oRoutine(a0),d0
00006870 303B 0000                  	move.w	ObjWaterSplash_Index(pc,d0.w),d0
00006874 4EFB 0000                  	jmp	ObjWaterSplash_Index(pc,d0.w)
00006878                            ; End of function ObjWaterSplash
00006878                            
00006878                            ; -------------------------------------------------------------------------------
00006878 0000                       ObjWaterSplash_Index:dc.w	ObjWaterSplash_Init-ObjWaterSplash_Index
0000687A 0000                       	dc.w	ObjWaterSplash_Main-ObjWaterSplash_Index
0000687C 0000                       	dc.w	ObjWaterSplash_Destroy-ObjWaterSplash_Index
0000687E                            ; -------------------------------------------------------------------------------
0000687E                            
0000687E                            ObjWaterSplash_Init:
0000687E 5428 0024                  	addq.b	#2,oRoutine(a0)
00006882 117C 0004 0001             	move.b	#4,oRender(a0)
00006888 117C 0001 0018             	move.b	#1,oPriority(a0)
0000688E 217C 0000 0000 0004        	move.l	#MapSpr_WaterSplash,oMap(a0)
00006896 1168 0028 001C             	move.b	oSubtype(a0),oAnim(a0)
0000689C 700D                       	moveq	#$D,d0
0000689E 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
000068A4 303C 00A2                  	move.w	#$A2,d0
000068A8 0C28 0002 0028             	cmpi.b	#2,oSubtype(a0)
000068AE 6500                       	bcs.s	.PlaySound
000068B0 303C 00AA                  	move.w	#$AA,d0
000068B4                            
000068B4                            .PlaySound:
000068B4 4EB8 2708                  	jsr	PlayFMSound
000068B8                            ; End of function ObjWaterSplash_Init
000068B8                            
000068B8                            ; -------------------------------------------------------------------------------
000068B8                            
000068B8                            ObjWaterSplash_Main:
000068B8 43F9 0000 0000             	lea	(Ani_WaterSplash).l,a1
000068BE 6100 F934                  	bsr.w	AnimateObject
000068C2 4EF8 4012                  	jmp	DrawObject
000068C6                            ; End of function ObjWaterSplash_Main
000068C6                            
000068C6                            ; -------------------------------------------------------------------------------
000068C6                            
000068C6                            ObjWaterSplash_Destroy:
000068C6 4EF8 40BE                  	jmp	DeleteObject
000068CA                            ; End of function ObjWaterSplash_Destroy
000068CA                            
000068CA                            ; -------------------------------------------------------------------------------
000068CA                            
000068CA                            ObjPowerup:
000068CA 7000                       	moveq	#0,d0
000068CC 1028 0024                  	move.b	oRoutine(a0),d0
000068D0 323B 0000                  	move.w	ObjPowerup_Index(pc,d0.w),d1
000068D4 4EFB 1000                  	jmp	ObjPowerup_Index(pc,d1.w)
000068D8                            ; End of function ObjPowerup
000068D8                            
000068D8                            ; -------------------------------------------------------------------------------
000068D8 0000                       ObjPowerup_Index:dc.w	ObjPowerup_Init-ObjPowerup_Index
000068DA 0000                       	dc.w	ObjPowerup_Shield-ObjPowerup_Index
000068DC 0000                       	dc.w	ObjPowerup_InvStars-ObjPowerup_Index
000068DE 0000                       	dc.w	ObjPowerup_TimeStars-ObjPowerup_Index
000068E0                            ; -------------------------------------------------------------------------------
000068E0                            
000068E0                            ObjPowerup_Init:
000068E0 5428 0024                  	addq.b	#2,oRoutine(a0)
000068E4 217C 0000 0000 0004        	move.l	#MapSpr_Powerup,oMap(a0)
000068EC 117C 0004 0001             	move.b	#4,oRender(a0)
000068F2 117C 0001 0018             	move.b	#1,oPriority(a0)
000068F8 117C 0010 0019             	move.b	#$10,oWidth(a0)
000068FE 317C 0544 0002             	move.w	#$544,oTile(a0)
00006904 4A28 001C                  	tst.b	oAnim(a0)
00006908 6700                       	beq.s	.End
0000690A 5428 0024                  	addq.b	#2,oRoutine(a0)
0000690E 0C28 0005 001C             	cmpi.b	#5,oAnim(a0)
00006914 6500                       	bcs.s	.End
00006916 5428 0024                  	addq.b	#2,oRoutine(a0)
0000691A                            
0000691A                            .End:
0000691A 4E75                       	rts
0000691C                            ; End of function ObjPowerup_Init
0000691C                            
0000691C                            ; -------------------------------------------------------------------------------
0000691C                            
0000691C                            ObjPowerup_Shield:
0000691C                            
0000691C                            ; FUNCTION CHUNK AT 00206540 SIZE 0000002E BYTES
0000691C                            
0000691C 4A39 00FF 151E             	tst.b	(v_shield).l
00006922 6700                       	beq.s	.Delete
00006924 4A39 00FF 1521             	tst.b	(v_time_warp_on).l
0000692A 6600                       	bne.s	.End
0000692C 4A39 00FF 151F             	tst.b	(v_invincible).l
00006932 6600                       	bne.s	.End
00006934 3178 D008 0008             	move.w	(v_player+oX).w,oX(a0)
0000693A 3178 D00C 000C             	move.w	(v_player+oY).w,oY(a0)
00006940 1178 D022 0022             	move.b	(v_player+oStatus).w,oStatus(a0)
00006946 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
0000694E 6600                       	bne.s	.Animate
00006950 0028 0080 0002             	ori.b	#$80,2(a0)
00006956 4A39 00FF 1956             	tst.b	(v_display_low_plane).l
0000695C 6700                       	beq.s	.Animate
0000695E 0228 007F 0002             	andi.b	#$7F,2(a0)
00006964                            
00006964                            .Animate:
00006964 43F9 0000 0000             	lea	(Ani_Powerup).l,a1
0000696A 4EB8 61F4                  	jsr	AnimateObject
0000696E 6000 0000                  	bra.w	ObjPowerup_ChkSaveRout
00006972                            
00006972                            ; -------------------------------------------------------------------------------
00006972                            
00006972                            .End:
00006972 4E75                       	rts
00006974                            
00006974                            ; -------------------------------------------------------------------------------
00006974                            
00006974                            .Delete:
00006974 4EF8 40BE                  	jmp	DeleteObject
00006978                            ; End of function ObjPowerup_Shield
00006978                            
00006978                            ; -------------------------------------------------------------------------------
00006978                            
00006978                            ObjPowerup_InvStars:
00006978                            
00006978                            ; FUNCTION CHUNK AT 002064CE SIZE 00000072 BYTES
00006978                            
00006978 4A39 00FF 1521             	tst.b	(v_time_warp_on).l
0000697E 6700                       	beq.s	.NoTimeWarp
00006980 4E75                       	rts
00006982                            
00006982                            ; -------------------------------------------------------------------------------
00006982                            
00006982                            .NoTimeWarp:
00006982 4A39 00FF 151F             	tst.b	(v_invincible).l
00006988 6600                       	bne.s	ObjPowerup_ShowStars
0000698A 4EF8 40BE                  	jmp	DeleteObject
0000698E                            ; End of function ObjPowerup_InvStars
0000698E                            
0000698E                            ; -------------------------------------------------------------------------------
0000698E                            
0000698E                            ObjPowerup_TimeStars:
0000698E 4A39 00FF 1521             	tst.b	(v_time_warp_on).l
00006994 6600                       	bne.s	ObjPowerup_ShowStars
00006996 4EF8 40BE                  	jmp	DeleteObject
0000699A                            ; End of function ObjPowerup_TimeStars
0000699A                            
0000699A                            ; -------------------------------------------------------------------------------
0000699A                            ; START	OF FUNCTION CHUNK FOR ObjPowerup_InvStars
0000699A                            
0000699A                            ObjPowerup_ShowStars:
0000699A 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
000069A2 6600                       	bne.s	.GotPriority
000069A4 0028 0080 0002             	ori.b	#$80,oTile(a0)
000069AA 4A39 00FF 1956             	tst.b	(v_display_low_plane).l
000069B0 6700                       	beq.s	.GotPriority
000069B2 0228 007F 0002             	andi.b	#$7F,oTile(a0)
000069B8                            
000069B8                            .GotPriority:
000069B8 3038 F7A8                  	move.w	(v_sonic_record_index).w,d0
000069BC 1228 001C                  	move.b	oAnim(a0),d1
000069C0 5301                       	subq.b	#1,d1
000069C2 0C01 0004                  	cmpi.b	#4,d1
000069C6 6500                       	bcs.s	.GotDelta
000069C8 5901                       	subq.b	#4,d1
000069CA                            
000069CA                            .GotDelta:
000069CA E709                       	lsl.b	#3,d1
000069CC 1401                       	move.b	d1,d2
000069CE D201                       	add.b	d1,d1
000069D0 D202                       	add.b	d2,d1
000069D2 5801                       	addq.b	#4,d1
000069D4 9001                       	sub.b	d1,d0
000069D6 1228 0030                  	move.b	oVar30(a0),d1
000069DA 9001                       	sub.b	d1,d0
000069DC 5801                       	addq.b	#4,d1
000069DE 0C01 0018                  	cmpi.b	#$18,d1
000069E2 6500                       	bcs.s	.NoCap
000069E4 7200                       	moveq	#0,d1
000069E6                            
000069E6                            .NoCap:
000069E6 1141 0030                  	move.b	d1,oVar30(a0)
000069EA 43F8 CB00                  	lea	(v_sonic_record_buf).w,a1
000069EE 43F1 0000                  	lea	(a1,d0.w),a1
000069F2 3159 0008                  	move.w	(a1)+,oX(a0)
000069F6 3159 000C                  	move.w	(a1)+,oY(a0)
000069FA 1178 D022 0022             	move.b	(v_player+oStatus).w,oStatus(a0)
00006A00 43F9 0000 0000             	lea	(Ani_Powerup).l,a1
00006A06 4EB8 61F4                  	jsr	AnimateObject
00006A0A                            ; END OF FUNCTION CHUNK	FOR ObjPowerup_InvStars
00006A0A                            ; START	OF FUNCTION CHUNK FOR ObjPowerup_Shield
00006A0A                            
00006A0A                            ObjPowerup_ChkSaveRout:
00006A0A 1039 00FF 156B             	move.b	(v_load_shield_art).l,d0
00006A10 0200 000F                  	andi.b	#$F,d0
00006A14 0C00 0008                  	cmpi.b	#8,d0
00006A18 6500                       	bcs.s	.SaveRout
00006A1A 4E75                       	rts
00006A1C                            
00006A1C                            ; -------------------------------------------------------------------------------
00006A1C                            
00006A1C                            .SaveRout:
00006A1C B028 0024                  	cmp.b	oRoutine(a0),d0
00006A20 6700                       	beq.s	.Display
00006A22 13E8 0024 00FF 156B        	move.b	oRoutine(a0),(v_load_shield_art).l
00006A2A 08F9 0007 00FF 156B        	bset	#7,(v_load_shield_art).l
00006A32                            
00006A32                            .Display:
00006A32 4EF8 4012                  	jmp	DrawObject
00006A36                            ; END OF FUNCTION CHUNK	FOR ObjPowerup_Shield
00006A36                            ; -------------------------------------------------------------------------------
00006A36                            
00006A36                            LoadShieldArt:
00006A36 08B9 0007 00FF 156B        	bclr	#7,(v_load_shield_art).l
00006A3E 6700                       	beq.s	.End
00006A40 7000                       	moveq	#0,d0
00006A42 1039 00FF 156B             	move.b	(v_load_shield_art).l,d0
00006A48 5500                       	subq.b	#2,d0
00006A4A D040                       	add.w	d0,d0
00006A4C 227B 0000                  	movea.l	ShieldArtIndex(pc,d0.w),a1
00006A50 45F9 00FF 1980             	lea	(v_dma_buffer).l,a2
00006A56 303C 00FF                  	move.w	#$FF,d0
00006A5A                            
00006A5A                            .Loop:
00006A5A 24D9                       	move.l	(a1)+,(a2)+
00006A5C 51C8 FFFC                  	dbf	d0,.Loop
00006A60 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5
00006A66 2ABC 9402 9340             	move.l	#$94029340,(a5)
00006A6C 2ABC 968C 95C0             	move.l	#$968C95C0,(a5)
00006A72 3ABC 977F                  	move.w	#$977F,(a5)
00006A76 3ABC 6880                  	move.w	#$6880,(a5)
00006A7A 31FC 0082 F640             	move.w	#$82,(v_dma_cmd_cache).w
00006A80 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
00006A84                            
00006A84                            .End:
00006A84 4E75                       	rts
00006A86                            ; End of function LoadShieldArt
00006A86                            
00006A86                            ; -------------------------------------------------------------------------------
00006A86 0000 0000                  ShieldArtIndex:	dc.l	ArtUnc_Shield
00006A8A 0000 0000                  	dc.l	ArtUnc_InvStars
00006A8E 0000 0000                  	dc.l	ArtUnc_TimeStars
00006A92 0000 0000                  	dc.l	ArtUnc_GameOver
00006A96 0000 0000                  	dc.l	ArtUnc_TimeOver
00006A9A                            ; -------------------------------------------------------------------------------
00006A9A                            
00006A9A                            ObjForceSpin:
00006A9A 7000                       	moveq	#0,d0
00006A9C 1028 0024                  	move.b	oRoutine(a0),d0
00006AA0 303B 0000                  	move.w	ObjForceSpin_Index(pc,d0.w),d0
00006AA4 4EBB 0000                  	jsr	ObjForceSpin_Index(pc,d0.w)
00006AA8 4A39 00FF 1588             	tst.b	(v_debug_mode_enabled).l
00006AAE 6700                       	beq.s	.NoDisplay
00006AB0 4EB8 4012                  	jsr	DrawObject
00006AB4                            
00006AB4                            .NoDisplay:
00006AB4 4EF9 0000 0000             	jmp	CheckObjDespawnTime
00006ABA                            ; End of function ObjForceSpin
00006ABA                            
00006ABA                            ; -------------------------------------------------------------------------------
00006ABA 0000                       ObjForceSpin_Index:dc.w	ObjForceSpin_Init-ObjForceSpin_Index
00006ABC 0000                       	dc.w	ObjForceSpin_Main-ObjForceSpin_Index
00006ABE                            ; -------------------------------------------------------------------------------
00006ABE                            
00006ABE                            ObjForceSpin_Init:
00006ABE 5428 0024                  	addq.b	#2,oRoutine(a0)
00006AC2 0028 0004 0001             	ori.b	#4,oRender(a0)
00006AC8 317C 0544 0002             	move.w	#$544,oTile(a0)
00006ACE 217C 0000 0000 0004        	move.l	#MapSpr_Powerup,oMap(a0)
00006AD6 1168 0028 001A             	move.b	oSubtype(a0),oMapFrame(a0)
00006ADC 5228 001A                  	addq.b	#1,oMapFrame(a0)
00006AE0                            ; End of function ObjForceSpin_Init
00006AE0                            
00006AE0                            ; -------------------------------------------------------------------------------
00006AE0                            
00006AE0                            ObjForceSpin_Main:
00006AE0 43F8 D000                  	lea	(v_player).w,a1
00006AE4 0C29 002B 001C             	cmpi.b	#$2B,oAnim(a1)
00006AEA 6700 0000                  	beq.w	.End
00006AEE 0C29 0006 0024             	cmpi.b	#6,oRoutine(a1)
00006AF4 6400 0000                  	bcc.w	.End
00006AF8 6100 0000                  	bsr.w	ObjForceSpin_CheckInRange
00006AFC 6700 0000                  	beq.w	.End
00006B00 4A28 0028                  	tst.b	oSubtype(a0)
00006B04 6600                       	bne.s	.ChkSubtype1
00006B06 3029 0010                  	move.w	oXVel(a1),d0
00006B0A 6A00                       	bpl.s	.AbsVX
00006B0C 4440                       	neg.w	d0
00006B0E                            
00006B0E                            .AbsVX:
00006B0E 323C 0A00                  	move.w	#$A00,d1
00006B12 0C39 0005 00FF 1506        	cmpi.b	#5,(v_zone).l
00006B1A 6600                       	bne.s	.GotXCap
00006B1C 323C 0D00                  	move.w	#$D00,d1
00006B20                            
00006B20                            .GotXCap:
00006B20 B041                       	cmp.w	d1,d0
00006B22 6400                       	bcc.s	.CheckXSign
00006B24 3001                       	move.w	d1,d0
00006B26                            
00006B26                            .CheckXSign:
00006B26 4A69 0010                  	tst.w	oXVel(a1)
00006B2A 6A00                       	bpl.s	.GotSpeed
00006B2C 4440                       	neg.w	d0
00006B2E                            
00006B2E                            .GotSpeed:
00006B2E 3340 0010                  	move.w	d0,oXVel(a1)
00006B32 3340 0014                  	move.w	d0,oPlayerGVel(a1)
00006B36 1029 0026                  	move.b	oAngle(a1),d0
00006B3A 0600 0020                  	addi.b	#$20,d0
00006B3E 0200 00C0                  	andi.b	#$C0,d0
00006B42 0C00 0080                  	cmpi.b	#$80,d0
00006B46 6600                       	bne.s	.SetRoll
00006B48 4469 0014                  	neg.w	oPlayerGVel(a1)
00006B4C 6000                       	bra.s	.SetRoll
00006B4E                            
00006B4E                            ; -------------------------------------------------------------------------------
00006B4E                            
00006B4E                            .ChkSubtype1:
00006B4E 0C28 0002 0028             	cmpi.b	#2,oSubtype(a0)
00006B54 6400                       	bcc.s	.HighSubtype
00006B56                            
00006B56                            .Subtype1:
00006B56 3029 0012                  	move.w	oYVel(a1),d0
00006B5A 6A00                       	bpl.s	.AbsVY
00006B5C 4440                       	neg.w	d0
00006B5E                            
00006B5E                            .AbsVY:
00006B5E 0C40 0D00                  	cmpi.w	#$D00,d0
00006B62 6400                       	bcc.s	.GotYCap
00006B64 303C 0D00                  	move.w	#$D00,d0
00006B68                            
00006B68                            .GotYCap:
00006B68 4A69 0012                  	tst.w	oYVel(a1)
00006B6C 6A00                       	bpl.s	.CheckYSign
00006B6E 4440                       	neg.w	d0
00006B70                            
00006B70                            .CheckYSign:
00006B70 3340 0012                  	move.w	d0,oYVel(a1)
00006B74 3340 0014                  	move.w	d0,oPlayerGVel(a1)
00006B78 08E9 0001 0022             	bset	#1,oStatus(a1)
00006B7E                            
00006B7E                            .SetRoll:
00006B7E 08E9 0002 0022             	bset	#2,oStatus(a1)
00006B84 6600                       	bne.s	.End
00006B86 137C 000E 0016             	move.b	#$E,oYRadius(a1)
00006B8C 137C 0007 0017             	move.b	#7,oXRadius(a1)
00006B92 5A69 000C                  	addq.w	#5,oY(a1)
00006B96 137C 0002 001C             	move.b	#2,oAnim(a1)
00006B9C                            
00006B9C                            .End:
00006B9C 4E75                       	rts
00006B9E                            
00006B9E                            ; -------------------------------------------------------------------------------
00006B9E                            
00006B9E                            .HighSubtype:
00006B9E 1238 F604                  	move.b	(v_ctrl1_held).w,d1
00006BA2 0C28 0004 0028             	cmpi.b	#4,oSubtype(a0)
00006BA8 6700                       	beq.s	.Subtype4
00006BAA 0C28 0002 0028             	cmpi.b	#2,oSubtype(a0)
00006BB0 6600                       	bne.s	.Subtype3
00006BB2                            
00006BB2                            .Subtype2:
00006BB2 4A69 0012                  	tst.w	oYVel(a1)
00006BB6 6AC6                       	bpl.s	.SetRoll
00006BB8 6000                       	bra.s	.ChkLaunch
00006BBA                            
00006BBA                            ; -------------------------------------------------------------------------------
00006BBA                            
00006BBA                            .Subtype3:
00006BBA 4A69 0012                  	tst.w	oYVel(a1)
00006BBE 6BBE                       	bmi.s	.SetRoll
00006BC0                            
00006BC0                            .ChkLaunch:
00006BC0 303C 0D00                  	move.w	#$D00,d0
00006BC4 0801 0003                  	btst	#3,d1
00006BC8 6600                       	bne.s	.GotLaunch
00006BCA 0801 0002                  	btst	#2,d1
00006BCE 67AE                       	beq.s	.SetRoll
00006BD0 4440                       	neg.w	d0
00006BD2                            
00006BD2                            .GotLaunch:
00006BD2 0C28 0002 0028             	cmpi.b	#2,oSubtype(a0)
00006BD8 6700                       	beq.s	.SkipAir
00006BDA 08E9 0001 0022             	bset	#1,oStatus(a1)
00006BE0                            
00006BE0                            .SkipAir:
00006BE0 3340 0010                  	move.w	d0,oXVel(a1)
00006BE4 3340 0014                  	move.w	d0,oPlayerGVel(a1)
00006BE8 6094                       	bra.s	.SetRoll
00006BEA                            
00006BEA                            ; -------------------------------------------------------------------------------
00006BEA                            
00006BEA                            .Subtype4:
00006BEA 4A69 0010                  	tst.w	oXVel(a1)
00006BEE 6B8E                       	bmi.s	.SetRoll
00006BF0 0801 0000                  	btst	#0,d1
00006BF4 6700 FF88                  	beq.w	.SetRoll
00006BF8 303C F600                  	move.w	#-$A00,d0
00006BFC 6000 FF72                  	bra.w	.CheckYSign
00006C00                            ; End of function ObjForceSpin_Main
00006C00                            
00006C00                            ; -------------------------------------------------------------------------------
00006C00                            
00006C00                            ObjForceSpin_CheckInRange:
00006C00 4A39 00FF 1906             	tst.b	(v_debug_mode).l
00006C06 6600                       	bne.s	.NotInRange
00006C08 3029 0008                  	move.w	oX(a1),d0
00006C0C 9068 0008                  	sub.w	oX(a0),d0
00006C10 0640 0028                  	addi.w	#$28,d0
00006C14 6B00                       	bmi.s	.NotInRange
00006C16 0C40 0050                  	cmpi.w	#$50,d0
00006C1A 6400                       	bcc.s	.NotInRange
00006C1C 3029 000C                  	move.w	oY(a1),d0
00006C20 9068 000C                  	sub.w	oY(a0),d0
00006C24 0640 0028                  	addi.w	#$28,d0
00006C28 6B00                       	bmi.s	.NotInRange
00006C2A 0C40 0050                  	cmpi.w	#$50,d0
00006C2E 6400                       	bcc.s	.NotInRange
00006C30 7001                       	moveq	#1,d0
00006C32 4E75                       	rts
00006C34                            
00006C34                            ; -------------------------------------------------------------------------------
00006C34                            
00006C34                            .NotInRange:
00006C34 7000                       	moveq	#0,d0
00006C36 4E75                       	rts
00006C38                            ; End of function ObjForceSpin_CheckInRange
00006C38                            
00006C38                            ; -------------------------------------------------------------------------------
00006C38                            
00006C38                            ObjSonic_Null:
00006C38 4E75                       	rts
00006C3A                            ; End of function ObjSonic_Null
00006C3A                            
00006C3A                            ; -------------------------------------------------------------------------------
00006C3A                            ; START	OF FUNCTION CHUNK FOR ObjCheckpoint_LoadData
00006C3A                            
00006C3A                            TimeTravel_LoadData:
00006C3A 4AFC                           illegal
00006C3C 3D79 00FF 1548 0008        	move.w	(v_travel_x).l,oX(a6)
00006C44 3D79 00FF 154A 000C        	move.w	(v_travel_y).l,oY(a6)
00006C4C 1D79 00FF 154C 0022        	move.b	(v_travel_status).l,oStatus(a6)
00006C54 3D79 00FF 1564 0014        	move.w	(v_travel_gvel).l,oPlayerGVel(a6)
00006C5C 3D79 00FF 1566 0010        	move.w	(v_travel_xvel).l,oXVel(a6)
00006C64 3D79 00FF 1568 0012        	move.w	(v_travel_yvel).l,oYVel(a6)
00006C6C 33F9 00FF 1528 00FF 1512   	move.w	(v_travel_ring_count).l,(v_ring_count).l
00006C76 13F9 00FF 1545 00FF 150D   	move.b	(v_travel_1up_flags).l,(v_1up_flags).l
00006C80 23F9 00FF 1570 00FF 1514   	move.l	(v_travel_time).l,(v_time).l
00006C8A 11F9 00FF 1562 F64D        	move.b	(v_travel_water_rout).l,(v_water_routine).w
00006C92 31F9 00FF 154E F72E        	move.w	(v_travel_btm_bound).l,(v_bottom_bound).w
00006C9A 31F9 00FF 154E F726        	move.w	(v_travel_btm_bound).l,(v_dest_btm_bound).w
00006CA2 31F9 00FF 1550 F700        	move.w	(v_travel_cam_fg_x).l,(v_cam_fg_x).w
00006CAA 31F9 00FF 1552 F704        	move.w	(v_travel_cam_fg_y).l,(v_cam_fg_y).w
00006CB2 31F9 00FF 1554 F708        	move.w	(v_travel_cam_bg_x).l,(v_cam_bg_x).w
00006CBA 31F9 00FF 1556 F70C        	move.w	(v_travel_cam_bg_y).l,(v_cam_bg_y).w
00006CC2 31F9 00FF 1558 F710        	move.w	(v_travel_cam_bg2_x).l,(v_cam_bg2_x).w
00006CCA 31F9 00FF 155A F714        	move.w	(v_travel_cam_bg2_y).l,(v_cam_bg2_y).w
00006CD2 31F9 00FF 155C F718        	move.w	(v_travel_cam_bg3_x).l,(v_cam_bg3_x).w
00006CDA 31F9 00FF 155E F71C        	move.w	(v_travel_cam_bg3_y).l,(v_cam_bg3_y).w
00006CE2 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
00006CEA 6600                       	bne.s	.NoMini2
00006CEC 13F9 00FF 1593 00FF 195B   	move.b	(v_travel_mini_sonic).l,(v_mini_sonic).l
00006CF6                            
00006CF6                            .NoMini2:
00006CF6 4A39 00FF 1522             	tst.b	(v_reset_lvl_flags).l
00006CFC 6A00                       	bpl.s	.End2
00006CFE 3039 00FF 1548             	move.w	(v_travel_x).l,d0
00006D04 0440 00A0                  	subi.w	#320/2,d0
00006D08 31C0 F728                  	move.w	d0,(v_left_bound).w
00006D0C                            
00006D0C                            .End2:
00006D0C 4E75                       	rts
00006D0E                            ; END OF FUNCTION CHUNK	FOR ObjCheckpoint_LoadData
00006D0E                            ; -------------------------------------------------------------------------------
00006D0E                            
00006D0E                            ObjCheckpoint_LoadData:
00006D0E                            
00006D0E                            ; FUNCTION CHUNK AT 00206774 SIZE 000000D2 BYTES
00006D0E                            
00006D0E 4DF8 D000                  	lea	(v_player).w,a6
00006D12 0C39 0002 00FF 1522        	cmpi.b	#2,(v_reset_lvl_flags).l
00006D1A 6700 FF1E                  	beq.w	TimeTravel_LoadData
00006D1E 13F9 00FF 1523 00FF 1522   	move.b	(v_saved_reset_lvl_flags).l,(v_reset_lvl_flags).l
00006D28 3D79 00FF 1524 0008        	move.w	(v_saved_x).l,oX(a6)
00006D30 3D79 00FF 1526 000C        	move.w	(v_saved_y).l,oY(a6)
00006D38 4279 00FF 1512             	clr.w	(v_ring_count).l
00006D3E 4239 00FF 150D             	clr.b	(v_1up_flags).l
00006D44 23F9 00FF 152A 00FF 1514   	move.l	(v_saved_time).l,(v_time).l
00006D4E 13FC 003B 00FF 1517        	move.b	#59,(v_time+3).l
00006D56 5339 00FF 1516             	subq.b	#1,(v_time+2).l
00006D5C 11F9 00FF 1543 F64D        	move.b	(v_saved_water_rout).l,(v_water_routine).w
00006D64 31F9 00FF 1530 F72E        	move.w	(v_saved_btm_bound).l,(v_bottom_bound).w
00006D6C 31F9 00FF 1530 F726        	move.w	(v_saved_btm_bound).l,(v_dest_btm_bound).w
00006D74 31F9 00FF 1532 F700        	move.w	(v_saved_cam_fg_x).l,(v_cam_fg_x).w
00006D7C 31F9 00FF 1534 F704        	move.w	(v_saved_cam_fg_y).l,(v_cam_fg_y).w
00006D84 31F9 00FF 1536 F708        	move.w	(v_saved_cam_bg_x).l,(v_cam_bg_x).w
00006D8C 31F9 00FF 1538 F70C        	move.w	(v_saved_cam_bg_y).l,(v_cam_bg_y).w
00006D94 31F9 00FF 153A F710        	move.w	(v_saved_cam_bg2_x).l,(v_cam_bg2_x).w
00006D9C 31F9 00FF 153C F714        	move.w	(v_saved_cam_bg2_y).l,(v_cam_bg2_y).w
00006DA4 31F9 00FF 153E F718        	move.w	(v_saved_cam_bg3_x).l,(v_cam_bg3_x).w
00006DAC 31F9 00FF 1540 F71C        	move.w	(v_saved_cam_bg3_y).l,(v_cam_bg3_y).w
00006DB4 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
00006DBC 6600                       	bne.s	.NoMini
00006DBE 13F9 00FF 1591 00FF 195B   	move.b	(v_saved_mini_sonic).l,(v_mini_sonic).l
00006DC8                            
00006DC8                            .NoMini:
00006DC8 0C39 0002 00FF 1506        	cmpi.b	#2,(v_zone).l
00006DD0 6600                       	bne.s	.NoWater
00006DD2 31F9 00FF 1542 F648        	move.w	(v_saved_water_height2).l,(v_water_height2).w
00006DDA 11F9 00FF 1543 F64D        	move.b	(v_saved_water_rout).l,(v_water_routine).w
00006DE2 11F9 00FF 1544 F64E        	move.b	(v_saved_water_full).l,(v_water_full).w
00006DEA                            
00006DEA                            .NoWater:
00006DEA 4A39 00FF 1522             	tst.b	(v_reset_lvl_flags).l
00006DF0 6A00                       	bpl.s	.End
00006DF2 3039 00FF 1524             	move.w	(v_saved_x).l,d0
00006DF8 0440 00A0                  	subi.w	#320/2,d0
00006DFC 31C0 F728                  	move.w	d0,(v_left_bound).w
00006E00                            
00006E00                            .End:
00006E00 4E75                       	rts
00006E02                            ; End of function ObjCheckpoint_LoadData
00006E02                            
00006E02                            ; -------------------------------------------------------------------------------
00006E02                            ; Calculate the amount of room in front of the player
00006E02                            ; -------------------------------------------------------------------------------
00006E02                            ; PARAMETERS:
00006E02                            ;	a0.l	- Player object RAM
00006E02                            ; -------------------------------------------------------------------------------
00006E02                            
00006E02                            Player_CalcRoomInFront:
00006E02 2628 0008                  	move.l	oX(a0),d3
00006E06 2428 000C                  	move.l	oY(a0),d2
00006E0A 3228 0010                  	move.w	oXVel(a0),d1
00006E0E 48C1                       	ext.l	d1
00006E10 E181                       	asl.l	#8,d1
00006E12 D681                       	add.l	d1,d3
00006E14 3228 0012                  	move.w	oYVel(a0),d1
00006E18 48C1                       	ext.l	d1
00006E1A E181                       	asl.l	#8,d1
00006E1C D481                       	add.l	d1,d2
00006E1E 4842                       	swap	d2
00006E20 4843                       	swap	d3
00006E22 11C0 F768                  	move.b	d0,(v_primary_angle).w
00006E26 11C0 F76A                  	move.b	d0,(v_secondary_angle).w
00006E2A 1200                       	move.b	d0,d1
00006E2C 0600 0020                  	addi.b	#$20,d0
00006E30 6A00                       	bpl.s	.HighAngle
00006E32 1001                       	move.b	d1,d0
00006E34 6A00                       	bpl.s	.SkipSub
00006E36 5300                       	subq.b	#1,d0
00006E38                            
00006E38                            .SkipSub:
00006E38 0600 0020                  	addi.b	#$20,d0
00006E3C 6000                       	bra.s	.GotQuadrant
00006E3E                            
00006E3E                            ; -------------------------------------------------------------------------------
00006E3E                            
00006E3E                            .HighAngle:
00006E3E 1001                       	move.b	d1,d0
00006E40 6A00                       	bpl.s	.SkipAdd
00006E42 5200                       	addq.b	#1,d0
00006E44                            
00006E44                            .SkipAdd:
00006E44 0600 001F                  	addi.b	#$1F,d0
00006E48                            
00006E48                            .GotQuadrant:
00006E48 0200 00C0                  	andi.b	#$C0,d0
00006E4C 6700 0000                  	beq.w	Player_GetFloorDist_Part2
00006E50 0C00 0080                  	cmpi.b	#$80,d0
00006E54 6700 0000                  	beq.w	Player_GetCeilDist_Part2
00006E58 0201 0038                  	andi.b	#$38,d1
00006E5C 6600                       	bne.s	.CheckWalls
00006E5E 5042                       	addq.w	#8,d2
00006E60                            
00006E60                            .CheckWalls:
00006E60 0C00 0040                  	cmpi.b	#$40,d0
00006E64 6700 0000                  	beq.w	Player_GetLWallDist_Part2
00006E68 6000 0000                  	bra.w	Player_GetRWallDist_Part2
00006E6C                            ; End of function Player_CalcRoomInFront
00006E6C                            
00006E6C                            ; -------------------------------------------------------------------------------
00006E6C                            
00006E6C                            Player_CalcRoomOverHead:
00006E6C 11C0 F768                  	move.b	d0,(v_primary_angle).w
00006E70 11C0 F76A                  	move.b	d0,(v_secondary_angle).w
00006E74 0600 0020                  	addi.b	#$20,d0
00006E78 0200 00C0                  	andi.b	#$C0,d0
00006E7C 0C00 0040                  	cmpi.b	#$40,d0
00006E80 6700 0000                  	beq.w	Player_CheckLCeil
00006E84 0C00 0080                  	cmpi.b	#$80,d0
00006E88 6700 0000                  	beq.w	Player_CheckCeiling
00006E8C 0C00 00C0                  	cmpi.b	#$C0,d0
00006E90 6700 0000                  	beq.w	Player_CheckRCeil
00006E94                            
00006E94                            Player_CheckFloor:
00006E94 3428 000C                  	move.w	oY(a0),d2
00006E98 3628 0008                  	move.w	oX(a0),d3
00006E9C 7000                       	moveq	#0,d0
00006E9E 1028 0016                  	move.b	oYRadius(a0),d0
00006EA2 4880                       	ext.w	d0
00006EA4 D440                       	add.w	d0,d2
00006EA6 1028 0017                  	move.b	oXRadius(a0),d0
00006EAA 4880                       	ext.w	d0
00006EAC D640                       	add.w	d0,d3
00006EAE 49F8 F768                  	lea	(v_primary_angle).w,a4
00006EB2 367C 0010                  	movea.w	#$10,a3
00006EB6 3C3C 0000                  	move.w	#0,d6
00006EBA 7A0D                       	moveq	#$D,d5
00006EBC 4EB8 14C4                  	jsr	FindLevelFloor
00006EC0 3F01                       	move.w	d1,-(sp)
00006EC2 3428 000C                  	move.w	oY(a0),d2
00006EC6 3628 0008                  	move.w	oX(a0),d3
00006ECA 7000                       	moveq	#0,d0
00006ECC 1028 0016                  	move.b	oYRadius(a0),d0
00006ED0 4880                       	ext.w	d0
00006ED2 D440                       	add.w	d0,d2
00006ED4 1028 0017                  	move.b	oXRadius(a0),d0
00006ED8 4880                       	ext.w	d0
00006EDA 9640                       	sub.w	d0,d3
00006EDC 49F8 F76A                  	lea	(v_secondary_angle).w,a4
00006EE0 367C 0010                  	movea.w	#$10,a3
00006EE4 3C3C 0000                  	move.w	#0,d6
00006EE8 7A0D                       	moveq	#$D,d5
00006EEA 4EB8 14C4                  	jsr	FindLevelFloor
00006EEE 301F                       	move.w	(sp)+,d0
00006EF0 143C 0000                  	move.b	#0,d2
00006EF4                            
00006EF4                            Player_ChooseAngle:
00006EF4 1638 F76A                  	move.b	(v_secondary_angle).w,d3
00006EF8 B240                       	cmp.w	d0,d1
00006EFA 6F00                       	ble.s	.NoExchange
00006EFC 1638 F768                  	move.b	(v_primary_angle).w,d3
00006F00 C141                       	exg	d0,d1
00006F02                            
00006F02                            .NoExchange:
00006F02 0803 0000                  	btst	#0,d3
00006F06 6700                       	beq.s	.End
00006F08 1602                       	move.b	d2,d3
00006F0A                            
00006F0A                            .End:
00006F0A 4E75                       	rts
00006F0C                            ; End of function Player_CalcRoomOverHead
00006F0C                            
00006F0C                            ; -------------------------------------------------------------------------------
00006F0C                            
00006F0C                            Player_GetFloorDist:
00006F0C 3428 000C                  	move.w	$C(a0),d2
00006F10 3628 0008                  	move.w	8(a0),d3
00006F14                            ; End of function Player_GetFloorDist
00006F14                            
00006F14                            ; START	OF FUNCTION CHUNK FOR Player_CalcRoomInFront
00006F14                            
00006F14                            Player_GetFloorDist_Part2:
00006F14 0642 000A                  	addi.w	#$A,d2
00006F18 49F8 F768                  	lea	(v_primary_angle).w,a4
00006F1C 367C 0010                  	movea.w	#$10,a3
00006F20 3C3C 0000                  	move.w	#0,d6
00006F24 7A0E                       	moveq	#$E,d5
00006F26 4EB8 14C4                  	jsr	FindLevelFloor
00006F2A 143C 0000                  	move.b	#0,d2
00006F2E                            
00006F2E                            Player_GetPriAngle:
00006F2E 1638 F768                  	move.b	(v_primary_angle).w,d3
00006F32 0803 0000                  	btst	#0,d3
00006F36 6700                       	beq.s	.End
00006F38 1602                       	move.b	d2,d3
00006F3A                            
00006F3A                            .End:
00006F3A 4E75                       	rts
00006F3C                            ; END OF FUNCTION CHUNK	FOR Player_CalcRoomInFront
00006F3C                            ; -------------------------------------------------------------------------------
00006F3C                            CheckSolidDown:
00006F3C                            CheckFloorEdge:
00006F3C 3628 0008                  	move.w	oX(a0),d3
00006F40                            CheckSolidDown2:
00006F40 3428 000C                  	move.w	oY(a0),d2
00006F44 7000                       	moveq	#0,d0
00006F46 1028 0016                  	move.b	oYRadius(a0),d0
00006F4A 4880                       	ext.w	d0
00006F4C D440                       	add.w	d0,d2
00006F4E 49F8 F768                  	lea	(v_primary_angle).w,a4
00006F52 18BC 0000                  	move.b	#0,(a4)
00006F56 367C 0010                  	movea.w	#$10,a3
00006F5A 3C3C 0000                  	move.w	#0,d6
00006F5E 7A0D                       	moveq	#$D,d5
00006F60 4EB8 14C4                  	jsr	FindLevelFloor
00006F64 1638 F768                  	move.b	(v_primary_angle).w,d3
00006F68 0803 0000                  	btst	#0,d3
00006F6C 6700                       	beq.s	.End
00006F6E 163C 0000                  	move.b	#0,d3
00006F72                            
00006F72                            .End:
00006F72 4E75                       	rts
00006F74                            ; End of function CheckFloorEdge
00006F74                            
00006F74                            ; -------------------------------------------------------------------------------
00006F74                            ; START	OF FUNCTION CHUNK FOR Player_CalcRoomOverHead
00006F74                            
00006F74                            Player_CheckRCeil:
00006F74 3428 000C                  	move.w	oY(a0),d2
00006F78 3628 0008                  	move.w	oX(a0),d3
00006F7C 7000                       	moveq	#0,d0
00006F7E 1028 0017                  	move.b	oXRadius(a0),d0
00006F82 4880                       	ext.w	d0
00006F84 9440                       	sub.w	d0,d2
00006F86 1028 0016                  	move.b	oYRadius(a0),d0
00006F8A 4880                       	ext.w	d0
00006F8C D640                       	add.w	d0,d3
00006F8E 49F8 F768                  	lea	(v_primary_angle).w,a4
00006F92 367C 0010                  	movea.w	#$10,a3
00006F96 3C3C 0000                  	move.w	#0,d6
00006F9A 7A0E                       	moveq	#$E,d5
00006F9C 4EB8 1634                  	jsr	FindLevelWall
00006FA0 3F01                       	move.w	d1,-(sp)
00006FA2 3428 000C                  	move.w	oY(a0),d2
00006FA6 3628 0008                  	move.w	oX(a0),d3
00006FAA 7000                       	moveq	#0,d0
00006FAC 1028 0017                  	move.b	oXRadius(a0),d0
00006FB0 4880                       	ext.w	d0
00006FB2 D440                       	add.w	d0,d2
00006FB4 1028 0016                  	move.b	oYRadius(a0),d0
00006FB8 4880                       	ext.w	d0
00006FBA D640                       	add.w	d0,d3
00006FBC 49F8 F76A                  	lea	(v_secondary_angle).w,a4
00006FC0 367C 0010                  	movea.w	#$10,a3
00006FC4 3C3C 0000                  	move.w	#0,d6
00006FC8 7A0E                       	moveq	#$E,d5
00006FCA 4EB8 1634                  	jsr	FindLevelWall
00006FCE 301F                       	move.w	(sp)+,d0
00006FD0 143C 00C0                  	move.b	#$C0,d2
00006FD4 6000 FF1E                  	bra.w	Player_ChooseAngle
00006FD8                            ; END OF FUNCTION CHUNK	FOR Player_CalcRoomOverHead
00006FD8                            ; -------------------------------------------------------------------------------
00006FD8                            
00006FD8                            Player_GetRWallDist:
00006FD8 3428 000C                  	move.w	oY(a0),d2
00006FDC 3628 0008                  	move.w	oX(a0),d3
00006FE0                            ; End of function Player_GetRWallDist
00006FE0                            
00006FE0                            ; START	OF FUNCTION CHUNK FOR Player_CalcRoomInFront
00006FE0                            
00006FE0                            Player_GetRWallDist_Part2:
00006FE0 0643 000A                  	addi.w	#$A,d3
00006FE4 49F8 F768                  	lea	(v_primary_angle).w,a4
00006FE8 367C 0010                  	movea.w	#$10,a3
00006FEC 3C3C 0000                  	move.w	#0,d6
00006FF0 7A0E                       	moveq	#$E,d5
00006FF2 4EB8 1634                  	jsr	FindLevelWall
00006FF6 143C 00C0                  	move.b	#$C0,d2
00006FFA 6000 FF32                  	bra.w	Player_GetPriAngle
00006FFE                            ; END OF FUNCTION CHUNK	FOR Player_CalcRoomInFront
00006FFE                            ; -------------------------------------------------------------------------------
00006FFE                            
00006FFE                            ObjGetRWallDist:
00006FFE D668 0008                  	add.w	oX(a0),d3
00007002 3428 000C                  	move.w	oY(a0),d2
00007006 49F8 F768                  	lea	(v_primary_angle).w,a4
0000700A 18BC 0000                  	move.b	#0,(a4)
0000700E 367C 0010                  	movea.w	#$10,a3
00007012 3C3C 0000                  	move.w	#0,d6
00007016 7A0E                       	moveq	#$E,d5
00007018 4EB8 1634                  	jsr	FindLevelWall
0000701C 1638 F768                  	move.b	(v_primary_angle).w,d3
00007020 0803 0000                  	btst	#0,d3
00007024 6700                       	beq.s	.End
00007026 163C 00C0                  	move.b	#$C0,d3
0000702A                            
0000702A                            .End:
0000702A 4E75                       	rts
0000702C                            ; End of function ObjGetRWallDist
0000702C                            
0000702C                            ; -------------------------------------------------------------------------------
0000702C                            
0000702C                            Player_CheckCeiling:
0000702C 3428 000C                  	move.w	oY(a0),d2
00007030 3628 0008                  	move.w	oX(a0),d3
00007034 7000                       	moveq	#0,d0
00007036 1028 0016                  	move.b	oYRadius(a0),d0
0000703A 4880                       	ext.w	d0
0000703C 9440                       	sub.w	d0,d2
0000703E 0A42 000F                  	eori.w	#$F,d2
00007042 1028 0017                  	move.b	oXRadius(a0),d0
00007046 4880                       	ext.w	d0
00007048 D640                       	add.w	d0,d3
0000704A 49F8 F768                  	lea	(v_primary_angle).w,a4
0000704E 367C FFF0                  	movea.w	#-$10,a3
00007052 3C3C 1000                  	move.w	#$1000,d6
00007056 7A0E                       	moveq	#$E,d5
00007058 4EB8 14C4                  	jsr	FindLevelFloor
0000705C 3F01                       	move.w	d1,-(sp)
0000705E 3428 000C                  	move.w	oY(a0),d2
00007062 3628 0008                  	move.w	oX(a0),d3
00007066 7000                       	moveq	#0,d0
00007068 1028 0016                  	move.b	oYRadius(a0),d0
0000706C 4880                       	ext.w	d0
0000706E 9440                       	sub.w	d0,d2
00007070 0A42 000F                  	eori.w	#$F,d2
00007074 1028 0017                  	move.b	oXRadius(a0),d0
00007078 4880                       	ext.w	d0
0000707A 9640                       	sub.w	d0,d3
0000707C 49F8 F76A                  	lea	(v_secondary_angle).w,a4
00007080 367C FFF0                  	movea.w	#-$10,a3
00007084 3C3C 1000                  	move.w	#$1000,d6
00007088 7A0E                       	moveq	#$E,d5
0000708A 4EB8 14C4                  	jsr	FindLevelFloor
0000708E 301F                       	move.w	(sp)+,d0
00007090 143C 0080                  	move.b	#$80,d2
00007094 6000 FE5E                  	bra.w	Player_ChooseAngle
00007098                            ; End of function Player_CheckCeiling
00007098                            
00007098                            ; -------------------------------------------------------------------------------
00007098                            
00007098                            Player_GetCeilDist:
00007098 3428 000C                  	move.w	oY(a0),d2
0000709C 3628 0008                  	move.w	oX(a0),d3
000070A0                            ; End of function Player_GetCeilDist
000070A0                            
000070A0                            ; START	OF FUNCTION CHUNK FOR Player_CalcRoomInFront
000070A0                            
000070A0                            Player_GetCeilDist_Part2:
000070A0 0442 000A                  	subi.w	#$A,d2
000070A4 0A42 000F                  	eori.w	#$F,d2
000070A8 49F8 F768                  	lea	(v_primary_angle).w,a4
000070AC 367C FFF0                  	movea.w	#-$10,a3
000070B0 3C3C 1000                  	move.w	#$1000,d6
000070B4 7A0E                       	moveq	#$E,d5
000070B6 4EB8 14C4                  	jsr	FindLevelFloor
000070BA 143C 0080                  	move.b	#$80,d2
000070BE 6000 FE6E                  	bra.w	Player_GetPriAngle
000070C2                            ; END OF FUNCTION CHUNK	FOR Player_CalcRoomInFront
000070C2                            ; -------------------------------------------------------------------------------
000070C2                            
000070C2                            ObjGetCeilDist:
000070C2 3428 000C                  	move.w	oY(a0),d2
000070C6 3628 0008                  	move.w	oX(a0),d3
000070CA 7000                       	moveq	#0,d0
000070CC 1028 0016                  	move.b	oYRadius(a0),d0
000070D0 4880                       	ext.w	d0
000070D2 9440                       	sub.w	d0,d2
000070D4 0A42 000F                  	eori.w	#$F,d2
000070D8 49F8 F768                  	lea	(v_primary_angle).w,a4
000070DC 367C FFF0                  	movea.w	#-$10,a3
000070E0 3C3C 1000                  	move.w	#$1000,d6
000070E4 7A0E                       	moveq	#$E,d5
000070E6 4EB8 14C4                  	jsr	FindLevelFloor
000070EA 1638 F768                  	move.b	(v_primary_angle).w,d3
000070EE 0803 0000                  	btst	#0,d3
000070F2 6700                       	beq.s	.End
000070F4 163C 0080                  	move.b	#$80,d3
000070F8                            
000070F8                            .End:
000070F8 4E75                       	rts
000070FA                            ; End of function ObjGetCeilDist
000070FA                            
000070FA                            ; -------------------------------------------------------------------------------
000070FA                            ; START	OF FUNCTION CHUNK FOR Player_CalcRoomOverHead
000070FA                            
000070FA                            Player_CheckLCeil:
000070FA 3428 000C                  	move.w	oY(a0),d2
000070FE 3628 0008                  	move.w	oX(a0),d3
00007102 7000                       	moveq	#0,d0
00007104 1028 0017                  	move.b	oXRadius(a0),d0
00007108 4880                       	ext.w	d0
0000710A 9440                       	sub.w	d0,d2
0000710C 1028 0016                  	move.b	oYRadius(a0),d0
00007110 4880                       	ext.w	d0
00007112 9640                       	sub.w	d0,d3
00007114 0A43 000F                  	eori.w	#$F,d3
00007118 49F8 F768                  	lea	(v_primary_angle).w,a4
0000711C 367C FFF0                  	movea.w	#-$10,a3
00007120 3C3C 0800                  	move.w	#$800,d6
00007124 7A0E                       	moveq	#$E,d5
00007126 4EB8 1634                  	jsr	FindLevelWall
0000712A 3F01                       	move.w	d1,-(sp)
0000712C 3428 000C                  	move.w	oY(a0),d2
00007130 3628 0008                  	move.w	oX(a0),d3
00007134 7000                       	moveq	#0,d0
00007136 1028 0017                  	move.b	oXRadius(a0),d0
0000713A 4880                       	ext.w	d0
0000713C D440                       	add.w	d0,d2
0000713E 1028 0016                  	move.b	oYRadius(a0),d0
00007142 4880                       	ext.w	d0
00007144 9640                       	sub.w	d0,d3
00007146 0A43 000F                  	eori.w	#$F,d3
0000714A 49F8 F76A                  	lea	(v_secondary_angle).w,a4
0000714E 367C FFF0                  	movea.w	#-$10,a3
00007152 3C3C 0800                  	move.w	#$800,d6
00007156 7A0E                       	moveq	#$E,d5
00007158 4EB8 1634                  	jsr	FindLevelWall
0000715C 301F                       	move.w	(sp)+,d0
0000715E 143C 0040                  	move.b	#$40,d2
00007162 6000 FD90                  	bra.w	Player_ChooseAngle
00007166                            ; END OF FUNCTION CHUNK	FOR Player_CalcRoomOverHead
00007166                            ; -------------------------------------------------------------------------------
00007166                            
00007166                            Player_GetLWallDist:
00007166 3428 000C                  	move.w	oY(a0),d2
0000716A 3628 0008                  	move.w	oX(a0),d3
0000716E                            ; End of function Player_GetLWallDist
0000716E                            
0000716E                            ; START	OF FUNCTION CHUNK FOR Player_CalcRoomInFront
0000716E                            
0000716E                            Player_GetLWallDist_Part2:
0000716E 0443 000A                  	subi.w	#$A,d3
00007172 0A43 000F                  	eori.w	#$F,d3
00007176 49F8 F768                  	lea	(v_primary_angle).w,a4
0000717A 367C FFF0                  	movea.w	#-$10,a3
0000717E 3C3C 0800                  	move.w	#$800,d6
00007182 7A0E                       	moveq	#$E,d5
00007184 4EB8 1634                  	jsr	FindLevelWall
00007188 143C 0040                  	move.b	#$40,d2
0000718C 6000 FDA0                  	bra.w	Player_GetPriAngle
00007190                            ; END OF FUNCTION CHUNK	FOR Player_CalcRoomInFront
00007190                            ; -------------------------------------------------------------------------------
00007190                            
00007190                            ObjGetLWallDist:
00007190 D668 0008                  	add.w	oX(a0),d3
00007194 3428 000C                  	move.w	oY(a0),d2
00007198 49F8 F768                  	lea	(v_primary_angle).w,a4
0000719C 18BC 0000                  	move.b	#0,(a4)
000071A0 367C FFF0                  	movea.w	#-$10,a3
000071A4 3C3C 0800                  	move.w	#$800,d6
000071A8 7A0E                       	moveq	#$E,d5
000071AA 4EB8 1634                  	jsr	FindLevelWall
000071AE 1638 F768                  	move.b	(v_primary_angle).w,d3
000071B2 0803 0000                  	btst	#0,d3
000071B6 6700                       	beq.s	.End
000071B8 163C 0040                  	move.b	#$40,d3
000071BC                            
000071BC                            .End:
000071BC 4E75                       	rts
000071BE                            ; End of function ObjGetLWallDist
000071BE                            
000071BE                            ; -------------------------------------------------------------------------------
000071BE                            
000071BE                            Player_ObjCollide:
000071BE 4E71                       	nop
000071C0 3428 0008                  	move.w	oX(a0),d2
000071C4 3628 000C                  	move.w	oY(a0),d3
000071C8 5142                       	subq.w	#8,d2
000071CA 7A00                       	moveq	#0,d5
000071CC 1A28 0016                  	move.b	oYRadius(a0),d5
000071D0 5705                       	subq.b	#3,d5
000071D2 9645                       	sub.w	d5,d3
000071D4 0C28 0039 001A             	cmpi.b	#$39,oMapFrame(a0)
000071DA 6600                       	bne.s	.NoDuck
000071DC 0643 000C                  	addi.w	#$C,d3
000071E0 7A0A                       	moveq	#$A,d5
000071E2                            
000071E2                            .NoDuck:
000071E2 383C 0010                  	move.w	#$10,d4
000071E6 DA45                       	add.w	d5,d5
000071E8 43F8 D800                  	lea	(v_dyn_objects).w,a1
000071EC 3C3C 005F                  	move.w	#$5F,d6
000071F0                            
000071F0                            .Loop:
000071F0 4A29 0001                  	tst.b	oRender(a1)
000071F4 6A00                       	bpl.s	.Next
000071F6 1029 0020                  	move.b	oColType(a1),d0
000071FA 6600                       	bne.s	.CheckWidth
000071FC                            
000071FC                            .Next:
000071FC 43E9 0040                  	lea	oVarLen(a1),a1
00007200 51CE FFEE                  	dbf	d6,.Loop
00007204 7000                       	moveq	#0,d0
00007206 4E75                       	rts
00007208                            
00007208                            ; -------------------------------------------------------------------------------
00007208                            
00007208                            .CheckWidth:
00007208 0240 003F                  	andi.w	#$3F,d0
0000720C D040                       	add.w	d0,d0
0000720E 45F9 0000 0000             	lea	(ObjColSizes).l,a2
00007214 45F2 00FE                  	lea	-2(a2,d0.w),a2
00007218 7200                       	moveq	#0,d1
0000721A 121A                       	move.b	(a2)+,d1
0000721C 3029 0008                  	move.w	oX(a1),d0
00007220 9041                       	sub.w	d1,d0
00007222 9042                       	sub.w	d2,d0
00007224 6400                       	bcc.s	.TouchRight
00007226 D241                       	add.w	d1,d1
00007228 D041                       	add.w	d1,d0
0000722A 6500                       	bcs.s	.CheckHeight
0000722C 6000 FFCE                  	bra.w	.Next
00007230                            
00007230                            ; -------------------------------------------------------------------------------
00007230                            
00007230                            .TouchRight:
00007230 B044                       	cmp.w	d4,d0
00007232 6200 FFC8                  	bhi.w	.Next
00007236                            
00007236                            .CheckHeight:
00007236 7200                       	moveq	#0,d1
00007238 121A                       	move.b	(a2)+,d1
0000723A 3029 000C                  	move.w	oY(a1),d0
0000723E 9041                       	sub.w	d1,d0
00007240 9043                       	sub.w	d3,d0
00007242 6400                       	bcc.s	.TouchBottom
00007244 D241                       	add.w	d1,d1
00007246 D240                       	add.w	d0,d1
00007248 6500                       	bcs.s	.CheckColType
0000724A 6000 FFB0                  	bra.w	.Next
0000724E                            
0000724E                            ; -------------------------------------------------------------------------------
0000724E                            
0000724E                            .TouchBottom:
0000724E B045                       	cmp.w	d5,d0
00007250 6200 FFAA                  	bhi.w	.Next
00007254                            
00007254                            .CheckColType:
00007254 1229 0020                  	move.b	oColType(a1),d1
00007258 0201 00C0                  	andi.b	#$C0,d1
0000725C 6700 0000                  	beq.w	Player_TouchEnemy
00007260 0C01 00C0                  	cmpi.b	#$C0,d1
00007264 6700 0000                  	beq.w	Player_TouchSpecial
00007268 4A01                       	tst.b	d1
0000726A 6B00 0000                  	bmi.w	Player_TouchHazard
0000726E 1029 0020                  	move.b	oColType(a1),d0
00007272 0200 003F                  	andi.b	#$3F,d0
00007276 0C00 0006                  	cmpi.b	#6,d0
0000727A 6700                       	beq.s	Player_TouchMonitor
0000727C 0C68 005A 0030             	cmpi.w	#$5A,oPlayerHurt(a0)
00007282 6400 0000                  	bcc.w	.End
00007286 5429 0024                  	addq.b	#2,oRoutine(a1)
0000728A                            
0000728A                            .End:
0000728A 4E75                       	rts
0000728C                            
0000728C                            ; -------------------------------------------------------------------------------
0000728C                            
0000728C                            Player_TouchMonitor:
0000728C 4A68 0012                  	tst.w	oYVel(a0)
00007290 6A00                       	bpl.s	.GoingDown
00007292 3028 000C                  	move.w	oY(a0),d0
00007296 0440 0010                  	subi.w	#$10,d0
0000729A B069 000C                  	cmp.w	oY(a1),d0
0000729E 6500                       	bcs.s	.End2
000072A0 4468 0012                  	neg.w	oYVel(a0)
000072A4 337C FE80 0012             	move.w	#-$180,oYVel(a1)
000072AA 4A29 0025                  	tst.b	oRoutine2(a1)
000072AE 6600                       	bne.s	.End2
000072B0 5829 0025                  	addq.b	#4,oRoutine2(a1)
000072B4 4E75                       	rts
000072B6                            
000072B6                            ; -------------------------------------------------------------------------------
000072B6                            
000072B6                            .GoingDown:
000072B6 0C28 0002 001C             	cmpi.b	#2,oAnim(a0)
000072BC 6600                       	bne.s	.End2
000072BE 4468 0012                  	neg.w	oYVel(a0)
000072C2 5429 0024                  	addq.b	#2,oRoutine(a1)
000072C6                            
000072C6                            .End2:
000072C6 4E75                       	rts
000072C8                            ; End of function ObjSonic_ObjCollide
000072C8                            
000072C8                            ; -------------------------------------------------------------------------------
000072C8                            
000072C8                            Player_TouchEnemy:
000072C8 4A39 00FF 1521             	tst.b	(v_time_warp_on).l
000072CE 6600                       	bne.s	.DamageEnemy
000072D0 4A39 00FF 151F             	tst.b	(v_invincible).l
000072D6 6600                       	bne.s	.DamageEnemy
000072D8 0C28 0002 001C             	cmpi.b	#2,oAnim(a0)
000072DE 6600 0000                  	bne.w	Player_TouchHazard
000072E2                            
000072E2                            .DamageEnemy:
000072E2 4A29 0021                  	tst.b	oColStatus(a1)
000072E6 6700                       	beq.s	.KillEnemy
000072E8 4468 0010                  	neg.w	oXVel(a0)
000072EC 4468 0012                  	neg.w	oYVel(a0)
000072F0 E0E8 0010                  	asr	oXVel(a0)
000072F4 E0E8 0012                  	asr	oYVel(a0)
000072F8 137C 0000 0020             	move.b	#0,oColType(a1)
000072FE 5329 0021                  	subq.b	#1,oColStatus(a1)
00007302 6600                       	bne.s	.End
00007304 08E9 0007 0022             	bset	#7,oStatus(a1)
0000730A                            
0000730A                            .End:
0000730A 4E75                       	rts
0000730C                            
0000730C                            ; -------------------------------------------------------------------------------
0000730C                            
0000730C                            .KillEnemy:
0000730C 08E9 0007 0022             	bset	#7,oStatus(a1)
00007312 7000                       	moveq	#0,d0
00007314 3038 F7D0                  	move.w	(v_chain_bonus_counter).w,d0
00007318 5478 F7D0                  	addq.w	#2,(v_chain_bonus_counter).w
0000731C 0C40 0006                  	cmpi.w	#6,d0
00007320 6500                       	bcs.s	.CappedChain
00007322 7006                       	moveq	#6,d0
00007324                            
00007324                            .CappedChain:
00007324 3340 003E                  	move.w	d0,oVar3E(a1)
00007328 303B 0000                  	move.w	EnemyPoints(pc,d0.w),d0
0000732C 0C78 0020 F7D0             	cmpi.w	#$20,(v_chain_bonus_counter).w
00007332 6500                       	bcs.s	.GivePoints
00007334 303C 03E8                  	move.w	#$3E8,d0
00007338 337C 000A 003E             	move.w	#$A,oVar3E(a1)
0000733E                            
0000733E                            .GivePoints:
0000733E 6100 0000                  	bsr.w	AddPoints
00007342 303C 00C1                  	move.w	#$C1,d0  ; Enemy Destroyed SFX
00007346 4EB8 2708                  	jsr	PlayFMSound
0000734A 12BC 0018                  	move.b	#$18,oID(a1)
0000734E 137C 0000 0024             	move.b	#0,oRoutine(a1)
00007354 137C 0001 0028             	move.b	#1,oSubtype(a1)
0000735A 4A68 0012                  	tst.w	oYVel(a0)
0000735E 6B00                       	bmi.s	.BounceDown
00007360 3028 000C                  	move.w	oY(a0),d0
00007364 B069 000C                  	cmp.w	oY(a1),d0
00007368 6400                       	bcc.s	.BounceUp
0000736A 4468 0012                  	neg.w	oYVel(a0)
0000736E 4E75                       	rts
00007370                            
00007370                            ; -------------------------------------------------------------------------------
00007370                            
00007370                            .BounceDown:
00007370 0668 0100 0012             	addi.w	#$100,oYVel(a0)
00007376 4E75                       	rts
00007378                            
00007378                            ; -------------------------------------------------------------------------------
00007378                            
00007378                            .BounceUp:
00007378 0468 0100 0012             	subi.w	#$100,oYVel(a0)
0000737E 4E75                       	rts
00007380                            
00007380                            ; -------------------------------------------------------------------------------
00007380                            EnemyPoints:
00007380 000A                       	dc.w	10
00007382 0014                       	dc.w	20
00007384 0032                       	dc.w	50
00007386 0064                       	dc.w	100
00007388                            
00007388                            ; -------------------------------------------------------------------------------
00007388                            
00007388                            Player_TouchHazard2:
00007388 08E9 0007 0022             	bset	#7,oStatus(a1)
0000738E                            
0000738E                            Player_TouchHazard:
0000738E 4A39 00FF 1521             	tst.b	(v_time_warp_on).l
00007394 6600                       	bne.s	.NoHurt
00007396 4A39 00FF 151F             	tst.b	(v_invincible).l
0000739C 6700                       	beq.s	.ChkHurt
0000739E                            
0000739E                            .NoHurt:
0000739E 70FF                       	moveq	#-1,d0
000073A0 4E75                       	rts
000073A2                            
000073A2                            ; -------------------------------------------------------------------------------
000073A2                            
000073A2                            .ChkHurt:
000073A2 4E71                       	nop
000073A4 4A68 0030                  	tst.w	oPlayerHurt(a0)
000073A8 66F4                       	bne.s	.NoHurt
000073AA 2449                       	movea.l	a1,a2
000073AC                            
000073AC                            HurtPlayer:
000073AC 4A39 00FF 151E             	tst.b	(v_shield).l
000073B2 6600                       	bne.s	.ClearCharge
000073B4 4A79 00FF 1512             	tst.w	(v_ring_count).l
000073BA 6700 0000                  	beq.w	.CheckKill
000073BE 4EB9 0000 0000             	jsr	FindObjSlot
000073C4 6600                       	bne.s	.ClearCharge
000073C6 12BC 0011                  	move.b	#$11,oID(a1)
000073CA 3368 0008 0008             	move.w	oX(a0),oX(a1)
000073D0 3368 000C 000C             	move.w	oY(a0),oY(a1)
000073D6                            
000073D6                            .ClearCharge:
000073D6 4228 002A                  	clr.b	oPlayerCharge(a0)
000073DA 08B9 0000 00FF 151E        	bclr	#0,(v_shield).l
000073E2 6600                       	bne.s	.SetHurt
000073E4 13FC 0000 00FF 156F        	move.b	#0,(v_blue_ring).l
000073EC                            
000073EC                            .SetHurt:
000073EC 117C 0004 0024             	move.b	#4,oRoutine(a0)
000073F2 6100 E47E                  	bsr.w	Player_ResetOnFloor
000073F6 08E8 0001 0022             	bset	#1,oStatus(a0)
000073FC 317C FC00 0012             	move.w	#-$400,oYVel(a0)
00007402 317C FE00 0010             	move.w	#-$200,oXVel(a0)
00007408 0828 0006 0022             	btst	#6,oStatus(a0)
0000740E 6700                       	beq.s	.NoWater
00007410 317C FE00 0012             	move.w	#-$200,oYVel(a0)
00007416 317C FF00 0010             	move.w	#-$100,oXVel(a0)
0000741C                            
0000741C                            .NoWater:
0000741C 3028 0008                  	move.w	oX(a0),d0
00007420 B06A 0008                  	cmp.w	oX(a2),d0
00007424 6500                       	bcs.s	.GotXVel
00007426 4468 0010                  	neg.w	oXVel(a0)
0000742A                            
0000742A                            .GotXVel:
0000742A 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)
00007430 117C 001A 001C             	move.b	#$1A,oAnim(a0)
00007436 317C 0078 0030             	move.w	#$78,oPlayerHurt(a0)
0000743C 70FF                       	moveq	#-1,d0
0000743E 4E75                       	rts
00007440                            
00007440                            ; -------------------------------------------------------------------------------
00007440                            
00007440                            .CheckKill:
00007440 4A79 00FF 1588             	tst.w	(v_debug_mode_enabled).l
00007446 6600 FF8E                  	bne.w	.ClearCharge
0000744A                            ; End of function Player_TouchEnemy
0000744A                            
0000744A                            ; -------------------------------------------------------------------------------
0000744A                            
0000744A                            KillPlayer:
0000744A 4A79 00FF 1906             	tst.w	(v_debug_mode).l
00007450 6600                       	bne.s	.End
00007452 13FC 0000 00FF 151F        	move.b	#0,(v_invincible).l
0000745A 117C 0006 0024             	move.b	#6,oRoutine(a0)
00007460 6100 E410                  	bsr.w	Player_ResetOnFloor
00007464 08E8 0001 0022             	bset	#1,oStatus(a0)
0000746A 317C F900 0012             	move.w	#-$700,oYVel(a0)
00007470 317C 0000 0010             	move.w	#0,oXVel(a0)
00007476 317C 0000 0014             	move.w	#0,oPlayerGVel(a0)
0000747C 3168 000C 0038             	move.w	oY(a0),oPlayerStick(a0)
00007482 117C 0018 001C             	move.b	#$18,oAnim(a0)
00007488 08E8 0007 0002             	bset	#7,oTile(a0)
0000748E 117C 0000 0018             	move.b	#0,oPriority(a0)
00007494 303C 00A3                  	move.w	#$A3,d0
00007498 4EB8 2708                  	jsr	PlayFMSound
0000749C                            
0000749C                            .End:
0000749C 70FF                       	moveq	#-1,d0
0000749E 4E75                       	rts
000074A0                            ; End of function KillPlayer
000074A0                            
000074A0                            ; -------------------------------------------------------------------------------
000074A0                            ; START	OF FUNCTION CHUNK FOR ObjSonic_ObjCollide
000074A0                            
000074A0                            Player_TouchSpecial:
000074A0 1229 0020                  	move.b	oColType(a1),d1
000074A4 0201 003F                  	andi.b	#$3F,d1
000074A8 0C01 001F                  	cmpi.b	#$1F,d1
000074AC 6700 0000                  	beq.w	.FlagCollision
000074B0 0C01 000B                  	cmpi.b	#$B,d1
000074B4 6700 0000                  	beq.w	.TouchHazard
000074B8 0C01 000C                  	cmpi.b	#$C,d1
000074BC 6700 0000                  	beq.w	.TouchMechaBlu
000074C0 0C01 0017                  	cmpi.b	#$17,d1
000074C4 6700 0000                  	beq.w	.FlagCollision
000074C8 0C01 0021                  	cmpi.b	#$21,d1
000074CC 6700 0000                  	beq.w	.FlagCollision
000074D0 0C01 0023                  	cmpi.b	#$23,d1
000074D4 6700 0000                  	beq.w	.FlagCollision
000074D8 0C01 002F                  	cmpi.b	#$2F,d1
000074DC 6700 0000                  	beq.w	.CheckIfRoll
000074E0 0C01 003A                  	cmpi.b	#$3A,d1
000074E4 6700 0000                  	beq.w	.CheckIfRoll
000074E8 0C01 003B                  	cmpi.b	#$3B,d1
000074EC 6700 0000                  	beq.w	.CheckIfRoll
000074F0 0C38 0001 F7AA             	cmpi.b	#1,(v_boss_fight).w
000074F6 6600                       	bne.s	.End3
000074F8 0C01 003C                  	cmpi.b	#$3C,d1
000074FC 6D00                       	blt.s	.End3
000074FE 0C01 003F                  	cmpi.b	#$3F,d1
00007502 6E00                       	bgt.s	.End3
00007504 6100 FDC2                  	bsr.w	Player_TouchEnemy
00007508 4A29 0020                  	tst.b	oColType(a1)
0000750C 6600                       	bne.s	.NoResetHits
0000750E 5629 0021                  	addq.b	#3,oColStatus(a1)
00007512                            
00007512                            .NoResetHits:
00007512 4229 0020                  	clr.b	oColType(a1)
00007516 6000 0000                  	bra.w	.FlagCollision
0000751A                            
0000751A                            ; -------------------------------------------------------------------------------
0000751A                            
0000751A                            .End3:
0000751A 4E75                       	rts
0000751C                            
0000751C                            ; -------------------------------------------------------------------------------
0000751C                            
0000751C                            .TouchHazard:
0000751C 6000 FE6A                  	bra.w	Player_TouchHazard2
00007520                            
00007520                            ; -------------------------------------------------------------------------------
00007520                            
00007520                            .TouchMechaBlu:
00007520 9A40                       	sub.w	d0,d5
00007522 0C45 0008                  	cmpi.w	#8,d5
00007526 6400                       	bcc.s	.TouchEnemy
00007528 3029 0008                  	move.w	oX(a1),d0
0000752C 5940                       	subq.w	#4,d0
0000752E 0829 0000 0022             	btst	#0,oStatus(a1)
00007534 6700                       	beq.s	.NotFlipped
00007536 0440 0010                  	subi.w	#$10,d0
0000753A                            
0000753A                            .NotFlipped:
0000753A 9042                       	sub.w	d2,d0
0000753C 6400                       	bcc.s	.CheckIfRight
0000753E 0640 0018                  	addi.w	#$18,d0
00007542 6500                       	bcs.s	.TouchHazard2
00007544 6000                       	bra.s	.TouchEnemy
00007546                            
00007546                            ; -------------------------------------------------------------------------------
00007546                            
00007546                            .CheckIfRight:
00007546 B044                       	cmp.w	d4,d0
00007548 6200                       	bhi.s	.TouchEnemy
0000754A                            
0000754A                            .TouchHazard2:
0000754A 6000 FE42                  	bra.w	Player_TouchHazard
0000754E                            
0000754E                            ; -------------------------------------------------------------------------------
0000754E                            
0000754E                            .TouchEnemy:
0000754E 6000 FD78                  	bra.w	Player_TouchEnemy
00007552                            
00007552                            ; -------------------------------------------------------------------------------
00007552                            
00007552                            .FlagCollision:
00007552 5229 0021                  	addq.b	#1,oColStatus(a1)
00007556 4E75                       	rts
00007558                            
00007558                            ; -------------------------------------------------------------------------------
00007558                            
00007558                            .CheckIfRoll:
00007558 0C28 0002 001C             	cmpi.b	#2,oAnim(a0)
0000755E 6600                       	bne.s	.End4
00007560 5229 0021                  	addq.b	#1,oColStatus(a1)
00007564                            
00007564                            .End4:
00007564 4E75                       	rts
00007566                            ; END OF FUNCTION CHUNK	FOR ObjSonic_ObjCollide
00007566                            
00007566                            ; -------------------------------------------------------------------------------
00007566 1414                       ObjColSizes:	dc.b	$14, $14
00007568 120C                       	dc.b	$12, $C
0000756A 0C10                       	dc.b	$C, $10
0000756C 0410                       	dc.b	4,	$10
0000756E 0C12                       	dc.b	$C, $12
00007570 1010                       	dc.b	$10, $10
00007572 0606                       	dc.b	6,	6
00007574 180C                       	dc.b	$18, $C
00007576 0C10                       	dc.b	$C, $10
00007578 100C                       	dc.b	$10, $C
0000757A 0808                       	dc.b	8,	8
0000757C 1410                       	dc.b	$14, $10
0000757E 1408                       	dc.b	$14, 8
00007580 0E0E                       	dc.b	$E, $E
00007582 1818                       	dc.b	$18, $18
00007584 2810                       	dc.b	$28, $10
00007586 1018                       	dc.b	$10, $18
00007588 0810                       	dc.b	8,	$10
0000758A 2070                       	dc.b	$20, $70
0000758C 4020                       	dc.b	$40, $20
0000758E 8020                       	dc.b	$80, $20
00007590 2020                       	dc.b	$20, $20
00007592 0808                       	dc.b	8,	8
00007594 0404                       	dc.b	4,	4
00007596 2008                       	dc.b	$20, 8
00007598 0C0C                       	dc.b	$C, $C
0000759A 0804                       	dc.b	8,	4
0000759C 1804                       	dc.b	$18, 4
0000759E 2804                       	dc.b	$28, 4
000075A0 0408                       	dc.b	4,	8
000075A2 0418                       	dc.b	4,	$18
000075A4 0428                       	dc.b	4,	$28
000075A6 0420                       	dc.b	4,	$20
000075A8 1818                       	dc.b	$18, $18
000075AA 0C18                       	dc.b	$C, $18
000075AC 4808                       	dc.b	$48, 8
000075AE 080C                       	dc.b	8,	$C
000075B0 1008                       	dc.b	$10, 8
000075B2 2010                       	dc.b	$20, $10
000075B4 2010                       	dc.b	$20, $10
000075B6 0810                       	dc.b	8,	$10
000075B8 1010                       	dc.b	$10, $10
000075BA 0C0C                       	dc.b	$C, $C
000075BC 1010                       	dc.b	$10, $10
000075BE 0404                       	dc.b	4,	4
000075C0 1010                       	dc.b	$10, $10
000075C2 161A                       	dc.b	$16, $1A
000075C4 0000                       	dc.b	0,	0
000075C6 0000                       	dc.b	0,	0
000075C8 0000                       	dc.b	0,	0
000075CA 0000                       	dc.b	0,	0
000075CC 0000                       	dc.b	0,	0
000075CE 0000                       	dc.b	0,	0
000075D0 0000                       	dc.b	0,	0
000075D2 0000                       	dc.b	0,	0
000075D4 0000                       	dc.b	0,	0
000075D6 0000                       	dc.b	0,	0
000075D8 2824                       	dc.b	$28, $24
000075DA 1211                       	dc.b	$12, $11
000075DC 2018                       	dc.b	$20, $18
000075DE 0C14                       	dc.b	$C, $14
000075E0 200C                       	dc.b	$20, $C
000075E2 0C10                       	dc.b	$C, $10
000075E4                            
000075E4                            ; -------------------------------------------------------------------------------
000075E4                            
000075E4                            ObjWaterfall:
000075E4 7000                       	moveq	#0,d0
000075E6 1028 0024                  	move.b	oRoutine(a0),d0
000075EA 303B 0000                  	move.w	ObjWaterfall_Index(pc,d0.w),d0
000075EE 4EBB 0000                  	jsr	ObjWaterfall_Index(pc,d0.w)
000075F2 43F9 0000 0000             	lea	(Ani_Waterfall).l,a1
000075F8 4EB8 61F4                  	jsr	AnimateObject
000075FC 4EF8 4012                  	jmp	DrawObject
00007600                            
00007600                            ; -------------------------------------------------------------------------------
00007600                            ObjWaterfall_Index:
00007600 0000                       	dc.w	ObjWaterfall_Init-ObjWaterfall_Index
00007602 0000                       	dc.w	ObjWaterfall_Main-ObjWaterfall_Index
00007604                            ; -------------------------------------------------------------------------------
00007604                            
00007604                            ObjWaterfall_Init:
00007604 5428 0024                  	addq.b	#2,oRoutine(a0)
00007608 217C 0000 0000 0004        	move.l	#MapSpr_Waterfall,oMap(a0)
00007610 117C 0004 0001             	move.b	#4,oRender(a0)
00007616 117C 0001 0018             	move.b	#1,oPriority(a0)
0000761C 117C 0010 0019             	move.b	#$10,oWidth(a0)
00007622 317C 03BA 0002             	move.w	#$3BA,oTile(a0)
00007628 0268 FFF0 000C             	andi.w	#$FFF0,oY(a0)
0000762E 3168 000C 002A             	move.w	$C(a0),oVar2A(a0)
00007634 0668 0180 002A             	addi.w	#$180,oVar2A(a0)
0000763A 4E75                       	rts
0000763C                            
0000763C                            ; -------------------------------------------------------------------------------
0000763C                            
0000763C                            ObjWaterfall_Main:
0000763C 3028 000C                  	move.w	oY(a0),d0
00007640 5840                       	addq.w	#4,d0
00007642 B068 002A                  	cmp.w	oVar2A(a0),d0
00007646 6500                       	bcs.s	.NoDel
00007648 4EF8 40BE                  	jmp	DeleteObject
0000764C                            
0000764C                            .NoDel:
0000764C 3140 000C                  	move.w	d0,oY(a0)
00007650 7602                       	moveq	#2,d3
00007652 08C3 000D                  	bset	#$D,d3
00007656 3828 000C                  	move.w	oY(a0),d4
0000765A 3A28 0008                  	move.w	oX(a0),d5
0000765E 0445 0060                  	subi.w	#$60,d5
00007662 3C04                       	move.w	d4,d6
00007664 0246 000F                  	andi.w	#$F,d6
00007668 6600                       	bne.s	.End
0000766A 7C0B                       	moveq	#$B,d6
0000766C                            
0000766C                            .Loop:
0000766C 4EB8 389A                  	jsr	DrawBlockAtPos
00007670 0645 0010                  	addi.w	#$10,d5
00007674 51CE FFF6                  	dbf	d6,.Loop
00007678                            
00007678                            .End:
00007678 4E75                       	rts
0000767A                            
0000767A                            ; -------------------------------------------------------------------------------
0000767A                            
0000767A                            ObjNull8:
0000767A 4E75                       	rts
0000767C                            ; End of function ObjWaterfall_Main
0000767C                            
0000767C                            ; -------------------------------------------------------------------------------
0000767C                            
0000767C                            ObjNull5:
0000767C 4E75                       	rts
0000767E                            ; End of function ObjNull5
0000767E                            
0000767E                            ; -------------------------------------------------------------------------------
0000767E                            Ani_Waterfall:
0000767E                            	include	"level/objects/waterfall/anim.asm"
0000767E                            .Anim:
0000767E 0000                       	dc.w	byte_2071E8-.Anim
00007680 0400 01FF                  byte_2071E8:	dc.b	4, 0, 1, $FF
00007680 0400 01FF                  byte_2071E8:	dc.b	4, 0, 1, $FF
00007684                            	even
00007684                            		
00007684                            MapSpr_Waterfall:
00007684                            	include	"level/objects/waterfall/map.asm"
00007684                            .Map:
00007684 0000                       	dc.w	unk_2071F0-.Map
00007686 0000                       	dc.w	unk_207210-.Map
00007688 06                         unk_2071F0:	dc.b	  6
00007689 F0                         	dc.b	$F0 ; ð
0000768A 0F                         	dc.b	 $F
0000768B 00                         	dc.b	  0
0000768C 00                         	dc.b	  0
0000768D A0                         	dc.b	$A0 ;  
0000768E F0                         	dc.b	$F0 ; ð
0000768F 0F                         	dc.b	 $F
00007690 00                         	dc.b	  0
00007691 00                         	dc.b	  0
00007692 C0                         	dc.b	$C0 ; À
00007693 F0                         	dc.b	$F0 ; ð
00007694 0F                         	dc.b	 $F
00007695 00                         	dc.b	  0
00007696 00                         	dc.b	  0
00007697 E0                         	dc.b	$E0 ; à
00007698 F0                         	dc.b	$F0 ; ð
00007699 0F                         	dc.b	 $F
0000769A 00                         	dc.b	  0
0000769B 00                         	dc.b	  0
0000769C 00                         	dc.b	  0
0000769D F0                         	dc.b	$F0 ; ð
0000769E 0F                         	dc.b	 $F
0000769F 00                         	dc.b	  0
000076A0 00                         	dc.b	  0
000076A1 20                         	dc.b	$20
000076A2 F0                         	dc.b	$F0 ; ð
000076A3 0F                         	dc.b	 $F
000076A4 00                         	dc.b	  0
000076A5 00                         	dc.b	  0
000076A6 40                         	dc.b	$40 ; .
000076A7 00                         	dc.b	  0
000076A8 06                         unk_207210:	dc.b	  6
000076A9 F0                         	dc.b	$F0 ; ð
000076AA 0F                         	dc.b	 $F
000076AB 00                         	dc.b	  0
000076AC 10                         	dc.b	$10
000076AD A0                         	dc.b	$A0 ;  
000076AE F0                         	dc.b	$F0 ; ð
000076AF 0F                         	dc.b	 $F
000076B0 00                         	dc.b	  0
000076B1 10                         	dc.b	$10
000076B2 C0                         	dc.b	$C0 ; À
000076B3 F0                         	dc.b	$F0 ; ð
000076B4 0F                         	dc.b	 $F
000076B5 00                         	dc.b	  0
000076B6 10                         	dc.b	$10
000076B7 E0                         	dc.b	$E0 ; à
000076B8 F0                         	dc.b	$F0 ; ð
000076B9 0F                         	dc.b	 $F
000076BA 00                         	dc.b	  0
000076BB 10                         	dc.b	$10
000076BC 00                         	dc.b	  0
000076BD F0                         	dc.b	$F0 ; ð
000076BE 0F                         	dc.b	 $F
000076BF 00                         	dc.b	  0
000076C0 10                         	dc.b	$10
000076C1 20                         	dc.b	$20
000076C2 F0                         	dc.b	$F0 ; ð
000076C3 0F                         	dc.b	 $F
000076C4 00                         	dc.b	  0
000076C5 10                         	dc.b	$10
000076C6 40                         	dc.b	$40 ; .
000076C7 00                         	dc.b	  0
000076C7 00                         	dc.b	  0
000076C8                            	even
000076C8                            
000076C8                            ; -------------------------------------------------------------------------------
000076C8                            ; START	OF FUNCTION CHUNK FOR ObjSonic
000076C8                            
000076C8                            DebugMode:
000076C8 1038 F604                  	move.b	(v_ctrl1_held).w,d0
000076CC 0200 000F                  	andi.b	#$F,d0
000076D0 6600                       	bne.s	.Accel
000076D2 23FC 0000 4000 0000 0000   	move.l	#$4000,(v_debug_speed).l
000076DC 6000                       	bra.s	.GotSpeed
000076DE                            
000076DE                            ; -------------------------------------------------------------------------------
000076DE                            
000076DE                            .Accel:
000076DE 06B9 0000 2000 0000 0000   	addi.l	#$2000,(v_debug_speed).l
000076E8 0CB9 0008 0000 0000 0000   	cmpi.l	#$80000,(v_debug_speed).l
000076F2 6300                       	bls.s	.GotSpeed
000076F4 23FC 0008 0000 0000 0000   	move.l	#$80000,(v_debug_speed).l
000076FE                            
000076FE                            .GotSpeed:
000076FE 2039 0000 0000             	move.l	(v_debug_speed).l,d0
00007704 0838 0000 F604             	btst	#0,(v_ctrl1_held).w
0000770A 6700                       	beq.s	.ChkDown
0000770C 91A8 000C                  	sub.l	d0,oY(a0)
00007710                            
00007710                            .ChkDown:
00007710 0838 0001 F604             	btst	#1,(v_ctrl1_held).w
00007716 6700                       	beq.s	.ChkLeft
00007718 D1A8 000C                  	add.l	d0,oY(a0)
0000771C                            
0000771C                            .ChkLeft:
0000771C 0838 0002 F604             	btst	#2,(v_ctrl1_held).w
00007722 6700                       	beq.s	.ChkRight
00007724 91A8 0008                  	sub.l	d0,oX(a0)
00007728                            
00007728                            .ChkRight:
00007728 0838 0003 F604             	btst	#3,(v_ctrl1_held).w
0000772E 6700                       	beq.s	.SetPos
00007730 D1A8 0008                  	add.l	d0,oX(a0)
00007734                            
00007734                            .SetPos:
00007734 3428 000C                  	move.w	oY(a0),d2
00007738 1028 0016                  	move.b	oYRadius(a0),d0
0000773C 4880                       	ext.w	d0
0000773E D440                       	add.w	d0,d2
00007740 3628 0008                  	move.w	oX(a0),d3
00007744 4EB8 12DC                  	jsr	GetLevelBlock
00007748 33D1 00FF 194E             	move.w	(a1),(v_debug_block).l
0000774E 45F9 0000 0000             	lea	(DebugItemIndex).l,a2
00007754 0838 0006 F605             	btst	#6,(v_ctrl1_pressed).w
0000775A 6700                       	beq.s	.NoInc
0000775C 7200                       	moveq	#0,d1
0000775E 1239 00FF 1904             	move.b	(v_debug_object).l,d1
00007764 5201                       	addq.b	#1,d1
00007766 B212                       	cmp.b	(a2),d1
00007768 6500                       	bcs.s	.NoWrap
0000776A 123C 0000                  	move.b	#0,d1
0000776E                            
0000776E                            .NoWrap:
0000776E 13C1 00FF 1904             	move.b	d1,(v_debug_object).l
00007774                            
00007774                            .NoInc:
00007774 0838 0007 F605             	btst	#7,(v_ctrl1_pressed).w
0000777A 6700                       	beq.s	.NoDec
0000777C 7200                       	moveq	#0,d1
0000777E 1239 00FF 1904             	move.b	(v_debug_object).l,d1
00007784 5301                       	subq.b	#1,d1
00007786 0C01 00FF                  	cmpi.b	#$FF,d1
0000778A 6600                       	bne.s	.NoWrap2
0000778C D212                       	add.b	(a2),d1
0000778E                            
0000778E                            .NoWrap2:
0000778E 13C1 00FF 1904             	move.b	d1,(v_debug_object).l
00007794                            
00007794                            .NoDec:
00007794 7200                       	moveq	#0,d1
00007796 1239 00FF 1904             	move.b	(v_debug_object).l,d1
0000779C C2FC 000C                  	mulu.w	#$C,d1
000077A0 2172 1004 0004             	move.l	4(a2,d1.w),oMap(a0)
000077A6 3172 1008 0002             	move.w	8(a2,d1.w),oTile(a0)
000077AC 1172 1003 0018             	move.b	3(a2,d1.w),oPriority(a0)
000077B2 1172 100D 001A             	move.b	$D(a2,d1.w),oMapFrame(a0)
000077B8 13F2 100C 00FF 1954        	move.b	$C(a2,d1.w),(v_debug_subtype2).l
000077C0 1032 100B                  	move.b	$B(a2,d1.w),d0
000077C4 0000 0004                  	ori.b	#4,d0
000077C8 1140 0001                  	move.b	d0,oRender(a0)
000077CC 117C 0000 001C             	move.b	#0,oAnim(a0)
000077D2 0838 0005 F605             	btst	#5,(v_ctrl1_pressed).w
000077D8 6700                       	beq.s	.NoPlace
000077DA 6100 0000                  	bsr.w	FindObjSlot
000077DE 6600                       	bne.s	.NoPlace
000077E0 7200                       	moveq	#0,d1
000077E2 1239 00FF 1904             	move.b	(v_debug_object).l,d1
000077E8 C2FC 000C                  	mulu.w	#$C,d1
000077EC 12B2 1002                  	move.b	2(a2,d1.w),oID(a1)
000077F0 1372 100A 0028             	move.b	$A(a2,d1.w),oSubtype(a1)
000077F6 1372 100C 0029             	move.b	$C(a2,d1.w),oSubtype2(a1)
000077FC 1372 100D 001A             	move.b	$D(a2,d1.w),oMapFrame(a1)
00007802 3368 0008 0008             	move.w	8(a0),oX(a1)
00007808 3368 000C 000C             	move.w	$C(a0),oY(a1)
0000780E 1028 0001                  	move.b	oRender(a0),d0
00007812 0200 0003                  	andi.b	#3,d0
00007816 1340 0001                  	move.b	d0,oRender(a1)
0000781A 1340 0022                  	move.b	d0,oStatus(a1)
0000781E                            
0000781E                            .NoPlace:
0000781E 0838 0004 F605             	btst	#4,(v_ctrl1_pressed).w
00007824 6700                       	beq.s	.NoRevert
00007826 13FC 0000 00FF 1906        	move.b	#0,(v_debug_mode).l
0000782E 217C 0000 0000 0004        	move.l	#MapSpr_Sonic,oMap(a0)
00007836 317C 0780 0002             	move.w	#$780,oTile(a0)
0000783C 117C 0002 0018             	move.b	#2,oPriority(a0)
00007842 117C 0000 001A             	move.b	#0,oMapFrame(a0)
00007848 117C 0004 0001             	move.b	#4,oRender(a0)
0000784E                            
0000784E                            .NoRevert:
0000784E 4EF8 4012                  	jmp	DrawObject
00007852                            ; END OF FUNCTION CHUNK	FOR ObjSonic
00007852                            
00007852                            ; -------------------------------------------------------------------------------
00007852 0005 0000                  v_debug_speed:	dc.l	$50000
00007856 34                         DebugItemIndex:	dc.b	$34 ; 4
00007857 00                         	dc.b	0
00007858 35                         	dc.b	$35
00007859 01                         	dc.b	1
0000785A 0000 0000                  	dc.l	MapSpr_FlapDoorV
0000785E 0328                       	dc.w	$328
00007860 00                         	dc.b	0
00007861 00                         	dc.b	0
00007862 00                         	dc.b	0
00007863 00                         	dc.b	0
00007864 2F                         	dc.b	$2F            ;ID
00007865 01                         	dc.b	1              ;Priority
00007866 0000 0000                  	dc.l	MapSpr_AmyRose ;Mappings
0000786A 2370                       	dc.w	$2370          ;Vram
0000786C 00                         	dc.b	0              ;Subtype
0000786D 00                         	dc.b	0              ;Flip
0000786E 00                         	dc.b	0              ;Subtype2
0000786F 0F                         	dc.b	$F             ;Frame
00007870 2D                         	dc.b	$2D
00007871 01                         	dc.b	1
00007872 0000 0000                  	dc.l	MapSpr_RobotGenerator
00007876 0409                       	dc.w	$409
00007878 00                         	dc.b	0
00007879 00                         	dc.b	0
0000787A 00                         	dc.b	0
0000787B 00                         	dc.b	0
0000787C 1B                         	dc.b	$1B
0000787D 01                         	dc.b	1
0000787E 0000 0000                  	dc.l	MapSpr_GrayRock
00007882 0374                       	dc.w	$374
00007884 00                         	dc.b	0
00007885 00                         	dc.b	0
00007886 00                         	dc.b	0
00007887 00                         	dc.b	0
00007888 26                         	dc.b	$26
00007889 01                         	dc.b	1
0000788A 0000 0000                  	dc.l	MapSpr_Spikes
0000788E 0320                       	dc.w	$320
00007890 00                         	dc.b	0
00007891 00                         	dc.b	0
00007892 00                         	dc.b	0
00007893 00                         	dc.b	0
00007894 0D                         	dc.b	$D
00007895 01                         	dc.b	1
00007896 0000 0000                  	dc.l	MapSpr_FlapDoorH
0000789A 0328                       	dc.w	$328
0000789C 00                         	dc.b	0
0000789D 00                         	dc.b	0
0000789E 00                         	dc.b	0
0000789F 00                         	dc.b	0
000078A0 09                         	dc.b	9
000078A1 01                         	dc.b	1
000078A2 0000 0000                  	dc.l	MapSpr_RotPlatform
000078A6 0334                       	dc.w	$334
000078A8 00                         	dc.b	0
000078A9 00                         	dc.b	0
000078AA 00                         	dc.b	0
000078AB 00                         	dc.b	0
000078AC 21                         	dc.b	$21
000078AD 01                         	dc.b	1
000078AE 0000 0000                  	dc.l	MapSpr_Platform
000078B2 44BE                       	dc.w	$44BE
000078B4 01                         	dc.b	1
000078B5 00                         	dc.b	0
000078B6 00                         	dc.b	0
000078B7 00                         	dc.b	0
000078B8 0A                         	dc.b	$A
000078B9 01                         	dc.b	1
000078BA 0000 0000                  	dc.l	MapSpr_Spring1
000078BE 0520                       	dc.w	$520
000078C0 00                         	dc.b	0
000078C1 00                         	dc.b	0
000078C2 00                         	dc.b	0
000078C3 00                         	dc.b	0
000078C4 0A                         	dc.b	$A
000078C5 01                         	dc.b	1
000078C6 0000 0000                  	dc.l	MapSpr_Spring1
000078CA 0520                       	dc.w	$520
000078CC 00                         	dc.b	0
000078CD 02                         	dc.b	2
000078CE 00                         	dc.b	0
000078CF 00                         	dc.b	0
000078D0 0A                         	dc.b	$A
000078D1 01                         	dc.b	1
000078D2 0000 0000                  	dc.l	MapSpr_Spring2
000078D6 0520                       	dc.w	$520
000078D8 04                         	dc.b	4
000078D9 00                         	dc.b	0
000078DA 00                         	dc.b	0
000078DB 00                         	dc.b	0
000078DC 0A                         	dc.b	$A
000078DD 01                         	dc.b	1
000078DE 0000 0000                  	dc.l	MapSpr_Spring2
000078E2 0520                       	dc.w	$520
000078E4 04                         	dc.b	4
000078E5 01                         	dc.b	1
000078E6 00                         	dc.b	0
000078E7 00                         	dc.b	0
000078E8 0A                         	dc.b	$A
000078E9 01                         	dc.b	1
000078EA 0000 0000                  	dc.l	MapSpr_Spring3
000078EE 0490                       	dc.w	$490
000078F0 08                         	dc.b	8
000078F1 00                         	dc.b	0
000078F2 00                         	dc.b	0
000078F3 00                         	dc.b	0
000078F4 0A                         	dc.b	$A
000078F5 01                         	dc.b	1
000078F6 0000 0000                  	dc.l	MapSpr_Spring3
000078FA 0490                       	dc.w	$490
000078FC 08                         	dc.b	8
000078FD 02                         	dc.b	2
000078FE 00                         	dc.b	0
000078FF 00                         	dc.b	0
00007900 0A                         	dc.b	$A
00007901 01                         	dc.b	1
00007902 0000 0000                  	dc.l	MapSpr_Spring3
00007906 0490                       	dc.w	$490
00007908 08                         	dc.b	8
00007909 01                         	dc.b	1
0000790A 00                         	dc.b	0
0000790B 00                         	dc.b	0
0000790C 0A                         	dc.b	$A
0000790D 01                         	dc.b	1
0000790E 0000 0000                  	dc.l	MapSpr_Spring3
00007912 0490                       	dc.w	$490
00007914 08                         	dc.b	8
00007915 03                         	dc.b	3
00007916 00                         	dc.b	0
00007917 00                         	dc.b	0
00007918 0A                         	dc.b	$A
00007919 01                         	dc.b	1
0000791A 0000 0000                  	dc.l	MapSpr_Spring1
0000791E 2520                       	dc.w	$2520
00007920 02                         	dc.b	2
00007921 00                         	dc.b	0
00007922 00                         	dc.b	0
00007923 00                         	dc.b	0
00007924 0A                         	dc.b	$A
00007925 01                         	dc.b	1
00007926 0000 0000                  	dc.l	MapSpr_Spring1
0000792A 2520                       	dc.w	$2520
0000792C 02                         	dc.b	2
0000792D 02                         	dc.b	2
0000792E 00                         	dc.b	0
0000792F 00                         	dc.b	0
00007930 0A                         	dc.b	$A
00007931 01                         	dc.b	1
00007932 0000 0000                  	dc.l	MapSpr_Spring2
00007936 2520                       	dc.w	$2520
00007938 06                         	dc.b	6
00007939 00                         	dc.b	0
0000793A 00                         	dc.b	0
0000793B 00                         	dc.b	0
0000793C 0A                         	dc.b	$A
0000793D 01                         	dc.b	1
0000793E 0000 0000                  	dc.l	MapSpr_Spring2
00007942 2520                       	dc.w	$2520
00007944 06                         	dc.b	6
00007945 01                         	dc.b	1
00007946 00                         	dc.b	0
00007947 00                         	dc.b	0
00007948 0A                         	dc.b	$A
00007949 01                         	dc.b	1
0000794A 0000 0000                  	dc.l	MapSpr_Spring3
0000794E 2490                       	dc.w	$2490
00007950 0A                         	dc.b	$A
00007951 00                         	dc.b	0
00007952 00                         	dc.b	0
00007953 00                         	dc.b	0
00007954 0A                         	dc.b	$A
00007955 01                         	dc.b	1
00007956 0000 0000                  	dc.l	MapSpr_Spring3
0000795A 2490                       	dc.w	$2490
0000795C 0A                         	dc.b	$A
0000795D 02                         	dc.b	2
0000795E 00                         	dc.b	0
0000795F 00                         	dc.b	0
00007960 0A                         	dc.b	$A
00007961 01                         	dc.b	1
00007962 0000 0000                  	dc.l	MapSpr_Spring3
00007966 2490                       	dc.w	$2490
00007968 0A                         	dc.b	$A
00007969 01                         	dc.b	1
0000796A 00                         	dc.b	0
0000796B 00                         	dc.b	0
0000796C 0A                         	dc.b	$A
0000796D 01                         	dc.b	1
0000796E 0000 0000                  	dc.l	MapSpr_Spring3
00007972 2490                       	dc.w	$2490
00007974 0A                         	dc.b	$A
00007975 03                         	dc.b	3
00007976 00                         	dc.b	0
00007977 00                         	dc.b	0
00007978 24                         	dc.b	$24
00007979 03                         	dc.b	3
0000797A 0000 0000                  	dc.l	MapSpr_FlyingAnimal
0000797E 0388                       	dc.w	$388
00007980 00                         	dc.b	0
00007981 00                         	dc.b	0
00007982 00                         	dc.b	0
00007983 00                         	dc.b	0
00007984 24                         	dc.b	$24
00007985 03                         	dc.b	3
00007986 0000 0000                  	dc.l	MapSpr_GroundAnimal
0000798A 0388                       	dc.w	$388
0000798C 01                         	dc.b	1
0000798D 00                         	dc.b	0
0000798E 00                         	dc.b	0
0000798F 03                         	dc.b	3
00007990 3D                         	dc.b	$3D
00007991 04                         	dc.b	4
00007992 0000 0000                  	dc.l	MapSpr_Mosqui1
00007996 23A0                       	dc.w	$23A0
00007998 00                         	dc.b	0
00007999 00                         	dc.b	0
0000799A 00                         	dc.b	0
0000799B 00                         	dc.b	0
0000799C 3E                         	dc.b	$3E
0000799D 04                         	dc.b	4
0000799E 0000 0000                  	dc.l	MapSpr_PataBata1
000079A2 23B0                       	dc.w	$23B0
000079A4 00                         	dc.b	0
000079A5 00                         	dc.b	0
000079A6 00                         	dc.b	0
000079A7 00                         	dc.b	0
000079A8 3F                         	dc.b	$3F
000079A9 04                         	dc.b	4
000079AA 0000 0000                  	dc.l	MapSpr_Anton
000079AE 2409                       	dc.w	$2409
000079B0 00                         	dc.b	0
000079B1 00                         	dc.b	0
000079B2 00                         	dc.b	0
000079B3 00                         	dc.b	0
000079B4 22                         	dc.b	$22
000079B5 04                         	dc.b	4
000079B6 0000 0000                  	dc.l	MapSpr_Tamabboh1
000079BA 2428                       	dc.w	$2428
000079BC 00                         	dc.b	0
000079BD 00                         	dc.b	0
000079BE 00                         	dc.b	0
000079BF 00                         	dc.b	0
000079C0 19                         	dc.b	$19
000079C1 04                         	dc.b	4
000079C2 0000 0000                  	dc.l	MapSpr_MonitorTimePost
000079C6 05A8                       	dc.w	$5A8
000079C8 00                         	dc.b	0
000079C9 00                         	dc.b	0
000079CA 00                         	dc.b	0
000079CB 00                         	dc.b	0
000079CC 19                         	dc.b	$19
000079CD 04                         	dc.b	4
000079CE 0000 0000                  	dc.l	MapSpr_MonitorTimePost
000079D2 05A8                       	dc.w	$5A8
000079D4 01                         	dc.b	1
000079D5 00                         	dc.b	0
000079D6 00                         	dc.b	0
000079D7 01                         	dc.b	1
000079D8 19                         	dc.b	$19
000079D9 04                         	dc.b	4
000079DA 0000 0000                  	dc.l	MapSpr_MonitorTimePost
000079DE 05A8                       	dc.w	$5A8
000079E0 02                         	dc.b	2
000079E1 00                         	dc.b	0
000079E2 00                         	dc.b	0
000079E3 02                         	dc.b	2
000079E4 19                         	dc.b	$19
000079E5 04                         	dc.b	4
000079E6 0000 0000                  	dc.l	MapSpr_MonitorTimePost
000079EA 05A8                       	dc.w	$5A8
000079EC 03                         	dc.b	3
000079ED 00                         	dc.b	0
000079EE 00                         	dc.b	0
000079EF 03                         	dc.b	3
000079F0 19                         	dc.b	$19
000079F1 04                         	dc.b	4
000079F2 0000 0000                  	dc.l	MapSpr_MonitorTimePost
000079F6 05A8                       	dc.w	$5A8
000079F8 04                         	dc.b	4
000079F9 00                         	dc.b	0
000079FA 00                         	dc.b	0
000079FB 04                         	dc.b	4
000079FC 19                         	dc.b	$19
000079FD 04                         	dc.b	4
000079FE 0000 0000                  	dc.l	MapSpr_MonitorTimePost
00007A02 05A8                       	dc.w	$5A8
00007A04 05                         	dc.b	5
00007A05 00                         	dc.b	0
00007A06 00                         	dc.b	0
00007A07 05                         	dc.b	5
00007A08 19                         	dc.b	$19
00007A09 04                         	dc.b	4
00007A0A 0000 0000                  	dc.l	MapSpr_MonitorTimePost
00007A0E 05A8                       	dc.w	$5A8
00007A10 06                         	dc.b	6
00007A11 00                         	dc.b	0
00007A12 00                         	dc.b	0
00007A13 06                         	dc.b	6
00007A14 19                         	dc.b	$19
00007A15 04                         	dc.b	4
00007A16 0000 0000                  	dc.l	MapSpr_MonitorTimePost
00007A1A 05A8                       	dc.w	$5A8
00007A1C 07                         	dc.b	7
00007A1D 00                         	dc.b	0
00007A1E 00                         	dc.b	0
00007A1F 07                         	dc.b	7
00007A20 0E                         	dc.b	$E
00007A21 01                         	dc.b	1
00007A22 0000 0000                  	dc.l	MapSpr_WaterfallSplash
00007A26 03E4                       	dc.w	$3E4
00007A28 00                         	dc.b	0
00007A29 00                         	dc.b	0
00007A2A 00                         	dc.b	0
00007A2B 00                         	dc.b	0
00007A2C 20                         	dc.b	$20
00007A2D 03                         	dc.b	3
00007A2E 0000 0000                  	dc.l	MapSpr_CollapsePlatform1
00007A32 44BE                       	dc.w	$44BE
00007A34 10                         	dc.b	$10
00007A35 01                         	dc.b	1
00007A36 00                         	dc.b	0
00007A37 00                         	dc.b	0
00007A38 20                         	dc.b	$20
00007A39 03                         	dc.b	3
00007A3A 0000 0000                  	dc.l	MapSpr_CollapsePlatform1
00007A3E 44BE                       	dc.w	$44BE
00007A40 00                         	dc.b	0
00007A41 00                         	dc.b	0
00007A42 00                         	dc.b	0
00007A43 00                         	dc.b	0
00007A44 20                         	dc.b	$20
00007A45 03                         	dc.b	3
00007A46 0000 0000                  	dc.l	MapSpr_CollapsePlatform2
00007A4A 44BE                       	dc.w	$44BE
00007A4C 80                         	dc.b	$80
00007A4D 00                         	dc.b	0
00007A4E 00                         	dc.b	0
00007A4F 00                         	dc.b	0
00007A50 20                         	dc.b	$20
00007A51 03                         	dc.b	3
00007A52 0000 0000                  	dc.l	MapSpr_CollapsePlatform2
00007A56 44BE                       	dc.w	$44BE
00007A58 81                         	dc.b	$81
00007A59 00                         	dc.b	0
00007A5A 00                         	dc.b	0
00007A5B 01                         	dc.b	1
00007A5C 20                         	dc.b	$20
00007A5D 03                         	dc.b	3
00007A5E 0000 0000                  	dc.l	MapSpr_CollapsePlatform2
00007A62 44BE                       	dc.w	$44BE
00007A64 82                         	dc.b	$82
00007A65 00                         	dc.b	0
00007A66 00                         	dc.b	0
00007A67 02                         	dc.b	2
00007A68 20                         	dc.b	$20
00007A69 03                         	dc.b	3
00007A6A 0000 0000                  	dc.l	MapSpr_CollapsePlatform2
00007A6E 44BE                       	dc.w	$44BE
00007A70 83                         	dc.b	$83
00007A71 00                         	dc.b	0
00007A72 00                         	dc.b	0
00007A73 03                         	dc.b	3
00007A74 20                         	dc.b	$20
00007A75 03                         	dc.b	3
00007A76 0000 0000                  	dc.l	MapSpr_CollapsePlatform2
00007A7A 44BE                       	dc.w	$44BE
00007A7C 84                         	dc.b	$84
00007A7D 00                         	dc.b	0
00007A7E 00                         	dc.b	0
00007A7F 04                         	dc.b	4
00007A80 20                         	dc.b	$20
00007A81 03                         	dc.b	3
00007A82 0000 0000                  	dc.l	MapSpr_CollapsePlatform2
00007A86 44BE                       	dc.w	$44BE
00007A88 85                         	dc.b	$85
00007A89 00                         	dc.b	0
00007A8A 00                         	dc.b	0
00007A8B 05                         	dc.b	5
00007A8C 19                         	dc.b	$19
00007A8D 04                         	dc.b	4
00007A8E 0000 0000                  	dc.l	MapSpr_MonitorTimePost
00007A92 05A8                       	dc.w	$5A8
00007A94 08                         	dc.b	8
00007A95 00                         	dc.b	0
00007A96 00                         	dc.b	0
00007A97 0A                         	dc.b	$A
00007A98 19                         	dc.b	$19
00007A99 04                         	dc.b	4
00007A9A 0000 0000                  	dc.l	MapSpr_MonitorTimePost
00007A9E 05A8                       	dc.w	$5A8
00007AA0 09                         	dc.b	9
00007AA1 00                         	dc.b	0
00007AA2 00                         	dc.b	0
00007AA3 0C                         	dc.b	$C
00007AA4 13                         	dc.b	$13
00007AA5 03                         	dc.b	3
00007AA6 0000 0000                  	dc.l	MapSpr_Checkpoint
00007AAA 06CB                       	dc.w	$6CB
00007AAC 01                         	dc.b	1
00007AAD 00                         	dc.b	0
00007AAE 00                         	dc.b	0
00007AAF 00                         	dc.b	0
00007AB0 34                         	dc.b	$34
00007AB1 03                         	dc.b	3
00007AB2 0000 0000                  	dc.l	MapSpr_Powerup
00007AB6 0544                       	dc.w	$544
00007AB8 00                         	dc.b	0
00007AB9 00                         	dc.b	0
00007ABA 00                         	dc.b	0
00007ABB 01                         	dc.b	1
00007ABC 34                         	dc.b	$34
00007ABD 03                         	dc.b	3
00007ABE 0000 0000                  	dc.l	MapSpr_Powerup
00007AC2 0544                       	dc.w	$544
00007AC4 01                         	dc.b	1
00007AC5 00                         	dc.b	0
00007AC6 00                         	dc.b	0
00007AC7 02                         	dc.b	2
00007AC8                            ; -------------------------------------------------------------------------------
00007AC8                            
00007AC8                            ResetRespawnTable:
00007AC8 45F9 00FF 1200             	lea	(v_obj_respawns).l,a2
00007ACE 34FC 0101                  	move.w	#$101,(a2)+
00007AD2 303C 00BE                  	move.w	#$BE,d0
00007AD6                            
00007AD6                            .Clear:
00007AD6 429A                       	clr.l	(a2)+
00007AD8 51C8 FFFC                  	dbf	d0,.Clear
00007ADC 4E75                       	rts
00007ADE                            ; End of function ResetRespawnTable
00007ADE                            
00007ADE                            ; -------------------------------------------------------------------------------
00007ADE                            
00007ADE                            LevelObjManager:
00007ADE 7000                       	moveq	#0,d0
00007AE0 1038 F76C                  	move.b	(v_lvl_obj_man_rout).w,d0
00007AE4 303B 0000                  	move.w	LvlObjMan_Index(pc,d0.w),d0
00007AE8 4EFB 0000                  	jmp	LvlObjMan_Index(pc,d0.w)
00007AEC                            ; End of function LevelObjManager
00007AEC                            
00007AEC                            ; -------------------------------------------------------------------------------
00007AEC 0000                       LvlObjMan_Index:dc.w	LvlObjMan_Init-LvlObjMan_Index
00007AEE 0000                       	dc.w	LvlObjMan_Main-LvlObjMan_Index
00007AF0                            ; -------------------------------------------------------------------------------
00007AF0                            
00007AF0                            LvlObjMan_Init:
00007AF0 5438 F76C                  	addq.b	#2,(v_lvl_obj_man_rout).w
00007AF4                            
00007AF4 3039 00FF 1506             	move.w	(v_zone).l,d0
00007AFA ED08                       	lsl.b	#6,d0
00007AFC E848                       	lsr.w	#4,d0
00007AFE                            
00007AFE 41F9 0000 0000             	lea	(LevelObjectIndex).l,a0
00007B04 2248                           movea.l	a0,a1
00007B06 D0F0 0000                  	adda.w	(a0,d0.w),a0
00007B0A                            
00007B0A                            ;	movea.l	a0,a1
00007B0A                            ;	adda.w	(a0),a0
00007B0A 21C8 F770                  	move.l	a0,(v_obj_load_addr_right).w
00007B0E 21C8 F774                  	move.l	a0,(v_obj_load_addr_left).w
00007B12 D2E9 0002                  	adda.w	2(a1),a1
00007B16 21C9 F778                  	move.l	a1,(v_obj_load_addr2_right).w
00007B1A 21C9 F77C                  	move.l	a1,(v_obj_load_addr2_left).w
00007B1E 45F9 00FF 1200             	lea	(v_obj_respawns).l,a2
00007B24 34BC 0101                  	move.w	#$101,(a2)
00007B28 7400                       	moveq	#0,d2
00007B2A 3C38 F700                  	move.w	(v_cam_fg_x).w,d6
00007B2E 0446 0080                  	subi.w	#$80,d6
00007B32 6400                       	bcc.s	.SkipLCap
00007B34 7C00                       	moveq	#0,d6
00007B36                            
00007B36                            .SkipLCap:
00007B36 0246 FF80                  	andi.w	#$FF80,d6
00007B3A 2078 F770                  	movea.l	(v_obj_load_addr_right).w,a0
00007B3E                            
00007B3E                            .ScanRight:
00007B3E BC50                       	cmp.w	(a0),d6
00007B40 6300                       	bls.s	.FoundRightmost
00007B42 4A28 0004                  	tst.b	4(a0)
00007B46 6A00                       	bpl.s	.NextObj
00007B48 1412                       	move.b	(a2),d2
00007B4A 5212                       	addq.b	#1,(a2)
00007B4C                            
00007B4C                            .NextObj:
00007B4C 5048                       	addq.w	#8,a0
00007B4E 60EE                       	bra.s	.ScanRight
00007B50                            
00007B50                            ; -------------------------------------------------------------------------------
00007B50                            
00007B50                            .FoundRightmost:
00007B50 21C8 F770                  	move.l	a0,(v_obj_load_addr_right).w
00007B54 2078 F774                  	movea.l	(v_obj_load_addr_left).w,a0
00007B58 0446 0080                  	subi.w	#$80,d6
00007B5C 6500                       	bcs.s	.FoundRightmost2
00007B5E                            
00007B5E                            .ScanRight2:
00007B5E BC50                       	cmp.w	(a0),d6
00007B60 6300                       	bls.s	.FoundRightmost2
00007B62 4A28 0004                  	tst.b	4(a0)
00007B66 6A00                       	bpl.s	.NextObj2
00007B68 522A 0001                  	addq.b	#1,1(a2)
00007B6C                            
00007B6C                            .NextObj2:
00007B6C 5048                       	addq.w	#8,a0
00007B6E 60EE                       	bra.s	.ScanRight2
00007B70                            
00007B70                            ; -------------------------------------------------------------------------------
00007B70                            
00007B70                            .FoundRightmost2:
00007B70 21C8 F774                  	move.l	a0,(v_obj_load_addr_left).w
00007B74 31FC FFFF F76E             	move.w	#-1,(v_obj_prev_cam_x).w
00007B7A                            ; End of function LvlObjMan_Init
00007B7A                            
00007B7A                            ; -------------------------------------------------------------------------------
00007B7A                            
00007B7A                            LvlObjMan_Main:
00007B7A 45F9 00FF 1200             	lea	(v_obj_respawns).l,a2
00007B80 7400                       	moveq	#0,d2
00007B82 3C38 F700                  	move.w	(v_cam_fg_x).w,d6
00007B86 0246 FF80                  	andi.w	#$FF80,d6
00007B8A BC78 F76E                  	cmp.w	(v_obj_prev_cam_x).w,d6
00007B8E 6700 0000                  	beq.w	LvlObjMan_SameXRange
00007B92 6C00                       	bge.s	LvlObjMan_Forward
00007B94 4E71                       	nop
00007B96 4E71                       	nop
00007B98 4E71                       	nop
00007B9A 4E71                       	nop
00007B9C 31C6 F76E                  	move.w	d6,(v_obj_prev_cam_x).w
00007BA0 2078 F774                  	movea.l	(v_obj_load_addr_left).w,a0
00007BA4 0446 0080                  	subi.w	#$80,d6
00007BA8 6500                       	bcs.s	.ScanLeft
00007BAA                            
00007BAA                            .Loop:
00007BAA BC68 FFF8                  	cmp.w	-8(a0),d6
00007BAE 6C00                       	bge.s	.ScanLeft
00007BB0 5148                       	subq.w	#8,a0
00007BB2 4A28 0004                  	tst.b	4(a0)
00007BB6 6A00                       	bpl.s	.NoRespawn
00007BB8 532A 0001                  	subq.b	#1,1(a2)
00007BBC 142A 0001                  	move.b	1(a2),d2
00007BC0                            
00007BC0                            .NoRespawn:
00007BC0 6100 0000                  	bsr.w	LevelLoadObj
00007BC4 6600                       	bne.s	.ScanDone
00007BC6 5148                       	subq.w	#8,a0
00007BC8 60E0                       	bra.s	.Loop
00007BCA                            
00007BCA                            ; -------------------------------------------------------------------------------
00007BCA                            
00007BCA                            .ScanDone:
00007BCA 4A28 0004                  	tst.b	4(a0)
00007BCE 6A00                       	bpl.s	.NoRespawn2
00007BD0 522A 0001                  	addq.b	#1,1(a2)
00007BD4 08B2 0007 3002             	bclr	#7,2(a2,d3.w)
00007BDA                            
00007BDA                            .NoRespawn2:
00007BDA 5048                       	addq.w	#8,a0
00007BDC                            
00007BDC                            .ScanLeft:
00007BDC 21C8 F774                  	move.l	a0,(v_obj_load_addr_left).w
00007BE0 2078 F770                  	movea.l	(v_obj_load_addr_right).w,a0
00007BE4 0646 0300                  	addi.w	#$300,d6
00007BE8                            
00007BE8                            .Loop2:
00007BE8 BC68 FFF8                  	cmp.w	-8(a0),d6
00007BEC 6E00                       	bgt.s	.End
00007BEE 4A28 FFFC                  	tst.b	-4(a0)
00007BF2 6A00                       	bpl.s	.NextObj
00007BF4 5312                       	subq.b	#1,(a2)
00007BF6                            
00007BF6                            .NextObj:
00007BF6 5148                       	subq.w	#8,a0
00007BF8 60EE                       	bra.s	.Loop2
00007BFA                            
00007BFA                            ; -------------------------------------------------------------------------------
00007BFA                            
00007BFA                            .End:
00007BFA 21C8 F770                  	move.l	a0,(v_obj_load_addr_right).w
00007BFE 4E75                       	rts
00007C00                            
00007C00                            ; -------------------------------------------------------------------------------
00007C00                            
00007C00                            LvlObjMan_Forward:
00007C00 4E71                       	nop
00007C02 4E71                       	nop
00007C04 4E71                       	nop
00007C06 4E71                       	nop
00007C08 31C6 F76E                  	move.w	d6,(v_obj_prev_cam_x).w
00007C0C 2078 F770                  	movea.l	(v_obj_load_addr_right).w,a0
00007C10 0646 0280                  	addi.w	#$280,d6
00007C14                            
00007C14                            .Loop3:
00007C14 BC50                       	cmp.w	(a0),d6
00007C16 6300                       	bls.s	.ScanDone2
00007C18 4A28 0004                  	tst.b	4(a0)
00007C1C 6A00                       	bpl.s	.NoRespawn3
00007C1E 1412                       	move.b	(a2),d2
00007C20 5212                       	addq.b	#1,(a2)
00007C22                            
00007C22                            .NoRespawn3:
00007C22 6100 0000                  	bsr.w	LevelLoadObj
00007C26 67EC                       	beq.s	.Loop3
00007C28 4A28 0004                  	tst.b	4(a0)
00007C2C 6A00                       	bpl.s	.ScanDone2
00007C2E 5312                       	subq.b	#1,(a2)
00007C30 08B2 0007 3002             	bclr	#7,2(a2,d3.w)
00007C36                            
00007C36                            .ScanDone2:
00007C36 21C8 F770                  	move.l	a0,(v_obj_load_addr_right).w
00007C3A 2078 F774                  	movea.l	(v_obj_load_addr_left).w,a0
00007C3E 0446 0300                  	subi.w	#$300,d6
00007C42 6500                       	bcs.s	.End2
00007C44                            
00007C44                            .ScanRight:
00007C44 BC50                       	cmp.w	(a0),d6
00007C46 6300                       	bls.s	.End2
00007C48 4A28 0004                  	tst.b	4(a0)
00007C4C 6A00                       	bpl.s	.NextObj2
00007C4E 522A 0001                  	addq.b	#1,1(a2)
00007C52                            
00007C52                            .NextObj2:
00007C52 5048                       	addq.w	#8,a0
00007C54 60EE                       	bra.s	.ScanRight
00007C56                            
00007C56                            ; -------------------------------------------------------------------------------
00007C56                            
00007C56                            .End2:
00007C56 21C8 F774                  	move.l	a0,(v_obj_load_addr_left).w
00007C5A                            
00007C5A                            LvlObjMan_SameXRange:
00007C5A 4E75                       	rts
00007C5C                            ; End of function LvlObjMan_Main
00007C5C                            
00007C5C                            ; -------------------------------------------------------------------------------
00007C5C                            
00007C5C                            CheckObjOccurs:
00007C5C 7000                       	moveq	#0,d0
00007C5E 1039 00FF 152E             	move.b	(v_time_zone).l,d0
00007C64 0880 0007                  	bclr	#7,d0
00007C68 3602                       	move.w	d2,d3
00007C6A D643                       	add.w	d3,d3
00007C6C D642                       	add.w	d2,d3
00007C6E D640                       	add.w	d0,d3
00007C70 1228 0006                  	move.b	6(a0),d1
00007C74 E719                       	rol.b	#3,d1
00007C76 0201 0007                  	andi.b	#7,d1
00007C7A 0101                       	btst	d0,d1
00007C7C 4E75                       	rts
00007C7E                            ; End of function CheckObjOccurs
00007C7E                            
00007C7E                            ; -------------------------------------------------------------------------------
00007C7E                            
00007C7E                            LevelLoadObj:
00007C7E 61DC                       	bsr.s	CheckObjOccurs
00007C80 6700                       	beq.s	.SkipObj
00007C82 4A28 0004                  	tst.b	4(a0)
00007C86 6A00                       	bpl.s	.Load
00007C88 08F2 0007 3002             	bset	#7,2(a2,d3.w)
00007C8E 6700                       	beq.s	.Load
00007C90                            
00007C90                            .SkipObj:
00007C90 5048                       	addq.w	#8,a0
00007C92 7000                       	moveq	#0,d0
00007C94 4E75                       	rts
00007C96                            
00007C96                            ; -------------------------------------------------------------------------------
00007C96                            
00007C96                            .Load:
00007C96 6100 0000                  	bsr.w	FindObjSlot
00007C9A 6600                       	bne.s	.End
00007C9C 3358 0008                  	move.w	(a0)+,oX(a1)
00007CA0 3018                       	move.w	(a0)+,d0
00007CA2 3200                       	move.w	d0,d1
00007CA4 0240 0FFF                  	andi.w	#$FFF,d0
00007CA8 3340 000C                  	move.w	d0,oY(a1)
00007CAC E559                       	rol.w	#2,d1
00007CAE 0201 0003                  	andi.b	#3,d1
00007CB2 1341 0001                  	move.b	d1,oRender(a1)
00007CB6 1341 0022                  	move.b	d1,oStatus(a1)
00007CBA 1018                       	move.b	(a0)+,d0
00007CBC 6A00                       	bpl.s	.NoRespawn
00007CBE 0200 007F                  	andi.b	#$7F,d0
00007CC2 1342 0023                  	move.b	d2,oRespawn(a1)
00007CC6                            
00007CC6                            .NoRespawn:
00007CC6 1280                       	move.b	d0,oID(a1)
00007CC8 0C00 0031                  	cmpi.b	#$31,d0
00007CCC 6600                       	bne.s	.SetFields
00007CCE 4E71                       	nop
00007CD0 4E71                       	nop
00007CD2 4E71                       	nop
00007CD4 4E71                       	nop
00007CD6                            
00007CD6                            .SetFields:
00007CD6 1358 0028                  	move.b	(a0)+,oSubtype(a1)
00007CDA 1018                       	move.b	(a0)+,d0
00007CDC 1358 0029                  	move.b	(a0)+,oSubtype2(a1)
00007CE0 7000                       	moveq	#0,d0
00007CE2                            
00007CE2                            .End:
00007CE2 4E75                       	rts
00007CE4                            ; End of function LevelLoadObj
00007CE4                            
00007CE4                            ; -------------------------------------------------------------------------------
00007CE4                            
00007CE4                            FindObjSlot:
00007CE4 43F8 D800                  	lea	(v_dyn_objects).w,a1
00007CE8 303C 005F                  	move.w	#$5F,d0
00007CEC                            
00007CEC                            .Find:
00007CEC 4A11                       	tst.b	(a1)
00007CEE 6700                       	beq.s	.End
00007CF0 43E9 0040                  	lea	oVarLen(a1),a1
00007CF4 51C8 FFF6                  	dbf	d0,.Find
00007CF8                            
00007CF8                            .End:
00007CF8 4E75                       	rts
00007CFA                            ; End of function FindObjSlot
00007CFA                            
00007CFA                            ; -------------------------------------------------------------------------------
00007CFA                            
00007CFA                            FindNextObjSlot:
00007CFA 2248                       	movea.l	a0,a1
00007CFC 43E9 0040                  	lea	oVarLen(a1),a1
00007D00 303C F000                  	move.w	#v_objects_end,d0
00007D04 9048                       	sub.w	a0,d0
00007D06 EC48                       	lsr.w	#6,d0
00007D08 5540                       	subq.w	#2,d0
00007D0A 6500                       	bcs.s	.End
00007D0C                            
00007D0C                            .Find:
00007D0C 4A11                       	tst.b	(a1)
00007D0E 6700                       	beq.s	.End
00007D10 43E9 0040                  	lea	oVarLen(a1),a1
00007D14 51C8 FFF6                  	dbf	d0,.Find
00007D18                            
00007D18                            .End:
00007D18 4E75                       	rts
00007D1A                            ; End of function FindNextObjSlot
00007D1A                            
00007D1A                            ; -------------------------------------------------------------------------------
00007D1A                            
00007D1A                            CheckObjDespawnTime:
00007D1A 3028 0008                  	move.w	8(a0),d0
00007D1E                            ; End of function CheckObjDespawnTime
00007D1E                            
00007D1E                            ; START	OF FUNCTION CHUNK FOR ObjAnton
00007D1E                            
00007D1E                            CheckObjDespawn2Time:
00007D1E 4A28 0001                  	tst.b	oRender(a0)
00007D22 6B00                       	bmi.s	CheckObjDespawn_OnScreen
00007D24 0240 FF80                  	andi.w	#$FF80,d0
00007D28 3238 F700                  	move.w	(v_cam_fg_x).w,d1
00007D2C 0441 0080                  	subi.w	#$80,d1
00007D30 0241 FF80                  	andi.w	#$FF80,d1
00007D34 9041                       	sub.w	d1,d0
00007D36 0C40 0280                  	cmpi.w	#$280,d0
00007D3A 6300                       	bls.s	CheckObjDespawn_OnScreen
00007D3C                            
00007D3C                            CheckObjDespawnTime_Despawn:
00007D3C 7000                       	moveq	#0,d0
00007D3E 1028 0023                  	move.b	oRespawn(a0),d0
00007D42 6700                       	beq.s	.DelObj
00007D44 43F9 00FF 1200             	lea	(v_obj_respawns).l,a1
00007D4A 3200                       	move.w	d0,d1
00007D4C D241                       	add.w	d1,d1
00007D4E D041                       	add.w	d1,d0
00007D50 7200                       	moveq	#0,d1
00007D52 1239 00FF 152E             	move.b	(v_time_zone).l,d1
00007D58 0881 0007                  	bclr	#7,d1
00007D5C 6700                       	beq.s	.SetRespawn
00007D5E 1438 F784                  	move.b	(v_time_warp_dir).w,d2
00007D62 4882                       	ext.w	d2
00007D64 4442                       	neg.w	d2
00007D66 D242                       	add.w	d2,d1
00007D68 6A00                       	bpl.s	.NoCap
00007D6A 7200                       	moveq	#0,d1
00007D6C 6000                       	bra.s	.SetRespawn
00007D6E                            
00007D6E                            ; -------------------------------------------------------------------------------
00007D6E                            
00007D6E                            .NoCap:
00007D6E 0C41 0003                  	cmpi.w	#3,d1
00007D72 6500                       	bcs.s	.SetRespawn
00007D74 7202                       	moveq	#2,d1
00007D76                            
00007D76                            .SetRespawn:
00007D76 D041                       	add.w	d1,d0
00007D78 08B1 0007 0002             	bclr	#7,2(a1,d0.w)
00007D7E                            
00007D7E                            .DelObj:
00007D7E 4EB8 40BE                  	jsr	DeleteObject
00007D82 7001                       	moveq	#1,d0
00007D84 4E75                       	rts
00007D86                            
00007D86                            ; -------------------------------------------------------------------------------
00007D86                            
00007D86                            CheckObjDespawn_OnScreen:
00007D86 0839 0007 00FF 152E        	btst	#7,(v_time_zone).l
00007D8E 66AC                       	bne.s	CheckObjDespawnTime_Despawn
00007D90 7000                       	moveq	#0,d0
00007D92 4E75                       	rts
00007D94                            ; END OF FUNCTION CHUNK	FOR ObjAnton
00007D94                            
00007D94                            ; -------------------------------------------------------------------------------
00007D94                            LevelObjectIndex:	
00007D94 0000 0000                      dc.w Objects_PPZ1A-LevelObjectIndex, ObjPos_Null-LevelObjectIndex
00007D98 0000 0000                  	dc.w Objects_PPZ2A-LevelObjectIndex, ObjPos_Null-LevelObjectIndex
00007D9C 0000 0000                  	dc.w Objects_PPZ3C-LevelObjectIndex, ObjPos_Null-LevelObjectIndex
00007DA0 0000 0000                  	dc.w Objects_PPZ1A-LevelObjectIndex, ObjPos_Null-LevelObjectIndex
00007DA4                            
00007DA4 FFFF 0000 0000 0000        	dc.w	$FFFF, 0, 0, 0
00007DAC                            Objects_PPZ1A:
00007DAC                            	incbin	"level/level/PPZ1/objPos/objects.bin"
00008D3C                            	even
00008D3C                            ;Objects_PPZ1B:
00008D3C                            	;incbin	"level/level/PPZ1/objPos/objects_R11B.bin"
00008D3C                            	;even
00008D3C                            ;Objects_PPZ1C:
00008D3C                            	;incbin	"level/level/PPZ1/objPos/R11C.bin"
00008D3C                            	;even
00008D3C                            ;Objects_PPZ1D:
00008D3C                            	;incbin	"level/level/PPZ1/objPos/R11D.bin"
00008D3C                            	;even
00008D3C                            Objects_PPZ2A:
00008D3C                            	incbin	"level/level/PPZ2/objPos/R12A.bin"
00009C84                            	even
00009C84                            ;Objects_PPZ2B:
00009C84                            	;incbin	"level/level/PPZ2/objPos/R12A.bin"
00009C84                            	;even
00009C84                            ;Objects_PPZ2C:
00009C84                            	;incbin	"level/level/PPZ2/objPos/R12A.bin"
00009C84                            	;even
00009C84                            ;Objects_PPZ2D:
00009C84                            	;incbin	"level/level/PPZ2/objPos/R12A.bin"
00009C84                            	;even
00009C84                            Objects_PPZ3C:
00009C84                            	incbin	"level/level/PPZ3/objPos/R13C.bin"
00009E74                            	even	
00009E74                            ;Objects_PPZ3D:
00009E74                            	;incbin	"level/level/PPZ3/objPos/R13D.bin"
00009E74                            	;even	
00009E74                            ObjPos_Null:
00009E74 FFFF 0000 0000             Objects_Null:	dc.w	$FFFF, 0, 0
00009E7A                            ; -------------------------------------------------------------------------------
00009E7A                            
00009E7A                            ObjScenery:
00009E7A 7000                       	moveq	#0,d0
00009E7C 1028 0024                  	move.b	oRoutine(a0),d0
00009E80 303B 0000                  	move.w	ObjScenery_Index(pc,d0.w),d0
00009E84 4EBB 0000                  	jsr	ObjScenery_Index(pc,d0.w)
00009E88 4EB8 4012                  	jsr	DrawObject
00009E8C 4EF8 7D1A                  	jmp	CheckObjDespawnTime
00009E90                            ; End of function ObjScenery
00009E90                            
00009E90                            ; -------------------------------------------------------------------------------
00009E90 0000                       ObjScenery_Index:dc.w	ObjScenery_Init-ObjScenery_Index
00009E92 0000                       	dc.w	ObjScenery_Main-ObjScenery_Index
00009E94                            ; -------------------------------------------------------------------------------
00009E94                            
00009E94                            ObjScenery_Init:
00009E94 5428 0024                  	addq.b	#2,oRoutine(a0)
00009E98 0028 0004 0001             	ori.b	#4,oRender(a0)
00009E9E 217C 0000 0000 0004        	move.l	#MapSpr_Scenery,oMap(a0)
00009EA6 1168 0028 001A             	move.b	oSubtype(a0),oMapFrame(a0)
00009EAC 117C 0010 0019             	move.b	#$10,oWidth(a0)
00009EB2 117C 0018 0016             	move.b	#$18,oYRadius(a0)
00009EB8 6100 0000                  	bsr.w	ObjScenery_SetBaseTile
00009EBC                            ; End of function ObjScenery_Init
00009EBC                            
00009EBC                            ; -------------------------------------------------------------------------------
00009EBC                            
00009EBC                            ObjScenery_Main:
00009EBC 4E75                       	rts
00009EBE                            ; End of function ObjScenery_Main
00009EBE                            
00009EBE                            ; -------------------------------------------------------------------------------
00009EBE                            
00009EBE                            ObjScenery_SetBaseTile:
00009EBE 7000                       	moveq	#0,d0
00009EC0 1039 00FF 152E             	move.b	(v_time_zone).l,d0
00009EC6 0200 007F                  	andi.b	#$7F,d0
00009ECA 0C00 0002                  	cmpi.b	#2,d0
00009ECE 6600                       	bne.s	.NotFuture
00009ED0 7001                       	moveq	#1,d0
00009ED2 D039 00FF 156A             	add.b	(v_good_future).l,d0
00009ED8                            
00009ED8                            .NotFuture:
00009ED8 D040                       	add.w	d0,d0
00009EDA D039 00FF 1507             	add.b	(v_act).l,d0
00009EE0 D040                       	add.w	d0,d0
00009EE2 317B 0000 0002             	move.w	ObjScenery_BaseTileList(pc,d0.w),oTile(a0)
00009EE8 0068 4000 0002             	ori.w	#$4000,oTile(a0)
00009EEE 4E75                       	rts
00009EF0                            ; End of function ObjScenery_SetBaseTile
00009EF0                            
00009EF0                            ; -------------------------------------------------------------------------------
00009EF0                            ObjScenery_BaseTileList:
00009EF0 03DB                       	dc.w	$3DB
00009EF2 046E                       	dc.w	$46E
00009EF4 0438                       	dc.w	$438
00009EF6 039F                       	dc.w	$39F
00009EF8 0438                       	dc.w	$438
00009EFA 038F                       	dc.w	$38F
00009EFC                            MapSpr_Scenery:
00009EFC                            	include	"level/objects/scenery/map.asm"
00009EFC                            .Map:
00009EFC 0000                       	dc.w	unk_208928-.Map
00009EFE 0000                       	dc.w	unk_208934-.Map
00009F00 0000                       	dc.w	unk_20894A-.Map
00009F02 02                         unk_208928:	dc.b	  2
00009F03 F4                         	dc.b	$F4 ; ô
00009F04 04                         	dc.b	  4
00009F05 00                         	dc.b	  0
00009F06 00                         	dc.b	  0
00009F07 F0                         	dc.b	$F0 ; ð
00009F08 FC                         	dc.b	$FC ; ü
00009F09 0D                         	dc.b	 $D
00009F0A 00                         	dc.b	  0
00009F0B 02                         	dc.b	  2
00009F0C F0                         	dc.b	$F0 ; ð
00009F0D 00                         	dc.b	  0
00009F0E 04                         unk_208934:	dc.b	  4
00009F0F EC                         	dc.b	$EC ; ì
00009F10 04                         	dc.b	  4
00009F11 08                         	dc.b	  8
00009F12 00                         	dc.b	  0
00009F13 00                         	dc.b	  0
00009F14 F4                         	dc.b	$F4 ; ô
00009F15 09                         	dc.b	  9
00009F16 00                         	dc.b	  0
00009F17 0A                         	dc.b	 $A
00009F18 F0                         	dc.b	$F0 ; ð
00009F19 F4                         	dc.b	$F4 ; ô
00009F1A 00                         	dc.b	  0
00009F1B 00                         	dc.b	  0
00009F1C 10                         	dc.b	$10
00009F1D 08                         	dc.b	  8
00009F1E 04                         	dc.b	  4
00009F1F 0D                         	dc.b	 $D
00009F20 00                         	dc.b	  0
00009F21 02                         	dc.b	  2
00009F22 F0                         	dc.b	$F0 ; ð
00009F23 00                         	dc.b	  0
00009F24 04                         unk_20894A:	dc.b	  4
00009F25 F0                         	dc.b	$F0 ; ð
00009F26 00                         	dc.b	  0
00009F27 00                         	dc.b	  0
00009F28 00                         	dc.b	  0
00009F29 04                         	dc.b	  4
00009F2A F8                         	dc.b	$F8 ; ø
00009F2B 00                         	dc.b	  0
00009F2C 08                         	dc.b	  8
00009F2D 00                         	dc.b	  0
00009F2E F4                         	dc.b	$F4 ; ô
00009F2F 00                         	dc.b	  0
00009F30 00                         	dc.b	  0
00009F31 00                         	dc.b	  0
00009F32 00                         	dc.b	  0
00009F33 04                         	dc.b	  4
00009F34 F0                         	dc.b	$F0 ; ð
00009F35 02                         	dc.b	  2
00009F36 00                         	dc.b	  0
00009F37 01                         	dc.b	  1
00009F38 FC                         	dc.b	$FC ; ü
00009F39 00                         	dc.b	  0
00009F39 00                         	dc.b	  0
00009F3A                            	even
00009F3A                            ; -------------------------------------------------------------------------------
00009F3A                            
00009F3A                            ObjHollowLogBG:
00009F3A 7000                       	moveq	#0,d0
00009F3C 1028 0024                  	move.b	oRoutine(a0),d0
00009F40 303B 0000                  	move.w	ObjHollowLogBG_Index(pc,d0.w),d0
00009F44 4EBB 0000                  	jsr	ObjHollowLogBG_Index(pc,d0.w)
00009F48 4EB8 4012                  	jsr	DrawObject
00009F4C 4EF8 7D1A                  	jmp	CheckObjDespawnTime
00009F50                            ; End of function ObjHollowLogBG
00009F50                            
00009F50                            ; -------------------------------------------------------------------------------
00009F50                            ObjHollowLogBG_Index:
00009F50 0000                       	dc.w	ObjHollowLogBG_Init-ObjHollowLogBG_Index
00009F52 0000                       	dc.w	ObjHollowLogBG_Main-ObjHollowLogBG_Index
00009F54                            ; -------------------------------------------------------------------------------
00009F54                            
00009F54                            ObjHollowLogBG_Init:
00009F54 5428 0024                  	addq.b	#2,oRoutine(a0)
00009F58 0028 0004 0001             	ori.b	#4,oRender(a0)
00009F5E 117C 0006 0018             	move.b	#6,oPriority(a0)
00009F64 217C 0000 0000 0004        	move.l	#MapSpr_HollowLogBG,oMap(a0)
00009F6C 1168 0028 001A             	move.b	oSubtype(a0),oMapFrame(a0)
00009F72 117C 0010 0019             	move.b	#$10,oWidth(a0)
00009F78 117C 0010 0016             	move.b	#$10,oYRadius(a0)
00009F7E 6100 0000                  	bsr.w	ObjHollowLogBG_SetBaseTile
00009F82                            ; End of function ObjHollowLogBG_Init
00009F82                            
00009F82                            ; -------------------------------------------------------------------------------
00009F82                            
00009F82                            ObjHollowLogBG_Main:
00009F82 4E75                       	rts
00009F84                            ; End of function ObjHollowLogBG_Main
00009F84                            
00009F84                            ; -------------------------------------------------------------------------------
00009F84                            
00009F84                            ObjHollowLogBG_SetBaseTile:
00009F84 7000                       	moveq	#0,d0
00009F86 1039 00FF 152E             	move.b	(v_time_zone).l,d0
00009F8C 0200 007F                  	andi.b	#$7F,d0
00009F90 0C00 0002                  	cmpi.b	#2,d0
00009F94 6600                       	bne.s	.NotFuture
00009F96 D039 00FF 156A             	add.b	(v_good_future).l,d0
00009F9C                            
00009F9C                            .NotFuture:
00009F9C D040                       	add.w	d0,d0
00009F9E D039 00FF 1507             	add.b	(v_act).l,d0
00009FA4 D040                       	add.w	d0,d0
00009FA6 317B 0000 0002             	move.w	ObjHollowLogBG_BaseTileList(pc,d0.w),oTile(a0)
00009FAC 0068 4000 0002             	ori.w	#$4000,oTile(a0)
00009FB2 4E75                       	rts
00009FB4                            ; End of function ObjHollowLogBG_SetBaseTile
00009FB4                            
00009FB4                            ; -------------------------------------------------------------------------------
00009FB4                            ObjHollowLogBG_BaseTileList:
00009FB4 03CB 045E                  	dc.w	$3CB, $45E
00009FB8 0418 03F0                  	dc.w	$418, $3F0
00009FBC 0428 038F                  	dc.w	$428, $38F
00009FC0 0428 037F                  	dc.w	$428, $37F
00009FC4                            MapSpr_HollowLogBG:
00009FC4                            	include	"level/objects/logbg/map.asm"
00009FC4                            .Map:
00009FC4 0000                       	dc.w	unk_2089F2-.Map
00009FC6 0000                       	dc.w	unk_2089F8-.Map
00009FC8 01                         unk_2089F2:	dc.b	  1
00009FC9 F0                         	dc.b	$F0 ; ð
00009FCA 0F                         	dc.b	 $F
00009FCB 00                         	dc.b	  0
00009FCC 00                         	dc.b	  0
00009FCD F0                         	dc.b	$F0 ; ð
00009FCE 01                         unk_2089F8:	dc.b	  1
00009FCF F8                         	dc.b	$F8 ; ø
00009FD0 0D                         	dc.b	 $D
00009FD1 00                         	dc.b	  0
00009FD2 00                         	dc.b	  0
00009FD3 F0                         	dc.b	$F0 ; ð
00009FD3 F0                         	dc.b	$F0 ; ð
00009FD4                            	even
00009FD4                            ; -------------------------------------------------------------------------------
00009FD4                            
00009FD4                            ObjSonicHole:
00009FD4 7000                       	moveq	#0,d0
00009FD6 1028 0024                  	move.b	oRoutine(a0),d0
00009FDA 303B 0000                  	move.w	ObjSonicHole_Index(pc,d0.w),d0
00009FDE 4EBB 0000                  	jsr	ObjSonicHole_Index(pc,d0.w)
00009FE2 4EF8 7D1A                  	jmp	CheckObjDespawnTime
00009FE6                            
00009FE6                            ; -------------------------------------------------------------------------------
00009FE6 0000                       ObjSonicHole_Index:dc.w	ObjSonicHole_Init-ObjSonicHole_Index
00009FE8 0000                       	dc.w	ObjSonicHole_Main-ObjSonicHole_Index
00009FEA 0000                       	dc.w	ObjSonicHole_Display-ObjSonicHole_Index
00009FEC                            ; -------------------------------------------------------------------------------
00009FEC                            
00009FEC                            ObjSonicHole_Init:
00009FEC 5428 0024                  	addq.b	#2,oRoutine(a0)
00009FF0 0028 0004 0001             	ori.b	#4,oRender(a0)
00009FF6 317C 03A0 0002             	move.w	#$3A0,oTile(a0)
00009FFC 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000A002 6600                       	bne.s	.NotPast
0000A004 317C 03BB 0002             	move.w	#$3BB,oTile(a0)
0000A00A                            
0000A00A                            .NotPast:
0000A00A 217C 0000 0000 0004        	move.l	#MapSpr_SonicHole,4(a0)
0000A012 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000A018 117C 0010 0016             	move.b	#$10,oYRadius(a0)
0000A01E 117C 0006 0018             	move.b	#6,oPriority(a0)
0000A024 6100 0000                  	bsr.w	ObjSonicHole_SetDisplay
0000A028 6700                       	beq.s	.ClearDisplay
0000A02A 5428 0024                  	addq.b	#2,oRoutine(a0)
0000A02E 6000 0000                  	bra.w	ObjSonicHole_Display
0000A032                            
0000A032                            ; -------------------------------------------------------------------------------
0000A032                            
0000A032                            .ClearDisplay:
0000A032 08B1 0006 0002             	bclr	#6,2(a1,d0.w)
0000A038                            ; End of function ObjSonicHole_Init
0000A038                            
0000A038                            ; -------------------------------------------------------------------------------
0000A038                            
0000A038                            ObjSonicHole_Main:
0000A038 4DF8 D000                  	lea	(v_player).w,a6
0000A03C 4A2E 002C                  	tst.b	oPlayerCtrl(a6)
0000A040 6700                       	beq.s	.End
0000A042 302E 0008                  	move.w	oX(a6),d0
0000A046 9068 0008                  	sub.w	oX(a0),d0
0000A04A 0640 0020                  	addi.w	#$20,d0
0000A04E 6B00                       	bmi.s	.End
0000A050 0C40 0040                  	cmpi.w	#$40,d0
0000A054 6400                       	bcc.s	.End
0000A056 302E 000C                  	move.w	oY(a6),d0
0000A05A 9068 000C                  	sub.w	oY(a0),d0
0000A05E 0640 0020                  	addi.w	#$20,d0
0000A062 6B00                       	bmi.s	.End
0000A064 0C40 0040                  	cmpi.w	#$40,d0
0000A068 6400                       	bcc.s	.End
0000A06A 6100                       	bsr.s	ObjSonicHole_SetDisplay
0000A06C 303C 00AC                  	move.w	#$AC,d0
0000A070 4EB8 2708                  	jsr	PlayFMSound
0000A074 5428 0024                  	addq.b	#2,oRoutine(a0)
0000A078 6000                       	bra.s	ObjSonicHole_Display
0000A07A                            
0000A07A                            ; -------------------------------------------------------------------------------
0000A07A                            
0000A07A                            .End:
0000A07A 4E75                       	rts
0000A07C                            
0000A07C                            ; -------------------------------------------------------------------------------
0000A07C                            
0000A07C                            ObjSonicHole_Display:
0000A07C 4EF8 4012                  	jmp	DrawObject
0000A080                            ; End of function ObjSonicHole_Main
0000A080                            
0000A080                            ; -------------------------------------------------------------------------------
0000A080                            
0000A080                            ObjSonicHole_SetDisplay:
0000A080 7000                       	moveq	#0,d0
0000A082 1028 0023                  	move.b	oRespawn(a0),d0
0000A086 43F9 00FF 1200             	lea	(v_obj_respawns).l,a1
0000A08C 3200                       	move.w	d0,d1
0000A08E D241                       	add.w	d1,d1
0000A090 D041                       	add.w	d1,d0
0000A092 7200                       	moveq	#0,d1
0000A094 1239 00FF 152E             	move.b	(v_time_zone).l,d1
0000A09A D041                       	add.w	d1,d0
0000A09C 08F1 0006 0002             	bset	#6,2(a1,d0.w)
0000A0A2 4E75                       	rts
0000A0A4                            ; End of function ObjSonicHole_SetDisplay
0000A0A4                            
0000A0A4                            ; -------------------------------------------------------------------------------
0000A0A4                            MapSpr_SonicHole:
0000A0A4                            	include	"level/objects/sonichole/map.asm"
0000A0A4                            .Map:
0000A0A4 0000                       	dc.w	unk_208AD6-.Map
0000A0A6 03                         unk_208AD6:	dc.b	  3
0000A0A7 F0                         	dc.b	$F0 ; ð
0000A0A8 0D                         	dc.b	 $D
0000A0A9 00                         	dc.b	  0
0000A0AA 00                         	dc.b	  0
0000A0AB F0                         	dc.b	$F0 ; ð
0000A0AC 00                         	dc.b	  0
0000A0AD 04                         	dc.b	  4
0000A0AE 00                         	dc.b	  0
0000A0AF 08                         	dc.b	  8
0000A0B0 F8                         	dc.b	$F8 ; ø
0000A0B1 08                         	dc.b	  8
0000A0B2 0C                         	dc.b	 $C
0000A0B3 00                         	dc.b	  0
0000A0B4 0A                         	dc.b	 $A
0000A0B5 F0                         	dc.b	$F0 ; ð
0000A0B5 F0                         	dc.b	$F0 ; ð
0000A0B6                            	even
0000A0B6                            ; -------------------------------------------------------------------------------
0000A0B6                            
0000A0B6                            ObjSpinTunnel:
0000A0B6 0839 0007 00FF 152E        	btst	#7,(v_time_zone).l
0000A0BE 6700                       	beq.s	.NoRespawn
0000A0C0 7000                       	moveq	#0,d0
0000A0C2 1028 0023                  	move.b	oRespawn(a0),d0
0000A0C6 6700                       	beq.s	.NoRespawn
0000A0C8 43F9 00FF 1200             	lea	(v_obj_respawns).l,a1
0000A0CE 3200                       	move.w	d0,d1
0000A0D0 D241                       	add.w	d1,d1
0000A0D2 D041                       	add.w	d1,d0
0000A0D4 7200                       	moveq	#0,d1
0000A0D6 1239 00FF 152E             	move.b	(v_time_zone).l,d1
0000A0DC 0881 0007                  	bclr	#7,d1
0000A0E0 1438 F784                  	move.b	(v_time_warp_dir).w,d2
0000A0E4 4882                       	ext.w	d2
0000A0E6 4442                       	neg.w	d2
0000A0E8 D242                       	add.w	d2,d1
0000A0EA 6A00                       	bpl.s	.NoCap
0000A0EC 7200                       	moveq	#0,d1
0000A0EE 6000                       	bra.s	.GetRespawn
0000A0F0                            
0000A0F0                            ; -------------------------------------------------------------------------------
0000A0F0                            
0000A0F0                            .NoCap:
0000A0F0 0C41 0003                  	cmpi.w	#3,d1
0000A0F4 6500                       	bcs.s	.GetRespawn
0000A0F6 7202                       	moveq	#2,d1
0000A0F8                            
0000A0F8                            .GetRespawn:
0000A0F8 D041                       	add.w	d1,d0
0000A0FA 08B1 0007 0002             	bclr	#7,2(a1,d0.w)
0000A100                            
0000A100                            .NoRespawn:
0000A100 4DF8 D000                  	lea	(v_player).w,a6
0000A104 0C2E 002B 001C             	cmpi.b	#$2B,oAnim(a6)
0000A10A 6700                       	beq.s	.End
0000A10C 0C2E 0006 0024             	cmpi.b	#6,oRoutine(a6)
0000A112 6400                       	bcc.s	.End
0000A114 7000                       	moveq	#0,d0
0000A116 1028 0024                  	move.b	oRoutine(a0),d0
0000A11A 323B 0000                  	move.w	ObjSpinTunnel_Index(pc,d0.w),d1
0000A11E 4EBB 1000                  	jsr	ObjSpinTunnel_Index(pc,d1.w)
0000A122 0C28 0004 0024             	cmpi.b	#4,oRoutine(a0)
0000A128 6400                       	bcc.s	.End
0000A12A 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000A12E                            
0000A12E                            ; -------------------------------------------------------------------------------
0000A12E                            
0000A12E                            .End:
0000A12E 4E75                       	rts
0000A130                            ; End of function ObjSpinTunnel
0000A130                            
0000A130                            ; -------------------------------------------------------------------------------
0000A130                            ObjSpinTunnel_Index:
0000A130 0000                       	dc.w	ObjSpinTunnel_Init-ObjSpinTunnel_Index
0000A132 0000                       	dc.w	ObjSpinTunnel_Main-ObjSpinTunnel_Index
0000A134 0000                       	dc.w	ObjSpinTunnel_InitPlayer-ObjSpinTunnel_Index
0000A136 0000                       	dc.w	ObjSpinTunnel_CtrlPlayer-ObjSpinTunnel_Index
0000A138                            ; -------------------------------------------------------------------------------
0000A138                            
0000A138                            ObjSpinTunnel_Init:
0000A138 217C 0000 0000 0004        	move.l	#MapSpr_Powerup,oMap(a0)
0000A140 117C 0004 0001             	move.b	#4,oRender(a0)
0000A146 117C 0001 0018             	move.b	#1,oPriority(a0)
0000A14C 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000A152 317C 0541 0002             	move.w	#$541,oTile(a0)
0000A158 5428 0024                  	addq.b	#2,oRoutine(a0)
0000A15C 1028 0028                  	move.b	oSubtype(a0),d0
0000A160 D040                       	add.w	d0,d0
0000A162 0240 00FE                  	andi.w	#$FE,d0
0000A166 45FA 0000                  	lea	ObjSpinTunnel_TargetPos(pc),a2
0000A16A D4F2 0000                  	adda.w	(a2,d0.w),a2
0000A16E 315A 003A                  	move.w	(a2)+,oVar3A(a0)
0000A172 214A 003C                  	move.l	a2,oVar3C(a0)
0000A176 315A 0036                  	move.w	(a2)+,oVar36(a0)
0000A17A 315A 0038                  	move.w	(a2)+,oVar38(a0)
0000A17E                            ; End of function ObjSpinTunnel_Init
0000A17E                            
0000A17E                            ; -------------------------------------------------------------------------------
0000A17E                            
0000A17E                            ObjSpinTunnel_Main:
0000A17E 302E 0008                  	move.w	oX(a6),d0
0000A182 9068 0008                  	sub.w	oX(a0),d0
0000A186 0640 0010                  	addi.w	#$10,d0
0000A18A 0C40 0020                  	cmpi.w	#$20,d0
0000A18E 6400 0000                  	bcc.w	.End
0000A192 322E 000C                  	move.w	oY(a6),d1
0000A196 9268 000C                  	sub.w	oY(a0),d1
0000A19A 0641 0010                  	addi.w	#$10,d1
0000A19E 0C41 0020                  	cmpi.w	#$20,d1
0000A1A2 6400 0000                  	bcc.w	.End
0000A1A6 4A2E 002C                  	tst.b	oPlayerCtrl(a6)
0000A1AA 6600 0000                  	bne.w	.End
0000A1AE 0C2E 0004 0024             	cmpi.b	#4,oRoutine(a6)
0000A1B4 6600                       	bne.s	.NotHurt
0000A1B6 552E 0024                  	subq.b	#2,oRoutine(a6)
0000A1BA 3D7C 0078 0030             	move.w	#$78,oPlayerHurt(a6)
0000A1C0                            
0000A1C0                            .NotHurt:
0000A1C0 5428 0024                  	addq.b	#2,oRoutine(a0)
0000A1C4 1D7C 0081 002C             	move.b	#$81,oPlayerCtrl(a6)
0000A1CA 4A28 0029                  	tst.b	oSubtype2(a0)
0000A1CE 6700                       	beq.s	.SetAnimIntertia
0000A1D0 002E 0040 002C             	ori.b	#$40,oPlayerCtrl(a6)
0000A1D6                            
0000A1D6                            .SetAnimIntertia:
0000A1D6 1D7C 0002 001C             	move.b	#2,oAnim(a6)
0000A1DC 6100 0000                  	bsr.w	ObjSpinTunnel_SetPlayerGVel
0000A1E0 3D7C 0000 0010             	move.w	#0,oXVel(a6)
0000A1E6 3D7C 0000 0012             	move.w	#0,oYVel(a6)
0000A1EC 08A8 0005 0022             	bclr	#5,oStatus(a0)
0000A1F2 08AE 0005 0022             	bclr	#5,oStatus(a6)
0000A1F8 08EE 0001 0022             	bset	#1,oStatus(a6)
0000A1FE 422E 003C                  	clr.b	oPlayerJump(a6)
0000A202 3D68 0008 0008             	move.w	oX(a0),oX(a6)
0000A208 3D68 000C 000C             	move.w	oY(a0),oY(a6)
0000A20E 4228 0032                  	clr.b	oVar32(a0)
0000A212 303C 00BE                  	move.w	#$BE,d0
0000A216 4EB8 2708                  	jsr	PlayFMSound
0000A21A                            
0000A21A                            .End:
0000A21A 4E75                       	rts
0000A21C                            ; End of function ObjSpinTunnel_Main
0000A21C                            
0000A21C                            ; -------------------------------------------------------------------------------
0000A21C                            
0000A21C                            ObjSpinTunnel_InitPlayer:
0000A21C 6100 0000                  	bsr.w	ObjSpinTunnel_SetPlayerSpeeds
0000A220 5428 0024                  	addq.b	#2,oRoutine(a0)
0000A224 303C 00BE                  	move.w	#$BE,d0
0000A228 4EB8 2708                  	jsr	PlayFMSound
0000A22C 4E75                       	rts
0000A22E                            ; End of function ObjSpinTunnel_InitPlayer
0000A22E                            
0000A22E                            ; -------------------------------------------------------------------------------
0000A22E                            
0000A22E                            ObjSpinTunnel_CtrlPlayer:
0000A22E 5328 002E                  	subq.b	#1,oVar2E(a0)
0000A232 6A00                       	bpl.s	.MovePlayer
0000A234 3D68 0036 0008             	move.w	oVar36(a0),oX(a6)
0000A23A 3D68 0038 000C             	move.w	oVar38(a0),oY(a6)
0000A240 7200                       	moveq	#0,d1
0000A242 1228 003A                  	move.b	oVar3A(a0),d1
0000A246 5801                       	addq.b	#4,d1
0000A248 B228 003B                  	cmp.b	oVar3B(a0),d1
0000A24C 6500                       	bcs.s	.UpdatePlayer
0000A24E 7200                       	moveq	#0,d1
0000A250 6000                       	bra.s	.ResetObj
0000A252                            
0000A252                            ; -------------------------------------------------------------------------------
0000A252                            
0000A252                            .UpdatePlayer:
0000A252 1141 003A                  	move.b	d1,oVar3A(a0)
0000A256 2468 003C                  	movea.l	oVar3C(a0),a2
0000A25A 3172 1000 0036             	move.w	(a2,d1.w),oVar36(a0)
0000A260 3172 1002 0038             	move.w	2(a2,d1.w),oVar38(a0)
0000A266 6000 0000                  	bra.w	ObjSpinTunnel_SetPlayerSpeeds
0000A26A                            
0000A26A                            ; -------------------------------------------------------------------------------
0000A26A                            
0000A26A                            .MovePlayer:
0000A26A 242E 0008                  	move.l	oX(a6),d2
0000A26E 262E 000C                  	move.l	oY(a6),d3
0000A272 302E 0010                  	move.w	oXVel(a6),d0
0000A276 48C0                       	ext.l	d0
0000A278 E180                       	asl.l	#8,d0
0000A27A D480                       	add.l	d0,d2
0000A27C 302E 0012                  	move.w	oYVel(a6),d0
0000A280 48C0                       	ext.l	d0
0000A282 E180                       	asl.l	#8,d0
0000A284 D680                       	add.l	d0,d3
0000A286 2D42 0008                  	move.l	d2,oX(a6)
0000A28A 2D43 000C                  	move.l	d3,oY(a6)
0000A28E 4E75                       	rts
0000A290                            
0000A290                            ; -------------------------------------------------------------------------------
0000A290                            
0000A290                            .ResetObj:
0000A290 026E 07FF 000C             	andi.w	#$7FF,oY(a6)
0000A296 4228 0024                  	clr.b	oRoutine(a0)
0000A29A 422E 002C                  	clr.b	oPlayerCtrl(a6)
0000A29E 317C 0002 0024             	move.w	#2,oRoutine(a0)
0000A2A4 4E75                       	rts
0000A2A6                            ; End of function ObjSpinTunnel_CtrlPlayer
0000A2A6                            
0000A2A6                            ; -------------------------------------------------------------------------------
0000A2A6                            
0000A2A6                            ObjSpinTunnel_SetPlayerSpeeds:
0000A2A6 7000                       	moveq	#0,d0
0000A2A8 342E 0014                  	move.w	oPlayerGVel(a6),d2
0000A2AC 362E 0014                  	move.w	oPlayerGVel(a6),d3
0000A2B0 3028 0036                  	move.w	oVar36(a0),d0
0000A2B4 906E 0008                  	sub.w	oX(a6),d0
0000A2B8 6C00                       	bge.s	.PlayerLeft
0000A2BA 4440                       	neg.w	d0
0000A2BC 4442                       	neg.w	d2
0000A2BE                            
0000A2BE                            .PlayerLeft:
0000A2BE 7200                       	moveq	#0,d1
0000A2C0 3228 0038                  	move.w	oVar38(a0),d1
0000A2C4 926E 000C                  	sub.w	oY(a6),d1
0000A2C8 6C00                       	bge.s	.PlayerAbove
0000A2CA 4441                       	neg.w	d1
0000A2CC 4443                       	neg.w	d3
0000A2CE                            
0000A2CE                            .PlayerAbove:
0000A2CE B240                       	cmp.w	d0,d1
0000A2D0 6500                       	bcs.s	.DXGreater
0000A2D2 7200                       	moveq	#0,d1
0000A2D4 3228 0038                  	move.w	oVar38(a0),d1
0000A2D8 926E 000C                  	sub.w	oY(a6),d1
0000A2DC 4841                       	swap	d1
0000A2DE 83C3                       	divs.w	d3,d1
0000A2E0 7000                       	moveq	#0,d0
0000A2E2 3028 0036                  	move.w	oVar36(a0),d0
0000A2E6 906E 0008                  	sub.w	oX(a6),d0
0000A2EA 6700                       	beq.s	.ZeroDivide
0000A2EC 4840                       	swap	d0
0000A2EE 81C1                       	divs.w	d1,d0
0000A2F0                            
0000A2F0                            .ZeroDivide:
0000A2F0 3D40 0010                  	move.w	d0,oXVel(a6)
0000A2F4 3D43 0012                  	move.w	d3,oYVel(a6)
0000A2F8 4A41                       	tst.w	d1
0000A2FA 6A00                       	bpl.s	.SetSign
0000A2FC 4441                       	neg.w	d1
0000A2FE                            
0000A2FE                            .SetSign:
0000A2FE 3141 002E                  	move.w	d1,oVar2E(a0)
0000A302 4E75                       	rts
0000A304                            
0000A304                            ; -------------------------------------------------------------------------------
0000A304                            
0000A304                            .DXGreater:
0000A304 7000                       	moveq	#0,d0
0000A306 3028 0036                  	move.w	oVar36(a0),d0
0000A30A 906E 0008                  	sub.w	oX(a6),d0
0000A30E 4840                       	swap	d0
0000A310 81C2                       	divs.w	d2,d0
0000A312 7200                       	moveq	#0,d1
0000A314 3228 0038                  	move.w	oVar38(a0),d1
0000A318 926E 000C                  	sub.w	oY(a6),d1
0000A31C 6700                       	beq.s	.ZeroDivide2
0000A31E 4841                       	swap	d1
0000A320 83C0                       	divs.w	d0,d1
0000A322                            
0000A322                            .ZeroDivide2:
0000A322 3D41 0012                  	move.w	d1,oYVel(a6)
0000A326 3D42 0010                  	move.w	d2,oXVel(a6)
0000A32A 4A40                       	tst.w	d0
0000A32C 6A00                       	bpl.s	.SetSign2
0000A32E 4440                       	neg.w	d0
0000A330                            
0000A330                            .SetSign2:
0000A330 3140 002E                  	move.w	d0,oVar2E(a0)
0000A334 4E75                       	rts
0000A336                            ; End of function ObjSpinTunnel_SetPlayerSpeeds
0000A336                            
0000A336                            ; -------------------------------------------------------------------------------
0000A336                            
0000A336                            ObjSpinTunnel_SetPlayerGVel:
0000A336 3D7C 1000 0014             	move.w	#$1000,oPlayerGVel(a6)
0000A33C 7000                       	moveq	#0,d0
0000A33E 1028 0028                  	move.b	oSubtype(a0),d0
0000A342 6B00                       	bmi.s	.End
0000A344 0240 000F                  	andi.w	#$F,d0
0000A348 D040                       	add.w	d0,d0
0000A34A 303B 0000                  	move.w	ObjSpinTunnel_GVels(pc,d0.w),d0
0000A34E B06E 0014                  	cmp.w	oPlayerGVel(a6),d0
0000A352 6F00                       	ble.s	.End
0000A354 3D40 0014                  	move.w	d0,oPlayerGVel(a6)
0000A358                            
0000A358                            .End:
0000A358 4E75                       	rts
0000A35A                            ; End of function ObjSpinTunnel_SetPlayerGVel
0000A35A                            
0000A35A                            ; -------------------------------------------------------------------------------
0000A35A 1000                       ObjSpinTunnel_GVels:dc.w	$1000
0000A35C 0C00                       	dc.w	$C00
0000A35E 0C00                       	dc.w	$C00
0000A360 0800                       	dc.w	$800
0000A362 0000                       ObjSpinTunnel_TargetPos:dc.w	word_208D9E-ObjSpinTunnel_TargetPos
0000A364 0000                       	dc.w	word_208E28-ObjSpinTunnel_TargetPos
0000A366 0000                       	dc.w	word_208E6E-ObjSpinTunnel_TargetPos
0000A368 0088 1440 00F0 1478 0108+  word_208D9E:	dc.w	$88, $1440, $F0, $1478, $108, $1490, $140,	$1490
0000A378 01E0 1440 01F8 1400 01E0+  	dc.w	$1E0, $1440, $1F8,	$1400, $1E0, $13F0, $1C0, $13F0
0000A388 0180 1400 0170 1420 0168+  	dc.w	$180, $1400, $170,	$1420, $168, $1440, $170, $1468
0000A398 01A8 1660 0218 16A0 0210+  	dc.w	$1A8, $1660, $218,	$16A0, $210, $16C0, $1F8, $16D0
0000A3A8 01C8 16C0 01A8 1680 0198+  	dc.w	$1C8, $16C0, $1A8,	$1680, $198, $1658, $1A0, $1640
0000A3B8 01C8 1650 01F0 1680 0200+  	dc.w	$1C8, $1650, $1F0,	$1680, $200, $16C0, $200, $16D0
0000A3C8 0210 16D0 0288 16C0 02C0+  	dc.w	$210, $16D0, $288,	$16C0, $2C0, $1680, $2D8, $1650
0000A3D8 02C0 1650 02A0 1680 0290+  	dc.w	$2C0, $1650, $2A0,	$1680, $290, $1700, $290, $1728
0000A3E8 02A0 1728 02E0 1700 02F0   	dc.w	$2A0, $1728, $2E0,	$1700, $2F0
0000A3F2 0044 0F08 01A0 0F90 01A0+  word_208E28:	dc.w	$44, $F08,	$1A0, $F90, $1A0, $FC8,	$1B8, $FE0
0000A402 01F0 0FE0 0260 1000 0290+  	dc.w	$1F0, $FE0, $260, $1000, $290, $1030, $2A0, $1068
0000A412 0288 1080 0250 1068 0218+  	dc.w	$288, $1080, $250,	$1068, $218, $1030, $200, $FF0
0000A422 0220 0FE0 0260 1000 0290+  	dc.w	$220, $FE0, $260, $1000, $290, $1030, $2A0, $1068
0000A432 0288 1130 01C8             	dc.w	$288, $1130, $1C8
0000A438 0044 1630 0290 1630 0318+  word_208E6E:	dc.w	$44, $1630, $290, $1630, $318, $1638, $338, $16D0
0000A448 03D0 1700 03E0 1738 03C8+  	dc.w	$3D0, $1700, $3E0,	$1738, $3C8, $1758, $390, $1738
0000A458 0358 16F8 0340 16C0 0360+  	dc.w	$358, $16F8, $340,	$16C0, $360, $16A8, $390, $16D0
0000A468 03D0 1700 03E0 1738 03C8+  	dc.w	$3D0, $1700, $3E0,	$1738, $3C8, $17B8, $348, $17D0
0000A478 0320 17D0 0268             	dc.w	$320, $17D0, $268
0000A47E                            ; -------------------------------------------------------------------------------
0000A47E                            
0000A47E                            ClearObjRide:
0000A47E 0828 0003 0022             	btst	#3,oStatus(a0)
0000A484 6700                       	beq.s	.End
0000A486 0829 0003 0022             	btst	#3,oStatus(a1)
0000A48C 6700                       	beq.s	.End
0000A48E 7000                       	moveq	#0,d0
0000A490 1029 003D                  	move.b	oPlayerStandObj(a1),d0
0000A494 ED48                       	lsl.w	#6,d0
0000A496 0680 00FF D000             	addi.l	#v_player&$FFFFFF,d0
0000A49C B0C0                       	cmpa.w	d0,a0
0000A49E 6600                       	bne.s	.End
0000A4A0 4A29 002A                  	tst.b	oPlayerCharge(a1)
0000A4A4 6700                       	beq.s	.NoSound
0000A4A6 303C 00AB                  	move.w	#$AB,d0
0000A4AA 4EB8 2708                  	jsr	PlayFMSound
0000A4AE                            
0000A4AE                            .NoSound:
0000A4AE 4229 0038                  	clr.b	oPlayerStick(a1)
0000A4B2 08E9 0001 0022             	bset	#1,oStatus(a1)
0000A4B8 08A9 0003 0022             	bclr	#3,oStatus(a1)
0000A4BE 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000A4C4 0829 0006 002C             	btst	#6,oPlayerCtrl(a1)
0000A4CA 6600                       	bne.s	.ReleasePlayer
0000A4CC 0C29 0017 001C             	cmpi.b	#$17,oAnim(a1)
0000A4D2 6700                       	beq.s	.ReleasePlayer
0000A4D4 08A9 0000 002C             	bclr	#0,oPlayerCtrl(a1)
0000A4DA                            
0000A4DA                            .ReleasePlayer:
0000A4DA 4229 003D                  	clr.b	oPlayerStandObj(a1)
0000A4DE 0C29 002B 001C             	cmpi.b	#$2B,oAnim(a1)
0000A4E4 6600                       	bne.s	.End
0000A4E6 08A9 0001 0022             	bclr	#1,oStatus(a1)
0000A4EC                            
0000A4EC                            .End:
0000A4EC 4E75                       	rts
0000A4EE                            ; End of function ClearObjRide
0000A4EE                            
0000A4EE                            ; -------------------------------------------------------------------------------
0000A4EE                            
0000A4EE                            RideObject:
0000A4EE 0C29 0004 0024             	cmpi.b	#4,oRoutine(a1)
0000A4F4 6600                       	bne.s	.NotHurt
0000A4F6 5529 0024                  	subq.b	#2,oRoutine(a1)
0000A4FA 337C 0078 0030             	move.w	#$78,oPlayerHurt(a1)
0000A500                            
0000A500                            .NotHurt:
0000A500 4228 0025                  	clr.b	oRoutine2(a0)
0000A504 4229 003C                  	clr.b	oPlayerJump(a1)
0000A508 08E8 0003 0022             	bset	#3,oStatus(a0)
0000A50E 6600                       	bne.s	.SetRide
0000A510 0C29 002B 001C             	cmpi.b	#$2B,oAnim(a1)
0000A516 6600                       	bne.s	.NotGivingUp
0000A518 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000A51E 6000 FF5E                  	bra.w	ClearObjRide
0000A522                            
0000A522                            ; -------------------------------------------------------------------------------
0000A522                            
0000A522                            .NotGivingUp:
0000A522 08A9 0004 0022             	bclr	#4,oStatus(a1)
0000A528 08A9 0002 0022             	bclr	#2,oStatus(a1)
0000A52E 6700                       	beq.s	.SetRide
0000A530 4A39 00FF 195B             	tst.b	(v_mini_sonic).l
0000A536 6700                       	beq.s	.NotMini
0000A538 137C 000A 0016             	move.b	#$A,oYRadius(a1)
0000A53E 137C 0005 0017             	move.b	#5,oXRadius(a1)
0000A544 5569 000C                  	subq.w	#2,oY(a1)
0000A548 6000                       	bra.s	.SetWalk
0000A54A                            
0000A54A                            ; -------------------------------------------------------------------------------
0000A54A                            
0000A54A                            .NotMini:
0000A54A 137C 0013 0016             	move.b	#$13,oYRadius(a1)
0000A550 137C 0009 0017             	move.b	#9,oXRadius(a1)
0000A556 5B69 000C                  	subq.w	#5,oY(a1)
0000A55A                            
0000A55A                            .SetWalk:
0000A55A 137C 0000 001C             	move.b	#0,oAnim(a1)
0000A560                            
0000A560                            .SetRide:
0000A560 08E9 0003 0022             	bset	#3,oStatus(a1)
0000A566 6700                       	beq.s	.SetInteract
0000A568 7000                       	moveq	#0,d0
0000A56A 1029 003D                  	move.b	oPlayerStandObj(a1),d0
0000A56E ED48                       	lsl.w	#6,d0
0000A570 0680 00FF D000             	addi.l	#v_player&$FFFFFF,d0
0000A576 B0C0                       	cmpa.w	d0,a0
0000A578 6700                       	beq.s	.End
0000A57A 2440                       	movea.l	d0,a2
0000A57C 08AA 0003 0022             	bclr	#3,oStatus(a2)
0000A582                            
0000A582                            .SetInteract:
0000A582 3008                       	move.w	a0,d0
0000A584 0440 D000                  	subi.w	#v_player,d0
0000A588 EC48                       	lsr.w	#6,d0
0000A58A 0240 007F                  	andi.w	#$7F,d0
0000A58E 1340 003D                  	move.b	d0,oPlayerStandObj(a1)
0000A592 137C 0000 0026             	move.b	#0,oAngle(a1)
0000A598 337C 0000 0012             	move.w	#0,oYVel(a1)
0000A59E 0C10 000A                  	cmpi.b	#$A,oID(a0)
0000A5A2 6600                       	bne.s	.SetInertia
0000A5A4 0C28 0002 0024             	cmpi.b	#2,oRoutine(a0)
0000A5AA 6700                       	beq.s	.ClearAirBit
0000A5AC                            
0000A5AC                            .SetInertia:
0000A5AC 3369 0010 0014             	move.w	oXVel(a1),oPlayerGVel(a1)
0000A5B2                            
0000A5B2                            .ClearAirBit:
0000A5B2 08A9 0001 0022             	bclr	#1,oStatus(a1)
0000A5B8                            
0000A5B8                            .End:
0000A5B8 4E75                       	rts
0000A5BA                            ; End of function RideObject
0000A5BA                            
0000A5BA                            ; -------------------------------------------------------------------------------
0000A5BA                            ; START	OF FUNCTION CHUNK FOR ObjSpring_SolidObject3
0000A5BA                            
0000A5BA                            SolidObject2:
0000A5BA 117C 0002 0025             	move.b	#2,oRoutine2(a0)
0000A5C0 6000                       	bra.s	SolidObject
0000A5C2                            ; END OF FUNCTION CHUNK	FOR ObjSpring_SolidObject3
0000A5C2                            ; -------------------------------------------------------------------------------
0000A5C2                            
0000A5C2                            SolidObject1:
0000A5C2 117C 0001 0025             	move.b	#1,oRoutine2(a0)
0000A5C8                            ; End of function SolidObject1
0000A5C8                            
0000A5C8                            ; -------------------------------------------------------------------------------
0000A5C8                            
0000A5C8                            SolidObject:
0000A5C8 0C29 0017 001C             	cmpi.b	#$17,oAnim(a1)
0000A5CE 6700 0000                  	beq.w	.ClearTouch
0000A5D2 0829 0006 002C             	btst	#6,oPlayerCtrl(a1)
0000A5D8 6600 0000                  	bne.w	.ClearTouch
0000A5DC 0C29 0006 0024             	cmpi.b	#6,oRoutine(a1)
0000A5E2 6400 0000                  	bcc.w	.ClearTouch
0000A5E6 4A11                       	tst.b	oID(a1)
0000A5E8 6700 0000                  	beq.w	.ClearTouch
0000A5EC 4A28 0001                  	tst.b	oRender(a0)
0000A5F0 6A00 0000                  	bpl.w	.ClearTouch
0000A5F4 4A39 00FF 1906             	tst.b	(v_debug_mode).l
0000A5FA 6600 0000                  	bne.w	.ClearTouch
0000A5FE 1228 0019                  	move.b	oWidth(a0),d1
0000A602 4881                       	ext.w	d1
0000A604 0641 000A                  	addi.w	#$A,d1
0000A608 3029 0008                  	move.w	oX(a1),d0
0000A60C 9068 0008                  	sub.w	oX(a0),d0
0000A610 D041                       	add.w	d1,d0
0000A612 6B00 0000                  	bmi.w	.ClearTouch
0000A616 3401                       	move.w	d1,d2
0000A618 D442                       	add.w	d2,d2
0000A61A B042                       	cmp.w	d2,d0
0000A61C 6400 0000                  	bcc.w	.ClearTouch
0000A620 0C29 002B 001C             	cmpi.b	#$2B,oAnim(a1)
0000A626 6600                       	bne.s	.NotGivingUp
0000A628 0828 0003 0022             	btst	#3,oStatus(a0)
0000A62E 6600                       	bne.s	.CheckYRange
0000A630 6000 0000                  	bra.w	.ClearTouch
0000A634                            
0000A634                            ; -------------------------------------------------------------------------------
0000A634                            
0000A634                            .NotGivingUp:
0000A634 0C28 0001 0025             	cmpi.b	#1,oRoutine2(a0)
0000A63A 6600                       	bne.s	.CheckYRange
0000A63C 4A69 0012                  	tst.w	oYVel(a1)
0000A640 6700                       	beq.s	.CheckYRange
0000A642 6B00 0000                  	bmi.w	.ClearTouch
0000A646                            
0000A646                            .CheckYRange:
0000A646 1428 0016                  	move.b	oYRadius(a0),d2
0000A64A 4882                       	ext.w	d2
0000A64C 1629 0016                  	move.b	oYRadius(a1),d3
0000A650 4883                       	ext.w	d3
0000A652 D642                       	add.w	d2,d3
0000A654 5443                       	addq.w	#2,d3
0000A656 3429 000C                  	move.w	oY(a1),d2
0000A65A 9468 000C                  	sub.w	oY(a0),d2
0000A65E D443                       	add.w	d3,d2
0000A660 6B00 0000                  	bmi.w	.ClearTouch
0000A664 3803                       	move.w	d3,d4
0000A666 D844                       	add.w	d4,d4
0000A668 B444                       	cmp.w	d4,d2
0000A66A 6400 0000                  	bcc.w	.ClearTouch
0000A66E 3800                       	move.w	d0,d4
0000A670 B240                       	cmp.w	d0,d1
0000A672 6400                       	bcc.s	.GotDistToXEdge
0000A674 D241                       	add.w	d1,d1
0000A676 9041                       	sub.w	d1,d0
0000A678 3800                       	move.w	d0,d4
0000A67A 4444                       	neg.w	d4
0000A67C                            
0000A67C                            .GotDistToXEdge:
0000A67C 3A02                       	move.w	d2,d5
0000A67E B642                       	cmp.w	d2,d3
0000A680 6400                       	bcc.s	.GotDistToYEdge
0000A682 D643                       	add.w	d3,d3
0000A684 9443                       	sub.w	d3,d2
0000A686 3A02                       	move.w	d2,d5
0000A688 4445                       	neg.w	d5
0000A68A                            
0000A68A                            .GotDistToYEdge:
0000A68A BA44                       	cmp.w	d4,d5
0000A68C 6500 0000                  	bcs.w	.CollideVert
0000A690 0C28 0001 0025             	cmpi.b	#1,oRoutine2(a0)
0000A696 6700 0000                  	beq.w	.ClearTouch
0000A69A 0C10 000A                  	cmpi.b	#$A,oID(a0)
0000A69E 6600                       	bne.s	.NotSpring
0000A6A0 0829 0001 0022             	btst	#1,oStatus(a1)
0000A6A6 6600 0000                  	bne.w	.ClearTouch
0000A6AA                            
0000A6AA                            .NotSpring:
0000A6AA 0C05 0004                  	cmpi.b	#4,d5
0000A6AE 6300 0000                  	bls.w	.ClearTouch
0000A6B2 6100 0000                  	bsr.w	CrushBetweenObjects
0000A6B6 2F00                       	move.l	d0,-(sp)
0000A6B8 6100 FDC4                  	bsr.w	ClearObjRide
0000A6BC 4228 0025                  	clr.b	oRoutine2(a0)
0000A6C0 201F                       	move.l	(sp)+,d0
0000A6C2 9169 0008                  	sub.w	d0,oX(a1)
0000A6C6 4A40                       	tst.w	d0
0000A6C8 6B00                       	bmi.s	.PlayerLeft
0000A6CA 4A69 0010                  	tst.w	oXVel(a1)
0000A6CE 6700                       	beq.s	.LeaveXSpd
0000A6D0 6A00                       	bpl.s	.HaltOnX
0000A6D2 6000                       	bra.s	.LeaveXSpd
0000A6D4                            
0000A6D4                            ; -------------------------------------------------------------------------------
0000A6D4                            
0000A6D4                            .PlayerLeft:
0000A6D4 4A69 0010                  	tst.w	oXVel(a1)
0000A6D8 6700                       	beq.s	.LeaveXSpd
0000A6DA 6A00                       	bpl.s	.LeaveXSpd
0000A6DC                            
0000A6DC                            .HaltOnX:
0000A6DC 6100 0000                  	bsr.w	CrushAgainstWall
0000A6E0 0829 0001 0022             	btst	#1,oStatus(a1)
0000A6E6 6600                       	bne.s	.ClearXSpd
0000A6E8 08E9 0005 0022             	bset	#5,oStatus(a1)
0000A6EE 08E8 0005 0022             	bset	#5,oStatus(a0)
0000A6F4 337C 0000 0014             	move.w	#0,oPlayerGVel(a1)
0000A6FA                            
0000A6FA                            .ClearXSpd:
0000A6FA 337C 0000 0010             	move.w	#0,oXVel(a1)
0000A700 7000                       	moveq	#0,d0
0000A702 4E75                       	rts
0000A704                            
0000A704                            ; -------------------------------------------------------------------------------
0000A704                            
0000A704                            .LeaveXSpd:
0000A704 6100 0000                  	bsr.w	ClearObjPush
0000A708 6100 0000                  	bsr.w	CrushAgainstWall
0000A70C 08A9 0005 0022             	bclr	#5,oStatus(a1)
0000A712 08A8 0005 0022             	bclr	#5,oStatus(a0)
0000A718 7000                       	moveq	#0,d0
0000A71A 4E75                       	rts
0000A71C                            
0000A71C                            ; -------------------------------------------------------------------------------
0000A71C                            
0000A71C                            .CollideVert:
0000A71C 0C10 0019                  	cmpi.b	#$19,oID(a0)
0000A720 6600                       	bne.s	.NotMonitor
0000A722 0829 0002 0022             	btst	#2,oStatus(a1)
0000A728 6600 0000                  	bne.w	.ClearTouch
0000A72C                            
0000A72C                            .NotMonitor:
0000A72C 1028 0016                  	move.b	oYRadius(a0),d0
0000A730 4880                       	ext.w	d0
0000A732 1229 0016                  	move.b	oYRadius(a1),d1
0000A736 4881                       	ext.w	d1
0000A738 D240                       	add.w	d0,d1
0000A73A 4A42                       	tst.w	d2
0000A73C 6700                       	beq.s	.SonicAbove
0000A73E 6B00 0000                  	bmi.w	.SonicBelow
0000A742                            
0000A742                            .SonicAbove:
0000A742 0C29 002B 001C             	cmpi.b	#$2B,oAnim(a1)
0000A748 6700                       	beq.s	.NotGivingUp2
0000A74A 4A69 0012                  	tst.w	oYVel(a1)
0000A74E 6700                       	beq.s	.NotGivingUp2
0000A750 6B00 0000                  	bmi.w	.ClearTouch
0000A754                            
0000A754                            .NotGivingUp2:
0000A754 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000A75A 9369 000C                  	sub.w	d1,oY(a1)
0000A75E 7200                       	moveq	#0,d1
0000A760 3228 0010                  	move.w	oXVel(a0),d1
0000A764 48C1                       	ext.l	d1
0000A766 E181                       	asl.l	#8,d1
0000A768 2029 0008                  	move.l	oX(a1),d0
0000A76C D081                       	add.l	d1,d0
0000A76E 2340 0008                  	move.l	d0,oX(a1)
0000A772 103C 00C0                  	move.b	#$C0,d0
0000A776 4A68 0010                  	tst.w	oXVel(a0)
0000A77A 6700                       	beq.s	.MoveOnY
0000A77C 6A00                       	bpl.s	.AbsSpeed
0000A77E 4400                       	neg.b	d0
0000A780                            
0000A780                            .AbsSpeed:
0000A780 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000A784 2049                       	movea.l	a1,a0
0000A786 4EB8 6E02                  	jsr	Player_CalcRoomInFront
0000A78A 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000A78E 4A41                       	tst.w	d1
0000A790 6A00                       	bpl.s	.MoveOnY
0000A792 4A68 0010                  	tst.w	oXVel(a0)
0000A796 6A00                       	bpl.s	.MoveOutOfWall
0000A798 4441                       	neg.w	d1
0000A79A                            
0000A79A                            .MoveOutOfWall:
0000A79A D369 0008                  	add.w	d1,oX(a1)
0000A79E                            
0000A79E                            .MoveOnY:
0000A79E 7200                       	moveq	#0,d1
0000A7A0 3228 0012                  	move.w	oYVel(a0),d1
0000A7A4 48C1                       	ext.l	d1
0000A7A6 E181                       	asl.l	#8,d1
0000A7A8 2029 000C                  	move.l	oY(a1),d0
0000A7AC D081                       	add.l	d1,d0
0000A7AE 2340 000C                  	move.l	d0,oY(a1)
0000A7B2 0C10 000A                  	cmpi.b	#$A,oID(a0)
0000A7B6 6700                       	beq.s	.SetRide
0000A7B8 4A68 0012                  	tst.w	oYVel(a0)
0000A7BC 6B00                       	bmi.s	.CheckCrushCeiling
0000A7BE 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000A7C2 2049                       	movea.l	a1,a0
0000A7C4 4EB8 6E94                  	jsr	Player_CheckFloor
0000A7C8 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000A7CC 4A41                       	tst.w	d1
0000A7CE 6A00                       	bpl.s	.CheckCrushCeiling
0000A7D0 D369 000C                  	add.w	d1,oY(a1)
0000A7D4 6000 0000                  	bra.w	.ClearTouch
0000A7D8                            
0000A7D8                            ; -------------------------------------------------------------------------------
0000A7D8                            
0000A7D8                            .CheckCrushCeiling:
0000A7D8 4A68 0012                  	tst.w	oYVel(a0)
0000A7DC 6A00                       	bpl.s	.SetRide
0000A7DE 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000A7E2 2049                       	movea.l	a1,a0
0000A7E4 4EB8 7098                  	jsr	Player_GetCeilDist
0000A7E8 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000A7EC 4A41                       	tst.w	d1
0000A7EE 6A00                       	bpl.s	.SetRide
0000A7F0 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000A7F4 2049                       	movea.l	a1,a0
0000A7F6 4EB8 744A                  	jsr	KillPlayer
0000A7FA 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000A7FE 6000                       	bra.s	.ClearTouch
0000A800                            
0000A800                            ; -------------------------------------------------------------------------------
0000A800                            
0000A800                            .SetRide:
0000A800 6100 FCEC                  	bsr.w	RideObject
0000A804 7001                       	moveq	#1,d0
0000A806 4E75                       	rts
0000A808                            
0000A808                            ; -------------------------------------------------------------------------------
0000A808                            
0000A808                            .SonicBelow:
0000A808 0C28 0001 0025             	cmpi.b	#1,oRoutine2(a0)
0000A80E 6700                       	beq.s	.ClearTouch
0000A810 0C10 0009                  	cmpi.b	#9,oID(a0)
0000A814 6700                       	beq.s	.ClearTouch
0000A816 0C10 000A                  	cmpi.b	#$A,oID(a0)
0000A81A 6600                       	bne.s	.CheckCrushFloor
0000A81C 0C28 0002 0025             	cmpi.b	#2,oRoutine2(a0)
0000A822 6700                       	beq.s	.AlignToBottom
0000A824 0828 0001 0001             	btst	#1,oRender(a0)
0000A82A 6600                       	bne.s	.AlignToBottom
0000A82C 6000                       	bra.s	.ClearTouch
0000A82E                            
0000A82E                            ; -------------------------------------------------------------------------------
0000A82E                            
0000A82E                            .CheckCrushFloor:
0000A82E 0829 0001 0022             	btst	#1,oStatus(a1)
0000A834 6600                       	bne.s	.AlignToBottom
0000A836 4A68 0012                  	tst.w	oYVel(a0)
0000A83A 6700                       	beq.s	.AlignToBottom
0000A83C 6B00                       	bmi.s	.AlignToBottom
0000A83E 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000A842 2049                       	movea.l	a1,a0
0000A844 4EB8 744A                  	jsr	KillPlayer
0000A848 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000A84C                            
0000A84C                            .AlignToBottom:
0000A84C 9569 000C                  	sub.w	d2,oY(a1)
0000A850 337C 0000 0012             	move.w	#0,oYVel(a1)
0000A856 6100 0000                  	bsr.w	ClearObjPush
0000A85A 6100 FC22                  	bsr.w	ClearObjRide
0000A85E 4228 0025                  	clr.b	oRoutine2(a0)
0000A862 7001                       	moveq	#1,d0
0000A864 4E75                       	rts
0000A866                            
0000A866                            ; -------------------------------------------------------------------------------
0000A866                            
0000A866                            .ClearTouch:
0000A866 6100 0000                  	bsr.w	ClearObjPush
0000A86A 6100 FC12                  	bsr.w	ClearObjRide
0000A86E 4228 0025                  	clr.b	oRoutine2(a0)
0000A872 7000                       	moveq	#0,d0
0000A874 4E75                       	rts
0000A876                            ; End of function SolidObject
0000A876                            
0000A876                            ; -------------------------------------------------------------------------------
0000A876                            
0000A876                            CrushAgainstWall:
0000A876 4A68 0010                  	tst.w	oXVel(a0)
0000A87A 6700                       	beq.s	.End
0000A87C 0C10 000A                  	cmpi.b	#$A,oID(a0)
0000A880 6700                       	beq.s	.End
0000A882 103C 00C0                  	move.b	#$C0,d0
0000A886 4A68 0010                  	tst.w	oXVel(a0)
0000A88A 6A00                       	bpl.s	.AbsSpeed
0000A88C 4400                       	neg.b	d0
0000A88E                            
0000A88E                            .AbsSpeed:
0000A88E 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000A892 2049                       	movea.l	a1,a0
0000A894 4EB8 6E02                  	jsr	Player_CalcRoomInFront
0000A898 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000A89C 4A41                       	tst.w	d1
0000A89E 6A00                       	bpl.s	.End
0000A8A0 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000A8A4 2049                       	movea.l	a1,a0
0000A8A6 4EB8 744A                  	jsr	KillPlayer
0000A8AA 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000A8AE                            
0000A8AE                            .End:
0000A8AE 4E75                       	rts
0000A8B0                            ; End of function CrushAgainstWall
0000A8B0                            
0000A8B0                            ; -------------------------------------------------------------------------------
0000A8B0                            
0000A8B0                            CrushBetweenObjects:
0000A8B0 0C10 000A                  	cmpi.b	#$A,oID(a0)
0000A8B4 6600                       	bne.s	.NotSpring
0000A8B6 137C 0000 0020             	move.b	#0,oPlayerPushObj(a1)
0000A8BC 4E75                       	rts
0000A8BE                            
0000A8BE                            ; -------------------------------------------------------------------------------
0000A8BE                            
0000A8BE                            .NotSpring:
0000A8BE 7200                       	moveq	#0,d1
0000A8C0 1229 0020                  	move.b	oPlayerPushObj(a1),d1
0000A8C4 6700                       	beq.s	.SetIneract
0000A8C6 ED49                       	lsl.w	#6,d1
0000A8C8 0681 00FF D000             	addi.l	#v_player&$FFFFFF,d1
0000A8CE B0C1                       	cmpa.w	d1,a0
0000A8D0 6700                       	beq.s	.End
0000A8D2 2441                       	movea.l	d1,a2
0000A8D4 4A68 0010                  	tst.w	oXVel(a0)
0000A8D8 6600                       	bne.s	.MayCrush
0000A8DA 4A6A 0010                  	tst.w	oXVel(a2)
0000A8DE 6700                       	beq.s	.End
0000A8E0                            
0000A8E0                            .MayCrush:
0000A8E0 3229 0008                  	move.w	oX(a1),d1
0000A8E4 B268 0008                  	cmp.w	oX(a0),d1
0000A8E8 6400                       	bcc.s	.PossibleCrush
0000A8EA B26A 0008                  	cmp.w	oX(a2),d1
0000A8EE 6500                       	bcs.s	.End
0000A8F0 6000                       	bra.s	.ChkKill
0000A8F2                            
0000A8F2                            ; -------------------------------------------------------------------------------
0000A8F2                            
0000A8F2                            .PossibleCrush:
0000A8F2 B26A 0008                  	cmp.w	oX(a2),d1
0000A8F6 6400                       	bcc.s	.End
0000A8F8                            
0000A8F8                            .ChkKill:
0000A8F8 0C10 0015                  	cmpi.b	#$15,oID(a0)
0000A8FC 6700                       	beq.s	.End
0000A8FE 48E7 80C0                  	movem.l	d0/a0-a1,-(sp)
0000A902 2049                       	movea.l	a1,a0
0000A904 4EB8 744A                  	jsr	KillPlayer
0000A908 4CDF 0301                  	movem.l	(sp)+,d0/a0-a1
0000A90C 4E75                       	rts
0000A90E                            
0000A90E                            ; -------------------------------------------------------------------------------
0000A90E                            
0000A90E                            .SetIneract:
0000A90E 3208                       	move.w	a0,d1
0000A910 0441 D000                  	subi.w	#v_player,d1
0000A914 EC49                       	lsr.w	#6,d1
0000A916 0241 007F                  	andi.w	#$7F,d1
0000A91A 1341 0020                  	move.b	d1,oPlayerPushObj(a1)
0000A91E                            
0000A91E                            .End:
0000A91E 4E75                       	rts
0000A920                            ; End of function CrushBetweenObjects
0000A920                            
0000A920                            ; -------------------------------------------------------------------------------
0000A920                            
0000A920                            ClearObjPush:
0000A920 7200                       	moveq	#0,d1
0000A922 1229 0020                  	move.b	oPlayerPushObj(a1),d1
0000A926 6700                       	beq.s	.End
0000A928 ED49                       	lsl.w	#6,d1
0000A92A 0681 00FF D000             	addi.l	#v_player&$FFFFFF,d1
0000A930 B0C1                       	cmpa.w	d1,a0
0000A932 6600                       	bne.s	.End
0000A934 137C 0000 0020             	move.b	#0,oPlayerPushObj(a1)
0000A93A                            
0000A93A                            .End:
0000A93A 4E75                       	rts
0000A93C                            ; End of function ClearObjPush
0000A93C                            
0000A93C                            ; -------------------------------------------------------------------------------
0000A93C                            
0000A93C                            ObjRotPlatform_SolidObj:
0000A93C 3628 0008                  	move.w	oX(a0),d3
0000A940 3828 000C                  	move.w	oY(a0),d4
0000A944 4EFA FC82                  	jmp	SolidObject
0000A948                            ; End of function ObjRotPlatform_SolidObj
0000A948                            
0000A948                            ; -------------------------------------------------------------------------------
0000A948                            
0000A948                            ObjRotPlatform:
0000A948 7000                       	moveq	#0,d0
0000A94A 1028 0024                  	move.b	oRoutine(a0),d0
0000A94E 303B 0000                  	move.w	ObjRotPlatform_Index(pc,d0.w),d0
0000A952 4EBB 0000                  	jsr	ObjRotPlatform_Index(pc,d0.w)
0000A956 4A79 00FF 190E             	tst.w	(v_time_stop_timer).l
0000A95C 6600                       	bne.s	.SkipAnim
0000A95E 43F9 0000 0000             	lea	(Ani_RotPlatform).l,a1
0000A964 6100 B88E                  	bsr.w	AnimateObject
0000A968                            
0000A968                            .SkipAnim:
0000A968 4EB8 4012                  	jsr	DrawObject
0000A96C 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000A970                            ; End of function ObjRotPlatform
0000A970                            
0000A970                            ; -------------------------------------------------------------------------------
0000A970 0000                       ObjRotPlatform_Index:dc.w	ObjRotPlatform_Init-ObjRotPlatform_Index
0000A972 0000                       	dc.w	ObjRotPlatform_Main-ObjRotPlatform_Index
0000A974                            ; -------------------------------------------------------------------------------
0000A974                            
0000A974                            ObjRotPlatform_Init:
0000A974 5428 0024                  	addq.b	#2,oRoutine(a0)
0000A978 117C 0004 0001             	move.b	#4,oRender(a0)
0000A97E 117C 0004 0018             	move.b	#4,oPriority(a0)
0000A984 217C 0000 0000 0004        	move.l	#MapSpr_RotPlatform,oMap(a0)
0000A98C 7006                       	moveq	#6,d0
0000A98E 4EBA 0000                  	jsr	LevelObj_SetBaseTile(pc)
0000A992 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000A998 117C 0008 0016             	move.b	#8,oYRadius(a0)
0000A99E                            ; End of function ObjRotPlatform_Init
0000A99E                            
0000A99E                            ; -------------------------------------------------------------------------------
0000A99E                            
0000A99E                            ObjRotPlatform_Main:
0000A99E                            
0000A99E                            ; FUNCTION CHUNK AT 002094F8 SIZE 000000C6 BYTES
0000A99E                            
0000A99E 4A28 0001                  	tst.b	oRender(a0)
0000A9A2 6A00 0000                  	bpl.w	.End
0000A9A6 43F8 D000                  	lea	(v_player).w,a1
0000A9AA 6190                       	bsr.s	ObjRotPlatform_SolidObj
0000A9AC 6700                       	beq.s	.End
0000A9AE 08E9 0000 002C             	bset	#0,oPlayerCtrl(a1)
0000A9B4 6600                       	bne.s	.DidInit
0000A9B6 137C 002D 001C             	move.b	#$2D,oAnim(a1)
0000A9BC 7000                       	moveq	#0,d0
0000A9BE 1340 002B                  	move.b	d0,oPlayerRotAngle(a1)
0000A9C2 3029 0008                  	move.w	oX(a1),d0
0000A9C6 9068 0008                  	sub.w	oX(a0),d0
0000A9CA 6400                       	bcc.s	.PlayerRight
0000A9CC 4440                       	neg.w	d0
0000A9CE 137C 0080 002B             	move.b	#$80,oPlayerRotAngle(a1)
0000A9D4                            
0000A9D4                            .PlayerRight:
0000A9D4 1340 0039                  	move.b	d0,oPlayerRotDist(a1)
0000A9D8                            
0000A9D8                            .DidInit:
0000A9D8 0C29 0006 0024             	cmpi.b	#6,oRoutine(a1)
0000A9DE 6400                       	bcc.s	.End
0000A9E0 6000                       	bra.s	.MoveSonic
0000A9E2                            
0000A9E2                            ; -------------------------------------------------------------------------------
0000A9E2                            
0000A9E2                            .End:
0000A9E2 4E75                       	rts
0000A9E4                            
0000A9E4                            ; -------------------------------------------------------------------------------
0000A9E4                            
0000A9E4                            .MoveSonic:
0000A9E4 5029 002B                  	addq.b	#8,oPlayerRotAngle(a1)
0000A9E8 1029 002B                  	move.b	oPlayerRotAngle(a1),d0
0000A9EC 4EB8 0AAC                  	jsr	CalcSine
0000A9F0 7000                       	moveq	#0,d0
0000A9F2 1029 0039                  	move.b	oPlayerRotDist(a1),d0
0000A9F6 C1C1                       	muls.w	d1,d0
0000A9F8 E088                       	lsr.l	#8,d0
0000A9FA 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000AA00 D169 0008                  	add.w	d0,oX(a1)
0000AA04 7000                       	moveq	#0,d0
0000AA06 1029 002B                  	move.b	oPlayerRotAngle(a1),d0
0000AA0A 1200                       	move.b	d0,d1
0000AA0C 0200 00F0                  	andi.b	#$F0,d0
0000AA10 E808                       	lsr.b	#4,d0
0000AA12 137B 0000 001B             	move.b	ObjRotPlatform_PlayerFrames(pc,d0.w),oAnimFrame(a1)
0000AA18 0201 003F                  	andi.b	#$3F,d1
0000AA1C 6600                       	bne.s	.ChkInput
0000AA1E 5229 0039                  	addq.b	#1,oPlayerRotDist(a1)
0000AA22                            
0000AA22                            .ChkInput:
0000AA22 31F8 F604 F602             	move.w	(v_ctrl1_held).w,(v_player_held).w
0000AA28 6100 0000                  	bsr.w	ObjRotPlatform_CheckDirs
0000AA2C 6000 0000                  	bra.w	ObjRotPlatform_CheckJump
0000AA30                            ; End of function ObjRotPlatform_Main
0000AA30                            
0000AA30                            ; -------------------------------------------------------------------------------
0000AA30 4E75                       	rts
0000AA32                            
0000AA32                            ; -------------------------------------------------------------------------------
0000AA32 0000 0001 0102 0202 0303+  ObjRotPlatform_PlayerFrames:dc.b	0, 0, 0, 1, 1,	2, 2, 2, 3, 3, 3, 4, 4,	5, 5, 5
0000AA42                            ; -------------------------------------------------------------------------------
0000AA42                            
0000AA42                            ObjRotPlatform_CheckDirs:
0000AA42 3029 0008                  	move.w	oX(a1),d0
0000AA46 9068 0008                  	sub.w	oX(a0),d0
0000AA4A 6400                       	bcc.s	.ChkRight2
0000AA4C 0838 0002 F602             	btst	#2,(v_player_held).w
0000AA52 6700                       	beq.s	.ChkRight
0000AA54 5229 0039                  	addq.b	#1,oPlayerRotDist(a1)
0000AA58 6000                       	bra.s	.End
0000AA5A                            
0000AA5A                            ; -------------------------------------------------------------------------------
0000AA5A                            
0000AA5A                            .ChkRight:
0000AA5A 0838 0003 F602             	btst	#3,(v_player_held).w
0000AA60 6700                       	beq.s	.End
0000AA62 5329 0039                  	subq.b	#1,oPlayerRotDist(a1)
0000AA66 6400                       	bcc.s	.End
0000AA68 137C 0000 0039             	move.b	#0,oPlayerRotDist(a1)
0000AA6E 6000                       	bra.s	.End
0000AA70                            
0000AA70                            ; -------------------------------------------------------------------------------
0000AA70                            
0000AA70                            .ChkRight2:
0000AA70 0838 0003 F602             	btst	#3,(v_player_held).w
0000AA76 6700                       	beq.s	.ChkLeft
0000AA78 5229 0039                  	addq.b	#1,oPlayerRotDist(a1)
0000AA7C 6000                       	bra.s	.End
0000AA7E                            
0000AA7E                            ; -------------------------------------------------------------------------------
0000AA7E                            
0000AA7E                            .ChkLeft:
0000AA7E 0838 0002 F602             	btst	#2,(v_player_held).w
0000AA84 6700                       	beq.s	.End
0000AA86 5329 0039                  	subq.b	#1,oPlayerRotDist(a1)
0000AA8A 6400                       	bcc.s	.End
0000AA8C 137C 0000 0039             	move.b	#0,oPlayerRotDist(a1)
0000AA92                            
0000AA92                            .End:
0000AA92 4E75                       	rts
0000AA94                            ; End of function ObjRotPlatform_CheckDirs
0000AA94                            
0000AA94                            ; -------------------------------------------------------------------------------
0000AA94                            ; START	OF FUNCTION CHUNK FOR ObjRotPlatform_Main
0000AA94                            
0000AA94                            ObjRotPlatform_CheckJump:
0000AA94 1038 F603                  	move.b	(v_player_pressed).w,d0
0000AA98 0200 0070                  	andi.b	#$70,d0
0000AA9C 6700 0000                  	beq.w	.End2
0000AAA0 4229 002C                  	clr.b	oPlayerCtrl(a1)
0000AAA4 343C 0680                  	move.w	#$680,d2
0000AAA8 0828 0006 0022             	btst	#6,oStatus(a0)
0000AAAE 6700                       	beq.s	.NoWater
0000AAB0 343C 0380                  	move.w	#$380,d2
0000AAB4                            
0000AAB4                            .NoWater:
0000AAB4 7000                       	moveq	#0,d0
0000AAB6 1029 0026                  	move.b	oAngle(a1),d0
0000AABA 0400 0040                  	subi.b	#$40,d0
0000AABE 4EB8 0AAC                  	jsr	CalcSine
0000AAC2 C3C2                       	muls.w	d2,d1
0000AAC4 E081                       	asr.l	#8,d1
0000AAC6 D369 0010                  	add.w	d1,oXVel(a1)
0000AACA C1C2                       	muls.w	d2,d0
0000AACC E080                       	asr.l	#8,d0
0000AACE D169 0012                  	add.w	d0,oYVel(a1)
0000AAD2 08E9 0001 0022             	bset	#1,oStatus(a1)
0000AAD8 08A9 0005 0022             	bclr	#5,oStatus(a1)
0000AADE 137C 0001 003C             	move.b	#1,oPlayerJump(a1)
0000AAE4 4229 0038                  	clr.b	oPlayerStick(a1)
0000AAE8 303C 00A0                  	move.w	#$A0,d0
0000AAEC 4EB8 2708                  	jsr	PlayFMSound
0000AAF0 4A39 00FF 195B             	tst.b	(v_mini_sonic).l
0000AAF6 6700                       	beq.s	.NotMini
0000AAF8 137C 000A 0016             	move.b	#$A,oYRadius(a1)
0000AAFE 137C 0005 0017             	move.b	#5,oXRadius(a1)
0000AB04 6000                       	bra.s	.GotSize
0000AB06                            
0000AB06                            ; -------------------------------------------------------------------------------
0000AB06                            
0000AB06                            .NotMini:
0000AB06 137C 0013 0016             	move.b	#$13,oYRadius(a1)
0000AB0C 137C 0009 0017             	move.b	#9,oXRadius(a1)
0000AB12                            
0000AB12                            .GotSize:
0000AB12 0829 0002 0022             	btst	#2,oStatus(a1)
0000AB18 6600                       	bne.s	.RollJump
0000AB1A 4A39 00FF 195B             	tst.b	(v_mini_sonic).l
0000AB20 6700                       	beq.s	.NotMini2
0000AB22 137C 000A 0016             	move.b	#$A,oYRadius(a1)
0000AB28 137C 0005 0017             	move.b	#5,oXRadius(a1)
0000AB2E 6000                       	bra.s	.SetRoll
0000AB30                            
0000AB30                            ; -------------------------------------------------------------------------------
0000AB30                            
0000AB30                            .NotMini2:
0000AB30 137C 000E 0016             	move.b	#$E,oYRadius(a1)
0000AB36 137C 0007 0017             	move.b	#7,oXRadius(a1)
0000AB3C 5A69 000C                  	addq.w	#5,oY(a1)
0000AB40                            
0000AB40                            .SetRoll:
0000AB40 08E9 0002 0022             	bset	#2,oStatus(a1)
0000AB46 137C 0002 001C             	move.b	#2,oAnim(a1)
0000AB4C                            
0000AB4C                            .End2:
0000AB4C 4E75                       	rts
0000AB4E                            
0000AB4E                            ; -------------------------------------------------------------------------------
0000AB4E                            
0000AB4E                            .RollJump:
0000AB4E 08E9 0004 0022             	bset	#4,oStatus(a1)
0000AB54 4E75                       	rts
0000AB56                            ; END OF FUNCTION CHUNK	FOR ObjRotPlatform_Main
0000AB56                            
0000AB56                            ; -------------------------------------------------------------------------------
0000AB56                            Ani_RotPlatform:
0000AB56                            	include	"level/objects/rotatingptfm/anim.asm"
0000AB56                            .Anim:
0000AB56 0000                       	dc.w	unk_2095C0-.Anim
0000AB58 01                         unk_2095C0:	dc.b	  1
0000AB59 00                         	dc.b	  0
0000AB5A 01                         	dc.b	  1
0000AB5B 02                         	dc.b	  2
0000AB5C FF                         	dc.b	$FF
0000AB5D 00                         	dc.b	  0
0000AB5D 00                         	dc.b	  0
0000AB5E                            	even
0000AB5E                            MapSpr_RotPlatform:
0000AB5E                            	include	"level/objects/rotatingptfm/map.asm"
0000AB5E                            .Map:
0000AB5E 0000                       	dc.w	unk_2095CC-.Map
0000AB60 0000                       	dc.w	unk_2095D8-.Map
0000AB62 0000                       	dc.w	unk_2095E4-.Map
0000AB64 02                         unk_2095CC:	dc.b	  2
0000AB65 F8                         	dc.b	$F8 ; ø
0000AB66 05                         	dc.b	  5
0000AB67 00                         	dc.b	  0
0000AB68 00                         	dc.b	  0
0000AB69 F0                         	dc.b	$F0 ; ð
0000AB6A F8                         	dc.b	$F8 ; ø
0000AB6B 05                         	dc.b	  5
0000AB6C 08                         	dc.b	  8
0000AB6D 00                         	dc.b	  0
0000AB6E 00                         	dc.b	  0
0000AB6F 00                         	dc.b	  0
0000AB70 02                         unk_2095D8:	dc.b	  2
0000AB71 F8                         	dc.b	$F8 ; ø
0000AB72 05                         	dc.b	  5
0000AB73 00                         	dc.b	  0
0000AB74 00                         	dc.b	  0
0000AB75 F0                         	dc.b	$F0 ; ð
0000AB76 F8                         	dc.b	$F8 ; ø
0000AB77 05                         	dc.b	  5
0000AB78 08                         	dc.b	  8
0000AB79 00                         	dc.b	  0
0000AB7A 00                         	dc.b	  0
0000AB7B 00                         	dc.b	  0
0000AB7C 01                         unk_2095E4:	dc.b	  1
0000AB7D F8                         	dc.b	$F8 ; ø
0000AB7E 0D                         	dc.b	 $D
0000AB7F 00                         	dc.b	  0
0000AB80 04                         	dc.b	  4
0000AB81 F0                         	dc.b	$F0 ; ð
0000AB81 F0                         	dc.b	$F0 ; ð
0000AB82                            	even
0000AB82                            ; -------------------------------------------------------------------------------
0000AB82                            
0000AB82                            ObjGrayRock:
0000AB82 7000                       	moveq	#0,d0
0000AB84 1028 0024                  	move.b	oRoutine(a0),d0
0000AB88 303B 0000                  	move.w	ObjGrayRock_Index(pc,d0.w),d0
0000AB8C 4EBB 0000                  	jsr	ObjGrayRock_Index(pc,d0.w)
0000AB90 4EB8 4012                  	jsr	DrawObject
0000AB94 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000AB98                            ; End of function ObjGrayRock
0000AB98                            
0000AB98                            ; -------------------------------------------------------------------------------
0000AB98 0000                       ObjGrayRock_Index:dc.w	ObjGrayRock_Init-ObjGrayRock_Index
0000AB9A 0000                       	dc.w	ObjGrayRock_Main-ObjGrayRock_Index
0000AB9C                            ; -------------------------------------------------------------------------------
0000AB9C                            
0000AB9C                            ObjGrayRock_Init:
0000AB9C 5428 0024                  	addq.b	#2,oRoutine(a0)
0000ABA0 0028 0004 0001             	ori.b	#4,oRender(a0)
0000ABA6 117C 0004 0018             	move.b	#4,oPriority(a0)
0000ABAC 217C 0000 0000 0004        	move.l	#MapSpr_GrayRock,oMap(a0)
0000ABB4 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000ABBA 117C 0010 0016             	move.b	#$10,oYRadius(a0)
0000ABC0 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000ABC6 700B                       	moveq	#$B,d0
0000ABC8 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000ABCE                            ; End of function ObjGrayRock_Init
0000ABCE                            
0000ABCE                            ; -------------------------------------------------------------------------------
0000ABCE                            
0000ABCE                            ObjGrayRock_Main:
0000ABCE 4A28 0001                  	tst.b	oRender(a0)
0000ABD2 6A00                       	bpl.s	.End
0000ABD4 43F8 D000                  	lea	(v_player).w,a1
0000ABD8 3628 0008                  	move.w	oX(a0),d3
0000ABDC 3828 000C                  	move.w	oY(a0),d4
0000ABE0 4EFA F9E6                  	jmp	SolidObject
0000ABE4                            
0000ABE4                            ; -------------------------------------------------------------------------------
0000ABE4                            
0000ABE4                            .End:
0000ABE4 4E75                       	rts
0000ABE6                            ; End of function ObjGrayRock_Main
0000ABE6                            
0000ABE6                            ; -------------------------------------------------------------------------------
0000ABE6                            MapSpr_GrayRock:
0000ABE6                            	include	"level/objects/grayrock/map.asm"
0000ABE6                            .Map:
0000ABE6 0000                       	dc.w	unk_209656-.Map
0000ABE8 02                         unk_209656:	dc.b	  2
0000ABE9 F8                         	dc.b	$F8 ; ø
0000ABEA 02                         	dc.b	  2
0000ABEB 00                         	dc.b	  0
0000ABEC 00                         	dc.b	  0
0000ABED EC                         	dc.b	$EC ; ì
0000ABEE F0                         	dc.b	$F0 ; ð
0000ABEF 0F                         	dc.b	 $F
0000ABF0 00                         	dc.b	  0
0000ABF1 03                         	dc.b	  3
0000ABF2 F4                         	dc.b	$F4 ; ô
0000ABF3 00                         	dc.b	  0
0000ABF3 00                         	dc.b	  0
0000ABF4                            	even
0000ABF4                            ; -------------------------------------------------------------------------------
0000ABF4                            
0000ABF4                            ObjMovingSpring:
0000ABF4 7000                       	moveq	#0,d0
0000ABF6 1028 0024                  	move.b	oRoutine(a0),d0
0000ABFA 303B 0000                  	move.w	ObjMovingSpring_Index(pc,d0.w),d0
0000ABFE 4EBB 0000                  	jsr	ObjMovingSpring_Index(pc,d0.w)
0000AC02 3028 0036                  	move.w	oVar36(a0),d0
0000AC06 0240 FF80                  	andi.w	#$FF80,d0
0000AC0A 3238 F700                  	move.w	(v_cam_fg_x).w,d1
0000AC0E 0441 0080                  	subi.w	#$80,d1
0000AC12 0241 FF80                  	andi.w	#$FF80,d1
0000AC16 9041                       	sub.w	d1,d0
0000AC18 0C40 0280                  	cmpi.w	#$280,d0
0000AC1C 6200 94A0                  	bhi.w	DeleteObject
0000AC20 4E75                       	rts
0000AC22                            
0000AC22                            ; -------------------------------------------------------------------------------
0000AC22 0000                       ObjMovingSpring_Index:dc.w	ObjMovingSpring_Init-ObjMovingSpring_Index
0000AC24 0000                       	dc.w	ObjMovingSpring_AlignToGround-ObjMovingSpring_Index
0000AC26 0000                       	dc.w	ObjMovingSpring_Main-ObjMovingSpring_Index
0000AC28                            ; -------------------------------------------------------------------------------
0000AC28                            
0000AC28                            ObjMovingSpring_Init:
0000AC28 5428 0024                  	addq.b	#2,oRoutine(a0)
0000AC2C 0028 0004 0001             	ori.b	#4,oRender(a0)
0000AC32 117C 0004 0018             	move.b	#4,oPriority(a0)
0000AC38 217C 0000 0000 0004        	move.l	#MapSpr_MovingSpring,oMap(a0)
0000AC40 117C 0008 0019             	move.b	#8,oWidth(a0)
0000AC46 117C 0007 0016             	move.b	#7,oYRadius(a0)
0000AC4C 3168 0008 0036             	move.w	oX(a0),oVar36(a0)
0000AC52 317C 0180 0010             	move.w	#$180,oXVel(a0)
0000AC58 700E                       	moveq	#$E,d0
0000AC5A 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000AC60 4EB8 7CE4                  	jsr	FindObjSlot
0000AC64 6700                       	beq.s	.GenSpring
0000AC66 4EF8 40BE                  	jmp	DeleteObject
0000AC6A                            
0000AC6A                            ; -------------------------------------------------------------------------------
0000AC6A                            
0000AC6A                            .GenSpring:
0000AC6A 12BC 000A                  	move.b	#$A,oID(a1)
0000AC6E 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000AC74 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000AC7A 0469 0010 000C             	subi.w	#$10,oY(a1)
0000AC80 137C 00F0 0039             	move.b	#$F0,oVar39(a1)
0000AC86 3348 0034                  	move.w	a0,oVar34(a1)
0000AC8A 1368 0028 0028             	move.b	oSubtype(a0),oSubtype(a1)
0000AC90                            ; End of function ObjMovingSpring_Init
0000AC90                            
0000AC90                            ; -------------------------------------------------------------------------------
0000AC90                            
0000AC90                            ObjMovingSpring_AlignToGround:
0000AC90 4EB8 6F3C                  	jsr	CheckFloorEdge
0000AC94 4A41                       	tst.w	d1
0000AC96 6A00                       	bpl.s	.Sink
0000AC98 D368 000C                  	add.w	d1,oY(a0)
0000AC9C 3168 000C 0032             	move.w	oY(a0),oVar32(a0)
0000ACA2 5428 0024                  	addq.b	#2,oRoutine(a0)
0000ACA6 4E75                       	rts
0000ACA8                            
0000ACA8                            ; -------------------------------------------------------------------------------
0000ACA8                            
0000ACA8                            .Sink:
0000ACA8 5268 000C                  	addq.w	#1,oY(a0)
0000ACAC 4E75                       	rts
0000ACAE                            ; End of function ObjMovingSpring_AlignToGround
0000ACAE                            
0000ACAE                            ; -------------------------------------------------------------------------------
0000ACAE                            
0000ACAE                            ObjMovingSpring_Main:
0000ACAE 4A79 00FF 190E             	tst.w	(v_time_stop_timer).l
0000ACB4 6600                       	bne.s	.Display
0000ACB6 4EB8 6F3C                  	jsr	CheckFloorEdge
0000ACBA D368 000C                  	add.w	d1,oY(a0)
0000ACBE 3028 0032                  	move.w	oVar32(a0),d0
0000ACC2 9068 000C                  	sub.w	oY(a0),d0
0000ACC6 0C40 000C                  	cmpi.w	#$C,d0
0000ACCA 6500                       	bcs.s	.NotEdge
0000ACCC 4468 0010                  	neg.w	oXVel(a0)
0000ACD0                            
0000ACD0                            .NotEdge:
0000ACD0 4EB8 3FBE                  	jsr	ObjMove
0000ACD4 43F9 0000 0000             	lea	(Ani_MovingSpring).l,a1
0000ACDA 4EB8 61F4                  	jsr	AnimateObject
0000ACDE                            
0000ACDE                            .Display:
0000ACDE 4EF8 4012                  	jmp	DrawObject
0000ACE2                            ; End of function ObjMovingSpring_Main
0000ACE2                            
0000ACE2                            ; -------------------------------------------------------------------------------
0000ACE2                            
0000ACE2                            ObjSpring2:
0000ACE2 7000                       	moveq	#0,d0
0000ACE4 1028 0024                  	move.b	oRoutine(a0),d0
0000ACE8 303B 0000                  	move.w	ObjSpring2_Index(pc,d0.w),d0
0000ACEC 4EFB 0000                  	jmp	ObjSpring2_Index(pc,d0.w)
0000ACF0                            ; End of function ObjSpring2
0000ACF0                            
0000ACF0                            ; -------------------------------------------------------------------------------
0000ACF0 0000                       ObjSpring2_Index:dc.w	ObjSpring2_Init-ObjSpring2_Index
0000ACF2 0000                       	dc.w	ObjSpring2_Main-ObjSpring2_Index
0000ACF4                            ; -------------------------------------------------------------------------------
0000ACF4                            
0000ACF4                            ObjSpring2_Init:
0000ACF4 217C 0000 0000 0004        	move.l	#MapSpr_Spring1,oMap(a0)
0000ACFC 317C 8520 0002             	move.w	#$8520,oTile(a0)
0000AD02 0028 0004 0001             	ori.b	#4,oRender(a0)
0000AD08 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000AD0E 117C 0008 0016             	move.b	#8,oYRadius(a0)
0000AD14 117C 0004 0018             	move.b	#4,oPriority(a0)
0000AD1A 5428 0024                  	addq.b	#2,oRoutine(a0)
0000AD1E                            ; End of function ObjSpring2_Init
0000AD1E                            
0000AD1E                            ; -------------------------------------------------------------------------------
0000AD1E                            
0000AD1E                            ObjSpring2_Main:
0000AD1E 3178 D008 0008             	move.w	(v_player+oX).w,oX(a0)
0000AD24 3178 D00C 000C             	move.w	(v_player+oY).w,oY(a0)
0000AD2A 4EF8 4012                  	jmp	DrawObject
0000AD2E                            ; End of function ObjSpring2_Main
0000AD2E                            
0000AD2E                            ; -------------------------------------------------------------------------------
0000AD2E                            
0000AD2E                            ObjSpring:
0000AD2E 0C28 0005 0025             	cmpi.b	#5,oRoutine2(a0)
0000AD34 67AC                       	beq.s	ObjSpring2
0000AD36 7000                       	moveq	#0,d0
0000AD38 1028 0024                  	move.b	oRoutine(a0),d0
0000AD3C 6700                       	beq.s	.DoControl
0000AD3E 4A28 0001                  	tst.b	oRender(a0)
0000AD42 6A00                       	bpl.s	.DisplayOnly
0000AD44                            
0000AD44                            .DoControl:
0000AD44 323B 0000                  	move.w	ObjSpring_Index(pc,d0.w),d1
0000AD48 4EBB 1000                  	jsr	ObjSpring_Index(pc,d1.w)
0000AD4C                            
0000AD4C                            .DisplayOnly:
0000AD4C 6100 92C4                  	bsr.w	DrawObject
0000AD50 223C FFFF 0000             	move.l	#$FFFF0000,d1
0000AD56 3228 0034                  	move.w	oVar34(a0),d1
0000AD5A 6700                       	beq.s	.ChkDel
0000AD5C 2241                       	movea.l	d1,a1
0000AD5E 3169 0008 0008             	move.w	oX(a1),oX(a0)
0000AD64 3169 000C 000C             	move.w	oY(a1),oY(a0)
0000AD6A 1028 0038                  	move.b	oVar38(a0),d0
0000AD6E 4880                       	ext.w	d0
0000AD70 D168 0008                  	add.w	d0,oX(a0)
0000AD74 1028 0039                  	move.b	oVar39(a0),d0
0000AD78 4880                       	ext.w	d0
0000AD7A D168 000C                  	add.w	d0,oY(a0)
0000AD7E                            
0000AD7E                            .ChkDel:
0000AD7E 3028 0036                  	move.w	oVar36(a0),d0
0000AD82 0240 FF80                  	andi.w	#$FF80,d0
0000AD86 3238 F700                  	move.w	(v_cam_fg_x).w,d1
0000AD8A 0441 0080                  	subi.w	#$80,d1
0000AD8E 0241 FF80                  	andi.w	#$FF80,d1
0000AD92 9041                       	sub.w	d1,d0
0000AD94 0C40 0280                  	cmpi.w	#$280,d0
0000AD98 6200 9324                  	bhi.w	DeleteObject
0000AD9C 4E75                       	rts
0000AD9E                            ; End of function ObjSpring
0000AD9E                            
0000AD9E                            ; -------------------------------------------------------------------------------
0000AD9E 0000                       ObjSpring_Index:dc.w	ObjSpring_Init-ObjSpring_Index
0000ADA0 0000                       	dc.w	ObjSpring_Main_Up-ObjSpring_Index
0000ADA2 0000                       	dc.w	ObjSpring_Anim_Up-ObjSpring_Index
0000ADA4 0000                       	dc.w	ObjSpring_Reset_Up-ObjSpring_Index
0000ADA6 0000                       	dc.w	ObjSpring_Main_Side-ObjSpring_Index
0000ADA8 0000                       	dc.w	ObjSpring_Anim_Side-ObjSpring_Index
0000ADAA 0000                       	dc.w	ObjSpring_Reset_Side-ObjSpring_Index
0000ADAC 0000                       	dc.w	ObjSpring_Main_Down-ObjSpring_Index
0000ADAE 0000                       	dc.w	ObjSpring_Anim_Down-ObjSpring_Index
0000ADB0 0000                       	dc.w	ObjSpring_Reset_Down-ObjSpring_Index
0000ADB2 0000                       	dc.w	ObjSpring_Main_Diag-ObjSpring_Index
0000ADB4 0000                       	dc.w	ObjSpring_Anim_Diag-ObjSpring_Index
0000ADB6 0000                       	dc.w	ObjSpring_Reset_Diag-ObjSpring_Index
0000ADB8                            ; -------------------------------------------------------------------------------
0000ADB8                            
0000ADB8                            ObjSpring_Init:
0000ADB8 5428 0024                  	addq.b	#2,oRoutine(a0)
0000ADBC 217C 0000 0000 0004        	move.l	#MapSpr_Spring1,oMap(a0)
0000ADC4 317C 0520 0002             	move.w	#$520,oTile(a0)
0000ADCA 0028 0004 0001             	ori.b	#4,oRender(a0)
0000ADD0 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000ADD6 117C 0008 0016             	move.b	#8,oYRadius(a0)
0000ADDC 3168 0008 0036             	move.w	oX(a0),oVar36(a0)
0000ADE2 117C 0004 0018             	move.b	#4,oPriority(a0)
0000ADE8 1028 0028                  	move.b	oSubtype(a0),d0
0000ADEC 0800 0002                  	btst	#2,d0
0000ADF0 6700                       	beq.s	.SubtypeB2Clear
0000ADF2 117C 0008 0024             	move.b	#8,oRoutine(a0)
0000ADF8 117C 0008 0019             	move.b	#8,oWidth(a0)
0000ADFE 117C 0010 0016             	move.b	#$10,oYRadius(a0)
0000AE04 217C 0000 0000 0004        	move.l	#MapSpr_Spring2,oMap(a0)
0000AE0C 6000                       	bra.s	.NoFlip
0000AE0E                            
0000AE0E                            ; -------------------------------------------------------------------------------
0000AE0E                            
0000AE0E                            .SubtypeB2Clear:
0000AE0E 0800 0003                  	btst	#3,d0
0000AE12 6700                       	beq.s	.SubtypeB3Clear
0000AE14 117C 0014 0024             	move.b	#$14,oRoutine(a0)
0000AE1A 117C 0018 0019             	move.b	#$18,oWidth(a0)
0000AE20 117C 000C 0016             	move.b	#$C,oYRadius(a0)
0000AE26 217C 0000 0000 0004        	move.l	#MapSpr_Spring3,oMap(a0)
0000AE2E 2F00                       	move.l	d0,-(sp)
0000AE30 700F                       	moveq	#$F,d0
0000AE32 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000AE38 201F                       	move.l	(sp)+,d0
0000AE3A 6000                       	bra.s	.NoFlip
0000AE3C                            
0000AE3C                            ; -------------------------------------------------------------------------------
0000AE3C                            
0000AE3C                            .SubtypeB3Clear:
0000AE3C 0828 0001 0001             	btst	#1,oRender(a0)
0000AE42 6700                       	beq.s	.NoFlip
0000AE44 117C 000E 0024             	move.b	#$E,oRoutine(a0)
0000AE4A 08E8 0001 0022             	bset	#1,oStatus(a0)
0000AE50                            
0000AE50                            .NoFlip:
0000AE50 0800 0001                  	btst	#1,d0
0000AE54 6700                       	beq.s	.RedSpring
0000AE56 08E8 0005 0002             	bset	#5,oTile(a0)
0000AE5C                            
0000AE5C                            .RedSpring:
0000AE5C 0240 0002                  	andi.w	#2,d0
0000AE60 317B 0000 0030             	move.w	ObjSpring_Speeds(pc,d0.w),oVar30(a0)
0000AE66 4E75                       	rts
0000AE68                            ; End of function ObjSpring_Init
0000AE68                            
0000AE68                            ; -------------------------------------------------------------------------------
0000AE68 F000                       ObjSpring_Speeds:dc.w	$F000
0000AE6A F600                       	dc.w	$F600
0000AE6C                            ; -------------------------------------------------------------------------------
0000AE6C                            
0000AE6C                            ObjSpring_SolidObject:
0000AE6C 3628 0008                  	move.w	oX(a0),d3
0000AE70 3828 000C                  	move.w	oY(a0),d4
0000AE74 4EFA F752                  	jmp	SolidObject
0000AE78                            ; End of function ObjSpring_SolidObject
0000AE78                            
0000AE78                            ; -------------------------------------------------------------------------------
0000AE78                            
0000AE78                            ObjSpring_Main_Up:
0000AE78 4A28 0001                  	tst.b	oRender(a0)
0000AE7C 6A00                       	bpl.s	.End
0000AE7E 43F8 D000                  	lea	(v_player).w,a1
0000AE82 61E8                       	bsr.s	ObjSpring_SolidObject
0000AE84 6600                       	bne.s	.Action
0000AE86                            
0000AE86                            .End:
0000AE86 4E75                       	rts
0000AE88                            
0000AE88                            ; -------------------------------------------------------------------------------
0000AE88                            
0000AE88                            .Action:
0000AE88 117C 0004 0024             	move.b	#4,oRoutine(a0)
0000AE8E 5069 000C                  	addq.w	#8,oY(a1)
0000AE92 3368 0030 0012             	move.w	oVar30(a0),oYVel(a1)
0000AE98 08E9 0001 0022             	bset	#1,oStatus(a1)
0000AE9E 08A9 0003 0022             	bclr	#3,oStatus(a1)
0000AEA4 137C 0010 001C             	move.b	#$10,oAnim(a1)
0000AEAA 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000AEB0 303C 00CC                  	move.w	#$CC,d0
0000AEB4 4EF8 2708                  	jmp	PlayFMSound
0000AEB8                            ; End of function ObjSpring_Main_Up
0000AEB8                            
0000AEB8                            ; -------------------------------------------------------------------------------
0000AEB8                            
0000AEB8                            ObjSpring_Anim_Up:
0000AEB8 43F9 0000 0000             	lea	(Ani_Spring).l,a1
0000AEBE 6000 B334                  	bra.w	AnimateObject
0000AEC2                            ; End of function ObjSpring_Anim_Up
0000AEC2                            
0000AEC2                            ; -------------------------------------------------------------------------------
0000AEC2                            
0000AEC2                            ObjSpring_Reset_Up:
0000AEC2 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000AEC8 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
0000AECE 5928 0024                  	subq.b	#4,oRoutine(a0)
0000AED2 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000AED8 4E75                       	rts
0000AEDA                            ; End of function ObjSpring_Reset_Up
0000AEDA                            
0000AEDA                            ; -------------------------------------------------------------------------------
0000AEDA                            
0000AEDA                            ObjSpring_SolidObject2:
0000AEDA 3628 0008                  	move.w	8(a0),d3
0000AEDE 3828 000C                  	move.w	$C(a0),d4
0000AEE2 4EFA F6E4                  	jmp	SolidObject
0000AEE6                            ; End of function ObjSpring_SolidObject2
0000AEE6                            
0000AEE6                            ; -------------------------------------------------------------------------------
0000AEE6                            
0000AEE6                            ObjSpring_Main_Side:
0000AEE6 4A28 0001                  	tst.b	1(a0)
0000AEEA 6A00                       	bpl.s	.End
0000AEEC 43F8 D000                  	lea	(v_player).w,a1
0000AEF0 61E8                       	bsr.s	ObjSpring_SolidObject2
0000AEF2 0828 0005 0022             	btst	#5,oStatus(a0)
0000AEF8 6600                       	bne.s	.Action
0000AEFA                            
0000AEFA                            .End:
0000AEFA 4E75                       	rts
0000AEFC                            
0000AEFC                            ; -------------------------------------------------------------------------------
0000AEFC                            
0000AEFC                            .Action:
0000AEFC 117C 000A 0024             	move.b	#$A,oRoutine(a0)
0000AF02 3368 0030 0010             	move.w	oVar30(a0),oXVel(a1)
0000AF08 5069 0008                  	addq.w	#8,oX(a1)
0000AF0C 08E9 0000 0022             	bset	#0,oStatus(a1)
0000AF12 0828 0000 0022             	btst	#0,oStatus(a0)
0000AF18 6600                       	bne.s	.NoFlip
0000AF1A 0469 0010 0008             	subi.w	#$10,oX(a1)
0000AF20 4469 0010                  	neg.w	oXVel(a1)
0000AF24 08A9 0000 0022             	bclr	#0,oStatus(a1)
0000AF2A                            
0000AF2A                            .NoFlip:
0000AF2A 337C 000F 003E             	move.w	#$F,oPlayerMoveLock(a1)
0000AF30 3369 0010 0014             	move.w	oXVel(a1),oPlayerGVel(a1)
0000AF36 0829 0002 0022             	btst	#2,oStatus(a1)
0000AF3C 6600                       	bne.s	.ClearAngle
0000AF3E 137C 0000 001C             	move.b	#0,oAnim(a1)
0000AF44                            
0000AF44                            .ClearAngle:
0000AF44 4229 0026                  	clr.b	oAngle(a1)
0000AF48 08A8 0005 0022             	bclr	#5,oStatus(a0)
0000AF4E 08A9 0005 0022             	bclr	#5,oStatus(a1)
0000AF54 303C 00CC                  	move.w	#$CC,d0
0000AF58 4EF8 2708                  	jmp	PlayFMSound
0000AF5C                            ; End of function ObjSpring_Main_Side
0000AF5C                            
0000AF5C                            ; -------------------------------------------------------------------------------
0000AF5C                            
0000AF5C                            ObjSpring_Anim_Side:
0000AF5C 43F9 0000 0000             	lea	(Ani_Spring).l,a1
0000AF62 6000 B290                  	bra.w	AnimateObject
0000AF66                            ; End of function ObjSpring_Anim_Side
0000AF66                            
0000AF66                            ; -------------------------------------------------------------------------------
0000AF66                            
0000AF66                            ObjSpring_Reset_Side:
0000AF66 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
0000AF6C 5928 0024                  	subq.b	#4,oRoutine(a0)
0000AF70 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000AF76 4E75                       	rts
0000AF78                            ; End of function ObjSpring_Reset_Side
0000AF78                            
0000AF78                            ; -------------------------------------------------------------------------------
0000AF78                            
0000AF78                            ObjSpring_SolidObject3:
0000AF78                            
0000AF78                            ; FUNCTION CHUNK AT 00208FF4 SIZE 00000008 BYTES
0000AF78                            
0000AF78 3628 0008                  	move.w	oX(a0),d3
0000AF7C 3828 000C                  	move.w	oY(a0),d4
0000AF80 4EFA F638                  	jmp	SolidObject2
0000AF84                            ; End of function ObjSpring_SolidObject3
0000AF84                            
0000AF84                            ; -------------------------------------------------------------------------------
0000AF84                            
0000AF84                            ObjSpring_Main_Down:
0000AF84 4A28 0001                  	tst.b	oRender(a0)
0000AF88 6A00                       	bpl.s	.End
0000AF8A 43F8 D000                  	lea	(v_player).w,a1
0000AF8E 61E8                       	bsr.s	ObjSpring_SolidObject3
0000AF90 6600                       	bne.s	.Action
0000AF92                            
0000AF92                            .End:
0000AF92 4E75                       	rts
0000AF94                            
0000AF94                            ; -------------------------------------------------------------------------------
0000AF94                            
0000AF94                            .Action:
0000AF94 117C 0010 0024             	move.b	#$10,oRoutine(a0)
0000AF9A 5169 000C                  	subq.w	#8,oY(a1)
0000AF9E 3368 0030 0012             	move.w	oVar30(a0),oYVel(a1)
0000AFA4 4469 0012                  	neg.w	oYVel(a1)
0000AFA8 08E9 0001 0022             	bset	#1,oStatus(a1)
0000AFAE 08A9 0003 0022             	bclr	#3,oStatus(a1)
0000AFB4 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000AFBA 303C 00CC                  	move.w	#$CC,d0
0000AFBE 4EB8 2708                  	jsr	PlayFMSound
0000AFC2                            ; End of function ObjSpring_Main_Down
0000AFC2                            
0000AFC2                            ; -------------------------------------------------------------------------------
0000AFC2                            
0000AFC2                            ObjSpring_Anim_Down:
0000AFC2 43F9 0000 0000             	lea	(Ani_Spring).l,a1
0000AFC8 6000 B22A                  	bra.w	AnimateObject
0000AFCC                            ; End of function ObjSpring_Anim_Down
0000AFCC                            
0000AFCC                            ; -------------------------------------------------------------------------------
0000AFCC                            
0000AFCC                            ObjSpring_Reset_Down:
0000AFCC 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
0000AFD2 5928 0024                  	subq.b	#4,oRoutine(a0)
0000AFD6 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000AFDC 4E75                       	rts
0000AFDE                            ; End of function ObjSpring_Reset_Down
0000AFDE                            
0000AFDE                            ; -------------------------------------------------------------------------------
0000AFDE                            
0000AFDE                            ObjSpring_Main_Diag:
0000AFDE 4A28 0001                  	tst.b	oRender(a0)
0000AFE2 6A00                       	bpl.s	.End
0000AFE4 43F8 D000                  	lea	(v_player).w,a1
0000AFE8 6100 FE82                  	bsr.w	ObjSpring_SolidObject
0000AFEC 6600                       	bne.s	.Action
0000AFEE 0828 0005 0022             	btst	#5,oStatus(a0)
0000AFF4 6600                       	bne.s	.Action
0000AFF6                            
0000AFF6                            .End:
0000AFF6 4E75                       	rts
0000AFF8                            
0000AFF8                            ; -------------------------------------------------------------------------------
0000AFF8                            
0000AFF8                            .Action:
0000AFF8 117C 0016 0024             	move.b	#$16,oRoutine(a0)
0000AFFE 7000                       	moveq	#0,d0
0000B000 103C 00E0                  	move.b	#$E0,d0
0000B004 4EB8 0AAC                  	jsr	CalcSine
0000B008 3428 0030                  	move.w	oVar30(a0),d2
0000B00C 4442                       	neg.w	d2
0000B00E C0C2                       	mulu.w	d2,d0
0000B010 C2C2                       	mulu.w	d2,d1
0000B012 E088                       	lsr.l	#8,d0
0000B014 E089                       	lsr.l	#8,d1
0000B016 3340 0012                  	move.w	d0,oYVel(a1)
0000B01A 3341 0010                  	move.w	d1,oXVel(a1)
0000B01E 5069 000C                  	addq.w	#8,oY(a1)
0000B022 0828 0001 0001             	btst	#1,oRender(a0)
0000B028 6700                       	beq.s	.NoVFlip
0000B02A 0469 0010 000C             	subi.w	#$10,oY(a1)
0000B030 4469 0012                  	neg.w	oYVel(a1)
0000B034                            
0000B034                            .NoVFlip:
0000B034 08A9 0000 0022             	bclr	#0,oStatus(a1)
0000B03A 5169 0008                  	subq.w	#8,oX(a1)
0000B03E 0828 0000 0022             	btst	#0,oStatus(a0)
0000B044 6700                       	beq.s	.NoHFlip
0000B046 0669 0010 0008             	addi.w	#$10,oX(a1)
0000B04C 08E9 0000 0022             	bset	#0,oStatus(a1)
0000B052 4469 0010                  	neg.w	oXVel(a1)
0000B056                            
0000B056                            .NoHFlip:
0000B056 08E9 0001 0022             	bset	#1,oStatus(a1)
0000B05C 08A9 0003 0022             	bclr	#3,oStatus(a1)
0000B062 08A9 0005 0022             	bclr	#5,oStatus(a1)
0000B068 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000B06E 08A8 0005 0022             	bclr	#5,oStatus(a0)
0000B074 303C 00CC                  	move.w	#$CC,d0
0000B078 4EB8 2708                  	jsr	PlayFMSound
0000B07C                            ; End of function ObjSpring_Main_Diag
0000B07C                            
0000B07C                            ; -------------------------------------------------------------------------------
0000B07C                            
0000B07C                            ObjSpring_Anim_Diag:
0000B07C 43F9 0000 0000             	lea	(Ani_Spring).l,a1
0000B082 6000 B170                  	bra.w	AnimateObject
0000B086                            ; End of function ObjSpring_Anim_Diag
0000B086                            
0000B086                            ; -------------------------------------------------------------------------------
0000B086                            
0000B086                            ObjSpring_Reset_Diag:
0000B086 117C 0001 001D             	move.b	#1,oPrevAnim(a0)
0000B08C 5928 0024                  	subq.b	#4,oRoutine(a0)
0000B090 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000B096 4E75                       	rts
0000B098                            ; End of function ObjSpring_Reset_Diag
0000B098                            
0000B098                            ; -------------------------------------------------------------------------------
0000B098                            Ani_S1Spring:
0000B098                            	include	"level/unused/anim/s1spring.asm"
0000B098                            .Anim:
0000B098 0000                       	dc.w	byte_209B2C-.Anim
0000B09A 0000                       	dc.w	byte_209B38-.Anim
0000B09C 0000 0000 0202 0202 0202+  byte_209B2C:	dc.b	0,	0, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000B0A8 0004 0303 0505 0505 0505+  byte_209B38:	dc.b	0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000B0A8 0004 0303 0505 0505 0505+  byte_209B38:	dc.b	0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000B0B4                            	even
0000B0B4                            MapSpr_S1Spring:
0000B0B4                            	include	"level/unused/mapspr/s1spring.asm"
0000B0B4                            .Map:
0000B0B4 0000                       	dc.w	unk_209B50-.Map
0000B0B6 0000                       	dc.w	unk_209B5B-.Map
0000B0B8 0000                       	dc.w	unk_209B61-.Map
0000B0BA 0000                       	dc.w	unk_209B71-.Map
0000B0BC 0000                       	dc.w	unk_209B77-.Map
0000B0BE 0000                       	dc.w	unk_209B7D-.Map
0000B0C0 02                         unk_209B50:	dc.b	  2
0000B0C1 F8                         	dc.b	$F8 ; ø
0000B0C2 0C                         	dc.b	 $C
0000B0C3 00                         	dc.b	  0
0000B0C4 00                         	dc.b	  0
0000B0C5 F0                         	dc.b	$F0 ; ð
0000B0C6 00                         	dc.b	  0
0000B0C7 0C                         	dc.b	 $C
0000B0C8 00                         	dc.b	  0
0000B0C9 04                         	dc.b	  4
0000B0CA F0                         	dc.b	$F0 ; ð
0000B0CB 01                         unk_209B5B:	dc.b	  1
0000B0CC 00                         	dc.b	  0
0000B0CD 0C                         	dc.b	 $C
0000B0CE 00                         	dc.b	  0
0000B0CF 00                         	dc.b	  0
0000B0D0 F0                         	dc.b	$F0 ; ð
0000B0D1 03                         unk_209B61:	dc.b	  3
0000B0D2 E8                         	dc.b	$E8 ; è
0000B0D3 0C                         	dc.b	 $C
0000B0D4 00                         	dc.b	  0
0000B0D5 00                         	dc.b	  0
0000B0D6 F0                         	dc.b	$F0 ; ð
0000B0D7 F0                         	dc.b	$F0 ; ð
0000B0D8 05                         	dc.b	  5
0000B0D9 00                         	dc.b	  0
0000B0DA 08                         	dc.b	  8
0000B0DB F8                         	dc.b	$F8 ; ø
0000B0DC 00                         	dc.b	  0
0000B0DD 0C                         	dc.b	 $C
0000B0DE 00                         	dc.b	  0
0000B0DF 0C                         	dc.b	 $C
0000B0E0 F0                         	dc.b	$F0 ; ð
0000B0E1 01                         unk_209B71:	dc.b	  1
0000B0E2 F0                         	dc.b	$F0 ; ð
0000B0E3 07                         	dc.b	  7
0000B0E4 00                         	dc.b	  0
0000B0E5 00                         	dc.b	  0
0000B0E6 F8                         	dc.b	$F8 ; ø
0000B0E7 01                         unk_209B77:	dc.b	  1
0000B0E8 F0                         	dc.b	$F0 ; ð
0000B0E9 03                         	dc.b	  3
0000B0EA 00                         	dc.b	  0
0000B0EB 04                         	dc.b	  4
0000B0EC F8                         	dc.b	$F8 ; ø
0000B0ED 04                         unk_209B7D:	dc.b	  4
0000B0EE F0                         	dc.b	$F0 ; ð
0000B0EF 03                         	dc.b	  3
0000B0F0 00                         	dc.b	  0
0000B0F1 04                         	dc.b	  4
0000B0F2 10                         	dc.b	$10
0000B0F3 F8                         	dc.b	$F8 ; ø
0000B0F4 09                         	dc.b	  9
0000B0F5 00                         	dc.b	  0
0000B0F6 08                         	dc.b	  8
0000B0F7 F8                         	dc.b	$F8 ; ø
0000B0F8 F0                         	dc.b	$F0 ; ð
0000B0F9 00                         	dc.b	  0
0000B0FA 00                         	dc.b	  0
0000B0FB 00                         	dc.b	  0
0000B0FC F8                         	dc.b	$F8 ; ø
0000B0FD 08                         	dc.b	  8
0000B0FE 00                         	dc.b	  0
0000B0FF 00                         	dc.b	  0
0000B100 03                         	dc.b	  3
0000B101 F8                         	dc.b	$F8 ; ø
0000B101 F8                         	dc.b	$F8 ; ø
0000B102                            	even
0000B102                            Ani_Spring:
0000B102                            	include	"level/objects/spring/anim.asm"
0000B102                            .Anim:
0000B102 0000                       	dc.w	byte_209B94-.Anim
0000B104 0000 0101 0202 0202 0202+  byte_209B94:	dc.b	0,	0, 1, 1, 2, 2, 2, 2, 2,	2, 1, $FC
0000B104 0000 0101 0202 0202 0202+  byte_209B94:	dc.b	0,	0, 1, 1, 2, 2, 2, 2, 2,	2, 1, $FC
0000B110                            	even
0000B110                            	include	"level/objects/spring/map.asm"
0000B110                            MapSpr_Spring1:
0000B110 0000                       	dc.w	unk_209BAC-MapSpr_Spring1
0000B112 0000                       	dc.w	unk_209BB8-MapSpr_Spring1
0000B114 0000                       	dc.w	unk_209BBE-MapSpr_Spring1
0000B116                            MapSpr_Spring2:
0000B116 0000                       	dc.w	unk_209BCE-MapSpr_Spring2
0000B118 0000                       	dc.w	unk_209BDA-MapSpr_Spring2
0000B11A 0000                       	dc.w	unk_209BE0-MapSpr_Spring2
0000B11C 02                         unk_209BAC:	dc.b	  2
0000B11D F8                         	dc.b	$F8 ; ø
0000B11E 0C                         	dc.b	 $C
0000B11F 00                         	dc.b	  0
0000B120 00                         	dc.b	  0
0000B121 F0                         	dc.b	$F0 ; ð
0000B122 00                         	dc.b	  0
0000B123 0C                         	dc.b	 $C
0000B124 00                         	dc.b	  0
0000B125 04                         	dc.b	  4
0000B126 F0                         	dc.b	$F0 ; ð
0000B127 00                         	dc.b	  0
0000B128 01                         unk_209BB8:	dc.b	  1
0000B129 00                         	dc.b	  0
0000B12A 0C                         	dc.b	 $C
0000B12B 00                         	dc.b	  0
0000B12C 00                         	dc.b	  0
0000B12D F0                         	dc.b	$F0 ; ð
0000B12E 03                         unk_209BBE:	dc.b	  3
0000B12F E0                         	dc.b	$E0 ; à
0000B130 0C                         	dc.b	 $C
0000B131 00                         	dc.b	  0
0000B132 00                         	dc.b	  0
0000B133 F0                         	dc.b	$F0 ; ð
0000B134 E8                         	dc.b	$E8 ; è
0000B135 06                         	dc.b	  6
0000B136 00                         	dc.b	  0
0000B137 08                         	dc.b	  8
0000B138 F8                         	dc.b	$F8 ; ø
0000B139 00                         	dc.b	  0
0000B13A 0C                         	dc.b	 $C
0000B13B 00                         	dc.b	  0
0000B13C 0E                         	dc.b	 $E
0000B13D F0                         	dc.b	$F0 ; ð
0000B13E 02                         unk_209BCE:	dc.b	  2
0000B13F F0                         	dc.b	$F0 ; ð
0000B140 03                         	dc.b	  3
0000B141 00                         	dc.b	  0
0000B142 12                         	dc.b	$12
0000B143 00                         	dc.b	  0
0000B144 F0                         	dc.b	$F0 ; ð
0000B145 03                         	dc.b	  3
0000B146 00                         	dc.b	  0
0000B147 16                         	dc.b	$16
0000B148 F8                         	dc.b	$F8 ; ø
0000B149 00                         	dc.b	  0
0000B14A 01                         unk_209BDA:	dc.b	  1
0000B14B F0                         	dc.b	$F0 ; ð
0000B14C 03                         	dc.b	  3
0000B14D 00                         	dc.b	  0
0000B14E 12                         	dc.b	$12
0000B14F F8                         	dc.b	$F8 ; ø
0000B150 03                         unk_209BE0:	dc.b	  3
0000B151 F0                         	dc.b	$F0 ; ð
0000B152 03                         	dc.b	  3
0000B153 00                         	dc.b	  0
0000B154 12                         	dc.b	$12
0000B155 18                         	dc.b	$18
0000B156 F8                         	dc.b	$F8 ; ø
0000B157 09                         	dc.b	  9
0000B158 00                         	dc.b	  0
0000B159 1A                         	dc.b	$1A
0000B15A 00                         	dc.b	  0
0000B15B F0                         	dc.b	$F0 ; ð
0000B15C 03                         	dc.b	  3
0000B15D 00                         	dc.b	  0
0000B15E 20                         	dc.b	$20
0000B15F F8                         	dc.b	$F8 ; ø
0000B160                            MapSpr_Spring3:
0000B160 0000                       	dc.w	unk_209BF6-MapSpr_Spring3
0000B162 0000                       	dc.w	unk_209C1A-MapSpr_Spring3
0000B164 0000                       	dc.w	unk_209C3E-MapSpr_Spring3
0000B166 07                         unk_209BF6:	dc.b	  7
0000B167 08                         	dc.b	  8
0000B168 00                         	dc.b	  0
0000B169 00                         	dc.b	  0
0000B16A 00                         	dc.b	  0
0000B16B F0                         	dc.b	$F0 ; ð
0000B16C 00                         	dc.b	  0
0000B16D 00                         	dc.b	  0
0000B16E 00                         	dc.b	  0
0000B16F 01                         	dc.b	  1
0000B170 F0                         	dc.b	$F0 ; ð
0000B171 08                         	dc.b	  8
0000B172 00                         	dc.b	  0
0000B173 00                         	dc.b	  0
0000B174 02                         	dc.b	  2
0000B175 F8                         	dc.b	$F8 ; ø
0000B176 F0                         	dc.b	$F0 ; ð
0000B177 08                         	dc.b	  8
0000B178 00                         	dc.b	  0
0000B179 03                         	dc.b	  3
0000B17A F0                         	dc.b	$F0 ; ð
0000B17B F8                         	dc.b	$F8 ; ø
0000B17C 00                         	dc.b	  0
0000B17D 00                         	dc.b	  0
0000B17E 06                         	dc.b	  6
0000B17F F0                         	dc.b	$F0 ; ð
0000B180 F8                         	dc.b	$F8 ; ø
0000B181 09                         	dc.b	  9
0000B182 00                         	dc.b	  0
0000B183 07                         	dc.b	  7
0000B184 F8                         	dc.b	$F8 ; ø
0000B185 08                         	dc.b	  8
0000B186 04                         	dc.b	  4
0000B187 00                         	dc.b	  0
0000B188 0D                         	dc.b	 $D
0000B189 00                         	dc.b	  0
0000B18A 07                         unk_209C1A:	dc.b	  7
0000B18B 08                         	dc.b	  8
0000B18C 00                         	dc.b	  0
0000B18D 00                         	dc.b	  0
0000B18E 00                         	dc.b	  0
0000B18F F0                         	dc.b	$F0 ; ð
0000B190 00                         	dc.b	  0
0000B191 00                         	dc.b	  0
0000B192 00                         	dc.b	  0
0000B193 0F                         	dc.b	 $F
0000B194 F0                         	dc.b	$F0 ; ð
0000B195 08                         	dc.b	  8
0000B196 00                         	dc.b	  0
0000B197 00                         	dc.b	  0
0000B198 10                         	dc.b	$10
0000B199 F8                         	dc.b	$F8 ; ø
0000B19A F0                         	dc.b	$F0 ; ð
0000B19B 05                         	dc.b	  5
0000B19C 00                         	dc.b	  0
0000B19D 11                         	dc.b	$11
0000B19E F0                         	dc.b	$F0 ; ð
0000B19F F8                         	dc.b	$F8 ; ø
0000B1A0 00                         	dc.b	  0
0000B1A1 00                         	dc.b	  0
0000B1A2 05                         	dc.b	  5
0000B1A3 00                         	dc.b	  0
0000B1A4 00                         	dc.b	  0
0000B1A5 00                         	dc.b	  0
0000B1A6 00                         	dc.b	  0
0000B1A7 15                         	dc.b	$15
0000B1A8 F8                         	dc.b	$F8 ; ø
0000B1A9 00                         	dc.b	  0
0000B1AA 05                         	dc.b	  5
0000B1AB 00                         	dc.b	  0
0000B1AC 16                         	dc.b	$16
0000B1AD 00                         	dc.b	  0
0000B1AE 08                         unk_209C3E:	dc.b	  8
0000B1AF 08                         	dc.b	  8
0000B1B0 00                         	dc.b	  0
0000B1B1 00                         	dc.b	  0
0000B1B2 00                         	dc.b	  0
0000B1B3 F0                         	dc.b	$F0 ; ð
0000B1B4 00                         	dc.b	  0
0000B1B5 00                         	dc.b	  0
0000B1B6 00                         	dc.b	  0
0000B1B7 1A                         	dc.b	$1A
0000B1B8 F0                         	dc.b	$F0 ; ð
0000B1B9 08                         	dc.b	  8
0000B1BA 00                         	dc.b	  0
0000B1BB 00                         	dc.b	  0
0000B1BC 1B                         	dc.b	$1B
0000B1BD F8                         	dc.b	$F8 ; ø
0000B1BE E0                         	dc.b	$E0 ; à
0000B1BF 08                         	dc.b	  8
0000B1C0 00                         	dc.b	  0
0000B1C1 03                         	dc.b	  3
0000B1C2 00                         	dc.b	  0
0000B1C3 E8                         	dc.b	$E8 ; è
0000B1C4 0E                         	dc.b	 $E
0000B1C5 00                         	dc.b	  0
0000B1C6 1C                         	dc.b	$1C
0000B1C7 00                         	dc.b	  0
0000B1C8 F8                         	dc.b	$F8 ; ø
0000B1C9 00                         	dc.b	  0
0000B1CA 00                         	dc.b	  0
0000B1CB 28                         	dc.b	$28 ; (
0000B1CC F0                         	dc.b	$F0 ; ð
0000B1CD F0                         	dc.b	$F0 ; ð
0000B1CE 02                         	dc.b	  2
0000B1CF 00                         	dc.b	  0
0000B1D0 29                         	dc.b	$29 ; )
0000B1D1 F8                         	dc.b	$F8 ; ø
0000B1D2 00                         	dc.b	  0
0000B1D3 01                         	dc.b	  1
0000B1D4 00                         	dc.b	  0
0000B1D5 2C                         	dc.b	$2C ; ,
0000B1D6 00                         	dc.b	  0
0000B1D7 00                         	dc.b	  0
0000B1D7 00                         	dc.b	  0
0000B1D8                            	even
0000B1D8                            Ani_MovingSpring:
0000B1D8                            	include	"level/objects/spring/animwheel.asm"
0000B1D8                            .Anim:
0000B1D8 0000                       	dc.w	byte_209C6A-.Anim
0000B1DA 0800 01FF                  byte_209C6A:	dc.b	8,	0, 1, $FF
0000B1DA 0800 01FF                  byte_209C6A:	dc.b	8,	0, 1, $FF
0000B1DE                            	even
0000B1DE                            MapSpr_MovingSpring:
0000B1DE                            	include	"level/objects/spring/mapwheel.asm"
0000B1DE                            .Map:
0000B1DE 0000                       	dc.w	unk_209C72-.Map
0000B1E0 0000                       	dc.w	unk_209C78-.Map
0000B1E2 01                         unk_209C72:	dc.b	  1
0000B1E3 F8                         	dc.b	$F8 ; ø
0000B1E4 05                         	dc.b	  5
0000B1E5 00                         	dc.b	  0
0000B1E6 00                         	dc.b	  0
0000B1E7 F8                         	dc.b	$F8 ; ø
0000B1E8 01                         unk_209C78:	dc.b	  1
0000B1E9 F8                         	dc.b	$F8 ; ø
0000B1EA 05                         	dc.b	  5
0000B1EB 00                         	dc.b	  0
0000B1EC 04                         	dc.b	  4
0000B1ED F8                         	dc.b	$F8 ; ø
0000B1ED F8                         	dc.b	$F8 ; ø
0000B1EE                            	even
0000B1EE                            ; -------------------------------------------------------------------------------
0000B1EE                            
0000B1EE                            ObjRing:
0000B1EE 7000                       	moveq	#0,d0
0000B1F0 1028 0024                  	move.b	oRoutine(a0),d0
0000B1F4 323B 0000                  	move.w	ObjRing_Index(pc,d0.w),d1
0000B1F8 4EFB 1000                  	jmp	ObjRing_Index(pc,d1.w)
0000B1FC                            ; End of function ObjRing
0000B1FC                            
0000B1FC                            ; -------------------------------------------------------------------------------
0000B1FC 0000                       ObjRing_Index:	dc.w	ObjRing_Init-ObjRing_Index
0000B1FE 0000                       	dc.w	ObjRing_Main-ObjRing_Index
0000B200 0000                       	dc.w	ObjRing_Collect-ObjRing_Index
0000B202 0000                       	dc.w	ObjRing_Sparkle-ObjRing_Index
0000B204 0000                       	dc.w	ObjRing_Destroy-ObjRing_Index
0000B206 1000                       ObjRing_Deltas:	dc.b	$10, 0
0000B208 1800                       	dc.b	$18, 0
0000B20A 2000                       	dc.b	$20, 0
0000B20C 0010                       	dc.b	0,	$10
0000B20E 0018                       	dc.b	0,	$18
0000B210 0020                       	dc.b	0,	$20
0000B212 1010                       	dc.b	$10, $10
0000B214 1818                       	dc.b	$18, $18
0000B216 2020                       	dc.b	$20, $20
0000B218 F010                       	dc.b	$F0, $10
0000B21A E818                       	dc.b	$E8, $18
0000B21C E020                       	dc.b	$E0, $20
0000B21E 1008                       	dc.b	$10, 8
0000B220 1810                       	dc.b	$18, $10
0000B222 F008                       	dc.b	$F0, 8
0000B224 E810                       	dc.b	$E8, $10
0000B226                            ; -------------------------------------------------------------------------------
0000B226                            
0000B226                            ObjRing_Init:
0000B226 45F9 00FF 1200             	lea	(v_obj_respawns).l,a2
0000B22C 7000                       	moveq	#0,d0
0000B22E 1028 0023                  	move.b	oRespawn(a0),d0
0000B232 3200                       	move.w	d0,d1
0000B234 D241                       	add.w	d1,d1
0000B236 D041                       	add.w	d1,d0
0000B238 7200                       	moveq	#0,d1
0000B23A 1239 00FF 152E             	move.b	(v_time_zone).l,d1
0000B240 0881 0007                  	bclr	#7,d1
0000B244 6700                       	beq.s	.GotTime
0000B246 1438 F784                  	move.b	(v_time_warp_dir).w,d2
0000B24A 4882                       	ext.w	d2
0000B24C 4442                       	neg.w	d2
0000B24E D242                       	add.w	d2,d1
0000B250 6A00                       	bpl.s	.ChkOverflow
0000B252 7200                       	moveq	#0,d1
0000B254 6000                       	bra.s	.GotTime
0000B256                            
0000B256                            ; -------------------------------------------------------------------------------
0000B256                            
0000B256                            .ChkOverflow:
0000B256 0C41 0003                  	cmpi.w	#3,d1
0000B25A 6500                       	bcs.s	.GotTime
0000B25C 7202                       	moveq	#2,d1
0000B25E                            
0000B25E                            .GotTime:
0000B25E D041                       	add.w	d1,d0
0000B260 45F2 0002                  	lea	2(a2,d0.w),a2
0000B264 1812                       	move.b	(a2),d4
0000B266 1228 0028                  	move.b	oSubtype(a0),d1
0000B26A 7000                       	moveq	#0,d0
0000B26C 1001                       	move.b	d1,d0
0000B26E 0241 0007                  	andi.w	#7,d1
0000B272 0C41 0007                  	cmpi.w	#7,d1
0000B276 6600                       	bne.s	.GotSubt
0000B278 7206                       	moveq	#6,d1
0000B27A                            
0000B27A                            .GotSubt:
0000B27A 4841                       	swap	d1
0000B27C 323C 0001                  	move.w	#1,d1
0000B280 E808                       	lsr.b	#4,d0
0000B282 D040                       	add.w	d0,d0
0000B284 43F9 0000 B206             	lea	(ObjRing_Deltas).l,a1
0000B28A 1A31 0000                  	move.b	(a1,d0.w),d5
0000B28E 4885                       	ext.w	d5
0000B290 1C31 0001                  	move.b	1(a1,d0.w),d6
0000B294 4886                       	ext.w	d6
0000B296 2248                       	movea.l	a0,a1
0000B298 3428 0008                  	move.w	oX(a0),d2
0000B29C 3628 000C                  	move.w	oY(a0),d3
0000B2A0 47EA 0001                  	lea	1(a2),a3
0000B2A4 7000                       	moveq	#0,d0
0000B2A6 1039 00FF 152E             	move.b	(v_time_zone).l,d0
0000B2AC 0880 0007                  	bclr	#7,d0
0000B2B0 6700                       	beq.s	.GotTime2
0000B2B2 1438 F784                  	move.b	(v_time_warp_dir).w,d2
0000B2B6 4882                       	ext.w	d2
0000B2B8 4442                       	neg.w	d2
0000B2BA D042                       	add.w	d2,d0
0000B2BC 6A00                       	bpl.s	.ChkOverflow2
0000B2BE 7000                       	moveq	#0,d0
0000B2C0 6000                       	bra.s	.GotTime2
0000B2C2                            
0000B2C2                            ; -------------------------------------------------------------------------------
0000B2C2                            
0000B2C2                            .ChkOverflow2:
0000B2C2 0C40 0003                  	cmpi.w	#3,d0
0000B2C6 6500                       	bcs.s	.GotTime2
0000B2C8 7002                       	moveq	#2,d0
0000B2CA                            
0000B2CA                            .GotTime2:
0000B2CA 1823                       	move.b	-(a3),d4
0000B2CC E22C                       	lsr.b	d1,d4
0000B2CE 6500 0000                  	bcs.w	.Next
0000B2D2 51C8 FFF6                  	dbf	d0,.GotTime2
0000B2D6 0892 0007                  	bclr	#7,(a2)
0000B2DA 6000                       	bra.s	.InitSubObj
0000B2DC                            
0000B2DC                            ; -------------------------------------------------------------------------------
0000B2DC                            
0000B2DC                            .Loop:
0000B2DC 4841                       	swap	d1
0000B2DE 47EA 0001                  	lea	1(a2),a3
0000B2E2 7000                       	moveq	#0,d0
0000B2E4 1039 00FF 152E             	move.b	(v_time_zone).l,d0
0000B2EA 0880 0007                  	bclr	#7,d0
0000B2EE 6700                       	beq.s	.GotTime3
0000B2F0 1438 F784                  	move.b	(v_time_warp_dir).w,d2
0000B2F4 4882                       	ext.w	d2
0000B2F6 4442                       	neg.w	d2
0000B2F8 D042                       	add.w	d2,d0
0000B2FA 6A00                       	bpl.s	.ChkOverflow3
0000B2FC 7000                       	moveq	#0,d0
0000B2FE 6000                       	bra.s	.GotTime3
0000B300                            
0000B300                            ; -------------------------------------------------------------------------------
0000B300                            
0000B300                            .ChkOverflow3:
0000B300 0C40 0003                  	cmpi.w	#3,d0
0000B304 6500                       	bcs.s	.GotTime3
0000B306 7002                       	moveq	#2,d0
0000B308                            
0000B308                            .GotTime3:
0000B308 1823                       	move.b	-(a3),d4
0000B30A E22C                       	lsr.b	d1,d4
0000B30C 6500 0000                  	bcs.w	.Next
0000B310 51C8 FFF6                  	dbf	d0,.GotTime3
0000B314 0892 0007                  	bclr	#7,(a2)
0000B318 6100 C9E0                  	bsr.w	FindNextObjSlot
0000B31C 6600 0000                  	bne.w	.DidInit
0000B320                            
0000B320                            .InitSubObj:
0000B320 12BC 0010                  	move.b	#$10,oID(a1)
0000B324 137C 0002 0024             	move.b	#2,oRoutine(a1)
0000B32A 3342 0008                  	move.w	d2,oX(a1)
0000B32E 3368 0008 0032             	move.w	oX(a0),oVar32(a1)
0000B334 3343 000C                  	move.w	d3,oY(a1)
0000B338 237C 0000 0000 0004        	move.l	#MapSpr_Ring,oMap(a1)
0000B340 337C A7AE 0002             	move.w	#$A7AE,oTile(a1)
0000B346 137C 0002 0018             	move.b	#2,oPriority(a1)
0000B34C 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
0000B354 6600                       	bne.s	.NotMMZ
0000B356 137C 0000 0018             	move.b	#0,oPriority(a1)
0000B35C 1368 0029 0029             	move.b	oSubtype2(a0),oSubtype2(a1)
0000B362 4A29 0029                  	tst.b	oSubtype2(a1)
0000B366 6700                       	beq.s	.NotMMZ
0000B368 0229 007F 0002             	andi.b	#$7F,oTile(a1)
0000B36E 137C 0002 0018             	move.b	#2,oPriority(a1)
0000B374                            
0000B374                            .NotMMZ:
0000B374 137C 0004 0001             	move.b	#4,oRender(a1)
0000B37A 137C 0047 0020             	move.b	#$47,oColType(a1)
0000B380 137C 0008 0019             	move.b	#8,oWidth(a1)
0000B386 137C 0008 0016             	move.b	#8,oYRadius(a1)
0000B38C 1368 0023 0023             	move.b	oRespawn(a0),oRespawn(a1)
0000B392 1341 0034                  	move.b	d1,oVar34(a1)
0000B396                            
0000B396                            .Next:
0000B396 5241                       	addq.w	#1,d1
0000B398 D445                       	add.w	d5,d2
0000B39A D646                       	add.w	d6,d3
0000B39C 4841                       	swap	d1
0000B39E 51C9 FF3C                  	dbf	d1,.Loop
0000B3A2                            
0000B3A2                            .DidInit:
0000B3A2 7000                       	moveq	#0,d0
0000B3A4 1039 00FF 152E             	move.b	(v_time_zone).l,d0
0000B3AA 0880 0007                  	bclr	#7,d0
0000B3AE 6700                       	beq.s	.GotTime4
0000B3B0 1438 F784                  	move.b	(v_time_warp_dir).w,d2
0000B3B4 4882                       	ext.w	d2
0000B3B6 4442                       	neg.w	d2
0000B3B8 D042                       	add.w	d2,d0
0000B3BA 6A00                       	bpl.s	.ChkOverflow4
0000B3BC 7000                       	moveq	#0,d0
0000B3BE 6000                       	bra.s	.GotTime4
0000B3C0                            
0000B3C0                            ; -------------------------------------------------------------------------------
0000B3C0                            
0000B3C0                            .ChkOverflow4:
0000B3C0 0C40 0003                  	cmpi.w	#3,d0
0000B3C4 6500                       	bcs.s	.GotTime4
0000B3C6 7002                       	moveq	#2,d0
0000B3C8                            
0000B3C8                            .GotTime4:
0000B3C8 47EA 0001                  	lea	1(a2),a3
0000B3CC                            
0000B3CC                            .ChkDel:
0000B3CC 0823 0000                  	btst	#0,-(a3)
0000B3D0 6600 8CEC                  	bne.w	DeleteObject
0000B3D4 51C8 FFF6                  	dbf	d0,.ChkDel
0000B3D8                            ; End of function ObjRing_Init
0000B3D8                            
0000B3D8                            ; -------------------------------------------------------------------------------
0000B3D8                            
0000B3D8                            ObjRing_Main:
0000B3D8                            
0000B3D8                            ; FUNCTION CHUNK AT 00209F08 SIZE 00000004 BYTES
0000B3D8                            
0000B3D8 4A28 0001                  	tst.b	1(a0)
0000B3DC 6B00                       	bmi.s	.DoAnim
0000B3DE 3028 0032                  	move.w	oVar32(a0),d0
0000B3E2 0240 FF80                  	andi.w	#$FF80,d0
0000B3E6 3238 F700                  	move.w	(v_cam_fg_x).w,d1
0000B3EA 0441 0080                  	subi.w	#$80,d1
0000B3EE 0241 FF80                  	andi.w	#$FF80,d1
0000B3F2 9041                       	sub.w	d1,d0
0000B3F4 0C40 0280                  	cmpi.w	#$280,d0
0000B3F8 6200 0000                  	bhi.w	ObjRing_Destroy
0000B3FC                            
0000B3FC                            .DoAnim:
0000B3FC 4A79 00FF 190E             	tst.w	(v_time_stop_timer).l
0000B402 6600                       	bne.s	.Display
0000B404 1179 00FF 1913 001A        	move.b	(v_ring_anim_frame).l,oMapFrame(a0)
0000B40C                            
0000B40C                            .Display:
0000B40C 6000 8C04                  	bra.w	DrawObject
0000B410                            ; End of function ObjRing_Main
0000B410                            
0000B410                            ; -------------------------------------------------------------------------------
0000B410                            
0000B410                            ObjRing_Collect:
0000B410 5428 0024                  	addq.b	#2,oRoutine(a0)
0000B414 117C 0000 0020             	move.b	#0,oColType(a0)
0000B41A 117C 0001 0018             	move.b	#1,oPriority(a0)
0000B420 6100 0000                  	bsr.w	CollectRing
0000B424 45F9 00FF 1200             	lea	(v_obj_respawns).l,a2
0000B42A 7000                       	moveq	#0,d0
0000B42C 1028 0023                  	move.b	oRespawn(a0),d0
0000B430 3200                       	move.w	d0,d1
0000B432 D241                       	add.w	d1,d1
0000B434 D041                       	add.w	d1,d0
0000B436 7200                       	moveq	#0,d1
0000B438 1239 00FF 152E             	move.b	(v_time_zone).l,d1
0000B43E 0881 0007                  	bclr	#7,d1
0000B442 6700                       	beq.s	.GotTime
0000B444 1438 F784                  	move.b	(v_time_warp_dir).w,d2
0000B448 4882                       	ext.w	d2
0000B44A 4442                       	neg.w	d2
0000B44C D242                       	add.w	d2,d1
0000B44E 6A00                       	bpl.s	.ChkOverflow
0000B450 7200                       	moveq	#0,d1
0000B452 6000                       	bra.s	.GotTime
0000B454                            
0000B454                            ; -------------------------------------------------------------------------------
0000B454                            
0000B454                            .ChkOverflow:
0000B454 0C41 0003                  	cmpi.w	#3,d1
0000B458 6500                       	bcs.s	.GotTime
0000B45A 7202                       	moveq	#2,d1
0000B45C                            
0000B45C                            .GotTime:
0000B45C D041                       	add.w	d1,d0
0000B45E 1228 0034                  	move.b	oVar34(a0),d1
0000B462 5301                       	subq.b	#1,d1
0000B464 03F2 0002                  	bset	d1,2(a2,d0.w)
0000B468                            ; End of function ObjRing_Collect
0000B468                            
0000B468                            ; -------------------------------------------------------------------------------
0000B468                            
0000B468                            ObjRing_Sparkle:
0000B468 43F9 0000 0000             	lea	(Ani_Ring).l,a1
0000B46E 6100 AD84                  	bsr.w	AnimateObject
0000B472 6000 8B9E                  	bra.w	DrawObject
0000B476                            ; End of function ObjRing_Sparkle
0000B476                            
0000B476                            ; -------------------------------------------------------------------------------
0000B476                            ; START	OF FUNCTION CHUNK FOR ObjRing_Main
0000B476                            
0000B476                            ObjRing_Destroy:
0000B476 6000 8C46                  	bra.w	DeleteObject
0000B47A                            ; END OF FUNCTION CHUNK	FOR ObjRing_Main
0000B47A                            ; -------------------------------------------------------------------------------
0000B47A                            
0000B47A                            CollectRing:
0000B47A 5279 00FF 1512             	addq.w	#1,(v_ring_count).l
0000B480 0039 0001 00FF 150F        	ori.b	#1,(v_update_rings).l
0000B488 303C 00B5                  	move.w	#$B5,d0
0000B48C 0C79 0064 00FF 1512        	cmpi.w	#100,(v_ring_count).l
0000B494 6500                       	bcs.s	.PlaySound
0000B496 08F9 0001 00FF 150D        	bset	#1,(v_1up_flags).l
0000B49E 6700                       	beq.s	.GainLife
0000B4A0 0C79 00C8 00FF 1512        	cmpi.w	#200,(v_ring_count).l
0000B4A8 6500                       	bcs.s	.PlaySound
0000B4AA 08F9 0002 00FF 150D        	bset	#2,(v_1up_flags).l
0000B4B2 6600                       	bne.s	.PlaySound
0000B4B4                            
0000B4B4                            .GainLife:
0000B4B4 5239 00FF 1508             	addq.b	#1,(v_life_count).l
0000B4BA 5239 00FF 150E             	addq.b	#1,(v_update_lives).l
0000B4C0                            	;move.w	#$88,d0 ; Play 1UP Theme
0000B4C0 4EB8 2708                  	jsr	PlayFMSound
0000B4C4 303C 00B2                  	move.w	#$B2,d0
0000B4C8 4EF8 61B2                  	jmp	SendSubCommand
0000B4CC                            
0000B4CC                            ; -------------------------------------------------------------------------------
0000B4CC                            
0000B4CC                            .PlaySound:
0000B4CC 4EF8 2708                  	jmp	PlayFMSound
0000B4D0 4E75                               rts
0000B4D2                            ; End of function CollectRing
0000B4D2                            
0000B4D2                            ; -------------------------------------------------------------------------------
0000B4D2                            
0000B4D2                            ObjLostRing:
0000B4D2 7000                       	moveq	#0,d0
0000B4D4 1028 0024                  	move.b	oRoutine(a0),d0
0000B4D8 323B 0000                  	move.w	ObjLostRing_Index(pc,d0.w),d1
0000B4DC 4EFB 1000                  	jmp	ObjLostRing_Index(pc,d1.w)
0000B4E0                            ; End of function ObjLostRing
0000B4E0                            
0000B4E0                            ; -------------------------------------------------------------------------------
0000B4E0 0000                       ObjLostRing_Index:dc.w	ObjLostRing_Init-ObjLostRing_Index
0000B4E2 0000                       	dc.w	ObjLostRing_Main-ObjLostRing_Index
0000B4E4 0000                       	dc.w	ObjLostRing_Collect-ObjLostRing_Index
0000B4E6 0000                       	dc.w	ObjLostRing_Sparkle-ObjLostRing_Index
0000B4E8 0000                       	dc.w	ObjLostRing_Destroy-ObjLostRing_Index
0000B4EA                            ; -------------------------------------------------------------------------------
0000B4EA                            
0000B4EA                            ObjLostRing_Init:
0000B4EA 2248                       	movea.l	a0,a1
0000B4EC 7A00                       	moveq	#0,d5
0000B4EE 3A39 00FF 1512             	move.w	(v_ring_count).l,d5
0000B4F4 7020                       	moveq	#$20,d0
0000B4F6 BA40                       	cmp.w	d0,d5
0000B4F8 6500                       	bcs.s	.NoCap
0000B4FA 3A00                       	move.w	d0,d5
0000B4FC                            
0000B4FC                            .NoCap:
0000B4FC 5345                       	subq.w	#1,d5
0000B4FE 383C 0288                  	move.w	#$288,d4
0000B502 6000                       	bra.s	.DoInit
0000B504                            
0000B504                            ; -------------------------------------------------------------------------------
0000B504                            
0000B504                            .Loop:
0000B504 6100 C7DE                  	bsr.w	FindObjSlot
0000B508 6600 0000                  	bne.w	.DidInit
0000B50C                            
0000B50C                            .DoInit:
0000B50C 12BC 0011                  	move.b	#$11,oID(a1)
0000B510 5429 0024                  	addq.b	#2,oRoutine(a1)
0000B514 137C 0008 0016             	move.b	#8,oYRadius(a1)
0000B51A 137C 0008 0017             	move.b	#8,oXRadius(a1)
0000B520 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000B526 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000B52C 237C 0000 0000 0004        	move.l	#MapSpr_Ring,oMap(a1)
0000B534 1368 0029 0029             	move.b	oSubtype2(a0),oSubtype2(a1)
0000B53A 337C A7AE 0002             	move.w	#$A7AE,oTile(a1)
0000B540 137C 0003 0018             	move.b	#3,oPriority(a1)
0000B546 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
0000B54E 6600                       	bne.s	.NotMMZ
0000B550 137C 0000 0018             	move.b	#0,oPriority(a1)
0000B556 4A28 0029                  	tst.b	oSubtype2(a0)
0000B55A 6700                       	beq.s	.NotMMZ
0000B55C 137C 0003 0018             	move.b	#3,oPriority(a1)
0000B562 0229 007F 0002             	andi.b	#$7F,oTile(a1)
0000B568                            
0000B568                            .NotMMZ:
0000B568 137C 0004 0001             	move.b	#4,oRender(a1)
0000B56E 137C 0047 0020             	move.b	#$47,oColType(a1)
0000B574 137C 0008 0019             	move.b	#8,oWidth(a1)
0000B57A 137C 0008 0016             	move.b	#8,oYRadius(a1)
0000B580 13FC 00FF 00FF 1916        	move.b	#$FF,(v_ring_spill_timer).l
0000B588 4A44                       	tst.w	d4
0000B58A 6B00                       	bmi.s	.SetVel
0000B58C 3004                       	move.w	d4,d0
0000B58E 4EB8 0AAC                  	jsr	CalcSine
0000B592 3404                       	move.w	d4,d2
0000B594 E04A                       	lsr.w	#8,d2
0000B596 E560                       	asl.w	d2,d0
0000B598 E561                       	asl.w	d2,d1
0000B59A 3400                       	move.w	d0,d2
0000B59C 3601                       	move.w	d1,d3
0000B59E 0604 0010                  	addi.b	#$10,d4
0000B5A2 6400                       	bcc.s	.SetVel
0000B5A4 0444 0080                  	subi.w	#$80,d4
0000B5A8 6400                       	bcc.s	.SetVel
0000B5AA 383C 0288                  	move.w	#$288,d4
0000B5AE                            
0000B5AE                            .SetVel:
0000B5AE 3342 0010                  	move.w	d2,oXVel(a1)
0000B5B2 3343 0012                  	move.w	d3,oYVel(a1)
0000B5B6 4442                       	neg.w	d2
0000B5B8 4444                       	neg.w	d4
0000B5BA 51CD FF48                  	dbf	d5,.Loop
0000B5BE                            
0000B5BE                            .DidInit:
0000B5BE 33FC 0000 00FF 1512        	move.w	#0,(v_ring_count).l
0000B5C6 13FC 0080 00FF 150F        	move.b	#$80,(v_update_rings).l
0000B5CE 13FC 0000 00FF 150D        	move.b	#0,(v_1up_flags).l
0000B5D6 303C 00C6                  	move.w	#$C6,d0
0000B5DA 4EB8 2708                  	jsr	PlayFMSound
0000B5DE                            ; End of function ObjLostRing_Init
0000B5DE                            
0000B5DE                            ; -------------------------------------------------------------------------------
0000B5DE                            
0000B5DE                            ObjLostRing_Main:
0000B5DE                            
0000B5DE                            ; FUNCTION CHUNK AT 0020A0EE SIZE 00000004 BYTES
0000B5DE                            
0000B5DE 1179 00FF 1917 001A        	move.b	(v_ring_spill_frame).l,oMapFrame(a0)
0000B5E6 6100 89D6                  	bsr.w	ObjMove
0000B5EA 0668 0018 0012             	addi.w	#$18,oYVel(a0)
0000B5F0 6B00                       	bmi.s	.ChkDel
0000B5F2 1039 00FF 190D             	move.b	(v_frame_count+3).l,d0
0000B5F8 D007                       	add.b	d7,d0
0000B5FA 0200 0003                  	andi.b	#3,d0
0000B5FE 6600                       	bne.s	.ChkDel
0000B600 4EB8 6F3C                  	jsr	CheckFloorEdge
0000B604 4A41                       	tst.w	d1
0000B606 6A00                       	bpl.s	.ChkDel
0000B608 D368 000C                  	add.w	d1,oY(a0)
0000B60C 3028 0012                  	move.w	oYVel(a0),d0
0000B610 E440                       	asr.w	#2,d0
0000B612 9168 0012                  	sub.w	d0,oYVel(a0)
0000B616 4468 0012                  	neg.w	oYVel(a0)
0000B61A                            
0000B61A                            .ChkDel:
0000B61A 4A39 00FF 1916             	tst.b	(v_ring_spill_timer).l
0000B620 6700                       	beq.s	ObjLostRing_Destroy
0000B622 3038 F72E                  	move.w	(v_bottom_bound).w,d0
0000B626 0640 00E0                  	addi.w	#$E0,d0
0000B62A B068 000C                  	cmp.w	oY(a0),d0
0000B62E 6500                       	bcs.s	ObjLostRing_Destroy
0000B630 6000 89E0                  	bra.w	DrawObject
0000B634                            ; End of function ObjLostRing_Main
0000B634                            
0000B634                            ; -------------------------------------------------------------------------------
0000B634                            
0000B634                            ObjLostRing_Collect:
0000B634 5428 0024                  	addq.b	#2,oRoutine(a0)
0000B638 117C 0000 0020             	move.b	#0,oColType(a0)
0000B63E 117C 0001 0018             	move.b	#1,oPriority(a0)
0000B644 6100 FE34                  	bsr.w	CollectRing
0000B648                            ; End of function ObjLostRing_Collect
0000B648                            
0000B648                            ; -------------------------------------------------------------------------------
0000B648                            
0000B648                            ObjLostRing_Sparkle:
0000B648 43F9 0000 0000             	lea	(Ani_Ring).l,a1
0000B64E 6100 ABA4                  	bsr.w	AnimateObject
0000B652 6000 89BE                  	bra.w	DrawObject
0000B656                            ; End of function ObjLostRing_Sparkle
0000B656                            
0000B656                            ; -------------------------------------------------------------------------------
0000B656                            ; START	OF FUNCTION CHUNK FOR ObjLostRing_Main
0000B656                            
0000B656                            ObjLostRing_Destroy:
0000B656 6000 8A66                  	bra.w	DeleteObject
0000B65A                            ; END OF FUNCTION CHUNK	FOR ObjLostRing_Main
0000B65A                            
0000B65A                            ; -------------------------------------------------------------------------------
0000B65A                            Ani_Ring:
0000B65A                            	include	"level/objects/ring/anim.asm"
0000B65A                            .Anim:
0000B65A 0000                       	dc.w	byte_20A0F4-.Anim
0000B65C 0504 0506 07FC             byte_20A0F4:	dc.b	5,	4, 5, 6, 7, $FC
0000B65C 0504 0506 07FC             byte_20A0F4:	dc.b	5,	4, 5, 6, 7, $FC
0000B662                            	even
0000B662                            MapSpr_Ring:
0000B662                            	include	"level/objects/ring/map.asm"
0000B662                            .Map:
0000B662 0000                       	dc.w	unk_20A10C-.Map
0000B664 0000                       	dc.w	unk_20A112-.Map
0000B666 0000                       	dc.w	unk_20A118-.Map
0000B668 0000                       	dc.w	unk_20A11E-.Map
0000B66A 0000                       	dc.w	unk_20A124-.Map
0000B66C 0000                       	dc.w	unk_20A12A-.Map
0000B66E 0000                       	dc.w	unk_20A130-.Map
0000B670 0000                       	dc.w	unk_20A136-.Map
0000B672 0000                       	dc.w	unk_20A13C-.Map
0000B674 01                         unk_20A10C:	dc.b	  1
0000B675 F8                         	dc.b	$F8 ; ø
0000B676 05                         	dc.b	  5
0000B677 00                         	dc.b	  0
0000B678 00                         	dc.b	  0
0000B679 F8                         	dc.b	$F8 ; ø
0000B67A 01                         unk_20A112:	dc.b	  1
0000B67B F8                         	dc.b	$F8 ; ø
0000B67C 05                         	dc.b	  5
0000B67D 00                         	dc.b	  0
0000B67E 04                         	dc.b	  4
0000B67F F8                         	dc.b	$F8 ; ø
0000B680 01                         unk_20A118:	dc.b	  1
0000B681 F8                         	dc.b	$F8 ; ø
0000B682 01                         	dc.b	  1
0000B683 00                         	dc.b	  0
0000B684 08                         	dc.b	  8
0000B685 FC                         	dc.b	$FC ; ü
0000B686 01                         unk_20A11E:	dc.b	  1
0000B687 F8                         	dc.b	$F8 ; ø
0000B688 05                         	dc.b	  5
0000B689 08                         	dc.b	  8
0000B68A 04                         	dc.b	  4
0000B68B F8                         	dc.b	$F8 ; ø
0000B68C 01                         unk_20A124:	dc.b	  1
0000B68D F8                         	dc.b	$F8 ; ø
0000B68E 05                         	dc.b	  5
0000B68F 00                         	dc.b	  0
0000B690 0A                         	dc.b	 $A
0000B691 F8                         	dc.b	$F8 ; ø
0000B692 01                         unk_20A12A:	dc.b	  1
0000B693 F8                         	dc.b	$F8 ; ø
0000B694 05                         	dc.b	  5
0000B695 18                         	dc.b	$18
0000B696 0A                         	dc.b	 $A
0000B697 F8                         	dc.b	$F8 ; ø
0000B698 01                         unk_20A130:	dc.b	  1
0000B699 F8                         	dc.b	$F8 ; ø
0000B69A 05                         	dc.b	  5
0000B69B 10                         	dc.b	$10
0000B69C 0A                         	dc.b	 $A
0000B69D F8                         	dc.b	$F8 ; ø
0000B69E 01                         unk_20A136:	dc.b	  1
0000B69F F8                         	dc.b	$F8 ; ø
0000B6A0 05                         	dc.b	  5
0000B6A1 08                         	dc.b	  8
0000B6A2 0A                         	dc.b	 $A
0000B6A3 F8                         	dc.b	$F8 ; ø
0000B6A4 00                         unk_20A13C:	dc.b	  0
0000B6A5 00                         	dc.b	  0
0000B6A5 00                         	dc.b	  0
0000B6A6                            	even
0000B6A6                            MapSpr_S1BigRing:
0000B6A6                            	include	"level/unused/mapspr/s1bigring.asm"
0000B6A6                            .Map:
0000B6A6 0000                       	dc.w	unk_20A146-.Map
0000B6A8 0000                       	dc.w	unk_20A179-.Map
0000B6AA 0000                       	dc.w	unk_20A1A2-.Map
0000B6AC 0000                       	dc.w	unk_20A1B7-.Map
0000B6AE 0A                         unk_20A146:	dc.b	 $A
0000B6AF E0                         	dc.b	$E0 ; à
0000B6B0 08                         	dc.b	  8
0000B6B1 00                         	dc.b	  0
0000B6B2 00                         	dc.b	  0
0000B6B3 E8                         	dc.b	$E8 ; è
0000B6B4 E0                         	dc.b	$E0 ; à
0000B6B5 08                         	dc.b	  8
0000B6B6 00                         	dc.b	  0
0000B6B7 03                         	dc.b	  3
0000B6B8 00                         	dc.b	  0
0000B6B9 E8                         	dc.b	$E8 ; è
0000B6BA 0C                         	dc.b	 $C
0000B6BB 00                         	dc.b	  0
0000B6BC 06                         	dc.b	  6
0000B6BD E0                         	dc.b	$E0 ; à
0000B6BE E8                         	dc.b	$E8 ; è
0000B6BF 0C                         	dc.b	 $C
0000B6C0 00                         	dc.b	  0
0000B6C1 0A                         	dc.b	 $A
0000B6C2 00                         	dc.b	  0
0000B6C3 F0                         	dc.b	$F0 ; ð
0000B6C4 07                         	dc.b	  7
0000B6C5 00                         	dc.b	  0
0000B6C6 0E                         	dc.b	 $E
0000B6C7 E0                         	dc.b	$E0 ; à
0000B6C8 F0                         	dc.b	$F0 ; ð
0000B6C9 07                         	dc.b	  7
0000B6CA 00                         	dc.b	  0
0000B6CB 16                         	dc.b	$16
0000B6CC 10                         	dc.b	$10
0000B6CD 10                         	dc.b	$10
0000B6CE 0C                         	dc.b	 $C
0000B6CF 00                         	dc.b	  0
0000B6D0 1E                         	dc.b	$1E
0000B6D1 E0                         	dc.b	$E0 ; à
0000B6D2 10                         	dc.b	$10
0000B6D3 0C                         	dc.b	 $C
0000B6D4 00                         	dc.b	  0
0000B6D5 22                         	dc.b	$22 ; "
0000B6D6 00                         	dc.b	  0
0000B6D7 18                         	dc.b	$18
0000B6D8 08                         	dc.b	  8
0000B6D9 00                         	dc.b	  0
0000B6DA 26                         	dc.b	$26 ; &
0000B6DB E8                         	dc.b	$E8 ; è
0000B6DC 18                         	dc.b	$18
0000B6DD 08                         	dc.b	  8
0000B6DE 00                         	dc.b	  0
0000B6DF 29                         	dc.b	$29 ; )
0000B6E0 00                         	dc.b	  0
0000B6E1 08                         unk_20A179:	dc.b	  8
0000B6E2 E0                         	dc.b	$E0 ; à
0000B6E3 0C                         	dc.b	 $C
0000B6E4 00                         	dc.b	  0
0000B6E5 2C                         	dc.b	$2C ; ,
0000B6E6 F0                         	dc.b	$F0 ; ð
0000B6E7 E8                         	dc.b	$E8 ; è
0000B6E8 08                         	dc.b	  8
0000B6E9 00                         	dc.b	  0
0000B6EA 30                         	dc.b	$30 ; 0
0000B6EB E8                         	dc.b	$E8 ; è
0000B6EC E8                         	dc.b	$E8 ; è
0000B6ED 09                         	dc.b	  9
0000B6EE 00                         	dc.b	  0
0000B6EF 33                         	dc.b	$33 ; 3
0000B6F0 00                         	dc.b	  0
0000B6F1 F0                         	dc.b	$F0 ; ð
0000B6F2 07                         	dc.b	  7
0000B6F3 00                         	dc.b	  0
0000B6F4 39                         	dc.b	$39 ; 9
0000B6F5 E8                         	dc.b	$E8 ; è
0000B6F6 F8                         	dc.b	$F8 ; ø
0000B6F7 05                         	dc.b	  5
0000B6F8 00                         	dc.b	  0
0000B6F9 41                         	dc.b	$41 ; A
0000B6FA 08                         	dc.b	  8
0000B6FB 08                         	dc.b	  8
0000B6FC 09                         	dc.b	  9
0000B6FD 00                         	dc.b	  0
0000B6FE 45                         	dc.b	$45 ; E
0000B6FF 00                         	dc.b	  0
0000B700 10                         	dc.b	$10
0000B701 08                         	dc.b	  8
0000B702 00                         	dc.b	  0
0000B703 4B                         	dc.b	$4B ; K
0000B704 E8                         	dc.b	$E8 ; è
0000B705 18                         	dc.b	$18
0000B706 0C                         	dc.b	 $C
0000B707 00                         	dc.b	  0
0000B708 4E                         	dc.b	$4E ; N
0000B709 F0                         	dc.b	$F0 ; ð
0000B70A 04                         unk_20A1A2:	dc.b	  4
0000B70B E0                         	dc.b	$E0 ; à
0000B70C 07                         	dc.b	  7
0000B70D 00                         	dc.b	  0
0000B70E 52                         	dc.b	$52 ; R
0000B70F F4                         	dc.b	$F4 ; ô
0000B710 E0                         	dc.b	$E0 ; à
0000B711 03                         	dc.b	  3
0000B712 08                         	dc.b	  8
0000B713 52                         	dc.b	$52 ; R
0000B714 04                         	dc.b	  4
0000B715 00                         	dc.b	  0
0000B716 07                         	dc.b	  7
0000B717 00                         	dc.b	  0
0000B718 5A                         	dc.b	$5A ; Z
0000B719 F4                         	dc.b	$F4 ; ô
0000B71A 00                         	dc.b	  0
0000B71B 03                         	dc.b	  3
0000B71C 08                         	dc.b	  8
0000B71D 5A                         	dc.b	$5A ; Z
0000B71E 04                         	dc.b	  4
0000B71F 08                         unk_20A1B7:	dc.b	  8
0000B720 E0                         	dc.b	$E0 ; à
0000B721 0C                         	dc.b	 $C
0000B722 08                         	dc.b	  8
0000B723 2C                         	dc.b	$2C ; ,
0000B724 F0                         	dc.b	$F0 ; ð
0000B725 E8                         	dc.b	$E8 ; è
0000B726 08                         	dc.b	  8
0000B727 08                         	dc.b	  8
0000B728 30                         	dc.b	$30 ; 0
0000B729 00                         	dc.b	  0
0000B72A E8                         	dc.b	$E8 ; è
0000B72B 09                         	dc.b	  9
0000B72C 08                         	dc.b	  8
0000B72D 33                         	dc.b	$33 ; 3
0000B72E E8                         	dc.b	$E8 ; è
0000B72F F0                         	dc.b	$F0 ; ð
0000B730 07                         	dc.b	  7
0000B731 08                         	dc.b	  8
0000B732 39                         	dc.b	$39 ; 9
0000B733 08                         	dc.b	  8
0000B734 F8                         	dc.b	$F8 ; ø
0000B735 05                         	dc.b	  5
0000B736 08                         	dc.b	  8
0000B737 41                         	dc.b	$41 ; A
0000B738 E8                         	dc.b	$E8 ; è
0000B739 08                         	dc.b	  8
0000B73A 09                         	dc.b	  9
0000B73B 08                         	dc.b	  8
0000B73C 45                         	dc.b	$45 ; E
0000B73D E8                         	dc.b	$E8 ; è
0000B73E 10                         	dc.b	$10
0000B73F 08                         	dc.b	  8
0000B740 08                         	dc.b	  8
0000B741 4B                         	dc.b	$4B ; K
0000B742 00                         	dc.b	  0
0000B743 18                         	dc.b	$18
0000B744 0C                         	dc.b	 $C
0000B745 08                         	dc.b	  8
0000B746 4E                         	dc.b	$4E ; N
0000B747 F0                         	dc.b	$F0 ; ð
0000B747 F0                         	dc.b	$F0 ; ð
0000B748                            	even
0000B748                            MapSpr_S1BigRingFlash:
0000B748                            	include	"level/unused/mapspr/s1bigringflash.asm"
0000B748                            .Map:
0000B748 0000                       	dc.w	unk_20A1F0-.Map
0000B74A 0000                       	dc.w	unk_20A1FB-.Map
0000B74C 0000                       	dc.w	unk_20A210-.Map
0000B74E 0000                       	dc.w	unk_20A225-.Map
0000B750 0000                       	dc.w	unk_20A23A-.Map
0000B752 0000                       	dc.w	unk_20A24F-.Map
0000B754 0000                       	dc.w	unk_20A264-.Map
0000B756 0000                       	dc.w	unk_20A26F-.Map
0000B758 02                         unk_20A1F0:	dc.b	  2
0000B759 E0                         	dc.b	$E0 ; à
0000B75A 0F                         	dc.b	 $F
0000B75B 00                         	dc.b	  0
0000B75C 00                         	dc.b	  0
0000B75D 00                         	dc.b	  0
0000B75E 00                         	dc.b	  0
0000B75F 0F                         	dc.b	 $F
0000B760 10                         	dc.b	$10
0000B761 00                         	dc.b	  0
0000B762 00                         	dc.b	  0
0000B763 04                         unk_20A1FB:	dc.b	  4
0000B764 E0                         	dc.b	$E0 ; à
0000B765 0F                         	dc.b	 $F
0000B766 00                         	dc.b	  0
0000B767 10                         	dc.b	$10
0000B768 F0                         	dc.b	$F0 ; ð
0000B769 E0                         	dc.b	$E0 ; à
0000B76A 07                         	dc.b	  7
0000B76B 00                         	dc.b	  0
0000B76C 20                         	dc.b	$20
0000B76D 10                         	dc.b	$10
0000B76E 00                         	dc.b	  0
0000B76F 0F                         	dc.b	 $F
0000B770 10                         	dc.b	$10
0000B771 10                         	dc.b	$10
0000B772 F0                         	dc.b	$F0 ; ð
0000B773 00                         	dc.b	  0
0000B774 07                         	dc.b	  7
0000B775 10                         	dc.b	$10
0000B776 20                         	dc.b	$20
0000B777 10                         	dc.b	$10
0000B778 04                         unk_20A210:	dc.b	  4
0000B779 E0                         	dc.b	$E0 ; à
0000B77A 0F                         	dc.b	 $F
0000B77B 00                         	dc.b	  0
0000B77C 28                         	dc.b	$28 ; (
0000B77D E8                         	dc.b	$E8 ; è
0000B77E E0                         	dc.b	$E0 ; à
0000B77F 0B                         	dc.b	 $B
0000B780 00                         	dc.b	  0
0000B781 38                         	dc.b	$38 ; 8
0000B782 08                         	dc.b	  8
0000B783 00                         	dc.b	  0
0000B784 0F                         	dc.b	 $F
0000B785 10                         	dc.b	$10
0000B786 28                         	dc.b	$28 ; (
0000B787 E8                         	dc.b	$E8 ; è
0000B788 00                         	dc.b	  0
0000B789 0B                         	dc.b	 $B
0000B78A 10                         	dc.b	$10
0000B78B 38                         	dc.b	$38 ; 8
0000B78C 08                         	dc.b	  8
0000B78D 04                         unk_20A225:	dc.b	  4
0000B78E E0                         	dc.b	$E0 ; à
0000B78F 0F                         	dc.b	 $F
0000B790 08                         	dc.b	  8
0000B791 34                         	dc.b	$34 ; 4
0000B792 E0                         	dc.b	$E0 ; à
0000B793 E0                         	dc.b	$E0 ; à
0000B794 0F                         	dc.b	 $F
0000B795 00                         	dc.b	  0
0000B796 34                         	dc.b	$34 ; 4
0000B797 00                         	dc.b	  0
0000B798 00                         	dc.b	  0
0000B799 0F                         	dc.b	 $F
0000B79A 18                         	dc.b	$18
0000B79B 34                         	dc.b	$34 ; 4
0000B79C E0                         	dc.b	$E0 ; à
0000B79D 00                         	dc.b	  0
0000B79E 0F                         	dc.b	 $F
0000B79F 10                         	dc.b	$10
0000B7A0 34                         	dc.b	$34 ; 4
0000B7A1 00                         	dc.b	  0
0000B7A2 04                         unk_20A23A:	dc.b	  4
0000B7A3 E0                         	dc.b	$E0 ; à
0000B7A4 0B                         	dc.b	 $B
0000B7A5 08                         	dc.b	  8
0000B7A6 38                         	dc.b	$38 ; 8
0000B7A7 E0                         	dc.b	$E0 ; à
0000B7A8 E0                         	dc.b	$E0 ; à
0000B7A9 0F                         	dc.b	 $F
0000B7AA 08                         	dc.b	  8
0000B7AB 28                         	dc.b	$28 ; (
0000B7AC F8                         	dc.b	$F8 ; ø
0000B7AD 00                         	dc.b	  0
0000B7AE 0B                         	dc.b	 $B
0000B7AF 18                         	dc.b	$18
0000B7B0 38                         	dc.b	$38 ; 8
0000B7B1 E0                         	dc.b	$E0 ; à
0000B7B2 00                         	dc.b	  0
0000B7B3 0F                         	dc.b	 $F
0000B7B4 18                         	dc.b	$18
0000B7B5 28                         	dc.b	$28 ; (
0000B7B6 F8                         	dc.b	$F8 ; ø
0000B7B7 04                         unk_20A24F:	dc.b	  4
0000B7B8 E0                         	dc.b	$E0 ; à
0000B7B9 07                         	dc.b	  7
0000B7BA 08                         	dc.b	  8
0000B7BB 20                         	dc.b	$20
0000B7BC E0                         	dc.b	$E0 ; à
0000B7BD E0                         	dc.b	$E0 ; à
0000B7BE 0F                         	dc.b	 $F
0000B7BF 08                         	dc.b	  8
0000B7C0 10                         	dc.b	$10
0000B7C1 F0                         	dc.b	$F0 ; ð
0000B7C2 00                         	dc.b	  0
0000B7C3 07                         	dc.b	  7
0000B7C4 18                         	dc.b	$18
0000B7C5 20                         	dc.b	$20
0000B7C6 E0                         	dc.b	$E0 ; à
0000B7C7 00                         	dc.b	  0
0000B7C8 0F                         	dc.b	 $F
0000B7C9 18                         	dc.b	$18
0000B7CA 10                         	dc.b	$10
0000B7CB F0                         	dc.b	$F0 ; ð
0000B7CC 02                         unk_20A264:	dc.b	  2
0000B7CD E0                         	dc.b	$E0 ; à
0000B7CE 0F                         	dc.b	 $F
0000B7CF 08                         	dc.b	  8
0000B7D0 00                         	dc.b	  0
0000B7D1 E0                         	dc.b	$E0 ; à
0000B7D2 00                         	dc.b	  0
0000B7D3 0F                         	dc.b	 $F
0000B7D4 18                         	dc.b	$18
0000B7D5 00                         	dc.b	  0
0000B7D6 E0                         	dc.b	$E0 ; à
0000B7D7 04                         unk_20A26F:	dc.b	  4
0000B7D8 E0                         	dc.b	$E0 ; à
0000B7D9 0F                         	dc.b	 $F
0000B7DA 00                         	dc.b	  0
0000B7DB 44                         	dc.b	$44 ; D
0000B7DC E0                         	dc.b	$E0 ; à
0000B7DD E0                         	dc.b	$E0 ; à
0000B7DE 0F                         	dc.b	 $F
0000B7DF 08                         	dc.b	  8
0000B7E0 44                         	dc.b	$44 ; D
0000B7E1 00                         	dc.b	  0
0000B7E2 00                         	dc.b	  0
0000B7E3 0F                         	dc.b	 $F
0000B7E4 10                         	dc.b	$10
0000B7E5 44                         	dc.b	$44 ; D
0000B7E6 E0                         	dc.b	$E0 ; à
0000B7E7 00                         	dc.b	  0
0000B7E8 0F                         	dc.b	 $F
0000B7E9 18                         	dc.b	$18
0000B7EA 44                         	dc.b	$44 ; D
0000B7EB 00                         	dc.b	  0
0000B7EB 00                         	dc.b	  0
0000B7EC                            	even
0000B7EC                            ; -------------------------------------------------------------------------------
0000B7EC                            
0000B7EC                            ObjSmallPlatform:
0000B7EC 7000                       	moveq	#0,d0
0000B7EE 1028 0024                  	move.b	oRoutine(a0),d0
0000B7F2 303B 0000                  	move.w	ObjSmallPlatform_Index(pc,d0.w),d0
0000B7F6 4EBB 0000                  	jsr	ObjSmallPlatform_Index(pc,d0.w)
0000B7FA 3028 0008                  	move.w	oX(a0),d0
0000B7FE 0240 FF80                  	andi.w	#$FF80,d0
0000B802 3238 F700                  	move.w	(v_cam_fg_x).w,d1
0000B806 0441 0080                  	subi.w	#$80,d1
0000B80A 0241 FF80                  	andi.w	#$FF80,d1
0000B80E 9041                       	sub.w	d1,d0
0000B810 0C40 0280                  	cmpi.w	#$280,d0
0000B814 6200 88A8                  	bhi.w	DeleteObject
0000B818 4E75                       	rts
0000B81A                            ; End of function ObjSmallPlatform
0000B81A                            
0000B81A                            ; -------------------------------------------------------------------------------
0000B81A 0000                       ObjSmallPlatform_Index:dc.w	ObjSmallPlatform_Init-ObjSmallPlatform_Index
0000B81C 0000                       	dc.w	ObjSmallPlatform_Main-ObjSmallPlatform_Index
0000B81E 0000                       	dc.w	ObjSmallPlatform_Fall-ObjSmallPlatform_Index
0000B820 0000                       	dc.w	ObjSmallPlatform_Appear-ObjSmallPlatform_Index
0000B822 0000                       	dc.w	ObjSmallPlatform_Visible-ObjSmallPlatform_Index
0000B824 0000                       	dc.w	ObjSmallPlatform_Vanish-ObjSmallPlatform_Index
0000B826 0000                       	dc.w	ObjSmallPlatform_Reset-ObjSmallPlatform_Index
0000B828                            ; -------------------------------------------------------------------------------
0000B828                            
0000B828                            ObjSmallPlatform_Init:
0000B828 5428 0024                  	addq.b	#2,oRoutine(a0)
0000B82C 0028 0004 0001             	ori.b	#4,oRender(a0)
0000B832 217C 0000 0000 0004        	move.l	#MapSpr_SmallPlatform,oMap(a0)
0000B83A 7005                       	moveq	#5,d0
0000B83C 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000B842 117C 0001 0018             	move.b	#1,oPriority(a0)
0000B848 117C 000C 0019             	move.b	#$C,oWidth(a0)
0000B84E 117C 000C 0016             	move.b	#$C,oYRadius(a0)
0000B854 117C 0005 001A             	move.b	#5,oMapFrame(a0)
0000B85A                            ; End of function ObjSmallPlatform_Init
0000B85A                            
0000B85A                            ; -------------------------------------------------------------------------------
0000B85A                            
0000B85A                            ObjSmallPlatform_Main:
0000B85A 6100 0000                  	bsr.w	ObjSmallPlatform_SolidObj
0000B85E 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000B864 6700                       	beq.s	.Display
0000B866 0C39 0002 00FF 152E        	cmpi.b	#2,(v_time_zone).l
0000B86E 6600                       	bne.s	.Appear
0000B870 0828 0003 0022             	btst	#3,oStatus(a0)
0000B876 6600                       	bne.s	.StartFall
0000B878 6000                       	bra.s	.Display
0000B87A                            
0000B87A                            ; -------------------------------------------------------------------------------
0000B87A                            
0000B87A                            .Appear:
0000B87A 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000B880 0828 0003 0022             	btst	#3,oStatus(a0)
0000B886 6700                       	beq.s	.Display
0000B888 117C 0006 0024             	move.b	#6,oRoutine(a0)
0000B88E 117C 0001 001C             	move.b	#1,oAnim(a0)
0000B894                            
0000B894                            .Display:
0000B894 4EF8 4012                  	jmp	DrawObject
0000B898                            
0000B898                            ; -------------------------------------------------------------------------------
0000B898                            
0000B898                            .StartFall:
0000B898 5428 0024                  	addq.b	#2,oRoutine(a0)
0000B89C                            ; End of function ObjSmallPlatform_Main
0000B89C                            
0000B89C                            ; -------------------------------------------------------------------------------
0000B89C                            
0000B89C                            ObjSmallPlatform_Fall:
0000B89C 6100 0000                  	bsr.w	ObjSmallPlatform_SolidObj
0000B8A0 5468 000C                  	addq.w	#2,oY(a0)
0000B8A4 3038 F704                  	move.w	(v_cam_fg_y).w,d0
0000B8A8 0640 00E0                  	addi.w	#$E0,d0
0000B8AC B068 000C                  	cmp.w	oY(a0),d0
0000B8B0 6400                       	bcc.s	.Display
0000B8B2 4EF8 40BE                  	jmp	DeleteObject
0000B8B6                            
0000B8B6                            ; -------------------------------------------------------------------------------
0000B8B6                            
0000B8B6                            .Display:
0000B8B6 4EF8 4012                  	jmp	DrawObject
0000B8BA                            ; End of function ObjSmallPlatform_Fall
0000B8BA                            
0000B8BA                            ; -------------------------------------------------------------------------------
0000B8BA                            
0000B8BA                            ObjSmallPlatform_Appear:
0000B8BA 6100 0000                  	bsr.w	ObjSmallPlatform_SolidObj
0000B8BE 0828 0003 0022             	btst	#3,oStatus(a0)
0000B8C4 6600                       	bne.s	.Animate
0000B8C6 117C 0002 0024             	move.b	#2,oRoutine(a0)
0000B8CC 4E75                       	rts
0000B8CE                            
0000B8CE                            ; -------------------------------------------------------------------------------
0000B8CE                            
0000B8CE                            .Animate:
0000B8CE 43F9 0000 0000             	lea	(Ani_SmallPlatform).l,a1
0000B8D4 6100 A91E                  	bsr.w	AnimateObject
0000B8D8 4EF8 4012                  	jmp	DrawObject
0000B8DC                            ; End of function ObjSmallPlatform_Appear
0000B8DC                            
0000B8DC                            ; -------------------------------------------------------------------------------
0000B8DC                            
0000B8DC                            ObjSmallPlatform_Visible:
0000B8DC 117C 0000 001C             	move.b	#0,oAnim(a0)
0000B8E2 6100 0000                  	bsr.w	ObjSmallPlatform_SolidObj
0000B8E6 0828 0003 0022             	btst	#3,oStatus(a0)
0000B8EC 6600                       	bne.s	.Animate
0000B8EE 5428 0024                  	addq.b	#2,oRoutine(a0)
0000B8F2 117C 0002 001C             	move.b	#2,oAnim(a0)
0000B8F8 4E75                       	rts
0000B8FA                            
0000B8FA                            ; -------------------------------------------------------------------------------
0000B8FA                            
0000B8FA                            .Animate:
0000B8FA 43F9 0000 0000             	lea	(Ani_SmallPlatform).l,a1
0000B900 6100 A8F2                  	bsr.w	AnimateObject
0000B904 4EF8 4012                  	jmp	DrawObject
0000B908                            ; End of function ObjSmallPlatform_Visible
0000B908                            
0000B908                            ; -------------------------------------------------------------------------------
0000B908                            
0000B908                            ObjSmallPlatform_Vanish:
0000B908 6100 0000                  	bsr.w	ObjSmallPlatform_SolidObj
0000B90C 43F9 0000 0000             	lea	(Ani_SmallPlatform).l,a1
0000B912 6100 A8E0                  	bsr.w	AnimateObject
0000B916 4EF8 4012                  	jmp	DrawObject
0000B91A                            ; End of function ObjSmallPlatform_Vanish
0000B91A                            
0000B91A                            ; -------------------------------------------------------------------------------
0000B91A                            
0000B91A                            ObjSmallPlatform_Reset:
0000B91A 117C 0002 0024             	move.b	#2,oRoutine(a0)
0000B920 4E75                       	rts
0000B922                            ; End of function ObjSmallPlatform_Reset
0000B922                            
0000B922                            ; -------------------------------------------------------------------------------
0000B922                            
0000B922                            ObjSmallPlatform_SolidObj:
0000B922 43F8 D000                  	lea	(v_player).w,a1
0000B926 6100 0002                  	bsr.w	*+4
0000B92A                            ; End of function ObjSmallPlatform_SolidObj
0000B92A                            
0000B92A                            ; -------------------------------------------------------------------------------
0000B92A                            
0000B92A                            ObjSmallPlatform_SolidObj2:
0000B92A 3628 0008                  	move.w	oX(a0),d3
0000B92E 3828 000C                  	move.w	oY(a0),d4
0000B932 4EFA EC8E                  	jmp	SolidObject1
0000B936                            ; End of function ObjSmallPlatform_SolidObj2
0000B936                            
0000B936                            ; -------------------------------------------------------------------------------
0000B936                            Ani_SmallPlatform:
0000B936                            	include	"level/objects/smallptfm/anim.asm"
0000B936                            .Anim:
0000B936 0000                       	dc.w	byte_20A3E2-.Anim
0000B938 0000                       	dc.w	byte_20A3E6-.Anim
0000B93A 0000                       	dc.w	byte_20A3F0-.Anim
0000B93C 0205 FF                    byte_20A3E2:	dc.b	2,	5, $FF
0000B93F 00                         	dc.b	0
0000B940 0201 0502 0503 0504 05FC   byte_20A3E6:	dc.b	2,	1, 5, 2, 5, 3, 5, 4, 5,	$FC
0000B94A 0201 0002 0003 0004 00FC   byte_20A3F0:	dc.b	2,	1, 0, 2, 0, 3, 0, 4, 0,	$FC
0000B94A 0201 0002 0003 0004 00FC   byte_20A3F0:	dc.b	2,	1, 0, 2, 0, 3, 0, 4, 0,	$FC
0000B954                            	even
0000B954                            MapSpr_SmallPlatform:
0000B954                            	include	"level/objects/smallptfm/map.asm"
0000B954                            .Map:
0000B954 0000                       	dc.w	unk_20A406-.Map
0000B956 0000                       	dc.w	unk_20A408-.Map
0000B958 0000                       	dc.w	unk_20A418-.Map
0000B95A 0000                       	dc.w	unk_20A428-.Map
0000B95C 0000                       	dc.w	unk_20A434-.Map
0000B95E 0000                       	dc.w	unk_20A440-.Map
0000B960 00                         unk_20A406:	dc.b	  0
0000B961 00                         	dc.b	  0
0000B962 03                         unk_20A408:	dc.b	  3
0000B963 F4                         	dc.b	$F4 ; ô
0000B964 09                         	dc.b	  9
0000B965 00                         	dc.b	  0
0000B966 00                         	dc.b	  0
0000B967 F4                         	dc.b	$F4 ; ô
0000B968 04                         	dc.b	  4
0000B969 00                         	dc.b	  0
0000B96A 00                         	dc.b	  0
0000B96B 00                         	dc.b	  0
0000B96C FC                         	dc.b	$FC ; ü
0000B96D 04                         	dc.b	  4
0000B96E 00                         	dc.b	  0
0000B96F 00                         	dc.b	  0
0000B970 00                         	dc.b	  0
0000B971 04                         	dc.b	  4
0000B972 03                         unk_20A418:	dc.b	  3
0000B973 F4                         	dc.b	$F4 ; ô
0000B974 09                         	dc.b	  9
0000B975 08                         	dc.b	  8
0000B976 00                         	dc.b	  0
0000B977 F4                         	dc.b	$F4 ; ô
0000B978 04                         	dc.b	  4
0000B979 00                         	dc.b	  0
0000B97A 08                         	dc.b	  8
0000B97B 00                         	dc.b	  0
0000B97C F4                         	dc.b	$F4 ; ô
0000B97D 04                         	dc.b	  4
0000B97E 00                         	dc.b	  0
0000B97F 08                         	dc.b	  8
0000B980 00                         	dc.b	  0
0000B981 FC                         	dc.b	$FC ; ü
0000B982 02                         unk_20A428:	dc.b	  2
0000B983 F4                         	dc.b	$F4 ; ô
0000B984 09                         	dc.b	  9
0000B985 18                         	dc.b	$18
0000B986 00                         	dc.b	  0
0000B987 F4                         	dc.b	$F4 ; ô
0000B988 04                         	dc.b	  4
0000B989 00                         	dc.b	  0
0000B98A 18                         	dc.b	$18
0000B98B 00                         	dc.b	  0
0000B98C FC                         	dc.b	$FC ; ü
0000B98D 00                         	dc.b	  0
0000B98E 02                         unk_20A434:	dc.b	  2
0000B98F F4                         	dc.b	$F4 ; ô
0000B990 09                         	dc.b	  9
0000B991 10                         	dc.b	$10
0000B992 00                         	dc.b	  0
0000B993 F4                         	dc.b	$F4 ; ô
0000B994 04                         	dc.b	  4
0000B995 00                         	dc.b	  0
0000B996 10                         	dc.b	$10
0000B997 00                         	dc.b	  0
0000B998 FC                         	dc.b	$FC ; ü
0000B999 00                         	dc.b	  0
0000B99A 01                         unk_20A440:	dc.b	  1
0000B99B F4                         	dc.b	$F4 ; ô
0000B99C 0A                         	dc.b	 $A
0000B99D 00                         	dc.b	  0
0000B99E 06                         	dc.b	  6
0000B99F F4                         	dc.b	$F4 ; ô
0000B99F F4                         	dc.b	$F4 ; ô
0000B9A0                            	even
0000B9A0                            ; -------------------------------------------------------------------------------
0000B9A0                            
0000B9A0                            ObjTimeIcon:
0000B9A0 7000                       	moveq	#0,d0
0000B9A2 1028 0024                  	move.b	oRoutine(a0),d0
0000B9A6 303B 0000                  	move.w	ObjTimeIcon_Index(pc,d0.w),d0
0000B9AA 4EBB 0000                  	jsr	ObjTimeIcon_Index(pc,d0.w)
0000B9AE 4A38 F784                  	tst.b	(v_time_warp_dir).w
0000B9B2 6700                       	beq.s	.End
0000B9B4 0C78 005A F786             	cmpi.w	#$5A,(v_time_warp_timer).w
0000B9BA 6500                       	bcs.s	.Display
0000B9BC 0839 0000 00FF 1505        	btst	#0,(v_frame_timer+1).l
0000B9C4 6600                       	bne.s	.End
0000B9C6                            
0000B9C6                            .Display:
0000B9C6 4EF8 4012                  	jmp	DrawObject
0000B9CA                            
0000B9CA                            ; -------------------------------------------------------------------------------
0000B9CA                            
0000B9CA                            .End:
0000B9CA 4E75                       	rts
0000B9CC                            ; End of function ObjTimeIcon
0000B9CC                            
0000B9CC                            ; -------------------------------------------------------------------------------
0000B9CC 0000                       ObjTimeIcon_Index:dc.w	ObjTimeIcon_Init-ObjTimeIcon_Index
0000B9CE 0000                       	dc.w	ObjTimeIcon_Main-ObjTimeIcon_Index
0000B9D0                            ; -------------------------------------------------------------------------------
0000B9D0                            
0000B9D0                            ObjTimeIcon_Init:
0000B9D0 5428 0024                  	addq.b	#2,oRoutine(a0)
0000B9D4 217C 0000 0000 0004        	move.l	#MapSpr_MonitorTimePost,oMap(a0)
0000B9DC 317C 85A8 0002             	move.w	#$85A8,oTile(a0)
0000B9E2 317C 00C4 0008             	move.w	#$C4,oX(a0)
0000B9E8 317C 0152 000A             	move.w	#$152,oYScr(a0)
0000B9EE                            ; End of function ObjTimeIcon_Init
0000B9EE                            
0000B9EE                            ; -------------------------------------------------------------------------------
0000B9EE                            
0000B9EE                            ObjTimeIcon_Main:
0000B9EE 117C 0012 001A             	move.b	#$12,oMapFrame(a0)
0000B9F4 4A38 F784                  	tst.b	(v_time_warp_dir).w
0000B9F8 6B00                       	bmi.s	.End
0000B9FA 117C 0013 001A             	move.b	#$13,oMapFrame(a0)
0000BA00                            
0000BA00                            .End:
0000BA00 4E75                       	rts
0000BA02                            ; End of function ObjTimeIcon_Main
0000BA02                            
0000BA02                            ; -------------------------------------------------------------------------------
0000BA02                            
0000BA02                            ObjTimepost_TimeIcon:
0000BA02 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l
0000BA08 6700                       	beq.s	.Proceed
0000BA0A 4EF8 40BE                  	jmp	DeleteObject
0000BA0E                            
0000BA0E                            ; -------------------------------------------------------------------------------
0000BA0E                            
0000BA0E                            .Proceed:
0000BA0E 0C28 000A 0028             	cmpi.b	#$A,oSubtype(a0)
0000BA14 6700 FF8A                  	beq.w	ObjTimeIcon
0000BA18                            
0000BA18                            ObjTimepost:
0000BA18 7000                       	moveq	#0,d0
0000BA1A 1028 0024                  	move.b	oRoutine(a0),d0
0000BA1E 303B 0000                  	move.w	ObjTimepost_Index(pc,d0.w),d0
0000BA22 4EBB 0000                  	jsr	ObjTimepost_Index(pc,d0.w)
0000BA26 4EB8 4012                  	jsr	DrawObject
0000BA2A 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000BA2E                            ; End of function ObjTimepost_TimeIcon
0000BA2E                            
0000BA2E                            ; -------------------------------------------------------------------------------
0000BA2E 0000                       ObjTimepost_Index:dc.w	ObjTimepost_Init-ObjTimepost_Index
0000BA30 0000                       	dc.w	ObjTimepost_Main-ObjTimepost_Index
0000BA32 0000                       	dc.w	ObjTimepost_Spin-ObjTimepost_Index
0000BA34 0000                       	dc.w	ObjTimepost_Done-ObjTimepost_Index
0000BA36                            ; -------------------------------------------------------------------------------
0000BA36                            
0000BA36                            ObjTimepost_Init:
0000BA36 5428 0024                  	addq.b	#2,oRoutine(a0)
0000BA3A 117C 0020 0016             	move.b	#$20,oYRadius(a0)
0000BA40 117C 000E 0017             	move.b	#$E,oXRadius(a0)
0000BA46 217C 0000 0000 0004        	move.l	#MapSpr_MonitorTimePost,oMap(a0)
0000BA4E 317C 05A8 0002             	move.w	#$5A8,oTile(a0)
0000BA54 117C 0004 0001             	move.b	#4,oRender(a0)
0000BA5A 117C 0003 0018             	move.b	#3,oPriority(a0)
0000BA60 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
0000BA68 6600                       	bne.s	.NotFront
0000BA6A 4A28 0029                  	tst.b	oSubtype2(a0)
0000BA6E 6600                       	bne.s	.NotFront
0000BA70 117C 0000 0018             	move.b	#0,oPriority(a0)
0000BA76 0028 0080 0002             	ori.b	#$80,oTile(a0)
0000BA7C                            
0000BA7C                            .NotFront:
0000BA7C 117C 000F 0019             	move.b	#$F,oWidth(a0)
0000BA82 1168 0028 001C             	move.b	oSubtype(a0),oAnim(a0)
0000BA88 6100 0000                  	bsr.w	ObjMonitor_GetRespawn
0000BA8C 08B2 0007 0002             	bclr	#7,2(a2,d0.w)
0000BA92 117C 000A 001A             	move.b	#$A,oMapFrame(a0)
0000BA98 0C28 0008 0028             	cmpi.b	#8,oSubtype(a0)
0000BA9E 6700                       	beq.s	.ChkActive
0000BAA0 5428 001A                  	addq.b	#2,oMapFrame(a0)
0000BAA4                            
0000BAA4                            .ChkActive:
0000BAA4 0832 0000 0002             	btst	#0,2(a2,d0.w)
0000BAAA 6700                       	beq.s	.StillActive
0000BAAC 5228 001A                  	addq.b	#1,oMapFrame(a0)
0000BAB0 117C 0006 0024             	move.b	#6,oRoutine(a0)
0000BAB6 4E75                       	rts
0000BAB8                            
0000BAB8                            ; -------------------------------------------------------------------------------
0000BAB8                            
0000BAB8                            .StillActive:
0000BAB8 117C 00DF 0020             	move.b	#$DF,oColType(a0)
0000BABE                            ; End of function ObjTimepost_Init
0000BABE                            
0000BABE                            ; -------------------------------------------------------------------------------
0000BABE                            
0000BABE                            ObjTimepost_Main:
0000BABE 4A28 0021                  	tst.b	oColStatus(a0)
0000BAC2 6700                       	beq.s	.End
0000BAC4 4228 0021                  	clr.b	oColStatus(a0)
0000BAC8 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
0000BAD0 6600                       	bne.s	.ChkTouch
0000BAD2 4A28 0029                  	tst.b	oSubtype2(a0)
0000BAD6 6700                       	beq.s	.NotBack
0000BAD8 4A39 00FF 1956             	tst.b	(v_display_low_plane).l
0000BADE 6700                       	beq.s	.End
0000BAE0 6000                       	bra.s	.ChkTouch
0000BAE2                            
0000BAE2                            ; -------------------------------------------------------------------------------
0000BAE2                            
0000BAE2                            .NotBack:
0000BAE2 4A39 00FF 1956             	tst.b	(v_display_low_plane).l
0000BAE8 6600                       	bne.s	.End
0000BAEA                            
0000BAEA                            .ChkTouch:
0000BAEA 117C 003C 002A             	move.b	#$3C,oVar2A(a0)
0000BAF0 5428 0024                  	addq.b	#2,oRoutine(a0)
0000BAF4 6100 0000                  	bsr.w	ObjMonitor_GetRespawn
0000BAF8 08F2 0000 0002             	bset	#0,2(a2,d0.w)
0000BAFE 303C 0077                  	move.w	#$77,d0
0000BB02 11FC 00FF F784             	move.b	#$FF,(v_time_warp_dir).w
0000BB08 0C28 0008 0028             	cmpi.b	#8,oSubtype(a0)
0000BB0E 6700                       	beq.s	.PlaySnd
0000BB10                            	;move.b	#$FF,(v_time_warp_dir).w
0000BB10                            	;cmpi.b	#9,oSubtype(a0)
0000BB10                            	;beq.s	.PlaySnd_2
0000BB10 11FC 0001 F784             	move.b	#1,(v_time_warp_dir).w
0000BB16 5340                       	subq.w	#1,d0
0000BB18                            
0000BB18                            .PlaySnd:
0000BB18                            	;move.w	#$8A,d0
0000BB18 4EB8 2708                  	jsr	PlayFMSound
0000BB1C                            
0000BB1C                            	
0000BB1C                            
0000BB1C                            ;.PlaySnd_2:
0000BB1C                            	;move.w	#$8B,d0
0000BB1C                            	;jsr	PlayFMSound
0000BB1C                            
0000BB1C                            .End:
0000BB1C 4E75                       	rts
0000BB1E                            ; End of function ObjTimepost_Main
0000BB1E                            
0000BB1E                            ; -------------------------------------------------------------------------------
0000BB1E                            
0000BB1E                            ObjTimepost_Spin:
0000BB1E 5328 002A                  	subq.b	#1,oVar2A(a0)
0000BB22 6700                       	beq.s	.StopSpin
0000BB24 43F9 0000 0000             	lea	(Ani_Monitor).l,a1
0000BB2A 6000 A6C8                  	bra.w	AnimateObject
0000BB2E                            
0000BB2E                            ; -------------------------------------------------------------------------------
0000BB2E                            
0000BB2E                            .StopSpin:
0000BB2E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000BB32 117C 000B 001A             	move.b	#$B,oMapFrame(a0)
0000BB38 0C28 0008 0028             	cmpi.b	#8,oSubtype(a0)
0000BB3E 6700                       	beq.s	ObjTimepost_Done
0000BB40 5428 001A                  	addq.b	#2,oMapFrame(a0)
0000BB44                            ; End of function ObjTimepost_Spin
0000BB44                            
0000BB44                            ; -------------------------------------------------------------------------------
0000BB44                            
0000BB44                            ObjTimepost_Done:
0000BB44 4E75                       	rts
0000BB46                            ; End of function ObjTimepost_Done
0000BB46                            
0000BB46                            ; -------------------------------------------------------------------------------
0000BB46                            
0000BB46                            ObjMonitor_GetRespawn:
0000BB46 45F9 00FF 1200             	lea	(v_obj_respawns).l,a2
0000BB4C 7000                       	moveq	#0,d0
0000BB4E 1028 0023                  	move.b	oRespawn(a0),d0
0000BB52 3200                       	move.w	d0,d1
0000BB54 D241                       	add.w	d1,d1
0000BB56 D041                       	add.w	d1,d0
0000BB58 7200                       	moveq	#0,d1
0000BB5A 1239 00FF 152E             	move.b	(v_time_zone).l,d1
0000BB60 0881 0007                  	bclr	#7,d1
0000BB64 6700                       	beq.s	.GotTime
0000BB66 1438 F784                  	move.b	(v_time_warp_dir).w,d2
0000BB6A 4882                       	ext.w	d2
0000BB6C 4442                       	neg.w	d2
0000BB6E D242                       	add.w	d2,d1
0000BB70 6A00                       	bpl.s	.ChkOverflow
0000BB72 7200                       	moveq	#0,d1
0000BB74 6000                       	bra.s	.GotTime
0000BB76                            
0000BB76                            ; -------------------------------------------------------------------------------
0000BB76                            
0000BB76                            .ChkOverflow:
0000BB76 0C41 0003                  	cmpi.w	#3,d1
0000BB7A 6500                       	bcs.s	.GotTime
0000BB7C 7202                       	moveq	#2,d1
0000BB7E                            
0000BB7E                            .GotTime:
0000BB7E D041                       	add.w	d1,d0
0000BB80 4E75                       	rts
0000BB82                            ; End of function ObjMonitor_GetRespawn
0000BB82                            
0000BB82                            ; -------------------------------------------------------------------------------
0000BB82                            
0000BB82                            ObjMonitor_SolidObj:
0000BB82 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
0000BB8A 6600                       	bne.s	.DoSolid
0000BB8C 4A39 00FF 1956             	tst.b	(v_display_low_plane).l
0000BB92 6700                       	beq.s	.ChkHighPlane
0000BB94 4A28 0029                  	tst.b	oSubtype2(a0)
0000BB98 6600                       	bne.s	.DoSolid
0000BB9A 4E75                       	rts
0000BB9C                            
0000BB9C                            ; -------------------------------------------------------------------------------
0000BB9C                            
0000BB9C                            .ChkHighPlane:
0000BB9C 4A28 0029                  	tst.b	oSubtype2(a0)
0000BBA0 6700                       	beq.s	.DoSolid
0000BBA2 4E75                       	rts
0000BBA4                            
0000BBA4                            ; -------------------------------------------------------------------------------
0000BBA4                            
0000BBA4                            .DoSolid:
0000BBA4 3628 0008                  	move.w	oX(a0),d3
0000BBA8 3828 000C                  	move.w	oY(a0),d4
0000BBAC 4EFA EA1A                  	jmp	SolidObject
0000BBB0                            ; End of function ObjMonitor_SolidObj
0000BBB0                            
0000BBB0                            ; -------------------------------------------------------------------------------
0000BBB0                            
0000BBB0                            ObjMonitor_Timepost:
0000BBB0 4A28 0028                  	tst.b	oSubtype(a0)
0000BBB4 6600                       	bne.s	ObjMonitor
0000BBB6 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l
0000BBBC 6700                       	beq.s	ObjMonitor
0000BBBE 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000BBC2                            
0000BBC2                            ; -------------------------------------------------------------------------------
0000BBC2                            
0000BBC2                            ObjMonitor:
0000BBC2 0C28 0008 0028             	cmpi.b	#8,oSubtype(a0)
0000BBC8 6400 FE38                  	bcc.w	ObjTimepost_TimeIcon
0000BBCC 7000                       	moveq	#0,d0
0000BBCE 1028 0024                  	move.b	oRoutine(a0),d0
0000BBD2 323B 0000                  	move.w	ObjMonitor_Index(pc,d0.w),d1
0000BBD6 4EFB 1000                  	jmp	ObjMonitor_Index(pc,d1.w)
0000BBDA                            ; End of function ObjMonitor_Timepost
0000BBDA                            
0000BBDA                            ; -------------------------------------------------------------------------------
0000BBDA 0000                       ObjMonitor_Index:dc.w	ObjMonitor_Init-ObjMonitor_Index
0000BBDC 0000                       	dc.w	ObjMonitor_Main-ObjMonitor_Index
0000BBDE 0000                       	dc.w	ObjMonitor_Break-ObjMonitor_Index
0000BBE0 0000                       	dc.w	ObjMonitor_Animate-ObjMonitor_Index
0000BBE2 0000                       	dc.w	ObjMonitor_Display-ObjMonitor_Index
0000BBE4                            ; -------------------------------------------------------------------------------
0000BBE4                            
0000BBE4                            ObjMonitor_Init:
0000BBE4 5428 0024                  	addq.b	#2,oRoutine(a0)
0000BBE8 117C 000E 0016             	move.b	#$E,oYRadius(a0)
0000BBEE 117C 000E 0017             	move.b	#$E,oXRadius(a0)
0000BBF4 217C 0000 0000 0004        	move.l	#MapSpr_MonitorTimePost,oMap(a0)
0000BBFC 317C 05A8 0002             	move.w	#$5A8,oTile(a0)
0000BC02 117C 0003 0018             	move.b	#3,oPriority(a0)
0000BC08 0C39 0006 00FF 1506        	cmpi.b	#6,(v_zone).l
0000BC10 6600                       	bne.s	.NotMMZ
0000BC12 4A28 0029                  	tst.b	oSubtype2(a0)
0000BC16 6600                       	bne.s	.NotMMZ
0000BC18 0028 0080 0002             	ori.b	#$80,oTile(a0)
0000BC1E 117C 0000 0018             	move.b	#0,oPriority(a0)
0000BC24                            
0000BC24                            .NotMMZ:
0000BC24 117C 0004 0001             	move.b	#4,oRender(a0)
0000BC2A 117C 000F 0019             	move.b	#$F,oWidth(a0)
0000BC30 6100 FF14                  	bsr.w	ObjMonitor_GetRespawn
0000BC34 08B2 0007 0002             	bclr	#7,2(a2,d0.w)
0000BC3A 0832 0000 0002             	btst	#0,2(a2,d0.w)
0000BC40 6700                       	beq.s	.NotBroken
0000BC42 117C 0008 0024             	move.b	#8,oRoutine(a0)
0000BC48 117C 0011 001A             	move.b	#$11,oMapFrame(a0)
0000BC4E 4E75                       	rts
0000BC50                            
0000BC50                            ; -------------------------------------------------------------------------------
0000BC50                            
0000BC50                            .NotBroken:
0000BC50 117C 0046 0020             	move.b	#$46,oColType(a0)
0000BC56 1168 0028 001C             	move.b	oSubtype(a0),oAnim(a0)
0000BC5C                            ; End of function ObjMonitor_Init
0000BC5C                            
0000BC5C                            ; -------------------------------------------------------------------------------
0000BC5C                            
0000BC5C                            ObjMonitor_Main:
0000BC5C 4A28 0001                  	tst.b	oRender(a0)
0000BC60 6A00 0000                  	bpl.w	ObjMonitor_Display
0000BC64 1028 0025                  	move.b	oRoutine2(a0),d0
0000BC68 6700                       	beq.s	.CheckSolid
0000BC6A 6100 82F0                  	bsr.w	ObjMoveGrv
0000BC6E 4EB8 6F3C                  	jsr	CheckFloorEdge
0000BC72 4A41                       	tst.w	d1
0000BC74 6A00 0000                  	bpl.w	ObjMonitor_Animate
0000BC78 D368 000C                  	add.w	d1,oY(a0)
0000BC7C 4268 0012                  	clr.w	oYVel(a0)
0000BC80 4228 0025                  	clr.b	oRoutine2(a0)
0000BC84 6000 0000                  	bra.w	ObjMonitor_Animate
0000BC88                            
0000BC88                            ; -------------------------------------------------------------------------------
0000BC88                            
0000BC88                            .CheckSolid:
0000BC88 4A28 0001                  	tst.b	oRender(a0)
0000BC8C 6A00                       	bpl.s	ObjMonitor_Animate
0000BC8E 43F8 D000                  	lea	(v_player).w,a1
0000BC92 6100 FEEE                  	bsr.w	ObjMonitor_SolidObj
0000BC96                            ; End of function ObjMonitor_Main
0000BC96                            
0000BC96                            ; -------------------------------------------------------------------------------
0000BC96                            
0000BC96                            ObjMonitor_Animate:
0000BC96 4A79 00FF 190E             	tst.w	(v_time_stop_timer).l
0000BC9C 6600                       	bne.s	ObjMonitor_Display
0000BC9E 43F9 0000 0000             	lea	(Ani_Monitor).l,a1
0000BCA4 6100 A54E                  	bsr.w	AnimateObject
0000BCA8                            ; End of function ObjMonitor_Animate
0000BCA8                            
0000BCA8                            ; -------------------------------------------------------------------------------
0000BCA8                            
0000BCA8                            ObjMonitor_Display:
0000BCA8 6100 8368                  	bsr.w	DrawObject
0000BCAC 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000BCB0                            ; End of function ObjMonitor_Display
0000BCB0                            
0000BCB0                            ; -------------------------------------------------------------------------------
0000BCB0                            
0000BCB0                            ObjMonitor_Break:
0000BCB0 303C 00C1                  	move.w	#$C1,d0
0000BCB4 4EB8 2708                  	jsr	PlayFMSound
0000BCB8 5828 0024                  	addq.b	#4,oRoutine(a0)
0000BCBC 117C 0000 0020             	move.b	#0,oColType(a0)
0000BCC2 6100 C020                  	bsr.w	FindObjSlot
0000BCC6 6600                       	bne.s	.NoContents
0000BCC8 12BC 001A                  	move.b	#$1A,oID(a1)
0000BCCC 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000BCD2 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000BCD8 1368 001C 001C             	move.b	oAnim(a0),oAnim(a1)
0000BCDE 1368 0029 0029             	move.b	oSubtype2(a0),oSubtype2(a1)
0000BCE4                            
0000BCE4                            .NoContents:
0000BCE4 6100 BFFE                  	bsr.w	FindObjSlot
0000BCE8 6600                       	bne.s	.NoExplosion
0000BCEA 12BC 0018                  	move.b	#$18,oID(a1)
0000BCEE 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000BCF4 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000BCFA 137C 0001 0025             	move.b	#1,oRoutine2(a1)
0000BD00 137C 0001 0028             	move.b	#1,oSubtype(a1)
0000BD06 1368 0029 0029             	move.b	oSubtype2(a0),oSubtype2(a1)
0000BD0C                            
0000BD0C                            .NoExplosion:
0000BD0C 6100 FE38                  	bsr.w	ObjMonitor_GetRespawn
0000BD10 08F2 0000 0002             	bset	#0,2(a2,d0.w)
0000BD16 117C 0011 001A             	move.b	#$11,oMapFrame(a0)
0000BD1C 6000 82F4                  	bra.w	DrawObject
0000BD20                            ; End of function ObjMonitor_Break
0000BD20                            
0000BD20                            ; -------------------------------------------------------------------------------
0000BD20                            
0000BD20                            ObjMonitorContents:
0000BD20 7000                       	moveq	#0,d0
0000BD22 1028 0024                  	move.b	oRoutine(a0),d0
0000BD26 323B 0000                  	move.w	ObjMonitorContents_Index(pc,d0.w),d1
0000BD2A 4EBB 1000                  	jsr	ObjMonitorContents_Index(pc,d1.w)
0000BD2E 6000 82E2                  	bra.w	DrawObject
0000BD32                            ; End of function ObjMonitorContents
0000BD32                            
0000BD32                            ; -------------------------------------------------------------------------------
0000BD32 0000                       ObjMonitorContents_Index:dc.w	ObjMonitorContents_Init-ObjMonitorContents_Index
0000BD34 0000                       	dc.w	ObjMonitorContents_Main-ObjMonitorContents_Index
0000BD36 0000                       	dc.w	ObjMonitorContents_Destroy-ObjMonitorContents_Index
0000BD38                            ; -------------------------------------------------------------------------------
0000BD38                            
0000BD38                            ObjMonitorContents_Init:
0000BD38 5428 0024                  	addq.b	#2,oRoutine(a0)
0000BD3C 317C 85A8 0002             	move.w	#$85A8,oTile(a0)
0000BD42 4A28 0029                  	tst.b	oSubtype2(a0)
0000BD46 6700                       	beq.s	.NotPriority
0000BD48 0228 007F 0002             	andi.b	#$7F,oTile(a0)
0000BD4E                            
0000BD4E                            .NotPriority:
0000BD4E 117C 0024 0001             	move.b	#$24,oRender(a0)
0000BD54 117C 0003 0018             	move.b	#3,oPriority(a0)
0000BD5A 117C 0008 0019             	move.b	#8,oWidth(a0)
0000BD60 317C FD00 0012             	move.w	#-$300,oYVel(a0)
0000BD66 7000                       	moveq	#0,d0
0000BD68 1028 001C                  	move.b	oAnim(a0),d0
0000BD6C 1140 001A                  	move.b	d0,oMapFrame(a0)
0000BD70 227C 0000 0000             	movea.l	#MapSpr_MonitorTimePost,a1
0000BD76 D000                       	add.b	d0,d0
0000BD78 D2F1 0000                  	adda.w	(a1,d0.w),a1
0000BD7C 5249                       	addq.w	#1,a1
0000BD7E 2149 0004                  	move.l	a1,oMap(a0)
0000BD82                            ; End of function ObjMonitorContents_Init
0000BD82                            
0000BD82                            ; -------------------------------------------------------------------------------
0000BD82                            
0000BD82                            ObjMonitorContents_Main:
0000BD82                            
0000BD82                            ; FUNCTION CHUNK AT 0020A8E4 SIZE 00000006 BYTES
0000BD82                            ; FUNCTION CHUNK AT 0020A946 SIZE 00000076 BYTES
0000BD82                            
0000BD82 4A68 0012                  	tst.w	oYVel(a0)
0000BD86 6A00 0000                  	bpl.w	.GiveBonus
0000BD8A 6100 8232                  	bsr.w	ObjMove
0000BD8E 0668 0018 0012             	addi.w	#$18,oYVel(a0)
0000BD94 4E75                       	rts
0000BD96                            
0000BD96                            ; -------------------------------------------------------------------------------
0000BD96                            
0000BD96                            .GiveBonus:
0000BD96 5428 0024                  	addq.b	#2,oRoutine(a0)
0000BD9A 317C 001D 001E             	move.w	#$1D,oAnimTime(a0)
0000BDA0 1028 001C                  	move.b	oAnim(a0),d0
0000BDA4 6600                       	bne.s	.Not1UP
0000BDA6                            
0000BDA6                            .Gain1UP:
0000BDA6 5239 00FF 1508             	addq.b	#1,(v_life_count).l
0000BDAC 5239 00FF 150E             	addq.b	#1,(v_update_lives).l
0000BDB2 303C 0088                  	move.w	#$88,d0 ; Play 1UP Theme
0000BDB6 4EF8 270E                  	jmp	PlaySound_Special
0000BDBA                            ;	move.w	#$7A,d0
0000BDBA                            ;	jmp	SendSubCommand
0000BDBA                            
0000BDBA                            ; -------------------------------------------------------------------------------
0000BDBA                            
0000BDBA                            .Not1UP:
0000BDBA 0C00 0001                  	cmpi.b	#1,d0
0000BDBE 6600                       	bne.s	.Not10Rings
0000BDC0 0679 000A 00FF 1512        	addi.w	#10,(v_ring_count).l
0000BDC8 0039 0001 00FF 150F        	ori.b	#1,(v_update_rings).l
0000BDD0 0C79 0064 00FF 1512        	cmpi.w	#100,(v_ring_count).l
0000BDD8 6500                       	bcs.s	.RingSound
0000BDDA 08F9 0001 00FF 150D        	bset	#1,(v_1up_flags).l
0000BDE2 6700 FFC2                  	beq.w	.Gain1UP
0000BDE6 0C79 00C8 00FF 1512        	cmpi.w	#200,(v_ring_count).l
0000BDEE 6500                       	bcs.s	.RingSound
0000BDF0 08F9 0002 00FF 150D        	bset	#2,(v_1up_flags).l
0000BDF8 6700 FFAC                  	beq.w	.Gain1UP
0000BDFC                            
0000BDFC                            .RingSound:
0000BDFC 303C 00B5                  	move.w	#$B5,d0
0000BE00 4EF8 2708                  	jmp	PlayFMSound
0000BE04                            
0000BE04                            ; -------------------------------------------------------------------------------
0000BE04                            
0000BE04                            .Not10Rings:
0000BE04 0C00 0002                  	cmpi.b	#2,d0
0000BE08 6600                       	bne.s	ObjMonitorContents_NotShield
0000BE0A                            ; End of function ObjMonitorContents_Main
0000BE0A                            
0000BE0A                            ; -------------------------------------------------------------------------------
0000BE0A                            
0000BE0A                            ObjMonitorContents_GainShield:
0000BE0A 13FC 0001 00FF 151E        	move.b	#1,(v_shield).l
0000BE12 11FC 0003 D180             	move.b	#3,(v_obj_shield).w
0000BE18 303C 00AF                  	move.w	#$AF,d0
0000BE1C 4EF8 2708                  	jmp	PlayFMSound
0000BE20                            ; ;End of function ObjMonitorContents_GainShield
0000BE20                            
0000BE20                            ; -------------------------------------------------------------------------------
0000BE20                            ; START	OF FUNCTION CHUNK FOR ObjMonitorContents_Main
0000BE20                            
0000BE20                            ObjMonitorContents_NotShield:
0000BE20 0C00 0003                  	cmpi.b	#3,d0
0000BE24 6600                       	bne.s	ObjMonitorContents_NotInvinc
0000BE26                            ; END OF FUNCTION CHUNK	FOR ObjMonitorContents_Main
0000BE26                            ; -------------------------------------------------------------------------------
0000BE26                            
0000BE26                            ObjMonitorContents_GainInvinc:
0000BE26 13FC 0001 00FF 151F        	move.b	#1,(v_invincible).l
0000BE2E 31FC 0528 D032             	move.w	#$528,(v_player+oPlayerInvinc).w
0000BE34 11FC 0003 D200             	move.b	#3,(v_obj_inv_star1).w
0000BE3A 11FC 0001 D21C             	move.b	#1,(v_obj_inv_star1+oAnim).w
0000BE40 11FC 0003 D240             	move.b	#3,(v_obj_inv_star2).w
0000BE46 11FC 0002 D25C             	move.b	#2,(v_obj_inv_star2+oAnim).w
0000BE4C 11FC 0003 D280             	move.b	#3,(v_obj_inv_star3).w
0000BE52 11FC 0003 D29C             	move.b	#3,(v_obj_inv_star3+oAnim).w
0000BE58 11FC 0003 D2C0             	move.b	#3,(v_obj_inv_star4).w
0000BE5E 11FC 0004 D2DC             	move.b	#4,(v_obj_inv_star4+oAnim).w
0000BE64 303C 0087                  	move.w	#$87,d0 ; Play Invincibility Theme
0000BE68 4EB8 2708                  	jsr	PlayFMSound
0000BE6C 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000BE72 6600                       	bne.s	.NotPast
0000BE74 303C 0082                  	move.w	#$82,d0
0000BE78 4EB8 61B2                  	jsr	SendSubCommand
0000BE7C                            
0000BE7C                            .NotPast:
0000BE7C 303C 006D                  	move.w	#$6D,d0
0000BE80 4EF8 61B2                  	jmp	SendSubCommand
0000BE84                            ; End of function ObjMonitorContents_GainInvinc
0000BE84                            
0000BE84                            ; -------------------------------------------------------------------------------
0000BE84 4E75                       	rts
0000BE86                            
0000BE86                            ; -------------------------------------------------------------------------------
0000BE86                            ; START	OF FUNCTION CHUNK FOR ObjMonitorContents_Main
0000BE86                            
0000BE86                            ObjMonitorContents_NotInvinc:
0000BE86 0C00 0004                  	cmpi.b	#4,d0
0000BE8A 6600                       	bne.s	.NotSpeedShoes
0000BE8C                            
0000BE8C                            .GainSpeedShoes:
0000BE8C 13FC 0001 00FF 1520        	move.b	#1,(v_speed_shoes).l
0000BE94 31FC 0528 D034             	move.w	#$528,(v_player+oPlayerSpeed).w
0000BE9A 31FC 0C00 F760             	move.w	#$C00,(v_sonic_top_speed).w
0000BEA0 31FC 0018 F762             	move.w	#$18,(v_sonic_acceleration).w
0000BEA6 31FC 0080 F764             	move.w	#$80,(v_sonic_deceleration).w
0000BEAC 303C 0084                  	move.w	#$84,d0 ; Play Speed Shoes Theme
0000BEB0 4EB8 2708                  	jsr	PlayFMSound
0000BEB4 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000BEBA 6600                       	bne.s	.NotPast
0000BEBC 303C 0082                  	move.w	#$82,d0
0000BEC0 4EB8 61B2                  	jsr	SendSubCommand
0000BEC4                            
0000BEC4                            .NotPast:
0000BEC4 303C 006C                  	move.w	#$6C,d0
0000BEC8 4EF8 61B2                  	jmp	SendSubCommand
0000BECC                            
0000BECC                            ; -------------------------------------------------------------------------------
0000BECC                            
0000BECC                            .NotSpeedShoes:
0000BECC 0C00 0005                  	cmpi.b	#5,d0
0000BED0 6600                       	bne.s	.NotTimeStop
0000BED2 33FC 012C 00FF 190E        	move.w	#300,(v_time_stop_timer).l
0000BEDA 4E75                       	rts
0000BEDC                            
0000BEDC                            ; -------------------------------------------------------------------------------
0000BEDC                            
0000BEDC                            .NotTimeStop:
0000BEDC 0C00 0006                  	cmpi.b	#6,d0
0000BEE0 6600                       	bne.s	.NotBlueRing
0000BEE2 303C 00E0                  	move.w	#$E0,d0 ; Time Stop
0000BEE6 4EB8 2708                  	jsr	PlayFMSound
0000BEEA 13FC 0001 00FF 156F        	move.b	#1,(v_blue_ring).l
0000BEF2 4E75                       	rts
0000BEF4                            
0000BEF4                            ; -------------------------------------------------------------------------------
0000BEF4                            
0000BEF4                            .NotBlueRing:
0000BEF4 6100 FF14                  	bsr.w	ObjMonitorContents_GainShield
0000BEF8 6100 FF2C                  	bsr.w	ObjMonitorContents_GainInvinc
0000BEFC 608E                       	bra.s	.GainSpeedShoes
0000BEFE                            ; END OF FUNCTION CHUNK	FOR ObjMonitorContents_Main
0000BEFE                            ; -------------------------------------------------------------------------------
0000BEFE                            
0000BEFE                            ObjMonitorContents_Destroy:
0000BEFE 5368 001E                  	subq.w	#1,oAnimTime(a0)
0000BF02 6B00 81BA                  	bmi.w	DeleteObject
0000BF06 4E75                       	rts
0000BF08                            ; End of function ObjMonitorContents_Destroy
0000BF08                            
0000BF08                            ; -------------------------------------------------------------------------------
0000BF08                            Ani_Monitor:
0000BF08                            	include	"level/objects/monitor/anim.asm"
0000BF08                            .Anim:
0000BF08 0000                       	dc.w	byte_20A9DA-.Anim
0000BF0A 0000                       	dc.w	byte_20A9E6-.Anim
0000BF0C 0000                       	dc.w	byte_20A9F2-.Anim
0000BF0E 0000                       	dc.w	byte_20A9FE-.Anim
0000BF10 0000                       	dc.w	byte_20AA0A-.Anim
0000BF12 0000                       	dc.w	byte_20AA16-.Anim
0000BF14 0000                       	dc.w	byte_20AA22-.Anim
0000BF16 0000                       	dc.w	byte_20AA2E-.Anim
0000BF18 0000                       	dc.w	byte_20AA3A-.Anim
0000BF1A 0000                       	dc.w	byte_20AA44-.Anim
0000BF1C 0110 0000 0800 0009 0000+  byte_20A9DA:	dc.b	1,	$10, 0,	0, 8, 0, 0, 9, 0, 0, $FF
0000BF27 00                         	dc.b	0
0000BF28 0110 0101 0801 0109 0101+  byte_20A9E6:	dc.b	1,	$10, 1,	1, 8, 1, 1, 9, 1, 1, $FF
0000BF33 00                         	dc.b	0
0000BF34 0110 0202 0802 0209 0202+  byte_20A9F2:	dc.b	1,	$10, 2,	2, 8, 2, 2, 9, 2, 2, $FF
0000BF3F 00                         	dc.b	0
0000BF40 0110 0303 0803 0309 0303+  byte_20A9FE:	dc.b	1,	$10, 3,	3, 8, 3, 3, 9, 3, 3, $FF
0000BF4B 00                         	dc.b	0
0000BF4C 0110 0404 0804 0409 0404+  byte_20AA0A:	dc.b	1,	$10, 4,	4, 8, 4, 4, 9, 4, 4, $FF
0000BF57 00                         	dc.b	0
0000BF58 0110 0505 0805 0509 0505+  byte_20AA16:	dc.b	1,	$10, 5,	5, 8, 5, 5, 9, 5, 5, $FF
0000BF63 00                         	dc.b	0
0000BF64 0110 0606 0806 0609 0606   byte_20AA22:	dc.b	1,	$10, 6,	6, 8, 6, 6, 9, 6, 6
0000BF6E FF                         	dc.b	$FF
0000BF6F 00                         	dc.b	0
0000BF70 0110 0707 0807 0709 0707+  byte_20AA2E:	dc.b	1,	$10, 7,	7, 8, 7, 7, 9, 7, 7, $FF
0000BF7B 00                         	dc.b	0
0000BF7C 010A 0E0F 0E0B 0E0F 0EFF   byte_20AA3A:	dc.b	1,	$A, $E,	$F, $E,	$B, $E,	$F, $E,	$FF
0000BF86 010C 0E0F 0E0D 0E0F 0EFF   byte_20AA44:	dc.b	1,	$C, $E,	$F, $E,	$D, $E,	$F, $E,	$FF
0000BF86 010C 0E0F 0E0D 0E0F 0EFF   byte_20AA44:	dc.b	1,	$C, $E,	$F, $E,	$D, $E,	$F, $E,	$FF
0000BF90                            	even
0000BF90                            MapSpr_MonitorTimePost:
0000BF90                            	include	"level/objects/monitor/map.asm"
0000BF90                            .Map:
0000BF90 0000                       	dc.w	unk_20AA76-.Map
0000BF92 0000                       	dc.w	unk_20AA8C-.Map
0000BF94 0000                       	dc.w	unk_20AAA2-.Map
0000BF96 0000                       	dc.w	unk_20AAB8-.Map
0000BF98 0000                       	dc.w	unk_20AACE-.Map
0000BF9A 0000                       	dc.w	unk_20AAE4-.Map
0000BF9C 0000                       	dc.w	unk_20AAFA-.Map
0000BF9E 0000                       	dc.w	unk_20AB10-.Map
0000BFA0 0000                       	dc.w	unk_20AB26-.Map
0000BFA2 0000                       	dc.w	unk_20AB3C-.Map
0000BFA4 0000                       	dc.w	unk_20AB52-.Map
0000BFA6 0000                       	dc.w	unk_20AB6C-.Map
0000BFA8 0000                       	dc.w	unk_20AB86-.Map
0000BFAA 0000                       	dc.w	unk_20ABA0-.Map
0000BFAC 0000                       	dc.w	unk_20ABBA-.Map
0000BFAE 0000                       	dc.w	unk_20ABD4-.Map
0000BFB0 0000                       	dc.w	unk_20ABEE-.Map
0000BFB2 0000                       	dc.w	unk_20ABFE-.Map
0000BFB4 0000                       	dc.w	unk_20AC04-.Map
0000BFB6 0000                       	dc.w	unk_20AC0A-.Map
0000BFB8 04                         unk_20AA76:	dc.b	  4
0000BFB9 F6                         	dc.b	$F6 ; ö
0000BFBA 05                         	dc.b	  5
0000BFBB 00                         	dc.b	  0
0000BFBC 12                         	dc.b	$12
0000BFBD F8                         	dc.b	$F8 ; ø
0000BFBE F0                         	dc.b	$F0 ; ð
0000BFBF 06                         	dc.b	  6
0000BFC0 00                         	dc.b	  0
0000BFC1 00                         	dc.b	  0
0000BFC2 F0                         	dc.b	$F0 ; ð
0000BFC3 F0                         	dc.b	$F0 ; ð
0000BFC4 06                         	dc.b	  6
0000BFC5 08                         	dc.b	  8
0000BFC6 00                         	dc.b	  0
0000BFC7 00                         	dc.b	  0
0000BFC8 08                         	dc.b	  8
0000BFC9 0C                         	dc.b	 $C
0000BFCA 00                         	dc.b	  0
0000BFCB 06                         	dc.b	  6
0000BFCC F0                         	dc.b	$F0 ; ð
0000BFCD 00                         	dc.b	  0
0000BFCE 04                         unk_20AA8C:	dc.b	  4
0000BFCF F6                         	dc.b	$F6 ; ö
0000BFD0 05                         	dc.b	  5
0000BFD1 00                         	dc.b	  0
0000BFD2 16                         	dc.b	$16
0000BFD3 F8                         	dc.b	$F8 ; ø
0000BFD4 F0                         	dc.b	$F0 ; ð
0000BFD5 06                         	dc.b	  6
0000BFD6 00                         	dc.b	  0
0000BFD7 00                         	dc.b	  0
0000BFD8 F0                         	dc.b	$F0 ; ð
0000BFD9 F0                         	dc.b	$F0 ; ð
0000BFDA 06                         	dc.b	  6
0000BFDB 08                         	dc.b	  8
0000BFDC 00                         	dc.b	  0
0000BFDD 00                         	dc.b	  0
0000BFDE 08                         	dc.b	  8
0000BFDF 0C                         	dc.b	 $C
0000BFE0 00                         	dc.b	  0
0000BFE1 06                         	dc.b	  6
0000BFE2 F0                         	dc.b	$F0 ; ð
0000BFE3 00                         	dc.b	  0
0000BFE4 04                         unk_20AAA2:	dc.b	  4
0000BFE5 F6                         	dc.b	$F6 ; ö
0000BFE6 05                         	dc.b	  5
0000BFE7 00                         	dc.b	  0
0000BFE8 1A                         	dc.b	$1A
0000BFE9 F8                         	dc.b	$F8 ; ø
0000BFEA F0                         	dc.b	$F0 ; ð
0000BFEB 06                         	dc.b	  6
0000BFEC 00                         	dc.b	  0
0000BFED 00                         	dc.b	  0
0000BFEE F0                         	dc.b	$F0 ; ð
0000BFEF F0                         	dc.b	$F0 ; ð
0000BFF0 06                         	dc.b	  6
0000BFF1 08                         	dc.b	  8
0000BFF2 00                         	dc.b	  0
0000BFF3 00                         	dc.b	  0
0000BFF4 08                         	dc.b	  8
0000BFF5 0C                         	dc.b	 $C
0000BFF6 00                         	dc.b	  0
0000BFF7 06                         	dc.b	  6
0000BFF8 F0                         	dc.b	$F0 ; ð
0000BFF9 00                         	dc.b	  0
0000BFFA 04                         unk_20AAB8:	dc.b	  4
0000BFFB F6                         	dc.b	$F6 ; ö
0000BFFC 05                         	dc.b	  5
0000BFFD 00                         	dc.b	  0
0000BFFE 1E                         	dc.b	$1E
0000BFFF F8                         	dc.b	$F8 ; ø
0000C000 F0                         	dc.b	$F0 ; ð
0000C001 06                         	dc.b	  6
0000C002 00                         	dc.b	  0
0000C003 00                         	dc.b	  0
0000C004 F0                         	dc.b	$F0 ; ð
0000C005 F0                         	dc.b	$F0 ; ð
0000C006 06                         	dc.b	  6
0000C007 08                         	dc.b	  8
0000C008 00                         	dc.b	  0
0000C009 00                         	dc.b	  0
0000C00A 08                         	dc.b	  8
0000C00B 0C                         	dc.b	 $C
0000C00C 00                         	dc.b	  0
0000C00D 06                         	dc.b	  6
0000C00E F0                         	dc.b	$F0 ; ð
0000C00F 00                         	dc.b	  0
0000C010 04                         unk_20AACE:	dc.b	  4
0000C011 F6                         	dc.b	$F6 ; ö
0000C012 05                         	dc.b	  5
0000C013 00                         	dc.b	  0
0000C014 22                         	dc.b	$22 ; "
0000C015 F8                         	dc.b	$F8 ; ø
0000C016 F0                         	dc.b	$F0 ; ð
0000C017 06                         	dc.b	  6
0000C018 00                         	dc.b	  0
0000C019 00                         	dc.b	  0
0000C01A F0                         	dc.b	$F0 ; ð
0000C01B F0                         	dc.b	$F0 ; ð
0000C01C 06                         	dc.b	  6
0000C01D 08                         	dc.b	  8
0000C01E 00                         	dc.b	  0
0000C01F 00                         	dc.b	  0
0000C020 08                         	dc.b	  8
0000C021 0C                         	dc.b	 $C
0000C022 00                         	dc.b	  0
0000C023 06                         	dc.b	  6
0000C024 F0                         	dc.b	$F0 ; ð
0000C025 00                         	dc.b	  0
0000C026 04                         unk_20AAE4:	dc.b	  4
0000C027 F6                         	dc.b	$F6 ; ö
0000C028 05                         	dc.b	  5
0000C029 00                         	dc.b	  0
0000C02A 26                         	dc.b	$26 ; &
0000C02B F8                         	dc.b	$F8 ; ø
0000C02C F0                         	dc.b	$F0 ; ð
0000C02D 06                         	dc.b	  6
0000C02E 00                         	dc.b	  0
0000C02F 00                         	dc.b	  0
0000C030 F0                         	dc.b	$F0 ; ð
0000C031 F0                         	dc.b	$F0 ; ð
0000C032 06                         	dc.b	  6
0000C033 08                         	dc.b	  8
0000C034 00                         	dc.b	  0
0000C035 00                         	dc.b	  0
0000C036 08                         	dc.b	  8
0000C037 0C                         	dc.b	 $C
0000C038 00                         	dc.b	  0
0000C039 06                         	dc.b	  6
0000C03A F0                         	dc.b	$F0 ; ð
0000C03B 00                         	dc.b	  0
0000C03C 04                         unk_20AAFA:	dc.b	  4
0000C03D F6                         	dc.b	$F6 ; ö
0000C03E 05                         	dc.b	  5
0000C03F 00                         	dc.b	  0
0000C040 2A                         	dc.b	$2A ; *
0000C041 F8                         	dc.b	$F8 ; ø
0000C042 F0                         	dc.b	$F0 ; ð
0000C043 06                         	dc.b	  6
0000C044 00                         	dc.b	  0
0000C045 00                         	dc.b	  0
0000C046 F0                         	dc.b	$F0 ; ð
0000C047 F0                         	dc.b	$F0 ; ð
0000C048 06                         	dc.b	  6
0000C049 08                         	dc.b	  8
0000C04A 00                         	dc.b	  0
0000C04B 00                         	dc.b	  0
0000C04C 08                         	dc.b	  8
0000C04D 0C                         	dc.b	 $C
0000C04E 00                         	dc.b	  0
0000C04F 06                         	dc.b	  6
0000C050 F0                         	dc.b	$F0 ; ð
0000C051 00                         	dc.b	  0
0000C052 04                         unk_20AB10:	dc.b	  4
0000C053 F6                         	dc.b	$F6 ; ö
0000C054 05                         	dc.b	  5
0000C055 00                         	dc.b	  0
0000C056 2E                         	dc.b	$2E ; .
0000C057 F8                         	dc.b	$F8 ; ø
0000C058 F0                         	dc.b	$F0 ; ð
0000C059 06                         	dc.b	  6
0000C05A 00                         	dc.b	  0
0000C05B 00                         	dc.b	  0
0000C05C F0                         	dc.b	$F0 ; ð
0000C05D F0                         	dc.b	$F0 ; ð
0000C05E 06                         	dc.b	  6
0000C05F 08                         	dc.b	  8
0000C060 00                         	dc.b	  0
0000C061 00                         	dc.b	  0
0000C062 08                         	dc.b	  8
0000C063 0C                         	dc.b	 $C
0000C064 00                         	dc.b	  0
0000C065 06                         	dc.b	  6
0000C066 F0                         	dc.b	$F0 ; ð
0000C067 00                         	dc.b	  0
0000C068 04                         unk_20AB26:	dc.b	  4
0000C069 F6                         	dc.b	$F6 ; ö
0000C06A 05                         	dc.b	  5
0000C06B 00                         	dc.b	  0
0000C06C 48                         	dc.b	$48 ; H
0000C06D F8                         	dc.b	$F8 ; ø
0000C06E F0                         	dc.b	$F0 ; ð
0000C06F 06                         	dc.b	  6
0000C070 00                         	dc.b	  0
0000C071 00                         	dc.b	  0
0000C072 F0                         	dc.b	$F0 ; ð
0000C073 F0                         	dc.b	$F0 ; ð
0000C074 06                         	dc.b	  6
0000C075 08                         	dc.b	  8
0000C076 00                         	dc.b	  0
0000C077 00                         	dc.b	  0
0000C078 08                         	dc.b	  8
0000C079 0C                         	dc.b	 $C
0000C07A 00                         	dc.b	  0
0000C07B 06                         	dc.b	  6
0000C07C F0                         	dc.b	$F0 ; ð
0000C07D 00                         	dc.b	  0
0000C07E 04                         unk_20AB3C:	dc.b	  4
0000C07F F6                         	dc.b	$F6 ; ö
0000C080 05                         	dc.b	  5
0000C081 08                         	dc.b	  8
0000C082 48                         	dc.b	$48 ; H
0000C083 F8                         	dc.b	$F8 ; ø
0000C084 F0                         	dc.b	$F0 ; ð
0000C085 06                         	dc.b	  6
0000C086 00                         	dc.b	  0
0000C087 00                         	dc.b	  0
0000C088 F0                         	dc.b	$F0 ; ð
0000C089 F0                         	dc.b	$F0 ; ð
0000C08A 06                         	dc.b	  6
0000C08B 08                         	dc.b	  8
0000C08C 00                         	dc.b	  0
0000C08D 00                         	dc.b	  0
0000C08E 08                         	dc.b	  8
0000C08F 0C                         	dc.b	 $C
0000C090 00                         	dc.b	  0
0000C091 06                         	dc.b	  6
0000C092 F0                         	dc.b	$F0 ; ð
0000C093 00                         	dc.b	  0
0000C094 05                         unk_20AB52:	dc.b	  5
0000C095 D8                         	dc.b	$D8 ; Ø
0000C096 0D                         	dc.b	 $D
0000C097 00                         	dc.b	  0
0000C098 32                         	dc.b	$32 ; 2
0000C099 F0                         	dc.b	$F0 ; ð
0000C09A E8                         	dc.b	$E8 ; è
0000C09B 03                         	dc.b	  3
0000C09C 00                         	dc.b	  0
0000C09D 4C                         	dc.b	$4C ; L
0000C09E F8                         	dc.b	$F8 ; ø
0000C09F E8                         	dc.b	$E8 ; è
0000C0A0 03                         	dc.b	  3
0000C0A1 08                         	dc.b	  8
0000C0A2 4C                         	dc.b	$4C ; L
0000C0A3 00                         	dc.b	  0
0000C0A4 08                         	dc.b	  8
0000C0A5 01                         	dc.b	  1
0000C0A6 00                         	dc.b	  0
0000C0A7 50                         	dc.b	$50 ; P
0000C0A8 F8                         	dc.b	$F8 ; ø
0000C0A9 08                         	dc.b	  8
0000C0AA 01                         	dc.b	  1
0000C0AB 08                         	dc.b	  8
0000C0AC 50                         	dc.b	$50 ; P
0000C0AD 00                         	dc.b	  0
0000C0AE 05                         unk_20AB6C:	dc.b	  5
0000C0AF D8                         	dc.b	$D8 ; Ø
0000C0B0 0D                         	dc.b	 $D
0000C0B1 08                         	dc.b	  8
0000C0B2 32                         	dc.b	$32 ; 2
0000C0B3 F0                         	dc.b	$F0 ; ð
0000C0B4 E8                         	dc.b	$E8 ; è
0000C0B5 03                         	dc.b	  3
0000C0B6 00                         	dc.b	  0
0000C0B7 4C                         	dc.b	$4C ; L
0000C0B8 F8                         	dc.b	$F8 ; ø
0000C0B9 E8                         	dc.b	$E8 ; è
0000C0BA 03                         	dc.b	  3
0000C0BB 08                         	dc.b	  8
0000C0BC 4C                         	dc.b	$4C ; L
0000C0BD 00                         	dc.b	  0
0000C0BE 08                         	dc.b	  8
0000C0BF 01                         	dc.b	  1
0000C0C0 00                         	dc.b	  0
0000C0C1 50                         	dc.b	$50 ; P
0000C0C2 F8                         	dc.b	$F8 ; ø
0000C0C3 08                         	dc.b	  8
0000C0C4 01                         	dc.b	  1
0000C0C5 08                         	dc.b	  8
0000C0C6 50                         	dc.b	$50 ; P
0000C0C7 00                         	dc.b	  0
0000C0C8 05                         unk_20AB86:	dc.b	  5
0000C0C9 D8                         	dc.b	$D8 ; Ø
0000C0CA 0D                         	dc.b	 $D
0000C0CB 00                         	dc.b	  0
0000C0CC 3A                         	dc.b	$3A ; :
0000C0CD F0                         	dc.b	$F0 ; ð
0000C0CE E8                         	dc.b	$E8 ; è
0000C0CF 03                         	dc.b	  3
0000C0D0 00                         	dc.b	  0
0000C0D1 4C                         	dc.b	$4C ; L
0000C0D2 F8                         	dc.b	$F8 ; ø
0000C0D3 E8                         	dc.b	$E8 ; è
0000C0D4 03                         	dc.b	  3
0000C0D5 08                         	dc.b	  8
0000C0D6 4C                         	dc.b	$4C ; L
0000C0D7 00                         	dc.b	  0
0000C0D8 08                         	dc.b	  8
0000C0D9 01                         	dc.b	  1
0000C0DA 00                         	dc.b	  0
0000C0DB 50                         	dc.b	$50 ; P
0000C0DC F8                         	dc.b	$F8 ; ø
0000C0DD 08                         	dc.b	  8
0000C0DE 01                         	dc.b	  1
0000C0DF 08                         	dc.b	  8
0000C0E0 50                         	dc.b	$50 ; P
0000C0E1 00                         	dc.b	  0
0000C0E2 05                         unk_20ABA0:	dc.b	  5
0000C0E3 D8                         	dc.b	$D8 ; Ø
0000C0E4 0D                         	dc.b	 $D
0000C0E5 08                         	dc.b	  8
0000C0E6 3A                         	dc.b	$3A ; :
0000C0E7 F0                         	dc.b	$F0 ; ð
0000C0E8 E8                         	dc.b	$E8 ; è
0000C0E9 03                         	dc.b	  3
0000C0EA 00                         	dc.b	  0
0000C0EB 4C                         	dc.b	$4C ; L
0000C0EC F8                         	dc.b	$F8 ; ø
0000C0ED E8                         	dc.b	$E8 ; è
0000C0EE 03                         	dc.b	  3
0000C0EF 08                         	dc.b	  8
0000C0F0 4C                         	dc.b	$4C ; L
0000C0F1 00                         	dc.b	  0
0000C0F2 08                         	dc.b	  8
0000C0F3 01                         	dc.b	  1
0000C0F4 00                         	dc.b	  0
0000C0F5 50                         	dc.b	$50 ; P
0000C0F6 F8                         	dc.b	$F8 ; ø
0000C0F7 08                         	dc.b	  8
0000C0F8 01                         	dc.b	  1
0000C0F9 08                         	dc.b	  8
0000C0FA 50                         	dc.b	$50 ; P
0000C0FB 00                         	dc.b	  0
0000C0FC 05                         unk_20ABBA:	dc.b	  5
0000C0FD D8                         	dc.b	$D8 ; Ø
0000C0FE 05                         	dc.b	  5
0000C0FF 00                         	dc.b	  0
0000C100 42                         	dc.b	$42 ; B
0000C101 F8                         	dc.b	$F8 ; ø
0000C102 E8                         	dc.b	$E8 ; è
0000C103 03                         	dc.b	  3
0000C104 00                         	dc.b	  0
0000C105 4C                         	dc.b	$4C ; L
0000C106 F8                         	dc.b	$F8 ; ø
0000C107 E8                         	dc.b	$E8 ; è
0000C108 03                         	dc.b	  3
0000C109 08                         	dc.b	  8
0000C10A 4C                         	dc.b	$4C ; L
0000C10B 00                         	dc.b	  0
0000C10C 08                         	dc.b	  8
0000C10D 01                         	dc.b	  1
0000C10E 00                         	dc.b	  0
0000C10F 50                         	dc.b	$50 ; P
0000C110 F8                         	dc.b	$F8 ; ø
0000C111 08                         	dc.b	  8
0000C112 01                         	dc.b	  1
0000C113 08                         	dc.b	  8
0000C114 50                         	dc.b	$50 ; P
0000C115 00                         	dc.b	  0
0000C116 05                         unk_20ABD4:	dc.b	  5
0000C117 D8                         	dc.b	$D8 ; Ø
0000C118 01                         	dc.b	  1
0000C119 00                         	dc.b	  0
0000C11A 46                         	dc.b	$46 ; F
0000C11B FC                         	dc.b	$FC ; ü
0000C11C E8                         	dc.b	$E8 ; è
0000C11D 03                         	dc.b	  3
0000C11E 00                         	dc.b	  0
0000C11F 4C                         	dc.b	$4C ; L
0000C120 F8                         	dc.b	$F8 ; ø
0000C121 E8                         	dc.b	$E8 ; è
0000C122 03                         	dc.b	  3
0000C123 08                         	dc.b	  8
0000C124 4C                         	dc.b	$4C ; L
0000C125 00                         	dc.b	  0
0000C126 08                         	dc.b	  8
0000C127 01                         	dc.b	  1
0000C128 00                         	dc.b	  0
0000C129 50                         	dc.b	$50 ; P
0000C12A F8                         	dc.b	$F8 ; ø
0000C12B 08                         	dc.b	  8
0000C12C 01                         	dc.b	  1
0000C12D 08                         	dc.b	  8
0000C12E 50                         	dc.b	$50 ; P
0000C12F 00                         	dc.b	  0
0000C130 03                         unk_20ABEE:	dc.b	  3
0000C131 F0                         	dc.b	$F0 ; ð
0000C132 06                         	dc.b	  6
0000C133 00                         	dc.b	  0
0000C134 00                         	dc.b	  0
0000C135 F0                         	dc.b	$F0 ; ð
0000C136 F0                         	dc.b	$F0 ; ð
0000C137 06                         	dc.b	  6
0000C138 08                         	dc.b	  8
0000C139 00                         	dc.b	  0
0000C13A 00                         	dc.b	  0
0000C13B 08                         	dc.b	  8
0000C13C 0C                         	dc.b	 $C
0000C13D 00                         	dc.b	  0
0000C13E 06                         	dc.b	  6
0000C13F F0                         	dc.b	$F0 ; ð
0000C140 01                         unk_20ABFE:	dc.b	  1
0000C141 00                         	dc.b	  0
0000C142 0D                         	dc.b	 $D
0000C143 00                         	dc.b	  0
0000C144 0A                         	dc.b	 $A
0000C145 F0                         	dc.b	$F0 ; ð
0000C146 01                         unk_20AC04:	dc.b	  1
0000C147 F8                         	dc.b	$F8 ; ø
0000C148 0D                         	dc.b	 $D
0000C149 00                         	dc.b	  0
0000C14A 32                         	dc.b	$32 ; 2
0000C14B F0                         	dc.b	$F0 ; ð
0000C14C 01                         unk_20AC0A:	dc.b	  1
0000C14D F8                         	dc.b	$F8 ; ø
0000C14E 0D                         	dc.b	 $D
0000C14F 00                         	dc.b	  0
0000C150 3A                         	dc.b	$3A ; :
0000C151 F0                         	dc.b	$F0 ; ð
0000C151 F0                         	dc.b	$F0 ; ð
0000C152                            	even
0000C152                            ; -------------------------------------------------------------------------------
0000C152                            
0000C152                            ObjPoints:
0000C152 7000                       	moveq	#0,d0
0000C154 1028 0024                  	move.b	oRoutine(a0),d0
0000C158 303B 0000                  	move.w	ObjPoints_Index(pc,d0.w),d0
0000C15C 4EBB 0000                  	jsr	ObjPoints_Index(pc,d0.w)
0000C160 4EF8 4012                  	jmp	DrawObject
0000C164                            ; End of function ObjPoints
0000C164                            
0000C164                            ; -------------------------------------------------------------------------------
0000C164 0000                       ObjPoints_Index:dc.w	ObjPoints_Init-ObjPoints_Index
0000C166 0000                       	dc.w	ObjPoints_Main-ObjPoints_Index
0000C168                            ; -------------------------------------------------------------------------------
0000C168                            
0000C168                            ObjPoints_Init:
0000C168 5428 0024                  	addq.b	#2,oRoutine(a0)
0000C16C 0028 0004 0001             	ori.b	#4,oRender(a0)
0000C172 317C 06C6 0002             	move.w	#$6C6,oTile(a0)
0000C178 217C 0000 0000 0004        	move.l	#MapSpr_Points,oMap(a0)
0000C180 1168 0028 001A             	move.b	oSubtype(a0),oMapFrame(a0)
0000C186 0228 007F 001A             	andi.b	#$7F,oMapFrame(a0)
0000C18C 117C 0018 002A             	move.b	#$18,oVar2A(a0)
0000C192                            ; End of function ObjPoints_Init
0000C192                            
0000C192                            ; -------------------------------------------------------------------------------
0000C192                            
0000C192                            ObjPoints_Main:
0000C192 5328 002A                  	subq.b	#1,oVar2A(a0)
0000C196 6600                       	bne.s	.Rise
0000C198 4EF8 40BE                  	jmp	DeleteObject
0000C19C                            
0000C19C                            ; -------------------------------------------------------------------------------
0000C19C                            
0000C19C                            .Rise:
0000C19C 5568 000C                  	subq.w	#2,oY(a0)
0000C1A0 4E75                       	rts
0000C1A2                            ; End of function ObjPoints_Main
0000C1A2                            
0000C1A2                            ; -------------------------------------------------------------------------------
0000C1A2                            MapSpr_Points:
0000C1A2                            	include	"level/objects/points/map.asm"
0000C1A2                            .Map:
0000C1A2 0000                       	dc.w	unk_20AC70-MapSpr_Points
0000C1A4 0000                       	dc.w	unk_20AC7C-MapSpr_Points
0000C1A6 0000                       	dc.w	unk_20AC88-MapSpr_Points
0000C1A8 0000                       	dc.w	unk_20AC94-MapSpr_Points
0000C1AA 0000                       	dc.w	unk_20ACA0-MapSpr_Points
0000C1AC 0000                       	dc.w	unk_20ACA6-MapSpr_Points
0000C1AE 02                         unk_20AC70:	dc.b	  2
0000C1AF 00                         	dc.b	  0
0000C1B0 00                         	dc.b	  0
0000C1B1 00                         	dc.b	  0
0000C1B2 00                         	dc.b	  0
0000C1B3 F8                         	dc.b	$F8 ; ø
0000C1B4 00                         	dc.b	  0
0000C1B5 00                         	dc.b	  0
0000C1B6 00                         	dc.b	  0
0000C1B7 03                         	dc.b	  3
0000C1B8 00                         	dc.b	  0
0000C1B9 00                         	dc.b	  0
0000C1BA 02                         unk_20AC7C:	dc.b	  2
0000C1BB 00                         	dc.b	  0
0000C1BC 00                         	dc.b	  0
0000C1BD 00                         	dc.b	  0
0000C1BE 01                         	dc.b	  1
0000C1BF F8                         	dc.b	$F8 ; ø
0000C1C0 00                         	dc.b	  0
0000C1C1 00                         	dc.b	  0
0000C1C2 00                         	dc.b	  0
0000C1C3 03                         	dc.b	  3
0000C1C4 00                         	dc.b	  0
0000C1C5 00                         	dc.b	  0
0000C1C6 02                         unk_20AC88:	dc.b	  2
0000C1C7 00                         	dc.b	  0
0000C1C8 00                         	dc.b	  0
0000C1C9 00                         	dc.b	  0
0000C1CA 02                         	dc.b	  2
0000C1CB F8                         	dc.b	$F8 ; ø
0000C1CC 00                         	dc.b	  0
0000C1CD 00                         	dc.b	  0
0000C1CE 00                         	dc.b	  0
0000C1CF 03                         	dc.b	  3
0000C1D0 00                         	dc.b	  0
0000C1D1 00                         	dc.b	  0
0000C1D2 02                         unk_20AC94:	dc.b	  2
0000C1D3 00                         	dc.b	  0
0000C1D4 00                         	dc.b	  0
0000C1D5 00                         	dc.b	  0
0000C1D6 04                         	dc.b	  4
0000C1D7 F8                         	dc.b	$F8 ; ø
0000C1D8 00                         	dc.b	  0
0000C1D9 00                         	dc.b	  0
0000C1DA 00                         	dc.b	  0
0000C1DB 03                         	dc.b	  3
0000C1DC 00                         	dc.b	  0
0000C1DD 00                         	dc.b	  0
0000C1DE 01                         unk_20ACA0:	dc.b	  1
0000C1DF 00                         	dc.b	  0
0000C1E0 00                         	dc.b	  0
0000C1E1 00                         	dc.b	  0
0000C1E2 04                         	dc.b	  4
0000C1E3 FC                         	dc.b	$FC ; ü
0000C1E4 03                         unk_20ACA6:	dc.b	  3
0000C1E5 00                         	dc.b	  0
0000C1E6 00                         	dc.b	  0
0000C1E7 00                         	dc.b	  0
0000C1E8 00                         	dc.b	  0
0000C1E9 F4                         	dc.b	$F4 ; ô
0000C1EA 00                         	dc.b	  0
0000C1EB 00                         	dc.b	  0
0000C1EC 00                         	dc.b	  0
0000C1ED 03                         	dc.b	  3
0000C1EE FC                         	dc.b	$FC ; ü
0000C1EF 00                         	dc.b	  0
0000C1F0 00                         	dc.b	  0
0000C1F1 00                         	dc.b	  0
0000C1F2 03                         	dc.b	  3
0000C1F3 04                         	dc.b	  4
0000C1F3 04                         	dc.b	  4
0000C1F4                            	even
0000C1F4                            ; -------------------------------------------------------------------------------
0000C1F4                            
0000C1F4                            ObjHUD_Points:
0000C1F4 4A28 0028                  	tst.b	oSubtype(a0)
0000C1F8 6B00 FF58                  	bmi.w	ObjPoints
0000C1FC                            
0000C1FC                            ObjHUD:
0000C1FC 7000                       	moveq	#0,d0
0000C1FE 1028 0024                  	move.b	oRoutine(a0),d0
0000C202 303B 0000                  	move.w	ObjHUD_Index(pc,d0.w),d0
0000C206 4EFB 0000                  	jmp	ObjHUD_Index(pc,d0.w)
0000C20A                            ; End of function ObjHUD_Points
0000C20A                            
0000C20A                            ; -------------------------------------------------------------------------------
0000C20A 0000                       ObjHUD_Index:	dc.w	ObjHUD_Init-ObjHUD_Index
0000C20C 0000                       	dc.w	ObjHUD_Main-ObjHUD_Index
0000C20E                            ; -------------------------------------------------------------------------------
0000C20E                            
0000C20E                            ObjHUD_Init:
0000C20E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000C212 217C 0000 0000 0004        	move.l	#MapSpr_HUD,oMap(a0)
0000C21A 317C 8568 0002             	move.w	#$8568,oTile(a0)
0000C220 317C 0090 0008             	move.w	#$90,oX(a0)
0000C226 317C 0088 000A             	move.w	#$88,oYScr(a0)
0000C22C 4A28 0029                  	tst.b	oSubtype2(a0)
0000C230 6700                       	beq.s	.NotRings
0000C232 117C 0003 001A             	move.b	#3,oMapFrame(a0)
0000C238 6000                       	bra.s	ObjHUD_Main
0000C23A                            
0000C23A                            ; -------------------------------------------------------------------------------
0000C23A                            
0000C23A                            .NotRings:
0000C23A 4A79 00FF 1588             	tst.w	(v_debug_mode_enabled).l
0000C240 6700                       	beq.s	.NoDebug
0000C242 117C 0002 001A             	move.b	#2,oMapFrame(a0)
0000C248                            
0000C248                            .NoDebug:
0000C248 4A28 0028                  	tst.b	oSubtype(a0)
0000C24C 6700                       	beq.s	ObjHUD_Main
0000C24E 317C 0148 000A             	move.w	#$148,oYScr(a0)
0000C254 117C 0001 001A             	move.b	#1,oMapFrame(a0)
0000C25A                            ; End of function ObjHUD_Init
0000C25A                            
0000C25A                            ; -------------------------------------------------------------------------------
0000C25A                            
0000C25A                            ObjHUD_Main:
0000C25A 4A28 0028                  	tst.b	oSubtype(a0)
0000C25E 6600                       	bne.s	.Display
0000C260 4A28 0029                  	tst.b	oSubtype2(a0)
0000C264 6700                       	beq.s	.ChkDebug
0000C266 4A79 00FF 1512             	tst.w	(v_ring_count).l
0000C26C 6700                       	beq.s	.ChkFlashRings
0000C26E 08A8 0005 0002             	bclr	#5,oTile(a0)
0000C274 6000                       	bra.s	.Display
0000C276                            
0000C276                            ; -------------------------------------------------------------------------------
0000C276                            
0000C276                            .ChkFlashRings:
0000C276 1039 00FF 190D             	move.b	(v_frame_count+3).l,d0
0000C27C 0200 000F                  	andi.b	#$F,d0
0000C280 6600                       	bne.s	.Display
0000C282 0A28 0020 0002             	eori.b	#$20,oTile(a0)
0000C288 6000                       	bra.s	.Display
0000C28A                            
0000C28A                            ; -------------------------------------------------------------------------------
0000C28A                            
0000C28A                            .ChkDebug:
0000C28A 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000C290 4A79 00FF 1588             	tst.w	(v_debug_mode_enabled).l
0000C296 6700                       	beq.s	.Display
0000C298 117C 0002 001A             	move.b	#2,oMapFrame(a0)
0000C29E                            
0000C29E                            .Display:
0000C29E 4EF8 4012                  	jmp	DrawObject
0000C2A2                            ; End of function ObjHUD_Main
0000C2A2                            
0000C2A2                            ; -------------------------------------------------------------------------------
0000C2A2                            MapSpr_HUD:
0000C2A2                            	include	"level/objects/hud/map.asm"
0000C2A2                            .Map:
0000C2A2 0000                       	dc.w	unk_20AD6E-.Map
0000C2A4 0000                       	dc.w	unk_20ADB6-.Map
0000C2A6 0000                       	dc.w	unk_20ADC6-.Map
0000C2A8 0000                       	dc.w	unk_20ADFE-.Map
0000C2AA 0E                         unk_20AD6E:	dc.b	 $E
0000C2AB 00                         	dc.b	  0
0000C2AC 01                         	dc.b	  1
0000C2AD 00                         	dc.b	  0
0000C2AE 00                         	dc.b	  0
0000C2AF 00                         	dc.b	  0
0000C2B0 00                         	dc.b	  0
0000C2B1 05                         	dc.b	  5
0000C2B2 00                         	dc.b	  0
0000C2B3 02                         	dc.b	  2
0000C2B4 08                         	dc.b	  8
0000C2B5 00                         	dc.b	  0
0000C2B6 01                         	dc.b	  1
0000C2B7 00                         	dc.b	  0
0000C2B8 06                         	dc.b	  6
0000C2B9 18                         	dc.b	$18
0000C2BA 00                         	dc.b	  0
0000C2BB 01                         	dc.b	  1
0000C2BC 00                         	dc.b	  0
0000C2BD 08                         	dc.b	  8
0000C2BE 20                         	dc.b	$20
0000C2BF 00                         	dc.b	  0
0000C2C0 09                         	dc.b	  9
0000C2C1 00                         	dc.b	  0
0000C2C2 1B                         	dc.b	$1B
0000C2C3 28                         	dc.b	$28 ; (
0000C2C4 00                         	dc.b	  0
0000C2C5 0D                         	dc.b	 $D
0000C2C6 00                         	dc.b	  0
0000C2C7 21                         	dc.b	$21 ; !
0000C2C8 40                         	dc.b	$40 ; .
0000C2C9 10                         	dc.b	$10
0000C2CA 09                         	dc.b	  9
0000C2CB 00                         	dc.b	  0
0000C2CC 0A                         	dc.b	 $A
0000C2CD 00                         	dc.b	  0
0000C2CE 10                         	dc.b	$10
0000C2CF 01                         	dc.b	  1
0000C2D0 00                         	dc.b	  0
0000C2D1 08                         	dc.b	  8
0000C2D2 18                         	dc.b	$18
0000C2D3 10                         	dc.b	$10
0000C2D4 01                         	dc.b	  1
0000C2D5 00                         	dc.b	  0
0000C2D6 29                         	dc.b	$29 ; )
0000C2D7 28                         	dc.b	$28 ; (
0000C2D8 10                         	dc.b	$10
0000C2D9 00                         	dc.b	  0
0000C2DA 00                         	dc.b	  0
0000C2DB 18                         	dc.b	$18
0000C2DC 30                         	dc.b	$30 ; 0
0000C2DD 10                         	dc.b	$10
0000C2DE 05                         	dc.b	  5
0000C2DF 00                         	dc.b	  0
0000C2E0 2B                         	dc.b	$2B ; +
0000C2E1 38                         	dc.b	$38 ; 8
0000C2E2 10                         	dc.b	$10
0000C2E3 00                         	dc.b	  0
0000C2E4 00                         	dc.b	  0
0000C2E5 19                         	dc.b	$19
0000C2E6 48                         	dc.b	$48 ; H
0000C2E7 10                         	dc.b	$10
0000C2E8 05                         	dc.b	  5
0000C2E9 00                         	dc.b	  0
0000C2EA 2F                         	dc.b	$2F ; /
0000C2EB 50                         	dc.b	$50 ; P
0000C2EC 20                         	dc.b	$20
0000C2ED 09                         	dc.b	  9
0000C2EE 00                         	dc.b	  0
0000C2EF 33                         	dc.b	$33 ; 3
0000C2F0 30                         	dc.b	$30 ; 0
0000C2F1 00                         	dc.b	  0
0000C2F2 03                         unk_20ADB6:	dc.b	  3
0000C2F3 00                         	dc.b	  0
0000C2F4 05                         	dc.b	  5
0000C2F5 00                         	dc.b	  0
0000C2F6 39                         	dc.b	$39 ; 9
0000C2F7 00                         	dc.b	  0
0000C2F8 08                         	dc.b	  8
0000C2F9 00                         	dc.b	  0
0000C2FA 00                         	dc.b	  0
0000C2FB 1A                         	dc.b	$1A
0000C2FC 10                         	dc.b	$10
0000C2FD 04                         	dc.b	  4
0000C2FE 01                         	dc.b	  1
0000C2FF 00                         	dc.b	  0
0000C300 3D                         	dc.b	$3D ; =
0000C301 18                         	dc.b	$18
0000C302 0B                         unk_20ADC6:	dc.b	 $B
0000C303 00                         	dc.b	  0
0000C304 01                         	dc.b	  1
0000C305 00                         	dc.b	  0
0000C306 00                         	dc.b	  0
0000C307 00                         	dc.b	  0
0000C308 00                         	dc.b	  0
0000C309 05                         	dc.b	  5
0000C30A 00                         	dc.b	  0
0000C30B 02                         	dc.b	  2
0000C30C 08                         	dc.b	  8
0000C30D 00                         	dc.b	  0
0000C30E 01                         	dc.b	  1
0000C30F 00                         	dc.b	  0
0000C310 06                         	dc.b	  6
0000C311 18                         	dc.b	$18
0000C312 00                         	dc.b	  0
0000C313 01                         	dc.b	  1
0000C314 00                         	dc.b	  0
0000C315 08                         	dc.b	  8
0000C316 20                         	dc.b	$20
0000C317 00                         	dc.b	  0
0000C318 09                         	dc.b	  9
0000C319 00                         	dc.b	  0
0000C31A 1B                         	dc.b	$1B
0000C31B 28                         	dc.b	$28 ; (
0000C31C 00                         	dc.b	  0
0000C31D 09                         	dc.b	  9
0000C31E 00                         	dc.b	  0
0000C31F 21                         	dc.b	$21 ; !
0000C320 40                         	dc.b	$40 ; .
0000C321 10                         	dc.b	$10
0000C322 09                         	dc.b	  9
0000C323 00                         	dc.b	  0
0000C324 0A                         	dc.b	 $A
0000C325 00                         	dc.b	  0
0000C326 10                         	dc.b	$10
0000C327 01                         	dc.b	  1
0000C328 00                         	dc.b	  0
0000C329 08                         	dc.b	  8
0000C32A 18                         	dc.b	$18
0000C32B 10                         	dc.b	$10
0000C32C 05                         	dc.b	  5
0000C32D 00                         	dc.b	  0
0000C32E 2B                         	dc.b	$2B ; +
0000C32F 38                         	dc.b	$38 ; 8
0000C330 10                         	dc.b	$10
0000C331 05                         	dc.b	  5
0000C332 00                         	dc.b	  0
0000C333 2F                         	dc.b	$2F ; /
0000C334 48                         	dc.b	$48 ; H
0000C335 20                         	dc.b	$20
0000C336 09                         	dc.b	  9
0000C337 00                         	dc.b	  0
0000C338 33                         	dc.b	$33 ; 3
0000C339 30                         	dc.b	$30 ; 0
0000C33A 03                         unk_20ADFE:	dc.b	  3
0000C33B 20                         	dc.b	$20
0000C33C 01                         	dc.b	  1
0000C33D 00                         	dc.b	  0
0000C33E 10                         	dc.b	$10
0000C33F 00                         	dc.b	  0
0000C340 20                         	dc.b	$20
0000C341 09                         	dc.b	  9
0000C342 00                         	dc.b	  0
0000C343 12                         	dc.b	$12
0000C344 08                         	dc.b	  8
0000C345 20                         	dc.b	$20
0000C346 01                         	dc.b	  1
0000C347 00                         	dc.b	  0
0000C348 00                         	dc.b	  0
0000C349 20                         	dc.b	$20
0000C349 20                         	dc.b	$20
0000C34A                            	even
0000C34A                            ; -------------------------------------------------------------------------------
0000C34A                            
0000C34A                            AddPoints:
0000C34A 13FC 0001 00FF 1511        	move.b	#1,(v_update_score).l
0000C352 47F9 00FF 1518             	lea	(v_score).l,a3
0000C358 D193                       	add.l	d0,(a3)
0000C35A 223C 000F 423F             	move.l	#999999,d1
0000C360 B293                       	cmp.l	(a3),d1
0000C362 6200                       	bhi.s	.CappedScore
0000C364 2681                       	move.l	d1,(a3)
0000C366                            
0000C366                            .CappedScore:
0000C366 2013                       	move.l	(a3),d0
0000C368 B0B9 00FF 1578             	cmp.l	(v_next_score_1up).l,d0
0000C36E 6500                       	bcs.s	.End
0000C370 06B9 0000 1388 00FF 1578   	addi.l	#5000,(v_next_score_1up).l
0000C37A 5239 00FF 1508             	addq.b	#1,(v_life_count).l
0000C380 5239 00FF 150E             	addq.b	#1,(v_update_lives).l
0000C386 303C 007A                  	move.w	#$7A,d0
0000C38A 4EF8 61B2                  	jmp	SendSubCommand
0000C38E                            
0000C38E                            ; -------------------------------------------------------------------------------
0000C38E                            
0000C38E                            .End:
0000C38E 4E75                       	rts
0000C390                            ; End of function AddPoints
0000C390                            
0000C390                            ; -------------------------------------------------------------------------------
0000C390                            ; START	OF FUNCTION CHUNK FOR VInt_Pause
0000C390                            
0000C390                            UpdateHUD:
0000C390 4A79 00FF 1588             	tst.w	(v_debug_mode_enabled).l
0000C396 6700                       	beq.s	.NormalHUD
0000C398 6100 0000                  	bsr.w	HudDb_XY
0000C39C 203C 7360 0002             	move.l	#$73600002,d0
0000C3A2 7200                       	moveq	#0,d1
0000C3A4 1239 00FF 1200             	move.b	(v_obj_respawns).l,d1
0000C3AA 3438 D00C                  	move.w	(v_player+oY).w,d2
0000C3AE E24A                       	lsr.w	#1,d2
0000C3B0 0242 0380                  	andi.w	#$380,d2
0000C3B4 1238 D008                  	move.b	(v_player+oX).w,d1
0000C3B8 0241 007F                  	andi.w	#$7F,d1
0000C3BC D441                       	add.w	d1,d2
0000C3BE 43F8 A000                  	lea	(v_lvl_layout).w,a1
0000C3C2 7200                       	moveq	#0,d1
0000C3C4 1231 2000                  	move.b	(a1,d2.w),d1
0000C3C8 0241 007F                  	andi.w	#$7F,d1
0000C3CC 3239 00FF 194E             	move.w	(v_debug_block).l,d1
0000C3D2 0241 07FF                  	andi.w	#$7FF,d1
0000C3D6 45F9 0000 0000             	lea	(Hud_100).l,a2
0000C3DC 7C02                       	moveq	#2,d6
0000C3DE 6100 0000                  	bsr.w	Hud_Digits
0000C3E2 6000 0000                  	bra.w	.ChkTime
0000C3E6                            
0000C3E6                            ; -------------------------------------------------------------------------------
0000C3E6                            
0000C3E6                            .NormalHUD:
0000C3E6 4A39 00FF 1511             	tst.b	(v_update_score).l
0000C3EC 6700                       	beq.s	.ChkRings
0000C3EE 6A00                       	bpl.s	.UpdateScore
0000C3F0 6100 0000                  	bsr.w	Hud_Base
0000C3F4                            
0000C3F4                            .UpdateScore:
0000C3F4 4239 00FF 1511             	clr.b	(v_update_score).l
0000C3FA 203C 7060 0002             	move.l	#$70600002,d0
0000C400 2239 00FF 1518             	move.l	(v_score).l,d1
0000C406 6100 0000                  	bsr.w	Hud_Score
0000C40A                            
0000C40A                            .ChkRings:
0000C40A 4A39 00FF 150F             	tst.b	(v_update_rings).l
0000C410 6700                       	beq.s	.ChkTime
0000C412 6A00                       	bpl.s	.UpdateRings
0000C414 6100 0000                  	bsr.w	Hud_InitRings
0000C418                            
0000C418                            .UpdateRings:
0000C418 4239 00FF 150F             	clr.b	(v_update_rings).l
0000C41E 203C 7360 0002             	move.l	#$73600002,d0
0000C424 7200                       	moveq	#0,d1
0000C426 3239 00FF 1512             	move.w	(v_ring_count).l,d1
0000C42C 0C41 03E8                  	cmpi.w	#1000,d1
0000C430 6500                       	bcs.s	.CappedRings
0000C432 323C 03E7                  	move.w	#999,d1
0000C436 33C1 00FF 1512             	move.w	d1,(v_ring_count).l
0000C43C                            
0000C43C                            .CappedRings:
0000C43C 6100 0000                  	bsr.w	Hud_Rings
0000C440                            
0000C440                            .ChkTime:
0000C440 4A79 00FF 1588             	tst.w	(v_debug_mode_enabled).l
0000C446 6600 0000                  	bne.w	.ChkLives
0000C44A 4A39 00FF 1510             	tst.b	(v_update_time).l
0000C450 6700 0000                  	beq.w	.ChkLives
0000C454 4A78 F63A                  	tst.w	(v_paused).w
0000C458 6600 0000                  	bne.w	.ChkLives
0000C45C 43F9 00FF 1514             	lea	(v_time).l,a1
0000C462 0C99 0009 3B3B             	cmpi.l	#$93B3B,(a1)+
0000C468 6700 0000                  	beq.w	TimeOver
0000C46C 4A38 F7CC                  	tst.b	(v_ctrl_locked).w
0000C470 6600                       	bne.s	.UpdateTimer
0000C472 5221                       	addq.b	#1,-(a1)
0000C474 0C11 003C                  	cmpi.b	#60,(a1)
0000C478 6500                       	bcs.s	.UpdateTimer
0000C47A 12BC 0000                  	move.b	#0,(a1)
0000C47E 5221                       	addq.b	#1,-(a1)
0000C480 0C11 003C                  	cmpi.b	#60,(a1)
0000C484 6500                       	bcs.s	.UpdateTimer
0000C486 12BC 0000                  	move.b	#0,(a1)
0000C48A 5221                       	addq.b	#1,-(a1)
0000C48C 0C11 0009                  	cmpi.b	#9,(a1)
0000C490 6500                       	bcs.s	.UpdateTimer
0000C492 12BC 0009                  	move.b	#9,(a1)
0000C496                            
0000C496                            .UpdateTimer:
0000C496 203C 7220 0002             	move.l	#$72200002,d0
0000C49C 7200                       	moveq	#0,d1
0000C49E 1239 00FF 1515             	move.b	(v_time+1).l,d1
0000C4A4 6100 0000                  	bsr.w	Hud_Mins
0000C4A8 203C 7260 0002             	move.l	#$72600002,d0
0000C4AE 7200                       	moveq	#0,d1
0000C4B0 1239 00FF 1516             	move.b	(v_time+2).l,d1
0000C4B6 6100 0000                  	bsr.w	Hud_SecsCentisecs
0000C4BA 203C 72E0 0002             	move.l	#$72E00002,d0
0000C4C0 7200                       	moveq	#0,d1
0000C4C2 1239 00FF 1517             	move.b	(v_time+3).l,d1
0000C4C8 C2FC 0064                  	mulu.w	#100,d1
0000C4CC 82FC 003C                  	divu.w	#60,d1
0000C4D0 4841                       	swap	d1
0000C4D2 323C 0000                  	move.w	#0,d1
0000C4D6 4841                       	swap	d1
0000C4D8 0CB9 0009 3B3B 00FF 1514   	cmpi.l	#$93B3B,(v_time).l
0000C4E2 6600                       	bne.s	.UpdateCentisecs
0000C4E4 323C 0063                  	move.w	#99,d1
0000C4E8                            
0000C4E8                            .UpdateCentisecs:
0000C4E8 6100 0000                  	bsr.w	Hud_SecsCentisecs
0000C4EC                            
0000C4EC                            .ChkLives:
0000C4EC 4A39 00FF 150E             	tst.b	(v_update_lives).l
0000C4F2 6700                       	beq.s	.ChkBonus
0000C4F4 4239 00FF 150E             	clr.b	(v_update_lives).l
0000C4FA 6100 0000                  	bsr.w	Hud_Lives
0000C4FE                            
0000C4FE                            .ChkBonus:
0000C4FE 4A38 F7D6                  	tst.b	(v_update_bonus_score).w
0000C502 6700                       	beq.s	.End
0000C504 4238 F7D6                  	clr.b	(v_update_bonus_score).w
0000C508 203C 4780 0002             	move.l	#$47800002,d0
0000C50E 0C79 0502 00FF 1506        	cmpi.w	#$502,(v_zone).l
0000C516 6600                       	bne.s	.GotVRAMLoc
0000C518 203C 6D40 0001             	move.l	#$6D400001,d0
0000C51E                            
0000C51E                            .GotVRAMLoc:
0000C51E 7200                       	moveq	#0,d1
0000C520 3238 F7D2                  	move.w	(v_bonus_countdown_1).w,d1
0000C524 6100 0000                  	bsr.w	Hud_Bonus
0000C528 203C 48C0 0002             	move.l	#$48C00002,d0
0000C52E 0C79 0502 00FF 1506        	cmpi.w	#$502,(v_zone).l
0000C536 6600                       	bne.s	.NotSSZ3
0000C538 203C 6E80 0001             	move.l	#$6E800001,d0
0000C53E                            
0000C53E                            .NotSSZ3:
0000C53E 7200                       	moveq	#0,d1
0000C540 3238 F7D4                  	move.w	(v_bonus_countdown_2).w,d1
0000C544 6100 0000                  	bsr.w	Hud_Bonus
0000C548                            
0000C548                            .End:
0000C548 4E75                       	rts
0000C54A                            
0000C54A                            ; -------------------------------------------------------------------------------
0000C54A                            
0000C54A                            TimeOver:
0000C54A 0839 0007 00FF 152E        	btst	#7,(v_time_zone).l
0000C552 6600                       	bne.s	.End2
0000C554 4239 00FF 1510             	clr.b	(v_update_time).l
0000C55A 23FC 0000 0000 00FF 1514   	move.l	#0,(v_time).l
0000C564 41F8 D000                  	lea	(v_player).w,a0
0000C568 2448                       	movea.l	a0,a2
0000C56A 6100 AEDE                  	bsr.w	KillPlayer
0000C56E 13FC 0001 00FF 150C        	move.b	#1,(v_time_over).l
0000C576                            
0000C576                            .End2:
0000C576 4E75                       	rts
0000C578                            ; END OF FUNCTION CHUNK	FOR VInt_Pause
0000C578                            ; -------------------------------------------------------------------------------
0000C578                            
0000C578                            Hud_InitRings:
0000C578 23FC 7360 0002 00C0 0004   	move.l	#$73600002,(VDP_CTRL).l
0000C582 45FA 0000                  	lea	Hud_TilesRings(pc),a2
0000C586 343C 0002                  	move.w	#2,d2
0000C58A 6000                       	bra.s	Hud_InitCommon
0000C58C                            ; End of function Hud_InitRings
0000C58C                            
0000C58C                            ; -------------------------------------------------------------------------------
0000C58C                            
0000C58C                            Hud_Base:
0000C58C 4DF9 00C0 0000             	lea	(VDP_DATA).l,a6
0000C592 6100 0000                  	bsr.w	Hud_Lives
0000C596 23FC 7060 0002 00C0 0004   	move.l	#$70600002,(VDP_CTRL).l
0000C5A0 45FA 0000                  	lea	Hud_TilesBase(pc),a2
0000C5A4 343C 0006                  	move.w	#6,d2
0000C5A8                            
0000C5A8                            Hud_InitCommon:
0000C5A8 43F9 0000 0000             	lea	(ArtUnc_HUD).l,a1
0000C5AE                            
0000C5AE                            .OuterLoop:
0000C5AE 323C 000F                  	move.w	#$F,d1
0000C5B2 101A                       	move.b	(a2)+,d0
0000C5B4 6B00                       	bmi.s	.EmptyTile
0000C5B6 4880                       	ext.w	d0
0000C5B8 EB48                       	lsl.w	#5,d0
0000C5BA 47F1 0000                  	lea	(a1,d0.w),a3
0000C5BE                            
0000C5BE                            .InnerLoop:
0000C5BE 2C9B                       	move.l	(a3)+,(a6)
0000C5C0 51C9 FFFC                  	dbf	d1,.InnerLoop
0000C5C4                            
0000C5C4                            .Next:
0000C5C4 51CA FFE8                  	dbf	d2,.OuterLoop
0000C5C8 4E75                       	rts
0000C5CA                            
0000C5CA                            ; -------------------------------------------------------------------------------
0000C5CA                            
0000C5CA                            .EmptyTile:
0000C5CA 2CBC 0000 0000             	move.l	#0,(a6)
0000C5D0 51C9 FFF8                  	dbf	d1,.EmptyTile
0000C5D4 60EE                       	bra.s	.Next
0000C5D6                            ; End of function Hud_Base
0000C5D6                            
0000C5D6                            ; -------------------------------------------------------------------------------
0000C5D6 FFFF FFFF FFFF 0000        Hud_TilesBase:	dc.b	$FF, $FF, $FF, $FF, $FF, $FF, 0, 0
0000C5DE FFFF 0000                  Hud_TilesRings:	dc.b	$FF, $FF, 0, 0
0000C5E2                            ; -------------------------------------------------------------------------------
0000C5E2                            
0000C5E2                            HudDb_XY:
0000C5E2 203C 70E0 0002             	move.l	#$70E00002,d0
0000C5E8 7200                       	moveq	#0,d1
0000C5EA 3238 D008                  	move.w	(v_player+oX).w,d1
0000C5EE 6100 0000                  	bsr.w	Hud_Hex
0000C5F2 203C 7260 0002             	move.l	#$72600002,d0
0000C5F8 3238 D00C                  	move.w	(v_player+oY).w,d1
0000C5FC 6000 0000                  	bra.w	Hud_Hex
0000C600                            ; End of function HudDb_XY
0000C600                            
0000C600                            ; -------------------------------------------------------------------------------
0000C600                            
0000C600                            Hud_Bonus:
0000C600 45F9 0000 0000             	lea	(Hud_10000).l,a2
0000C606 7C04                       	moveq	#4,d6
0000C608 7800                       	moveq	#0,d4
0000C60A 43F9 0000 0000             	lea	(ArtUnc_HUD).l,a1
0000C610                            
0000C610                            .DigitLoop:
0000C610 7400                       	moveq	#0,d2
0000C612 261A                       	move.l	(a2)+,d3
0000C614                            
0000C614                            .Loop:
0000C614 9283                       	sub.l	d3,d1
0000C616 6500                       	bcs.s	.GotDigit
0000C618 5242                       	addq.w	#1,d2
0000C61A 60F8                       	bra.s	.Loop
0000C61C                            
0000C61C                            ; -------------------------------------------------------------------------------
0000C61C                            
0000C61C                            .GotDigit:
0000C61C D283                       	add.l	d3,d1
0000C61E 4A42                       	tst.w	d2
0000C620 6700                       	beq.s	.NonzeroDigit
0000C622 383C 0001                  	move.w	#1,d4
0000C626                            
0000C626                            .NonzeroDigit:
0000C626 2D40 0004                  	move.l	d0,4(a6)
0000C62A 4A44                       	tst.w	d4
0000C62C 6600                       	bne.s	.DrawDigit
0000C62E 4A46                       	tst.w	d6
0000C630 6600                       	bne.s	.BlankTile
0000C632                            
0000C632                            .DrawDigit:
0000C632 ED4A                       	lsl.w	#6,d2
0000C634 47F1 2000                  	lea	(a1,d2.w),a3
0000C638 2C9B                       	move.l	(a3)+,(a6)
0000C63A 2C9B                       	move.l	(a3)+,(a6)
0000C63C 2C9B                       	move.l	(a3)+,(a6)
0000C63E 2C9B                       	move.l	(a3)+,(a6)
0000C640 2C9B                       	move.l	(a3)+,(a6)
0000C642 2C9B                       	move.l	(a3)+,(a6)
0000C644 2C9B                       	move.l	(a3)+,(a6)
0000C646 2C9B                       	move.l	(a3)+,(a6)
0000C648 2C9B                       	move.l	(a3)+,(a6)
0000C64A 2C9B                       	move.l	(a3)+,(a6)
0000C64C 2C9B                       	move.l	(a3)+,(a6)
0000C64E 2C9B                       	move.l	(a3)+,(a6)
0000C650 2C9B                       	move.l	(a3)+,(a6)
0000C652 2C9B                       	move.l	(a3)+,(a6)
0000C654 2C9B                       	move.l	(a3)+,(a6)
0000C656 2C9B                       	move.l	(a3)+,(a6)
0000C658                            
0000C658                            .Next:
0000C658 0680 0040 0000             	addi.l	#$400000,d0
0000C65E 51CE FFB0                  	dbf	d6,.DigitLoop
0000C662 4E75                       	rts
0000C664                            
0000C664                            ; -------------------------------------------------------------------------------
0000C664                            
0000C664                            .BlankTile:
0000C664 7A0F                       	moveq	#$F,d5
0000C666                            
0000C666                            .Loop2:
0000C666 2CBC 0000 0000             	move.l	#0,(a6)
0000C66C 51CD FFF8                  	dbf	d5,.Loop2
0000C670 60E6                       	bra.s	.Next
0000C672                            ; End of function Hud_Bonus
0000C672                            
0000C672                            ; -------------------------------------------------------------------------------
0000C672                            
0000C672                            Hud_Rings:
0000C672 45F9 0000 0000             	lea	(Hud_100).l,a2
0000C678 7C02                       	moveq	#2,d6
0000C67A 6000                       	bra.s	Hud_LoadArt
0000C67C                            ; End of function Hud_Rings
0000C67C                            
0000C67C                            ; -------------------------------------------------------------------------------
0000C67C                            
0000C67C                            Hud_Score:
0000C67C 45F9 0000 0000             	lea	(Hud_100000).l,a2
0000C682 7C05                       	moveq	#5,d6
0000C684                            
0000C684                            Hud_LoadArt:
0000C684 7800                       	moveq	#0,d4
0000C686 43F9 0000 0000             	lea	(ArtUnc_HUD).l,a1
0000C68C                            
0000C68C                            .DigitLoop:
0000C68C 7400                       	moveq	#0,d2
0000C68E 261A                       	move.l	(a2)+,d3
0000C690                            
0000C690                            .Loop:
0000C690 9283                       	sub.l	d3,d1
0000C692 6500                       	bcs.s	.GotDigit
0000C694 5242                       	addq.w	#1,d2
0000C696 60F8                       	bra.s	.Loop
0000C698                            
0000C698                            ; -------------------------------------------------------------------------------
0000C698                            
0000C698                            .GotDigit:
0000C698 D283                       	add.l	d3,d1
0000C69A 4A42                       	tst.w	d2
0000C69C 6700                       	beq.s	.ChkDraw
0000C69E 383C 0001                  	move.w	#1,d4
0000C6A2                            
0000C6A2                            .ChkDraw:
0000C6A2 4A44                       	tst.w	d4
0000C6A4 6700                       	beq.s	.SkipDigit
0000C6A6 ED4A                       	lsl.w	#6,d2
0000C6A8 2D40 0004                  	move.l	d0,4(a6)
0000C6AC 47F1 2000                  	lea	(a1,d2.w),a3
0000C6B0 2C9B                       	move.l	(a3)+,(a6)
0000C6B2 2C9B                       	move.l	(a3)+,(a6)
0000C6B4 2C9B                       	move.l	(a3)+,(a6)
0000C6B6 2C9B                       	move.l	(a3)+,(a6)
0000C6B8 2C9B                       	move.l	(a3)+,(a6)
0000C6BA 2C9B                       	move.l	(a3)+,(a6)
0000C6BC 2C9B                       	move.l	(a3)+,(a6)
0000C6BE 2C9B                       	move.l	(a3)+,(a6)
0000C6C0 2C9B                       	move.l	(a3)+,(a6)
0000C6C2 2C9B                       	move.l	(a3)+,(a6)
0000C6C4 2C9B                       	move.l	(a3)+,(a6)
0000C6C6 2C9B                       	move.l	(a3)+,(a6)
0000C6C8 2C9B                       	move.l	(a3)+,(a6)
0000C6CA 2C9B                       	move.l	(a3)+,(a6)
0000C6CC 2C9B                       	move.l	(a3)+,(a6)
0000C6CE 2C9B                       	move.l	(a3)+,(a6)
0000C6D0                            
0000C6D0                            .SkipDigit:
0000C6D0 0680 0040 0000             	addi.l	#$400000,d0
0000C6D6 51CE FFB4                  	dbf	d6,.DigitLoop
0000C6DA 4E75                       	rts
0000C6DC                            ; End of function Hud_Score
0000C6DC                            
0000C6DC                            ; -------------------------------------------------------------------------------
0000C6DC                            
0000C6DC                            ContScrCounter:
0000C6DC 23FC 5F80 0003 00C0 0004   	move.l	#$5F800003,(VDP_CTRL).l
0000C6E6 4DF9 00C0 0000             	lea	(VDP_DATA).l,a6
0000C6EC 45F9 0000 0000             	lea	(Hud_10).l,a2
0000C6F2 7C01                       	moveq	#1,d6
0000C6F4 7800                       	moveq	#0,d4
0000C6F6 43F9 0000 0000             	lea	(ArtUnc_HUD).l,a1
0000C6FC                            
0000C6FC                            .DigitLoop:
0000C6FC 7400                       	moveq	#0,d2
0000C6FE 261A                       	move.l	(a2)+,d3
0000C700                            
0000C700                            .Loop:
0000C700 9283                       	sub.l	d3,d1
0000C702 6500                       	bcs.s	.GotDigit
0000C704 5242                       	addq.w	#1,d2
0000C706 60F8                       	bra.s	.Loop
0000C708                            
0000C708                            ; -------------------------------------------------------------------------------
0000C708                            
0000C708                            .GotDigit:
0000C708 D283                       	add.l	d3,d1
0000C70A ED4A                       	lsl.w	#6,d2
0000C70C 47F1 2000                  	lea	(a1,d2.w),a3
0000C710 2C9B                       	move.l	(a3)+,(a6)
0000C712 2C9B                       	move.l	(a3)+,(a6)
0000C714 2C9B                       	move.l	(a3)+,(a6)
0000C716 2C9B                       	move.l	(a3)+,(a6)
0000C718 2C9B                       	move.l	(a3)+,(a6)
0000C71A 2C9B                       	move.l	(a3)+,(a6)
0000C71C 2C9B                       	move.l	(a3)+,(a6)
0000C71E 2C9B                       	move.l	(a3)+,(a6)
0000C720 2C9B                       	move.l	(a3)+,(a6)
0000C722 2C9B                       	move.l	(a3)+,(a6)
0000C724 2C9B                       	move.l	(a3)+,(a6)
0000C726 2C9B                       	move.l	(a3)+,(a6)
0000C728 2C9B                       	move.l	(a3)+,(a6)
0000C72A 2C9B                       	move.l	(a3)+,(a6)
0000C72C 2C9B                       	move.l	(a3)+,(a6)
0000C72E 2C9B                       	move.l	(a3)+,(a6)
0000C730 51CE FFCA                  	dbf	d6,.DigitLoop
0000C734 4E75                       	rts
0000C736                            ; End of function ContScrCounter
0000C736                            
0000C736                            ; -------------------------------------------------------------------------------
0000C736 0001 86A0                  Hud_100000:	dc.l	100000
0000C73A 0000 2710                  Hud_10000:	dc.l	10000
0000C73E 0000 03E8                  Hud_1000:	dc.l	1000
0000C742 0000 0064                  Hud_100:	dc.l	100
0000C746 0000 000A                  Hud_10:	dc.l	10
0000C74A 0000 0001                  Hud_1:	dc.l	1
0000C74E 0000 1000                  Hud_1000h:	dc.l	$1000
0000C752 0000 0100                  Hud_100h:	dc.l	$100
0000C756 0000 0010                  Hud_10h:	dc.l	$10
0000C75A 0000 0001                  Hud_1h:	dc.l	1
0000C75E                            ; -------------------------------------------------------------------------------
0000C75E                            
0000C75E                            Hud_Hex:
0000C75E 7C03                       	moveq	#3,d6
0000C760 45F9 0000 C74E             	lea	(Hud_1000h).l,a2
0000C766 6000                       	bra.s	Hud_Digits
0000C768                            ; End of function Hud_Hex
0000C768                            
0000C768                            ; -------------------------------------------------------------------------------
0000C768                            
0000C768                            Hud_Lives:
0000C768 203C 74A0 0002             	move.l	#$74A00002,d0
0000C76E 7200                       	moveq	#0,d1
0000C770 1239 00FF 1508             	move.b	(v_life_count).l,d1
0000C776 0C01 0009                  	cmpi.b	#9,d1
0000C77A 6500                       	bcs.s	.Max9Lives
0000C77C 7209                       	moveq	#9,d1
0000C77E                            
0000C77E                            .Max9Lives:
0000C77E 45F9 0000 C74A             	lea	(Hud_1).l,a2
0000C784 7C00                       	moveq	#0,d6
0000C786 6000                       	bra.s	Hud_Digits
0000C788                            ; End of function Hud_Lives
0000C788                            
0000C788                            ; -------------------------------------------------------------------------------
0000C788                            
0000C788                            Hud_Mins:
0000C788 45F9 0000 C74A             	lea	(Hud_1).l,a2
0000C78E 7C00                       	moveq	#0,d6
0000C790 6000                       	bra.s	Hud_Digits
0000C792                            ; End of function Hud_Mins
0000C792                            
0000C792                            ; -------------------------------------------------------------------------------
0000C792                            
0000C792                            Hud_SecsCentisecs:
0000C792 45F9 0000 C746             	lea	(Hud_10).l,a2
0000C798 7C01                       	moveq	#1,d6
0000C79A                            ; End of function Hud_SecsCentisecs
0000C79A                            
0000C79A                            ; -------------------------------------------------------------------------------
0000C79A                            
0000C79A                            Hud_Digits:
0000C79A 7800                       	moveq	#0,d4
0000C79C 43F9 0000 0000             	lea	(ArtUnc_HUD).l,a1
0000C7A2                            
0000C7A2                            .DigitLoop:
0000C7A2 7400                       	moveq	#0,d2
0000C7A4 261A                       	move.l	(a2)+,d3
0000C7A6                            
0000C7A6                            .Loop:
0000C7A6 9283                       	sub.l	d3,d1
0000C7A8 6500                       	bcs.s	.GotDigit
0000C7AA 5242                       	addq.w	#1,d2
0000C7AC 60F8                       	bra.s	.Loop
0000C7AE                            
0000C7AE                            ; -------------------------------------------------------------------------------
0000C7AE                            
0000C7AE                            .GotDigit:
0000C7AE D283                       	add.l	d3,d1
0000C7B0 4A42                       	tst.w	d2
0000C7B2 6700                       	beq.s	.DrawDigit
0000C7B4 383C 0001                  	move.w	#1,d4
0000C7B8                            
0000C7B8                            .DrawDigit:
0000C7B8 ED4A                       	lsl.w	#6,d2
0000C7BA 2D40 0004                  	move.l	d0,4(a6)
0000C7BE 47F1 2000                  	lea	(a1,d2.w),a3
0000C7C2 2C9B                       	move.l	(a3)+,(a6)
0000C7C4 2C9B                       	move.l	(a3)+,(a6)
0000C7C6 2C9B                       	move.l	(a3)+,(a6)
0000C7C8 2C9B                       	move.l	(a3)+,(a6)
0000C7CA 2C9B                       	move.l	(a3)+,(a6)
0000C7CC 2C9B                       	move.l	(a3)+,(a6)
0000C7CE 2C9B                       	move.l	(a3)+,(a6)
0000C7D0 2C9B                       	move.l	(a3)+,(a6)
0000C7D2 2C9B                       	move.l	(a3)+,(a6)
0000C7D4 2C9B                       	move.l	(a3)+,(a6)
0000C7D6 2C9B                       	move.l	(a3)+,(a6)
0000C7D8 2C9B                       	move.l	(a3)+,(a6)
0000C7DA 2C9B                       	move.l	(a3)+,(a6)
0000C7DC 2C9B                       	move.l	(a3)+,(a6)
0000C7DE 2C9B                       	move.l	(a3)+,(a6)
0000C7E0 2C9B                       	move.l	(a3)+,(a6)
0000C7E2 0680 0040 0000             	addi.l	#$400000,d0
0000C7E8 51CE FFB8                  	dbf	d6,.DigitLoop
0000C7EC 4E75                       	rts
0000C7EE                            ; End of function Hud_Digits
0000C7EE                            
0000C7EE                            ; -------------------------------------------------------------------------------
0000C7EE                            
0000C7EE                            ObjAnton:
0000C7EE                            
0000C7EE                            ; FUNCTION CHUNK AT 00207882 SIZE 00000078 BYTES
0000C7EE                            
0000C7EE 4EB9 0000 0000             	jsr	DestroyOnGoodFuture
0000C7F4 7000                       	moveq	#0,d0
0000C7F6 1028 0024                  	move.b	oRoutine(a0),d0
0000C7FA 303B 0000                  	move.w	ObjAnton_Index(pc,d0.w),d0
0000C7FE 4EBB 0000                  	jsr	ObjAnton_Index(pc,d0.w)
0000C802 4EB8 4012                  	jsr	DrawObject
0000C806 3028 002E                  	move.w	oVar2E(a0),d0
0000C80A 4EF8 7D1E                  	jmp	CheckObjDespawn2Time
0000C80E                            ; End of function ObjAnton
0000C80E                            
0000C80E                            ; -------------------------------------------------------------------------------
0000C80E 0000                       ObjAnton_Index:	dc.w	ObjAnton_Init-ObjAnton_Index
0000C810 0000                       	dc.w	ObjAnton_Place-ObjAnton_Index
0000C812 0000                       	dc.w	ObjAnton_Main-ObjAnton_Index
0000C814                            ; -------------------------------------------------------------------------------
0000C814                            
0000C814                            ObjAnton_Init:
0000C814 0028 0004 0001             	ori.b	#4,oRender(a0)
0000C81A 117C 0004 0018             	move.b	#4,oPriority(a0)
0000C820 217C 0000 0000 0004        	move.l	#MapSpr_Anton,oMap(a0)
0000C828 117C 0018 0017             	move.b	#$18,oXRadius(a0)
0000C82E 117C 0018 0019             	move.b	#$18,oWidth(a0)
0000C834 117C 0013 0016             	move.b	#$13,oYRadius(a0)
0000C83A 117C 0029 0020             	move.b	#$29,oColType(a0)
0000C840 3168 0008 002E             	move.w	oX(a0),oVar2E(a0)
0000C846 7002                       	moveq	#2,d0
0000C848 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000C84E 4A28 0028                  	tst.b	oSubtype(a0)
0000C852 6600                       	bne.s	.Damaged
0000C854 203C FFFF 0000             	move.l	#-$10000,d0
0000C85A 7200                       	moveq	#0,d1
0000C85C 6000                       	bra.s	.SetInfo
0000C85E                            
0000C85E                            ; -------------------------------------------------------------------------------
0000C85E                            
0000C85E                            .Damaged:
0000C85E 203C FFFF 8000             	move.l	#-$8000,d0
0000C864 7201                       	moveq	#1,d1
0000C866                            
0000C866                            .SetInfo:
0000C866 2140 002A                  	move.l	d0,oVar2A(a0)
0000C86A 1141 001C                  	move.b	d1,oAnim(a0)
0000C86E                            ; End of function ObjAnton_Init
0000C86E                            
0000C86E                            ; -------------------------------------------------------------------------------
0000C86E                            
0000C86E                            ObjAnton_Place:
0000C86E 203C 0001 0000             	move.l	#$10000,d0
0000C874 D1A8 000C                  	add.l	d0,oY(a0)
0000C878 4EB8 6F3C                  	jsr	CheckFloorEdge
0000C87C 4A41                       	tst.w	d1
0000C87E 6A00                       	bpl.s	.End
0000C880 5428 0024                  	addq.b	#2,oRoutine(a0)
0000C884                            
0000C884                            .End:
0000C884 4E75                       	rts
0000C886                            ; End of function ObjAnton_Place
0000C886                            
0000C886                            ; -------------------------------------------------------------------------------
0000C886                            
0000C886                            ObjAnton_Main:
0000C886 2028 002A                  	move.l	oVar2A(a0),d0
0000C88A D1A8 0008                  	add.l	d0,oX(a0)
0000C88E 3028 0008                  	move.w	oX(a0),d0
0000C892 9068 002E                  	sub.w	oVar2E(a0),d0
0000C896 6A00                       	bpl.s	.AbsDX
0000C898 4440                       	neg.w	d0
0000C89A                            
0000C89A                            .AbsDX:
0000C89A 0C40 0080                  	cmpi.w	#$80,d0
0000C89E 6C00                       	bge.s	.TurnAround
0000C8A0 4EB8 6F3C                  	jsr	CheckFloorEdge
0000C8A4 0C41 FFF9                  	cmpi.w	#-7,d1
0000C8A8 6D00                       	blt.s	.TurnAround
0000C8AA 0C41 0007                  	cmpi.w	#7,d1
0000C8AE 6E00                       	bgt.s	.TurnAround
0000C8B0 D368 000C                  	add.w	d1,oY(a0)
0000C8B4 43FA 0000                  	lea	Ani_Anton(pc),a1
0000C8B8 4EF8 61F4                  	jmp	AnimateObject
0000C8BC                            
0000C8BC                            ; -------------------------------------------------------------------------------
0000C8BC                            
0000C8BC                            .TurnAround:
0000C8BC 44A8 002A                  	neg.l	oVar2A(a0)
0000C8C0 0868 0000 0001             	bchg	#0,oRender(a0)
0000C8C6 0868 0000 0022             	bchg	#0,oStatus(a0)
0000C8CC 60B8                       	bra.s	ObjAnton_Main
0000C8CE                            ; End of function ObjAnton_Main
0000C8CE                            
0000C8CE                            ; -------------------------------------------------------------------------------
0000C8CE                            Ani_Anton:
0000C8CE                            	include	"level/objects/anton/anim.asm"
0000C8CE                            .Anim:
0000C8CE 0000                       	dc.w	byte_20B3A2-.Anim
0000C8D0 0000                       	dc.w	byte_20B3A6-.Anim
0000C8D2 0300 01FF                  byte_20B3A2:	dc.b	3,	0, 1, $FF
0000C8D6 0702 03FF                  byte_20B3A6:	dc.b	7,	2, 3, $FF
0000C8D6 0702 03FF                  byte_20B3A6:	dc.b	7,	2, 3, $FF
0000C8DA                            	even
0000C8DA                            MapSpr_Anton:
0000C8DA                            	include	"level/objects/anton/map.asm"
0000C8DA                            .Map:
0000C8DA 0000                       	dc.w	unk_20B3B2-.Map
0000C8DC 0000                       	dc.w	unk_20B3CC-.Map
0000C8DE 0000                       	dc.w	unk_20B3E6-.Map
0000C8E0 0000                       	dc.w	unk_20B400-.Map
0000C8E2 05                         unk_20B3B2:	dc.b	  5
0000C8E3 ED                         	dc.b	$ED ; í
0000C8E4 05                         	dc.b	  5
0000C8E5 00                         	dc.b	  0
0000C8E6 00                         	dc.b	  0
0000C8E7 F4                         	dc.b	$F4 ; ô
0000C8E8 FD                         	dc.b	$FD ; ý
0000C8E9 08                         	dc.b	  8
0000C8EA 00                         	dc.b	  0
0000C8EB 04                         	dc.b	  4
0000C8EC F4                         	dc.b	$F4 ; ô
0000C8ED 05                         	dc.b	  5
0000C8EE 04                         	dc.b	  4
0000C8EF 00                         	dc.b	  0
0000C8F0 07                         	dc.b	  7
0000C8F1 FC                         	dc.b	$FC ; ü
0000C8F2 04                         	dc.b	  4
0000C8F3 05                         	dc.b	  5
0000C8F4 00                         	dc.b	  0
0000C8F5 09                         	dc.b	  9
0000C8F6 F8                         	dc.b	$F8 ; ø
0000C8F7 FC                         	dc.b	$FC ; ü
0000C8F8 00                         	dc.b	  0
0000C8F9 00                         	dc.b	  0
0000C8FA 11                         	dc.b	$11
0000C8FB 0E                         	dc.b	 $E
0000C8FC 05                         unk_20B3CC:	dc.b	  5
0000C8FD EC                         	dc.b	$EC ; ì
0000C8FE 05                         	dc.b	  5
0000C8FF 00                         	dc.b	  0
0000C900 00                         	dc.b	  0
0000C901 F4                         	dc.b	$F4 ; ô
0000C902 FC                         	dc.b	$FC ; ü
0000C903 08                         	dc.b	  8
0000C904 00                         	dc.b	  0
0000C905 04                         	dc.b	  4
0000C906 F4                         	dc.b	$F4 ; ô
0000C907 04                         	dc.b	  4
0000C908 04                         	dc.b	  4
0000C909 00                         	dc.b	  0
0000C90A 07                         	dc.b	  7
0000C90B FC                         	dc.b	$FC ; ü
0000C90C 04                         	dc.b	  4
0000C90D 05                         	dc.b	  5
0000C90E 00                         	dc.b	  0
0000C90F 0D                         	dc.b	 $D
0000C910 F8                         	dc.b	$F8 ; ø
0000C911 FB                         	dc.b	$FB ; û
0000C912 00                         	dc.b	  0
0000C913 00                         	dc.b	  0
0000C914 11                         	dc.b	$11
0000C915 12                         	dc.b	$12
0000C916 05                         unk_20B3E6:	dc.b	  5
0000C917 ED                         	dc.b	$ED ; í
0000C918 05                         	dc.b	  5
0000C919 00                         	dc.b	  0
0000C91A 12                         	dc.b	$12
0000C91B F4                         	dc.b	$F4 ; ô
0000C91C FD                         	dc.b	$FD ; ý
0000C91D 08                         	dc.b	  8
0000C91E 00                         	dc.b	  0
0000C91F 04                         	dc.b	  4
0000C920 F4                         	dc.b	$F4 ; ô
0000C921 05                         	dc.b	  5
0000C922 04                         	dc.b	  4
0000C923 00                         	dc.b	  0
0000C924 07                         	dc.b	  7
0000C925 FC                         	dc.b	$FC ; ü
0000C926 04                         	dc.b	  4
0000C927 05                         	dc.b	  5
0000C928 00                         	dc.b	  0
0000C929 09                         	dc.b	  9
0000C92A F8                         	dc.b	$F8 ; ø
0000C92B FC                         	dc.b	$FC ; ü
0000C92C 00                         	dc.b	  0
0000C92D 00                         	dc.b	  0
0000C92E 11                         	dc.b	$11
0000C92F 0E                         	dc.b	 $E
0000C930 05                         unk_20B400:	dc.b	  5
0000C931 EC                         	dc.b	$EC ; ì
0000C932 05                         	dc.b	  5
0000C933 00                         	dc.b	  0
0000C934 12                         	dc.b	$12
0000C935 F4                         	dc.b	$F4 ; ô
0000C936 FC                         	dc.b	$FC ; ü
0000C937 08                         	dc.b	  8
0000C938 00                         	dc.b	  0
0000C939 04                         	dc.b	  4
0000C93A F4                         	dc.b	$F4 ; ô
0000C93B 04                         	dc.b	  4
0000C93C 04                         	dc.b	  4
0000C93D 00                         	dc.b	  0
0000C93E 07                         	dc.b	  7
0000C93F FC                         	dc.b	$FC ; ü
0000C940 04                         	dc.b	  4
0000C941 05                         	dc.b	  5
0000C942 00                         	dc.b	  0
0000C943 0D                         	dc.b	 $D
0000C944 F8                         	dc.b	$F8 ; ø
0000C945 FB                         	dc.b	$FB ; û
0000C946 00                         	dc.b	  0
0000C947 00                         	dc.b	  0
0000C948 11                         	dc.b	$11
0000C949 12                         	dc.b	$12
0000C949 12                         	dc.b	$12
0000C94A                            	even
0000C94A                            ; -------------------------------------------------------------------------------
0000C94A                            
0000C94A                            ObjPataBata:
0000C94A 4EB9 0000 0000             	jsr	DestroyOnGoodFuture
0000C950 4A28 0024                  	tst.b	oRoutine(a0)
0000C954 6600 0000                  	bne.w	ObjPataBata_Main
0000C958 5428 0024                  	addq.b	#2,oRoutine(a0)
0000C95C 0028 0004 0001             	ori.b	#4,oRender(a0)
0000C962 117C 0003 0018             	move.b	#3,oPriority(a0)
0000C968 117C 002A 0020             	move.b	#$2A,oColType(a0)
0000C96E 117C 0010 0017             	move.b	#$10,oXRadius(a0)
0000C974 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000C97A 117C 0010 0016             	move.b	#$10,oYRadius(a0)
0000C980 3168 0008 002A             	move.w	oX(a0),oVar2A(a0)
0000C986 3168 000C 002C             	move.w	oY(a0),oVar2C(a0)
0000C98C 317C 8000 002E             	move.w	#$8000,oVar2E(a0)
0000C992 7001                       	moveq	#1,d0
0000C994 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000C99A 4A28 0028                  	tst.b	oSubtype(a0)
0000C99E 6600                       	bne.s	.Damaged
0000C9A0 203C FFFF 8000             	move.l	#-$8000,d0
0000C9A6 323C FE00                  	move.w	#-$200,d1
0000C9AA 7403                       	moveq	#3,d2
0000C9AC 7600                       	moveq	#0,d3
0000C9AE 43FA 0000                  	lea	MapSpr_PataBata1(pc),a1
0000C9B2 6000                       	bra.s	.SetInfo
0000C9B4                            
0000C9B4                            ; -------------------------------------------------------------------------------
0000C9B4                            
0000C9B4                            .Damaged:
0000C9B4 203C FFFF C000             	move.l	#-$4000,d0
0000C9BA 323C FF00                  	move.w	#-$100,d1
0000C9BE 7404                       	moveq	#4,d2
0000C9C0 7601                       	moveq	#1,d3
0000C9C2 43FA 0000                  	lea	MapSpr_PataBata2(pc),a1
0000C9C6                            
0000C9C6                            .SetInfo:
0000C9C6 2140 0030                  	move.l	d0,oVar30(a0)
0000C9CA 3141 0036                  	move.w	d1,oVar36(a0)
0000C9CE 3142 0038                  	move.w	d2,oVar38(a0)
0000C9D2 1143 001C                  	move.b	d3,oAnim(a0)
0000C9D6 2149 0004                  	move.l	a1,oMap(a0)
0000C9DA                            
0000C9DA                            ObjPataBata_Main:
0000C9DA 2028 0030                  	move.l	oVar30(a0),d0
0000C9DE D1A8 0008                  	add.l	d0,8(a0)
0000C9E2 3028 0008                  	move.w	oX(a0),d0
0000C9E6 9068 002A                  	sub.w	oVar2A(a0),d0
0000C9EA 6A00                       	bpl.s	.AbsDX
0000C9EC 4440                       	neg.w	d0
0000C9EE                            
0000C9EE                            .AbsDX:
0000C9EE 0C40 0080                  	cmpi.w	#$80,d0
0000C9F2 6D00                       	blt.s	.NoFlip
0000C9F4 44A8 0030                  	neg.l	oVar30(a0)
0000C9F8 2028 0030                  	move.l	oVar30(a0),d0
0000C9FC D1A8 0008                  	add.l	d0,oX(a0)
0000CA00 0868 0000 0001             	bchg	#0,oRender(a0)
0000CA06 0868 0000 0022             	bchg	#0,oStatus(a0)
0000CA0C 4268 0034                  	clr.w	oVar34(a0)
0000CA10                            
0000CA10                            .NoFlip:
0000CA10 3028 0036                  	move.w	oVar36(a0),d0
0000CA14 D168 0034                  	add.w	d0,oVar34(a0)
0000CA18 1028 0034                  	move.b	oVar34(a0),d0
0000CA1C 4EB8 0AAC                  	jsr	CalcSine
0000CA20 4840                       	swap	d0
0000CA22 3228 0038                  	move.w	oVar38(a0),d1
0000CA26 E2A0                       	asr.l	d1,d0
0000CA28 D0A8 002C                  	add.l	oVar2C(a0),d0
0000CA2C 2140 000C                  	move.l	d0,oY(a0)
0000CA30 43FA 0000                  	lea	Ani_PataBata(pc),a1
0000CA34 4EB8 61F4                  	jsr	AnimateObject
0000CA38 4EB8 4012                  	jsr	DrawObject
0000CA3C 3028 002A                  	move.w	oVar2A(a0),d0
0000CA40 4EF8 7D1E                  	jmp	CheckObjDespawn2Time
0000CA44                            ; End of function ObjPataBata
0000CA44                            
0000CA44                            ; -------------------------------------------------------------------------------
0000CA44                            Ani_PataBata:
0000CA44                            	include	"level/objects/patabata/anim.asm"
0000CA44                            .Anim:
0000CA44 0000                       	dc.w	byte_20B520-.Anim
0000CA46 0000                       	dc.w	byte_20B527-.Anim
0000CA48 0700 0001 0201 FF          byte_20B520:	dc.b	7,	0, 0, 1, 2, 1, $FF
0000CA4F 0300 0001 0201 FF          byte_20B527:	dc.b	3,	0, 0, 1, 2, 1, $FF
0000CA4F 0300 0001 0201 FF          byte_20B527:	dc.b	3,	0, 0, 1, 2, 1, $FF
0000CA56                            	even
0000CA56                            MapSpr_PataBata1:
0000CA56                            	include	"level/objects/patabata/mapnormal.asm"
0000CA56                            .Map:
0000CA56 0000                       	dc.w	unk_20B536-.Map
0000CA58 0000                       	dc.w	unk_20B541-.Map
0000CA5A 0000                       	dc.w	unk_20B54C-.Map
0000CA5C 02                         unk_20B536:	dc.b	  2
0000CA5D F0                         	dc.b	$F0 ; ð
0000CA5E 07                         	dc.b	  7
0000CA5F 00                         	dc.b	  0
0000CA60 00                         	dc.b	  0
0000CA61 F0                         	dc.b	$F0 ; ð
0000CA62 F0                         	dc.b	$F0 ; ð
0000CA63 07                         	dc.b	  7
0000CA64 00                         	dc.b	  0
0000CA65 08                         	dc.b	  8
0000CA66 00                         	dc.b	  0
0000CA67 02                         unk_20B541:	dc.b	  2
0000CA68 F8                         	dc.b	$F8 ; ø
0000CA69 0D                         	dc.b	 $D
0000CA6A 00                         	dc.b	  0
0000CA6B 10                         	dc.b	$10
0000CA6C F0                         	dc.b	$F0 ; ð
0000CA6D 08                         	dc.b	  8
0000CA6E 00                         	dc.b	  0
0000CA6F 00                         	dc.b	  0
0000CA70 18                         	dc.b	$18
0000CA71 00                         	dc.b	  0
0000CA72 01                         unk_20B54C:	dc.b	  1
0000CA73 F0                         	dc.b	$F0 ; ð
0000CA74 0F                         	dc.b	 $F
0000CA75 00                         	dc.b	  0
0000CA76 19                         	dc.b	$19
0000CA77 F0                         	dc.b	$F0 ; ð
0000CA77 F0                         	dc.b	$F0 ; ð
0000CA78                            	even
0000CA78                            MapSpr_PataBata2:
0000CA78                            	include	"level/objects/patabata/mapdamaged.asm"
0000CA78                            .Map:
0000CA78 0000                       	dc.w	unk_20B556-.Map
0000CA7A 0000                       	dc.w	unk_20B561-.Map
0000CA7C 0000                       	dc.w	unk_20B56C-.Map
0000CA7E 02                         unk_20B556:	dc.b	  2
0000CA7F F0                         	dc.b	$F0 ; ð
0000CA80 07                         	dc.b	  7
0000CA81 00                         	dc.b	  0
0000CA82 00                         	dc.b	  0
0000CA83 F0                         	dc.b	$F0 ; ð
0000CA84 F0                         	dc.b	$F0 ; ð
0000CA85 07                         	dc.b	  7
0000CA86 00                         	dc.b	  0
0000CA87 29                         	dc.b	$29 ; )
0000CA88 00                         	dc.b	  0
0000CA89 02                         unk_20B561:	dc.b	  2
0000CA8A F8                         	dc.b	$F8 ; ø
0000CA8B 0D                         	dc.b	 $D
0000CA8C 00                         	dc.b	  0
0000CA8D 10                         	dc.b	$10
0000CA8E F0                         	dc.b	$F0 ; ð
0000CA8F 08                         	dc.b	  8
0000CA90 00                         	dc.b	  0
0000CA91 00                         	dc.b	  0
0000CA92 18                         	dc.b	$18
0000CA93 00                         	dc.b	  0
0000CA94 02                         unk_20B56C:	dc.b	  2
0000CA95 00                         	dc.b	  0
0000CA96 00                         	dc.b	  0
0000CA97 00                         	dc.b	  0
0000CA98 31                         	dc.b	$31 ; 1
0000CA99 00                         	dc.b	  0
0000CA9A F0                         	dc.b	$F0 ; ð
0000CA9B 0F                         	dc.b	 $F
0000CA9C 00                         	dc.b	  0
0000CA9D 19                         	dc.b	$19
0000CA9E F0                         	dc.b	$F0 ; ð
0000CA9F 00                         	dc.b	  0
0000CA9F 00                         	dc.b	  0
0000CAA0                            	even
0000CAA0                            ; -------------------------------------------------------------------------------
0000CAA0                            
0000CAA0                            ObjMosqui:
0000CAA0 4EB9 0000 0000             	jsr	DestroyOnGoodFuture
0000CAA6 7000                       	moveq	#0,d0
0000CAA8 1028 0024                  	move.b	oRoutine(a0),d0
0000CAAC 303B 0000                  	move.w	ObjMosqui_Index(pc,d0.w),d0
0000CAB0 4EBB 0000                  	jsr	ObjMosqui_Index(pc,d0.w)
0000CAB4 4EB8 4012                  	jsr	DrawObject
0000CAB8 3028 002A                  	move.w	oVar2A(a0),d0
0000CABC 4EF8 7D1E                  	jmp	CheckObjDespawn2Time
0000CAC0                            ; End of function ObjMosqui
0000CAC0                            
0000CAC0                            ; -------------------------------------------------------------------------------
0000CAC0 0000                       ObjMosqui_Index:dc.w	ObjMosqui_Init-ObjMosqui_Index
0000CAC2 0000                       	dc.w	ObjMosqui_Main-ObjMosqui_Index
0000CAC4 0000                       	dc.w	ObjMosqui_Animate-ObjMosqui_Index
0000CAC6 0000                       	dc.w	ObjMosqui_Dive-ObjMosqui_Index
0000CAC8 0000                       	dc.w	ObjMosqui_Wait-ObjMosqui_Index
0000CACA                            ; -------------------------------------------------------------------------------
0000CACA                            
0000CACA                            ObjMosqui_Init:
0000CACA 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CACE 0028 0004 0001             	ori.b	#4,oRender(a0)
0000CAD4 117C 0003 0018             	move.b	#3,oPriority(a0)
0000CADA 117C 0010 0017             	move.b	#$10,oXRadius(a0)
0000CAE0 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000CAE6 117C 0010 0016             	move.b	#$10,oYRadius(a0)
0000CAEC 117C 002B 0020             	move.b	#$2B,oColType(a0)
0000CAF2 3168 0008 002A             	move.w	oX(a0),oVar2A(a0)
0000CAF8 7000                       	moveq	#0,d0
0000CAFA 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000CB00 4A28 0028                  	tst.b	oSubtype(a0)
0000CB04 6600                       	bne.s	.Damaged
0000CB06 43FA 0000                  	lea	MapSpr_Mosqui1(pc),a1
0000CB0A 45FA 0000                  	lea	Ani_Mosqui1(pc),a2
0000CB0E 203C FFFF 0000             	move.l	#-$10000,d0
0000CB14 6000                       	bra.s	.SetInfo
0000CB16                            
0000CB16                            ; -------------------------------------------------------------------------------
0000CB16                            
0000CB16                            .Damaged:
0000CB16 43FA 0000                  	lea	MapSpr_Mosqui2(pc),a1
0000CB1A 45FA 0000                  	lea	Ani_Mosqui2(pc),a2
0000CB1E 203C FFFF 8000             	move.l	#-$8000,d0
0000CB24                            
0000CB24                            .SetInfo:
0000CB24 2149 0004                  	move.l	a1,oMap(a0)
0000CB28 214A 0030                  	move.l	a2,oVar30(a0)
0000CB2C 2140 002C                  	move.l	d0,oVar2C(a0)
0000CB30                            ; End of function ObjMosqui_Init
0000CB30                            
0000CB30                            ; -------------------------------------------------------------------------------
0000CB30                            
0000CB30                            ObjMosqui_Main:
0000CB30 4A79 00FF 1906             	tst.w	(v_debug_mode).l
0000CB36 6600                       	bne.s	.SkipRange
0000CB38 43F8 D000                  	lea	(v_player).w,a1
0000CB3C 6100                       	bsr.s	ObjMosqui_CheckInRange
0000CB3E 6500                       	bcs.s	.StartDive
0000CB40                            
0000CB40                            .SkipRange:
0000CB40 2028 002C                  	move.l	oVar2C(a0),d0
0000CB44 D1A8 0008                  	add.l	d0,oX(a0)
0000CB48 3028 0008                  	move.w	oX(a0),d0
0000CB4C 9068 002A                  	sub.w	oVar2A(a0),d0
0000CB50 6A00                       	bpl.s	.ChkTurn
0000CB52 4440                       	neg.w	d0
0000CB54                            
0000CB54                            .ChkTurn:
0000CB54 0C40 0080                  	cmpi.w	#$80,d0
0000CB58 6D00                       	blt.s	.Animate
0000CB5A 44A8 002C                  	neg.l	oVar2C(a0)
0000CB5E 0868 0000 0001             	bchg	#0,oRender(a0)
0000CB64 0868 0000 0022             	bchg	#0,oStatus(a0)
0000CB6A 60D4                       	bra.s	.SkipRange
0000CB6C                            
0000CB6C                            ; -------------------------------------------------------------------------------
0000CB6C                            
0000CB6C                            .Animate:
0000CB6C 2268 0030                  	movea.l	oVar30(a0),a1
0000CB70 4EF8 61F4                  	jmp	AnimateObject
0000CB74                            
0000CB74                            ; -------------------------------------------------------------------------------
0000CB74                            
0000CB74                            .StartDive:
0000CB74 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CB78 117C 0001 001C             	move.b	#1,oAnim(a0)
0000CB7E 4E75                       	rts
0000CB80                            ; End of function ObjMosqui_Main
0000CB80                            
0000CB80                            ; -------------------------------------------------------------------------------
0000CB80                            
0000CB80                            ObjMosqui_CheckInRange:
0000CB80 3029 000C                  	move.w	oY(a1),d0
0000CB84 9068 000C                  	sub.w	oY(a0),d0
0000CB88 0440 FFD0                  	subi.w	#-$30,d0
0000CB8C 0440 0070                  	subi.w	#$70,d0
0000CB90 6400                       	bcc.s	.End
0000CB92 3029 0008                  	move.w	oX(a1),d0
0000CB96 9068 0008                  	sub.w	oX(a0),d0
0000CB9A 3200                       	move.w	d0,d1
0000CB9C 0441 FFD0                  	subi.w	#-$30,d1
0000CBA0 0441 0060                  	subi.w	#$60,d1
0000CBA4                            
0000CBA4                            .End:
0000CBA4 4E75                       	rts
0000CBA6                            ; End of function ObjMosqui_CheckInRange
0000CBA6                            
0000CBA6                            ; -------------------------------------------------------------------------------
0000CBA6                            
0000CBA6                            ObjMosqui_Animate:
0000CBA6 2268 0030                  	movea.l	oVar30(a0),a1
0000CBAA 4EF8 61F4                  	jmp	AnimateObject
0000CBAE                            ; End of function ObjMosqui_Animate
0000CBAE                            
0000CBAE                            ; -------------------------------------------------------------------------------
0000CBAE                            
0000CBAE                            ObjMosqui_Dive:
0000CBAE 5C68 000C                  	addq.w	#6,oY(a0)
0000CBB2 4EB8 6F3C                  	jsr	CheckFloorEdge
0000CBB6 0C41 FFF8                  	cmpi.w	#-8,d1
0000CBBA 6E00                       	bgt.s	.End
0000CBBC 0441 FFF8                  	subi.w	#-8,d1
0000CBC0 D368 000C                  	add.w	d1,oY(a0)
0000CBC4 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CBC8 4A28 0001                  	tst.b	oRender(a0)
0000CBCC 6A00                       	bpl.s	.End
0000CBCE 303C 00B6                  	move.w	#$B6,d0
0000CBD2 4EB8 2708                  	jsr	PlayFMSound
0000CBD6                            
0000CBD6                            .End:
0000CBD6 4E75                       	rts
0000CBD8                            ; End of function ObjMosqui_Dive
0000CBD8                            
0000CBD8                            ; -------------------------------------------------------------------------------
0000CBD8                            
0000CBD8                            ObjMosqui_Wait:
0000CBD8 4A28 0001                  	tst.b	oRender(a0)
0000CBDC 6B00                       	bmi.s	.End
0000CBDE 4EF8 7D3C                  	jmp	CheckObjDespawnTime_Despawn
0000CBE2                            
0000CBE2                            ; -------------------------------------------------------------------------------
0000CBE2                            
0000CBE2                            .End:
0000CBE2 4E75                       	rts
0000CBE4                            ; End of function ObjMosqui_Wait
0000CBE4                            
0000CBE4                            ; -------------------------------------------------------------------------------
0000CBE4                            Ani_Mosqui1:
0000CBE4                            	include	"level/objects/mosqui/animnormal.asm"
0000CBE4                            .Anim:
0000CBE4 0000                       	dc.w	byte_20B6CE-.Anim
0000CBE6 0000                       	dc.w	byte_20B6D2-.Anim
0000CBE8 0100 01FF                  byte_20B6CE:	dc.b	1,	0, 1, $FF
0000CBEC 0602 0304 FC00             byte_20B6D2:	dc.b	6,	2, 3, 4, $FC, 0
0000CBEC 0602 0304 FC00             byte_20B6D2:	dc.b	6,	2, 3, 4, $FC, 0
0000CBF2                            	even
0000CBF2                            Ani_Mosqui2:
0000CBF2                            	include	"level/objects/mosqui/animdamaged.asm"
0000CBF2                            .Anim:
0000CBF2 0000                       	dc.w	byte_20B6DC-.Anim
0000CBF4 0000                       	dc.w	byte_20B6E0-.Anim
0000CBF6 0400 01FF                  byte_20B6DC:	dc.b	4,	0, 1, $FF
0000CBFA 0E02 0304 FC               byte_20B6E0:	dc.b	$E, 2, 3, 4, $FC
0000CBFA 0E02 0304 FC               byte_20B6E0:	dc.b	$E, 2, 3, 4, $FC
0000CC00 00                         	even
0000CC00                            MapSpr_Mosqui1:
0000CC00                            	include	"level/objects/mosqui/mapnormal.asm"
0000CC00                            .Map:
0000CC00 0000                       	dc.w	unk_20B6F0-.Map
0000CC02 0000                       	dc.w	unk_20B700-.Map
0000CC04 0000                       	dc.w	unk_20B70B-.Map
0000CC06 0000                       	dc.w	unk_20B716-.Map
0000CC08 0000                       	dc.w	unk_20B71C-.Map
0000CC0A 03                         unk_20B6F0:	dc.b	  3
0000CC0B F4                         	dc.b	$F4 ; ô
0000CC0C 08                         	dc.b	  8
0000CC0D 00                         	dc.b	  0
0000CC0E 00                         	dc.b	  0
0000CC0F F8                         	dc.b	$F8 ; ø
0000CC10 FC                         	dc.b	$FC ; ü
0000CC11 05                         	dc.b	  5
0000CC12 00                         	dc.b	  0
0000CC13 03                         	dc.b	  3
0000CC14 F0                         	dc.b	$F0 ; ð
0000CC15 FC                         	dc.b	$FC ; ü
0000CC16 05                         	dc.b	  5
0000CC17 00                         	dc.b	  0
0000CC18 07                         	dc.b	  7
0000CC19 00                         	dc.b	  0
0000CC1A 02                         unk_20B700:	dc.b	  2
0000CC1B FC                         	dc.b	$FC ; ü
0000CC1C 05                         	dc.b	  5
0000CC1D 00                         	dc.b	  0
0000CC1E 03                         	dc.b	  3
0000CC1F F0                         	dc.b	$F0 ; ð
0000CC20 FC                         	dc.b	$FC ; ü
0000CC21 05                         	dc.b	  5
0000CC22 00                         	dc.b	  0
0000CC23 0B                         	dc.b	 $B
0000CC24 00                         	dc.b	  0
0000CC25 02                         unk_20B70B:	dc.b	  2
0000CC26 F0                         	dc.b	$F0 ; ð
0000CC27 0A                         	dc.b	 $A
0000CC28 00                         	dc.b	  0
0000CC29 0F                         	dc.b	 $F
0000CC2A F8                         	dc.b	$F8 ; ø
0000CC2B 08                         	dc.b	  8
0000CC2C 04                         	dc.b	  4
0000CC2D 00                         	dc.b	  0
0000CC2E 18                         	dc.b	$18
0000CC2F F0                         	dc.b	$F0 ; ð
0000CC30 01                         unk_20B716:	dc.b	  1
0000CC31 F0                         	dc.b	$F0 ; ð
0000CC32 0B                         	dc.b	 $B
0000CC33 00                         	dc.b	  0
0000CC34 1A                         	dc.b	$1A
0000CC35 F8                         	dc.b	$F8 ; ø
0000CC36 01                         unk_20B71C:	dc.b	  1
0000CC37 F0                         	dc.b	$F0 ; ð
0000CC38 0B                         	dc.b	 $B
0000CC39 00                         	dc.b	  0
0000CC3A 26                         	dc.b	$26 ; &
0000CC3B F4                         	dc.b	$F4 ; ô
0000CC3B F4                         	dc.b	$F4 ; ô
0000CC3C                            	even
0000CC3C                            MapSpr_Mosqui2:
0000CC3C                            	include	"level/objects/mosqui/mapdamaged.asm"
0000CC3C                            .Map:
0000CC3C 0000                       	dc.w	unk_20B72C-.Map
0000CC3E 0000                       	dc.w	unk_20B73C-.Map
0000CC40 0000                       	dc.w	unk_20B747-.Map
0000CC42 0000                       	dc.w	unk_20B752-.Map
0000CC44 0000                       	dc.w	unk_20B758-.Map
0000CC46 03                         unk_20B72C:	dc.b	  3
0000CC47 F4                         	dc.b	$F4 ; ô
0000CC48 08                         	dc.b	  8
0000CC49 00                         	dc.b	  0
0000CC4A 00                         	dc.b	  0
0000CC4B F8                         	dc.b	$F8 ; ø
0000CC4C FC                         	dc.b	$FC ; ü
0000CC4D 05                         	dc.b	  5
0000CC4E 00                         	dc.b	  0
0000CC4F 32                         	dc.b	$32 ; 2
0000CC50 F0                         	dc.b	$F0 ; ð
0000CC51 FC                         	dc.b	$FC ; ü
0000CC52 05                         	dc.b	  5
0000CC53 00                         	dc.b	  0
0000CC54 07                         	dc.b	  7
0000CC55 00                         	dc.b	  0
0000CC56 02                         unk_20B73C:	dc.b	  2
0000CC57 FC                         	dc.b	$FC ; ü
0000CC58 05                         	dc.b	  5
0000CC59 00                         	dc.b	  0
0000CC5A 32                         	dc.b	$32 ; 2
0000CC5B F0                         	dc.b	$F0 ; ð
0000CC5C FC                         	dc.b	$FC ; ü
0000CC5D 05                         	dc.b	  5
0000CC5E 00                         	dc.b	  0
0000CC5F 0B                         	dc.b	 $B
0000CC60 00                         	dc.b	  0
0000CC61 02                         unk_20B747:	dc.b	  2
0000CC62 F0                         	dc.b	$F0 ; ð
0000CC63 0A                         	dc.b	 $A
0000CC64 00                         	dc.b	  0
0000CC65 0F                         	dc.b	 $F
0000CC66 F8                         	dc.b	$F8 ; ø
0000CC67 08                         	dc.b	  8
0000CC68 04                         	dc.b	  4
0000CC69 00                         	dc.b	  0
0000CC6A 36                         	dc.b	$36 ; 6
0000CC6B F0                         	dc.b	$F0 ; ð
0000CC6C 01                         unk_20B752:	dc.b	  1
0000CC6D F0                         	dc.b	$F0 ; ð
0000CC6E 0B                         	dc.b	 $B
0000CC6F 00                         	dc.b	  0
0000CC70 38                         	dc.b	$38 ; 8
0000CC71 F8                         	dc.b	$F8 ; ø
0000CC72 02                         unk_20B758:	dc.b	  2
0000CC73 00                         	dc.b	  0
0000CC74 01                         	dc.b	  1
0000CC75 00                         	dc.b	  0
0000CC76 44                         	dc.b	$44 ; D
0000CC77 FC                         	dc.b	$FC ; ü
0000CC78 F0                         	dc.b	$F0 ; ð
0000CC79 0B                         	dc.b	 $B
0000CC7A 00                         	dc.b	  0
0000CC7B 26                         	dc.b	$26 ; &
0000CC7C F4                         	dc.b	$F4 ; ô
0000CC7D 00                         	dc.b	  0
0000CC7D 00                         	dc.b	  0
0000CC7E                            	even
0000CC7E                            ; -------------------------------------------------------------------------------
0000CC7E                            
0000CC7E                            ObjTamabboh:
0000CC7E 0C28 0001 0028             	cmpi.b	#1,oSubtype(a0)
0000CC84 6700 0000                  	beq.w	ObjTamabbohMissile
0000CC88 4EB9 0000 0000             	jsr	DestroyOnGoodFuture
0000CC8E 7000                       	moveq	#0,d0
0000CC90 1028 0024                  	move.b	oRoutine(a0),d0
0000CC94 303B 0000                  	move.w	ObjTamabboh_Index(pc,d0.w),d0
0000CC98 4EBB 0000                  	jsr	ObjTamabboh_Index(pc,d0.w)
0000CC9C 4EB8 4012                  	jsr	DrawObject
0000CCA0 3028 002A                  	move.w	oVar2A(a0),d0
0000CCA4 4EF8 7D1E                  	jmp	CheckObjDespawn2Time
0000CCA8                            ; End of function ObjTamabboh
0000CCA8                            
0000CCA8                            ; -------------------------------------------------------------------------------
0000CCA8 0000                       ObjTamabboh_Index:dc.w	ObjTamabboh_Init-ObjTamabboh_Index
0000CCAA 0000                       	dc.w	ObjTamabboh_Position-ObjTamabboh_Index
0000CCAC 0000                       	dc.w	ObjTamabboh_Main-ObjTamabboh_Index
0000CCAE 0000                       	dc.w	ObjTamabboh_Wait1-ObjTamabboh_Index
0000CCB0 0000                       	dc.w	ObjTamabboh_Wait2-ObjTamabboh_Index
0000CCB2 0000                       	dc.w	ObjTamabboh_Fire-ObjTamabboh_Index
0000CCB4                            ; -------------------------------------------------------------------------------
0000CCB4                            
0000CCB4                            ObjTamabboh_Init:
0000CCB4 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CCB8 0028 0004 0001             	ori.b	#4,oRender(a0)
0000CCBE 117C 0004 0018             	move.b	#4,oPriority(a0)
0000CCC4 117C 002C 0020             	move.b	#$2C,oColType(a0)
0000CCCA 117C 0010 0017             	move.b	#$10,oXRadius(a0)
0000CCD0 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000CCD6 117C 000F 0016             	move.b	#$F,oYRadius(a0)
0000CCDC 3168 0008 002A             	move.w	oX(a0),oVar2A(a0)
0000CCE2 7004                       	moveq	#4,d0
0000CCE4 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000CCEA 4A28 0028                  	tst.b	oSubtype(a0)
0000CCEE 6600                       	bne.s	.AltMaps
0000CCF0 43FA 0000                  	lea	MapSpr_Tamabboh1(pc),a1
0000CCF4 45FA 0000                  	lea	Ani_Tamabboh1(pc),a2
0000CCF8 203C FFFF 6000             	move.l	#-$A000,d0
0000CCFE 6000                       	bra.s	.SetMaps
0000CD00                            
0000CD00                            ; -------------------------------------------------------------------------------
0000CD00                            
0000CD00                            .AltMaps:
0000CD00 43FA 0000                  	lea	MapSpr_Tamabboh2(pc),a1
0000CD04 45FA 0000                  	lea	Ani_Tamabboh2(pc),a2
0000CD08 203C FFFF B000             	move.l	#-$5000,d0
0000CD0E                            
0000CD0E                            .SetMaps:
0000CD0E 2149 0004                  	move.l	a1,4(a0)
0000CD12 214A 0030                  	move.l	a2,oVar30(a0)
0000CD16 2140 002C                  	move.l	d0,oVar2C(a0)
0000CD1A                            ; End of function ObjTamabboh_Init
0000CD1A                            
0000CD1A                            ; -------------------------------------------------------------------------------
0000CD1A                            
0000CD1A                            ObjTamabboh_Position:
0000CD1A 203C 0001 0000             	move.l	#$10000,d0
0000CD20 D1A8 000C                  	add.l	d0,oY(a0)
0000CD24 4EB8 6F3C                  	jsr	CheckFloorEdge
0000CD28 4A41                       	tst.w	d1
0000CD2A 6A00                       	bpl.s	.End
0000CD2C 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CD30                            
0000CD30                            .End:
0000CD30 4E75                       	rts
0000CD32                            ; End of function ObjTamabboh_Position
0000CD32                            
0000CD32                            ; -------------------------------------------------------------------------------
0000CD32                            
0000CD32                            ObjTamabboh_Main:
0000CD32 4A79 00FF 1906             	tst.w	(v_debug_mode).l
0000CD38 6600                       	bne.s	.SkipRange
0000CD3A 4A28 0028                  	tst.b	$28(a0)
0000CD3E 6600                       	bne.s	.SkipRange
0000CD40 4A68 0034                  	tst.w	$34(a0)
0000CD44 6700                       	beq.s	.DoRange
0000CD46 5368 0034                  	subq.w	#1,$34(a0)
0000CD4A 6000                       	bra.s	.SkipRange
0000CD4C                            
0000CD4C                            ; -------------------------------------------------------------------------------
0000CD4C                            
0000CD4C                            .DoRange:
0000CD4C 43F8 D000                  	lea	(v_player).w,a1
0000CD50 6100                       	bsr.s	ObjTamabboh_CheckInRange
0000CD52 6500                       	bcs.s	.NextState
0000CD54                            
0000CD54                            .SkipRange:
0000CD54 2028 002C                  	move.l	oVar2C(a0),d0
0000CD58 D1A8 0008                  	add.l	d0,oX(a0)
0000CD5C 3028 0008                  	move.w	oX(a0),d0
0000CD60 9068 002A                  	sub.w	oVar2A(a0),d0
0000CD64 6A00                       	bpl.s	.ChlTirm
0000CD66 4440                       	neg.w	d0
0000CD68                            
0000CD68                            .ChlTirm:
0000CD68 0C40 0080                  	cmpi.w	#$80,d0
0000CD6C 6C00                       	bge.s	.TurnAround
0000CD6E 4EB8 6F3C                  	jsr	CheckFloorEdge
0000CD72 0C41 FFF9                  	cmpi.w	#-7,d1
0000CD76 6D00                       	blt.s	.TurnAround
0000CD78 0C41 0007                  	cmpi.w	#7,d1
0000CD7C 6E00                       	bgt.s	.TurnAround
0000CD7E D368 000C                  	add.w	d1,oY(a0)
0000CD82 2268 0030                  	movea.l	oVar30(a0),a1
0000CD86 4EF8 61F4                  	jmp	AnimateObject
0000CD8A                            
0000CD8A                            ; -------------------------------------------------------------------------------
0000CD8A                            
0000CD8A                            .TurnAround:
0000CD8A 44A8 002C                  	neg.l	oVar2C(a0)
0000CD8E 0868 0000 0001             	bchg	#0,oRender(a0)
0000CD94 0868 0000 0022             	bchg	#0,oStatus(a0)
0000CD9A 6096                       	bra.s	ObjTamabboh_Main
0000CD9C                            
0000CD9C                            ; -------------------------------------------------------------------------------
0000CD9C                            
0000CD9C                            .NextState:
0000CD9C 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CDA0 4E75                       	rts
0000CDA2                            ; End of function ObjTamabboh_Main
0000CDA2                            
0000CDA2                            ; -------------------------------------------------------------------------------
0000CDA2                            
0000CDA2                            ObjTamabboh_CheckInRange:
0000CDA2 3029 000C                  	move.w	oY(a1),d0
0000CDA6 9068 000C                  	sub.w	oY(a0),d0
0000CDAA 0440 FFB0                  	subi.w	#-$50,d0
0000CDAE 0440 00A0                  	subi.w	#$A0,d0
0000CDB2 6400                       	bcc.s	.End
0000CDB4 3029 0008                  	move.w	oX(a1),d0
0000CDB8 9068 0008                  	sub.w	oX(a0),d0
0000CDBC 3200                       	move.w	d0,d1
0000CDBE 0441 FFB0                  	subi.w	#-$50,d1
0000CDC2 0441 00A0                  	subi.w	#$A0,d1
0000CDC6                            
0000CDC6                            .End:
0000CDC6 4E75                       	rts
0000CDC8                            ; End of function ObjTamabboh_CheckInRange
0000CDC8                            
0000CDC8                            ; -------------------------------------------------------------------------------
0000CDC8                            
0000CDC8                            ObjTamabboh_Wait1:
0000CDC8 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CDCC 117C 0001 001C             	move.b	#1,oAnim(a0)
0000CDD2                            ; End of function ObjTamabboh_Wait1
0000CDD2                            
0000CDD2                            ; -------------------------------------------------------------------------------
0000CDD2                            
0000CDD2                            ObjTamabboh_Wait2:
0000CDD2 2268 0030                  	movea.l	oVar30(a0),a1
0000CDD6 4EF8 61F4                  	jmp	AnimateObject
0000CDDA                            ; End of function ObjTamabboh_Wait2
0000CDDA                            
0000CDDA                            ; -------------------------------------------------------------------------------
0000CDDA                            
0000CDDA                            ObjTamabboh_Fire:
0000CDDA 117C 0004 0024             	move.b	#4,oRoutine(a0)
0000CDE0 117C 0000 001C             	move.b	#0,oAnim(a0)
0000CDE6 317C 0078 0034             	move.w	#$78,oVar34(a0)
0000CDEC 4A28 0028                  	tst.b	oSubtype(a0)
0000CDF0 6600                       	bne.s	.End
0000CDF2 4EB8 7CE4                  	jsr	FindObjSlot
0000CDF6 6600                       	bne.s	.End
0000CDF8 4A28 0001                  	tst.b	oRender(a0)
0000CDFC 6A00                       	bpl.s	.SkipSound
0000CDFE 303C 00C4                  	move.w	#$C4,d0
0000CE02 4EB8 2708                  	jsr	PlayFMSound
0000CE06                            
0000CE06                            .SkipSound:
0000CE06 6100                       	bsr.s	ObjTamabboh_InitMissile
0000CE08 51E9 003F                  	sf	oVar3F(a1)
0000CE0C 4EB8 7CE4                  	jsr	FindObjSlot
0000CE10 6600                       	bne.s	.End
0000CE12 6100                       	bsr.s	ObjTamabboh_InitMissile
0000CE14 50E9 003F                  	st	oVar3F(a1)
0000CE18                            
0000CE18                            .End:
0000CE18 4E75                       	rts
0000CE1A                            ; End of function ObjTamabboh_Fire
0000CE1A                            
0000CE1A                            ; -------------------------------------------------------------------------------
0000CE1A                            
0000CE1A                            ObjTamabboh_InitMissile:
0000CE1A 1290                       	move.b	oID(a0),oID(a1)
0000CE1C 137C 0001 0028             	move.b	#1,oSubtype(a1)
0000CE22 3368 0002 0002             	move.w	oTile(a0),oTile(a1)
0000CE28 1368 0018 0018             	move.b	oPriority(a0),oPriority(a1)
0000CE2E 5229 0018                  	addq.b	#1,oPriority(a1)
0000CE32 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000CE38 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000CE3E 0469 000A 000C             	subi.w	#10,oY(a1)
0000CE44 4E75                       	rts
0000CE46                            ; End of function ObjTamabboh_InitMissile
0000CE46                            
0000CE46                            ; -------------------------------------------------------------------------------
0000CE46                            Ani_Tamabboh1:
0000CE46                            	include	"level/objects/tamabboh/animnormal.asm"
0000CE46                            .Anim:
0000CE46 0000                       	dc.w	byte_20B946-.Anim
0000CE48 0000                       	dc.w	byte_20B94A-.Anim
0000CE4A 1D00 01FF                  byte_20B946:	dc.b	$1D, 0, 1,	$FF
0000CE4E 3B02 FC00                  byte_20B94A:	dc.b	$3B, 2, $FC, 0
0000CE4E 3B02 FC00                  byte_20B94A:	dc.b	$3B, 2, $FC, 0
0000CE52                            	even
0000CE52                            Ani_Tamabboh2:
0000CE52                            	include	"level/objects/tamabboh/animdamaged.asm"
0000CE52                            .Anim:
0000CE52 0000                       	dc.w	byte_20B952-.Anim
0000CE54 0000                       	dc.w	byte_20B964-.Anim
0000CE56 0500 0100 0100 0100 0100+  byte_20B952:	dc.b	5,	0, 1, 0, 1, 0, 1, 0, 1,	0, 1, 0, 1, 0, 1, 0, 1,	$FC
0000CE68 0B02 FC00                  byte_20B964:	dc.b	$B, 2, $FC, 0
0000CE68 0B02 FC00                  byte_20B964:	dc.b	$B, 2, $FC, 0
0000CE6C                            	even
0000CE6C                            	include	"level/objects/tamabboh/map.asm"
0000CE6C                            MapSpr_Tamabboh1:
0000CE6C 0000                       	dc.w	unk_20B96E-MapSpr_Tamabboh1
0000CE6E 0000                       	dc.w	unk_20B98A-MapSpr_Tamabboh1
0000CE70 0000                       	dc.w	unk_20B99A-MapSpr_Tamabboh1
0000CE72 03                         unk_20B96E:	dc.b	  3
0000CE73 F1                         	dc.b	$F1 ; ñ
0000CE74 0D                         	dc.b	 $D
0000CE75 00                         	dc.b	  0
0000CE76 00                         	dc.b	  0
0000CE77 F0                         	dc.b	$F0 ; ð
0000CE78 01                         	dc.b	  1
0000CE79 0C                         	dc.b	 $C
0000CE7A 00                         	dc.b	  0
0000CE7B 08                         	dc.b	  8
0000CE7C F0                         	dc.b	$F0 ; ð
0000CE7D 09                         	dc.b	  9
0000CE7E 08                         	dc.b	  8
0000CE7F 00                         	dc.b	  0
0000CE80 0C                         	dc.b	 $C
0000CE81 F8                         	dc.b	$F8 ; ø
0000CE82                            
0000CE82                            MapSpr_Tamabboh2:
0000CE82 0000                       	dc.w	unk_20B984-MapSpr_Tamabboh2
0000CE84 0000                       	dc.w	unk_20B98A-MapSpr_Tamabboh2
0000CE86 0000                       	dc.w	unk_20B99A-MapSpr_Tamabboh2
0000CE88 01                         unk_20B984:	dc.b	  1
0000CE89 F0                         	dc.b	$F0 ; ð
0000CE8A 0F                         	dc.b	 $F
0000CE8B 00                         	dc.b	  0
0000CE8C 2B                         	dc.b	$2B ; +
0000CE8D F0                         	dc.b	$F0 ; ð
0000CE8E 03                         unk_20B98A:	dc.b	  3
0000CE8F F2                         	dc.b	$F2 ; ò
0000CE90 0D                         	dc.b	 $D
0000CE91 00                         	dc.b	  0
0000CE92 00                         	dc.b	  0
0000CE93 F0                         	dc.b	$F0 ; ð
0000CE94 02                         	dc.b	  2
0000CE95 0C                         	dc.b	 $C
0000CE96 00                         	dc.b	  0
0000CE97 0F                         	dc.b	 $F
0000CE98 F0                         	dc.b	$F0 ; ð
0000CE99 0A                         	dc.b	 $A
0000CE9A 08                         	dc.b	  8
0000CE9B 00                         	dc.b	  0
0000CE9C 13                         	dc.b	$13
0000CE9D F8                         	dc.b	$F8 ; ø
0000CE9E 02                         unk_20B99A:	dc.b	  2
0000CE9F F0                         	dc.b	$F0 ; ð
0000CEA0 08                         	dc.b	  8
0000CEA1 00                         	dc.b	  0
0000CEA2 16                         	dc.b	$16
0000CEA3 F7                         	dc.b	$F7 ; ÷
0000CEA4 F8                         	dc.b	$F8 ; ø
0000CEA5 0E                         	dc.b	 $E
0000CEA6 00                         	dc.b	  0
0000CEA7 19                         	dc.b	$19
0000CEA8 EF                         	dc.b	$EF ; ï
0000CEA9 00                         	dc.b	  0
0000CEAA                            	
0000CEAA                            	
0000CEAA                            	even
0000CEAA                            
0000CEAA                            ; -------------------------------------------------------------------------------
0000CEAA                            
0000CEAA                            ObjTamabbohMissile:
0000CEAA 7000                       	moveq	#0,d0
0000CEAC 1028 0024                  	move.b	oRoutine(a0),d0
0000CEB0 303B 0000                  	move.w	ObjTamabbohMissile_Index(pc,d0.w),d0
0000CEB4 4EBB 0000                  	jsr	ObjTamabbohMissile_Index(pc,d0.w)
0000CEB8 4EF8 4012                  	jmp	DrawObject
0000CEBC                            ; End of function ObjTamabbohMissile
0000CEBC                            
0000CEBC                            ; -------------------------------------------------------------------------------
0000CEBC 0000                       ObjTamabbohMissile_Index:dc.w	ObjTamabbohMissile_Init-ObjTamabbohMissile_Index
0000CEBE 0000                       	dc.w	ObjTamabbohMissile_Main-ObjTamabbohMissile_Index
0000CEC0                            ; -------------------------------------------------------------------------------
0000CEC0                            
0000CEC0                            ObjTamabbohMissile_Init:
0000CEC0 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CEC4 0028 0004 0001             	ori.b	#4,oRender(a0)
0000CECA 117C 00AD 0020             	move.b	#$AD,oColType(a0)
0000CED0 117C 0008 0017             	move.b	#8,oXRadius(a0)
0000CED6 117C 0008 0019             	move.b	#8,oWidth(a0)
0000CEDC 117C 0008 0016             	move.b	#8,oYRadius(a0)
0000CEE2 217C 0000 0000 0004        	move.l	#MapSpr_TamabbohMissile,oMap(a0)
0000CEEA 217C 0000 0000 0032        	move.l	#0,oVar32(a0)
0000CEF2 217C 0000 2000 0036        	move.l	#$2000,oVar36(a0)
0000CEFA 4A28 003F                  	tst.b	oVar3F(a0)
0000CEFE 6600                       	bne.s	.FlipX
0000CF00 203C 0002 0000             	move.l	#$20000,d0
0000CF06 223C FFFC 0000             	move.l	#-$40000,d1
0000CF0C 6000                       	bra.s	.SetSpeeds
0000CF0E                            
0000CF0E                            ; -------------------------------------------------------------------------------
0000CF0E                            
0000CF0E                            .FlipX:
0000CF0E 203C FFFE 0000             	move.l	#-$20000,d0
0000CF14 223C FFFC 0000             	move.l	#-$40000,d1
0000CF1A                            
0000CF1A                            .SetSpeeds:
0000CF1A 2140 002A                  	move.l	d0,oVar2A(a0)
0000CF1E 2141 002E                  	move.l	d1,oVar2E(a0)
0000CF22 4E75                       	rts
0000CF24                            ; End of function ObjTamabbohMissile_Init
0000CF24                            
0000CF24                            ; -------------------------------------------------------------------------------
0000CF24                            
0000CF24                            ObjTamabbohMissile_Main:
0000CF24 4A28 0001                  	tst.b	oRender(a0)
0000CF28 6B00                       	bmi.s	.Action
0000CF2A 4EF8 40BE                  	jmp	DeleteObject
0000CF2E                            
0000CF2E                            ; -------------------------------------------------------------------------------
0000CF2E                            
0000CF2E                            .Action:
0000CF2E 4EB8 6F3C                  	jsr	CheckFloorEdge
0000CF32 4A41                       	tst.w	d1
0000CF34 6A00                       	bpl.s	.MoveAnim
0000CF36 4EF8 40BE                  	jmp	DeleteObject
0000CF3A                            
0000CF3A                            ; -------------------------------------------------------------------------------
0000CF3A                            
0000CF3A                            .MoveAnim:
0000CF3A 2028 002A                  	move.l	oVar2A(a0),d0
0000CF3E D1A8 0008                  	add.l	d0,oX(a0)
0000CF42 2028 002E                  	move.l	oVar2E(a0),d0
0000CF46 D1A8 000C                  	add.l	d0,oY(a0)
0000CF4A 2028 0032                  	move.l	oVar32(a0),d0
0000CF4E D1A8 002A                  	add.l	d0,oVar2A(a0)
0000CF52 2028 0036                  	move.l	oVar36(a0),d0
0000CF56 D1A8 002E                  	add.l	d0,oVar2E(a0)
0000CF5A 43FA 0000                  	lea	Ani_TamabbohMissile(pc),a1
0000CF5E 4EF8 61F4                  	jmp	AnimateObject
0000CF62                            ; End of function ObjTamabbohMissile_Main
0000CF62                            
0000CF62                            ; -------------------------------------------------------------------------------
0000CF62                            Ani_TamabbohMissile:
0000CF62                            	include	"level/objects/tamabboh/animmissile.asm"
0000CF62                            .Anim:
0000CF62 0000                       	dc.w	byte_20BA6A-.Anim
0000CF64 0200 0102 03FF             byte_20BA6A:	dc.b	2,	0, 1, 2, 3, $FF
0000CF64 0200 0102 03FF             byte_20BA6A:	dc.b	2,	0, 1, 2, 3, $FF
0000CF6A                            	even
0000CF6A                            MapSpr_TamabbohMissile:
0000CF6A                            	include	"level/objects/tamabboh/mapmissile.asm"
0000CF6A                            .Map:
0000CF6A 0000                       	dc.w	unk_20BA78-.Map
0000CF6C 0000                       	dc.w	unk_20BA7E-.Map
0000CF6E 0000                       	dc.w	unk_20BA84-.Map
0000CF70 0000                       	dc.w	unk_20BA8F-.Map
0000CF72 01                         unk_20BA78:	dc.b	  1
0000CF73 FC                         	dc.b	$FC ; ü
0000CF74 00                         	dc.b	  0
0000CF75 00                         	dc.b	  0
0000CF76 25                         	dc.b	$25 ; %
0000CF77 FC                         	dc.b	$FC ; ü
0000CF78 01                         unk_20BA7E:	dc.b	  1
0000CF79 FC                         	dc.b	$FC ; ü
0000CF7A 00                         	dc.b	  0
0000CF7B 00                         	dc.b	  0
0000CF7C 26                         	dc.b	$26 ; &
0000CF7D FC                         	dc.b	$FC ; ü
0000CF7E 02                         unk_20BA84:	dc.b	  2
0000CF7F F8                         	dc.b	$F8 ; ø
0000CF80 04                         	dc.b	  4
0000CF81 00                         	dc.b	  0
0000CF82 27                         	dc.b	$27 ; '
0000CF83 F8                         	dc.b	$F8 ; ø
0000CF84 00                         	dc.b	  0
0000CF85 04                         	dc.b	  4
0000CF86 10                         	dc.b	$10
0000CF87 27                         	dc.b	$27 ; '
0000CF88 F8                         	dc.b	$F8 ; ø
0000CF89 02                         unk_20BA8F:	dc.b	  2
0000CF8A F8                         	dc.b	$F8 ; ø
0000CF8B 04                         	dc.b	  4
0000CF8C 00                         	dc.b	  0
0000CF8D 29                         	dc.b	$29 ; )
0000CF8E F8                         	dc.b	$F8 ; ø
0000CF8F 00                         	dc.b	  0
0000CF90 04                         	dc.b	  4
0000CF91 10                         	dc.b	$10
0000CF92 29                         	dc.b	$29 ; )
0000CF93 F8                         	dc.b	$F8 ; ø
0000CF93 F8                         	dc.b	$F8 ; ø
0000CF94                            	even
0000CF94                            ; -------------------------------------------------------------------------------
0000CF94                            
0000CF94                            ObjTagaTaga:
0000CF94 4EB9 0000 0000             	jsr	DestroyOnGoodFuture
0000CF9A 7000                       	moveq	#0,d0
0000CF9C 1028 0024                  	move.b	oRoutine(a0),d0
0000CFA0 303B 0000                  	move.w	ObjTagaTaga_Index(pc,d0.w),d0
0000CFA4 4EBB 0000                  	jsr	ObjTagaTaga_Index(pc,d0.w)
0000CFA8 4EB8 4012                  	jsr	DrawObject
0000CFAC 3028 002A                  	move.w	oVar2A(a0),d0
0000CFB0 4EF8 7D1E                  	jmp	CheckObjDespawn2Time
0000CFB4                            ; End of function ObjTagaTaga
0000CFB4                            
0000CFB4                            ; -------------------------------------------------------------------------------
0000CFB4 0000                       ObjTagaTaga_Index:dc.w	ObTagaTaga_Init-ObjTagaTaga_Index
0000CFB6 0000                       	dc.w	ObjTagaTaga_Init2-ObjTagaTaga_Index
0000CFB8 0000                       	dc.w	ObjTagaTaga_Animate-ObjTagaTaga_Index
0000CFBA 0000                       	dc.w	ObjTagaTaga_Jump-ObjTagaTaga_Index
0000CFBC 0000                       	dc.w	ObjTagaTaga_Main-ObjTagaTaga_Index
0000CFBE                            ; -------------------------------------------------------------------------------
0000CFBE                            
0000CFBE                            ObTagaTaga_Init:
0000CFBE 5428 0024                  	addq.b	#2,oRoutine(a0)
0000CFC2 0028 0004 0001             	ori.b	#4,oRender(a0)
0000CFC8 117C 0003 0018             	move.b	#3,oPriority(a0)
0000CFCE 117C 0010 0017             	move.b	#$10,oXRadius(a0)
0000CFD4 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000CFDA 117C 0016 0016             	move.b	#$16,oYRadius(a0)
0000CFE0 3168 0008 002A             	move.w	oX(a0),oVar2A(a0)
0000CFE6 3168 000C 002C             	move.w	oY(a0),oVar2C(a0)
0000CFEC 7003                       	moveq	#3,d0
0000CFEE 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000CFF4 4A28 0028                  	tst.b	oSubtype(a0)
0000CFF8 6600                       	bne.s	.Damaged
0000CFFA 43FA 0000                  	lea	MapSpr_TagaTaga1(pc),a1
0000CFFE 45FA 0000                  	lea	Ani_TagaTaga1(pc),a2
0000D002 203C FFFC 4000             	move.l	#-$3C000,d0
0000D008 223C 0000 1000             	move.l	#$1000,d1
0000D00E 6000                       	bra.s	.SetInfo
0000D010                            
0000D010                            ; -------------------------------------------------------------------------------
0000D010                            
0000D010                            .Damaged:
0000D010 43FA 0000                  	lea	MapSpr_TagaTaga2(pc),a1
0000D014 45FA 0000                  	lea	Ani_TagaTaga2(pc),a2
0000D018 203C FFFD 0000             	move.l	#-$30000,d0
0000D01E 223C 0000 1000             	move.l	#$1000,d1
0000D024                            
0000D024                            .SetInfo:
0000D024 2149 0004                  	move.l	a1,oMap(a0)
0000D028 214A 003C                  	move.l	a2,oVar3C(a0)
0000D02C 2140 0030                  	move.l	d0,oVar30(a0)
0000D030 2141 0038                  	move.l	d1,oVar38(a0)
0000D034                            ; End of function ObTagaTaga_Init
0000D034                            
0000D034                            ; -------------------------------------------------------------------------------
0000D034                            
0000D034                            ObjTagaTaga_Init2:
0000D034 5428 0024                  	addq.b	#2,oRoutine(a0)
0000D038 317C 00FF 001C             	move.w	#$FF,oAnim(a0)
0000D03E 117C 0000 0020             	move.b	#0,oColType(a0)
0000D044 2168 002C 000C             	move.l	oVar2C(a0),oY(a0)
0000D04A                            ; End of function ObjTagaTaga_Init2
0000D04A                            
0000D04A                            ; -------------------------------------------------------------------------------
0000D04A                            
0000D04A                            ObjTagaTaga_Animate:
0000D04A 2268 003C                  	movea.l	oVar3C(a0),a1
0000D04E 4EF8 61F4                  	jmp	AnimateObject
0000D052                            ; End of function ObjTagaTaga_Animate
0000D052                            
0000D052                            ; -------------------------------------------------------------------------------
0000D052                            
0000D052                            ObjTagaTaga_Jump:
0000D052 5428 0024                  	addq.b	#2,oRoutine(a0)
0000D056 317C 01FF 001C             	move.w	#$1FF,oAnim(a0)
0000D05C 117C 002E 0020             	move.b	#$2E,oColType(a0)
0000D062 2168 002C 000C             	move.l	oVar2C(a0),oY(a0)
0000D068 2168 0030 0034             	move.l	oVar30(a0),oVar34(a0)
0000D06E 4A28 0001                  	tst.b	oRender(a0)
0000D072 6A00                       	bpl.s	ObjTagaTaga_Main
0000D074 303C 00A2                  	move.w	#$A2,d0   ; Rest Here
0000D078 4EB8 2708                  	jsr	PlayFMSound
0000D07C                            ; End of function ObjTagaTaga_Jump
0000D07C                            
0000D07C                            ; -------------------------------------------------------------------------------
0000D07C                            
0000D07C                            ObjTagaTaga_Main:
0000D07C 2028 0034                  	move.l	oVar34(a0),d0
0000D080 D1A8 000C                  	add.l	d0,oY(a0)
0000D084 2028 0038                  	move.l	oVar38(a0),d0
0000D088 D1A8 0034                  	add.l	d0,oVar34(a0)
0000D08C 3028 000C                  	move.w	oY(a0),d0
0000D090 B068 002C                  	cmp.w	oVar2C(a0),d0
0000D094 6F00                       	ble.s	ObjTagaTaga_DoAnim
0000D096 117C 0002 0024             	move.b	#2,oRoutine(a0)
0000D09C 4A28 0001                  	tst.b	oRender(a0)
0000D0A0 6A00                       	bpl.s	ObjTagaTaga_DoAnim
0000D0A2                            
0000D0A2 303C 00A2                  	move.w	#$A2,d0
0000D0A6 4EB8 2708                  	jsr	PlayFMSound
0000D0AA                            
0000D0AA                            ObjTagaTaga_DoAnim:
0000D0AA 2268 003C                  	movea.l	$3C(a0),a1
0000D0AE 4EF8 61F4                  	jmp	AnimateObject
0000D0B2                            ; End of function ObjTagaTaga_Main
0000D0B2                            
0000D0B2                            ; -------------------------------------------------------------------------------
0000D0B2                            Ani_TagaTaga1:
0000D0B2                            	include	"level/objects/tagataga/animnormal.asm"
0000D0B2                            .Anim:
0000D0B2 0000                       	dc.w	byte_20BBC8-.Anim
0000D0B4 0000                       	dc.w	byte_20BBCB-.Anim
0000D0B6 5906 FC                    byte_20BBC8:	dc.b	$59, 6, $FC
0000D0B9 0700 0000 0100 0102 0305+  byte_20BBCB:	dc.b	7,	0, 0, 0, 1, 0, 1, 2, 3,	5, 5, 5, 5, 4, 5, 4, 5,	4, 5, $FF
0000D0CD 00                         	dc.b	0
0000D0CD 00                         	dc.b	0
0000D0CE                            	even
0000D0CE                            Ani_TagaTaga2:
0000D0CE                            	include	"level/objects/tagataga/animdamaged.asm"
0000D0CE                            .Anim:
0000D0CE 0000                       	dc.w	byte_20BBE4-.Anim
0000D0D0 0000                       	dc.w	byte_20BBE7-.Anim
0000D0D2 5906 FC                    byte_20BBE4:	dc.b	$59, 6, $FC
0000D0D5 0400 0000 0000 0000 0002+  byte_20BBE7:	dc.b	4,	0, 0, 0, 0, 0, 0, 0, 0,	2, 2, 3, 3, 4, 4, 4, 4,	4, 4, 4, 4, 4, 4, 4, $FF
0000D0D5 0400 0000 0000 0000 0002+  byte_20BBE7:	dc.b	4,	0, 0, 0, 0, 0, 0, 0, 0,	2, 2, 3, 3, 4, 4, 4, 4,	4, 4, 4, 4, 4, 4, 4, $FF
0000D0EE                            	even
0000D0EE                            	include	"level/objects/tagataga/map.asm"
0000D0EE                            MapSpr_TagaTaga1:
0000D0EE 0000                       	dc.w	unk_20BCC4-MapSpr_TagaTaga1
0000D0F0 0000                       	dc.w	unk_20BCE4-MapSpr_TagaTaga1
0000D0F2 0000                       	dc.w	unk_20BD04-MapSpr_TagaTaga1
0000D0F4 0000                       	dc.w	unk_20BC0E-MapSpr_TagaTaga1
0000D0F6 0000                       	dc.w	unk_20BC23-MapSpr_TagaTaga1
0000D0F8 0000                       	dc.w	unk_20BC42-MapSpr_TagaTaga1
0000D0FA 0000                       	dc.w	unk_20BD10-MapSpr_TagaTaga1
0000D0FC                            unk_20BC0E:
0000D0FC 04                         	dc.b	  4
0000D0FD F0                         	dc.b	$F0 ; ð
0000D0FE 05                         	dc.b	  5
0000D0FF 00                         	dc.b	  0
0000D100 0D                         	dc.b	 $D
0000D101 F0                         	dc.b	$F0 ; ð
0000D102 F0                         	dc.b	$F0 ; ð
0000D103 05                         	dc.b	  5
0000D104 08                         	dc.b	  8
0000D105 0D                         	dc.b	 $D
0000D106 00                         	dc.b	  0
0000D107 00                         	dc.b	  0
0000D108 05                         	dc.b	  5
0000D109 00                         	dc.b	  0
0000D10A 11                         	dc.b	$11
0000D10B F0                         	dc.b	$F0 ; ð
0000D10C 00                         	dc.b	  0
0000D10D 05                         	dc.b	  5
0000D10E 08                         	dc.b	  8
0000D10F 11                         	dc.b	$11
0000D110 00                         	dc.b	  0
0000D111                            unk_20BC23:
0000D111 06                         	dc.b	  6
0000D112 FA                         	dc.b	$FA ; ú
0000D113 00                         	dc.b	  0
0000D114 10                         	dc.b	$10
0000D115 00                         	dc.b	  0
0000D116 F0                         	dc.b	$F0 ; ð
0000D117 EA                         	dc.b	$EA ; ê
0000D118 03                         	dc.b	  3
0000D119 00                         	dc.b	  0
0000D11A 15                         	dc.b	$15
0000D11B F8                         	dc.b	$F8 ; ø
0000D11C EA                         	dc.b	$EA ; ê
0000D11D 03                         	dc.b	  3
0000D11E 08                         	dc.b	  8
0000D11F 15                         	dc.b	$15
0000D120 00                         	dc.b	  0
0000D121 FA                         	dc.b	$FA ; ú
0000D122 00                         	dc.b	  0
0000D123 18                         	dc.b	$18
0000D124 00                         	dc.b	  0
0000D125 08                         	dc.b	  8
0000D126 FE                         	dc.b	$FE ; þ
0000D127 06                         	dc.b	  6
0000D128 10                         	dc.b	$10
0000D129 19                         	dc.b	$19
0000D12A F0                         	dc.b	$F0 ; ð
0000D12B FE                         	dc.b	$FE ; þ
0000D12C 06                         	dc.b	  6
0000D12D 18                         	dc.b	$18
0000D12E 19                         	dc.b	$19
0000D12F 00                         	dc.b	  0
0000D130                            unk_20BC42:
0000D130 06                         	dc.b	  6
0000D131 FA                         	dc.b	$FA ; ú
0000D132 00                         	dc.b	  0
0000D133 10                         	dc.b	$10
0000D134 00                         	dc.b	  0
0000D135 F0                         	dc.b	$F0 ; ð
0000D136 EA                         	dc.b	$EA ; ê
0000D137 03                         	dc.b	  3
0000D138 00                         	dc.b	  0
0000D139 15                         	dc.b	$15
0000D13A F8                         	dc.b	$F8 ; ø
0000D13B EA                         	dc.b	$EA ; ê
0000D13C 03                         	dc.b	  3
0000D13D 08                         	dc.b	  8
0000D13E 15                         	dc.b	$15
0000D13F 00                         	dc.b	  0
0000D140 FA                         	dc.b	$FA ; ú
0000D141 00                         	dc.b	  0
0000D142 18                         	dc.b	$18
0000D143 00                         	dc.b	  0
0000D144 08                         	dc.b	  8
0000D145 FE                         	dc.b	$FE ; þ
0000D146 06                         	dc.b	  6
0000D147 10                         	dc.b	$10
0000D148 1F                         	dc.b	$1F
0000D149 F0                         	dc.b	$F0 ; ð
0000D14A FE                         	dc.b	$FE ; þ
0000D14B 06                         	dc.b	  6
0000D14C 18                         	dc.b	$18
0000D14D 1F                         	dc.b	$1F
0000D14E 00                         	dc.b	  0
0000D14F 00                         	dc.b	  0
0000D150                            
0000D150                            MapSpr_TagaTaga2:
0000D150 0000                       	dc.w	unk_20BCC4-MapSpr_TagaTaga2
0000D152 0000                       	dc.w	unk_20BCE4-MapSpr_TagaTaga2
0000D154 0000                       	dc.w	unk_20BD04-MapSpr_TagaTaga2
0000D156 0000                       	dc.w	unk_20BC70-MapSpr_TagaTaga2
0000D158 0000                       	dc.w	unk_20BC85-MapSpr_TagaTaga2
0000D15A 0000                       	dc.w	unk_20BCA4-MapSpr_TagaTaga2
0000D15C 0000                       	dc.w	unk_20BD10-MapSpr_TagaTaga2
0000D15E 04                         unk_20BC70:	dc.b	  4
0000D15F F0                         	dc.b	$F0 ; ð
0000D160 05                         	dc.b	  5
0000D161 00                         	dc.b	  0
0000D162 25                         	dc.b	$25 ; %
0000D163 F0                         	dc.b	$F0 ; ð
0000D164 F0                         	dc.b	$F0 ; ð
0000D165 05                         	dc.b	  5
0000D166 08                         	dc.b	  8
0000D167 25                         	dc.b	$25 ; %
0000D168 00                         	dc.b	  0
0000D169 00                         	dc.b	  0
0000D16A 05                         	dc.b	  5
0000D16B 00                         	dc.b	  0
0000D16C 11                         	dc.b	$11
0000D16D F0                         	dc.b	$F0 ; ð
0000D16E 00                         	dc.b	  0
0000D16F 05                         	dc.b	  5
0000D170 08                         	dc.b	  8
0000D171 11                         	dc.b	$11
0000D172 00                         	dc.b	  0
0000D173 06                         unk_20BC85:	dc.b	  6
0000D174 FA                         	dc.b	$FA ; ú
0000D175 00                         	dc.b	  0
0000D176 10                         	dc.b	$10
0000D177 00                         	dc.b	  0
0000D178 F0                         	dc.b	$F0 ; ð
0000D179 EA                         	dc.b	$EA ; ê
0000D17A 03                         	dc.b	  3
0000D17B 00                         	dc.b	  0
0000D17C 29                         	dc.b	$29 ; )
0000D17D F8                         	dc.b	$F8 ; ø
0000D17E EA                         	dc.b	$EA ; ê
0000D17F 03                         	dc.b	  3
0000D180 08                         	dc.b	  8
0000D181 29                         	dc.b	$29 ; )
0000D182 00                         	dc.b	  0
0000D183 FA                         	dc.b	$FA ; ú
0000D184 00                         	dc.b	  0
0000D185 18                         	dc.b	$18
0000D186 00                         	dc.b	  0
0000D187 08                         	dc.b	  8
0000D188 FE                         	dc.b	$FE ; þ
0000D189 06                         	dc.b	  6
0000D18A 10                         	dc.b	$10
0000D18B 19                         	dc.b	$19
0000D18C F0                         	dc.b	$F0 ; ð
0000D18D FE                         	dc.b	$FE ; þ
0000D18E 06                         	dc.b	  6
0000D18F 18                         	dc.b	$18
0000D190 19                         	dc.b	$19
0000D191 00                         	dc.b	  0
0000D192 06                         unk_20BCA4:	dc.b	  6
0000D193 FA                         	dc.b	$FA ; ú
0000D194 00                         	dc.b	  0
0000D195 10                         	dc.b	$10
0000D196 00                         	dc.b	  0
0000D197 F0                         	dc.b	$F0 ; ð
0000D198 EA                         	dc.b	$EA ; ê
0000D199 03                         	dc.b	  3
0000D19A 00                         	dc.b	  0
0000D19B 29                         	dc.b	$29 ; )
0000D19C F8                         	dc.b	$F8 ; ø
0000D19D EA                         	dc.b	$EA ; ê
0000D19E 03                         	dc.b	  3
0000D19F 08                         	dc.b	  8
0000D1A0 29                         	dc.b	$29 ; )
0000D1A1 00                         	dc.b	  0
0000D1A2 FA                         	dc.b	$FA ; ú
0000D1A3 00                         	dc.b	  0
0000D1A4 18                         	dc.b	$18
0000D1A5 00                         	dc.b	  0
0000D1A6 08                         	dc.b	  8
0000D1A7 FE                         	dc.b	$FE ; þ
0000D1A8 06                         	dc.b	  6
0000D1A9 10                         	dc.b	$10
0000D1AA 1F                         	dc.b	$1F
0000D1AB F0                         	dc.b	$F0 ; ð
0000D1AC FE                         	dc.b	$FE ; þ
0000D1AD 06                         	dc.b	  6
0000D1AE 18                         	dc.b	$18
0000D1AF 1F                         	dc.b	$1F
0000D1B0 00                         	dc.b	  0
0000D1B1 00                         	dc.b	  0
0000D1B2 06                         unk_20BCC4:	dc.b	  6
0000D1B3 FE                         	dc.b	$FE ; þ
0000D1B4 00                         	dc.b	  0
0000D1B5 00                         	dc.b	  0
0000D1B6 00                         	dc.b	  0
0000D1B7 F0                         	dc.b	$F0 ; ð
0000D1B8 F6                         	dc.b	$F6 ; ö
0000D1B9 03                         	dc.b	  3
0000D1BA 00                         	dc.b	  0
0000D1BB 01                         	dc.b	  1
0000D1BC F8                         	dc.b	$F8 ; ø
0000D1BD F6                         	dc.b	$F6 ; ö
0000D1BE 03                         	dc.b	  3
0000D1BF 08                         	dc.b	  8
0000D1C0 01                         	dc.b	  1
0000D1C1 00                         	dc.b	  0
0000D1C2 FE                         	dc.b	$FE ; þ
0000D1C3 00                         	dc.b	  0
0000D1C4 08                         	dc.b	  8
0000D1C5 00                         	dc.b	  0
0000D1C6 08                         	dc.b	  8
0000D1C7 EA                         	dc.b	$EA ; ê
0000D1C8 06                         	dc.b	  6
0000D1C9 00                         	dc.b	  0
0000D1CA 19                         	dc.b	$19
0000D1CB F0                         	dc.b	$F0 ; ð
0000D1CC EA                         	dc.b	$EA ; ê
0000D1CD 06                         	dc.b	  6
0000D1CE 08                         	dc.b	  8
0000D1CF 19                         	dc.b	$19
0000D1D0 00                         	dc.b	  0
0000D1D1 00                         	dc.b	  0
0000D1D2 06                         unk_20BCE4:	dc.b	  6
0000D1D3 FE                         	dc.b	$FE ; þ
0000D1D4 00                         	dc.b	  0
0000D1D5 00                         	dc.b	  0
0000D1D6 00                         	dc.b	  0
0000D1D7 F0                         	dc.b	$F0 ; ð
0000D1D8 F6                         	dc.b	$F6 ; ö
0000D1D9 03                         	dc.b	  3
0000D1DA 00                         	dc.b	  0
0000D1DB 01                         	dc.b	  1
0000D1DC F8                         	dc.b	$F8 ; ø
0000D1DD F6                         	dc.b	$F6 ; ö
0000D1DE 03                         	dc.b	  3
0000D1DF 08                         	dc.b	  8
0000D1E0 01                         	dc.b	  1
0000D1E1 00                         	dc.b	  0
0000D1E2 FE                         	dc.b	$FE ; þ
0000D1E3 00                         	dc.b	  0
0000D1E4 08                         	dc.b	  8
0000D1E5 00                         	dc.b	  0
0000D1E6 08                         	dc.b	  8
0000D1E7 EA                         	dc.b	$EA ; ê
0000D1E8 06                         	dc.b	  6
0000D1E9 00                         	dc.b	  0
0000D1EA 1F                         	dc.b	$1F
0000D1EB F0                         	dc.b	$F0 ; ð
0000D1EC EA                         	dc.b	$EA ; ê
0000D1ED 06                         	dc.b	  6
0000D1EE 08                         	dc.b	  8
0000D1EF 1F                         	dc.b	$1F
0000D1F0 00                         	dc.b	  0
0000D1F1 00                         	dc.b	  0
0000D1F2 02                         unk_20BD04:	dc.b	  2
0000D1F3 F0                         	dc.b	$F0 ; ð
0000D1F4 07                         	dc.b	  7
0000D1F5 00                         	dc.b	  0
0000D1F6 05                         	dc.b	  5
0000D1F7 F0                         	dc.b	$F0 ; ð
0000D1F8 F0                         	dc.b	$F0 ; ð
0000D1F9 07                         	dc.b	  7
0000D1FA 08                         	dc.b	  8
0000D1FB 05                         	dc.b	  5
0000D1FC 00                         	dc.b	  0
0000D1FD 00                         	dc.b	  0
0000D1FE 00                         unk_20BD10:	dc.b	  0
0000D1FF 00                         	dc.b	  0
0000D1FF 00                         	dc.b	  0
0000D200                            	even
0000D200                            
0000D200                            ; -------------------------------------------------------------------------------
0000D200                            
0000D200                            ObjNull23:
0000D200 4E75                       	rts
0000D202                            ; End of function ObjNull23
0000D202                            
0000D202                            ; -------------------------------------------------------------------------------
0000D202                            
0000D202                            ObjSpringBoard_Platform:
0000D202 4A39 00FF 1906             	tst.b	(v_debug_mode).l
0000D208 6600                       	bne.s	.NoTouch
0000D20A 0C29 0006 0024             	cmpi.b	#6,oRoutine(a1)
0000D210 6400                       	bcc.s	.NoTouch
0000D212 4A69 0012                  	tst.w	oYVel(a1)
0000D216 6B00                       	bmi.s	.NoTouch
0000D218 6000                       	bra.s	.ChkTouch
0000D21A                            
0000D21A                            ; -------------------------------------------------------------------------------
0000D21A                            
0000D21A                            .NoTouch:
0000D21A 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000D220 7200                       	moveq	#0,d1
0000D222 4E75                       	rts
0000D224                            
0000D224                            ; -------------------------------------------------------------------------------
0000D224                            
0000D224                            .ChkTouch:
0000D224 45F9 0000 0000             	lea	(ObjSpringBoard_Size).l,a2
0000D22A 0240 0007                  	andi.w	#7,d0
0000D22E E540                       	asl.w	#2,d0
0000D230 45F2 0000                  	lea	(a2,d0.w),a2
0000D234 3028 0008                  	move.w	oX(a0),d0
0000D238 3229 0008                  	move.w	oX(a1),d1
0000D23C 1629 0017                  	move.b	oXRadius(a1),d3
0000D240 4883                       	ext.w	d3
0000D242 1412                       	move.b	0(a2),d2
0000D244 4882                       	ext.w	d2
0000D246 3800                       	move.w	d0,d4
0000D248 3A01                       	move.w	d1,d5
0000D24A D842                       	add.w	d2,d4
0000D24C 9A43                       	sub.w	d3,d5
0000D24E BA44                       	cmp.w	d4,d5
0000D250 6A00                       	bpl.s	.ClearRide
0000D252 142A 0001                  	move.b	1(a2),d2
0000D256 4882                       	ext.w	d2
0000D258 4442                       	neg.w	d2
0000D25A 3800                       	move.w	d0,d4
0000D25C 3A01                       	move.w	d1,d5
0000D25E 9842                       	sub.w	d2,d4
0000D260 DA43                       	add.w	d3,d5
0000D262 B845                       	cmp.w	d5,d4
0000D264 6A00                       	bpl.s	.ClearRide
0000D266 3028 000C                  	move.w	oY(a0),d0
0000D26A 3229 000C                  	move.w	oY(a1),d1
0000D26E 1629 0016                  	move.b	oYRadius(a1),d3
0000D272 4883                       	ext.w	d3
0000D274 142A 0002                  	move.b	2(a2),d2
0000D278 4882                       	ext.w	d2
0000D27A 3800                       	move.w	d0,d4
0000D27C 3A01                       	move.w	d1,d5
0000D27E D842                       	add.w	d2,d4
0000D280 9A43                       	sub.w	d3,d5
0000D282 BA44                       	cmp.w	d4,d5
0000D284 6A00                       	bpl.s	.ClearRide
0000D286 142A 0003                  	move.b	3(a2),d2
0000D28A 4882                       	ext.w	d2
0000D28C 4442                       	neg.w	d2
0000D28E 3800                       	move.w	d0,d4
0000D290 3A01                       	move.w	d1,d5
0000D292 9842                       	sub.w	d2,d4
0000D294 DA43                       	add.w	d3,d5
0000D296 B845                       	cmp.w	d5,d4
0000D298 6A00                       	bpl.s	.ClearRide
0000D29A 08E8 0003 0022             	bset	#3,oStatus(a0)
0000D2A0 72FF                       	moveq	#$FFFFFFFF,d1
0000D2A2 4E75                       	rts
0000D2A4                            
0000D2A4                            ; -------------------------------------------------------------------------------
0000D2A4                            
0000D2A4                            .ClearRide:
0000D2A4 08A8 0003 0022             	bclr	#3,oStatus(a0)
0000D2AA 7200                       	moveq	#0,d1
0000D2AC 4E75                       	rts
0000D2AE                            ; End of function ObjSpringBoard_Platform
0000D2AE                            
0000D2AE                            ; -------------------------------------------------------------------------------
0000D2AE                            ObjSpringBoard_Size:
0000D2AE 10F0 10F0                  	dc.b	$10, $F0, $10,	$F0
0000D2B2 10F0 04FC                  	dc.b	$10, $F0, 4, $FC
0000D2B6 09F7 3810                  	dc.b	9,	$F7, $38, $10
0000D2BA 00E8 04FC                  	dc.b	0,	$E8, 4,	$FC
0000D2BE 00E8 0C00                  	dc.b	0,	$E8, $C, 0
0000D2C2 1800 04FC                  	dc.b	$18, 0, 4,	$FC
0000D2C6 1800 0C00                  	dc.b	$18, 0, $C, 0
0000D2CA 20E0 20E0                  	dc.b	$20, $E0, $20, $E0
0000D2CE                            ; -------------------------------------------------------------------------------
0000D2CE                            
0000D2CE                            ObjSpringBoard:
0000D2CE 7000                       	moveq	#0,d0
0000D2D0 1028 0024                  	move.b	oRoutine(a0),d0
0000D2D4 303B 0000                  	move.w	ObjSpringBoard_Index(pc,d0.w),d0
0000D2D8 4EBB 0000                  	jsr	ObjSpringBoard_Index(pc,d0.w)
0000D2DC 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000D2E0                            ; End of function ObjSpringBoard
0000D2E0                            
0000D2E0                            ; -------------------------------------------------------------------------------
0000D2E0 0000                       ObjSpringBoard_Index:dc.w	ObjSpringBoard_Init-ObjSpringBoard_Index
0000D2E2 0000                       	dc.w	ObjSpringBoard_MainNormal-ObjSpringBoard_Index
0000D2E4 0000                       	dc.w	ObjSpringBoard_MainFlip-ObjSpringBoard_Index
0000D2E6 0000                       	dc.w	ObjSpringBoard_UnkNormal-ObjSpringBoard_Index
0000D2E8 0000                       	dc.w	ObjSpringBoard_UnkFlip-ObjSpringBoard_Index
0000D2EA 0000                       	dc.w	ObjSpringBoard_BounceNormal-ObjSpringBoard_Index
0000D2EC 0000                       	dc.w	ObjSpringBoard_BounceFlip-ObjSpringBoard_Index
0000D2EE                            ; -------------------------------------------------------------------------------
0000D2EE                            
0000D2EE                            ObjSpringBoard_Init:
0000D2EE 217C 0000 0000 0004        	move.l	#MapSpr_SpringBoard,oMap(a0)
0000D2F6 0028 0004 0001             	ori.b	#4,oRender(a0)
0000D2FC 117C 0003 0018             	move.b	#3,oPriority(a0)
0000D302 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000D308 117C 0018 0017             	move.b	#$18,oXRadius(a0)
0000D30E 117C 0004 0016             	move.b	#4,oYRadius(a0)
0000D314 7007                       	moveq	#7,d0
0000D316 4EBA 0000                  	jsr	LevelObj_SetBaseTile(pc)
0000D31A 103C 0003                  	move.b	#3,d0
0000D31E 123C 0002                  	move.b	#2,d1
0000D322 4A28 0028                  	tst.b	oSubtype(a0)
0000D326 6600                       	bne.s	.Flip
0000D328 0828 0000 0001             	btst	#0,oRender(a0)
0000D32E 6700                       	beq.s	.NoFlip
0000D330                            
0000D330                            .Flip:
0000D330 103C 0004                  	move.b	#4,d0
0000D334 123C 0004                  	move.b	#4,d1
0000D338 08A8 0000 0001             	bclr	#0,oRender(a0)
0000D33E 08A8 0000 0022             	bclr	#0,oStatus(a0)
0000D344                            
0000D344                            .NoFlip:
0000D344 1140 001C                  	move.b	d0,oAnim(a0)
0000D348 1141 0024                  	move.b	d1,oRoutine(a0)
0000D34C 4E75                       	rts
0000D34E                            ; End of function ObjSpringBoard_Init
0000D34E                            
0000D34E                            ; -------------------------------------------------------------------------------
0000D34E                            ; START	OF FUNCTION CHUNK FOR ObjSpringBoard_MainFlip
0000D34E                            
0000D34E                            ObjSpringBoard_Animate:
0000D34E 43FA 0000                  	lea	Ani_SpringBoard(pc),a1
0000D352 4EB8 61F4                  	jsr	AnimateObject
0000D356 4EF8 4012                  	jmp	DrawObject
0000D35A                            ; END OF FUNCTION CHUNK	FOR ObjSpringBoard_MainFlip
0000D35A                            ; -------------------------------------------------------------------------------
0000D35A                            
0000D35A                            ObjSpringBoard_MainFlip:
0000D35A                            
0000D35A                            ; FUNCTION CHUNK AT 0020BE64 SIZE 00000010 BYTES
0000D35A                            
0000D35A 43F8 D000                  	lea	(v_player).w,a1
0000D35E 7003                       	moveq	#3,d0
0000D360 6100 FEA0                  	bsr.w	ObjSpringBoard_Platform
0000D364 4A01                       	tst.b	d1
0000D366 6700                       	beq.s	.NoTouch
0000D368 2028 000C                  	move.l	oY(a0),d0
0000D36C 7200                       	moveq	#0,d1
0000D36E 1229 0016                  	move.b	oYRadius(a1),d1
0000D372 4841                       	swap	d1
0000D374 9081                       	sub.l	d1,d0
0000D376 2340 000C                  	move.l	d0,oY(a1)
0000D37A 117C 000C 0024             	move.b	#$C,oRoutine(a0)
0000D380 117C 0004 001C             	move.b	#4,oAnim(a0)
0000D386                            
0000D386                            .NoTouch:
0000D386 6000 FFC6                  	bra.w	ObjSpringBoard_Animate
0000D38A                            ; End of function ObjSpringBoard_MainFlip
0000D38A                            
0000D38A                            ; -------------------------------------------------------------------------------
0000D38A                            
0000D38A                            ObjSpringBoard_UnkFlip:
0000D38A 43F8 D000                  	lea	(v_player).w,a1
0000D38E 7003                       	moveq	#3,d0
0000D390 6100 FE70                  	bsr.w	ObjSpringBoard_Platform
0000D394 4A01                       	tst.b	d1
0000D396 6600 0000                  	bne.w	.Touching
0000D39A 117C 0004 0024             	move.b	#4,oRoutine(a0)
0000D3A0 0829 0001 0022             	btst	#1,oStatus(a1)
0000D3A6 6700                       	beq.s	.ChkBounce
0000D3A8 117C 000C 0024             	move.b	#$C,oRoutine(a0)
0000D3AE                            
0000D3AE                            .ChkBounce:
0000D3AE 0C28 000C 0024             	cmpi.b	#$C,oRoutine(a0)
0000D3B4 6700                       	beq.s	.IsBounce
0000D3B6 6000                       	bra.s	.Touching
0000D3B8                            
0000D3B8                            ; -------------------------------------------------------------------------------
0000D3B8                            
0000D3B8                            .IsBounce:
0000D3B8 117C 0040 002A             	move.b	#$40,oVar2A(a0)
0000D3BE                            
0000D3BE                            .Touching:
0000D3BE 6000 FF8E                  	bra.w	ObjSpringBoard_Animate
0000D3C2                            ; End of function ObjSpringBoard_UnkFlip
0000D3C2                            
0000D3C2                            ; -------------------------------------------------------------------------------
0000D3C2                            
0000D3C2                            ObjSpringBoard_BounceFlip:
0000D3C2 117C 0002 001C             	move.b	#2,oAnim(a0)
0000D3C8 4E71                       	nop
0000D3CA 4E71                       	nop
0000D3CC 4E71                       	nop
0000D3CE 4E71                       	nop
0000D3D0 43F8 D000                  	lea	(v_player).w,a1
0000D3D4 7004                       	moveq	#4,d0
0000D3D6 6100 FE2A                  	bsr.w	ObjSpringBoard_Platform
0000D3DA 4A01                       	tst.b	d1
0000D3DC 6700                       	beq.s	.NoTouch
0000D3DE 3029 0012                  	move.w	oYVel(a1),d0
0000D3E2 0640 0100                  	addi.w	#$100,d0
0000D3E6 0C40 0A00                  	cmpi.w	#$A00,d0
0000D3EA 6B00                       	bmi.s	.CapYVel
0000D3EC 303C 0A00                  	move.w	#$A00,d0
0000D3F0                            
0000D3F0                            .CapYVel:
0000D3F0 4440                       	neg.w	d0
0000D3F2 3340 0012                  	move.w	d0,oYVel(a1)
0000D3F6 117C 0040 002A             	move.b	#$40,oVar2A(a0)
0000D3FC 08E9 0001 0022             	bset	#1,oStatus(a1)
0000D402 6700                       	beq.s	.ClearJump
0000D404 4229 003C                  	clr.b	oPlayerJump(a1)
0000D408                            
0000D408                            .ClearJump:
0000D408 08A9 0005 0022             	bclr	#5,oStatus(a1)
0000D40E 4229 0038                  	clr.b	oPlayerStick(a1)
0000D412 137C 0013 0016             	move.b	#$13,oYRadius(a1)
0000D418 137C 0009 0017             	move.b	#9,oXRadius(a1)
0000D41E 0829 0002 0022             	btst	#2,oStatus(a1)
0000D424 6600                       	bne.s	.RollJump
0000D426 137C 000E 0016             	move.b	#$E,oYRadius(a1)
0000D42C 137C 0007 0017             	move.b	#7,oXRadius(a1)
0000D432 5A69 000C                  	addq.w	#5,oY(a1)
0000D436 08E9 0002 0022             	bset	#2,oStatus(a1)
0000D43C 137C 0002 001C             	move.b	#2,oAnim(a1)
0000D442 6000                       	bra.s	.NoTouch
0000D444                            
0000D444                            ; -------------------------------------------------------------------------------
0000D444                            
0000D444                            .RollJump:
0000D444 08E9 0004 0022             	bset	#4,oStatus(a1)
0000D44A                            
0000D44A                            .NoTouch:
0000D44A 1028 002A                  	move.b	oVar2A(a0),d0
0000D44E 5300                       	subq.b	#1,d0
0000D450 1140 002A                  	move.b	d0,oVar2A(a0)
0000D454 6600                       	bne.s	.DoAnim
0000D456 117C 0040 002A             	move.b	#$40,oVar2A(a0)
0000D45C 117C 0004 0024             	move.b	#4,oRoutine(a0)
0000D462 117C 0004 001C             	move.b	#4,oAnim(a0)
0000D468                            
0000D468                            .DoAnim:
0000D468 6000 FEE4                  	bra.w	ObjSpringBoard_Animate
0000D46C                            ; End of function ObjSpringBoard_BounceFlip
0000D46C                            
0000D46C                            ; -------------------------------------------------------------------------------
0000D46C                            
0000D46C                            ObjSpringBoard_MainNormal:
0000D46C 43F8 D000                  	lea	(v_player).w,a1
0000D470 7005                       	moveq	#5,d0
0000D472 6100 FD8E                  	bsr.w	ObjSpringBoard_Platform
0000D476 4A01                       	tst.b	d1
0000D478 6700                       	beq.s	.NoTouch
0000D47A 2028 000C                  	move.l	oY(a0),d0
0000D47E 7200                       	moveq	#0,d1
0000D480 1229 0016                  	move.b	oYRadius(a1),d1
0000D484 4841                       	swap	d1
0000D486 9081                       	sub.l	d1,d0
0000D488 2340 000C                  	move.l	d0,oY(a1)
0000D48C 117C 000A 0024             	move.b	#$A,oRoutine(a0)
0000D492 117C 0003 001C             	move.b	#3,oAnim(a0)
0000D498                            
0000D498                            .NoTouch:
0000D498 6000 FEB4                  	bra.w	ObjSpringBoard_Animate
0000D49C                            ; End of function ObjSpringBoard_MainNormal
0000D49C                            
0000D49C                            ; -------------------------------------------------------------------------------
0000D49C                            
0000D49C                            ObjSpringBoard_UnkNormal:
0000D49C 43F8 D000                  	lea	(v_player).w,a1
0000D4A0 7005                       	moveq	#5,d0
0000D4A2 6100 FD5E                  	bsr.w	ObjSpringBoard_Platform
0000D4A6 4A01                       	tst.b	d1
0000D4A8 6600 0000                  	bne.w	.NoTouch
0000D4AC 117C 0002 0024             	move.b	#2,oRoutine(a0)
0000D4B2 0829 0001 0022             	btst	#1,oStatus(a1)
0000D4B8 6700                       	beq.s	.ChkBounce
0000D4BA 117C 000A 0024             	move.b	#$A,oRoutine(a0)
0000D4C0                            
0000D4C0                            .ChkBounce:
0000D4C0 0C28 000A 0024             	cmpi.b	#$A,oRoutine(a0)
0000D4C6 6700                       	beq.s	.IsBounce
0000D4C8 6000                       	bra.s	.NoTouch
0000D4CA                            
0000D4CA                            ; -------------------------------------------------------------------------------
0000D4CA                            
0000D4CA                            .IsBounce:
0000D4CA 117C 0040 002A             	move.b	#$40,oVar2A(a0)
0000D4D0                            
0000D4D0                            .NoTouch:
0000D4D0 6000 FE7C                  	bra.w	ObjSpringBoard_Animate
0000D4D4                            ; End of function ObjSpringBoard_UnkNormal
0000D4D4                            
0000D4D4                            ; -------------------------------------------------------------------------------
0000D4D4                            
0000D4D4                            ObjSpringBoard_BounceNormal:
0000D4D4 117C 0001 001C             	move.b	#1,oAnim(a0)
0000D4DA 43F8 D000                  	lea	(v_player).w,a1
0000D4DE 7006                       	moveq	#6,d0
0000D4E0 6100 FD20                  	bsr.w	ObjSpringBoard_Platform
0000D4E4 4A01                       	tst.b	d1
0000D4E6 6700                       	beq.s	.Touching
0000D4E8 3029 0012                  	move.w	oYVel(a1),d0
0000D4EC 0640 0100                  	addi.w	#$100,d0
0000D4F0 0C40 0A00                  	cmpi.w	#$A00,d0
0000D4F4 6B00                       	bmi.s	.CapYVel
0000D4F6 303C 0A00                  	move.w	#$A00,d0
0000D4FA                            
0000D4FA                            .CapYVel:
0000D4FA 4440                       	neg.w	d0
0000D4FC 3340 0012                  	move.w	d0,oYVel(a1)
0000D500 117C 0040 002A             	move.b	#$40,oVar2A(a0)
0000D506 08E9 0001 0022             	bset	#1,oStatus(a1)
0000D50C 6700                       	beq.s	.ClearJump
0000D50E 4229 003C                  	clr.b	oPlayerJump(a1)
0000D512                            
0000D512                            .ClearJump:
0000D512 08A9 0005 0022             	bclr	#5,oStatus(a1)
0000D518 4229 0038                  	clr.b	oPlayerStick(a1)
0000D51C 137C 0013 0016             	move.b	#$13,oYRadius(a1)
0000D522 137C 0009 0017             	move.b	#9,oXRadius(a1)
0000D528 0829 0002 0022             	btst	#2,oStatus(a1)
0000D52E 6600                       	bne.s	.RollJump
0000D530 137C 000E 0016             	move.b	#$E,oYRadius(a1)
0000D536 137C 0007 0017             	move.b	#7,oXRadius(a1)
0000D53C 5A69 000C                  	addq.w	#5,oY(a1)
0000D540 08E9 0002 0022             	bset	#2,oStatus(a1)
0000D546 137C 0002 001C             	move.b	#2,oAnim(a1)
0000D54C 6000                       	bra.s	.Touching
0000D54E                            
0000D54E                            ; -------------------------------------------------------------------------------
0000D54E                            
0000D54E                            .RollJump:
0000D54E 08E9 0004 0022             	bset	#4,oStatus(a1)
0000D554                            
0000D554                            .Touching:
0000D554 1028 002A                  	move.b	oVar2A(a0),d0
0000D558 5300                       	subq.b	#1,d0
0000D55A 1140 002A                  	move.b	d0,oVar2A(a0)
0000D55E 6600                       	bne.s	.Animate
0000D560 117C 0002 0024             	move.b	#2,oRoutine(a0)
0000D566 117C 0003 001C             	move.b	#3,oAnim(a0)
0000D56C 117C 0040 002A             	move.b	#$40,oVar2A(a0)
0000D572                            
0000D572                            .Animate:
0000D572 6000 FDDA                  	bra.w	ObjSpringBoard_Animate
0000D576                            ; End of function ObjSpringBoard_BounceNormal
0000D576                            
0000D576                            ; -------------------------------------------------------------------------------
0000D576                            Ani_SpringBoard:
0000D576                            	include	"level/objects/springboard/anim.asm"
0000D576                            .Anim:
0000D576 0000                       	dc.w	byte_20C09A-.Anim
0000D578 0000                       	dc.w	byte_20C0AA-.Anim
0000D57A 0000                       	dc.w	byte_20C0B4-.Anim
0000D57C 0000                       	dc.w	byte_20C0BE-.Anim
0000D57E 0000                       	dc.w	byte_20C0C2-.Anim
0000D580 0200 0100 0200 0100 0304+  byte_20C09A:	dc.b	2,	0, 1, 0, 2, 0, 1, 0, 3,	4, 3, 5, 3, 4, 3, $FF
0000D590 0200 0100 0200 0100 FF     byte_20C0AA:	dc.b	2,	0, 1, 0, 2, 0, 1, 0, $FF
0000D599 00                         	dc.b	0
0000D59A 0203 0403 0503 0403 FF     byte_20C0B4:	dc.b	2,	3, 4, 3, 5, 3, 4, 3, $FF
0000D5A3 00                         	dc.b	0
0000D5A4 0000 FF                    byte_20C0BE:	dc.b	0,	0, $FF
0000D5A7 00                         	dc.b	0
0000D5A8 0003 FF                    byte_20C0C2:	dc.b	0,	3, $FF
0000D5AB 00                         	dc.b	0
0000D5AB 00                         	dc.b	0
0000D5AC                            	even
0000D5AC                            MapSpr_SpringBoard:
0000D5AC                            	include	"level/objects/springboard/map.asm"
0000D5AC                            .Map:
0000D5AC 0000                       	dc.w	unk_20C0D2-.Map
0000D5AE 0000                       	dc.w	unk_20C0DE-.Map
0000D5B0 0000                       	dc.w	unk_20C0EA-.Map
0000D5B2 0000                       	dc.w	unk_20C0F6-.Map
0000D5B4 0000                       	dc.w	unk_20C102-.Map
0000D5B6 0000                       	dc.w	unk_20C10E-.Map
0000D5B8 02                         unk_20C0D2:	dc.b	  2
0000D5B9 FC                         	dc.b	$FC ; ü
0000D5BA 01                         	dc.b	  1
0000D5BB 00                         	dc.b	  0
0000D5BC 00                         	dc.b	  0
0000D5BD F8                         	dc.b	$F8 ; ø
0000D5BE FC                         	dc.b	$FC ; ü
0000D5BF 08                         	dc.b	  8
0000D5C0 00                         	dc.b	  0
0000D5C1 02                         	dc.b	  2
0000D5C2 00                         	dc.b	  0
0000D5C3 00                         	dc.b	  0
0000D5C4 02                         unk_20C0DE:	dc.b	  2
0000D5C5 FC                         	dc.b	$FC ; ü
0000D5C6 05                         	dc.b	  5
0000D5C7 00                         	dc.b	  0
0000D5C8 05                         	dc.b	  5
0000D5C9 F8                         	dc.b	$F8 ; ø
0000D5CA 00                         	dc.b	  0
0000D5CB 05                         	dc.b	  5
0000D5CC 00                         	dc.b	  0
0000D5CD 09                         	dc.b	  9
0000D5CE 08                         	dc.b	  8
0000D5CF 00                         	dc.b	  0
0000D5D0 02                         unk_20C0EA:	dc.b	  2
0000D5D1 FC                         	dc.b	$FC ; ü
0000D5D2 05                         	dc.b	  5
0000D5D3 00                         	dc.b	  0
0000D5D4 0D                         	dc.b	 $D
0000D5D5 F8                         	dc.b	$F8 ; ø
0000D5D6 F0                         	dc.b	$F0 ; ð
0000D5D7 05                         	dc.b	  5
0000D5D8 00                         	dc.b	  0
0000D5D9 11                         	dc.b	$11
0000D5DA 08                         	dc.b	  8
0000D5DB 00                         	dc.b	  0
0000D5DC 02                         unk_20C0F6:	dc.b	  2
0000D5DD FC                         	dc.b	$FC ; ü
0000D5DE 01                         	dc.b	  1
0000D5DF 08                         	dc.b	  8
0000D5E0 00                         	dc.b	  0
0000D5E1 00                         	dc.b	  0
0000D5E2 FC                         	dc.b	$FC ; ü
0000D5E3 08                         	dc.b	  8
0000D5E4 08                         	dc.b	  8
0000D5E5 02                         	dc.b	  2
0000D5E6 E8                         	dc.b	$E8 ; è
0000D5E7 00                         	dc.b	  0
0000D5E8 02                         unk_20C102:	dc.b	  2
0000D5E9 FC                         	dc.b	$FC ; ü
0000D5EA 05                         	dc.b	  5
0000D5EB 08                         	dc.b	  8
0000D5EC 05                         	dc.b	  5
0000D5ED F8                         	dc.b	$F8 ; ø
0000D5EE 00                         	dc.b	  0
0000D5EF 05                         	dc.b	  5
0000D5F0 08                         	dc.b	  8
0000D5F1 09                         	dc.b	  9
0000D5F2 E8                         	dc.b	$E8 ; è
0000D5F3 00                         	dc.b	  0
0000D5F4 02                         unk_20C10E:	dc.b	  2
0000D5F5 FC                         	dc.b	$FC ; ü
0000D5F6 05                         	dc.b	  5
0000D5F7 08                         	dc.b	  8
0000D5F8 0D                         	dc.b	 $D
0000D5F9 F8                         	dc.b	$F8 ; ø
0000D5FA F0                         	dc.b	$F0 ; ð
0000D5FB 05                         	dc.b	  5
0000D5FC 08                         	dc.b	  8
0000D5FD 11                         	dc.b	$11
0000D5FE E8                         	dc.b	$E8 ; è
0000D5FF 00                         	dc.b	  0
0000D5FF 00                         	dc.b	  0
0000D600                            	even
0000D600                            ; -------------------------------------------------------------------------------
0000D600                            
0000D600                            ObjSpikes:
0000D600 7000                       	moveq	#0,d0
0000D602 1028 0024                  	move.b	oRoutine(a0),d0
0000D606 303B 0000                  	move.w	ObjSpikes_Index(pc,d0.w),d0
0000D60A 4EFB 0000                  	jmp	ObjSpikes_Index(pc,d0.w)
0000D60E                            ; End of function ObjSpikes
0000D60E                            
0000D60E                            ; -------------------------------------------------------------------------------
0000D60E 0000                       ObjSpikes_Index:dc.w	ObjSpikes_Init-ObjSpikes_Index
0000D610 0000                       	dc.w	ObjSpikes_Main-ObjSpikes_Index
0000D612                            ; -------------------------------------------------------------------------------
0000D612                            
0000D612                            ObjSpikes_Init:
0000D612 5428 0024                  	addq.b	#2,oRoutine(a0)
0000D616 217C 0000 0000 0004        	move.l	#MapSpr_Spikes,oMap(a0)
0000D61E 0028 0004 0001             	ori.b	#4,oRender(a0)
0000D624 117C 0003 0018             	move.b	#3,oPriority(a0)
0000D62A 700A                       	moveq	#$A,d0
0000D62C 4EBA 0000                  	jsr	LevelObj_SetBaseTile(pc)
0000D630 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000D636 117C 0008 0016             	move.b	#8,oYRadius(a0)
0000D63C 0828 0001 0001             	btst	#1,oRender(a0)
0000D642 6700                       	beq.s	ObjSpikes_Main
0000D644 117C 0012 0019             	move.b	#$12,oWidth(a0)
0000D64A 117C 0083 0020             	move.b	#$83,oColType(a0)
0000D650                            ; End of function ObjSpikes_Init
0000D650                            
0000D650                            ; -------------------------------------------------------------------------------
0000D650                            
0000D650                            ObjSpikes_Main:
0000D650 43F8 D000                  	lea	(v_player).w,a1
0000D654 3029 000C                  	move.w	oY(a1),d0
0000D658 9068 000C                  	sub.w	oY(a0),d0
0000D65C 6400                       	bcc.s	.AbsDY
0000D65E 4440                       	neg.w	d0
0000D660                            
0000D660                            .AbsDY:
0000D660 0C40 0020                  	cmpi.w	#$20,d0
0000D664 6400                       	bcc.s	.Display
0000D666 0828 0001 0001             	btst	#1,oRender(a0)
0000D66C 6700                       	beq.s	.ChkStand
0000D66E 43F8 D000                  	lea	(v_player).w,a1
0000D672 4EBA CF54                  	jsr	SolidObject
0000D676 6000                       	bra.s	.Display
0000D678                            
0000D678                            ; -------------------------------------------------------------------------------
0000D678                            
0000D678                            .ChkStand:
0000D678 4EBA CF4E                  	jsr	SolidObject
0000D67C 6700                       	beq.s	.Display
0000D67E 0828 0003 0022             	btst	#3,oStatus(a0)
0000D684 6700                       	beq.s	.Display
0000D686 4A39 00FF 1521             	tst.b	(v_time_warp_on).l
0000D68C 6600                       	bne.s	.Display
0000D68E 4A39 00FF 151F             	tst.b	(v_invincible).l
0000D694 6600                       	bne.s	.Display
0000D696 2F08                       	move.l	a0,-(sp)
0000D698 2448                       	movea.l	a0,a2
0000D69A 41F8 D000                  	lea	(v_player).w,a0
0000D69E 0C28 0004 0024             	cmpi.b	#4,oRoutine(a0)
0000D6A4 6400                       	bcc.s	.Restore
0000D6A6 4A68 0030                  	tst.w	oPlayerHurt(a0)
0000D6AA 6600                       	bne.s	.Restore
0000D6AC 2628 000C                  	move.l	oY(a0),d3
0000D6B0 3028 0012                  	move.w	oYVel(a0),d0
0000D6B4 48C0                       	ext.l	d0
0000D6B6 E180                       	asl.l	#8,d0
0000D6B8 9680                       	sub.l	d0,d3
0000D6BA 2143 000C                  	move.l	d3,oY(a0)
0000D6BE 4EB8 73AC                  	jsr	HurtPlayer
0000D6C2                            
0000D6C2                            .Restore:
0000D6C2 205F                       	movea.l	(sp)+,a0
0000D6C4                            
0000D6C4                            .Display:
0000D6C4 4EB8 4012                  	jsr	DrawObject
0000D6C8 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000D6CC                            ; End of function ObjSpikes_Main
0000D6CC                            
0000D6CC                            ; -------------------------------------------------------------------------------
0000D6CC                            MapSpr_Spikes:
0000D6CC                            	include	"level/objects/spikes/map.asm"
0000D6CC                            .Map:
0000D6CC 0000                       	dc.w	unk_20C1F2-.Map
0000D6CE 04                         unk_20C1F2:	dc.b	  4
0000D6CF F0                         	dc.b	$F0 ; ð
0000D6D0 05                         	dc.b	  5
0000D6D1 00                         	dc.b	  0
0000D6D2 00                         	dc.b	  0
0000D6D3 F0                         	dc.b	$F0 ; ð
0000D6D4 00                         	dc.b	  0
0000D6D5 05                         	dc.b	  5
0000D6D6 00                         	dc.b	  0
0000D6D7 04                         	dc.b	  4
0000D6D8 F0                         	dc.b	$F0 ; ð
0000D6D9 F0                         	dc.b	$F0 ; ð
0000D6DA 05                         	dc.b	  5
0000D6DB 00                         	dc.b	  0
0000D6DC 00                         	dc.b	  0
0000D6DD 00                         	dc.b	  0
0000D6DE 00                         	dc.b	  0
0000D6DF 05                         	dc.b	  5
0000D6E0 00                         	dc.b	  0
0000D6E1 04                         	dc.b	  4
0000D6E2 00                         	dc.b	  0
0000D6E3 00                         	dc.b	  0
0000D6E3 00                         	dc.b	  0
0000D6E4                            	even
0000D6E4                            ; -------------------------------------------------------------------------------
0000D6E4                            
0000D6E4                            ObjCollapsePlatform:
0000D6E4 7000                       	moveq	#0,d0
0000D6E6 1028 0024                  	move.b	oRoutine(a0),d0
0000D6EA 303B 0000                  	move.w	ObjCollapsePlatform_Index(pc,d0.w),d0
0000D6EE 4EBB 0000                  	jsr	ObjCollapsePlatform_Index(pc,d0.w)
0000D6F2 4EB8 4012                  	jsr	DrawObject
0000D6F6 0C28 0004 0024             	cmpi.b	#4,oRoutine(a0)
0000D6FC 6C00                       	bge.s	.End
0000D6FE 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000D702                            
0000D702                            ; -------------------------------------------------------------------------------
0000D702                            
0000D702                            .End:
0000D702 4E75                       	rts
0000D704                            ; End of function ObjCollapsePlatform
0000D704                            
0000D704                            ; -------------------------------------------------------------------------------
0000D704                            ObjCollapsePlatform_Index:
0000D704 0000                       	dc.w	ObjCollapsePlatform_Init-ObjCollapsePlatform_Index
0000D706 0000                       	dc.w	ObjCollapsePlatform_Main-ObjCollapsePlatform_Index
0000D708 0000                       	dc.w	ObjCollapsePlatform_Delay-ObjCollapsePlatform_Index
0000D70A 0000                       	dc.w	ObjCollapsePlatform_Fall-ObjCollapsePlatform_Index
0000D70C                            ; -------------------------------------------------------------------------------
0000D70C                            
0000D70C                            ObjCollapsePlatform_Init:
0000D70C 5428 0024                  	addq.b	#2,oRoutine(a0)
0000D710 0028 0004 0001             	ori.b	#4,oRender(a0)
0000D716 117C 0003 0018             	move.b	#3,oPriority(a0)
0000D71C 317C 44BE 0002             	move.w	#$44BE,oTile(a0)
0000D722 43FA 0000                  	lea	MapSpr_CollapsePlatform1(pc),a1
0000D726 45FA 0000                  	lea	ObjCollapsePlatform_Sizes1(pc),a2
0000D72A 1028 0028                  	move.b	oSubtype(a0),d0
0000D72E 6A00                       	bpl.s	.SetMaps
0000D730 43FA 0000                  	lea	MapSpr_CollapsePlatform2(pc),a1
0000D734 45FA 0000                  	lea	ObjCollapsePlatform_Sizes2(pc),a2
0000D738                            
0000D738                            .SetMaps:
0000D738 2149 0004                  	move.l	a1,oMap(a0)
0000D73C 0800 0004                  	btst	#4,d0
0000D740 6700                       	beq.s	.NoFlip
0000D742 08E8 0000 0001             	bset	#0,oRender(a0)
0000D748 08E8 0000 0022             	bset	#0,oStatus(a0)
0000D74E                            
0000D74E                            .NoFlip:
0000D74E 0240 000F                  	andi.w	#$F,d0
0000D752 1140 001A                  	move.b	d0,oMapFrame(a0)
0000D756 D040                       	add.w	d0,d0
0000D758 3032 0000                  	move.w	(a2,d0.w),d0
0000D75C 1232 0000                  	move.b	(a2,d0.w),d1
0000D760 5201                       	addq.b	#1,d1
0000D762 E701                       	asl.b	#3,d1
0000D764 1141 0017                  	move.b	d1,oXRadius(a0)
0000D768 1141 0019                  	move.b	d1,oWidth(a0)
0000D76C 1232 0001                  	move.b	1(a2,d0.w),d1
0000D770 6A00                       	bpl.s	.AbsDY
0000D772 4401                       	neg.b	d1
0000D774                            
0000D774                            .AbsDY:
0000D774 5201                       	addq.b	#1,d1
0000D776 E701                       	asl.b	#3,d1
0000D778 5401                       	addq.b	#2,d1
0000D77A 1141 0016                  	move.b	d1,oYRadius(a0)
0000D77E                            ; End of function ObjCollapsePlatform_Init
0000D77E                            
0000D77E                            ; -------------------------------------------------------------------------------
0000D77E                            
0000D77E                            ObjCollapsePlatform_Main:
0000D77E                            
0000D77E                            ; FUNCTION CHUNK AT 0020C32C SIZE 000001F4 BYTES
0000D77E                            
0000D77E 43F8 D000                  	lea	(v_player).w,a1
0000D782 4EBA CE3E                  	jsr	SolidObject1
0000D786 6600                       	bne.s	.StandOn
0000D788 4E75                       	rts
0000D78A                            
0000D78A                            ; -------------------------------------------------------------------------------
0000D78A                            
0000D78A                            .StandOn:
0000D78A 4EBA CCF2                  	jsr	ClearObjRide
0000D78E 303C 00B9                  	move.w	#$B9,d0 ; Play Collapsing Platform SFX
0000D792 4EB8 2708                  	jsr	PlayFMSound
0000D796 5428 0024                  	addq.b	#2,oRoutine(a0)
0000D79A 1028 0028                  	move.b	oSubtype(a0),d0
0000D79E 6A00 0000                  	bpl.w	ObjCollapsePlatform_BreakUp_MultiRow
0000D7A2 6000 0000                  	bra.w	ObjCollapsePlatform_BreakUp_SingleRow
0000D7A6                            ; End of function ObjCollapsePlatform_Main
0000D7A6                            
0000D7A6                            ; -------------------------------------------------------------------------------
0000D7A6                            
0000D7A6                            ObjCollapsePlatform_Delay:
0000D7A6 0668 FFFF 002A             	addi.w	#-1,oVar2A(a0)
0000D7AC 6600                       	bne.s	.KeepOn
0000D7AE 5428 0024                  	addq.b	#2,oRoutine(a0)
0000D7B2                            
0000D7B2                            .KeepOn:
0000D7B2 1028 003E                  	move.b	oVar3E(a0),d0
0000D7B6 6700                       	beq.s	.End
0000D7B8 43F8 D000                  	lea	(v_player).w,a1
0000D7BC 4EBA CE04                  	jsr	SolidObject1
0000D7C0 6700                       	beq.s	.End
0000D7C2 4A68 002A                  	tst.w	oVar2A(a0)
0000D7C6 6600                       	bne.s	.End
0000D7C8 4EBA CCB4                  	jsr	ClearObjRide
0000D7CC                            
0000D7CC                            .End:
0000D7CC 4E75                       	rts
0000D7CE                            ; End of function ObjCollapsePlatform_Delay
0000D7CE                            
0000D7CE                            ; -------------------------------------------------------------------------------
0000D7CE                            
0000D7CE                            ObjCollapsePlatform_Fall:
0000D7CE 2028 002C                  	move.l	oVar2C(a0),d0
0000D7D2 D1A8 000C                  	add.l	d0,oY(a0)
0000D7D6 06A8 0000 4000 002C        	addi.l	#$4000,oVar2C(a0)
0000D7DE 3028 000C                  	move.w	oY(a0),d0
0000D7E2 43F8 D000                  	lea	(v_player).w,a1
0000D7E6 9069 000C                  	sub.w	oY(a1),d0
0000D7EA 0C40 0200                  	cmpi.w	#$200,d0
0000D7EE 6E00 0000                  	bgt.w	.Delete
0000D7F2 4E75                       	rts
0000D7F4                            
0000D7F4                            ; -------------------------------------------------------------------------------
0000D7F4                            
0000D7F4                            .Delete:
0000D7F4 4EF8 40BE                  	jmp	DeleteObject
0000D7F8                            ; End of function ObjCollapsePlatform_Fall
0000D7F8                            
0000D7F8                            ; -------------------------------------------------------------------------------
0000D7F8                            ; START	OF FUNCTION CHUNK FOR ObjCollapsePlatform_Main
0000D7F8                            
0000D7F8                            ObjCollapsePlatform_BreakUp_MultiRow:
0000D7F8 1028 0028                  	move.b	oSubtype(a0),d0
0000D7FC 99CC                       	suba.l	a4,a4
0000D7FE 0800 0004                  	btst	#4,d0
0000D802 6700                       	beq.s	.SkipThis
0000D804 49FA FFF2                  	lea	ObjCollapsePlatform_BreakUp_MultiRow(pc),a4
0000D808                            
0000D808                            .SkipThis:
0000D808 4DFA 0000                  	lea	ObjCollapsePlatform_Sizes1(pc),a6
0000D80C 0240 000F                  	andi.w	#$F,d0
0000D810 D040                       	add.w	d0,d0
0000D812 3036 0000                  	move.w	(a6,d0.w),d0
0000D816 4DF6 0000                  	lea	(a6,d0.w),a6
0000D81A 7000                       	moveq	#0,d0
0000D81C 101E                       	move.b	(a6)+,d0
0000D81E 3A40                       	movea.w	d0,a5
0000D820 E740                       	asl.w	#3,d0
0000D822 323C FFF0                  	move.w	#$FFF0,d1
0000D826 B8FC 0000                  	cmpa.w	#0,a4
0000D82A 6600                       	bne.s	.SkipThis2
0000D82C 4440                       	neg.w	d0
0000D82E 4441                       	neg.w	d1
0000D830                            
0000D830                            .SkipThis2:
0000D830 D068 0008                  	add.w	oX(a0),d0
0000D834 3440                       	movea.w	d0,a2
0000D836 3641                       	movea.w	d1,a3
0000D838 7C00                       	moveq	#0,d6
0000D83A 1C1E                       	move.b	(a6)+,d6
0000D83C 3806                       	move.w	d6,d4
0000D83E E744                       	asl.w	#3,d4
0000D840 D868 000C                  	add.w	$C(a0),d4
0000D844 343C 0009                  	move.w	#9,d2
0000D848 1150 003F                  	move.b	oID(a0),oVar3F(a0)
0000D84C                            
0000D84C                            .Loop:
0000D84C 3A0D                       	move.w	a5,d5
0000D84E 360A                       	move.w	a2,d3
0000D850 3202                       	move.w	d2,d1
0000D852                            
0000D852                            .Loop2:
0000D852 4EB8 7CE4                  	jsr	FindObjSlot
0000D856 6600 0000                  	bne.w	.Solid
0000D85A 101E                       	move.b	(a6)+,d0
0000D85C 6B00 0000                  	bmi.w	.Endxt
0000D860 1340 001A                  	move.b	d0,oMapFrame(a1)
0000D864 0029 0004 0001             	ori.b	#4,oRender(a1)
0000D86A 137C 0003 0018             	move.b	#3,oPriority(a1)
0000D870 337C 44BE 0002             	move.w	#$44BE,oTile(a1)
0000D876 237C 0000 0000 0004        	move.l	#MapSpr_CollapsePlatform3,oMap(a1)
0000D87E 237C 0002 0000 002C        	move.l	#$20000,oVar2C(a1)
0000D886 12A8 003F                  	move.b	oVar3F(a0),oID(a1)
0000D88A 1368 0024 0024             	move.b	oRoutine(a0),oRoutine(a1)
0000D890 B8FC 0000                  	cmpa.w	#0,a4
0000D894 6700                       	beq.s	.SkipThis3
0000D896 08E9 0000 0001             	bset	#0,oRender(a1)
0000D89C 08E9 0000 0022             	bset	#0,oStatus(a1)
0000D8A2                            
0000D8A2                            .SkipThis3:
0000D8A2 4A46                       	tst.w	d6
0000D8A4 6600                       	bne.s	.NotLast
0000D8A6 50E9 003E                  	st	oVar3E(a1)
0000D8AA 137C 0008 0017             	move.b	#8,oXRadius(a1)
0000D8B0 137C 0008 0019             	move.b	#8,oWidth(a1)
0000D8B6 137C 0009 0016             	move.b	#9,oYRadius(a1)
0000D8BC                            
0000D8BC                            .NotLast:
0000D8BC 3344 000C                  	move.w	d4,oY(a1)
0000D8C0 3343 0008                  	move.w	d3,oX(a1)
0000D8C4 3341 002A                  	move.w	d1,oVar2A(a1)
0000D8C8                            
0000D8C8                            .Endxt:
0000D8C8 D64B                       	add.w	a3,d3
0000D8CA 0641 000C                  	addi.w	#$C,d1
0000D8CE 51CD FF82                  	dbf	d5,.Loop2
0000D8D2 0644 FFF0                  	addi.w	#-$10,d4
0000D8D6 5A42                       	addq.w	#5,d2
0000D8D8 51CE FF72                  	dbf	d6,.Loop
0000D8DC 6000                       	bra.s	.Delete
0000D8DE                            
0000D8DE                            ; -------------------------------------------------------------------------------
0000D8DE                            
0000D8DE                            .Solid:
0000D8DE 43F8 D000                  	lea	(v_player).w,a1
0000D8E2 4EBA CCDE                  	jsr	SolidObject1
0000D8E6 6700                       	beq.s	.Delete
0000D8E8 4EBA CB94                  	jsr	ClearObjRide
0000D8EC                            
0000D8EC                            .Delete:
0000D8EC 4EF8 40BE                  	jmp	DeleteObject
0000D8F0                            
0000D8F0                            ; -------------------------------------------------------------------------------
0000D8F0                            
0000D8F0                            ObjCollapsePlatform_BreakUp_SingleRow:
0000D8F0 1428 0028                  	move.b	oSubtype(a0),d2
0000D8F4 4DFA 0000                  	lea	ObjCollapsePlatform_Sizes2(pc),a6
0000D8F8 1002                       	move.b	d2,d0
0000D8FA 0240 001F                  	andi.w	#$1F,d0
0000D8FE D040                       	add.w	d0,d0
0000D900 3036 0000                  	move.w	(a6,d0.w),d0
0000D904 4DF6 0000                  	lea	(a6,d0.w),a6
0000D908 1A1E                       	move.b	(a6)+,d5
0000D90A 121E                       	move.b	(a6)+,d1
0000D90C 5201                       	addq.b	#1,d1
0000D90E E701                       	asl.b	#3,d1
0000D910 5401                       	addq.b	#2,d1
0000D912 0245 00FF                  	andi.w	#$FF,d5
0000D916 3805                       	move.w	d5,d4
0000D918 E74C                       	lsl.w	#3,d4
0000D91A 4444                       	neg.w	d4
0000D91C 363C 0010                  	move.w	#$10,d3
0000D920 7C01                       	moveq	#1,d6
0000D922 0802 0006                  	btst	#6,d2
0000D926 6600 0000                  	bne.w	.GetSpeed
0000D92A E50A                       	lsl.b	#2,d2
0000D92C 6000                       	bra.s	.SkipSpeed
0000D92E                            
0000D92E                            ; -------------------------------------------------------------------------------
0000D92E                            
0000D92E                            .GetSpeed:
0000D92E 43F8 D000                  	lea	(v_player).w,a1
0000D932 3029 0010                  	move.w	oXVel(a1),d0
0000D936 0802 0005                  	btst	#5,d2
0000D93A 6700                       	beq.s	.GotSpeed
0000D93C 4440                       	neg.w	d0
0000D93E                            
0000D93E                            .GotSpeed:
0000D93E 4A40                       	tst.w	d0
0000D940                            
0000D940                            .SkipSpeed:
0000D940 6A00                       	bpl.s	.InitX
0000D942 4DF6 5000                  	lea	(a6,d5.w),a6
0000D946 4444                       	neg.w	d4
0000D948 4443                       	neg.w	d3
0000D94A 4446                       	neg.w	d6
0000D94C                            
0000D94C                            .InitX:
0000D94C D868 0008                  	add.w	oX(a0),d4
0000D950 343C 0009                  	move.w	#9,d2
0000D954 1150 003F                  	move.b	oID(a0),oVar3F(a0)
0000D958                            
0000D958                            .Loop3:
0000D958 4EB8 7CE4                  	jsr	FindObjSlot
0000D95C 6600 0000                  	bne.w	.Solid2
0000D960 137C 0003 0018             	move.b	#3,oPriority(a1)
0000D966 337C 44BE 0002             	move.w	#$44BE,oTile(a1)
0000D96C 0029 0004 0001             	ori.b	#4,oRender(a1)
0000D972 237C 0000 0000 0004        	move.l	#MapSpr_CollapsePlatform4,oMap(a1)
0000D97A 237C 0002 0000 002C        	move.l	#$20000,oVar2C(a1)
0000D982 12A8 003F                  	move.b	oVar3F(a0),oID(a1)
0000D986 1368 0024 0024             	move.b	oRoutine(a0),oRoutine(a1)
0000D98C 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000D992 50E9 003E                  	st	oVar3E(a1)
0000D996 137C 0008 0017             	move.b	#8,oXRadius(a1)
0000D99C 137C 0008 0019             	move.b	#8,oWidth(a1)
0000D9A2 1341 0016                  	move.b	d1,oYRadius(a1)
0000D9A6 1356 001A                  	move.b	(a6),oMapFrame(a1)
0000D9AA 4DF6 6000                  	lea	(a6,d6.w),a6
0000D9AE 3344 0008                  	move.w	d4,oX(a1)
0000D9B2 D843                       	add.w	d3,d4
0000D9B4 3342 002A                  	move.w	d2,oVar2A(a1)
0000D9B8 0642 000C                  	addi.w	#$C,d2
0000D9BC 51CD FF9A                  	dbf	d5,.Loop3
0000D9C0 6000                       	bra.s	.Delete2
0000D9C2                            
0000D9C2                            ; -------------------------------------------------------------------------------
0000D9C2                            
0000D9C2                            .Solid2:
0000D9C2 43F8 D000                  	lea	(v_player).w,a1
0000D9C6 4EBA CBFA                  	jsr	SolidObject1
0000D9CA 6700                       	beq.s	.Delete2
0000D9CC 4EBA CAB0                  	jsr	ClearObjRide
0000D9D0                            
0000D9D0                            .Delete2:
0000D9D0 4EF8 40BE                  	jmp	DeleteObject
0000D9D4                            ; END OF FUNCTION CHUNK	FOR ObjCollapsePlatform_Main
0000D9D4                            
0000D9D4                            ; -------------------------------------------------------------------------------
0000D9D4                            MapSpr_CollapsePlatform1:
0000D9D4                            	include	"level/objects/platform/mapcollapseledge.asm"
0000D9D4                            .Map:
0000D9D4 0000                       	dc.w	unk_20C522-.Map
0000D9D6                            unk_20C522:
0000D9D6 17                         	dc.b	$17
0000D9D7 D0                         	dc.b	$D0 ; Ð
0000D9D8 05                         	dc.b	  5
0000D9D9 08                         	dc.b	  8
0000D9DA 0D                         	dc.b	 $D
0000D9DB D8                         	dc.b	$D8 ; Ø
0000D9DC D0                         	dc.b	$D0 ; Ð
0000D9DD 05                         	dc.b	  5
0000D9DE 08                         	dc.b	  8
0000D9DF 0D                         	dc.b	 $D
0000D9E0 E8                         	dc.b	$E8 ; è
0000D9E1 D0                         	dc.b	$D0 ; Ð
0000D9E2 05                         	dc.b	  5
0000D9E3 08                         	dc.b	  8
0000D9E4 0D                         	dc.b	 $D
0000D9E5 F8                         	dc.b	$F8 ; ø
0000D9E6 D0                         	dc.b	$D0 ; Ð
0000D9E7 05                         	dc.b	  5
0000D9E8 08                         	dc.b	  8
0000D9E9 0D                         	dc.b	 $D
0000D9EA 08                         	dc.b	  8
0000D9EB D0                         	dc.b	$D0 ; Ð
0000D9EC 05                         	dc.b	  5
0000D9ED 08                         	dc.b	  8
0000D9EE 0D                         	dc.b	 $D
0000D9EF 18                         	dc.b	$18
0000D9F0 E0                         	dc.b	$E0 ; à
0000D9F1 05                         	dc.b	  5
0000D9F2 08                         	dc.b	  8
0000D9F3 11                         	dc.b	$11
0000D9F4 D8                         	dc.b	$D8 ; Ø
0000D9F5 E0                         	dc.b	$E0 ; à
0000D9F6 05                         	dc.b	  5
0000D9F7 08                         	dc.b	  8
0000D9F8 11                         	dc.b	$11
0000D9F9 E8                         	dc.b	$E8 ; è
0000D9FA E0                         	dc.b	$E0 ; à
0000D9FB 05                         	dc.b	  5
0000D9FC 08                         	dc.b	  8
0000D9FD 11                         	dc.b	$11
0000D9FE F8                         	dc.b	$F8 ; ø
0000D9FF E0                         	dc.b	$E0 ; à
0000DA00 05                         	dc.b	  5
0000DA01 08                         	dc.b	  8
0000DA02 11                         	dc.b	$11
0000DA03 08                         	dc.b	  8
0000DA04 E0                         	dc.b	$E0 ; à
0000DA05 05                         	dc.b	  5
0000DA06 08                         	dc.b	  8
0000DA07 11                         	dc.b	$11
0000DA08 18                         	dc.b	$18
0000DA09 F0                         	dc.b	$F0 ; ð
0000DA0A 05                         	dc.b	  5
0000DA0B 00                         	dc.b	  0
0000DA0C 19                         	dc.b	$19
0000DA0D D8                         	dc.b	$D8 ; Ø
0000DA0E F0                         	dc.b	$F0 ; ð
0000DA0F 05                         	dc.b	  5
0000DA10 08                         	dc.b	  8
0000DA11 15                         	dc.b	$15
0000DA12 E8                         	dc.b	$E8 ; è
0000DA13 F0                         	dc.b	$F0 ; ð
0000DA14 05                         	dc.b	  5
0000DA15 08                         	dc.b	  8
0000DA16 15                         	dc.b	$15
0000DA17 F8                         	dc.b	$F8 ; ø
0000DA18 F0                         	dc.b	$F0 ; ð
0000DA19 05                         	dc.b	  5
0000DA1A 08                         	dc.b	  8
0000DA1B 15                         	dc.b	$15
0000DA1C 08                         	dc.b	  8
0000DA1D F0                         	dc.b	$F0 ; ð
0000DA1E 05                         	dc.b	  5
0000DA1F 08                         	dc.b	  8
0000DA20 15                         	dc.b	$15
0000DA21 18                         	dc.b	$18
0000DA22 00                         	dc.b	  0
0000DA23 05                         	dc.b	  5
0000DA24 08                         	dc.b	  8
0000DA25 25                         	dc.b	$25 ; %
0000DA26 D8                         	dc.b	$D8 ; Ø
0000DA27 00                         	dc.b	  0
0000DA28 05                         	dc.b	  5
0000DA29 00                         	dc.b	  0
0000DA2A 1D                         	dc.b	$1D
0000DA2B E8                         	dc.b	$E8 ; è
0000DA2C 00                         	dc.b	  0
0000DA2D 05                         	dc.b	  5
0000DA2E 00                         	dc.b	  0
0000DA2F 21                         	dc.b	$21 ; !
0000DA30 F8                         	dc.b	$F8 ; ø
0000DA31 00                         	dc.b	  0
0000DA32 05                         	dc.b	  5
0000DA33 00                         	dc.b	  0
0000DA34 21                         	dc.b	$21 ; !
0000DA35 08                         	dc.b	  8
0000DA36 00                         	dc.b	  0
0000DA37 05                         	dc.b	  5
0000DA38 08                         	dc.b	  8
0000DA39 1D                         	dc.b	$1D
0000DA3A 18                         	dc.b	$18
0000DA3B 10                         	dc.b	$10
0000DA3C 05                         	dc.b	  5
0000DA3D 00                         	dc.b	  0
0000DA3E 19                         	dc.b	$19
0000DA3F F8                         	dc.b	$F8 ; ø
0000DA40 10                         	dc.b	$10
0000DA41 05                         	dc.b	  5
0000DA42 00                         	dc.b	  0
0000DA43 19                         	dc.b	$19
0000DA44 08                         	dc.b	  8
0000DA45 10                         	dc.b	$10
0000DA46 05                         	dc.b	  5
0000DA47 00                         	dc.b	  0
0000DA48 19                         	dc.b	$19
0000DA49 18                         	dc.b	$18
0000DA4A                            	even
0000DA4A                            	even
0000DA4A                            	even
0000DA4A 0000                       ObjCollapsePlatform_Sizes1:dc.w	byte_20C598-ObjCollapsePlatform_Sizes1
0000DA4C 0403                       byte_20C598:	dc.b	4,	3
0000DA4E FFFF                       	dc.b	$FF, $FF
0000DA50 0000                       	dc.b	0,	0
0000DA52 0001                       	dc.b	0,	1
0000DA54 0203                       	dc.b	2,	3
0000DA56 0304                       	dc.b	3,	4
0000DA58 0005                       	dc.b	0,	5
0000DA5A 0505                       	dc.b	5,	5
0000DA5C 0506                       	dc.b	5,	6
0000DA5E 0606                       	dc.b	6,	6
0000DA60 0606                       	dc.b	6,	6
0000DA62                            MapSpr_CollapsePlatform3:
0000DA62                            	include	"level/objects/platform/mapcollapsepieces.asm"
0000DA62                            .Map:
0000DA62 0000                       	dc.w	unk_20C5BC-.Map
0000DA64 0000                       	dc.w	unk_20C5C2-.Map
0000DA66 0000                       	dc.w	unk_20C5C8-.Map
0000DA68 0000                       	dc.w	unk_20C5CE-.Map
0000DA6A 0000                       	dc.w	unk_20C5D4-.Map
0000DA6C 0000                       	dc.w	unk_20C5DA-.Map
0000DA6E 0000                       	dc.w	unk_20C5E0-.Map
0000DA70 01                         unk_20C5BC:	dc.b	  1
0000DA71 F8                         	dc.b	$F8 ; ø
0000DA72 05                         	dc.b	  5
0000DA73 00                         	dc.b	  0
0000DA74 19                         	dc.b	$19
0000DA75 F8                         	dc.b	$F8 ; ø
0000DA76 01                         unk_20C5C2:	dc.b	  1
0000DA77 F8                         	dc.b	$F8 ; ø
0000DA78 05                         	dc.b	  5
0000DA79 08                         	dc.b	  8
0000DA7A 25                         	dc.b	$25 ; %
0000DA7B F8                         	dc.b	$F8 ; ø
0000DA7C 01                         unk_20C5C8:	dc.b	  1
0000DA7D F8                         	dc.b	$F8 ; ø
0000DA7E 05                         	dc.b	  5
0000DA7F 00                         	dc.b	  0
0000DA80 1D                         	dc.b	$1D
0000DA81 F8                         	dc.b	$F8 ; ø
0000DA82 01                         unk_20C5CE:	dc.b	  1
0000DA83 F8                         	dc.b	$F8 ; ø
0000DA84 05                         	dc.b	  5
0000DA85 00                         	dc.b	  0
0000DA86 21                         	dc.b	$21 ; !
0000DA87 F8                         	dc.b	$F8 ; ø
0000DA88 01                         unk_20C5D4:	dc.b	  1
0000DA89 F8                         	dc.b	$F8 ; ø
0000DA8A 05                         	dc.b	  5
0000DA8B 08                         	dc.b	  8
0000DA8C 1D                         	dc.b	$1D
0000DA8D F8                         	dc.b	$F8 ; ø
0000DA8E 01                         unk_20C5DA:	dc.b	  1
0000DA8F F8                         	dc.b	$F8 ; ø
0000DA90 05                         	dc.b	  5
0000DA91 08                         	dc.b	  8
0000DA92 15                         	dc.b	$15
0000DA93 F8                         	dc.b	$F8 ; ø
0000DA94 02                         unk_20C5E0:	dc.b	  2
0000DA95 E8                         	dc.b	$E8 ; è
0000DA96 05                         	dc.b	  5
0000DA97 08                         	dc.b	  8
0000DA98 0D                         	dc.b	 $D
0000DA99 F8                         	dc.b	$F8 ; ø
0000DA9A F8                         	dc.b	$F8 ; ø
0000DA9B 05                         	dc.b	  5
0000DA9C 08                         	dc.b	  8
0000DA9D 11                         	dc.b	$11
0000DA9E F8                         	dc.b	$F8 ; ø
0000DA9F 00                         	dc.b	  0
0000DA9F 00                         	dc.b	  0
0000DAA0                            	even
0000DAA0                            MapSpr_CollapsePlatform2:
0000DAA0                            	include	"level/objects/platform/mapcollapse.asm"
0000DAA0                            .Map:
0000DAA0 0000                       	dc.w	unk_20C5F8-.Map
0000DAA2 0000                       	dc.w	unk_20C5F8-.Map
0000DAA4 0000                       	dc.w	unk_20C653-.Map
0000DAA6 0000                       	dc.w	unk_20C6B8-.Map
0000DAA8 0000                       	dc.w	unk_20C71D-.Map
0000DAAA 0000                       	dc.w	unk_20C750-.Map
0000DAAC 12                         unk_20C5F8:	dc.b	$12
0000DAAD E0                         	dc.b	$E0 ; à
0000DAAE 05                         	dc.b	  5
0000DAAF 00                         	dc.b	  0
0000DAB0 0D                         	dc.b	 $D
0000DAB1 D0                         	dc.b	$D0 ; Ð
0000DAB2 E0                         	dc.b	$E0 ; à
0000DAB3 05                         	dc.b	  5
0000DAB4 00                         	dc.b	  0
0000DAB5 0D                         	dc.b	 $D
0000DAB6 E0                         	dc.b	$E0 ; à
0000DAB7 E0                         	dc.b	$E0 ; à
0000DAB8 05                         	dc.b	  5
0000DAB9 00                         	dc.b	  0
0000DABA 0D                         	dc.b	 $D
0000DABB F0                         	dc.b	$F0 ; ð
0000DABC E0                         	dc.b	$E0 ; à
0000DABD 05                         	dc.b	  5
0000DABE 00                         	dc.b	  0
0000DABF 0D                         	dc.b	 $D
0000DAC0 00                         	dc.b	  0
0000DAC1 E0                         	dc.b	$E0 ; à
0000DAC2 05                         	dc.b	  5
0000DAC3 00                         	dc.b	  0
0000DAC4 0D                         	dc.b	 $D
0000DAC5 10                         	dc.b	$10
0000DAC6 E0                         	dc.b	$E0 ; à
0000DAC7 05                         	dc.b	  5
0000DAC8 00                         	dc.b	  0
0000DAC9 0D                         	dc.b	 $D
0000DACA 20                         	dc.b	$20
0000DACB F0                         	dc.b	$F0 ; ð
0000DACC 05                         	dc.b	  5
0000DACD 00                         	dc.b	  0
0000DACE 11                         	dc.b	$11
0000DACF D0                         	dc.b	$D0 ; Ð
0000DAD0 F0                         	dc.b	$F0 ; ð
0000DAD1 05                         	dc.b	  5
0000DAD2 00                         	dc.b	  0
0000DAD3 11                         	dc.b	$11
0000DAD4 E0                         	dc.b	$E0 ; à
0000DAD5 F0                         	dc.b	$F0 ; ð
0000DAD6 05                         	dc.b	  5
0000DAD7 00                         	dc.b	  0
0000DAD8 11                         	dc.b	$11
0000DAD9 F0                         	dc.b	$F0 ; ð
0000DADA F0                         	dc.b	$F0 ; ð
0000DADB 05                         	dc.b	  5
0000DADC 00                         	dc.b	  0
0000DADD 11                         	dc.b	$11
0000DADE 00                         	dc.b	  0
0000DADF F0                         	dc.b	$F0 ; ð
0000DAE0 05                         	dc.b	  5
0000DAE1 00                         	dc.b	  0
0000DAE2 11                         	dc.b	$11
0000DAE3 10                         	dc.b	$10
0000DAE4 F0                         	dc.b	$F0 ; ð
0000DAE5 05                         	dc.b	  5
0000DAE6 00                         	dc.b	  0
0000DAE7 11                         	dc.b	$11
0000DAE8 20                         	dc.b	$20
0000DAE9 00                         	dc.b	  0
0000DAEA 05                         	dc.b	  5
0000DAEB 00                         	dc.b	  0
0000DAEC 15                         	dc.b	$15
0000DAED D0                         	dc.b	$D0 ; Ð
0000DAEE 00                         	dc.b	  0
0000DAEF 05                         	dc.b	  5
0000DAF0 00                         	dc.b	  0
0000DAF1 15                         	dc.b	$15
0000DAF2 E0                         	dc.b	$E0 ; à
0000DAF3 00                         	dc.b	  0
0000DAF4 05                         	dc.b	  5
0000DAF5 00                         	dc.b	  0
0000DAF6 15                         	dc.b	$15
0000DAF7 F0                         	dc.b	$F0 ; ð
0000DAF8 00                         	dc.b	  0
0000DAF9 05                         	dc.b	  5
0000DAFA 00                         	dc.b	  0
0000DAFB 15                         	dc.b	$15
0000DAFC 00                         	dc.b	  0
0000DAFD 00                         	dc.b	  0
0000DAFE 05                         	dc.b	  5
0000DAFF 00                         	dc.b	  0
0000DB00 15                         	dc.b	$15
0000DB01 10                         	dc.b	$10
0000DB02 00                         	dc.b	  0
0000DB03 05                         	dc.b	  5
0000DB04 00                         	dc.b	  0
0000DB05 15                         	dc.b	$15
0000DB06 20                         	dc.b	$20
0000DB07 14                         unk_20C653:	dc.b	$14
0000DB08 D0                         	dc.b	$D0 ; Ð
0000DB09 05                         	dc.b	  5
0000DB0A 00                         	dc.b	  0
0000DB0B 0D                         	dc.b	 $D
0000DB0C E0                         	dc.b	$E0 ; à
0000DB0D D0                         	dc.b	$D0 ; Ð
0000DB0E 05                         	dc.b	  5
0000DB0F 00                         	dc.b	  0
0000DB10 0D                         	dc.b	 $D
0000DB11 F0                         	dc.b	$F0 ; ð
0000DB12 D0                         	dc.b	$D0 ; Ð
0000DB13 05                         	dc.b	  5
0000DB14 00                         	dc.b	  0
0000DB15 0D                         	dc.b	 $D
0000DB16 00                         	dc.b	  0
0000DB17 D0                         	dc.b	$D0 ; Ð
0000DB18 05                         	dc.b	  5
0000DB19 00                         	dc.b	  0
0000DB1A 0D                         	dc.b	 $D
0000DB1B 10                         	dc.b	$10
0000DB1C E0                         	dc.b	$E0 ; à
0000DB1D 05                         	dc.b	  5
0000DB1E 00                         	dc.b	  0
0000DB1F 11                         	dc.b	$11
0000DB20 E0                         	dc.b	$E0 ; à
0000DB21 E0                         	dc.b	$E0 ; à
0000DB22 05                         	dc.b	  5
0000DB23 00                         	dc.b	  0
0000DB24 11                         	dc.b	$11
0000DB25 F0                         	dc.b	$F0 ; ð
0000DB26 E0                         	dc.b	$E0 ; à
0000DB27 05                         	dc.b	  5
0000DB28 00                         	dc.b	  0
0000DB29 11                         	dc.b	$11
0000DB2A 00                         	dc.b	  0
0000DB2B E0                         	dc.b	$E0 ; à
0000DB2C 05                         	dc.b	  5
0000DB2D 00                         	dc.b	  0
0000DB2E 11                         	dc.b	$11
0000DB2F 10                         	dc.b	$10
0000DB30 F0                         	dc.b	$F0 ; ð
0000DB31 05                         	dc.b	  5
0000DB32 00                         	dc.b	  0
0000DB33 15                         	dc.b	$15
0000DB34 E0                         	dc.b	$E0 ; à
0000DB35 F0                         	dc.b	$F0 ; ð
0000DB36 05                         	dc.b	  5
0000DB37 00                         	dc.b	  0
0000DB38 15                         	dc.b	$15
0000DB39 F0                         	dc.b	$F0 ; ð
0000DB3A F0                         	dc.b	$F0 ; ð
0000DB3B 05                         	dc.b	  5
0000DB3C 00                         	dc.b	  0
0000DB3D 15                         	dc.b	$15
0000DB3E 00                         	dc.b	  0
0000DB3F F0                         	dc.b	$F0 ; ð
0000DB40 05                         	dc.b	  5
0000DB41 00                         	dc.b	  0
0000DB42 15                         	dc.b	$15
0000DB43 10                         	dc.b	$10
0000DB44 00                         	dc.b	  0
0000DB45 05                         	dc.b	  5
0000DB46 00                         	dc.b	  0
0000DB47 29                         	dc.b	$29 ; )
0000DB48 E0                         	dc.b	$E0 ; à
0000DB49 00                         	dc.b	  0
0000DB4A 05                         	dc.b	  5
0000DB4B 00                         	dc.b	  0
0000DB4C 33                         	dc.b	$33 ; 3
0000DB4D F0                         	dc.b	$F0 ; ð
0000DB4E 00                         	dc.b	  0
0000DB4F 05                         	dc.b	  5
0000DB50 00                         	dc.b	  0
0000DB51 33                         	dc.b	$33 ; 3
0000DB52 00                         	dc.b	  0
0000DB53 00                         	dc.b	  0
0000DB54 05                         	dc.b	  5
0000DB55 00                         	dc.b	  0
0000DB56 33                         	dc.b	$33 ; 3
0000DB57 10                         	dc.b	$10
0000DB58 10                         	dc.b	$10
0000DB59 05                         	dc.b	  5
0000DB5A 00                         	dc.b	  0
0000DB5B 31                         	dc.b	$31 ; 1
0000DB5C E0                         	dc.b	$E0 ; à
0000DB5D 10                         	dc.b	$10
0000DB5E 05                         	dc.b	  5
0000DB5F 00                         	dc.b	  0
0000DB60 2B                         	dc.b	$2B ; +
0000DB61 F0                         	dc.b	$F0 ; ð
0000DB62 10                         	dc.b	$10
0000DB63 05                         	dc.b	  5
0000DB64 00                         	dc.b	  0
0000DB65 2B                         	dc.b	$2B ; +
0000DB66 00                         	dc.b	  0
0000DB67 10                         	dc.b	$10
0000DB68 05                         	dc.b	  5
0000DB69 00                         	dc.b	  0
0000DB6A 2B                         	dc.b	$2B ; +
0000DB6B 10                         	dc.b	$10
0000DB6C 14                         unk_20C6B8:	dc.b	$14
0000DB6D D0                         	dc.b	$D0 ; Ð
0000DB6E 05                         	dc.b	  5
0000DB6F 00                         	dc.b	  0
0000DB70 0D                         	dc.b	 $D
0000DB71 E0                         	dc.b	$E0 ; à
0000DB72 D0                         	dc.b	$D0 ; Ð
0000DB73 05                         	dc.b	  5
0000DB74 00                         	dc.b	  0
0000DB75 0D                         	dc.b	 $D
0000DB76 F0                         	dc.b	$F0 ; ð
0000DB77 D0                         	dc.b	$D0 ; Ð
0000DB78 05                         	dc.b	  5
0000DB79 00                         	dc.b	  0
0000DB7A 0D                         	dc.b	 $D
0000DB7B 00                         	dc.b	  0
0000DB7C D0                         	dc.b	$D0 ; Ð
0000DB7D 05                         	dc.b	  5
0000DB7E 00                         	dc.b	  0
0000DB7F 0D                         	dc.b	 $D
0000DB80 10                         	dc.b	$10
0000DB81 E0                         	dc.b	$E0 ; à
0000DB82 05                         	dc.b	  5
0000DB83 00                         	dc.b	  0
0000DB84 11                         	dc.b	$11
0000DB85 E0                         	dc.b	$E0 ; à
0000DB86 E0                         	dc.b	$E0 ; à
0000DB87 05                         	dc.b	  5
0000DB88 00                         	dc.b	  0
0000DB89 11                         	dc.b	$11
0000DB8A F0                         	dc.b	$F0 ; ð
0000DB8B E0                         	dc.b	$E0 ; à
0000DB8C 05                         	dc.b	  5
0000DB8D 00                         	dc.b	  0
0000DB8E 11                         	dc.b	$11
0000DB8F 00                         	dc.b	  0
0000DB90 E0                         	dc.b	$E0 ; à
0000DB91 05                         	dc.b	  5
0000DB92 00                         	dc.b	  0
0000DB93 11                         	dc.b	$11
0000DB94 10                         	dc.b	$10
0000DB95 F0                         	dc.b	$F0 ; ð
0000DB96 05                         	dc.b	  5
0000DB97 00                         	dc.b	  0
0000DB98 15                         	dc.b	$15
0000DB99 E0                         	dc.b	$E0 ; à
0000DB9A F0                         	dc.b	$F0 ; ð
0000DB9B 05                         	dc.b	  5
0000DB9C 00                         	dc.b	  0
0000DB9D 15                         	dc.b	$15
0000DB9E F0                         	dc.b	$F0 ; ð
0000DB9F F0                         	dc.b	$F0 ; ð
0000DBA0 05                         	dc.b	  5
0000DBA1 00                         	dc.b	  0
0000DBA2 15                         	dc.b	$15
0000DBA3 00                         	dc.b	  0
0000DBA4 F0                         	dc.b	$F0 ; ð
0000DBA5 05                         	dc.b	  5
0000DBA6 00                         	dc.b	  0
0000DBA7 15                         	dc.b	$15
0000DBA8 10                         	dc.b	$10
0000DBA9 00                         	dc.b	  0
0000DBAA 05                         	dc.b	  5
0000DBAB 00                         	dc.b	  0
0000DBAC 33                         	dc.b	$33 ; 3
0000DBAD E0                         	dc.b	$E0 ; à
0000DBAE 00                         	dc.b	  0
0000DBAF 05                         	dc.b	  5
0000DBB0 00                         	dc.b	  0
0000DBB1 33                         	dc.b	$33 ; 3
0000DBB2 F0                         	dc.b	$F0 ; ð
0000DBB3 00                         	dc.b	  0
0000DBB4 05                         	dc.b	  5
0000DBB5 00                         	dc.b	  0
0000DBB6 33                         	dc.b	$33 ; 3
0000DBB7 00                         	dc.b	  0
0000DBB8 00                         	dc.b	  0
0000DBB9 05                         	dc.b	  5
0000DBBA 00                         	dc.b	  0
0000DBBB 33                         	dc.b	$33 ; 3
0000DBBC 10                         	dc.b	$10
0000DBBD 10                         	dc.b	$10
0000DBBE 05                         	dc.b	  5
0000DBBF 00                         	dc.b	  0
0000DBC0 2B                         	dc.b	$2B ; +
0000DBC1 E0                         	dc.b	$E0 ; à
0000DBC2 10                         	dc.b	$10
0000DBC3 05                         	dc.b	  5
0000DBC4 00                         	dc.b	  0
0000DBC5 2B                         	dc.b	$2B ; +
0000DBC6 F0                         	dc.b	$F0 ; ð
0000DBC7 10                         	dc.b	$10
0000DBC8 05                         	dc.b	  5
0000DBC9 00                         	dc.b	  0
0000DBCA 2B                         	dc.b	$2B ; +
0000DBCB 00                         	dc.b	  0
0000DBCC 10                         	dc.b	$10
0000DBCD 05                         	dc.b	  5
0000DBCE 00                         	dc.b	  0
0000DBCF 2B                         	dc.b	$2B ; +
0000DBD0 10                         	dc.b	$10
0000DBD1 0A                         unk_20C71D:	dc.b	 $A
0000DBD2 D0                         	dc.b	$D0 ; Ð
0000DBD3 05                         	dc.b	  5
0000DBD4 00                         	dc.b	  0
0000DBD5 0D                         	dc.b	 $D
0000DBD6 F0                         	dc.b	$F0 ; ð
0000DBD7 D0                         	dc.b	$D0 ; Ð
0000DBD8 05                         	dc.b	  5
0000DBD9 00                         	dc.b	  0
0000DBDA 0D                         	dc.b	 $D
0000DBDB 00                         	dc.b	  0
0000DBDC E0                         	dc.b	$E0 ; à
0000DBDD 05                         	dc.b	  5
0000DBDE 00                         	dc.b	  0
0000DBDF 11                         	dc.b	$11
0000DBE0 F0                         	dc.b	$F0 ; ð
0000DBE1 E0                         	dc.b	$E0 ; à
0000DBE2 05                         	dc.b	  5
0000DBE3 00                         	dc.b	  0
0000DBE4 11                         	dc.b	$11
0000DBE5 00                         	dc.b	  0
0000DBE6 F0                         	dc.b	$F0 ; ð
0000DBE7 05                         	dc.b	  5
0000DBE8 00                         	dc.b	  0
0000DBE9 15                         	dc.b	$15
0000DBEA F0                         	dc.b	$F0 ; ð
0000DBEB F0                         	dc.b	$F0 ; ð
0000DBEC 05                         	dc.b	  5
0000DBED 00                         	dc.b	  0
0000DBEE 15                         	dc.b	$15
0000DBEF 00                         	dc.b	  0
0000DBF0 00                         	dc.b	  0
0000DBF1 05                         	dc.b	  5
0000DBF2 00                         	dc.b	  0
0000DBF3 1D                         	dc.b	$1D
0000DBF4 F0                         	dc.b	$F0 ; ð
0000DBF5 00                         	dc.b	  0
0000DBF6 05                         	dc.b	  5
0000DBF7 00                         	dc.b	  0
0000DBF8 21                         	dc.b	$21 ; !
0000DBF9 00                         	dc.b	  0
0000DBFA 10                         	dc.b	$10
0000DBFB 05                         	dc.b	  5
0000DBFC 00                         	dc.b	  0
0000DBFD 19                         	dc.b	$19
0000DBFE F0                         	dc.b	$F0 ; ð
0000DBFF 10                         	dc.b	$10
0000DC00 05                         	dc.b	  5
0000DC01 00                         	dc.b	  0
0000DC02 19                         	dc.b	$19
0000DC03 00                         	dc.b	  0
0000DC04 0A                         unk_20C750:	dc.b	 $A
0000DC05 D0                         	dc.b	$D0 ; Ð
0000DC06 05                         	dc.b	  5
0000DC07 00                         	dc.b	  0
0000DC08 0D                         	dc.b	 $D
0000DC09 F0                         	dc.b	$F0 ; ð
0000DC0A D0                         	dc.b	$D0 ; Ð
0000DC0B 05                         	dc.b	  5
0000DC0C 00                         	dc.b	  0
0000DC0D 0D                         	dc.b	 $D
0000DC0E 00                         	dc.b	  0
0000DC0F E0                         	dc.b	$E0 ; à
0000DC10 05                         	dc.b	  5
0000DC11 00                         	dc.b	  0
0000DC12 11                         	dc.b	$11
0000DC13 F0                         	dc.b	$F0 ; ð
0000DC14 E0                         	dc.b	$E0 ; à
0000DC15 05                         	dc.b	  5
0000DC16 00                         	dc.b	  0
0000DC17 11                         	dc.b	$11
0000DC18 00                         	dc.b	  0
0000DC19 F0                         	dc.b	$F0 ; ð
0000DC1A 05                         	dc.b	  5
0000DC1B 00                         	dc.b	  0
0000DC1C 15                         	dc.b	$15
0000DC1D F0                         	dc.b	$F0 ; ð
0000DC1E F0                         	dc.b	$F0 ; ð
0000DC1F 05                         	dc.b	  5
0000DC20 00                         	dc.b	  0
0000DC21 15                         	dc.b	$15
0000DC22 00                         	dc.b	  0
0000DC23 00                         	dc.b	  0
0000DC24 05                         	dc.b	  5
0000DC25 00                         	dc.b	  0
0000DC26 21                         	dc.b	$21 ; !
0000DC27 F0                         	dc.b	$F0 ; ð
0000DC28 00                         	dc.b	  0
0000DC29 05                         	dc.b	  5
0000DC2A 08                         	dc.b	  8
0000DC2B 1D                         	dc.b	$1D
0000DC2C 00                         	dc.b	  0
0000DC2D 10                         	dc.b	$10
0000DC2E 05                         	dc.b	  5
0000DC2F 00                         	dc.b	  0
0000DC30 19                         	dc.b	$19
0000DC31 F0                         	dc.b	$F0 ; ð
0000DC32 10                         	dc.b	$10
0000DC33 05                         	dc.b	  5
0000DC34 00                         	dc.b	  0
0000DC35 19                         	dc.b	$19
0000DC36 00                         	dc.b	  0
0000DC37 00                         	dc.b	  0
0000DC37 00                         	dc.b	  0
0000DC38                            	even
0000DC38                            
0000DC38                            
0000DC38 0000                       ObjCollapsePlatform_Sizes2:dc.w	byte_20C790-ObjCollapsePlatform_Sizes2
0000DC3A 0000                       	dc.w	byte_20C790-ObjCollapsePlatform_Sizes2
0000DC3C 0000                       	dc.w	byte_20C798-ObjCollapsePlatform_Sizes2
0000DC3E 0000                       	dc.w	byte_20C79E-ObjCollapsePlatform_Sizes2
0000DC40 0000                       	dc.w	byte_20C7A4-ObjCollapsePlatform_Sizes2
0000DC42 0000                       	dc.w	byte_20C7A8-ObjCollapsePlatform_Sizes2
0000DC44 0501                       byte_20C790:	dc.b	5,	1
0000DC46 0000                       	dc.b	0,	0
0000DC48 0000                       	dc.b	0,	0
0000DC4A 0000                       	dc.b	0,	0
0000DC4C 0303                       byte_20C798:	dc.b	3,	3
0000DC4E 0102                       	dc.b	1,	2
0000DC50 0202                       	dc.b	2,	2
0000DC52 0303                       byte_20C79E:	dc.b	3,	3
0000DC54 0202                       	dc.b	2,	2
0000DC56 0202                       	dc.b	2,	2
0000DC58 0103                       byte_20C7A4:	dc.b	1,	3
0000DC5A 0305                       	dc.b	3,	5
0000DC5C 0103                       byte_20C7A8:	dc.b	1,	3
0000DC5E 0504                       	dc.b	5,	4
0000DC60                            MapSpr_CollapsePlatform4:
0000DC60                            	include	"level/objects/platform/mapcollapsepieces2.asm"
0000DC60                            .Map:
0000DC60 0000                       	dc.w	unk_20C7B8-.Map
0000DC62 0000                       	dc.w	unk_20C7C8-.Map
0000DC64 0000                       	dc.w	unk_20C7E2-.Map
0000DC66 0000                       	dc.w	unk_20C7FC-.Map
0000DC68 0000                       	dc.w	unk_20C816-.Map
0000DC6A 0000                       	dc.w	unk_20C830-.Map
0000DC6C 03                         unk_20C7B8:	dc.b	  3
0000DC6D E0                         	dc.b	$E0 ; à
0000DC6E 05                         	dc.b	  5
0000DC6F 00                         	dc.b	  0
0000DC70 0D                         	dc.b	 $D
0000DC71 F8                         	dc.b	$F8 ; ø
0000DC72 F0                         	dc.b	$F0 ; ð
0000DC73 05                         	dc.b	  5
0000DC74 00                         	dc.b	  0
0000DC75 11                         	dc.b	$11
0000DC76 F8                         	dc.b	$F8 ; ø
0000DC77 00                         	dc.b	  0
0000DC78 05                         	dc.b	  5
0000DC79 00                         	dc.b	  0
0000DC7A 15                         	dc.b	$15
0000DC7B F8                         	dc.b	$F8 ; ø
0000DC7C 05                         unk_20C7C8:	dc.b	  5
0000DC7D D0                         	dc.b	$D0 ; Ð
0000DC7E 05                         	dc.b	  5
0000DC7F 00                         	dc.b	  0
0000DC80 0D                         	dc.b	 $D
0000DC81 F8                         	dc.b	$F8 ; ø
0000DC82 E0                         	dc.b	$E0 ; à
0000DC83 05                         	dc.b	  5
0000DC84 00                         	dc.b	  0
0000DC85 11                         	dc.b	$11
0000DC86 F8                         	dc.b	$F8 ; ø
0000DC87 F0                         	dc.b	$F0 ; ð
0000DC88 05                         	dc.b	  5
0000DC89 00                         	dc.b	  0
0000DC8A 15                         	dc.b	$15
0000DC8B F8                         	dc.b	$F8 ; ø
0000DC8C 00                         	dc.b	  0
0000DC8D 05                         	dc.b	  5
0000DC8E 00                         	dc.b	  0
0000DC8F 29                         	dc.b	$29 ; )
0000DC90 F8                         	dc.b	$F8 ; ø
0000DC91 10                         	dc.b	$10
0000DC92 05                         	dc.b	  5
0000DC93 00                         	dc.b	  0
0000DC94 31                         	dc.b	$31 ; 1
0000DC95 F8                         	dc.b	$F8 ; ø
0000DC96 05                         unk_20C7E2:	dc.b	  5
0000DC97 D0                         	dc.b	$D0 ; Ð
0000DC98 05                         	dc.b	  5
0000DC99 00                         	dc.b	  0
0000DC9A 0D                         	dc.b	 $D
0000DC9B F8                         	dc.b	$F8 ; ø
0000DC9C E0                         	dc.b	$E0 ; à
0000DC9D 05                         	dc.b	  5
0000DC9E 00                         	dc.b	  0
0000DC9F 11                         	dc.b	$11
0000DCA0 F8                         	dc.b	$F8 ; ø
0000DCA1 F0                         	dc.b	$F0 ; ð
0000DCA2 05                         	dc.b	  5
0000DCA3 00                         	dc.b	  0
0000DCA4 15                         	dc.b	$15
0000DCA5 F8                         	dc.b	$F8 ; ø
0000DCA6 00                         	dc.b	  0
0000DCA7 05                         	dc.b	  5
0000DCA8 00                         	dc.b	  0
0000DCA9 33                         	dc.b	$33 ; 3
0000DCAA F8                         	dc.b	$F8 ; ø
0000DCAB 10                         	dc.b	$10
0000DCAC 05                         	dc.b	  5
0000DCAD 00                         	dc.b	  0
0000DCAE 2B                         	dc.b	$2B ; +
0000DCAF F8                         	dc.b	$F8 ; ø
0000DCB0 05                         unk_20C7FC:	dc.b	  5
0000DCB1 D0                         	dc.b	$D0 ; Ð
0000DCB2 05                         	dc.b	  5
0000DCB3 00                         	dc.b	  0
0000DCB4 0D                         	dc.b	 $D
0000DCB5 F8                         	dc.b	$F8 ; ø
0000DCB6 E0                         	dc.b	$E0 ; à
0000DCB7 05                         	dc.b	  5
0000DCB8 00                         	dc.b	  0
0000DCB9 11                         	dc.b	$11
0000DCBA F8                         	dc.b	$F8 ; ø
0000DCBB F0                         	dc.b	$F0 ; ð
0000DCBC 05                         	dc.b	  5
0000DCBD 00                         	dc.b	  0
0000DCBE 15                         	dc.b	$15
0000DCBF F8                         	dc.b	$F8 ; ø
0000DCC0 00                         	dc.b	  0
0000DCC1 05                         	dc.b	  5
0000DCC2 00                         	dc.b	  0
0000DCC3 1D                         	dc.b	$1D
0000DCC4 F8                         	dc.b	$F8 ; ø
0000DCC5 10                         	dc.b	$10
0000DCC6 05                         	dc.b	  5
0000DCC7 00                         	dc.b	  0
0000DCC8 19                         	dc.b	$19
0000DCC9 F8                         	dc.b	$F8 ; ø
0000DCCA 05                         unk_20C816:	dc.b	  5
0000DCCB D0                         	dc.b	$D0 ; Ð
0000DCCC 05                         	dc.b	  5
0000DCCD 00                         	dc.b	  0
0000DCCE 0D                         	dc.b	 $D
0000DCCF F8                         	dc.b	$F8 ; ø
0000DCD0 E0                         	dc.b	$E0 ; à
0000DCD1 05                         	dc.b	  5
0000DCD2 00                         	dc.b	  0
0000DCD3 11                         	dc.b	$11
0000DCD4 F8                         	dc.b	$F8 ; ø
0000DCD5 F0                         	dc.b	$F0 ; ð
0000DCD6 05                         	dc.b	  5
0000DCD7 00                         	dc.b	  0
0000DCD8 15                         	dc.b	$15
0000DCD9 F8                         	dc.b	$F8 ; ø
0000DCDA 00                         	dc.b	  0
0000DCDB 05                         	dc.b	  5
0000DCDC 08                         	dc.b	  8
0000DCDD 1D                         	dc.b	$1D
0000DCDE F8                         	dc.b	$F8 ; ø
0000DCDF 10                         	dc.b	$10
0000DCE0 05                         	dc.b	  5
0000DCE1 00                         	dc.b	  0
0000DCE2 19                         	dc.b	$19
0000DCE3 F8                         	dc.b	$F8 ; ø
0000DCE4 05                         unk_20C830:	dc.b	  5
0000DCE5 D0                         	dc.b	$D0 ; Ð
0000DCE6 05                         	dc.b	  5
0000DCE7 00                         	dc.b	  0
0000DCE8 0D                         	dc.b	 $D
0000DCE9 F8                         	dc.b	$F8 ; ø
0000DCEA E0                         	dc.b	$E0 ; à
0000DCEB 05                         	dc.b	  5
0000DCEC 00                         	dc.b	  0
0000DCED 11                         	dc.b	$11
0000DCEE F8                         	dc.b	$F8 ; ø
0000DCEF F0                         	dc.b	$F0 ; ð
0000DCF0 05                         	dc.b	  5
0000DCF1 00                         	dc.b	  0
0000DCF2 15                         	dc.b	$15
0000DCF3 F8                         	dc.b	$F8 ; ø
0000DCF4 00                         	dc.b	  0
0000DCF5 05                         	dc.b	  5
0000DCF6 00                         	dc.b	  0
0000DCF7 21                         	dc.b	$21 ; !
0000DCF8 F8                         	dc.b	$F8 ; ø
0000DCF9 10                         	dc.b	$10
0000DCFA 05                         	dc.b	  5
0000DCFB 00                         	dc.b	  0
0000DCFC 19                         	dc.b	$19
0000DCFD F8                         	dc.b	$F8 ; ø
0000DCFD F8                         	dc.b	$F8 ; ø
0000DCFE                            	even
0000DCFE                            ; -------------------------------------------------------------------------------
0000DCFE                            
0000DCFE                            ObjPlatform:
0000DCFE 7000                       	moveq	#0,d0
0000DD00 1028 0024                  	move.b	oRoutine(a0),d0
0000DD04 303B 0000                  	move.w	ObjPlatform_Index(pc,d0.w),d0
0000DD08 4EBB 0000                  	jsr	ObjPlatform_Index(pc,d0.w)
0000DD0C 4EB8 4012                  	jsr	DrawObject
0000DD10 4E75                       	rts
0000DD12                            ; End of function ObjPlatform
0000DD12                            
0000DD12                            ; -------------------------------------------------------------------------------
0000DD12 0000                       ObjPlatform_Index:dc.w	ObjPlatform_Init-ObjPlatform_Index
0000DD14 0000                       	dc.w	ObjPlatform_Main-ObjPlatform_Index
0000DD16                            ; -------------------------------------------------------------------------------
0000DD16                            
0000DD16                            ObjPlatform_SolidObj:
0000DD16 43F8 D000                  	lea	(v_player).w,a1
0000DD1A 3628 0008                  	move.w	oX(a0),d3
0000DD1E 3828 000C                  	move.w	oY(a0),d4
0000DD22 4EFA C89E                  	jmp	SolidObject1
0000DD26                            ; End of function ObjPlatform_SolidObj
0000DD26                            
0000DD26                            ; -------------------------------------------------------------------------------
0000DD26                            
0000DD26                            ObjPlatform_Init:
0000DD26 0028 0004 0001             	ori.b	#4,oRender(a0)
0000DD2C 317C 44BE 0002             	move.w	#$44BE,oTile(a0)
0000DD32 117C 0002 0018             	move.b	#2,oPriority(a0)
0000DD38 3168 0008 0038             	move.w	oX(a0),oVar38(a0)
0000DD3E 3168 000C 003A             	move.w	oY(a0),oVar3A(a0)
0000DD44 3168 000C 0036             	move.w	oY(a0),oVar36(a0)
0000DD4A 203C 0000 0000             	move.l	#MapSpr_Platform,d0
0000DD50 0C79 0000 00FF 1506        	cmpi.w	#0,(v_zone).l
0000DD58 6700                       	beq.s	.SetMaps
0000DD5A 203C 0000 0000             	move.l	#MapSpr_Platform,d0
0000DD60 0C79 0001 00FF 1506        	cmpi.w	#1,(v_zone).l
0000DD68 6700                       	beq.s	.SetMaps
0000DD6A 203C 0000 0000             	move.l	#MapSpr_Platform,d0
0000DD70                            
0000DD70                            .SetMaps:
0000DD70 2140 0004                  	move.l	d0,oMap(a0)
0000DD74 1028 0028                  	move.b	oSubtype(a0),d0
0000DD78 1200                       	move.b	d0,d1
0000DD7A 0240 0003                  	andi.w	#3,d0
0000DD7E 1140 001A                  	move.b	d0,oMapFrame(a0)
0000DD82 117B 0000 0019             	move.b	ObjPlatform_Widths(pc,d0.w),oWidth(a0)
0000DD88 117C 0008 0016             	move.b	#8,oYRadius(a0)
0000DD8E E409                       	lsr.b	#2,d1
0000DD90 0241 0003                  	andi.w	#3,d1
0000DD94 117B 1000 002D             	move.b	ObjPlatform_Ranges(pc,d1.w),oVar2D(a0)
0000DD9A 1028 0029                  	move.b	oSubtype2(a0),d0
0000DD9E 6700                       	beq.s	.NoChild
0000DDA0 4EB8 7CE4                  	jsr	FindObjSlot
0000DDA4 6700                       	beq.s	.MakeSpring
0000DDA6 4EF9 0000 0000             	jmp	ObjPlatform_Destroy
0000DDAC                            
0000DDAC                            ; -------------------------------------------------------------------------------
0000DDAC                            
0000DDAC                            .MakeSpring:
0000DDAC 12BC 000A                  	move.b	#$A,oID(a1)
0000DDB0 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000DDB6 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000DDBC 0469 0010 000C             	subi.w	#$10,oY(a1)
0000DDC2 137C 00F0 0039             	move.b	#$F0,oVar39(a1)
0000DDC8 3348 0034                  	move.w	a0,oVar34(a1)
0000DDCC 1028 0029                  	move.b	oSubtype2(a0),d0
0000DDD0 1200                       	move.b	d0,d1
0000DDD2 0201 0002                  	andi.b	#2,d1
0000DDD6 1341 0028                  	move.b	d1,oSubtype(a1)
0000DDDA 0200 00F8                  	andi.b	#$F8,d0
0000DDDE 1340 0038                  	move.b	d0,oVar38(a1)
0000DDE2 D169 0008                  	add.w	d0,oX(a1)
0000DDE6                            
0000DDE6                            .NoChild:
0000DDE6 5428 0024                  	addq.b	#2,oRoutine(a0)
0000DDEA 4E75                       	rts
0000DDEC                            ; End of function ObjPlatform_Init
0000DDEC                            
0000DDEC                            ; -------------------------------------------------------------------------------
0000DDEC 1020 3000                  ObjPlatform_Widths:dc.b	$10, $20, $30, 0
0000DDF0 0203 0406                  ObjPlatform_Ranges:dc.b	2, 3, 4, 6
0000DDF4                            ; -------------------------------------------------------------------------------
0000DDF4                            
0000DDF4                            ObjPlatform_Main:
0000DDF4 4A79 00FF 190E             	tst.w	(v_time_stop_timer).l
0000DDFA 6700                       	beq.s	.TimeOK
0000DDFC 6000 FF18                  	bra.w	ObjPlatform_SolidObj
0000DE00                            
0000DE00                            ; -------------------------------------------------------------------------------
0000DE00                            
0000DE00                            .TimeOK:
0000DE00 1028 0028                  	move.b	oSubtype(a0),d0
0000DE04 E808                       	lsr.b	#4,d0
0000DE06 0240 000F                  	andi.w	#$F,d0
0000DE0A D040                       	add.w	d0,d0
0000DE0C 303B 0000                  	move.w	ObjPlatform_Subtypes(pc,d0.w),d0
0000DE10 4EBB 0000                  	jsr	ObjPlatform_Subtypes(pc,d0.w)
0000DE14 3028 0038                  	move.w	$38(a0),d0
0000DE18 0240 FF80                  	andi.w	#$FF80,d0
0000DE1C 3238 F700                  	move.w	(v_cam_fg_x).w,d1
0000DE20 0441 0080                  	subi.w	#$80,d1
0000DE24 0241 FF80                  	andi.w	#$FF80,d1
0000DE28 9041                       	sub.w	d1,d0
0000DE2A 0C40 0280                  	cmpi.w	#$280,d0
0000DE2E 6200                       	bhi.s	.Destroy
0000DE30 4E75                       	rts
0000DE32                            
0000DE32                            ; -------------------------------------------------------------------------------
0000DE32                            
0000DE32                            .Destroy:
0000DE32 43F8 D000                  	lea	(v_player).w,a1
0000DE36 4EBA C646                  	jsr	ClearObjRide
0000DE3A 6000 0000                  	bra.w	ObjPlatform_Destroy
0000DE3E                            ; End of function ObjPlatform_Main
0000DE3E                            
0000DE3E                            ; -------------------------------------------------------------------------------
0000DE3E                            ObjPlatform_Subtypes:
0000DE3E 0000                       	dc.w	ObjPlatform_Subtype0X-ObjPlatform_Subtypes
0000DE40 0000                       	dc.w	ObjPlatform_Subtype1X-ObjPlatform_Subtypes
0000DE42 0000                       	dc.w	ObjPlatform_Subtype2X-ObjPlatform_Subtypes
0000DE44 0000                       	dc.w	ObjPlatform_Subtype3X-ObjPlatform_Subtypes
0000DE46 0000                       	dc.w	ObjPlatform_Subtype4X-ObjPlatform_Subtypes
0000DE48 0000                       	dc.w	ObjPlatform_Subtype5X-ObjPlatform_Subtypes
0000DE4A 0000                       	dc.w	ObjPlatform_Subtype6X-ObjPlatform_Subtypes
0000DE4C 0000                       	dc.w	ObjPlatform_Subtype7X-ObjPlatform_Subtypes
0000DE4E 0000                       	dc.w	ObjPlatform_Subtype8X-ObjPlatform_Subtypes
0000DE50 0000                       	dc.w	ObjPlatform_Subtype9X-ObjPlatform_Subtypes
0000DE52                            ; -------------------------------------------------------------------------------
0000DE52                            
0000DE52                            ObjPlatform_Subtype0X:
0000DE52 5228 002A                  	addq.b	#1,oVar2A(a0)
0000DE56 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000DE5A D068 003A                  	add.w	oVar3A(a0),d0
0000DE5E 3140 000C                  	move.w	d0,oY(a0)
0000DE62 4EFA FEB2                  	jmp	ObjPlatform_SolidObj
0000DE66                            ; End of function ObjPlatform_Subtype0X
0000DE66                            
0000DE66                            ; -------------------------------------------------------------------------------
0000DE66                            
0000DE66                            ObjPlatform_Subtype1X:
0000DE66 2F28 0008                  	move.l	oX(a0),-(sp)
0000DE6A 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000DE6E D068 0038                  	add.w	oVar38(a0),d0
0000DE72 3140 0008                  	move.w	d0,oX(a0)
0000DE76 5228 002A                  	addq.b	#1,oVar2A(a0)
0000DE7A 7000                       	moveq	#0,d0
0000DE7C 1028 002C                  	move.b	oVar2C(a0),d0
0000DE80 E200                       	asr.b	#1,d0
0000DE82 D068 003A                  	add.w	oVar3A(a0),d0
0000DE86 3140 000C                  	move.w	d0,oY(a0)
0000DE8A                            
0000DE8A                            ObjPlatform_SetXSpdAndDrop:
0000DE8A 201F                       	move.l	(sp)+,d0
0000DE8C 2228 0008                  	move.l	oX(a0),d1
0000DE90 9280                       	sub.l	d0,d1
0000DE92 E081                       	asr.l	#8,d1
0000DE94 3141 0010                  	move.w	d1,oXVel(a0)
0000DE98                            
0000DE98                            ObjPlatform_DropWhenStoodOn:
0000DE98 4EBA FE7C                  	jsr	ObjPlatform_SolidObj(pc)
0000DE9C 6700                       	beq.s	.Backup
0000DE9E 1028 002C                  	move.b	oVar2C(a0),d0
0000DEA2 0C00 0008                  	cmpi.b	#8,d0
0000DEA6 6400                       	bcc.s	.EndDropping
0000DEA8 5228 002C                  	addq.b	#1,oVar2C(a0)
0000DEAC                            
0000DEAC                            .EndDropping:
0000DEAC 7001                       	moveq	#1,d0
0000DEAE 4E75                       	rts
0000DEB0                            
0000DEB0                            ; -------------------------------------------------------------------------------
0000DEB0                            
0000DEB0                            .Backup:
0000DEB0 7000                       	moveq	#0,d0
0000DEB2 1028 002C                  	move.b	oVar2C(a0),d0
0000DEB6 6700                       	beq.s	.EndRising
0000DEB8 5328 002C                  	subq.b	#1,oVar2C(a0)
0000DEBC                            
0000DEBC                            .EndRising:
0000DEBC 7000                       	moveq	#0,d0
0000DEBE 4E75                       	rts
0000DEC0                            ; End of function ObjPlatform_Subtype1X
0000DEC0                            
0000DEC0                            ; -------------------------------------------------------------------------------
0000DEC0                            
0000DEC0                            ObjPlatform_Subtype2X:
0000DEC0 2F28 0008                  	move.l	oX(a0),-(sp)
0000DEC4 5228 002A                  	addq.b	#1,oVar2A(a0)
0000DEC8 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000DECC D068 003A                  	add.w	oVar3A(a0),d0
0000DED0 3140 000C                  	move.w	d0,oY(a0)
0000DED4 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000DED8 D068 0038                  	add.w	oVar38(a0),d0
0000DEDC 3140 0008                  	move.w	d0,oX(a0)
0000DEE0 6000 FFA8                  	bra.w	ObjPlatform_SetXSpdAndDrop
0000DEE4                            ; End of function ObjPlatform_Subtype2X
0000DEE4                            
0000DEE4                            ; -------------------------------------------------------------------------------
0000DEE4                            
0000DEE4                            ObjPlatform_Subtype3X:
0000DEE4 2F28 0008                  	move.l	oX(a0),-(sp)
0000DEE8 5228 002A                  	addq.b	#1,oVar2A(a0)
0000DEEC 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000DEF0 D068 003A                  	add.w	oVar3A(a0),d0
0000DEF4 3140 000C                  	move.w	d0,oY(a0)
0000DEF8 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000DEFC 4440                       	neg.w	d0
0000DEFE D068 0038                  	add.w	oVar38(a0),d0
0000DF02 3140 0008                  	move.w	d0,oX(a0)
0000DF06 6000 FF82                  	bra.w	ObjPlatform_SetXSpdAndDrop
0000DF0A                            ; End of function ObjPlatform_Subtype3X
0000DF0A                            
0000DF0A                            ; -------------------------------------------------------------------------------
0000DF0A                            
0000DF0A                            ObjPlatform_Subtype4X:
0000DF0A 7000                       	moveq	#0,d0
0000DF0C 1028 002C                  	move.b	oVar2C(a0),d0
0000DF10 E200                       	asr.b	#1,d0
0000DF12 D068 003A                  	add.w	oVar3A(a0),d0
0000DF16 3140 000C                  	move.w	d0,oY(a0)
0000DF1A 6000 FF7C                  	bra.w	ObjPlatform_DropWhenStoodOn
0000DF1E                            ; End of function ObjPlatform_Subtype4X
0000DF1E                            
0000DF1E                            ; -------------------------------------------------------------------------------
0000DF1E                            
0000DF1E                            ObjPlatform_Subtype5X:
0000DF1E 1028 002B                  	move.b	oVar2B(a0),d0
0000DF22 6600                       	bne.s	.RunTimer
0000DF24 4EBA FFE4                  	jsr	ObjPlatform_Subtype4X(pc)
0000DF28 6600                       	bne.s	.InitTimer
0000DF2A 4E75                       	rts
0000DF2C                            
0000DF2C                            ; -------------------------------------------------------------------------------
0000DF2C                            
0000DF2C                            .InitTimer:
0000DF2C 117C 001E 002E             	move.b	#30,oVar2E(a0)
0000DF32 5428 002B                  	addq.b	#2,oVar2B(a0)
0000DF36                            
0000DF36                            .RunTimer:
0000DF36 1028 002E                  	move.b	oVar2E(a0),d0
0000DF3A 6700                       	beq.s	.Drop
0000DF3C 5328 002E                  	subq.b	#1,oVar2E(a0)
0000DF40 6000 FFC8                  	bra.w	ObjPlatform_Subtype4X
0000DF44                            
0000DF44                            ; -------------------------------------------------------------------------------
0000DF44                            
0000DF44                            .Drop:
0000DF44 4EBA FDD0                  	jsr	ObjPlatform_SolidObj(pc)
0000DF48 2228 000C                  	move.l	oY(a0),d1
0000DF4C 3028 0012                  	move.w	oYVel(a0),d0
0000DF50 48C0                       	ext.l	d0
0000DF52 E180                       	asl.l	#8,d0
0000DF54 D280                       	add.l	d0,d1
0000DF56 2141 000C                  	move.l	d1,oY(a0)
0000DF5A 3028 0012                  	move.w	oYVel(a0),d0
0000DF5E 0C40 0400                  	cmpi.w	#$400,d0
0000DF62 6400                       	bcc.s	.ChkDel
0000DF64 0668 0040 0012             	addi.w	#$40,oYVel(a0)
0000DF6A                            
0000DF6A                            .ChkDel:
0000DF6A 3038 F704                  	move.w	(v_cam_fg_y).w,d0
0000DF6E 0640 0100                  	addi.w	#$100,d0
0000DF72 B068 000C                  	cmp.w	oY(a0),d0
0000DF76 6400                       	bcc.s	.End
0000DF78 43F8 D000                  	lea	(v_player).w,a1
0000DF7C 4EBA C500                  	jsr	ClearObjRide
0000DF80 4EF8 40BE                  	jmp	DeleteObject
0000DF84                            
0000DF84                            ; -------------------------------------------------------------------------------
0000DF84                            
0000DF84                            .End:
0000DF84 4E75                       	rts
0000DF86                            ; End of function ObjPlatform_Subtype5X
0000DF86                            
0000DF86                            ; -------------------------------------------------------------------------------
0000DF86                            
0000DF86                            ObjPlatform_Subtype6X:
0000DF86 1028 002B                  	move.b	oVar2B(a0),d0
0000DF8A 0240 00FF                  	andi.w	#$FF,d0
0000DF8E 303B 0000                  	move.w	ObjPlatform_Subtype6X_Index(pc,d0.w),d0
0000DF92 4EFB 0000                  	jmp	ObjPlatform_Subtype6X_Index(pc,d0.w)
0000DF96                            ; End of function ObjPlatform_Subtype6X
0000DF96                            
0000DF96                            ; -------------------------------------------------------------------------------
0000DF96                            ObjPlatform_Subtype6X_Index:
0000DF96 0000                       	dc.w	ObjPlatform_Subtype6X_Stationary1-ObjPlatform_Subtype6X_Index
0000DF98 0000                       	dc.w	ObjPlatform_Subtype6X_MoveDown-ObjPlatform_Subtype6X_Index
0000DF9A 0000                       	dc.w	ObjPlatform_Subtype6X_Stationary2-ObjPlatform_Subtype6X_Index
0000DF9C                            ; -------------------------------------------------------------------------------
0000DF9C                            
0000DF9C                            ObjPlatform_Subtype6X_Stationary1:
0000DF9C 4EBA FF6C                  	jsr	ObjPlatform_Subtype4X(pc)
0000DFA0 6600                       	bne.s	.StartMoving
0000DFA2 4E75                       	rts
0000DFA4                            
0000DFA4                            ; -------------------------------------------------------------------------------
0000DFA4                            
0000DFA4                            .StartMoving:
0000DFA4 5428 002B                  	addq.b	#2,oVar2B(a0)
0000DFA8                            ; End of function ObjPlatform_Subtype6X_Stationary1
0000DFA8                            
0000DFA8                            ; -------------------------------------------------------------------------------
0000DFA8                            
0000DFA8                            ObjPlatform_Subtype6X_MoveDown:
0000DFA8 1028 002A                  	move.b	oVar2A(a0),d0
0000DFAC 0C00 0040                  	cmpi.b	#$40,d0
0000DFB0 6400 0000                  	bcc.w	.StopMoving
0000DFB4 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000DFB8 4440                       	neg.w	d0
0000DFBA D068 003A                  	add.w	oVar3A(a0),d0
0000DFBE 3140 000C                  	move.w	d0,oY(a0)
0000DFC2 5428 002A                  	addq.b	#2,oVar2A(a0)
0000DFC6 4EFA FD4E                  	jmp	ObjPlatform_SolidObj
0000DFCA                            
0000DFCA                            ; -------------------------------------------------------------------------------
0000DFCA                            
0000DFCA                            .StopMoving:
0000DFCA 3168 000C 003A             	move.w	oY(a0),oVar3A(a0)
0000DFD0 5428 002B                  	addq.b	#2,oVar2B(a0)
0000DFD4                            ; End of function ObjPlatform_Subtype6X_MoveDown
0000DFD4                            
0000DFD4                            ; -------------------------------------------------------------------------------
0000DFD4                            
0000DFD4                            ObjPlatform_Subtype6X_Stationary2:
0000DFD4 6000 FF34                  	bra.w	ObjPlatform_Subtype4X
0000DFD8                            ; End of function ObjPlatform_Subtype6X_Stationary2
0000DFD8                            
0000DFD8                            ; -------------------------------------------------------------------------------
0000DFD8                            
0000DFD8                            ObjPlatform_Subtype7X:
0000DFD8 1028 002B                  	move.b	oVar2B(a0),d0
0000DFDC 0240 00FF                  	andi.w	#$FF,d0
0000DFE0 303B 0000                  	move.w	ObjPlatform_Subtype7X_Index(pc,d0.w),d0
0000DFE4 4EFB 0000                  	jmp	ObjPlatform_Subtype7X_Index(pc,d0.w)
0000DFE8                            ; End of function ObjPlatform_Subtype7X
0000DFE8                            
0000DFE8                            ; -------------------------------------------------------------------------------
0000DFE8 0000                       ObjPlatform_Subtype7X_Index:dc.w	ObjPlatform_Subtype7X_Stationary1-ObjPlatform_Subtype7X_Index
0000DFEA 0000                       	dc.w	ObjPlatform_Subtype7X_Rising-ObjPlatform_Subtype7X_Index
0000DFEC 0000                       	dc.w	ObjPlatform_Subtype7X_Stationary2-ObjPlatform_Subtype7X_Index
0000DFEE                            ; -------------------------------------------------------------------------------
0000DFEE                            
0000DFEE                            ObjPlatform_Subtype7X_Stationary1:
0000DFEE 4EBA FF1A                  	jsr	ObjPlatform_Subtype4X(pc)
0000DFF2 6600                       	bne.s	.StartMoving
0000DFF4 4E75                       	rts
0000DFF6                            
0000DFF6                            ; -------------------------------------------------------------------------------
0000DFF6                            
0000DFF6                            .StartMoving:
0000DFF6 5428 002B                  	addq.b	#2,oVar2B(a0)
0000DFFA 117C 003C 002E             	move.b	#$3C,oVar2E(a0)
0000E000                            ; End of function ObjPlatform_Subtype7X_Stationary1
0000E000                            
0000E000                            ; -------------------------------------------------------------------------------
0000E000                            
0000E000                            ObjPlatform_Subtype7X_Rising:
0000E000 1028 002E                  	move.b	oVar2E(a0),d0
0000E004 6700                       	beq.s	.RiseToCeiling
0000E006 5328 002E                  	subq.b	#1,oVar2E(a0)
0000E00A 6000 FEFE                  	bra.w	ObjPlatform_Subtype4X
0000E00E                            
0000E00E                            ; -------------------------------------------------------------------------------
0000E00E                            
0000E00E                            .RiseToCeiling:
0000E00E 4EB8 3FBE                  	jsr	ObjMove
0000E012 5168 0012                  	subq.w	#8,oYVel(a0)
0000E016 4EB8 70C2                  	jsr	ObjGetCeilDist
0000E01A 4A41                       	tst.w	d1
0000E01C 6B00                       	bmi.s	.StopMoving
0000E01E 6000 FE78                  	bra.w	ObjPlatform_DropWhenStoodOn
0000E022                            
0000E022                            ; -------------------------------------------------------------------------------
0000E022                            
0000E022                            .StopMoving:
0000E022 9368 000C                  	sub.w	d1,oY(a0)
0000E026 3168 000C 003A             	move.w	oY(a0),oVar3A(a0)
0000E02C 5428 002B                  	addq.b	#2,oVar2B(a0)
0000E030                            ; End of function ObjPlatform_Subtype7X_Rising
0000E030                            
0000E030                            ; -------------------------------------------------------------------------------
0000E030                            
0000E030                            ObjPlatform_Subtype7X_Stationary2:
0000E030 6000 FED8                  	bra.w	ObjPlatform_Subtype4X
0000E034                            ; End of function ObjPlatform_Subtype7X_Stationary2
0000E034                            
0000E034                            ; -------------------------------------------------------------------------------
0000E034                            
0000E034                            ObjPlatform_Subtype8X:
0000E034 1028 002B                  	move.b	oVar2B(a0),d0
0000E038 0240 00FF                  	andi.w	#$FF,d0
0000E03C 303B 0000                  	move.w	ObjPlatform_Subtype8X_Index(pc,d0.w),d0
0000E040 4EFB 0000                  	jmp	ObjPlatform_Subtype8X_Index(pc,d0.w)
0000E044                            ; End of function ObjPlatform_Subtype8X
0000E044                            
0000E044                            ; -------------------------------------------------------------------------------
0000E044 0000                       ObjPlatform_Subtype8X_Index:dc.w	ObjPlatform_Subtype8X_Stationary1-ObjPlatform_Subtype8X_Index
0000E046 0000                       	dc.w	ObjPlatform_Subtype8X_MoveX-ObjPlatform_Subtype8X_Index
0000E048 0000                       	dc.w	ObjPlatform_Subtype8X_Stationary2-ObjPlatform_Subtype8X_Index
0000E04A                            ; -------------------------------------------------------------------------------
0000E04A                            
0000E04A                            ObjPlatform_Subtype8X_Stationary1:
0000E04A 4EBA FEBE                  	jsr	ObjPlatform_Subtype4X(pc)
0000E04E 6600                       	bne.s	.StartMoving
0000E050 4E75                       	rts
0000E052                            
0000E052                            ; -------------------------------------------------------------------------------
0000E052                            
0000E052                            .StartMoving:
0000E052 5428 002B                  	addq.b	#2,oVar2B(a0)
0000E056 117C 003C 002E             	move.b	#$3C,oVar2E(a0)
0000E05C                            ; End of function ObjPlatform_Subtype8X_Stationary1
0000E05C                            
0000E05C                            ; -------------------------------------------------------------------------------
0000E05C                            
0000E05C                            ObjPlatform_Subtype8X_MoveX:
0000E05C 1028 002E                  	move.b	oVar2E(a0),d0
0000E060 6700                       	beq.s	.DoMove
0000E062 5328 002E                  	subq.b	#1,oVar2E(a0)
0000E066 6000 FEA2                  	bra.w	ObjPlatform_Subtype4X
0000E06A                            
0000E06A                            ; -------------------------------------------------------------------------------
0000E06A                            
0000E06A                            .DoMove:
0000E06A 1028 002A                  	move.b	oVar2A(a0),d0
0000E06E 0C00 0040                  	cmpi.b	#$40,d0
0000E072 6400 0000                  	bcc.w	.StopMoving
0000E076 2F28 0008                  	move.l	oX(a0),-(sp)
0000E07A 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000E07E D068 0038                  	add.w	oVar38(a0),d0
0000E082 3140 0008                  	move.w	d0,oX(a0)
0000E086 5228 002A                  	addq.b	#1,oVar2A(a0)
0000E08A 7000                       	moveq	#0,d0
0000E08C 1028 002C                  	move.b	oVar2C(a0),d0
0000E090 E200                       	asr.b	#1,d0
0000E092 D068 003A                  	add.w	oVar3A(a0),d0
0000E096 3140 000C                  	move.w	d0,oY(a0)
0000E09A 6000 FDEE                  	bra.w	ObjPlatform_SetXSpdAndDrop
0000E09E                            
0000E09E                            ; -------------------------------------------------------------------------------
0000E09E                            
0000E09E                            .StopMoving:
0000E09E 3168 0008 0038             	move.w	oX(a0),oVar38(a0)
0000E0A4 5428 002B                  	addq.b	#2,oVar2B(a0)
0000E0A8                            ; End of function ObjPlatform_Subtype8X_MoveX
0000E0A8                            
0000E0A8                            ; -------------------------------------------------------------------------------
0000E0A8                            
0000E0A8                            ObjPlatform_Subtype8X_Stationary2:
0000E0A8 6000 FE60                  	bra.w	ObjPlatform_Subtype4X
0000E0AC                            ; End of function ObjPlatform_Subtype8X_Stationary2
0000E0AC                            
0000E0AC                            ; -------------------------------------------------------------------------------
0000E0AC                            
0000E0AC                            ObjPlatform_Subtype9X:
0000E0AC 1028 002B                  	move.b	oVar2B(a0),d0
0000E0B0 0240 00FF                  	andi.w	#$FF,d0
0000E0B4 303B 0000                  	move.w	ObjPlatform_Subtype9X_Index(pc,d0.w),d0
0000E0B8 4EFB 0000                  	jmp	ObjPlatform_Subtype9X_Index(pc,d0.w)
0000E0BC                            ; End of function ObjPlatform_Subtype9X
0000E0BC                            
0000E0BC                            ; -------------------------------------------------------------------------------
0000E0BC 0000                       ObjPlatform_Subtype9X_Index:dc.w	ObjPlatform_Subtype9X_Stationary1-ObjPlatform_Subtype9X_Index
0000E0BE 0000                       	dc.w	ObjPlatform_Subtype9X_MoveX-ObjPlatform_Subtype9X_Index
0000E0C0 0000                       	dc.w	ObjPlatform_Subtype9X_Stationary2-ObjPlatform_Subtype9X_Index
0000E0C2                            ; -------------------------------------------------------------------------------
0000E0C2                            
0000E0C2                            ObjPlatform_Subtype9X_Stationary1:
0000E0C2 4EBA FE46                  	jsr	ObjPlatform_Subtype4X(pc)
0000E0C6 6600                       	bne.s	.StartMoving
0000E0C8 4E75                       	rts
0000E0CA                            
0000E0CA                            ; -------------------------------------------------------------------------------
0000E0CA                            
0000E0CA                            .StartMoving:
0000E0CA 5428 002B                  	addq.b	#2,oVar2B(a0)
0000E0CE 117C 003C 002E             	move.b	#$3C,oVar2E(a0)
0000E0D4                            ; End of function ObjPlatform_Subtype9X_Stationary1
0000E0D4                            
0000E0D4                            ; -------------------------------------------------------------------------------
0000E0D4                            
0000E0D4                            ObjPlatform_Subtype9X_MoveX:
0000E0D4 1028 002E                  	move.b	oVar2E(a0),d0
0000E0D8 6700                       	beq.s	.DoMove
0000E0DA 5328 002E                  	subq.b	#1,oVar2E(a0)
0000E0DE 6000 FE2A                  	bra.w	ObjPlatform_Subtype4X
0000E0E2                            
0000E0E2                            ; -------------------------------------------------------------------------------
0000E0E2                            
0000E0E2                            .DoMove:
0000E0E2 1028 002A                  	move.b	oVar2A(a0),d0
0000E0E6 0C00 0040                  	cmpi.b	#$40,d0
0000E0EA 6400                       	bcc.s	.StopMoving
0000E0EC 2F28 0008                  	move.l	oX(a0),-(sp)
0000E0F0 4EBA 0000                  	jsr	ObjPlatform_DoOsc(pc)
0000E0F4 4440                       	neg.w	d0
0000E0F6 D068 0038                  	add.w	oVar38(a0),d0
0000E0FA 3140 0008                  	move.w	d0,oX(a0)
0000E0FE 5228 002A                  	addq.b	#1,oVar2A(a0)
0000E102 7000                       	moveq	#0,d0
0000E104 1028 002C                  	move.b	oVar2C(a0),d0
0000E108 E200                       	asr.b	#1,d0
0000E10A D068 003A                  	add.w	oVar3A(a0),d0
0000E10E 3140 000C                  	move.w	d0,oY(a0)
0000E112 6000 FD76                  	bra.w	ObjPlatform_SetXSpdAndDrop
0000E116                            
0000E116                            ; -------------------------------------------------------------------------------
0000E116                            
0000E116                            .StopMoving:
0000E116 3168 0008 0038             	move.w	oX(a0),oVar38(a0)
0000E11C 5428 002B                  	addq.b	#2,oVar2B(a0)
0000E120                            ; End of function ObjPlatform_Subtype9X_MoveX
0000E120                            
0000E120                            ; -------------------------------------------------------------------------------
0000E120                            
0000E120                            ObjPlatform_Subtype9X_Stationary2:
0000E120 6000 FDE8                  	bra.w	ObjPlatform_Subtype4X
0000E124                            ; End of function ObjPlatform_Subtype9X_Stationary2
0000E124                            
0000E124                            ; -------------------------------------------------------------------------------
0000E124                            
0000E124                            ObjPlatform_DoOsc:
0000E124 7000                       	moveq	#0,d0
0000E126 1028 002A                  	move.b	oVar2A(a0),d0
0000E12A 4EB8 0AAC                  	jsr	CalcSine
0000E12E 7400                       	moveq	#0,d2
0000E130 1428 002D                  	move.b	oVar2D(a0),d2
0000E134 C1C2                       	muls.w	d2,d0
0000E136 E840                       	asr.w	#4,d0
0000E138 4E75                       	rts
0000E13A                            ; End of function ObjPlatform_DoOsc
0000E13A                            
0000E13A                            ; -------------------------------------------------------------------------------
0000E13A                            ; START	OF FUNCTION CHUNK FOR ObjPlatform_Init
0000E13A                            
0000E13A                            ObjPlatform_Destroy:
0000E13A 7000                       	moveq	#0,d0
0000E13C 1028 0023                  	move.b	oRespawn(a0),d0
0000E140 6700                       	beq.s	.Delete
0000E142 43F9 00FF 1200             	lea	(v_obj_respawns).l,a1
0000E148 3200                       	move.w	d0,d1
0000E14A D241                       	add.w	d1,d1
0000E14C D041                       	add.w	d1,d0
0000E14E 7200                       	moveq	#0,d1
0000E150 1239 00FF 152E             	move.b	(v_time_zone).l,d1
0000E156 D041                       	add.w	d1,d0
0000E158 08B1 0007 0002             	bclr	#7,2(a1,d0.w)
0000E15E                            
0000E15E                            .Delete:
0000E15E 4EF8 40BE                  	jmp	DeleteObject
0000E162                            ; END OF FUNCTION CHUNK	FOR ObjPlatform_Init
0000E162                            
0000E162                            ; -------------------------------------------------------------------------------
0000E162                            MapSpr_Platform:
0000E162                            	include	"level/objects/platform/mapnormal.asm"
0000E162                            .Map:
0000E162 0000                       	dc.w	unk_20CCCE-.Map
0000E164 0000                       	dc.w	unk_20CCE4-.Map
0000E166 0000                       	dc.w	unk_20CD0E-.Map
0000E168 04                         unk_20CCCE:	dc.b	  4
0000E169 F0                         	dc.b	$F0 ; ð
0000E16A 05                         	dc.b	  5
0000E16B 00                         	dc.b	  0
0000E16C 01                         	dc.b	  1
0000E16D F0                         	dc.b	$F0 ; ð
0000E16E F0                         	dc.b	$F0 ; ð
0000E16F 05                         	dc.b	  5
0000E170 08                         	dc.b	  8
0000E171 01                         	dc.b	  1
0000E172 00                         	dc.b	  0
0000E173 00                         	dc.b	  0
0000E174 05                         	dc.b	  5
0000E175 00                         	dc.b	  0
0000E176 05                         	dc.b	  5
0000E177 F0                         	dc.b	$F0 ; ð
0000E178 00                         	dc.b	  0
0000E179 05                         	dc.b	  5
0000E17A 08                         	dc.b	  8
0000E17B 05                         	dc.b	  5
0000E17C 00                         	dc.b	  0
0000E17D 00                         	dc.b	  0
0000E17E 08                         unk_20CCE4:	dc.b	  8
0000E17F F0                         	dc.b	$F0 ; ð
0000E180 05                         	dc.b	  5
0000E181 00                         	dc.b	  0
0000E182 01                         	dc.b	  1
0000E183 E0                         	dc.b	$E0 ; à
0000E184 F0                         	dc.b	$F0 ; ð
0000E185 05                         	dc.b	  5
0000E186 00                         	dc.b	  0
0000E187 01                         	dc.b	  1
0000E188 F0                         	dc.b	$F0 ; ð
0000E189 F0                         	dc.b	$F0 ; ð
0000E18A 05                         	dc.b	  5
0000E18B 00                         	dc.b	  0
0000E18C 01                         	dc.b	  1
0000E18D 00                         	dc.b	  0
0000E18E F0                         	dc.b	$F0 ; ð
0000E18F 05                         	dc.b	  5
0000E190 00                         	dc.b	  0
0000E191 01                         	dc.b	  1
0000E192 10                         	dc.b	$10
0000E193 00                         	dc.b	  0
0000E194 05                         	dc.b	  5
0000E195 00                         	dc.b	  0
0000E196 05                         	dc.b	  5
0000E197 E0                         	dc.b	$E0 ; à
0000E198 00                         	dc.b	  0
0000E199 05                         	dc.b	  5
0000E19A 00                         	dc.b	  0
0000E19B 09                         	dc.b	  9
0000E19C F0                         	dc.b	$F0 ; ð
0000E19D 00                         	dc.b	  0
0000E19E 05                         	dc.b	  5
0000E19F 00                         	dc.b	  0
0000E1A0 09                         	dc.b	  9
0000E1A1 00                         	dc.b	  0
0000E1A2 00                         	dc.b	  0
0000E1A3 05                         	dc.b	  5
0000E1A4 08                         	dc.b	  8
0000E1A5 05                         	dc.b	  5
0000E1A6 10                         	dc.b	$10
0000E1A7 00                         	dc.b	  0
0000E1A8 0C                         unk_20CD0E:	dc.b	 $C
0000E1A9 F0                         	dc.b	$F0 ; ð
0000E1AA 05                         	dc.b	  5
0000E1AB 00                         	dc.b	  0
0000E1AC 01                         	dc.b	  1
0000E1AD D0                         	dc.b	$D0 ; Ð
0000E1AE F0                         	dc.b	$F0 ; ð
0000E1AF 05                         	dc.b	  5
0000E1B0 00                         	dc.b	  0
0000E1B1 01                         	dc.b	  1
0000E1B2 E0                         	dc.b	$E0 ; à
0000E1B3 F0                         	dc.b	$F0 ; ð
0000E1B4 05                         	dc.b	  5
0000E1B5 00                         	dc.b	  0
0000E1B6 01                         	dc.b	  1
0000E1B7 F0                         	dc.b	$F0 ; ð
0000E1B8 F0                         	dc.b	$F0 ; ð
0000E1B9 05                         	dc.b	  5
0000E1BA 00                         	dc.b	  0
0000E1BB 01                         	dc.b	  1
0000E1BC 00                         	dc.b	  0
0000E1BD F0                         	dc.b	$F0 ; ð
0000E1BE 05                         	dc.b	  5
0000E1BF 00                         	dc.b	  0
0000E1C0 01                         	dc.b	  1
0000E1C1 10                         	dc.b	$10
0000E1C2 F0                         	dc.b	$F0 ; ð
0000E1C3 05                         	dc.b	  5
0000E1C4 00                         	dc.b	  0
0000E1C5 01                         	dc.b	  1
0000E1C6 20                         	dc.b	$20
0000E1C7 00                         	dc.b	  0
0000E1C8 05                         	dc.b	  5
0000E1C9 00                         	dc.b	  0
0000E1CA 05                         	dc.b	  5
0000E1CB D0                         	dc.b	$D0 ; Ð
0000E1CC 00                         	dc.b	  0
0000E1CD 05                         	dc.b	  5
0000E1CE 00                         	dc.b	  0
0000E1CF 09                         	dc.b	  9
0000E1D0 E0                         	dc.b	$E0 ; à
0000E1D1 00                         	dc.b	  0
0000E1D2 05                         	dc.b	  5
0000E1D3 00                         	dc.b	  0
0000E1D4 09                         	dc.b	  9
0000E1D5 F0                         	dc.b	$F0 ; ð
0000E1D6 00                         	dc.b	  0
0000E1D7 05                         	dc.b	  5
0000E1D8 00                         	dc.b	  0
0000E1D9 09                         	dc.b	  9
0000E1DA 00                         	dc.b	  0
0000E1DB 00                         	dc.b	  0
0000E1DC 05                         	dc.b	  5
0000E1DD 00                         	dc.b	  0
0000E1DE 09                         	dc.b	  9
0000E1DF 10                         	dc.b	$10
0000E1E0 00                         	dc.b	  0
0000E1E1 05                         	dc.b	  5
0000E1E2 08                         	dc.b	  8
0000E1E3 05                         	dc.b	  5
0000E1E4 20                         	dc.b	$20
0000E1E5 00                         	dc.b	  0
0000E1E5 00                         	dc.b	  0
0000E1E6                            	even
0000E1E6                            MapSpr_Platform2:
0000E1E6                            	include	"level/objects/platform/mapnormal2.asm"
0000E1E6                            .Map:
0000E1E6 0000                       	dc.w	unk_20CD52-.Map
0000E1E8 0000                       	dc.w	unk_20CD68-.Map
0000E1EA 0000                       	dc.w	unk_20CD92-.Map
0000E1EC 04                         unk_20CD52:	dc.b	  4
0000E1ED F0                         	dc.b	$F0 ; ð
0000E1EE 05                         	dc.b	  5
0000E1EF 00                         	dc.b	  0
0000E1F0 31                         	dc.b	$31 ; 1
0000E1F1 F0                         	dc.b	$F0 ; ð
0000E1F2 F0                         	dc.b	$F0 ; ð
0000E1F3 05                         	dc.b	  5
0000E1F4 08                         	dc.b	  8
0000E1F5 31                         	dc.b	$31 ; 1
0000E1F6 00                         	dc.b	  0
0000E1F7 00                         	dc.b	  0
0000E1F8 05                         	dc.b	  5
0000E1F9 00                         	dc.b	  0
0000E1FA 35                         	dc.b	$35 ; 5
0000E1FB F0                         	dc.b	$F0 ; ð
0000E1FC 00                         	dc.b	  0
0000E1FD 05                         	dc.b	  5
0000E1FE 08                         	dc.b	  8
0000E1FF 35                         	dc.b	$35 ; 5
0000E200 00                         	dc.b	  0
0000E201 00                         	dc.b	  0
0000E202 08                         unk_20CD68:	dc.b	  8
0000E203 F0                         	dc.b	$F0 ; ð
0000E204 05                         	dc.b	  5
0000E205 00                         	dc.b	  0
0000E206 31                         	dc.b	$31 ; 1
0000E207 E0                         	dc.b	$E0 ; à
0000E208 F0                         	dc.b	$F0 ; ð
0000E209 05                         	dc.b	  5
0000E20A 08                         	dc.b	  8
0000E20B 31                         	dc.b	$31 ; 1
0000E20C F0                         	dc.b	$F0 ; ð
0000E20D 00                         	dc.b	  0
0000E20E 05                         	dc.b	  5
0000E20F 00                         	dc.b	  0
0000E210 35                         	dc.b	$35 ; 5
0000E211 E0                         	dc.b	$E0 ; à
0000E212 00                         	dc.b	  0
0000E213 05                         	dc.b	  5
0000E214 08                         	dc.b	  8
0000E215 35                         	dc.b	$35 ; 5
0000E216 F0                         	dc.b	$F0 ; ð
0000E217 F0                         	dc.b	$F0 ; ð
0000E218 05                         	dc.b	  5
0000E219 00                         	dc.b	  0
0000E21A 31                         	dc.b	$31 ; 1
0000E21B 00                         	dc.b	  0
0000E21C F0                         	dc.b	$F0 ; ð
0000E21D 05                         	dc.b	  5
0000E21E 08                         	dc.b	  8
0000E21F 31                         	dc.b	$31 ; 1
0000E220 10                         	dc.b	$10
0000E221 00                         	dc.b	  0
0000E222 05                         	dc.b	  5
0000E223 00                         	dc.b	  0
0000E224 35                         	dc.b	$35 ; 5
0000E225 00                         	dc.b	  0
0000E226 00                         	dc.b	  0
0000E227 05                         	dc.b	  5
0000E228 08                         	dc.b	  8
0000E229 35                         	dc.b	$35 ; 5
0000E22A 10                         	dc.b	$10
0000E22B 00                         	dc.b	  0
0000E22C 0C                         unk_20CD92:	dc.b	 $C
0000E22D F0                         	dc.b	$F0 ; ð
0000E22E 05                         	dc.b	  5
0000E22F 00                         	dc.b	  0
0000E230 31                         	dc.b	$31 ; 1
0000E231 D0                         	dc.b	$D0 ; Ð
0000E232 F0                         	dc.b	$F0 ; ð
0000E233 05                         	dc.b	  5
0000E234 08                         	dc.b	  8
0000E235 31                         	dc.b	$31 ; 1
0000E236 E0                         	dc.b	$E0 ; à
0000E237 00                         	dc.b	  0
0000E238 05                         	dc.b	  5
0000E239 00                         	dc.b	  0
0000E23A 35                         	dc.b	$35 ; 5
0000E23B D0                         	dc.b	$D0 ; Ð
0000E23C 00                         	dc.b	  0
0000E23D 05                         	dc.b	  5
0000E23E 08                         	dc.b	  8
0000E23F 35                         	dc.b	$35 ; 5
0000E240 E0                         	dc.b	$E0 ; à
0000E241 F0                         	dc.b	$F0 ; ð
0000E242 05                         	dc.b	  5
0000E243 00                         	dc.b	  0
0000E244 31                         	dc.b	$31 ; 1
0000E245 F0                         	dc.b	$F0 ; ð
0000E246 F0                         	dc.b	$F0 ; ð
0000E247 05                         	dc.b	  5
0000E248 08                         	dc.b	  8
0000E249 31                         	dc.b	$31 ; 1
0000E24A 00                         	dc.b	  0
0000E24B 00                         	dc.b	  0
0000E24C 05                         	dc.b	  5
0000E24D 00                         	dc.b	  0
0000E24E 35                         	dc.b	$35 ; 5
0000E24F F0                         	dc.b	$F0 ; ð
0000E250 00                         	dc.b	  0
0000E251 05                         	dc.b	  5
0000E252 08                         	dc.b	  8
0000E253 35                         	dc.b	$35 ; 5
0000E254 00                         	dc.b	  0
0000E255 F0                         	dc.b	$F0 ; ð
0000E256 05                         	dc.b	  5
0000E257 00                         	dc.b	  0
0000E258 31                         	dc.b	$31 ; 1
0000E259 10                         	dc.b	$10
0000E25A F0                         	dc.b	$F0 ; ð
0000E25B 05                         	dc.b	  5
0000E25C 08                         	dc.b	  8
0000E25D 31                         	dc.b	$31 ; 1
0000E25E 20                         	dc.b	$20
0000E25F 00                         	dc.b	  0
0000E260 05                         	dc.b	  5
0000E261 00                         	dc.b	  0
0000E262 35                         	dc.b	$35 ; 5
0000E263 10                         	dc.b	$10
0000E264 00                         	dc.b	  0
0000E265 05                         	dc.b	  5
0000E266 08                         	dc.b	  8
0000E267 35                         	dc.b	$35 ; 5
0000E268 20                         	dc.b	$20
0000E269 00                         	dc.b	  0
0000E269 00                         	dc.b	  0
0000E26A                            	even
0000E26A                            ; -------------------------------------------------------------------------------
0000E26A                            
0000E26A                            ObjFlapDoorV:
0000E26A 7000                       	moveq	#0,d0
0000E26C 1028 0024                  	move.b	oRoutine(a0),d0
0000E270 303B 0000                  	move.w	ObjFlapDoorV_Index(pc,d0.w),d0
0000E274 4EBB 0000                  	jsr	ObjFlapDoorV_Index(pc,d0.w)
0000E278 4EB8 4012                  	jsr	DrawObject
0000E27C 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000E280                            ; End of function ObjFlapDoorV
0000E280                            
0000E280                            ; -------------------------------------------------------------------------------
0000E280 0000                       ObjFlapDoorV_Index:dc.w	ObjFlapDoorV_Init-ObjFlapDoorV_Index
0000E282 0000                       	dc.w	ObjFlapDoorV_Main-ObjFlapDoorV_Index
0000E284 0000                       	dc.w	ObjFlapDoorV_Reset-ObjFlapDoorV_Index
0000E286                            
0000E286                            ; -------------------------------------------------------------------------------
0000E286 43F8 D000                  	lea	(v_player).w,a1
0000E28A                            ; -------------------------------------------------------------------------------
0000E28A                            
0000E28A                            ObjFlapDoorV_SolidObj:
0000E28A 3628 0008                  	move.w	8(a0),d3
0000E28E 3828 000C                  	move.w	$C(a0),d4
0000E292 4EFA C334                  	jmp	SolidObject
0000E296                            ; End of function ObjFlapDoorV_SolidObj
0000E296                            
0000E296                            ; -------------------------------------------------------------------------------
0000E296                            
0000E296                            ObjFlapDoorV_Init:
0000E296 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E29A 217C 0000 0000 0004        	move.l	#MapSpr_FlapDoorV,oMap(a0)
0000E2A2 117C 0001 0018             	move.b	#1,oPriority(a0)
0000E2A8 0028 0004 0001             	ori.b	#4,oRender(a0)
0000E2AE 117C 0004 0019             	move.b	#4,oWidth(a0)
0000E2B4 117C 0018 0016             	move.b	#$18,oYRadius(a0)
0000E2BA 700C                       	moveq	#$C,d0
0000E2BC 4EB9 0000 0000             	jsr	LevelObj_SetBaseTile
0000E2C2                            ; End of function ObjFlapDoorV_Init
0000E2C2                            
0000E2C2                            ; -------------------------------------------------------------------------------
0000E2C2                            
0000E2C2                            ObjFlapDoorV_Main:
0000E2C2 43F8 D000                  	lea	(v_player).w,a1
0000E2C6 3028 000C                  	move.w	oY(a0),d0
0000E2CA 9069 000C                  	sub.w	oY(a1),d0
0000E2CE 6400                       	bcc.s	.AbsDX
0000E2D0 4440                       	neg.w	d0
0000E2D2                            
0000E2D2                            .AbsDX:
0000E2D2 0C40 0020                  	cmpi.w	#$20,d0
0000E2D6 6400                       	bcc.s	.NotRange
0000E2D8 3028 0008                  	move.w	oX(a0),d0
0000E2DC 9069 0008                  	sub.w	oX(a1),d0
0000E2E0 6500                       	bcs.s	.NotRange
0000E2E2 0C40 0030                  	cmpi.w	#$30,d0
0000E2E6 6400                       	bcc.s	.NotRange
0000E2E8 4268 003A                  	clr.w	oVar3A(a0)
0000E2EC 117C 0004 0024             	move.b	#4,oRoutine(a0)
0000E2F2 0828 0007 0001             	btst	#7,oRender(a0)
0000E2F8 6700                       	beq.s	.NotRange
0000E2FA 303C 00A4                  	move.w	#$A4,d0
0000E2FE 4EB8 2708                  	jsr	PlayFMSound
0000E302 117C 0001 001A             	move.b	#1,oMapFrame(a0)
0000E308                            
0000E308                            .NotRange:
0000E308 6000 FF80                  	bra.w	ObjFlapDoorV_SolidObj
0000E30C                            ; End of function ObjFlapDoorV_Main
0000E30C                            
0000E30C                            ; -------------------------------------------------------------------------------
0000E30C                            
0000E30C                            ObjFlapDoorV_Reset:
0000E30C 5028 003A                  	addq.b	#8,oVar3A(a0)
0000E310 6400                       	bcc.s	.End
0000E312 5528 0024                  	subq.b	#2,oRoutine(a0)
0000E316 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000E31C                            
0000E31C                            .End:
0000E31C 4E75                       	rts
0000E31E                            ; End of function ObjFlapDoorV_Reset
0000E31E                            
0000E31E                            ; -------------------------------------------------------------------------------
0000E31E                            Ani_FlapDoorV:
0000E31E                            	include	"level/objects/flapdoor/animverti.asm"
0000E31E                            .Anim:
0000E31E 0000                       	dc.w	unk_20CE8E-.Anim
0000E320 00                         unk_20CE8E:	dc.b	  0
0000E321 00                         	dc.b	  0
0000E322 00                         	dc.b	  0
0000E323 01                         	dc.b	  1
0000E324 01                         	dc.b	  1
0000E325 01                         	dc.b	  1
0000E326 01                         	dc.b	  1
0000E327 01                         	dc.b	  1
0000E328 01                         	dc.b	  1
0000E329 01                         	dc.b	  1
0000E32A 01                         	dc.b	  1
0000E32B FC                         	dc.b	$FC ; ü
0000E32B FC                         	dc.b	$FC ; ü
0000E32C                            	even
0000E32C                            MapSpr_FlapDoorV:
0000E32C                            	include	"level/objects/flapdoor/mapverti.asm"
0000E32C                            .Map:
0000E32C 0000                       	dc.w	unk_20CE9E-.Map
0000E32E 0000                       	dc.w	unk_20CEAA-.Map
0000E330 02                         unk_20CE9E:	dc.b	  2
0000E331 E8                         	dc.b	$E8 ; è
0000E332 01                         	dc.b	  1
0000E333 18                         	dc.b	$18
0000E334 04                         	dc.b	  4
0000E335 FC                         	dc.b	$FC ; ü
0000E336 F8                         	dc.b	$F8 ; ø
0000E337 03                         	dc.b	  3
0000E338 18                         	dc.b	$18
0000E339 00                         	dc.b	  0
0000E33A FC                         	dc.b	$FC ; ü
0000E33B 00                         	dc.b	  0
0000E33C 02                         unk_20CEAA:	dc.b	  2
0000E33D E8                         	dc.b	$E8 ; è
0000E33E 0C                         	dc.b	 $C
0000E33F 00                         	dc.b	  0
0000E340 06                         	dc.b	  6
0000E341 FC                         	dc.b	$FC ; ü
0000E342 E8                         	dc.b	$E8 ; è
0000E343 04                         	dc.b	  4
0000E344 00                         	dc.b	  0
0000E345 0A                         	dc.b	 $A
0000E346 1C                         	dc.b	$1C
0000E347 00                         	dc.b	  0
0000E347 00                         	dc.b	  0
0000E348                            	even
0000E348                            ; -------------------------------------------------------------------------------
0000E348                            ; START	OF FUNCTION CHUNK FOR LoadLevelData
0000E348                            
0000E348                            LoadCameraPLC_Full:
0000E348 43FA 0000                  	lea	CameraPLC_Ranges(pc),a1
0000E34C 0C79 0001 00FF 1506        	cmpi.w #$0001,(v_zone).l
0000E354 6600                       	bne.s  .Load
0000E356 43FA 0000                  	lea	CameraPLC_Ranges_PPZ2(pc),a1
0000E35A                            .Load:	
0000E35A 7000                       	moveq	#0,d0
0000E35C 7200                       	moveq	#0,d1
0000E35E 3038 F700                  	move.w	(v_cam_fg_x).w,d0
0000E362                            
0000E362                            .Loop:
0000E362 B059                       	cmp.w	(a1)+,d0
0000E364 6500                       	bcs.s	.LoadPLC
0000E366 5401                       	addq.b	#2,d1
0000E368 60F8                       	bra.s	.Loop
0000E36A                            
0000E36A                            ; -------------------------------------------------------------------------------
0000E36A                            
0000E36A                            .LoadPLC:
0000E36A 13C1 00FF 1574             	move.b	d1,(v_last_camera_plc).l
0000E370 303B 1000                  	move.w	CameraPLCs_Full(pc,d1.w),d0
0000E374 4EF8 28CE                  	jmp	LoadPLC
0000E378                            ; END OF FUNCTION CHUNK	FOR LoadLevelData
0000E378                            ; -------------------------------------------------------------------------------
0000E378                            
0000E378                            LoadCameraPLC_Incr:
0000E378 43FA 0000                  	lea	CameraPLC_Ranges(pc),a1
0000E37C 0C79 0001 00FF 1506        	cmpi.w #$0001,(v_zone).l
0000E384 6600                       	bne.s  .Load
0000E386 43FA 0000                  	lea	CameraPLC_Ranges_PPZ2(pc),a1
0000E38A                            .Load:
0000E38A 7000                       	moveq	#0,d0
0000E38C 7200                       	moveq	#0,d1
0000E38E 3038 F700                  	move.w	(v_cam_fg_x).w,d0
0000E392                            
0000E392                            .Loop:
0000E392 B059                       	cmp.w	(a1)+,d0
0000E394 6500                       	bcs.s	.FoundRange
0000E396 5401                       	addq.b	#2,d1
0000E398 60F8                       	bra.s	.Loop
0000E39A                            
0000E39A                            ; -------------------------------------------------------------------------------
0000E39A                            
0000E39A                            .FoundRange:
0000E39A B239 00FF 1574             	cmp.b	(v_last_camera_plc).l,d1
0000E3A0 6600                       	bne.s	.LoadPLC
0000E3A2 4E75                       	rts
0000E3A4                            
0000E3A4                            ; -------------------------------------------------------------------------------
0000E3A4                            
0000E3A4                            .LoadPLC:
0000E3A4 13C1 00FF 1574             	move.b	d1,(v_last_camera_plc).l
0000E3AA 303B 1000                  	move.w	CameraPLCs_Incr(pc,d1.w),d0
0000E3AE 4EF8 2900                  	jmp	ClearAndLoadPLC
0000E3B2                            ; End of function LoadCameraPLC_Incr
0000E3B2                            
0000E3B2                            ; -------------------------------------------------------------------------------
0000E3B2 0680                       CameraPLC_Ranges:dc.w	$680
0000E3B4 0F80                       	dc.w	$F80
0000E3B6 1980                       	dc.w	$1980
0000E3B8 1F80                       	dc.w	$1F80
0000E3BA FFFF                       	dc.w	$FFFF
0000E3BC 0008                       CameraPLCs_Incr:dc.w	8
0000E3BE 0009                       	dc.w	9
0000E3C0 000A                       	dc.w	$A
0000E3C2 000B                       	dc.w	$B
0000E3C4 000C                       	dc.w	$C
0000E3C6 0002                       CameraPLCs_Full:dc.w	2
0000E3C8 0004                       	dc.w	4
0000E3CA 0005                       	dc.w	5
0000E3CC 0006                       	dc.w	6
0000E3CE 0007                       	dc.w	7
0000E3D0                            
0000E3D0                            CameraPLC_Ranges_PPZ2:
0000E3D0 0A00                           dc.w $A00                 ; DATA XREF: LoadStageData:LoadSectionArt↑o ...
0000E3D2 1500                           dc.w $1500
0000E3D4 1800                           dc.w $1800
0000E3D6 1D00                           dc.w $1D00
0000E3D8 FFFF                           dc.w $FFFF
0000E3DA                            ; -------------------------------------------------------------------------------
0000E3DA                            
0000E3DA                            LevelObj_SetBaseTile:
0000E3DA 43F9 0000 0000             	lea	(LevelObj_BaseTileList).l,a1
0000E3E0 D040                       	add.w	d0,d0
0000E3E2 383B 0000                  	move.w	LevelObj_BaseTileList(pc,d0.w),d4
0000E3E6 45FB 4000                  	lea	LevelObj_BaseTileList(pc,d4.w),a2
0000E3EA 7200                       	moveq	#0,d1
0000E3EC 1228 0029                  	move.b	oSubtype2(a0),d1
0000E3F0 D241                       	add.w	d1,d1
0000E3F2 3A32 1000                  	move.w	(a2,d1.w),d5
0000E3F6 3145 0002                  	move.w	d5,oTile(a0)
0000E3FA 4E75                       	rts
0000E3FC                            ; End of function LevelObj_SetBaseTile
0000E3FC                            
0000E3FC                            ; -------------------------------------------------------------------------------
0000E3FC 0000                       LevelObj_BaseTileList:dc.w	word_20CF6C-LevelObj_BaseTileList
0000E3FE 0000                       	dc.w	word_20CF6E-LevelObj_BaseTileList
0000E400 0000                       	dc.w	word_20CF70-LevelObj_BaseTileList
0000E402 0000                       	dc.w	word_20CF74-LevelObj_BaseTileList
0000E404 0000                       	dc.w	word_20CF76-LevelObj_BaseTileList
0000E406 0000                       	dc.w	word_20CF78-LevelObj_BaseTileList
0000E408 0000                       	dc.w	word_20CF82-LevelObj_BaseTileList
0000E40A 0000                       	dc.w	word_20CF7C-LevelObj_BaseTileList
0000E40C 0000                       	dc.w	word_20CF80-LevelObj_BaseTileList
0000E40E 0000                       	dc.w	word_20CF7E-LevelObj_BaseTileList
0000E410 0000                       	dc.w	word_20CF7A-LevelObj_BaseTileList
0000E412 0000                       	dc.w	word_20CF84-LevelObj_BaseTileList
0000E414 0000                       	dc.w	word_20CF86-LevelObj_BaseTileList
0000E416 0000                       	dc.w	word_20CF88-LevelObj_BaseTileList
0000E418 0000                       	dc.w	word_20CF8A-LevelObj_BaseTileList
0000E41A 0000                       	dc.w	word_20CF8C-LevelObj_BaseTileList
0000E41C 0000                       	dc.w	word_20CF8E-LevelObj_BaseTileList
0000E41E 0000                       	dc.w	word_20CF90-LevelObj_BaseTileList
0000E420 23A0                       word_20CF6C:	dc.w	$23A0
0000E422 23B0                       word_20CF6E:	dc.w	$23B0
0000E424 2409                       word_20CF70:	dc.w	$2409
0000E426 2370                       	dc.w	$2370
0000E428 2000                       word_20CF74:	dc.w	$2000
0000E42A 2428                       word_20CF76:	dc.w	$2428
0000E42C 4334                       word_20CF78:	dc.w	$4334
0000E42E 0320                       word_20CF7A:	dc.w	$320
0000E430 0000                       word_20CF7C:	dc.w	0
0000E432 4000                       word_20CF7E:	dc.w	$4000
0000E434 4000                       word_20CF80:	dc.w	$4000
0000E436 0409                       word_20CF82:	dc.w	$409
0000E438 0374                       word_20CF84:	dc.w	$374
0000E43A 8328                       word_20CF86:	dc.w	$8328
0000E43C 0000                       word_20CF88:	dc.w	0
0000E43E 0000                       word_20CF8A:	dc.w	0
0000E440 0490                       word_20CF8C:	dc.w	$490
0000E442 03E4                       word_20CF8E:	dc.w	$3E4
0000E444 0000                       word_20CF90:	dc.w	0
0000E446                            
0000E446                            ; -------------------------------------------------------------------------------
0000E446                            
0000E446                            ObjAnimal:
0000E446 4EB9 0000 0000             	jsr	CheckAnimalPrescence
0000E44C 1028 0028                  	move.b	oSubtype(a0),d0
0000E450 0200 007F                  	andi.b	#$7F,d0
0000E454 6600 0000                  	bne.w	ObjGroundAnimal
0000E458                            
0000E458                            ObjFlyingAnimal:
0000E458 7000                       	moveq	#0,d0
0000E45A 1028 0024                  	move.b	oRoutine(a0),d0
0000E45E 303B 0000                  	move.w	ObjFlyingAnimal_Index(pc,d0.w),d0
0000E462 4EFB 0000                  	jmp	ObjFlyingAnimal_Index(pc,d0.w)
0000E466                            
0000E466                            ; -------------------------------------------------------------------------------
0000E466                            ObjFlyingAnimal_Index:
0000E466 0000                       	dc.w	ObjFlyingAnimal_Init-ObjFlyingAnimal_Index
0000E468 0000                       	dc.w	ObjFlyingAnimal_Flying-ObjFlyingAnimal_Index
0000E46A 0000                       	dc.w	ObjFlyingAnimal_Hologram-ObjFlyingAnimal_Index
0000E46C                            ; -------------------------------------------------------------------------------
0000E46C                            
0000E46C                            ObjFlyingAnimal_Init:
0000E46C 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E470 117C 0004 0001             	move.b	#4,oRender(a0)
0000E476 217C 0808 0408 0016        	move.l	#$8080408,oYRadius(a0)
0000E47E 217C 0000 0000 0004        	move.l	#MapSpr_FlyingAnimal,oMap(a0)
0000E486 3168 0008 002A             	move.w	oX(a0),oVar2A(a0)
0000E48C 3168 000C 002C             	move.w	oY(a0),oVar2C(a0)
0000E492 6100 0000                  	bsr.w	ObjAnimal_XFlip
0000E496 6100 0000                  	bsr.w	ObjAnimal_SetBaseTile
0000E49A 4A28 0028                  	tst.b	oSubtype(a0)
0000E49E 6B00                       	bmi.s	.Holographic
0000E4A0 117C 0004 0018             	move.b	#4,oPriority(a0)
0000E4A6 0068 8000 0002             	ori.w	#$8000,oTile(a0)
0000E4AC 317C 0101 002E             	move.w	#$101,oVar2E(a0)
0000E4B2 4E75                       	rts
0000E4B4                            
0000E4B4                            ; -------------------------------------------------------------------------------
0000E4B4                            
0000E4B4                            .Holographic:
0000E4B4 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E4B8 117C 0001 001C             	move.b	#1,oAnim(a0)
0000E4BE 117C 0003 0018             	move.b	#3,oPriority(a0)
0000E4C4 4E75                       	rts
0000E4C6                            ; End of function ObjFlyingAnimal_Init
0000E4C6                            
0000E4C6                            ; -------------------------------------------------------------------------------
0000E4C6                            
0000E4C6                            ObjFlyingAnimal_Flying:
0000E4C6 7401                       	moveq	#1,d2
0000E4C8 7601                       	moveq	#1,d3
0000E4CA 6100 0000                  	bsr.w	ObjFlyingAnimal_Move
0000E4CE 1028 002E                  	move.b	oVar2E(a0),d0
0000E4D2 D028 002F                  	add.b	oVar2F(a0),d0
0000E4D6 1200                       	move.b	d0,d1
0000E4D8 5301                       	subq.b	#1,d1
0000E4DA 0401 007F                  	subi.b	#$7F,d1
0000E4DE 6500                       	bcs.s	.NoFlip
0000E4E0 1028 002E                  	move.b	oVar2E(a0),d0
0000E4E4 4428 002F                  	neg.b	oVar2F(a0)
0000E4E8 6100 0000                  	bsr.w	ObjAnimal_XFlip
0000E4EC                            
0000E4EC                            .NoFlip:
0000E4EC 1140 002E                  	move.b	d0,oVar2E(a0)
0000E4F0 43FA 0000                  	lea	Ani_FlyingAnimal(pc),a1
0000E4F4 4EB8 61F4                  	jsr	AnimateObject
0000E4F8 4EB8 4012                  	jsr	DrawObject
0000E4FC 3028 002A                  	move.w	oVar2A(a0),d0
0000E500 4EF8 7D1E                  	jmp	CheckObjDespawn2Time
0000E504                            ; End of function ObjFlyingAnimal_Flying
0000E504                            
0000E504                            ; -------------------------------------------------------------------------------
0000E504                            
0000E504                            ObjFlyingAnimal_Hologram:
0000E504                            
0000E504                            ; FUNCTION CHUNK AT 0020D17C SIZE 00000006 BYTES
0000E504                            
0000E504 3268 003E                  	movea.w	oVar3E(a0),a1
0000E508 0C11 002E                  	cmpi.b	#$2E,oID(a1)
0000E50C 6600 0000                  	bne.w	ObjAnimal_Destroy
0000E510 4A29 003F                  	tst.b	oVar3F(a1)
0000E514 6600 0000                  	bne.w	ObjAnimal_Destroy
0000E518 7403                       	moveq	#3,d2
0000E51A 7604                       	moveq	#4,d3
0000E51C 6100 0000                  	bsr.w	ObjFlyingAnimal_Move
0000E520 5828 002E                  	addq.b	#4,oVar2E(a0)
0000E524 1028 002E                  	move.b	oVar2E(a0),d0
0000E528 0200 007F                  	andi.b	#$7F,d0
0000E52C 6700 0000                  	beq.w	ObjAnimal_XFlip
0000E530 43FA 0000                  	lea	Ani_FlyingAnimal(pc),a1
0000E534 4EB8 61F4                  	jsr	AnimateObject
0000E538 4EF8 4012                  	jmp	DrawObject
0000E53C                            ; End of function ObjFlyingAnimal_Hologram
0000E53C                            
0000E53C                            ; -------------------------------------------------------------------------------
0000E53C                            
0000E53C                            ObjFlyingAnimal_Move:
0000E53C 1028 002E                  	move.b	oVar2E(a0),d0
0000E540 4EB8 0AAC                  	jsr	CalcSine
0000E544 E461                       	asr.w	d2,d1
0000E546 E660                       	asr.w	d3,d0
0000E548 D268 002A                  	add.w	oVar2A(a0),d1
0000E54C D068 002C                  	add.w	oVar2C(a0),d0
0000E550 3141 0008                  	move.w	d1,oX(a0)
0000E554 3140 000C                  	move.w	d0,oY(a0)
0000E558 4E75                       	rts
0000E55A                            ; End of function ObjFlyingAnimal_Move
0000E55A                            
0000E55A                            ; -------------------------------------------------------------------------------
0000E55A                            
0000E55A                            ObjGroundAnimal:
0000E55A 7000                       	moveq	#0,d0
0000E55C 1028 0024                  	move.b	oRoutine(a0),d0
0000E560 303B 0000                  	move.w	ObjGroundAnimal_Index(pc,d0.w),d0
0000E564 4EFB 0000                  	jmp	ObjGroundAnimal_Index(pc,d0.w)
0000E568                            ; End of function ObjGroundAnimal
0000E568                            
0000E568                            ; -------------------------------------------------------------------------------
0000E568 0000                       ObjGroundAnimal_Index:dc.w	ObjGroundAnimal_Init-ObjGroundAnimal_Index
0000E56A 0000                       	dc.w	ObjGroundAnimal_Main-ObjGroundAnimal_Index
0000E56C 0000                       	dc.w	ObjGroundAnimal_Hologram-ObjGroundAnimal_Index
0000E56E                            ; -------------------------------------------------------------------------------
0000E56E                            
0000E56E                            ObjGroundAnimal_Init:
0000E56E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E572 117C 0004 0001             	move.b	#4,oRender(a0)
0000E578 217C 0808 0408 0016        	move.l	#$8080408,oYRadius(a0)
0000E580 217C 0000 0000 0004        	move.l	#MapSpr_GroundAnimal,oMap(a0)
0000E588 3168 0008 002A             	move.w	8(a0),oVar2A(a0)
0000E58E 6100 0000                  	bsr.w	ObjAnimal_SetBaseTile
0000E592 4A28 0028                  	tst.b	oSubtype(a0)
0000E596 6B00                       	bmi.s	.Holographic
0000E598 217C 0001 0000 002C        	move.l	#$10000,oVar2C(a0)
0000E5A0 217C FFFC 0000 0030        	move.l	#-$40000,oVar30(a0)
0000E5A8 4E75                       	rts
0000E5AA                            
0000E5AA                            ; -------------------------------------------------------------------------------
0000E5AA                            
0000E5AA                            .Holographic:
0000E5AA 117C 0004 0024             	move.b	#4,$24(a0)
0000E5B0 6000 0000                  	bra.w	ObjAnimal_XFlip
0000E5B4                            ; End of function ObjGroundAnimal_Init
0000E5B4                            
0000E5B4                            ; -------------------------------------------------------------------------------
0000E5B4                            
0000E5B4                            ObjGroundAnimal_Main:
0000E5B4 2028 002C                  	move.l	oVar2C(a0),d0
0000E5B8 D1A8 0008                  	add.l	d0,oX(a0)
0000E5BC 2028 0030                  	move.l	oVar30(a0),d0
0000E5C0 D1A8 000C                  	add.l	d0,oY(a0)
0000E5C4 06A8 0000 2000 0030        	addi.l	#$2000,oVar30(a0)
0000E5CC 5BC0                       	smi	d0
0000E5CE 5200                       	addq.b	#1,d0
0000E5D0 1140 001A                  	move.b	d0,oMapFrame(a0)
0000E5D4 4EB8 6F3C                  	jsr	CheckFloorEdge
0000E5D8 4A41                       	tst.w	d1
0000E5DA 6A00                       	bpl.s	.NoFlip
0000E5DC D368 000C                  	add.w	d1,oY(a0)
0000E5E0 217C FFFC 0000 0030        	move.l	#-$40000,oVar30(a0)
0000E5E8 44A8 002C                  	neg.l	oVar2C(a0)
0000E5EC 6100                       	bsr.s	ObjAnimal_XFlip
0000E5EE                            
0000E5EE                            .NoFlip:
0000E5EE 4EB8 4012                  	jsr	DrawObject
0000E5F2 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000E5F6                            ; End of function ObjGroundAnimal_Main
0000E5F6                            
0000E5F6                            ; -------------------------------------------------------------------------------
0000E5F6                            
0000E5F6                            ObjGroundAnimal_Hologram:
0000E5F6 3268 003E                  	movea.w	oVar3E(a0),a1
0000E5FA 0C11 002E                  	cmpi.b	#$2E,oID(a1)
0000E5FE 6600 0000                  	bne.w	ObjAnimal_Destroy
0000E602 4A29 003F                  	tst.b	oVar3F(a1)
0000E606 6600 0000                  	bne.w	ObjAnimal_Destroy
0000E60A 43FA 0000                  	lea	Ani_GroundAnimal(pc),a1
0000E60E 4EB8 61F4                  	jsr	AnimateObject
0000E612 4EF8 4012                  	jmp	DrawObject
0000E616                            ; End of function ObjGroundAnimal_Hologram
0000E616                            
0000E616                            ; -------------------------------------------------------------------------------
0000E616                            ; START	OF FUNCTION CHUNK FOR ObjFlyingAnimal_Hologram
0000E616                            
0000E616                            ObjAnimal_Destroy:
0000E616 4EF8 40BE                  	jmp	DeleteObject
0000E61A                            ; END OF FUNCTION CHUNK	FOR ObjFlyingAnimal_Hologram
0000E61A                            ; -------------------------------------------------------------------------------
0000E61A                            
0000E61A                            ObjAnimal_XFlip:
0000E61A 0868 0000 0001             	bchg	#0,oRender(a0)
0000E620 0868 0000 0022             	bchg	#0,oStatus(a0)
0000E626 4E75                       	rts
0000E628                            ; End of function ObjAnimal_XFlip
0000E628                            
0000E628                            ; -------------------------------------------------------------------------------
0000E628                            
0000E628                            ObjAnimal_SetBaseTile:
0000E628 43FA 0000                  	lea	ObjAnimal_BaseTileList(pc),a1
0000E62C 7000                       	moveq	#0,d0
0000E62E 1039 00FF 1507             	move.b	(v_act).l,d0
0000E634 E540                       	asl.w	#2,d0
0000E636 D039 00FF 152E             	add.b	(v_time_zone).l,d0
0000E63C D040                       	add.w	d0,d0
0000E63E 3171 0000 0002             	move.w	(a1,d0.w),oTile(a0)
0000E644 4E75                       	rts
0000E646                            ; End of function ObjAnimal_SetBaseTile
0000E646                            
0000E646                            ; -------------------------------------------------------------------------------
0000E646                            Ani_FlyingAnimal:
0000E646                            	include	"level/objects/animal/animflying.asm"
0000E646                            .Anim:
0000E646 0000                       	dc.w	byte_20D1B2-.Anim
0000E648 0000                       	dc.w	byte_20D1B6-.Anim
0000E64A 1300 01FF                  byte_20D1B2:	dc.b	$13, 0, 1,	$FF
0000E64E 0000 0002 0000 0200 0002+  byte_20D1B6:	dc.b	0,	0, 0, 2, 0, 0, 2, 0, 0,	2, 0, 0, 2, 1, 1, 2
0000E65E 0201 0102 0201 0102 0201+  	dc.b	2,	1, 1, 2, 2, 1, 1, 2, 2,	1, 1, 2, 2, 0, 0, 2
0000E66E 0000 0200 0002 0000 0201+  	dc.b	0,	0, 2, 0, 0, 2, 0, 0, 2,	1, 1, 2, 2, 1, 1, 2
0000E67E 0201 0102 0201 0102 02FF   	dc.b	2,	1, 1, 2, 2, 1, 1, 2, 2,	$FF
0000E67E 0201 0102 0201 0102 02FF   	dc.b	2,	1, 1, 2, 2, 1, 1, 2, 2,	$FF
0000E688                            	even
0000E688                            Ani_GroundAnimal:
0000E688                            	include	"level/objects/animal/animground.asm"
0000E688                            .Anim:
0000E688 0000                       	dc.w	byte_20D1F2-.Anim
0000E68A 0003 0302 0303 0203 0302+  byte_20D1F2:	dc.b	0,	3, 3, 2, 3, 3, 2, 3, 3,	2, 3, 3, 2, 3, 3, 2
0000E69A 0203 0302 0203 0302 0203+  	dc.b	2,	3, 3, 2, 2, 3, 3, 2, 2,	3, 3, 2, 2, 4, 4, 2
0000E6AA 0404 0204 0402 0404 0204+  	dc.b	4,	4, 2, 4, 4, 2, 4, 4, 2,	4, 4, 2, 2, 4, 4, 2
0000E6BA 0204 0402 0204 0402 02FF   	dc.b	2,	4, 4, 2, 2, 4, 4, 2, 2,	$FF
0000E6BA 0204 0402 0204 0402 02FF   	dc.b	2,	4, 4, 2, 2, 4, 4, 2, 2,	$FF
0000E6C4                            	even
0000E6C4                            MapSpr_FlyingAnimal:
0000E6C4                            	include	"level/objects/animal/mapflying.asm"
0000E6C4                            .Map:
0000E6C4 0000                       	dc.w	unk_20D232-.Map
0000E6C6 0000                       	dc.w	unk_20D238-.Map
0000E6C8 0000                       	dc.w	unk_20D23E-.Map
0000E6CA 01                         unk_20D232:	dc.b	  1
0000E6CB F8                         	dc.b	$F8 ; ø
0000E6CC 05                         	dc.b	  5
0000E6CD 00                         	dc.b	  0
0000E6CE 00                         	dc.b	  0
0000E6CF F8                         	dc.b	$F8 ; ø
0000E6D0 01                         unk_20D238:	dc.b	  1
0000E6D1 F8                         	dc.b	$F8 ; ø
0000E6D2 05                         	dc.b	  5
0000E6D3 00                         	dc.b	  0
0000E6D4 04                         	dc.b	  4
0000E6D5 F8                         	dc.b	$F8 ; ø
0000E6D6 00                         unk_20D23E:	dc.b	  0
0000E6D7 00                         	dc.b	  0
0000E6D7 00                         	dc.b	  0
0000E6D8                            	even
0000E6D8                            MapSpr_GroundAnimal:
0000E6D8                            	include	"level/objects/animal/mapground.asm"
0000E6D8                            .Map:
0000E6D8 0000                       	dc.w	unk_20D24A-.Map
0000E6DA 0000                       	dc.w	unk_20D250-.Map
0000E6DC 0000                       	dc.w	unk_20D256-.Map
0000E6DE 0000                       	dc.w	unk_20D257-.Map
0000E6E0 0000                       	dc.w	unk_20D25D-.Map
0000E6E2 01                         unk_20D24A:	dc.b	  1
0000E6E3 F8                         	dc.b	$F8 ; ø
0000E6E4 09                         	dc.b	  9
0000E6E5 00                         	dc.b	  0
0000E6E6 0E                         	dc.b	 $E
0000E6E7 F4                         	dc.b	$F4 ; ô
0000E6E8 01                         unk_20D250:	dc.b	  1
0000E6E9 F8                         	dc.b	$F8 ; ø
0000E6EA 09                         	dc.b	  9
0000E6EB 00                         	dc.b	  0
0000E6EC 08                         	dc.b	  8
0000E6ED F4                         	dc.b	$F4 ; ô
0000E6EE 00                         unk_20D256:	dc.b	  0
0000E6EF 01                         unk_20D257:	dc.b	  1
0000E6F0 F8                         	dc.b	$F8 ; ø
0000E6F1 09                         	dc.b	  9
0000E6F2 00                         	dc.b	  0
0000E6F3 08                         	dc.b	  8
0000E6F4 F4                         	dc.b	$F4 ; ô
0000E6F5 01                         unk_20D25D:	dc.b	  1
0000E6F6 F9                         	dc.b	$F9 ; ù
0000E6F7 09                         	dc.b	  9
0000E6F8 00                         	dc.b	  0
0000E6F9 0E                         	dc.b	 $E
0000E6FA F4                         	dc.b	$F4 ; ô
0000E6FB 00                         	dc.b	  0
0000E6FB 00                         	dc.b	  0
0000E6FC                            	even
0000E6FC 04F7                       ObjAnimal_BaseTileList:dc.w	$4F7
0000E6FE 0388                       	dc.w	$388
0000E700 0463                       	dc.w	$463
0000E702 0000                       	dc.w	0
0000E704 04F7                       	dc.w	$4F7
0000E706 038F                       	dc.w	$38F
0000E708 0461                       	dc.w	$461
0000E70A 0000                       	dc.w	0
0000E70C 0000                       	dc.w	0
0000E70E 0000                       	dc.w	0
0000E710 03CF                       	dc.w	$3CF
0000E712                            ; -------------------------------------------------------------------------------
0000E712                            
0000E712                            ObjCapsule:
0000E712 7000                       	moveq	#0,d0
0000E714 1028 0024                  	move.b	oRoutine(a0),d0
0000E718 303B 0000                  	move.w	ObjCapsule_Index(pc,d0.w),d0
0000E71C 4EBB 0000                  	jsr	ObjCapsule_Index(pc,d0.w)
0000E720 4A28 0024                  	tst.b	oRoutine(a0)
0000E724 6700                       	beq.s	.End
0000E726 0C28 000A 0024             	cmpi.b	#$A,oRoutine(a0)
0000E72C 6700                       	beq.s	.Display
0000E72E 0C28 0006 0024             	cmpi.b	#6,oRoutine(a0)
0000E734 6400                       	bcc.s	.End
0000E736                            
0000E736                            .Display:
0000E736 4EF8 4012                  	jmp	DrawObject
0000E73A                            
0000E73A                            ; -------------------------------------------------------------------------------
0000E73A                            
0000E73A                            .End:
0000E73A 4E75                       	rts
0000E73C                            ; End of function ObjCapsule
0000E73C                            
0000E73C                            ; -------------------------------------------------------------------------------
0000E73C 0000                       ObjCapsule_Index:dc.w	ObjCapsule_Init-ObjCapsule_Index
0000E73E 0000                       	dc.w	ObjCapsule_Main-ObjCapsule_Index
0000E740 0000                       	dc.w	ObjCapsule_Explode-ObjCapsule_Index
0000E742 0000                       	dc.w	LoadEndOfAct-ObjCapsule_Index
0000E744 0000                       	dc.w	ObjCapsule_Signpost_Null-ObjCapsule_Index
0000E746 0000                       	dc.w	ObjCapsule_FlowerSeeds-ObjCapsule_Index
0000E748                            ; -------------------------------------------------------------------------------
0000E748                            
0000E748                            ObjCapsule_Init:
0000E748 0028 0004 0001             	ori.b	#4,oRender(a0)
0000E74E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E752 117C 0004 0018             	move.b	#4,oPriority(a0)
0000E758 217C 0000 0000 0004        	move.l	#MapSpr_FlowerCapsule,4(a0)
0000E760 317C 2481 0002             	move.w	#$2481,oTile(a0)
0000E766 117C 0020 0017             	move.b	#$20,oXRadius(a0)
0000E76C 117C 0020 0019             	move.b	#$20,oWidth(a0)
0000E772 117C 0018 0016             	move.b	#$18,oYRadius(a0)
0000E778                            ; End of function ObjCapsule_Init
0000E778                            
0000E778                            ; -------------------------------------------------------------------------------
0000E778                            
0000E778                            ObjCapsule_Main:
0000E778 43F9 0000 0000             	lea	(Ani_FlowerCapsule).l,a1
0000E77E 4EB8 61F4                  	jsr	AnimateObject
0000E782 4DF8 D000                  	lea	(v_player).w,a6
0000E786 6100 0000                  	bsr.w	ObjCapsule_CheckCollision
0000E78A 6700                       	beq.s	.End
0000E78C 4239 00FF 1510             	clr.b	(v_update_time).l
0000E792 117C 0002 001A             	move.b	#2,oMapFrame(a0)
0000E798 117C 0078 002A             	move.b	#$78,oVar2A(a0)
0000E79E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E7A2 3038 D008                  	move.w	(v_player+oX).w,d0
0000E7A6 1238 D017                  	move.b	(v_player+oXRadius).w,d1
0000E7AA 4881                       	ext.w	d1
0000E7AC 0641 0020                  	addi.w	#$20,d1
0000E7B0 9068 0008                  	sub.w	8(a0),d0
0000E7B4 D041                       	add.w	d1,d0
0000E7B6 6B00                       	bmi.s	.BounceX
0000E7B8 D241                       	add.w	d1,d1
0000E7BA B041                       	cmp.w	d1,d0
0000E7BC 6400                       	bcc.s	.BounceX
0000E7BE 3038 D012                  	move.w	(v_player+oYVel).w,d0
0000E7C2 4440                       	neg.w	d0
0000E7C4 E440                       	asr.w	#2,d0
0000E7C6 31C0 D012                  	move.w	d0,(v_player+oYVel).w
0000E7CA 4E75                       	rts
0000E7CC                            
0000E7CC                            ; -------------------------------------------------------------------------------
0000E7CC                            
0000E7CC                            .BounceX:
0000E7CC 3038 D010                  	move.w	(v_player+oXVel).w,d0
0000E7D0 4440                       	neg.w	d0
0000E7D2 E440                       	asr.w	#2,d0
0000E7D4 31C0 D010                  	move.w	d0,(v_player+oXVel).w
0000E7D8                            
0000E7D8                            .End:
0000E7D8 4E75                       	rts
0000E7DA                            ; End of function ObjCapsule_Main
0000E7DA                            
0000E7DA                            ; -------------------------------------------------------------------------------
0000E7DA                            
0000E7DA                            ObjCapsule_Explode:
0000E7DA 5328 002A                  	subq.b	#1,oVar2A(a0)
0000E7DE 6B00                       	bmi.s	.FinishUp
0000E7E0 1028 002A                  	move.b	oVar2A(a0),d0
0000E7E4 1200                       	move.b	d0,d1
0000E7E6 0201 0003                  	andi.b	#3,d1
0000E7EA 6600                       	bne.s	.End
0000E7EC E448                       	lsr.w	#2,d0
0000E7EE 0240 0007                  	andi.w	#7,d0
0000E7F2 D040                       	add.w	d0,d0
0000E7F4 45FB 0000                  	lea	ObjCapsule_ExplosionLocs(pc,d0.w),a2
0000E7F8 4EB8 7CE4                  	jsr	FindObjSlot
0000E7FC 6600                       	bne.s	.End
0000E7FE 303C 00C4                  	move.w	#$C4,d0
0000E802 4EB8 2708                  	jsr	PlayFMSound
0000E806 12BC 0018                  	move.b	#$18,oID(a1)
0000E80A 137C 0001 0025             	move.b	#1,oRoutine2(a1)
0000E810 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000E816 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000E81C 1012                       	move.b	(a2),d0
0000E81E 4880                       	ext.w	d0
0000E820 D169 0008                  	add.w	d0,oX(a1)
0000E824 102A 0001                  	move.b	1(a2),d0
0000E828 4880                       	ext.w	d0
0000E82A D169 000C                  	add.w	d0,oY(a1)
0000E82E 4E75                       	rts
0000E830                            
0000E830                            ; -------------------------------------------------------------------------------
0000E830                            
0000E830                            .FinishUp:
0000E830 6100 0000                  	bsr.w	ObjCapsule_SpawnSeeds
0000E834 5428 0024                  	addq.b	#2,$24(a0)
0000E838 117C 003C 002A             	move.b	#$3C,$2A(a0)
0000E83E                            
0000E83E                            .End:
0000E83E 4E75                       	rts
0000E840                            ; End of function ObjCapsule_Explode
0000E840                            
0000E840                            ; -------------------------------------------------------------------------------
0000E840 0000                       ObjCapsule_ExplosionLocs:dc.b	0, 0
0000E842 20F8                       	dc.b	$20, $F8
0000E844 E000                       	dc.b	$E0, 0
0000E846 E8F8                       	dc.b	$E8, $F8
0000E848 1808                       	dc.b	$18, 8
0000E84A F008                       	dc.b	$F0, 8
0000E84C 1008                       	dc.b	$10, 8
0000E84E F8F8                       	dc.b	$F8, $F8
0000E850                            ; -------------------------------------------------------------------------------
0000E850                            
0000E850                            ObjCapsule_SpawnSeeds:
0000E850 7000                       	moveq	#0,d0
0000E852 1039 0000 0000             	move.b	(LevelPaletteID).l,d0
0000E858 2C07                       	move.l	d7,d6
0000E85A 4EB8 06D4                  	jsr	LoadPalette
0000E85E 2E06                       	move.l	d6,d7
0000E860 7C06                       	moveq	#6,d6
0000E862 7200                       	moveq	#0,d1
0000E864                            
0000E864                            .Loop:
0000E864 4EB8 7CE4                  	jsr	FindObjSlot
0000E868 6600                       	bne.s	.End
0000E86A 12BC 0015                  	move.b	#$15,oID(a1)
0000E86E 0029 0004 0001             	ori.b	#4,oRender(a1)
0000E874 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000E87A 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000E880 137C 000A 0024             	move.b	#$A,oRoutine(a1)
0000E886 237C 0000 0000 0004        	move.l	#MapSpr_FlowerCapsule,oMap(a1)
0000E88E 337C 2481 0002             	move.w	#$2481,oTile(a1)
0000E894 137C 0001 001C             	move.b	#1,oAnim(a1)
0000E89A 337C FA00 0012             	move.w	#-$600,oYVel(a1)
0000E8A0 337B 1000 0010             	move.w	ObjCapsule_FlowerLocs(pc,d1.w),oXVel(a1)
0000E8A6 5441                       	addq.w	#2,d1
0000E8A8 51CE FFBA                  	dbf	d6,.Loop
0000E8AC                            
0000E8AC                            .End:
0000E8AC 4E75                       	rts
0000E8AE                            ; End of function ObjCapsule_SpawnSeeds
0000E8AE                            
0000E8AE                            ; -------------------------------------------------------------------------------
0000E8AE 0000                       ObjCapsule_FlowerLocs:dc.w	0
0000E8B0 FF80                       	dc.w	$FF80
0000E8B2 0080                       	dc.w	$80
0000E8B4 FF00                       	dc.w	$FF00
0000E8B6 0100                       	dc.w	$100
0000E8B8 FE80                       	dc.w	$FE80
0000E8BA 0180                       	dc.w	$180
0000E8BC FE00                       	dc.w	$FE00
0000E8BE 0200                       	dc.w	$200
0000E8C0 FD80                       	dc.w	$FD80
0000E8C2 0280                       	dc.w	$280
0000E8C4                            ; -------------------------------------------------------------------------------
0000E8C4                            
0000E8C4                            ObjCapsule_FlowerSeeds:
0000E8C4 43F9 0000 0000             	lea	(Ani_FlowerCapsule).l,a1
0000E8CA 4EB8 61F4                  	jsr	AnimateObject
0000E8CE 4EB8 3F5C                  	jsr	ObjMoveGrv
0000E8D2 4EB8 6F3C                  	jsr	CheckFloorEdge
0000E8D6 4A41                       	tst.w	d1
0000E8D8 6A00                       	bpl.s	.End
0000E8DA 10BC 001F                  	move.b	#$1F,oID(a0)
0000E8DE 117C 0001 0028             	move.b	#1,oSubtype(a0)
0000E8E4 117C 0000 0024             	move.b	#0,oRoutine(a0)
0000E8EA                            
0000E8EA                            .End:
0000E8EA 4E75                       	rts
0000E8EC                            ; End of function ObjCapsule_FlowerSeeds
0000E8EC                            
0000E8EC                            ; -------------------------------------------------------------------------------
0000E8EC                            
0000E8EC                            ObjCapsule_CheckCollision:
0000E8EC 082E 0002 0022             	btst	#2,oStatus(a6)
0000E8F2 6700                       	beq.s	.NoCollide
0000E8F4 122E 0017                  	move.b	oXRadius(a6),d1
0000E8F8 4881                       	ext.w	d1
0000E8FA 0641 0020                  	addi.w	#$20,d1
0000E8FE 302E 0008                  	move.w	oX(a6),d0
0000E902 9068 0008                  	sub.w	oX(a0),d0
0000E906 D041                       	add.w	d1,d0
0000E908 6B00                       	bmi.s	.NoCollide
0000E90A D241                       	add.w	d1,d1
0000E90C B041                       	cmp.w	d1,d0
0000E90E 6400                       	bcc.s	.NoCollide
0000E910 122E 0016                  	move.b	oYRadius(a6),d1
0000E914 4881                       	ext.w	d1
0000E916 0641 001C                  	addi.w	#$1C,d1
0000E91A 302E 000C                  	move.w	oY(a6),d0
0000E91E 9068 000C                  	sub.w	oY(a0),d0
0000E922 D041                       	add.w	d1,d0
0000E924 6B00                       	bmi.s	.NoCollide
0000E926 D241                       	add.w	d1,d1
0000E928 B041                       	cmp.w	d1,d0
0000E92A 6400                       	bcc.s	.NoCollide
0000E92C 7001                       	moveq	#1,d0
0000E92E 4E75                       	rts
0000E930                            
0000E930                            ; -------------------------------------------------------------------------------
0000E930                            
0000E930                            .NoCollide:
0000E930 7000                       	moveq	#0,d0
0000E932 4E75                       	rts
0000E934                            ; End of function ObjCapsule_CheckCollision
0000E934                            
0000E934                            ; -------------------------------------------------------------------------------
0000E934                            ; START	OF FUNCTION CHUNK FOR ObjBigRing
0000E934                            
0000E934                            ObjBigRingFlash:
0000E934 7000                       	moveq	#0,d0
0000E936 1028 0024                  	move.b	oRoutine(a0),d0
0000E93A 303B 0000                  	move.w	ObjBigRingFlash_Index(pc,d0.w),d0
0000E93E 4EBB 0000                  	jsr	ObjBigRingFlash_Index(pc,d0.w)
0000E942 4EF8 4012                  	jmp	DrawObject
0000E946                            ; END OF FUNCTION CHUNK	FOR ObjBigRing
0000E946                            
0000E946                            ; -------------------------------------------------------------------------------
0000E946 0000                       ObjBigRingFlash_Index:dc.w	ObjBigRingFlash_Init-ObjBigRingFlash_Index
0000E948 0000                       	dc.w	ObjBigRingFlash_Animate-ObjBigRingFlash_Index
0000E94A 0000                       	dc.w	ObjBigRingFlash_Destroy-ObjBigRingFlash_Index
0000E94C                            ; -------------------------------------------------------------------------------
0000E94C                            
0000E94C                            ObjBigRingFlash_Init:
0000E94C 0028 0004 0001             	ori.b	#4,oRender(a0)
0000E952 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E956 317C 03EF 0002             	move.w	#$3EF,oTile(a0)
0000E95C 217C 0000 0000 0004        	move.l	#MapSpr_BigRingFlash,oMap(a0)
0000E964                            ; End of function ObjBigRingFlash_Init
0000E964                            
0000E964                            ; -------------------------------------------------------------------------------
0000E964                            
0000E964                            ObjBigRingFlash_Animate:
0000E964 43F9 0000 0000             	lea	(Ani_BigRingFlash).l,a1
0000E96A 4EF8 61F4                  	jmp	AnimateObject
0000E96E                            ; End of function ObjBigRingFlash_Animate
0000E96E                            
0000E96E                            ; -------------------------------------------------------------------------------
0000E96E                            
0000E96E                            ObjBigRingFlash_Destroy:
0000E96E 4EF8 40BE                  	jmp	DeleteObject
0000E972                            ; End of function ObjBigRingFlash_Destroy
0000E972                            
0000E972                            ; -------------------------------------------------------------------------------
0000E972                            
0000E972                            ObjBigRing:
0000E972                            
0000E972                            ; FUNCTION CHUNK AT 0020D4B4 SIZE 00000014 BYTES
0000E972                            
0000E972 4A28 0028                  	tst.b	oSubtype(a0)
0000E976 66BC                       	bne.s	ObjBigRingFlash
0000E978 0C79 0032 00FF 1512        	cmpi.w	#50,(v_ring_count).l
0000E980 6400                       	bcc.s	.Proceed
0000E982 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000E986                            
0000E986                            ; -------------------------------------------------------------------------------
0000E986                            
0000E986                            .Proceed:
0000E986 7000                       	moveq	#0,d0
0000E988 1028 0024                  	move.b	oRoutine(a0),d0
0000E98C 303B 0000                  	move.w	ObjBigRing_Index(pc,d0.w),d0
0000E990 4EBB 0000                  	jsr	ObjBigRing_Index(pc,d0.w)
0000E994 0C28 0004 0024             	cmpi.b	#4,oRoutine(a0)
0000E99A 6700                       	beq.s	.End
0000E99C 4EF8 4012                  	jmp	DrawObject
0000E9A0                            
0000E9A0                            ; -------------------------------------------------------------------------------
0000E9A0                            
0000E9A0                            .End:
0000E9A0 4E75                       	rts
0000E9A2                            ; End of function ObjBigRing
0000E9A2                            
0000E9A2                            ; -------------------------------------------------------------------------------
0000E9A2 0000                       ObjBigRing_Index:dc.w	ObjBigRing_Init-ObjBigRing_Index
0000E9A4 0000                       	dc.w	ObjBigRing_Main-ObjBigRing_Index
0000E9A6 0000                       	dc.w	ObjBigRing_Animate-ObjBigRing_Index
0000E9A8                            ; -------------------------------------------------------------------------------
0000E9A8                            
0000E9A8                            ObjBigRing_Init:
0000E9A8 0C39 007F 00FF 0F20        	cmpi.b	#$7F,(v_got_time_stones).l
0000E9B0 6600                       	bne.s	.TimeStonesLeft
0000E9B2 4EF8 40BE                  	jmp	DeleteObject
0000E9B6                            
0000E9B6                            ; -------------------------------------------------------------------------------
0000E9B6                            
0000E9B6                            .TimeStonesLeft:
0000E9B6 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l
0000E9BC 6700                       	beq.s	.Init
0000E9BE 4EF8 40BE                  	jmp	DeleteObject
0000E9C2                            
0000E9C2                            ; -------------------------------------------------------------------------------
0000E9C2                            
0000E9C2                            .Init:
0000E9C2 5428 0024                  	addq.b	#2,oRoutine(a0)
0000E9C6 0028 0004 0001             	ori.b	#4,oRender(a0)
0000E9CC 317C 2488 0002             	move.w	#$2488,oTile(a0)
0000E9D2 217C 0000 0000 0004        	move.l	#MapSpr_BigRing,oMap(a0)
0000E9DA 117C 0020 0017             	move.b	#$20,oXRadius(a0)
0000E9E0 117C 0020 0019             	move.b	#$20,oWidth(a0)
0000E9E6 117C 0020 0016             	move.b	#$20,oYRadius(a0)
0000E9EC                            ; End of function ObjBigRing_Init
0000E9EC                            
0000E9EC                            ; -------------------------------------------------------------------------------
0000E9EC                            
0000E9EC                            ObjBigRing_Main:
0000E9EC 43F8 D000                  	lea	(v_player).w,a1
0000E9F0 6100 0000                  	bsr.w	ObjBigRing_CheckCollision
0000E9F4 6700                       	beq.s	ObjBigRing_Animate
0000E9F6 13FC 0001 00FF 156E        	move.b	#1,(v_entered_big_ring).l
0000E9FE 5428 0024                  	addq.b	#2,oRoutine(a0)
0000EA02 3038 F700                  	move.w	(v_cam_fg_x).w,d0
0000EA06 0640 0150                  	addi.w	#$150,d0
0000EA0A 3340 0008                  	move.w	d0,oX(a1)
0000EA0E 08F8 0000 F7CC             	bset	#0,(v_ctrl_locked).w
0000EA14 31FC 0808 F602             	move.w	#$808,(v_player_held).w
0000EA1A 337C 0000 0010             	move.w	#0,oXVel(a1)
0000EA20 337C 0000 0014             	move.w	#0,oPlayerGVel(a1)
0000EA26 11FC 0001 F744             	move.b	#1,(v_scroll_lock).w
0000EA2C 303C 00C3                  	move.w	#$C3,d0
0000EA30 4EB8 2708                  	jsr	PlayFMSound
0000EA34 4EB8 7CE4                  	jsr	FindObjSlot
0000EA38 66B2                       	bne.s	ObjBigRing_Main
0000EA3A 12BC 0014                  	move.b	#$14,oID(a1)
0000EA3E 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000EA44 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000EA4A 137C 0001 0028             	move.b	#1,oSubtype(a1)
0000EA50                            ; End of function ObjBigRing_Main
0000EA50                            
0000EA50                            ; -------------------------------------------------------------------------------
0000EA50                            
0000EA50                            ObjBigRing_Animate:
0000EA50 43F9 0000 0000             	lea	(Ani_BigRing).l,a1
0000EA56 4EF8 61F4                  	jmp	AnimateObject
0000EA5A                            ; End of function ObjBigRing_Animate
0000EA5A                            
0000EA5A                            ; -------------------------------------------------------------------------------
0000EA5A                            
0000EA5A                            ObjBigRing_CheckCollision:
0000EA5A 1229 0017                  	move.b	oXRadius(a1),d1
0000EA5E 4881                       	ext.w	d1
0000EA60 0641 0010                  	addi.w	#$10,d1
0000EA64 3029 0008                  	move.w	oX(a1),d0
0000EA68 9068 0008                  	sub.w	oX(a0),d0
0000EA6C D041                       	add.w	d1,d0
0000EA6E 6B00                       	bmi.s	.NoCollide
0000EA70 D241                       	add.w	d1,d1
0000EA72 B041                       	cmp.w	d1,d0
0000EA74 6400                       	bcc.s	.NoCollide
0000EA76 1229 0016                  	move.b	oYRadius(a1),d1
0000EA7A 4881                       	ext.w	d1
0000EA7C 0641 0020                  	addi.w	#$20,d1
0000EA80 3029 000C                  	move.w	oY(a1),d0
0000EA84 9068 000C                  	sub.w	oY(a0),d0
0000EA88 D041                       	add.w	d1,d0
0000EA8A 6B00                       	bmi.s	.NoCollide
0000EA8C D241                       	add.w	d1,d1
0000EA8E B041                       	cmp.w	d1,d0
0000EA90 6400                       	bcc.s	.NoCollide
0000EA92 7001                       	moveq	#1,d0
0000EA94 4E75                       	rts
0000EA96                            
0000EA96                            ; -------------------------------------------------------------------------------
0000EA96                            
0000EA96                            .NoCollide:
0000EA96 7000                       	moveq	#0,d0
0000EA98 4E75                       	rts
0000EA9A                            ; End of function ObjBigRing_CheckCollision
0000EA9A                            
0000EA9A                            ; -------------------------------------------------------------------------------
0000EA9A                            
0000EA9A                            ObjGoalPost:
0000EA9A 4DF8 D000                  	lea	(v_player).w,a6
0000EA9E 7000                       	moveq	#0,d0
0000EAA0 1028 0024                  	move.b	oRoutine(a0),d0
0000EAA4 303B 0000                  	move.w	ObjGoalPost_Index(pc,d0.w),d0
0000EAA8 4EBB 0000                  	jsr	ObjGoalPost_Index(pc,d0.w)
0000EAAC 0C39 0002 00FF 1507        	cmpi.b	#2,(v_act).l
0000EAB4 6700                       	beq.s	.MarkGone
0000EAB6 4EB8 4012                  	jsr	DrawObject
0000EABA                            
0000EABA                            .MarkGone:
0000EABA 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000EABE                            ; End of function ObjGoalPost
0000EABE                            
0000EABE                            ; -------------------------------------------------------------------------------
0000EABE 0000                       ObjGoalPost_Index:dc.w	ObjGoalPost_Init-ObjGoalPost_Index
0000EAC0 0000                       	dc.w	ObjGoalPost_Main-ObjGoalPost_Index
0000EAC2 0000                       	dc.w	ObjGoalPost_Null-ObjGoalPost_Index
0000EAC4                            ; -------------------------------------------------------------------------------
0000EAC4                            
0000EAC4                            ObjGoalPost_Init:
0000EAC4 0C79 0201 00FF 1506        	cmpi.w	#$201,(v_zone).l
0000EACC 6600                       	bne.s	.Init
0000EACE 0C39 0001 00FF 152E        	cmpi.b	#1,(v_time_zone).l
0000EAD6 6600                       	bne.s	.Init
0000EAD8 4A28 0028                  	tst.b	oSubtype(a0)
0000EADC 6600                       	bne.s	.WaitPLC
0000EADE 117C 0001 0028             	move.b	#1,oSubtype(a0)
0000EAE4 7013                       	moveq	#$13,d0
0000EAE6 4EF8 28CE                  	jmp	LoadPLC
0000EAEA                            
0000EAEA                            ; -------------------------------------------------------------------------------
0000EAEA                            
0000EAEA                            .WaitPLC:
0000EAEA 4AB8 F680                  	tst.l	(v_plc_buffer).w
0000EAEE 6700                       	beq.s	.Init
0000EAF0 4E75                       	rts
0000EAF2                            
0000EAF2                            ; -------------------------------------------------------------------------------
0000EAF2                            
0000EAF2                            .Init:
0000EAF2 5428 0024                  	addq.b	#2,oRoutine(a0)
0000EAF6 0028 0004 0001             	ori.b	#4,oRender(a0)
0000EAFC 117C 0004 0018             	move.b	#4,oPriority(a0)
0000EB02 217C 0000 0000 0004        	move.l	#MapSpr_GoalPost_Signpost,oMap(a0)
0000EB0A 117C 0010 0017             	move.b	#$10,oXRadius(a0)
0000EB10 117C 0010 0019             	move.b	#$10,oWidth(a0)
0000EB16 117C 0020 0016             	move.b	#$20,oYRadius(a0)
0000EB1C 117C 0005 001A             	move.b	#5,oMapFrame(a0)
0000EB22 6100 0000                  	bsr.w	ObjGoalPost_SetBaseTile
0000EB26                            ; End of function ObjGoalPost_Init
0000EB26                            
0000EB26                            ; -------------------------------------------------------------------------------
0000EB26                            
0000EB26                            ObjGoalPost_Main:
0000EB26 302E 000C                  	move.w	oY(a6),d0
0000EB2A 9068 000C                  	sub.w	oY(a0),d0
0000EB2E 0640 0080                  	addi.w	#$80,d0
0000EB32 6B00                       	bmi.s	.End
0000EB34 0C40 0100                  	cmpi.w	#$100,d0
0000EB38 6400                       	bcc.s	.End
0000EB3A 302E 0008                  	move.w	oX(a6),d0
0000EB3E B068 0008                  	cmp.w	oX(a0),d0
0000EB42 6500                       	bcs.s	.End
0000EB44 5428 0024                  	addq.b	#2,oRoutine(a0)
0000EB48 31F8 F700 F728             	move.w	(v_cam_fg_x).w,(v_left_bound).w
0000EB4E 31F8 F700 F720             	move.w	(v_cam_fg_x).w,(v_dest_left_bound).w
0000EB54 4278 F786                  	clr.w	(v_time_warp_timer).w
0000EB58 4238 F784                  	clr.b	(v_time_warp_dir).w
0000EB5C 4239 00FF 1521             	clr.b	(v_time_warp_on).l
0000EB62 7012                       	moveq	#$12,d0
0000EB64 4EF8 28CE                  	jmp	LoadPLC
0000EB68                            
0000EB68                            ; -------------------------------------------------------------------------------
0000EB68                            
0000EB68                            .End:
0000EB68 4E75                       	rts
0000EB6A                            ; End of function ObjGoalPost_Main
0000EB6A                            
0000EB6A                            ; -------------------------------------------------------------------------------
0000EB6A                            
0000EB6A                            ObjGoalPost_Null:
0000EB6A 4E75                       	rts
0000EB6C                            ; End of function ObjGoalPost_Null
0000EB6C                            
0000EB6C                            ; -------------------------------------------------------------------------------
0000EB6C                            
0000EB6C                            ObjGoalPost_SetBaseTile:
0000EB6C 7000                       	moveq	#0,d0
0000EB6E 3039 00FF 1506             	move.w	(v_zone).l,d0
0000EB74 EF08                       	lsl.b	#7,d0
0000EB76 E848                       	lsr.w	#4,d0
0000EB78 1239 00FF 152E             	move.b	(v_time_zone).l,d1
0000EB7E 0C01 0002                  	cmpi.b	#2,d1
0000EB82 6600                       	bne.s	.NotFuture
0000EB84 D239 00FF 156A             	add.b	(v_good_future).l,d1
0000EB8A                            
0000EB8A                            .NotFuture:
0000EB8A D201                       	add.b	d1,d1
0000EB8C D001                       	add.b	d1,d0
0000EB8E 317B 0000 0002             	move.w	ObjGoalPost_BaseTileList(pc,d0.w),oTile(a0)
0000EB94 0C39 0003 00FF 1506        	cmpi.b	#3,(v_zone).l
0000EB9C 6700                       	beq.s	.End
0000EB9E 0068 8000 0002             	ori.w	#$8000,oTile(a0)
0000EBA4                            
0000EBA4                            .End:
0000EBA4 4E75                       	rts
0000EBA6                            ; End of function ObjGoalPost_SetBaseTile
0000EBA6                            
0000EBA6                            ; -------------------------------------------------------------------------------
0000EBA6 035A 04F7 04F7 04F7 0381+  ObjGoalPost_BaseTileList:dc.w	$35A, $4F7, $4F7,	$4F7, $381, $4F7, $4F7,	$4F7
0000EBB6 0300 0300 0300 0300 0300+  	dc.w	$300, $300, $300, $300, $300, $300, $300, $300
0000EBC6 04F2 04F2 04F2 04F2 04F2+  	dc.w	$4F2, $4F2, $4F2, $4F2, $4F2, $4F2, $4F2, $4F2
0000EBD6 02BA 02CC 02B3 02B1 02BA+  	dc.w	$2BA, $2CC, $2B3, $2B1, $2BA, $2CC, $2B3, $2B1
0000EBE6 0254 022C 0294 0238 0278+  	dc.w	$254, $22C, $294, $238, $278, $28A, $2BC, $298
0000EBF6 03AE 03AE 03AE 03AE 03AE+  	dc.w	$3AE, $3AE, $3AE, $3AE, $3AE, $3AE, $3AE, $3AE
0000EC06 0220 0221 024C 0236 023E+  	dc.w	$220, $221, $24C, $236, $23E, $24A, $25D, $246
0000EC16                            ; -------------------------------------------------------------------------------
0000EC16                            
0000EC16                            ObjSignpost:
0000EC16 7000                       	moveq	#0,d0
0000EC18 1028 0024                  	move.b	oRoutine(a0),d0
0000EC1C 303B 0000                  	move.w	ObjSignpost_Index(pc,d0.w),d0
0000EC20 4EBB 0000                  	jsr	ObjSignpost_Index(pc,d0.w)
0000EC24 4EF8 4012                  	jmp	DrawObject
0000EC28                            ; End of function ObjSignpost
0000EC28                            
0000EC28                            ; -------------------------------------------------------------------------------
0000EC28 0000                       ObjSignpost_Index:dc.w	ObjSignpost_Init-ObjSignpost_Index
0000EC2A 0000                       	dc.w	ObjSignpost_Main-ObjSignpost_Index
0000EC2C 0000                       	dc.w	ObjSignpost_Spin-ObjSignpost_Index
0000EC2E 0000                       	dc.w	LoadEndOfAct-ObjSignpost_Index
0000EC30 0000                       	dc.w	ObjCapsule_Signpost_Null-ObjSignpost_Index
0000EC32                            ; -------------------------------------------------------------------------------
0000EC32                            
0000EC32                            ObjSignpost_Init:
0000EC32 5428 0024                  	addq.b	#2,oRoutine(a0)
0000EC36 0028 0004 0001             	ori.b	#4,oRender(a0)
0000EC3C 117C 0018 0017             	move.b	#$18,oXRadius(a0)
0000EC42 117C 0018 0019             	move.b	#$18,oWidth(a0)
0000EC48 117C 0020 0016             	move.b	#$20,oYRadius(a0)
0000EC4E 117C 0004 0018             	move.b	#4,oPriority(a0)
0000EC54 317C 043C 0002             	move.w	#$43C,oTile(a0)
0000EC5A 0C39 0003 00FF 1506        	cmpi.b	#3,(v_zone).l
0000EC62 6700                       	beq.s	.NotHighPriority
0000EC64 0028 0080 0002             	ori.b	#$80,oTile(a0)
0000EC6A                            
0000EC6A                            .NotHighPriority:
0000EC6A 217C 0000 0000 0004        	move.l	#MapSpr_GoalPost_Signpost,oMap(a0)
0000EC72                            ; End of function ObjSignpost_Init
0000EC72                            
0000EC72                            ; -------------------------------------------------------------------------------
0000EC72                            
0000EC72                            ObjSignpost_Main:
0000EC72 4DF8 D000                  	lea	(v_player).w,a6
0000EC76 302E 000C                  	move.w	oY(a6),d0
0000EC7A 9068 000C                  	sub.w	oY(a0),d0
0000EC7E 0640 0080                  	addi.w	#$80,d0
0000EC82 6B00                       	bmi.s	.End
0000EC84 0C40 0100                  	cmpi.w	#$100,d0
0000EC88 6400                       	bcc.s	.End
0000EC8A 3028 0008                  	move.w	oX(a0),d0
0000EC8E B06E 0008                  	cmp.w	oX(a6),d0
0000EC92 6400                       	bcc.s	.End
0000EC94 31F8 F700 F728             	move.w	(v_cam_fg_x).w,(v_left_bound).w
0000EC9A 31F8 F700 F720             	move.w	(v_cam_fg_x).w,(v_dest_left_bound).w
0000ECA0 4239 00FF 1510             	clr.b	(v_update_time).l
0000ECA6 117C 0078 002A             	move.b	#$78,oVar2A(a0)
0000ECAC 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000ECB2 5428 0024                  	addq.b	#2,oRoutine(a0)
0000ECB6 4239 00FF 1520             	clr.b	(v_speed_shoes).l
0000ECBC 4239 00FF 151F             	clr.b	(v_invincible).l
0000ECC2 303C 00CF                  	move.w	#$CF,d0
0000ECC6 4EF8 2708                  	jmp	PlayFMSound
0000ECCA                            
0000ECCA                            ; -------------------------------------------------------------------------------
0000ECCA                            
0000ECCA                            .End:
0000ECCA 4E75                       	rts
0000ECCC                            ; End of function ObjSignpost_Main
0000ECCC                            
0000ECCC                            ; -------------------------------------------------------------------------------
0000ECCC                            
0000ECCC                            ObjSignpost_Spin:
0000ECCC 43F9 0000 0000             	lea	(unk_23F21A).l,a1
0000ECD2 4EB8 61F4                  	jsr	AnimateObject
0000ECD6 5328 002A                  	subq.b	#1,oVar2A(a0)
0000ECDA 6600                       	bne.s	.End
0000ECDC 5428 0024                  	addq.b	#2,oRoutine(a0)
0000ECE0 117C 0003 001A             	move.b	#3,oMapFrame(a0)
0000ECE6 117C 003C 002A             	move.b	#60,oVar2A(a0)
0000ECEC                            
0000ECEC                            .End:
0000ECEC 4E75                       	rts
0000ECEE                            ; End of function ObjSignpost_Spin
0000ECEE                            
0000ECEE                            ; -------------------------------------------------------------------------------
0000ECEE                            
0000ECEE                            LoadEndOfAct:
0000ECEE 5328 002A                  	subq.b	#1,oVar2A(a0)
0000ECF2 6600 0000                  	bne.w	.End
0000ECF6 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000ECFC 6600                       	bne.s	.NotPast
0000ECFE 303C 008E                  	move.w	#$8E,d0
0000ED02 4EB8 2708                  	jsr	PlayFMSound
0000ED06                            
0000ED06                            .NotPast:
0000ED06 303C 008E                  	move.w	#$8E,d0
0000ED0A 4EB8 2708                  	jsr	PlayFMSound
0000ED0E 08F8 0000 F7CC             	bset	#0,(v_ctrl_locked).w
0000ED14 31FC 0808 F602             	move.w	#$808,(v_player_held).w
0000ED1A 0C79 0502 00FF 1506        	cmpi.w	#$502,(v_zone).l
0000ED22 6600                       	bne.s	.NotSSZ3
0000ED24 31FC 0000 F602             	move.w	#0,(v_player_held).w
0000ED2A                            
0000ED2A                            .NotSSZ3:
0000ED2A 117C 00B4 002A             	move.b	#$B4,oVar2A(a0)
0000ED30 5428 0024                  	addq.b	#2,oRoutine(a0)
0000ED34 4EB8 7CE4                  	jsr	FindObjSlot
0000ED38 12BC 003A                  	move.b	#$3A,oID(a1)
0000ED3C 137C 0010 0032             	move.b	#$10,oVar32(a1)
0000ED42 11FC 0001 F7D6             	move.b	#1,(v_update_bonus_score).w
0000ED48 7000                       	moveq	#0,d0
0000ED4A 1039 00FF 1515             	move.b	(v_time+1).l,d0
0000ED50 C0FC 003C                  	mulu.w	#60,d0
0000ED54 7200                       	moveq	#0,d1
0000ED56 1239 00FF 1516             	move.b	(v_time+2).l,d1
0000ED5C D041                       	add.w	d1,d0
0000ED5E 80FC 000F                  	divu.w	#$F,d0
0000ED62 7214                       	moveq	#$14,d1
0000ED64 B041                       	cmp.w	d1,d0
0000ED66 6500                       	bcs.s	.GetBonus
0000ED68 3001                       	move.w	d1,d0
0000ED6A                            
0000ED6A                            .GetBonus:
0000ED6A D040                       	add.w	d0,d0
0000ED6C 31FB 0000 F7D2             	move.w	TimeBonuses(pc,d0.w),(v_bonus_countdown_1).w
0000ED72 3039 00FF 1512             	move.w	(v_ring_count).l,d0
0000ED78 C0FC 0064                  	mulu.w	#$64,d0
0000ED7C 31C0 F7D4                  	move.w	d0,(v_bonus_countdown_2).w
0000ED80                            
0000ED80                            .End:
0000ED80 4E75                       	rts
0000ED82                            ; End of function LoadEndOfAct
0000ED82                            
0000ED82                            ; -------------------------------------------------------------------------------
0000ED82 C350                       TimeBonuses:	dc.w	50000
0000ED84 C350                       	dc.w	50000
0000ED86 2710                       	dc.w	10000
0000ED88 1388                       	dc.w	5000
0000ED8A 0FA0                       	dc.w	4000
0000ED8C 0FA0                       	dc.w	4000
0000ED8E 0BB8                       	dc.w	3000
0000ED90 0BB8                       	dc.w	3000
0000ED92 07D0                       	dc.w	2000
0000ED94 07D0                       	dc.w	2000
0000ED96 07D0                       	dc.w	2000
0000ED98 07D0                       	dc.w	2000
0000ED9A 03E8                       	dc.w	1000
0000ED9C 03E8                       	dc.w	1000
0000ED9E 03E8                       	dc.w	1000
0000EDA0 03E8                       	dc.w	1000
0000EDA2 01F4                       	dc.w	500
0000EDA4 01F4                       	dc.w	500
0000EDA6 01F4                       	dc.w	500
0000EDA8 01F4                       	dc.w	500
0000EDAA 0000                       	dc.w	0
0000EDAC                            ; -------------------------------------------------------------------------------
0000EDAC                            
0000EDAC                            ObjCapsule_Signpost_Null:
0000EDAC 4E75                       	rts
0000EDAE                            ; End of function ObjCapsule_Signpost_Null
0000EDAE                            
0000EDAE                            ; -------------------------------------------------------------------------------
0000EDAE                            sub_20B604:
0000EDAE                            LoadFlowerCapsulePal:
0000EDAE 3C3C 0007                  	move.w	#7,d6
0000EDB2 43F9 0000 0000             	lea	(Pal_FlowerCapsule).l,a1
0000EDB8 45F8 FB20                  	lea	(v_palette+$20).w,a2
0000EDBC                            
0000EDBC                            .Load:
0000EDBC 24D9                       	move.l	(a1)+,(a2)+
0000EDBE 51CE FFFC                  	dbf	d6,.Load
0000EDC2 4E75                       	rts
0000EDC4                            ; End of function LoadFlowerCapsulePal
0000EDC4                            
0000EDC4                            ; -------------------------------------------------------------------------------
0000EDC4                            Pal_FlowerCapsule:
0000EDC4                            	incbin	"level/objects/flowercapsule/palette.bin"
0000EDE4                            	even
0000EDE4                            Ani_BigRingFlash:
0000EDE4                            	include	"level/objects/bigring/animflash.asm"
0000EDE4                            .Anim:
0000EDE4 0000                       	dc.w	byte_20D992-.Anim
0000EDE6 0200 0102 0304 0506 07FC   byte_20D992:	dc.b	2,	0, 1, 2, 3, 4, 5, 6, 7,	$FC
0000EDE6 0200 0102 0304 0506 07FC   byte_20D992:	dc.b	2,	0, 1, 2, 3, 4, 5, 6, 7,	$FC
0000EDF0                            	even
0000EDF0                            MapSpr_BigRingFlash:
0000EDF0                            	include	"level/objects/bigring/mapflash.asm"
0000EDF0                            .Map:
0000EDF0 0000                       	dc.w	byte_20D9AC-.Map
0000EDF2 0000                       	dc.w	unk_20D9CC-.Map
0000EDF4 0000                       	dc.w	unk_20D9EC-.Map
0000EDF6 0000                       	dc.w	unk_20DA20-.Map
0000EDF8 0000                       	dc.w	unk_20DA72-.Map
0000EDFA 0000                       	dc.w	unk_20DAA6-.Map
0000EDFC 0000                       	dc.w	unk_20DAC6-.Map
0000EDFE 0000                       	dc.w	unk_20DAE6-.Map
0000EE00 06                         byte_20D9AC:	dc.b	6
0000EE01 E0                         	dc.b	$E0 ; à
0000EE02 08                         	dc.b	  8
0000EE03 00                         	dc.b	  0
0000EE04 00                         	dc.b	  0
0000EE05 00                         	dc.b	  0
0000EE06 E8                         	dc.b	$E8 ; è
0000EE07 01                         	dc.b	  1
0000EE08 00                         	dc.b	  0
0000EE09 03                         	dc.b	  3
0000EE0A 00                         	dc.b	  0
0000EE0B E8                         	dc.b	$E8 ; è
0000EE0C 0A                         	dc.b	 $A
0000EE0D 00                         	dc.b	  0
0000EE0E 05                         	dc.b	  5
0000EE0F 08                         	dc.b	  8
0000EE10 00                         	dc.b	  0
0000EE11 0A                         	dc.b	 $A
0000EE12 10                         	dc.b	$10
0000EE13 05                         	dc.b	  5
0000EE14 08                         	dc.b	  8
0000EE15 08                         	dc.b	  8
0000EE16 01                         	dc.b	  1
0000EE17 10                         	dc.b	$10
0000EE18 03                         	dc.b	  3
0000EE19 00                         	dc.b	  0
0000EE1A 18                         	dc.b	$18
0000EE1B 08                         	dc.b	  8
0000EE1C 10                         	dc.b	$10
0000EE1D 00                         	dc.b	  0
0000EE1E 00                         	dc.b	  0
0000EE1F 00                         	dc.b	  0
0000EE20 06                         unk_20D9CC:	dc.b	  6
0000EE21 E0                         	dc.b	$E0 ; à
0000EE22 02                         	dc.b	  2
0000EE23 00                         	dc.b	  0
0000EE24 0E                         	dc.b	 $E
0000EE25 F0                         	dc.b	$F0 ; ð
0000EE26 E0                         	dc.b	$E0 ; à
0000EE27 0F                         	dc.b	 $F
0000EE28 00                         	dc.b	  0
0000EE29 11                         	dc.b	$11
0000EE2A F8                         	dc.b	$F8 ; ø
0000EE2B E8                         	dc.b	$E8 ; è
0000EE2C 02                         	dc.b	  2
0000EE2D 00                         	dc.b	  0
0000EE2E 21                         	dc.b	$21 ; !
0000EE2F 18                         	dc.b	$18
0000EE30 00                         	dc.b	  0
0000EE31 02                         	dc.b	  2
0000EE32 10                         	dc.b	$10
0000EE33 21                         	dc.b	$21 ; !
0000EE34 18                         	dc.b	$18
0000EE35 00                         	dc.b	  0
0000EE36 0F                         	dc.b	 $F
0000EE37 10                         	dc.b	$10
0000EE38 11                         	dc.b	$11
0000EE39 F8                         	dc.b	$F8 ; ø
0000EE3A 08                         	dc.b	  8
0000EE3B 02                         	dc.b	  2
0000EE3C 10                         	dc.b	$10
0000EE3D 0E                         	dc.b	 $E
0000EE3E F0                         	dc.b	$F0 ; ð
0000EE3F 00                         	dc.b	  0
0000EE40 0A                         unk_20D9EC:	dc.b	 $A
0000EE41 E0                         	dc.b	$E0 ; à
0000EE42 07                         	dc.b	  7
0000EE43 00                         	dc.b	  0
0000EE44 24                         	dc.b	$24 ; $
0000EE45 E8                         	dc.b	$E8 ; è
0000EE46 E0                         	dc.b	$E0 ; à
0000EE47 0D                         	dc.b	 $D
0000EE48 00                         	dc.b	  0
0000EE49 2C                         	dc.b	$2C ; ,
0000EE4A F8                         	dc.b	$F8 ; ø
0000EE4B F0                         	dc.b	$F0 ; ð
0000EE4C 05                         	dc.b	  5
0000EE4D 00                         	dc.b	  0
0000EE4E 34                         	dc.b	$34 ; 4
0000EE4F F8                         	dc.b	$F8 ; ø
0000EE50 F0                         	dc.b	$F0 ; ð
0000EE51 05                         	dc.b	  5
0000EE52 00                         	dc.b	  0
0000EE53 34                         	dc.b	$34 ; 4
0000EE54 08                         	dc.b	  8
0000EE55 E8                         	dc.b	$E8 ; è
0000EE56 02                         	dc.b	  2
0000EE57 00                         	dc.b	  0
0000EE58 0B                         	dc.b	 $B
0000EE59 18                         	dc.b	$18
0000EE5A 00                         	dc.b	  0
0000EE5B 02                         	dc.b	  2
0000EE5C 10                         	dc.b	$10
0000EE5D 0B                         	dc.b	 $B
0000EE5E 18                         	dc.b	$18
0000EE5F 00                         	dc.b	  0
0000EE60 05                         	dc.b	  5
0000EE61 00                         	dc.b	  0
0000EE62 34                         	dc.b	$34 ; 4
0000EE63 08                         	dc.b	  8
0000EE64 00                         	dc.b	  0
0000EE65 05                         	dc.b	  5
0000EE66 00                         	dc.b	  0
0000EE67 34                         	dc.b	$34 ; 4
0000EE68 F8                         	dc.b	$F8 ; ø
0000EE69 10                         	dc.b	$10
0000EE6A 0D                         	dc.b	 $D
0000EE6B 10                         	dc.b	$10
0000EE6C 2C                         	dc.b	$2C ; ,
0000EE6D F8                         	dc.b	$F8 ; ø
0000EE6E 00                         	dc.b	  0
0000EE6F 07                         	dc.b	  7
0000EE70 10                         	dc.b	$10
0000EE71 24                         	dc.b	$24 ; $
0000EE72 E8                         	dc.b	$E8 ; è
0000EE73 00                         	dc.b	  0
0000EE74 10                         unk_20DA20:	dc.b	$10
0000EE75 E0                         	dc.b	$E0 ; à
0000EE76 00                         	dc.b	  0
0000EE77 08                         	dc.b	  8
0000EE78 02                         	dc.b	  2
0000EE79 E8                         	dc.b	$E8 ; è
0000EE7A E0                         	dc.b	$E0 ; à
0000EE7B 00                         	dc.b	  0
0000EE7C 00                         	dc.b	  0
0000EE7D 02                         	dc.b	  2
0000EE7E 10                         	dc.b	$10
0000EE7F E8                         	dc.b	$E8 ; è
0000EE80 06                         	dc.b	  6
0000EE81 00                         	dc.b	  0
0000EE82 38                         	dc.b	$38 ; 8
0000EE83 E0                         	dc.b	$E0 ; à
0000EE84 E0                         	dc.b	$E0 ; à
0000EE85 05                         	dc.b	  5
0000EE86 08                         	dc.b	  8
0000EE87 2E                         	dc.b	$2E ; .
0000EE88 F0                         	dc.b	$F0 ; ð
0000EE89 E0                         	dc.b	$E0 ; à
0000EE8A 05                         	dc.b	  5
0000EE8B 00                         	dc.b	  0
0000EE8C 2E                         	dc.b	$2E ; .
0000EE8D 00                         	dc.b	  0
0000EE8E F0                         	dc.b	$F0 ; ð
0000EE8F 05                         	dc.b	  5
0000EE90 00                         	dc.b	  0
0000EE91 34                         	dc.b	$34 ; 4
0000EE92 F0                         	dc.b	$F0 ; ð
0000EE93 F0                         	dc.b	$F0 ; ð
0000EE94 05                         	dc.b	  5
0000EE95 00                         	dc.b	  0
0000EE96 34                         	dc.b	$34 ; 4
0000EE97 00                         	dc.b	  0
0000EE98 E8                         	dc.b	$E8 ; è
0000EE99 06                         	dc.b	  6
0000EE9A 08                         	dc.b	  8
0000EE9B 38                         	dc.b	$38 ; 8
0000EE9C 10                         	dc.b	$10
0000EE9D 00                         	dc.b	  0
0000EE9E 06                         	dc.b	  6
0000EE9F 10                         	dc.b	$10
0000EEA0 38                         	dc.b	$38 ; 8
0000EEA1 E0                         	dc.b	$E0 ; à
0000EEA2 18                         	dc.b	$18
0000EEA3 00                         	dc.b	  0
0000EEA4 18                         	dc.b	$18
0000EEA5 02                         	dc.b	  2
0000EEA6 E8                         	dc.b	$E8 ; è
0000EEA7 00                         	dc.b	  0
0000EEA8 05                         	dc.b	  5
0000EEA9 00                         	dc.b	  0
0000EEAA 34                         	dc.b	$34 ; 4
0000EEAB F0                         	dc.b	$F0 ; ð
0000EEAC 10                         	dc.b	$10
0000EEAD 05                         	dc.b	  5
0000EEAE 18                         	dc.b	$18
0000EEAF 2E                         	dc.b	$2E ; .
0000EEB0 F0                         	dc.b	$F0 ; ð
0000EEB1 00                         	dc.b	  0
0000EEB2 05                         	dc.b	  5
0000EEB3 00                         	dc.b	  0
0000EEB4 34                         	dc.b	$34 ; 4
0000EEB5 00                         	dc.b	  0
0000EEB6 10                         	dc.b	$10
0000EEB7 05                         	dc.b	  5
0000EEB8 10                         	dc.b	$10
0000EEB9 2E                         	dc.b	$2E ; .
0000EEBA 00                         	dc.b	  0
0000EEBB 18                         	dc.b	$18
0000EEBC 00                         	dc.b	  0
0000EEBD 10                         	dc.b	$10
0000EEBE 02                         	dc.b	  2
0000EEBF 10                         	dc.b	$10
0000EEC0 00                         	dc.b	  0
0000EEC1 06                         	dc.b	  6
0000EEC2 18                         	dc.b	$18
0000EEC3 38                         	dc.b	$38 ; 8
0000EEC4 10                         	dc.b	$10
0000EEC5 00                         	dc.b	  0
0000EEC6 0A                         unk_20DA72:	dc.b	 $A
0000EEC7 E8                         	dc.b	$E8 ; è
0000EEC8 02                         	dc.b	  2
0000EEC9 08                         	dc.b	  8
0000EECA 0B                         	dc.b	 $B
0000EECB E0                         	dc.b	$E0 ; à
0000EECC E0                         	dc.b	$E0 ; à
0000EECD 0D                         	dc.b	 $D
0000EECE 08                         	dc.b	  8
0000EECF 2C                         	dc.b	$2C ; ,
0000EED0 E8                         	dc.b	$E8 ; è
0000EED1 F0                         	dc.b	$F0 ; ð
0000EED2 05                         	dc.b	  5
0000EED3 00                         	dc.b	  0
0000EED4 34                         	dc.b	$34 ; 4
0000EED5 E8                         	dc.b	$E8 ; è
0000EED6 F0                         	dc.b	$F0 ; ð
0000EED7 05                         	dc.b	  5
0000EED8 00                         	dc.b	  0
0000EED9 34                         	dc.b	$34 ; 4
0000EEDA F8                         	dc.b	$F8 ; ø
0000EEDB E0                         	dc.b	$E0 ; à
0000EEDC 07                         	dc.b	  7
0000EEDD 08                         	dc.b	  8
0000EEDE 24                         	dc.b	$24 ; $
0000EEDF 08                         	dc.b	  8
0000EEE0 00                         	dc.b	  0
0000EEE1 02                         	dc.b	  2
0000EEE2 18                         	dc.b	$18
0000EEE3 0B                         	dc.b	 $B
0000EEE4 E0                         	dc.b	$E0 ; à
0000EEE5 00                         	dc.b	  0
0000EEE6 05                         	dc.b	  5
0000EEE7 00                         	dc.b	  0
0000EEE8 34                         	dc.b	$34 ; 4
0000EEE9 E8                         	dc.b	$E8 ; è
0000EEEA 00                         	dc.b	  0
0000EEEB 05                         	dc.b	  5
0000EEEC 00                         	dc.b	  0
0000EEED 34                         	dc.b	$34 ; 4
0000EEEE F8                         	dc.b	$F8 ; ø
0000EEEF 10                         	dc.b	$10
0000EEF0 0D                         	dc.b	 $D
0000EEF1 18                         	dc.b	$18
0000EEF2 2C                         	dc.b	$2C ; ,
0000EEF3 E8                         	dc.b	$E8 ; è
0000EEF4 00                         	dc.b	  0
0000EEF5 07                         	dc.b	  7
0000EEF6 18                         	dc.b	$18
0000EEF7 24                         	dc.b	$24 ; $
0000EEF8 08                         	dc.b	  8
0000EEF9 00                         	dc.b	  0
0000EEFA 06                         unk_20DAA6:	dc.b	  6
0000EEFB E8                         	dc.b	$E8 ; è
0000EEFC 02                         	dc.b	  2
0000EEFD 08                         	dc.b	  8
0000EEFE 21                         	dc.b	$21 ; !
0000EEFF E0                         	dc.b	$E0 ; à
0000EF00 E0                         	dc.b	$E0 ; à
0000EF01 0F                         	dc.b	 $F
0000EF02 08                         	dc.b	  8
0000EF03 11                         	dc.b	$11
0000EF04 E8                         	dc.b	$E8 ; è
0000EF05 E0                         	dc.b	$E0 ; à
0000EF06 02                         	dc.b	  2
0000EF07 08                         	dc.b	  8
0000EF08 0E                         	dc.b	 $E
0000EF09 08                         	dc.b	  8
0000EF0A 00                         	dc.b	  0
0000EF0B 02                         	dc.b	  2
0000EF0C 18                         	dc.b	$18
0000EF0D 21                         	dc.b	$21 ; !
0000EF0E E0                         	dc.b	$E0 ; à
0000EF0F 00                         	dc.b	  0
0000EF10 0F                         	dc.b	 $F
0000EF11 18                         	dc.b	$18
0000EF12 11                         	dc.b	$11
0000EF13 E8                         	dc.b	$E8 ; è
0000EF14 08                         	dc.b	  8
0000EF15 02                         	dc.b	  2
0000EF16 18                         	dc.b	$18
0000EF17 0E                         	dc.b	 $E
0000EF18 08                         	dc.b	  8
0000EF19 00                         	dc.b	  0
0000EF1A 06                         unk_20DAC6:	dc.b	  6
0000EF1B E0                         	dc.b	$E0 ; à
0000EF1C 08                         	dc.b	  8
0000EF1D 08                         	dc.b	  8
0000EF1E 00                         	dc.b	  0
0000EF1F E8                         	dc.b	$E8 ; è
0000EF20 E8                         	dc.b	$E8 ; è
0000EF21 01                         	dc.b	  1
0000EF22 08                         	dc.b	  8
0000EF23 03                         	dc.b	  3
0000EF24 F8                         	dc.b	$F8 ; ø
0000EF25 E8                         	dc.b	$E8 ; è
0000EF26 0A                         	dc.b	 $A
0000EF27 08                         	dc.b	  8
0000EF28 05                         	dc.b	  5
0000EF29 E0                         	dc.b	$E0 ; à
0000EF2A 00                         	dc.b	  0
0000EF2B 0A                         	dc.b	 $A
0000EF2C 18                         	dc.b	$18
0000EF2D 05                         	dc.b	  5
0000EF2E E0                         	dc.b	$E0 ; à
0000EF2F 08                         	dc.b	  8
0000EF30 01                         	dc.b	  1
0000EF31 18                         	dc.b	$18
0000EF32 03                         	dc.b	  3
0000EF33 F8                         	dc.b	$F8 ; ø
0000EF34 18                         	dc.b	$18
0000EF35 08                         	dc.b	  8
0000EF36 18                         	dc.b	$18
0000EF37 00                         	dc.b	  0
0000EF38 E8                         	dc.b	$E8 ; è
0000EF39 00                         	dc.b	  0
0000EF3A 11                         unk_20DAE6:	dc.b	$11
0000EF3B E0                         	dc.b	$E0 ; à
0000EF3C 04                         	dc.b	  4
0000EF3D 00                         	dc.b	  0
0000EF3E 3E                         	dc.b	$3E ; >
0000EF3F 00                         	dc.b	  0
0000EF40 E8                         	dc.b	$E8 ; è
0000EF41 09                         	dc.b	  9
0000EF42 00                         	dc.b	  0
0000EF43 40                         	dc.b	$40 ; .
0000EF44 00                         	dc.b	  0
0000EF45 E8                         	dc.b	$E8 ; è
0000EF46 00                         	dc.b	  0
0000EF47 00                         	dc.b	  0
0000EF48 46                         	dc.b	$46 ; F
0000EF49 18                         	dc.b	$18
0000EF4A F8                         	dc.b	$F8 ; ø
0000EF4B 04                         	dc.b	  4
0000EF4C 00                         	dc.b	  0
0000EF4D 47                         	dc.b	$47 ; G
0000EF4E 10                         	dc.b	$10
0000EF4F 00                         	dc.b	  0
0000EF50 04                         	dc.b	  4
0000EF51 10                         	dc.b	$10
0000EF52 47                         	dc.b	$47 ; G
0000EF53 10                         	dc.b	$10
0000EF54 08                         	dc.b	  8
0000EF55 09                         	dc.b	  9
0000EF56 10                         	dc.b	$10
0000EF57 40                         	dc.b	$40 ; .
0000EF58 00                         	dc.b	  0
0000EF59 10                         	dc.b	$10
0000EF5A 00                         	dc.b	  0
0000EF5B 10                         	dc.b	$10
0000EF5C 46                         	dc.b	$46 ; F
0000EF5D 18                         	dc.b	$18
0000EF5E 18                         	dc.b	$18
0000EF5F 04                         	dc.b	  4
0000EF60 10                         	dc.b	$10
0000EF61 3E                         	dc.b	$3E ; >
0000EF62 00                         	dc.b	  0
0000EF63 E0                         	dc.b	$E0 ; à
0000EF64 04                         	dc.b	  4
0000EF65 08                         	dc.b	  8
0000EF66 3E                         	dc.b	$3E ; >
0000EF67 F0                         	dc.b	$F0 ; ð
0000EF68 E8                         	dc.b	$E8 ; è
0000EF69 00                         	dc.b	  0
0000EF6A 08                         	dc.b	  8
0000EF6B 46                         	dc.b	$46 ; F
0000EF6C E0                         	dc.b	$E0 ; à
0000EF6D E8                         	dc.b	$E8 ; è
0000EF6E 09                         	dc.b	  9
0000EF6F 08                         	dc.b	  8
0000EF70 40                         	dc.b	$40 ; .
0000EF71 E8                         	dc.b	$E8 ; è
0000EF72 F8                         	dc.b	$F8 ; ø
0000EF73 04                         	dc.b	  4
0000EF74 08                         	dc.b	  8
0000EF75 47                         	dc.b	$47 ; G
0000EF76 E0                         	dc.b	$E0 ; à
0000EF77 00                         	dc.b	  0
0000EF78 04                         	dc.b	  4
0000EF79 18                         	dc.b	$18
0000EF7A 47                         	dc.b	$47 ; G
0000EF7B E0                         	dc.b	$E0 ; à
0000EF7C 10                         	dc.b	$10
0000EF7D 00                         	dc.b	  0
0000EF7E 18                         	dc.b	$18
0000EF7F 46                         	dc.b	$46 ; F
0000EF80 E0                         	dc.b	$E0 ; à
0000EF81 08                         	dc.b	  8
0000EF82 09                         	dc.b	  9
0000EF83 18                         	dc.b	$18
0000EF84 40                         	dc.b	$40 ; .
0000EF85 E8                         	dc.b	$E8 ; è
0000EF86 18                         	dc.b	$18
0000EF87 04                         	dc.b	  4
0000EF88 18                         	dc.b	$18
0000EF89 3E                         	dc.b	$3E ; >
0000EF8A F0                         	dc.b	$F0 ; ð
0000EF8B F8                         	dc.b	$F8 ; ø
0000EF8C 05                         	dc.b	  5
0000EF8D 00                         	dc.b	  0
0000EF8E 49                         	dc.b	$49 ; I
0000EF8F F8                         	dc.b	$F8 ; ø
0000EF8F F8                         	dc.b	$F8 ; ø
0000EF90                            	even
0000EF90                            ArtNem_BigRingFlash:
0000EF90                            	incbin	"level/objects/bigring/artflash.bin"
0000F110                            	even
0000F110                            ; -------------------------------------------------------------------------------
0000F110                            
0000F110                            Obj3DPlant:
0000F110 4DF8 D000                  	lea	(v_player).w,a6
0000F114 7000                       	moveq	#0,d0
0000F116 1028 0024                  	move.b	oRoutine(a0),d0
0000F11A 303B 0000                  	move.w	Obj3DPlant_Index(pc,d0.w),d0
0000F11E 4EBB 0000                  	jsr	Obj3DPlant_Index(pc,d0.w)
0000F122 4EB8 4012                  	jsr	DrawObject
0000F126 3028 002A                  	move.w	oVar2A(a0),d0
0000F12A 6000 8BF2                  	bra.w	CheckObjDespawn2Time
0000F12E                            ; End of function Obj3DPlant
0000F12E                            
0000F12E                            ; -------------------------------------------------------------------------------
0000F12E 0000                       Obj3DPlant_Index:dc.w	Obj3DPlant_Init-Obj3DPlant_Index
0000F130 0000                       	dc.w	Obj3DPlant_Main-Obj3DPlant_Index
0000F132                            ; -------------------------------------------------------------------------------
0000F132                            
0000F132                            Obj3DPlant_Init:
0000F132 0028 0004 0001             	ori.b	#4,oRender(a0)
0000F138 217C 0000 0000 0004        	move.l	#MapSpr_3DPlant,oMap(a0)
0000F140 317C 4424 0002             	move.w	#$4424,oTile(a0)
0000F146 117C 0018 0019             	move.b	#$18,oWidth(a0)
0000F14C 117C 0014 0016             	move.b	#$14,oYRadius(a0)
0000F152 3628 0008                  	move.w	oX(a0),d3
0000F156 2248                       	movea.l	a0,a1
0000F158 7C03                       	moveq	#3,d6
0000F15A 08A8 0000 0028             	bclr	#0,oSubtype(a0)
0000F160 6700                       	beq.s	.GotCount
0000F162 7C01                       	moveq	#1,d6
0000F164                            
0000F164                            .GotCount:
0000F164 7400                       	moveq	#0,d2
0000F166 6000                       	bra.s	.Init
0000F168                            
0000F168                            ; -------------------------------------------------------------------------------
0000F168                            
0000F168                            .Loop:
0000F168 4EB8 7CE4                  	jsr	FindObjSlot
0000F16C                            
0000F16C                            .Init:
0000F16C 5429 0024                  	addq.b	#2,oRoutine(a1)
0000F170 12BC 002C                  	move.b	#$2C,oID(a1)
0000F174 3343 0008                  	move.w	d3,oX(a1)
0000F178 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000F17E 3343 002A                  	move.w	d3,oVar2A(a1)
0000F182 2368 0004 0004             	move.l	oMap(a0),oMap(a1)
0000F188 3368 0002 0002             	move.w	oTile(a0),oTile(a1)
0000F18E 1368 0019 0019             	move.b	oWidth(a0),oWidth(a1)
0000F194 1368 0016 0016             	move.b	oYRadius(a0),oYRadius(a1)
0000F19A 0029 0004 0001             	ori.b	#4,oRender(a1)
0000F1A0 323B 2000                  	move.w	Obj3DPlant_Offsets1(pc,d2.w),d1
0000F1A4 D369 0008                  	add.w	d1,oX(a1)
0000F1A8 3369 0008 002C             	move.w	oX(a1),oVar2C(a1)
0000F1AE 5402                       	addq.b	#2,d2
0000F1B0 51CE FFB6                  	dbf	d6,.Loop
0000F1B4                            
0000F1B4 7C02                       	moveq	#2,d6
0000F1B6 7400                       	moveq	#0,d2
0000F1B8                            
0000F1B8                            .Loop2:
0000F1B8 4EB8 7CE4                  	jsr	FindObjSlot
0000F1BC 5429 0024                  	addq.b	#2,oRoutine(a1)
0000F1C0 12BC 002C                  	move.b	#$2C,oID(a1)
0000F1C4 137C 0001 0028             	move.b	#1,oSubtype(a1)
0000F1CA 137C 0001 001A             	move.b	#1,oMapFrame(a1)
0000F1D0 137C 0004 0018             	move.b	#4,oPriority(a1)
0000F1D6 3343 0008                  	move.w	d3,oX(a1)
0000F1DA 3343 002A                  	move.w	d3,oVar2A(a1)
0000F1DE 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000F1E4 2368 0004 0004             	move.l	oMap(a0),oMap(a1)
0000F1EA 3368 0002 0002             	move.w	oTile(a0),oTile(a1)
0000F1F0 137C 000C 0019             	move.b	#$C,oWidth(a1)
0000F1F6 137C 000C 0016             	move.b	#$C,oYRadius(a1)
0000F1FC 0029 0004 0001             	ori.b	#4,oRender(a1)
0000F202 323B 2000                  	move.w	Obj3DPlant_Offsets2(pc,d2.w),d1
0000F206 D369 0008                  	add.w	d1,oX(a1)
0000F20A 5402                       	addq.b	#2,d2
0000F20C 51CE FFAA                  	dbf	d6,.Loop2
0000F210 4E75                       	rts
0000F212                            ; End of function Obj3DPlant_Init
0000F212                            
0000F212                            ; -------------------------------------------------------------------------------
0000F212 0040 0080 FFC0 FF80        Obj3DPlant_Offsets1:dc.w	$40, $80, $FFC0, $FF80
0000F21A 0000 0060 FFA0             Obj3DPlant_Offsets2:dc.w	0, $60, $FFA0
0000F220                            ; -------------------------------------------------------------------------------
0000F220                            
0000F220                            Obj3DPlant_Main:
0000F220 4A28 0028                  	tst.b	oSubtype(a0)
0000F224 6600                       	bne.s	.End
0000F226 7000                       	moveq	#0,d0
0000F228 082E 0001 002C             	btst	#1,oVar2C(a6)
0000F22E 6700                       	beq.s	.MovePlant
0000F230 7600                       	moveq	#0,d3
0000F232 302E 0008                  	move.w	oX(a6),d0
0000F236 3400                       	move.w	d0,d2
0000F238 0240 00FF                  	andi.w	#$FF,d0
0000F23C B468 002A                  	cmp.w	oVar2A(a0),d2
0000F240 6400                       	bcc.s	.GetChunkPos
0000F242 3200                       	move.w	d0,d1
0000F244 303C 00FF                  	move.w	#$FF,d0
0000F248 9041                       	sub.w	d1,d0
0000F24A                            
0000F24A                            .GetChunkPos:
0000F24A 0C40 00C0                  	cmpi.w	#$C0,d0
0000F24E 6500                       	bcs.s	.GotChunkPos
0000F250 0C40 00F0                  	cmpi.w	#$F0,d0
0000F254 6400                       	bcc.s	.CapChunkPos
0000F256 303C 00BF                  	move.w	#$BF,d0
0000F25A 6000                       	bra.s	.GotChunkPos
0000F25C                            
0000F25C                            ; -------------------------------------------------------------------------------
0000F25C                            
0000F25C                            .CapChunkPos:
0000F25C 7000                       	moveq	#0,d0
0000F25E                            
0000F25E                            .GotChunkPos:
0000F25E E248                       	lsr.w	#1,d0
0000F260 B468 002A                  	cmp.w	oVar2A(a0),d2
0000F264 6400                       	bcc.s	.MovePlant
0000F266 4440                       	neg.w	d0
0000F268                            
0000F268                            .MovePlant:
0000F268 D068 002C                  	add.w	oVar2C(a0),d0
0000F26C 3140 0008                  	move.w	d0,oX(a0)
0000F270                            
0000F270                            .End:
0000F270 4E75                       	rts
0000F272                            ; End of function Obj3DPlant_Main
0000F272                            
0000F272                            ; -------------------------------------------------------------------------------
0000F272                            
0000F272                            Obj3DFall:
0000F272 303B 0000                  	move.w	Obj3DFall_Index(pc,d0.w),d0
0000F276 4EBB 0000                  	jsr	Obj3DFall_Index(pc,d0.w)
0000F27A 6000 8A9E                  	bra.w	CheckObjDespawnTime
0000F27E                            ; End of function Obj3DFall
0000F27E                            
0000F27E                            ; -------------------------------------------------------------------------------
0000F27E 0000                       Obj3DFall_Index:dc.w	Obj3DFall_Init-Obj3DFall_Index
0000F280 0000                       	dc.w	Obj3DFall_Main-Obj3DFall_Index
0000F282                            ; -------------------------------------------------------------------------------
0000F282                            
0000F282                            Obj3DFall_Init:
0000F282 5428 0024                  	addq.b	#2,oRoutine(a0)
0000F286 0028 0004 0001             	ori.b	#4,oRender(a0)
0000F28C                            ; End of function Obj3DFall_Init
0000F28C                            
0000F28C                            ; -------------------------------------------------------------------------------
0000F28C                            
0000F28C                            Obj3DFall_Main:
0000F28C 0C2E 002B 001C             	cmpi.b	#$2B,oAnim(a6)
0000F292 6700 0000                  	beq.w	.End
0000F296 3028 000C                  	move.w	oY(a0),d0
0000F29A 906E 000C                  	sub.w	oY(a6),d0
0000F29E 0640 0040                  	addi.w	#$40,d0
0000F2A2 0C40 0080                  	cmpi.w	#$80,d0
0000F2A6 6400                       	bcc.s	.End
0000F2A8 3028 0008                  	move.w	oX(a0),d0
0000F2AC 906E 0008                  	sub.w	oX(a6),d0
0000F2B0 0640 0020                  	addi.w	#$20,d0
0000F2B4 0C40 0040                  	cmpi.w	#$40,d0
0000F2B8 6400                       	bcc.s	.End
0000F2BA 3028 0008                  	move.w	oX(a0),d0
0000F2BE 322E 0010                  	move.w	oXVel(a6),d1
0000F2C2 4A41                       	tst.w	d1
0000F2C4 6A00                       	bpl.s	.End
0000F2C6 B06E 0008                  	cmp.w	oX(a6),d0
0000F2CA 6500                       	bcs.s	.End
0000F2CC 3D40 0008                  	move.w	d0,oX(a6)
0000F2D0 3D7C 0000 0010             	move.w	#0,oXVel(a6)
0000F2D6 3D7C 0000 0014             	move.w	#0,oPlayerGVel(a6)
0000F2DC 1D7C 0037 001C             	move.b	#$37,oAnim(a6)
0000F2E2 1D7C 0001 003C             	move.b	#1,oPlayerJump(a6)
0000F2E8 422E 0038                  	clr.b	oPlayerStick(a6)
0000F2EC 117C 000E 0016             	move.b	#$E,oYRadius(a0)
0000F2F2 117C 0007 0017             	move.b	#7,oXRadius(a0)
0000F2F8 5A68 000C                  	addq.w	#5,oY(a0)
0000F2FC 08EE 0002 0022             	bset	#2,oStatus(a6)
0000F302                            
0000F302                            .End:
0000F302 4E75                       	rts
0000F304                            ; End of function Obj3DFall_Main
0000F304                            
0000F304                            ; -------------------------------------------------------------------------------
0000F304                            
0000F304                            Obj3DRamp:
0000F304 4DF8 D000                  	lea	(v_player).w,a6
0000F308 7000                       	moveq	#0,d0
0000F30A 1028 0024                  	move.b	oRoutine(a0),d0
0000F30E 4A28 0029                  	tst.b	oSubtype2(a0)
0000F312 6600 FF5E                  	bne.w	Obj3DFall
0000F316 303B 0000                  	move.w	Obj3DRamp_Index(pc,d0.w),d0
0000F31A 4EBB 0000                  	jsr	Obj3DRamp_Index(pc,d0.w)
0000F31E 4EB8 4012                  	jsr	DrawObject
0000F322 3028 002A                  	move.w	oVar2A(a0),d0
0000F326 6000 89F6                  	bra.w	CheckObjDespawn2Time
0000F32A                            ; End of function Obj3DRamp
0000F32A                            
0000F32A                            ; -------------------------------------------------------------------------------
0000F32A 0000                       Obj3DRamp_Index:dc.w	Obj3DRamp_Init-Obj3DRamp_Index
0000F32C 0000                       	dc.w	Obj3DRamp_Main-Obj3DRamp_Index
0000F32E                            ; -------------------------------------------------------------------------------
0000F32E                            
0000F32E                            Obj3DRamp_Init:
0000F32E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000F332 117C 0004 0001             	move.b	#4,oRender(a0)
0000F338 117C 0001 0018             	move.b	#1,oPriority(a0)
0000F33E 217C 0000 0000 0004        	move.l	#MapSpr_3DRamp,oMap(a0)
0000F346 317C 0441 0002             	move.w	#$441,oTile(a0)
0000F34C 117C 0020 0019             	move.b	#$20,oWidth(a0)
0000F352 117C 0020 0016             	move.b	#$20,oYRadius(a0)
0000F358 3168 0008 002A             	move.w	oX(a0),oVar2A(a0)
0000F35E 4A28 0028                  	tst.b	oSubtype(a0)
0000F362 6700                       	beq.s	Obj3DRamp_Main
0000F364 08E8 0000 0001             	bset	#0,oRender(a0)
0000F36A 08E8 0000 0022             	bset	#0,oStatus(a0)
0000F370                            ; End of function Obj3DRamp_Init
0000F370                            
0000F370                            ; -------------------------------------------------------------------------------
0000F370                            
0000F370                            Obj3DRamp_Main:
0000F370 4A28 002E                  	tst.b	oVar2E(a0)
0000F374 6700                       	beq.s	.TimeRunSet
0000F376 117C 0001 001C             	move.b	#1,oAnim(a0)
0000F37C 082E 0001 002C             	btst	#1,oPlayerCtrl(a6)
0000F382 6600                       	bne.s	.Animate
0000F384 5228 001C                  	addq.b	#1,oAnim(a0)
0000F388                            
0000F388                            .Animate:
0000F388 43F9 0000 0000             	lea	(Ani_3DRamp).l,a1
0000F38E 4EB8 61F4                  	jsr	AnimateObject
0000F392 6000                       	bra.s	.GetChunkPos
0000F394                            
0000F394                            ; -------------------------------------------------------------------------------
0000F394                            
0000F394                            .TimeRunSet:
0000F394 117C 0000 001A             	move.b	#0,oMapFrame(a0)
0000F39A 7200                       	moveq	#0,d1
0000F39C 082E 0001 002C             	btst	#1,oPlayerCtrl(a6)
0000F3A2 6700                       	beq.s	.Move3D
0000F3A4                            
0000F3A4                            .GetChunkPos:
0000F3A4 302E 0008                  	move.w	oX(a6),d0
0000F3A8 0240 00FF                  	andi.w	#$FF,d0
0000F3AC 4A28 0028                  	tst.b	oSubtype(a0)
0000F3B0 6700                       	beq.s	.NoFlip
0000F3B2 3200                       	move.w	d0,d1
0000F3B4 303C 00FF                  	move.w	#$FF,d0
0000F3B8 9041                       	sub.w	d1,d0
0000F3BA                            
0000F3BA                            .NoFlip:
0000F3BA 0C40 00C0                  	cmpi.w	#$C0,d0
0000F3BE 6500                       	bcs.s	.GotChunkPos
0000F3C0 0C40 00F0                  	cmpi.w	#$F0,d0
0000F3C4 6400                       	bcc.s	.CapChunkPos
0000F3C6 303C 00BF                  	move.w	#$BF,d0
0000F3CA 6000                       	bra.s	.GotChunkPos
0000F3CC                            
0000F3CC                            ; -------------------------------------------------------------------------------
0000F3CC                            
0000F3CC                            .CapChunkPos:
0000F3CC 7000                       	moveq	#0,d0
0000F3CE                            
0000F3CE                            .GotChunkPos:
0000F3CE 48C0                       	ext.l	d0
0000F3D0 3200                       	move.w	d0,d1
0000F3D2 4A28 002E                  	tst.b	oVar2E(a0)
0000F3D6 6600                       	bne.s	.KeepFrame
0000F3D8 80FC 0030                  	divu.w	#$30,d0
0000F3DC 1140 001A                  	move.b	d0,oMapFrame(a0)
0000F3E0                            
0000F3E0                            .KeepFrame:
0000F3E0 E449                       	lsr.w	#2,d1
0000F3E2 3401                       	move.w	d1,d2
0000F3E4 E24A                       	lsr.w	#1,d2
0000F3E6 D242                       	add.w	d2,d1
0000F3E8 4A28 0028                  	tst.b	oSubtype(a0)
0000F3EC 6700                       	beq.s	.Move3D
0000F3EE 4441                       	neg.w	d1
0000F3F0                            
0000F3F0                            .Move3D:
0000F3F0 D268 002A                  	add.w	oVar2A(a0),d1
0000F3F4 3141 0008                  	move.w	d1,oX(a0)
0000F3F8 4A28 002E                  	tst.b	oVar2E(a0)
0000F3FC 6700                       	beq.s	.SkipTimer
0000F3FE 5328 002E                  	subq.b	#1,oVar2E(a0)
0000F402 6000                       	bra.s	.ChkTouch
0000F404                            
0000F404                            ; -------------------------------------------------------------------------------
0000F404                            
0000F404                            .SkipTimer:
0000F404 082E 0001 0022             	btst	#1,oStatus(a6)
0000F40A 6600                       	bne.s	.End
0000F40C                            
0000F40C                            .ChkTouch:
0000F40C 1228 0019                  	move.b	oWidth(a0),d1
0000F410 4881                       	ext.w	d1
0000F412 302E 0008                  	move.w	oX(a6),d0
0000F416 9068 0008                  	sub.w	oX(a0),d0
0000F41A D041                       	add.w	d1,d0
0000F41C 6B00                       	bmi.s	.End
0000F41E D241                       	add.w	d1,d1
0000F420 B041                       	cmp.w	d1,d0
0000F422 6400                       	bcc.s	.End
0000F424 1228 0016                  	move.b	oYRadius(a0),d1
0000F428 4881                       	ext.w	d1
0000F42A 302E 000C                  	move.w	oY(a6),d0
0000F42E 9068 000C                  	sub.w	oY(a0),d0
0000F432 D041                       	add.w	d1,d0
0000F434 6B00                       	bmi.s	.End
0000F436 D241                       	add.w	d1,d1
0000F438 B041                       	cmp.w	d1,d0
0000F43A 6400                       	bcc.s	.End
0000F43C 0C2E 002B 001C             	cmpi.b	#$2B,oAnim(a6)
0000F442 6700                       	beq.s	.End
0000F444 4A28 002E                  	tst.b	oVar2E(a0)
0000F448 6600                       	bne.s	.TimerSet
0000F44A 117C 003C 002E             	move.b	#60,oVar2E(a0)
0000F450                            
0000F450                            .TimerSet:
0000F450 4A6E 0012                  	tst.w	oYVel(a6)
0000F454 6A00                       	bpl.s	.LaunchDown
0000F456 3D7C F400 0012             	move.w	#-$C00,oYVel(a6)
0000F45C 4E75                       	rts
0000F45E                            
0000F45E                            ; -------------------------------------------------------------------------------
0000F45E                            
0000F45E                            .LaunchDown:
0000F45E 3D7C 0C00 0012             	move.w	#$C00,oYVel(a6)
0000F464                            
0000F464                            .End:
0000F464 4E75                       	rts
0000F466                            ; End of function Obj3DRamp_Main
0000F466                            
0000F466                            ; -------------------------------------------------------------------------------
0000F466                            MapSpr_3DPlant:
0000F466                            	include	"level/objects/3dplant/map.asm"
0000F466                            .Map:
0000F466 0000                       	dc.w	unk_20E024-.Map
0000F468 0000                       	dc.w	unk_20E03A-.Map
0000F46A 04                         unk_20E024:	dc.b	  4
0000F46B EC                         	dc.b	$EC ; ì
0000F46C 04                         	dc.b	  4
0000F46D 00                         	dc.b	  0
0000F46E 00                         	dc.b	  0
0000F46F F8                         	dc.b	$F8 ; ø
0000F470 F4                         	dc.b	$F4 ; ô
0000F471 0E                         	dc.b	 $E
0000F472 00                         	dc.b	  0
0000F473 02                         	dc.b	  2
0000F474 F8                         	dc.b	$F8 ; ø
0000F475 FC                         	dc.b	$FC ; ü
0000F476 05                         	dc.b	  5
0000F477 00                         	dc.b	  0
0000F478 0E                         	dc.b	 $E
0000F479 E8                         	dc.b	$E8 ; è
0000F47A 0C                         	dc.b	 $C
0000F47B 08                         	dc.b	  8
0000F47C 00                         	dc.b	  0
0000F47D 12                         	dc.b	$12
0000F47E F0                         	dc.b	$F0 ; ð
0000F47F 00                         	dc.b	  0
0000F480 02                         unk_20E03A:	dc.b	  2
0000F481 F4                         	dc.b	$F4 ; ô
0000F482 00                         	dc.b	  0
0000F483 00                         	dc.b	  0
0000F484 15                         	dc.b	$15
0000F485 FC                         	dc.b	$FC ; ü
0000F486 FC                         	dc.b	$FC ; ü
0000F487 09                         	dc.b	  9
0000F488 00                         	dc.b	  0
0000F489 16                         	dc.b	$16
0000F48A F4                         	dc.b	$F4 ; ô
0000F48B 00                         	dc.b	  0
0000F48B 00                         	dc.b	  0
0000F48C                            	even
0000F48C                            Ani_3DRamp:
0000F48C                            	include	"level/objects/3dramp/anim.asm"
0000F48C                            .Anim:
0000F48C 0000                       	dc.w	byte_20E04C-.Anim
0000F48E 0000                       	dc.w	byte_20E058-.Anim
0000F490 0000                       	dc.w	byte_20E05E-.Anim
0000F492 0004 0403 0303 0505 0202+  byte_20E04C:	dc.b	0,	4, 4, 3, 3, 3, 5, 5, 2,	2, 2, $FF
0000F49E 0204 0705 06FF             byte_20E058:	dc.b	2,	4, 7, 5, 6, $FF
0000F4A4 0208 0009 00FF             byte_20E05E:	dc.b	2,	8, 0, 9, 0, $FF
0000F4A4 0208 0009 00FF             byte_20E05E:	dc.b	2,	8, 0, 9, 0, $FF
0000F4AA                            	even
0000F4AA                            ; -------------------------------------------------------------------------------
0000F4AA                            
0000F4AA                            ObjRobotGenerator:
0000F4AA 7000                       	moveq	#0,d0
0000F4AC 1028 0024                  	move.b	oRoutine(a0),d0
0000F4B0 303B 0000                  	move.w	ObjRobotGenerator_Index(pc,d0.w),d0
0000F4B4 4EBB 0000                  	jsr	ObjRobotGenerator_Index(pc,d0.w)
0000F4B8 4EB8 4012                  	jsr	DrawObject
0000F4BC 0C28 0002 0024             	cmpi.b	#2,oRoutine(a0)
0000F4C2 6E00                       	bgt.s	.End
0000F4C4 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000F4C8                            
0000F4C8                            ; -------------------------------------------------------------------------------
0000F4C8                            
0000F4C8                            .End:
0000F4C8 4E75                       	rts
0000F4CA                            ; End of function ObjRobotGenerator
0000F4CA                            
0000F4CA                            ; -------------------------------------------------------------------------------
0000F4CA 0000                       ObjRobotGenerator_Index:dc.w	ObjRobotGenerator_Init-ObjRobotGenerator_Index
0000F4CC 0000                       	dc.w	ObjRobotGenerator_Main-ObjRobotGenerator_Index
0000F4CE 0000                       	dc.w	ObjRobotGenerator_Exploding-ObjRobotGenerator_Index
0000F4D0 0000                       	dc.w	ObjRobotGenerator_BreakDown-ObjRobotGenerator_Index
0000F4D2                            ; -------------------------------------------------------------------------------
0000F4D2                            
0000F4D2                            ObjRobotGenerator_Init:
0000F4D2 5428 0024                  	addq.b	#2,oRoutine(a0)
0000F4D6 0028 0004 0001             	ori.b	#4,oRender(a0)
0000F4DC 117C 0004 0018             	move.b	#4,oPriority(a0)
0000F4E2 117C 0022 0017             	move.b	#$22,oXRadius(a0)
0000F4E8 117C 0022 0019             	move.b	#$22,oWidth(a0)
0000F4EE 117C 0020 0016             	move.b	#$20,oYRadius(a0)
0000F4F4 43FA 0000                  	lea	ObjRobotGenerator_BaseTileList(pc),a1
0000F4F8 7000                       	moveq	#0,d0
0000F4FA 1039 00FF 1507             	move.b	(v_act).l,d0
0000F500 E540                       	asl.w	#2,d0
0000F502 D039 00FF 152E             	add.b	(v_time_zone).l,d0
0000F508 D040                       	add.w	d0,d0
0000F50A 3171 0000 0002             	move.w	(a1,d0.w),oTile(a0)
0000F510 217C 0000 0000 0004        	move.l	#MapSpr_RobotGenerator,oMap(a0)
0000F518 217C 0000 0000 002C        	move.l	#ObjRobotGenerator_ExplosionLocs,oVar2C(a0)
0000F520 3168 000C 0030             	move.w	oY(a0),oVar30(a0)
0000F526 317C 0004 002A             	move.w	#4,oVar2A(a0)
0000F52C 317C 0001 0032             	move.w	#1,oVar32(a0)
0000F532 7000                       	moveq	#0,d0
0000F534 4A39 00FF 156A             	tst.b	(v_good_future).l
0000F53A 6600                       	bne.s	.GoodFuture
0000F53C 5400                       	addq.b	#2,d0
0000F53E                            
0000F53E                            .GoodFuture:
0000F53E 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000F544 6600                       	bne.s	.NotPast
0000F546 5200                       	addq.b	#1,d0
0000F548                            
0000F548                            .NotPast:
0000F548 1140 001A                  	move.b	d0,oMapFrame(a0)
0000F54C 4A39 00FF 156A             	tst.b	(v_good_future).l
0000F552 6600                       	bne.s	ObjRobotGenerator_Main
0000F554 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000F55A 6600                       	bne.s	ObjRobotGenerator_Main
0000F55C 117C 00FA 0020             	move.b	#$FA,oColType(a0)
0000F562 0468 0010 000C             	subi.w	#$10,oY(a0)
0000F568                            ; End of function ObjRobotGenerator_Init
0000F568                            
0000F568                            ; -------------------------------------------------------------------------------
0000F568                            
0000F568                            ObjRobotGenerator_Main:
0000F568 4A39 00FF 156A             	tst.b	(v_good_future).l
0000F56E 6600                       	bne.s	.End2
0000F570 4A39 00FF 152E             	tst.b	(v_time_zone).l
0000F576 6600                       	bne.s	.End2
0000F578 6100 0000                  	bsr.w	ObjRobotGenerator_Float
0000F57C 4A28 0021                  	tst.b	oColStatus(a0)
0000F580 6700                       	beq.s	.Solid
0000F582 4268 0020                  	clr.w	oColType(a0)
0000F586 4268 002A                  	clr.w	oVar2A(a0)
0000F58A 117C 0007 001A             	move.b	#7,oMapFrame(a0)
0000F590 5428 0024                  	addq.b	#2,oRoutine(a0)
0000F594 13FC 0001 00FF 156A        	move.b	#1,(v_good_future).l
0000F59C 203C 0000 0096             	move.l	#$96,d0
0000F5A2 4EBA CDA6                  	jsr	AddPoints
0000F5A6 43F8 D000                  	lea	(v_player).w,a1
0000F5AA 4EBA B01C                  	jsr	SolidObject
0000F5AE 6700                       	beq.s	.End
0000F5B0 4EBA AECC                  	jsr	ClearObjRide
0000F5B4                            
0000F5B4                            .End:
0000F5B4 4E75                       	rts
0000F5B6                            
0000F5B6                            ; -------------------------------------------------------------------------------
0000F5B6                            
0000F5B6                            .Solid:
0000F5B6 43F8 D000                  	lea	(v_player).w,a1
0000F5BA 4EBA B00C                  	jsr	SolidObject
0000F5BE 43FA 0000                  	lea	Ani_RobotGenerator(pc),a1
0000F5C2 4EF8 61F4                  	jmp	AnimateObject
0000F5C6                            
0000F5C6                            ; -------------------------------------------------------------------------------
0000F5C6                            
0000F5C6                            .End2:
0000F5C6 4E75                       	rts
0000F5C8                            ; End of function ObjRobotGenerator_Main
0000F5C8                            
0000F5C8                            ; -------------------------------------------------------------------------------
0000F5C8                            
0000F5C8                            ObjRobotGenerator_Exploding:
0000F5C8 2C68 002C                  	movea.l	oVar2C(a0),a6
0000F5CC 101E                       	move.b	(a6)+,d0
0000F5CE 6B00                       	bmi.s	.Finished
0000F5D0 5228 002A                  	addq.b	#1,oVar2A(a0)
0000F5D4 B028 002A                  	cmp.b	oVar2A(a0),d0
0000F5D8 6600                       	bne.s	.End
0000F5DA 1A1E                       	move.b	(a6)+,d5
0000F5DC 1C1E                       	move.b	(a6)+,d6
0000F5DE 214E 002C                  	move.l	a6,oVar2C(a0)
0000F5E2 4885                       	ext.w	d5
0000F5E4 4886                       	ext.w	d6
0000F5E6 4EB8 7CE4                  	jsr	FindObjSlot
0000F5EA 6600                       	bne.s	.End
0000F5EC 12BC 0018                  	move.b	#$18,oID(a1)
0000F5F0 137C 0001 0025             	move.b	#1,oRoutine2(a1)
0000F5F6 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000F5FC 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000F602 DB69 0008                  	add.w	d5,oX(a1)
0000F606 DD69 000C                  	add.w	d6,oY(a1)
0000F60A 303C 00C4                  	move.w	#$C4,d0
0000F60E 4EB8 2708                  	jsr	PlayFMSound
0000F612                            
0000F612                            .End:
0000F612 4E75                       	rts
0000F614                            
0000F614                            ; -------------------------------------------------------------------------------
0000F614                            
0000F614                            .Finished:
0000F614 5428 0024                  	addq.b	#2,oRoutine(a0)
0000F618 117C 0008 002A             	move.b	#8,oVar2A(a0)
0000F61E 4E75                       	rts
0000F620                            ; End of function ObjRobotGenerator_Exploding
0000F620                            
0000F620                            ; -------------------------------------------------------------------------------
0000F620                            
0000F620                            ObjRobotGenerator_BreakDown:
0000F620 5328 002A                  	subq.b	#1,oVar2A(a0)
0000F624 6600                       	bne.s	.End
0000F626 5D28 0024                  	subq.b	#6,oRoutine(a0)
0000F62A 3168 0030 000C             	move.w	oVar30(a0),oY(a0)
0000F630 303C 00D9                  	move.w	#$D9,d0
0000F634 4EF8 2708                  	jmp	PlayFMSound
0000F638                            
0000F638                            ; -------------------------------------------------------------------------------
0000F638                            
0000F638                            .End:
0000F638 4E75                       	rts
0000F63A                            ; End of function ObjRobotGenerator_BreakDown
0000F63A                            
0000F63A                            ; -------------------------------------------------------------------------------
0000F63A                            
0000F63A                            ObjRobotGenerator_Float:
0000F63A 5268 002A                  	addq.w	#1,oVar2A(a0)
0000F63E 3028 002A                  	move.w	oVar2A(a0),d0
0000F642 0240 0007                  	andi.w	#7,d0
0000F646 6600                       	bne.s	.Stay
0000F648 3028 0032                  	move.w	oVar32(a0),d0
0000F64C D168 000C                  	add.w	d0,oY(a0)
0000F650                            
0000F650                            .Stay:
0000F650 3028 002A                  	move.w	oVar2A(a0),d0
0000F654 0240 001F                  	andi.w	#$1F,d0
0000F658 6600                       	bne.s	.End
0000F65A 4468 0032                  	neg.w	oVar32(a0)
0000F65E                            
0000F65E                            .End:
0000F65E 4E75                       	rts
0000F660                            ; End of function ObjRobotGenerator_Float
0000F660                            
0000F660                            ; -------------------------------------------------------------------------------
0000F660                            Ani_RobotGenerator:
0000F660                            	include	"level/objects/robotgenerator/anim.asm"
0000F660                            .Anim:
0000F660 0000                       	dc.w	byte_20E232-.Anim
0000F662 0303 0405 06FF             byte_20E232:	dc.b	3,	3, 4, 5, 6, $FF
0000F662 0303 0405 06FF             byte_20E232:	dc.b	3,	3, 4, 5, 6, $FF
0000F668                            	even
0000F668                            MapSpr_RobotGenerator:
0000F668                            	include	"level/objects/robotgenerator/map.asm"
0000F668                            .Map:
0000F668 0000                       	dc.w	unk_20E249-.Map
0000F66A 0000                       	dc.w	unk_20E25E-.Map
0000F66C 0000                       	dc.w	unk_20E273-.Map
0000F66E 0000                       	dc.w	unk_20E2B0-.Map
0000F670 0000                       	dc.w	unk_20E30B-.Map
0000F672 0000                       	dc.w	unk_20E384-.Map
0000F674 0000                       	dc.w	unk_20E3FD-.Map
0000F676 0000                       	dc.w	unk_20E248-.Map
0000F678 00                         unk_20E248:	dc.b	  0
0000F679 04                         unk_20E249:	dc.b	  4
0000F67A 10                         	dc.b	$10
0000F67B 09                         	dc.b	  9
0000F67C 00                         	dc.b	  0
0000F67D 09                         	dc.b	  9
0000F67E E8                         	dc.b	$E8 ; è
0000F67F 10                         	dc.b	$10
0000F680 09                         	dc.b	  9
0000F681 08                         	dc.b	  8
0000F682 09                         	dc.b	  9
0000F683 00                         	dc.b	  0
0000F684 10                         	dc.b	$10
0000F685 09                         	dc.b	  9
0000F686 00                         	dc.b	  0
0000F687 09                         	dc.b	  9
0000F688 D8                         	dc.b	$D8 ; Ø
0000F689 10                         	dc.b	$10
0000F68A 09                         	dc.b	  9
0000F68B 08                         	dc.b	  8
0000F68C 09                         	dc.b	  9
0000F68D 10                         	dc.b	$10
0000F68E 04                         unk_20E25E:	dc.b	  4
0000F68F 10                         	dc.b	$10
0000F690 09                         	dc.b	  9
0000F691 00                         	dc.b	  0
0000F692 11                         	dc.b	$11
0000F693 E8                         	dc.b	$E8 ; è
0000F694 10                         	dc.b	$10
0000F695 09                         	dc.b	  9
0000F696 08                         	dc.b	  8
0000F697 11                         	dc.b	$11
0000F698 00                         	dc.b	  0
0000F699 10                         	dc.b	$10
0000F69A 09                         	dc.b	  9
0000F69B 00                         	dc.b	  0
0000F69C 11                         	dc.b	$11
0000F69D D8                         	dc.b	$D8 ; Ø
0000F69E 10                         	dc.b	$10
0000F69F 09                         	dc.b	  9
0000F6A0 08                         	dc.b	  8
0000F6A1 11                         	dc.b	$11
0000F6A2 10                         	dc.b	$10
0000F6A3 0C                         unk_20E273:	dc.b	 $C
0000F6A4 E0                         	dc.b	$E0 ; à
0000F6A5 0A                         	dc.b	 $A
0000F6A6 00                         	dc.b	  0
0000F6A7 00                         	dc.b	  0
0000F6A8 E8                         	dc.b	$E8 ; è
0000F6A9 E0                         	dc.b	$E0 ; à
0000F6AA 0A                         	dc.b	 $A
0000F6AB 08                         	dc.b	  8
0000F6AC 00                         	dc.b	  0
0000F6AD 00                         	dc.b	  0
0000F6AE 08                         	dc.b	  8
0000F6AF 0A                         	dc.b	 $A
0000F6B0 10                         	dc.b	$10
0000F6B1 00                         	dc.b	  0
0000F6B2 E8                         	dc.b	$E8 ; è
0000F6B3 08                         	dc.b	  8
0000F6B4 0A                         	dc.b	 $A
0000F6B5 18                         	dc.b	$18
0000F6B6 00                         	dc.b	  0
0000F6B7 00                         	dc.b	  0
0000F6B8 E0                         	dc.b	$E0 ; à
0000F6B9 0A                         	dc.b	 $A
0000F6BA 00                         	dc.b	  0
0000F6BB 00                         	dc.b	  0
0000F6BC D8                         	dc.b	$D8 ; Ø
0000F6BD E0                         	dc.b	$E0 ; à
0000F6BE 0A                         	dc.b	 $A
0000F6BF 08                         	dc.b	  8
0000F6C0 00                         	dc.b	  0
0000F6C1 F0                         	dc.b	$F0 ; ð
0000F6C2 08                         	dc.b	  8
0000F6C3 0A                         	dc.b	 $A
0000F6C4 10                         	dc.b	$10
0000F6C5 00                         	dc.b	  0
0000F6C6 D8                         	dc.b	$D8 ; Ø
0000F6C7 08                         	dc.b	  8
0000F6C8 0A                         	dc.b	 $A
0000F6C9 18                         	dc.b	$18
0000F6CA 00                         	dc.b	  0
0000F6CB F0                         	dc.b	$F0 ; ð
0000F6CC E0                         	dc.b	$E0 ; à
0000F6CD 0A                         	dc.b	 $A
0000F6CE 00                         	dc.b	  0
0000F6CF 00                         	dc.b	  0
0000F6D0 F8                         	dc.b	$F8 ; ø
0000F6D1 E0                         	dc.b	$E0 ; à
0000F6D2 0A                         	dc.b	 $A
0000F6D3 08                         	dc.b	  8
0000F6D4 00                         	dc.b	  0
0000F6D5 10                         	dc.b	$10
0000F6D6 08                         	dc.b	  8
0000F6D7 0A                         	dc.b	 $A
0000F6D8 10                         	dc.b	$10
0000F6D9 00                         	dc.b	  0
0000F6DA F8                         	dc.b	$F8 ; ø
0000F6DB 08                         	dc.b	  8
0000F6DC 0A                         	dc.b	 $A
0000F6DD 18                         	dc.b	$18
0000F6DE 00                         	dc.b	  0
0000F6DF 10                         	dc.b	$10
0000F6E0 12                         unk_20E2B0:	dc.b	$12
0000F6E1 E0                         	dc.b	$E0 ; à
0000F6E2 0A                         	dc.b	 $A
0000F6E3 00                         	dc.b	  0
0000F6E4 00                         	dc.b	  0
0000F6E5 E8                         	dc.b	$E8 ; è
0000F6E6 E0                         	dc.b	$E0 ; à
0000F6E7 0A                         	dc.b	 $A
0000F6E8 08                         	dc.b	  8
0000F6E9 00                         	dc.b	  0
0000F6EA 00                         	dc.b	  0
0000F6EB F8                         	dc.b	$F8 ; ø
0000F6EC 01                         	dc.b	  1
0000F6ED 00                         	dc.b	  0
0000F6EE 0D                         	dc.b	 $D
0000F6EF FA                         	dc.b	$FA ; ú
0000F6F0 F8                         	dc.b	$F8 ; ø
0000F6F1 01                         	dc.b	  1
0000F6F2 18                         	dc.b	$18
0000F6F3 0F                         	dc.b	 $F
0000F6F4 FE                         	dc.b	$FE ; þ
0000F6F5 08                         	dc.b	  8
0000F6F6 0A                         	dc.b	 $A
0000F6F7 10                         	dc.b	$10
0000F6F8 00                         	dc.b	  0
0000F6F9 E8                         	dc.b	$E8 ; è
0000F6FA 08                         	dc.b	  8
0000F6FB 0A                         	dc.b	 $A
0000F6FC 18                         	dc.b	$18
0000F6FD 00                         	dc.b	  0
0000F6FE 00                         	dc.b	  0
0000F6FF E0                         	dc.b	$E0 ; à
0000F700 0A                         	dc.b	 $A
0000F701 00                         	dc.b	  0
0000F702 00                         	dc.b	  0
0000F703 D8                         	dc.b	$D8 ; Ø
0000F704 E0                         	dc.b	$E0 ; à
0000F705 0A                         	dc.b	 $A
0000F706 08                         	dc.b	  8
0000F707 00                         	dc.b	  0
0000F708 F0                         	dc.b	$F0 ; ð
0000F709 F8                         	dc.b	$F8 ; ø
0000F70A 01                         	dc.b	  1
0000F70B 00                         	dc.b	  0
0000F70C 0D                         	dc.b	 $D
0000F70D EA                         	dc.b	$EA ; ê
0000F70E F8                         	dc.b	$F8 ; ø
0000F70F 01                         	dc.b	  1
0000F710 18                         	dc.b	$18
0000F711 0F                         	dc.b	 $F
0000F712 EE                         	dc.b	$EE ; î
0000F713 08                         	dc.b	  8
0000F714 0A                         	dc.b	 $A
0000F715 10                         	dc.b	$10
0000F716 00                         	dc.b	  0
0000F717 D8                         	dc.b	$D8 ; Ø
0000F718 08                         	dc.b	  8
0000F719 0A                         	dc.b	 $A
0000F71A 18                         	dc.b	$18
0000F71B 00                         	dc.b	  0
0000F71C F0                         	dc.b	$F0 ; ð
0000F71D E0                         	dc.b	$E0 ; à
0000F71E 0A                         	dc.b	 $A
0000F71F 00                         	dc.b	  0
0000F720 00                         	dc.b	  0
0000F721 F8                         	dc.b	$F8 ; ø
0000F722 E0                         	dc.b	$E0 ; à
0000F723 0A                         	dc.b	 $A
0000F724 08                         	dc.b	  8
0000F725 00                         	dc.b	  0
0000F726 10                         	dc.b	$10
0000F727 F8                         	dc.b	$F8 ; ø
0000F728 01                         	dc.b	  1
0000F729 00                         	dc.b	  0
0000F72A 0D                         	dc.b	 $D
0000F72B 0A                         	dc.b	 $A
0000F72C F8                         	dc.b	$F8 ; ø
0000F72D 01                         	dc.b	  1
0000F72E 18                         	dc.b	$18
0000F72F 0F                         	dc.b	 $F
0000F730 0E                         	dc.b	 $E
0000F731 08                         	dc.b	  8
0000F732 0A                         	dc.b	 $A
0000F733 10                         	dc.b	$10
0000F734 00                         	dc.b	  0
0000F735 F8                         	dc.b	$F8 ; ø
0000F736 08                         	dc.b	  8
0000F737 0A                         	dc.b	 $A
0000F738 18                         	dc.b	$18
0000F739 00                         	dc.b	  0
0000F73A 10                         	dc.b	$10
0000F73B 18                         unk_20E30B:	dc.b	$18
0000F73C E0                         	dc.b	$E0 ; à
0000F73D 04                         	dc.b	  4
0000F73E 00                         	dc.b	  0
0000F73F 09                         	dc.b	  9
0000F740 F8                         	dc.b	$F8 ; ø
0000F741 E0                         	dc.b	$E0 ; à
0000F742 0A                         	dc.b	 $A
0000F743 00                         	dc.b	  0
0000F744 00                         	dc.b	  0
0000F745 E8                         	dc.b	$E8 ; è
0000F746 E0                         	dc.b	$E0 ; à
0000F747 0A                         	dc.b	 $A
0000F748 08                         	dc.b	  8
0000F749 00                         	dc.b	  0
0000F74A 00                         	dc.b	  0
0000F74B F8                         	dc.b	$F8 ; ø
0000F74C 01                         	dc.b	  1
0000F74D 00                         	dc.b	  0
0000F74E 0F                         	dc.b	 $F
0000F74F FA                         	dc.b	$FA ; ú
0000F750 F8                         	dc.b	$F8 ; ø
0000F751 01                         	dc.b	  1
0000F752 18                         	dc.b	$18
0000F753 0D                         	dc.b	 $D
0000F754 FE                         	dc.b	$FE ; þ
0000F755 18                         	dc.b	$18
0000F756 04                         	dc.b	  4
0000F757 10                         	dc.b	$10
0000F758 09                         	dc.b	  9
0000F759 F8                         	dc.b	$F8 ; ø
0000F75A 08                         	dc.b	  8
0000F75B 0A                         	dc.b	 $A
0000F75C 10                         	dc.b	$10
0000F75D 00                         	dc.b	  0
0000F75E E8                         	dc.b	$E8 ; è
0000F75F 08                         	dc.b	  8
0000F760 0A                         	dc.b	 $A
0000F761 18                         	dc.b	$18
0000F762 00                         	dc.b	  0
0000F763 00                         	dc.b	  0
0000F764 E0                         	dc.b	$E0 ; à
0000F765 04                         	dc.b	  4
0000F766 00                         	dc.b	  0
0000F767 09                         	dc.b	  9
0000F768 E8                         	dc.b	$E8 ; è
0000F769 E0                         	dc.b	$E0 ; à
0000F76A 0A                         	dc.b	 $A
0000F76B 00                         	dc.b	  0
0000F76C 00                         	dc.b	  0
0000F76D D8                         	dc.b	$D8 ; Ø
0000F76E E0                         	dc.b	$E0 ; à
0000F76F 0A                         	dc.b	 $A
0000F770 08                         	dc.b	  8
0000F771 00                         	dc.b	  0
0000F772 F0                         	dc.b	$F0 ; ð
0000F773 F8                         	dc.b	$F8 ; ø
0000F774 01                         	dc.b	  1
0000F775 00                         	dc.b	  0
0000F776 0F                         	dc.b	 $F
0000F777 EA                         	dc.b	$EA ; ê
0000F778 F8                         	dc.b	$F8 ; ø
0000F779 01                         	dc.b	  1
0000F77A 18                         	dc.b	$18
0000F77B 0D                         	dc.b	 $D
0000F77C EE                         	dc.b	$EE ; î
0000F77D 18                         	dc.b	$18
0000F77E 04                         	dc.b	  4
0000F77F 10                         	dc.b	$10
0000F780 09                         	dc.b	  9
0000F781 E8                         	dc.b	$E8 ; è
0000F782 08                         	dc.b	  8
0000F783 0A                         	dc.b	 $A
0000F784 10                         	dc.b	$10
0000F785 00                         	dc.b	  0
0000F786 D8                         	dc.b	$D8 ; Ø
0000F787 08                         	dc.b	  8
0000F788 0A                         	dc.b	 $A
0000F789 18                         	dc.b	$18
0000F78A 00                         	dc.b	  0
0000F78B F0                         	dc.b	$F0 ; ð
0000F78C E0                         	dc.b	$E0 ; à
0000F78D 04                         	dc.b	  4
0000F78E 00                         	dc.b	  0
0000F78F 09                         	dc.b	  9
0000F790 08                         	dc.b	  8
0000F791 E0                         	dc.b	$E0 ; à
0000F792 0A                         	dc.b	 $A
0000F793 00                         	dc.b	  0
0000F794 00                         	dc.b	  0
0000F795 F8                         	dc.b	$F8 ; ø
0000F796 E0                         	dc.b	$E0 ; à
0000F797 0A                         	dc.b	 $A
0000F798 08                         	dc.b	  8
0000F799 00                         	dc.b	  0
0000F79A 10                         	dc.b	$10
0000F79B F8                         	dc.b	$F8 ; ø
0000F79C 01                         	dc.b	  1
0000F79D 00                         	dc.b	  0
0000F79E 0F                         	dc.b	 $F
0000F79F 0A                         	dc.b	 $A
0000F7A0 F8                         	dc.b	$F8 ; ø
0000F7A1 01                         	dc.b	  1
0000F7A2 18                         	dc.b	$18
0000F7A3 0D                         	dc.b	 $D
0000F7A4 0E                         	dc.b	 $E
0000F7A5 18                         	dc.b	$18
0000F7A6 04                         	dc.b	  4
0000F7A7 10                         	dc.b	$10
0000F7A8 09                         	dc.b	  9
0000F7A9 08                         	dc.b	  8
0000F7AA 08                         	dc.b	  8
0000F7AB 0A                         	dc.b	 $A
0000F7AC 10                         	dc.b	$10
0000F7AD 00                         	dc.b	  0
0000F7AE F8                         	dc.b	$F8 ; ø
0000F7AF 08                         	dc.b	  8
0000F7B0 0A                         	dc.b	 $A
0000F7B1 18                         	dc.b	$18
0000F7B2 00                         	dc.b	  0
0000F7B3 10                         	dc.b	$10
0000F7B4 18                         unk_20E384:	dc.b	$18
0000F7B5 E0                         	dc.b	$E0 ; à
0000F7B6 04                         	dc.b	  4
0000F7B7 00                         	dc.b	  0
0000F7B8 0B                         	dc.b	 $B
0000F7B9 F8                         	dc.b	$F8 ; ø
0000F7BA E0                         	dc.b	$E0 ; à
0000F7BB 0A                         	dc.b	 $A
0000F7BC 00                         	dc.b	  0
0000F7BD 00                         	dc.b	  0
0000F7BE E8                         	dc.b	$E8 ; è
0000F7BF E0                         	dc.b	$E0 ; à
0000F7C0 0A                         	dc.b	 $A
0000F7C1 08                         	dc.b	  8
0000F7C2 00                         	dc.b	  0
0000F7C3 00                         	dc.b	  0
0000F7C4 F8                         	dc.b	$F8 ; ø
0000F7C5 01                         	dc.b	  1
0000F7C6 18                         	dc.b	$18
0000F7C7 0F                         	dc.b	 $F
0000F7C8 FA                         	dc.b	$FA ; ú
0000F7C9 F8                         	dc.b	$F8 ; ø
0000F7CA 01                         	dc.b	  1
0000F7CB 00                         	dc.b	  0
0000F7CC 0D                         	dc.b	 $D
0000F7CD FE                         	dc.b	$FE ; þ
0000F7CE 18                         	dc.b	$18
0000F7CF 04                         	dc.b	  4
0000F7D0 10                         	dc.b	$10
0000F7D1 0B                         	dc.b	 $B
0000F7D2 F8                         	dc.b	$F8 ; ø
0000F7D3 08                         	dc.b	  8
0000F7D4 0A                         	dc.b	 $A
0000F7D5 10                         	dc.b	$10
0000F7D6 00                         	dc.b	  0
0000F7D7 E8                         	dc.b	$E8 ; è
0000F7D8 08                         	dc.b	  8
0000F7D9 0A                         	dc.b	 $A
0000F7DA 18                         	dc.b	$18
0000F7DB 00                         	dc.b	  0
0000F7DC 00                         	dc.b	  0
0000F7DD E0                         	dc.b	$E0 ; à
0000F7DE 04                         	dc.b	  4
0000F7DF 00                         	dc.b	  0
0000F7E0 0B                         	dc.b	 $B
0000F7E1 E8                         	dc.b	$E8 ; è
0000F7E2 E0                         	dc.b	$E0 ; à
0000F7E3 0A                         	dc.b	 $A
0000F7E4 00                         	dc.b	  0
0000F7E5 00                         	dc.b	  0
0000F7E6 D8                         	dc.b	$D8 ; Ø
0000F7E7 E0                         	dc.b	$E0 ; à
0000F7E8 0A                         	dc.b	 $A
0000F7E9 08                         	dc.b	  8
0000F7EA 00                         	dc.b	  0
0000F7EB F0                         	dc.b	$F0 ; ð
0000F7EC F8                         	dc.b	$F8 ; ø
0000F7ED 01                         	dc.b	  1
0000F7EE 18                         	dc.b	$18
0000F7EF 0F                         	dc.b	 $F
0000F7F0 EA                         	dc.b	$EA ; ê
0000F7F1 F8                         	dc.b	$F8 ; ø
0000F7F2 01                         	dc.b	  1
0000F7F3 00                         	dc.b	  0
0000F7F4 0D                         	dc.b	 $D
0000F7F5 EE                         	dc.b	$EE ; î
0000F7F6 18                         	dc.b	$18
0000F7F7 04                         	dc.b	  4
0000F7F8 10                         	dc.b	$10
0000F7F9 0B                         	dc.b	 $B
0000F7FA E8                         	dc.b	$E8 ; è
0000F7FB 08                         	dc.b	  8
0000F7FC 0A                         	dc.b	 $A
0000F7FD 10                         	dc.b	$10
0000F7FE 00                         	dc.b	  0
0000F7FF D8                         	dc.b	$D8 ; Ø
0000F800 08                         	dc.b	  8
0000F801 0A                         	dc.b	 $A
0000F802 18                         	dc.b	$18
0000F803 00                         	dc.b	  0
0000F804 F0                         	dc.b	$F0 ; ð
0000F805 E0                         	dc.b	$E0 ; à
0000F806 04                         	dc.b	  4
0000F807 00                         	dc.b	  0
0000F808 0B                         	dc.b	 $B
0000F809 08                         	dc.b	  8
0000F80A E0                         	dc.b	$E0 ; à
0000F80B 0A                         	dc.b	 $A
0000F80C 00                         	dc.b	  0
0000F80D 00                         	dc.b	  0
0000F80E F8                         	dc.b	$F8 ; ø
0000F80F E0                         	dc.b	$E0 ; à
0000F810 0A                         	dc.b	 $A
0000F811 08                         	dc.b	  8
0000F812 00                         	dc.b	  0
0000F813 10                         	dc.b	$10
0000F814 F8                         	dc.b	$F8 ; ø
0000F815 01                         	dc.b	  1
0000F816 18                         	dc.b	$18
0000F817 0F                         	dc.b	 $F
0000F818 0A                         	dc.b	 $A
0000F819 F8                         	dc.b	$F8 ; ø
0000F81A 01                         	dc.b	  1
0000F81B 00                         	dc.b	  0
0000F81C 0D                         	dc.b	 $D
0000F81D 0E                         	dc.b	 $E
0000F81E 18                         	dc.b	$18
0000F81F 04                         	dc.b	  4
0000F820 10                         	dc.b	$10
0000F821 0B                         	dc.b	 $B
0000F822 08                         	dc.b	  8
0000F823 08                         	dc.b	  8
0000F824 0A                         	dc.b	 $A
0000F825 10                         	dc.b	$10
0000F826 00                         	dc.b	  0
0000F827 F8                         	dc.b	$F8 ; ø
0000F828 08                         	dc.b	  8
0000F829 0A                         	dc.b	 $A
0000F82A 18                         	dc.b	$18
0000F82B 00                         	dc.b	  0
0000F82C 10                         	dc.b	$10
0000F82D 18                         unk_20E3FD:	dc.b	$18
0000F82E E0                         	dc.b	$E0 ; à
0000F82F 04                         	dc.b	  4
0000F830 00                         	dc.b	  0
0000F831 09                         	dc.b	  9
0000F832 F8                         	dc.b	$F8 ; ø
0000F833 E0                         	dc.b	$E0 ; à
0000F834 0A                         	dc.b	 $A
0000F835 00                         	dc.b	  0
0000F836 00                         	dc.b	  0
0000F837 E8                         	dc.b	$E8 ; è
0000F838 E0                         	dc.b	$E0 ; à
0000F839 0A                         	dc.b	 $A
0000F83A 08                         	dc.b	  8
0000F83B 00                         	dc.b	  0
0000F83C 00                         	dc.b	  0
0000F83D F8                         	dc.b	$F8 ; ø
0000F83E 01                         	dc.b	  1
0000F83F 18                         	dc.b	$18
0000F840 0D                         	dc.b	 $D
0000F841 FA                         	dc.b	$FA ; ú
0000F842 F8                         	dc.b	$F8 ; ø
0000F843 01                         	dc.b	  1
0000F844 00                         	dc.b	  0
0000F845 0F                         	dc.b	 $F
0000F846 FE                         	dc.b	$FE ; þ
0000F847 18                         	dc.b	$18
0000F848 04                         	dc.b	  4
0000F849 10                         	dc.b	$10
0000F84A 09                         	dc.b	  9
0000F84B F8                         	dc.b	$F8 ; ø
0000F84C 08                         	dc.b	  8
0000F84D 0A                         	dc.b	 $A
0000F84E 10                         	dc.b	$10
0000F84F 00                         	dc.b	  0
0000F850 E8                         	dc.b	$E8 ; è
0000F851 08                         	dc.b	  8
0000F852 0A                         	dc.b	 $A
0000F853 18                         	dc.b	$18
0000F854 00                         	dc.b	  0
0000F855 00                         	dc.b	  0
0000F856 E0                         	dc.b	$E0 ; à
0000F857 04                         	dc.b	  4
0000F858 00                         	dc.b	  0
0000F859 09                         	dc.b	  9
0000F85A E8                         	dc.b	$E8 ; è
0000F85B E0                         	dc.b	$E0 ; à
0000F85C 0A                         	dc.b	 $A
0000F85D 00                         	dc.b	  0
0000F85E 00                         	dc.b	  0
0000F85F D8                         	dc.b	$D8 ; Ø
0000F860 E0                         	dc.b	$E0 ; à
0000F861 0A                         	dc.b	 $A
0000F862 08                         	dc.b	  8
0000F863 00                         	dc.b	  0
0000F864 F0                         	dc.b	$F0 ; ð
0000F865 F8                         	dc.b	$F8 ; ø
0000F866 01                         	dc.b	  1
0000F867 18                         	dc.b	$18
0000F868 0D                         	dc.b	 $D
0000F869 EA                         	dc.b	$EA ; ê
0000F86A F8                         	dc.b	$F8 ; ø
0000F86B 01                         	dc.b	  1
0000F86C 00                         	dc.b	  0
0000F86D 0F                         	dc.b	 $F
0000F86E EE                         	dc.b	$EE ; î
0000F86F 18                         	dc.b	$18
0000F870 04                         	dc.b	  4
0000F871 10                         	dc.b	$10
0000F872 09                         	dc.b	  9
0000F873 E8                         	dc.b	$E8 ; è
0000F874 08                         	dc.b	  8
0000F875 0A                         	dc.b	 $A
0000F876 10                         	dc.b	$10
0000F877 00                         	dc.b	  0
0000F878 D8                         	dc.b	$D8 ; Ø
0000F879 08                         	dc.b	  8
0000F87A 0A                         	dc.b	 $A
0000F87B 18                         	dc.b	$18
0000F87C 00                         	dc.b	  0
0000F87D F0                         	dc.b	$F0 ; ð
0000F87E E0                         	dc.b	$E0 ; à
0000F87F 04                         	dc.b	  4
0000F880 00                         	dc.b	  0
0000F881 09                         	dc.b	  9
0000F882 08                         	dc.b	  8
0000F883 E0                         	dc.b	$E0 ; à
0000F884 0A                         	dc.b	 $A
0000F885 00                         	dc.b	  0
0000F886 00                         	dc.b	  0
0000F887 F8                         	dc.b	$F8 ; ø
0000F888 E0                         	dc.b	$E0 ; à
0000F889 0A                         	dc.b	 $A
0000F88A 08                         	dc.b	  8
0000F88B 00                         	dc.b	  0
0000F88C 10                         	dc.b	$10
0000F88D F8                         	dc.b	$F8 ; ø
0000F88E 01                         	dc.b	  1
0000F88F 18                         	dc.b	$18
0000F890 0D                         	dc.b	 $D
0000F891 0A                         	dc.b	 $A
0000F892 F8                         	dc.b	$F8 ; ø
0000F893 01                         	dc.b	  1
0000F894 00                         	dc.b	  0
0000F895 0F                         	dc.b	 $F
0000F896 0E                         	dc.b	 $E
0000F897 18                         	dc.b	$18
0000F898 04                         	dc.b	  4
0000F899 10                         	dc.b	$10
0000F89A 09                         	dc.b	  9
0000F89B 08                         	dc.b	  8
0000F89C 08                         	dc.b	  8
0000F89D 0A                         	dc.b	 $A
0000F89E 10                         	dc.b	$10
0000F89F 00                         	dc.b	  0
0000F8A0 F8                         	dc.b	$F8 ; ø
0000F8A1 08                         	dc.b	  8
0000F8A2 0A                         	dc.b	 $A
0000F8A3 18                         	dc.b	$18
0000F8A4 00                         	dc.b	  0
0000F8A5 10                         	dc.b	$10
0000F8A5 10                         	dc.b	$10
0000F8A6                            	even
0000F8A6 0100 00                    ObjRobotGenerator_ExplosionLocs:dc.b	1,	0, 0
0000F8A9 02D8 EC                    	dc.b	2,	$D8, $EC
0000F8AC 031C 0A                    	dc.b	3,	$1C, $A
0000F8AF 0412 EE                    	dc.b	4,	$12, $EE
0000F8B2 05EE F6                    	dc.b	5,	$EE, $F6
0000F8B5 0608 F8                    	dc.b	6,	8, $F8
0000F8B8 08EE 0E                    	dc.b	8,	$EE, $E
0000F8BB 0AF6 0A                    	dc.b	$A, $F6, $A
0000F8BE 0C1E F6                    	dc.b	$C, $1E, $F6
0000F8C1 0F00 EE                    	dc.b	$F, 0, $EE
0000F8C4 1214 F6                    	dc.b	$12, $14, $F6
0000F8C7 14F6 12                    	dc.b	$14, $F6, $12
0000F8CA 1608 17                    	dc.b	$16, 8, $17
0000F8CD 190D F6                    	dc.b	$19, $D, $F6
0000F8D0 1A17 EA                    	dc.b	$1A, $17, $EA
0000F8D3 1CFD E7                    	dc.b	$1C, $FD, $E7
0000F8D6 1E0A 14                    	dc.b	$1E, $A, $14
0000F8D9 20F6 02                    	dc.b	$20, $F6, 2
0000F8DC 221E F8                    	dc.b	$22, $1E, $F8
0000F8DF 230D F6                    	dc.b	$23, $D, $F6
0000F8E2 28F6 0A                    	dc.b	$28, $F6, $A
0000F8E5 FF                         	dc.b	$FF
0000F8E6 043F 0409 0000 0000        ObjRobotGenerator_BaseTileList:dc.w	$43F, $409,	0, 0
0000F8EE 0454 0400 0000 0000        	dc.w	$454, $400, 0, 0
0000F8F6 0000 0000 0000             	dc.w	0,	0, 0
0000F8FC                            ; -------------------------------------------------------------------------------
0000F8FC                            
0000F8FC                            ObjProjector:
0000F8FC                            
0000F8FC                            ; FUNCTION CHUNK AT 0020E510 SIZE 00000006 BYTES
0000F8FC                            ; FUNCTION CHUNK AT 0020E6E8 SIZE 0000007A BYTES
0000F8FC                            
0000F8FC 4A28 0028                  	tst.b	oSubtype(a0)
0000F900 6600 0000                  	bne.w	ObjMetalSonicHologram
0000F904 7000                       	moveq	#0,d0
0000F906 1028 0024                  	move.b	oRoutine(a0),d0
0000F90A 303B 0000                  	move.w	ObjProjector_Index(pc,d0.w),d0
0000F90E 4EBB 0000                  	jsr	ObjProjector_Index(pc,d0.w)
0000F912 4EB8 4012                  	jsr	DrawObject
0000F916 0C28 0002 0024             	cmpi.b	#2,oRoutine(a0)
0000F91C 6E00                       	bgt.s	.End
0000F91E 4EB8 7D1A                  	jsr	CheckObjDespawnTime
0000F922 4A10                       	tst.b	(a0)
0000F924 6600                       	bne.s	.End
0000F926 303C 0004                  	move.w	#4,d0
0000F92A 4EF8 28CE                  	jmp	LoadPLC
0000F92E                            
0000F92E                            ; -------------------------------------------------------------------------------
0000F92E                            
0000F92E                            .End:
0000F92E 4E75                       	rts
0000F930                            ; End of function ObjProjector
0000F930                            
0000F930                            ; -------------------------------------------------------------------------------
0000F930 0000                       ObjProjector_Index:dc.w	ObjProjector_Init-ObjProjector_Index
0000F932 0000                       	dc.w	ObjProjector_Main-ObjProjector_Index
0000F934 0000                       	dc.w	ObjProjector_StartExploding-ObjProjector_Index
0000F936 0000                       	dc.w	ObjProjector_Exploding-ObjProjector_Index
0000F938 0000                       	dc.w	ObjProjector_Destroyed-ObjProjector_Index
0000F93A                            
0000F93A                            ; -------------------------------------------------------------------------------
0000F93A                            ; START	OF FUNCTION CHUNK FOR ObjProjector
0000F93A                            
0000F93A                            ObjProjector_Destroy:
0000F93A 4EF8 40BE                  	jmp	DeleteObject
0000F93E                            ; END OF FUNCTION CHUNK	FOR ObjProjector
0000F93E                            ; -------------------------------------------------------------------------------
0000F93E                            
0000F93E                            ObjProjector_Init:
0000F93E 4A39 00FF 156D             	tst.b	(v_destroyed_projector).l
0000F944 66F4                       	bne.s	ObjProjector_Destroy
0000F946 303C 0005                  	move.w	#5,d0
0000F94A 4EB8 28CE                  	jsr	LoadPLC
0000F94E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000F952 0028 0004 0001             	ori.b	#4,oRender(a0)
0000F958 117C 0004 0018             	move.b	#4,oPriority(a0)
0000F95E 117C 000C 0017             	move.b	#$C,oXRadius(a0)
0000F964 117C 000C 0019             	move.b	#$C,oWidth(a0)
0000F96A 117C 000C 0016             	move.b	#$C,oYRadius(a0)
0000F970 117C 00FB 0020             	move.b	#$FB,oColType(a0)
0000F976 303C 0403                  	move.w	#$403,d0
0000F97A 4A39 00FF 1507             	tst.b	(v_act).l
0000F980 6700                       	beq.s	.SetBaseTile
0000F982 303C 03AF                  	move.w	#$3AF,d0
0000F986                            
0000F986                            .SetBaseTile:
0000F986 3140 0002                  	move.w	d0,oTile(a0)
0000F98A 217C 0000 0000 0004        	move.l	#MapSpr_Projector,oMap(a0)
0000F992 217C 0000 0000 002C        	move.l	#ObjProjector_ExplosionLocs,oVar2C(a0)
0000F99A 4EB8 7CE4                  	jsr	FindObjSlot
0000F99E 6600 FF9A                  	bne.w	ObjProjector_Destroy
0000F9A2 1290                       	move.b	oID(a0),oID(a1)
0000F9A4 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000F9AA 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000F9B0 0469 0015 0008             	subi.w	#$15,oX(a1)
0000F9B6 5F69 000C                  	subq.w	#7,oY(a1)
0000F9BA 137C 00FF 0028             	move.b	#$FF,oSubtype(a1)
0000F9C0 3348 003E                  	move.w	a0,oVar3E(a1)
0000F9C4 4EB8 7CE4                  	jsr	FindObjSlot
0000F9C8 6600 FF70                  	bne.w	ObjProjector_Destroy
0000F9CC 1290                       	move.b	oID(a0),oID(a1)
0000F9CE 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000F9D4 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000F9DA 0469 0058 0008             	subi.w	#$58,oX(a1)
0000F9E0 5969 000C                  	subq.w	#4,oY(a1)
0000F9E4 137C 0001 0028             	move.b	#1,oSubtype(a1)
0000F9EA 3348 003E                  	move.w	a0,oVar3E(a1)
0000F9EE 4EB8 7CE4                  	jsr	FindObjSlot
0000F9F2 6600 FF46                  	bne.w	ObjProjector_Destroy
0000F9F6 12BC 0024                  	move.b	#$24,oID(a1)
0000F9FA 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000FA00 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000FA06 0469 0058 0008             	subi.w	#$58,oX(a1)
0000FA0C 0669 FFE8 000C             	addi.w	#-$18,oY(a1)
0000FA12 137C 0080 0028             	move.b	#$80,oSubtype(a1)
0000FA18 3348 003E                  	move.w	a0,oVar3E(a1)
0000FA1C 4EB8 7CE4                  	jsr	FindObjSlot
0000FA20 6600 FF18                  	bne.w	ObjProjector_Destroy
0000FA24 12BC 0024                  	move.b	#$24,oID(a1)
0000FA28 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000FA2E 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000FA34 0469 0064 0008             	subi.w	#$64,oX(a1)
0000FA3A 5869 000C                  	addq.w	#4,oY(a1)
0000FA3E 137C 0081 0028             	move.b	#$81,oSubtype(a1)
0000FA44 3348 003E                  	move.w	a0,oVar3E(a1)
0000FA48                            
0000FA48                            ObjProjector_Main:
0000FA48 4A28 0021                  	tst.b	oColStatus(a0)
0000FA4C 6700                       	beq.s	.Solid
0000FA4E 4268 0020                  	clr.w	oColType(a0)
0000FA52 5428 0024                  	addq.b	#2,oRoutine(a0)
0000FA56                            
0000FA56                            .Solid:
0000FA56 43F8 D000                  	lea	(v_player).w,a1
0000FA5A 4EFA AB6C                  	jmp	SolidObject
0000FA5E                            ; End of function ObjProjector_Init
0000FA5E                            
0000FA5E                            ; -------------------------------------------------------------------------------
0000FA5E                            
0000FA5E                            ObjProjector_StartExploding:
0000FA5E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000FA62 117C 0001 001A             	move.b	#1,oMapFrame(a0)
0000FA68 50E8 003F                  	st	oVar3F(a0)
0000FA6C 303C 0004                  	move.w	#4,d0
0000FA70 4EB8 28CE                  	jsr	LoadPLC
0000FA74 43F8 D000                  	lea	(v_player).w,a1
0000FA78 4EBA AB4E                  	jsr	SolidObject
0000FA7C 6700                       	beq.s	ObjProjector_Exploding
0000FA7E 4EBA A9FE                  	jsr	ClearObjRide
0000FA82                            
0000FA82                            ObjProjector_Exploding:
0000FA82 2C68 002C                  	movea.l	oVar2C(a0),a6
0000FA86 101E                       	move.b	(a6)+,d0
0000FA88 6B00                       	bmi.s	.Finished
0000FA8A 5228 002A                  	addq.b	#1,oVar2A(a0)
0000FA8E B028 002A                  	cmp.b	oVar2A(a0),d0
0000FA92 6600                       	bne.s	.End
0000FA94 1A1E                       	move.b	(a6)+,d5
0000FA96 1C1E                       	move.b	(a6)+,d6
0000FA98 214E 002C                  	move.l	a6,oVar2C(a0)
0000FA9C 4885                       	ext.w	d5
0000FA9E 4886                       	ext.w	d6
0000FAA0 4EB8 7CE4                  	jsr	FindObjSlot
0000FAA4 6600                       	bne.s	.End
0000FAA6 12BC 0018                  	move.b	#$18,oID(a1)
0000FAAA 137C 0001 0025             	move.b	#1,oRoutine2(a1)
0000FAB0 3368 0008 0008             	move.w	oX(a0),oX(a1)
0000FAB6 3368 000C 000C             	move.w	oY(a0),oY(a1)
0000FABC DB69 0008                  	add.w	d5,oX(a1)
0000FAC0 DD69 000C                  	add.w	d6,oY(a1)
0000FAC4 303C 00C4                  	move.w	#$C4,d0
0000FAC8 4EB8 2708                  	jsr	PlayFMSound
0000FACC                            
0000FACC                            .End:
0000FACC 4E75                       	rts
0000FACE                            
0000FACE                            ; -------------------------------------------------------------------------------
0000FACE                            
0000FACE                            .Finished:
0000FACE 5428 0024                  	addq.b	#2,oRoutine(a0)
0000FAD2 317C 003C 002A             	move.w	#60,oVar2A(a0)
0000FAD8 4E75                       	rts
0000FADA                            ; End of function ObjProjector_StartExploding
0000FADA                            
0000FADA                            ; -------------------------------------------------------------------------------
0000FADA                            
0000FADA                            ObjProjector_Destroyed:
0000FADA 5368 002A                  	subq.w	#1,$2A(a0)
0000FADE 6600                       	bne.s	locret_20E6E6
0000FAE0 50F9 00FF 156D             	st	(v_destroyed_projector).l
0000FAE6 6000 FE52                  	bra.w	ObjProjector_Destroy
0000FAEA                            
0000FAEA                            ; -------------------------------------------------------------------------------
0000FAEA                            
0000FAEA                            locret_20E6E6:
0000FAEA 4E75                       	rts
0000FAEC                            ; End of function ObjProjector_Destroyed
0000FAEC                            
0000FAEC                            ; -------------------------------------------------------------------------------
0000FAEC                            ; START	OF FUNCTION CHUNK FOR ObjProjector
0000FAEC                            
0000FAEC                            ObjMetalSonicHologram:
0000FAEC 3268 003E                  	movea.w	oVar3E(a0),a1
0000FAF0 0C11 002E                  	cmpi.b	#$2E,oID(a1)
0000FAF4 6600 FE44                  	bne.w	ObjProjector_Destroy
0000FAF8 4A29 003F                  	tst.b	oVar3F(a1)
0000FAFC 6600 FE3C                  	bne.w	ObjProjector_Destroy
0000FB00 4A28 0024                  	tst.b	oRoutine(a0)
0000FB04 6600                       	bne.s	.Animate
0000FB06 5428 0024                  	addq.b	#2,oRoutine(a0)
0000FB0A 0028 0004 0001             	ori.b	#4,oRender(a0)
0000FB10 117C 0004 0018             	move.b	#4,oPriority(a0)
0000FB16 303C 0403                  	move.w	#$403,d0
0000FB1A 4A39 00FF 1507             	tst.b	(v_act).l
0000FB20 6700                       	beq.s	.SetBaseTile
0000FB22 303C 03AF                  	move.w	#$3AF,d0
0000FB26                            
0000FB26                            .SetBaseTile:
0000FB26 3140 0002                  	move.w	d0,oTile(a0)
0000FB2A 217C 0000 0000 0004        	move.l	#MapSpr_Projector,oMap(a0)
0000FB32 7008                       	moveq	#8,d0
0000FB34 7204                       	moveq	#4,d1
0000FB36 7400                       	moveq	#0,d2
0000FB38 4A28 0028                  	tst.b	oSubtype(a0)
0000FB3C 6B00                       	bmi.s	.GotSize
0000FB3E 7014                       	moveq	#$14,d0
0000FB40 7218                       	moveq	#$18,d1
0000FB42 7401                       	moveq	#1,d2
0000FB44                            
0000FB44                            .GotSize:
0000FB44 1140 0017                  	move.b	d0,oXRadius(a0)
0000FB48 1140 0019                  	move.b	d0,oWidth(a0)
0000FB4C 1141 0016                  	move.b	d1,oYRadius(a0)
0000FB50 1142 001C                  	move.b	d2,oAnim(a0)
0000FB54                            
0000FB54                            .Animate:
0000FB54 43FA 0000                  	lea	Ani_MetalSonicHologram(pc),a1
0000FB58 4EB8 61F4                  	jsr	AnimateObject
0000FB5C 4EF8 4012                  	jmp	DrawObject
0000FB60                            ; END OF FUNCTION CHUNK	FOR ObjProjector
0000FB60                            
0000FB60                            ; -------------------------------------------------------------------------------
0000FB60                            Ani_MetalSonicHologram:
0000FB60                            	include	"level/objects/projector/anim.asm"
0000FB60                            .Anim:
0000FB60 0000                       	dc.w	byte_20E766-.Anim
0000FB62 0000                       	dc.w	byte_20E76C-.Anim
0000FB64 0002 0103 01FF             byte_20E766:	dc.b	0,	2, 1, 3, 1, $FF
0000FB6A 0004 0401 0404 0104 0401+  byte_20E76C:	dc.b	0,	4, 4, 1, 4, 4, 1, 4, 4,	1, 4, 4, 1, 4, 4, 1
0000FB7A 0104 0401 0104 0401 0104+  	dc.b	1,	4, 4, 1, 1, 4, 4, 1, 1,	4, 4, 1, 1, 5, 5, 1
0000FB8A 0505 0105 0501 0505 0105+  	dc.b	5,	5, 1, 5, 5, 1, 5, 5, 1,	5, 5, 1, 1, 5, 5, 1
0000FB9A 0105 0501 0105 0501 01FF   	dc.b	1,	5, 5, 1, 1, 5, 5, 1, 1,	$FF
0000FB9A 0105 0501 0105 0501 01FF   	dc.b	1,	5, 5, 1, 1, 5, 5, 1, 1,	$FF
0000FBA4                            	even
0000FBA4                            MapSpr_Projector:
0000FBA4                            	include	"level/objects/projector/map.asm"
0000FBA4                            .Map:
0000FBA4 0000                       	dc.w	unk_20E7B2-.Map
0000FBA6 0000                       	dc.w	unk_20E7B8-.Map
0000FBA8 0000                       	dc.w	unk_20E7B9-.Map
0000FBAA 0000                       	dc.w	unk_20E7BF-.Map
0000FBAC 0000                       	dc.w	unk_20E7C5-.Map
0000FBAE 0000                       	dc.w	unk_20E7D5-.Map
0000FBB0 01                         unk_20E7B2:	dc.b	  1
0000FBB1 F4                         	dc.b	$F4 ; ô
0000FBB2 0A                         	dc.b	 $A
0000FBB3 00                         	dc.b	  0
0000FBB4 28                         	dc.b	$28 ; (
0000FBB5 F4                         	dc.b	$F4 ; ô
0000FBB6 00                         unk_20E7B8:	dc.b	  0
0000FBB7 01                         unk_20E7B9:	dc.b	  1
0000FBB8 FC                         	dc.b	$FC ; ü
0000FBB9 04                         	dc.b	  4
0000FBBA 00                         	dc.b	  0
0000FBBB 31                         	dc.b	$31 ; 1
0000FBBC F8                         	dc.b	$F8 ; ø
0000FBBD 01                         unk_20E7BF:	dc.b	  1
0000FBBE FC                         	dc.b	$FC ; ü
0000FBBF 04                         	dc.b	  4
0000FBC0 10                         	dc.b	$10
0000FBC1 31                         	dc.b	$31 ; 1
0000FBC2 F8                         	dc.b	$F8 ; ø
0000FBC3 03                         unk_20E7C5:	dc.b	  3
0000FBC4 E8                         	dc.b	$E8 ; è
0000FBC5 0A                         	dc.b	 $A
0000FBC6 08                         	dc.b	  8
0000FBC7 00                         	dc.b	  0
0000FBC8 FC                         	dc.b	$FC ; ü
0000FBC9 F8                         	dc.b	$F8 ; ø
0000FBCA 05                         	dc.b	  5
0000FBCB 08                         	dc.b	  8
0000FBCC 09                         	dc.b	  9
0000FBCD EC                         	dc.b	$EC ; ì
0000FBCE 00                         	dc.b	  0
0000FBCF 05                         	dc.b	  5
0000FBD0 08                         	dc.b	  8
0000FBD1 0D                         	dc.b	 $D
0000FBD2 FC                         	dc.b	$FC ; ü
0000FBD3 04                         unk_20E7D5:	dc.b	  4
0000FBD4 E8                         	dc.b	$E8 ; è
0000FBD5 0F                         	dc.b	 $F
0000FBD6 08                         	dc.b	  8
0000FBD7 11                         	dc.b	$11
0000FBD8 F4                         	dc.b	$F4 ; ô
0000FBD9 E8                         	dc.b	$E8 ; è
0000FBDA 00                         	dc.b	  0
0000FBDB 08                         	dc.b	  8
0000FBDC 21                         	dc.b	$21 ; !
0000FBDD EC                         	dc.b	$EC ; ì
0000FBDE 00                         	dc.b	  0
0000FBDF 01                         	dc.b	  1
0000FBE0 08                         	dc.b	  8
0000FBE1 22                         	dc.b	$22 ; "
0000FBE2 EC                         	dc.b	$EC ; ì
0000FBE3 08                         	dc.b	  8
0000FBE4 0C                         	dc.b	 $C
0000FBE5 08                         	dc.b	  8
0000FBE6 24                         	dc.b	$24 ; $
0000FBE7 F4                         	dc.b	$F4 ; ô
0000FBE7 F4                         	dc.b	$F4 ; ô
0000FBE8                            	even
0000FBE8 0100 00                    ObjProjector_ExplosionLocs:dc.b	1, 0, 0
0000FBEB 05EE F6                    	dc.b	5,	$EE, $F6
0000FBEE 0AF6 0A                    	dc.b	$A, $F6, $A
0000FBF1 0F00 EE                    	dc.b	$F, 0, $EE
0000FBF4 14F6 12                    	dc.b	$14, $F6, $12
0000FBF7 1608 17                    	dc.b	$16, 8, $17
0000FBFA 190D F6                    	dc.b	$19, $D, $F6
0000FBFD 1CFD E7                    	dc.b	$1C, $FD, $E7
0000FC00 1E0A 14                    	dc.b	$1E, $A, $14
0000FC03 20F6 02                    	dc.b	$20, $F6, 2
0000FC06 230D F6                    	dc.b	$23, $D, $F6
0000FC09 28F6 0A                    	dc.b	$28, $F6, $A
0000FC0C FF                         	dc.b	$FF
0000FC0D 00                         	dc.b	0
0000FC0E                            ; -------------------------------------------------------------------------------
0000FC0E                            
0000FC0E                            DestroyOnGoodFuture:
0000FC0E 4A39 00FF 156A             	tst.b	(v_good_future).l
0000FC14 6700                       	beq.s	.End
0000FC16 0C39 0001 00FF 152E        	cmpi.b	#1,(v_time_zone).l
0000FC1E 6600                       	bne.s	.Destroy
0000FC20 4A28 0028                  	tst.b	oSubtype(a0)
0000FC24 6700                       	beq.s	.End
0000FC26                            
0000FC26                            .Destroy:
0000FC26 3A28 0008                  	move.w	oX(a0),d5
0000FC2A 3C28 000C                  	move.w	oY(a0),d6
0000FC2E 4EB8 40BE                  	jsr	DeleteObject
0000FC32 3145 0008                  	move.w	d5,oX(a0)
0000FC36 3146 000C                  	move.w	d6,oY(a0)
0000FC3A 10BC 0018                  	move.b	#$18,oID(a0)
0000FC3E 4A28 0001                  	tst.b	oRender(a0)
0000FC42 6A00                       	bpl.s	.NoReturn
0000FC44 4EF9 0000 0000                 jmp     .NoReturn
0000FC4A 303C 00C4                  	move.w	#$C4,d0
0000FC4E 4EB8 2708                  	jsr	PlayFMSound
0000FC52                            
0000FC52                            .NoReturn:
0000FC52 588F                       	addq.l	#4,sp
0000FC54                            
0000FC54                            .End:
0000FC54 4E75                       	rts
0000FC56                            ; End of function DestroyOnGoodFuture
0000FC56                            
0000FC56                            ; -------------------------------------------------------------------------------
0000FC56                            
0000FC56                            CheckAnimalPrescence:
0000FC56 4A28 0028                  	tst.b	oSubtype(a0)
0000FC5A 6B00                       	bmi.s	.End
0000FC5C 0C39 0002 00FF 152E        	cmpi.b	#2,(v_time_zone).l
0000FC64 6C00                       	bge.s	.ChkGoodFuture
0000FC66 4A39 00FF 156D             	tst.b	(v_destroyed_projector).l
0000FC6C 6600                       	bne.s	.End
0000FC6E 588F                       	addq.l	#4,sp
0000FC70 4EF8 7D1A                  	jmp	CheckObjDespawnTime
0000FC74                            
0000FC74                            ; -------------------------------------------------------------------------------
0000FC74                            
0000FC74                            .ChkGoodFuture:
0000FC74 4A39 00FF 156A             	tst.b	(v_good_future).l
0000FC7A 6600                       	bne.s	.End
0000FC7C 588F                       	addq.l	#4,sp
0000FC7E 4EF8 40BE                  	jmp	DeleteObject
0000FC82                            
0000FC82                            ; -------------------------------------------------------------------------------
0000FC82                            
0000FC82                            .End:
0000FC82 4E75                       	rts
0000FC84                            ; End of function CheckAnimalPrescence
0000FC84                            
0000FC84                            ; -------------------------------------------------------------------------------
0000FC84                            
0000FC84                            ObjAmyRose:
0000FC84 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l
0000FC8A 6600                       	bne.s	.ResetPal
0000FC8C 7000                       	moveq	#0,d0
0000FC8E 1028 0024                  	move.b	oRoutine(a0),d0
0000FC92 303B 0000                  	move.w	ObjAmyRose_Index(pc,d0.w),d0
0000FC96 4EBB 0000                  	jsr	ObjAmyRose_Index(pc,d0.w)
0000FC9A 6100 0000                  	bsr.w	ObjAmyRose_MakeHearts
0000FC9E 4EB8 4012                  	jsr	DrawObject
0000FCA2 4EB8 7D1A                  	jsr	CheckObjDespawnTime
0000FCA6 0C10 002F                  	cmpi.b	#$2F,0(a0)
0000FCAA 6700                       	beq.s	.End
0000FCAC                            
0000FCAC                            .ResetPal:
0000FCAC 47F9 0000 0984             	lea	(Pal_PPZPresentEnd).l,a3
0000FCB2 6100 0000                  	bsr.w	ObjAmyRose_ResetPal
0000FCB6                            
0000FCB6                            .End:
0000FCB6 4E75                       	rts
0000FCB8                            ; End of function ObjAmyRose
0000FCB8                            
0000FCB8                            ; -------------------------------------------------------------------------------
0000FCB8 0000                       ObjAmyRose_Index:dc.w	ObjAmyRose_Init-ObjAmyRose_Index
0000FCBA 0000                       	dc.w	ObjAmyRose_Main-ObjAmyRose_Index
0000FCBC 0000                       	dc.w	ObjAmyRose_HoldSonic-ObjAmyRose_Index
0000FCBE 0000                       	dc.w	ObjAmyRose_FollowSonic-ObjAmyRose_Index
0000FCC0 0000                       	dc.w	ObjAmyRose_WaitLand-ObjAmyRose_Index
0000FCC2                            ; -------------------------------------------------------------------------------
0000FCC2                            
0000FCC2                            ObjAmyRose_Init:
0000FCC2                            
0000FCC2                            ; FUNCTION CHUNK AT 0020EDA0 SIZE 00000062 BYTES
0000FCC2                            
0000FCC2 0028 0004 0001             	ori.b	#4,oRender(a0)
0000FCC8 317C 2370 0002             	move.w	#$2370,oTile(a0)
0000FCCE 117C 0001 0018             	move.b	#1,oPriority(a0)
0000FCD4 217C 0000 0000 0004        	move.l	#MapSpr_AmyRose,oMap(a0)
0000FCDC 117C 000C 0019             	move.b	#$C,oWidth(a0)
0000FCE2 117C 0010 0016             	move.b	#$10,oYRadius(a0)
0000FCE8 3168 0008 0036             	move.w	oX(a0),oVar36(a0)
0000FCEE 6100 0000                  	bsr.w	ObjAmyRose_LoadPal
0000FCF2                            
0000FCF2                            .PlaceLoop:
0000FCF2 4EB8 6F3C                  	jsr	CheckFloorEdge
0000FCF6 4A41                       	tst.w	d1
0000FCF8 6700                       	beq.s	.FoundFloor
0000FCFA D368 000C                  	add.w	d1,$C(a0)
0000FCFE 6000 FFF2                  	bra.w	.PlaceLoop
0000FD02                            
0000FD02                            ; -------------------------------------------------------------------------------
0000FD02                            
0000FD02                            .FoundFloor:
0000FD02 43F8 D000                  	lea	(v_player).w,a1
0000FD06 6100 0000                  	bsr.w	ObjAmyRose_SetFacing
0000FD0A 3029 0008                  	move.w	oX(a1),d0
0000FD0E 9068 0008                  	sub.w	oX(a0),d0
0000FD12 6400                       	bcc.s	.ChkRange
0000FD14 4440                       	neg.w	d0
0000FD16                            
0000FD16                            .ChkRange:
0000FD16 0C40 0070                  	cmpi.w	#$70,d0
0000FD1A 6400                       	bcc.s	.Animate
0000FD1C 5428 0024                  	addq.b	#2,oRoutine(a0)
0000FD20                            
0000FD20                            .Animate:
0000FD20 117C 0005 001C             	move.b	#5,oAnim(a0)
0000FD26 43F9 0000 0000             	lea	(Ani_AmyRose).l,a1
0000FD2C 6000 0000                  	bra.w	AnimateObjSimple
0000FD30                            ; End of function ObjAmyRose_Init
0000FD30                            
0000FD30                            ; -------------------------------------------------------------------------------
0000FD30                            
0000FD30                            ObjAmyRose_Main:
0000FD30 43F8 D000                  	lea	(v_player).w,a1
0000FD34 6100 0000                  	bsr.w	ObjAmyRose_SetFacing
0000FD38 0828 0006 003E             	btst	#6,oVar3E(a0)
0000FD3E 6600 0000                  	bne.w	.WallBump
0000FD42 0828 0002 003E             	btst	#2,oVar3E(a0)
0000FD48 6600 0000                  	bne.w	.GetDX2
0000FD4C 4A69 0010                  	tst.w	oXVel(a1)
0000FD50 6600                       	bne.s	.GetAccel
0000FD52 3029 0008                  	move.w	oX(a1),d0
0000FD56 9068 0008                  	sub.w	oX(a0),d0
0000FD5A 6400                       	bcc.s	.GetDX
0000FD5C 4440                       	neg.w	d0
0000FD5E                            
0000FD5E                            .GetDX:
0000FD5E 0C40 000A                  	cmpi.w	#$A,d0
0000FD62 6400                       	bcc.s	.GetAccel
0000FD64                            
0000FD64                            .InRange:
0000FD64 08E8 0002 003E             	bset	#2,oVar3E(a0)
0000FD6A 4268 0010                  	clr.w	oXVel(a0)
0000FD6E 6000 0000                  	bra.w	.ChkFloor2
0000FD72                            
0000FD72                            ; -------------------------------------------------------------------------------
0000FD72                            
0000FD72                            .GetDX2:
0000FD72 3029 0008                  	move.w	oX(a1),d0
0000FD76 9068 0008                  	sub.w	oX(a0),d0
0000FD7A 6400                       	bcc.s	.AbsDX
0000FD7C 4440                       	neg.w	d0
0000FD7E                            
0000FD7E                            .AbsDX:
0000FD7E 0C40 0020                  	cmpi.w	#$20,d0
0000FD82 65E0                       	bcs.s	.InRange
0000FD84 08A8 0002 003E             	bclr	#2,oVar3E(a0)
0000FD8A                            
0000FD8A                            .GetAccel:
0000FD8A 303C FFF0                  	move.w	#-$10,d0
0000FD8E 0828 0000 0022             	btst	#0,oStatus(a0)
0000FD94 6600                       	bne.s	.NoFlip
0000FD96 4440                       	neg.w	d0
0000FD98                            
0000FD98                            .NoFlip:
0000FD98 D068 0010                  	add.w	oXVel(a0),d0
0000FD9C 3200                       	move.w	d0,d1
0000FD9E 343C 0200                  	move.w	#$200,d2
0000FDA2 4A41                       	tst.w	d1
0000FDA4 6A00                       	bpl.s	.ChkCap
0000FDA6 4441                       	neg.w	d1
0000FDA8 4442                       	neg.w	d2
0000FDAA                            
0000FDAA                            .ChkCap:
0000FDAA 0C41 0200                  	cmpi.w	#$200,d1
0000FDAE 6500                       	bcs.s	.SetVX
0000FDB0 3002                       	move.w	d2,d0
0000FDB2                            
0000FDB2                            .SetVX:
0000FDB2 3140 0010                  	move.w	d0,oXVel(a0)
0000FDB6 4A68 0010                  	tst.w	oXVel(a0)
0000FDBA 6A00                       	bpl.s	.NoFlip2
0000FDBC 3028 0036                  	move.w	oVar36(a0),d0
0000FDC0 0440 0130                  	subi.w	#$130,d0
0000FDC4 B068 0008                  	cmp.w	oX(a0),d0
0000FDC8 6500                       	bcs.s	.ChkFloor
0000FDCA 6000 0000                  	bra.w	.WallBump
0000FDCE                            
0000FDCE                            ; -------------------------------------------------------------------------------
0000FDCE                            
0000FDCE                            .NoFlip2:
0000FDCE 3028 0036                  	move.w	oVar36(a0),d0
0000FDD2 0640 0090                  	addi.w	#$90,d0
0000FDD6 B068 0008                  	cmp.w	oX(a0),d0
0000FDDA 6400                       	bcc.s	.ChkFloor
0000FDDC 6000 0000                  	bra.w	.WallBump
0000FDE0                            
0000FDE0                            ; -------------------------------------------------------------------------------
0000FDE0                            
0000FDE0                            .ChkFloor:
0000FDE0 4EB8 6F3C                  	jsr	CheckFloorEdge
0000FDE4 0C41 0007                  	cmpi.w	#7,d1
0000FDE8 6A00                       	bpl.s	.WallBump
0000FDEA 0C41 FFF9                  	cmpi.w	#-7,d1
0000FDEE 6B00                       	bmi.s	.WallBump
0000FDF0 D368 000C                  	add.w	d1,oY(a0)
0000FDF4 6100 0000                  	bsr.w	ObjectMoveX
0000FDF8 6100 0000                  	bsr.w	ObjAmyRose_CheckGrabSonic
0000FDFC 117C 0002 001C             	move.b	#2,oAnim(a0)
0000FE02 43F9 0000 0000             	lea	(Ani_AmyRose).l,a1
0000FE08 6000 0000                  	bra.w	AnimateObjSimple
0000FE0C                            
0000FE0C                            ; -------------------------------------------------------------------------------
0000FE0C                            
0000FE0C                            .WallBump:
0000FE0C 4268 0010                  	clr.w	oXVel(a0)
0000FE10 0828 0007 003E             	btst	#7,oVar3E(a0)
0000FE16 6600                       	bne.s	.ChkIfJump
0000FE18                            
0000FE18                            .ChkFloor2:
0000FE18 4EB8 6F3C                  	jsr	CheckFloorEdge
0000FE1C D368 000C                  	add.w	d1,oY(a0)
0000FE20 117C 0001 001C             	move.b	#1,oAnim(a0)
0000FE26 43F9 0000 0000             	lea	(Ani_AmyRose).l,a1
0000FE2C 6000 0000                  	bra.w	AnimateObjSimple
0000FE30                            
0000FE30                            ; -------------------------------------------------------------------------------
0000FE30                            
0000FE30                            .ChkIfJump:
0000FE30 0828 0006 003E             	btst	#6,oVar3E(a0)
0000FE36 6600                       	bne.s	.MoveFall
0000FE38 0C28 0003 003F             	cmpi.b	#3,oVar3F(a0)
0000FE3E 6500                       	bcs.s	.Jump
0000FE40 5828 003A                  	addq.b	#4,oVar3A(a0)
0000FE44 6400                       	bcc.s	.Animate
0000FE46 4228 003F                  	clr.b	oVar3F(a0)
0000FE4A                            
0000FE4A                            .Animate:
0000FE4A 117C 0004 001C             	move.b	#4,oAnim(a0)
0000FE50 43F9 0000 0000             	lea	(Ani_AmyRose).l,a1
0000FE56 6000 0000                  	bra.w	AnimateObjSimple
0000FE5A                            
0000FE5A                            ; -------------------------------------------------------------------------------
0000FE5A                            
0000FE5A                            .Jump:
0000FE5A 317C FD00 0012             	move.w	#-$300,oYVel(a0)
0000FE60 08E8 0006 003E             	bset	#6,oVar3E(a0)
0000FE66                            
0000FE66                            .MoveFall:
0000FE66 6100 0000                  	bsr.w	ObjectMoveY
0000FE6A 0668 0040 0012             	addi.w	#$40,oYVel(a0)
0000FE70 117C 0006 001A             	move.b	#6,oMapFrame(a0)
0000FE76 4A68 0012                  	tst.w	oYVel(a0)
0000FE7A 6B00                       	bmi.s	.GoingUp
0000FE7C 117C 0004 001A             	move.b	#4,oMapFrame(a0)
0000FE82                            
0000FE82                            .GoingUp:
0000FE82 4EB8 6F3C                  	jsr	CheckFloorEdge
0000FE86 4A41                       	tst.w	d1
0000FE88 6A00                       	bpl.s	.End
0000FE8A 4268 0012                  	clr.w	oYVel(a0)
0000FE8E 08A8 0006 003E             	bclr	#6,oVar3E(a0)
0000FE94 5228 003F                  	addq.b	#1,oVar3F(a0)
0000FE98                            
0000FE98                            .End:
0000FE98 4E75                       	rts
0000FE9A                            ; End of function ObjAmyRose_Main
0000FE9A                            
0000FE9A                            ; -------------------------------------------------------------------------------
0000FE9A                            
0000FE9A                            ObjAmyRose_HoldSonic:
0000FE9A 43F8 D000                  	lea	(v_player).w,a1
0000FE9E 08E9 0000 002C             	bset	#0,oPlayerCtrl(a1)
0000FEA4 137C 0005 001C             	move.b	#5,oAnim(a1)
0000FEAA 6100 0000                  	bsr.w	ObjAmyRose_SlowSonic
0000FEAE 6100 0000                  	bsr.w	ObjAmyRose_SetFacing
0000FEB2 700C                       	moveq	#$C,d0
0000FEB4 0829 0000 0022             	btst	#0,oStatus(a1)
0000FEBA 6600                       	bne.s	.NoFlip
0000FEBC 4440                       	neg.w	d0
0000FEBE                            
0000FEBE                            .NoFlip:
0000FEBE D069 0008                  	add.w	oX(a1),d0
0000FEC2 3140 0008                  	move.w	d0,oX(a0)
0000FEC6 3169 000C 000C             	move.w	oY(a1),oY(a0)
0000FECC 31F8 F604 F602             	move.w	(v_ctrl1_held).w,(v_player_held).w
0000FED2 6100 0000                  	bsr.w	Player_Jump
0000FED6 0829 0000 002C             	btst	#0,oPlayerCtrl(a1)
0000FEDC 6700                       	beq.s	.PlayerJumped
0000FEDE 0CB9 0009 3200 00FF 1514   	cmpi.l	#$93200,(v_time).l
0000FEE8 6400                       	bcc.s	.ForceJump
0000FEEA 117C 0003 001C             	move.b	#3,oAnim(a0)
0000FEF0 43F9 0000 0000             	lea	(Ani_AmyRose).l,a1
0000FEF6 6000 0000                  	bra.w	AnimateObjSimple
0000FEFA                            
0000FEFA                            ; -------------------------------------------------------------------------------
0000FEFA                            
0000FEFA                            .PlayerJumped:
0000FEFA 08A8 0000 003E             	bclr	#0,oVar3E(a0)
0000FF00 117C 0006 0024             	move.b	#6,oRoutine(a0)
0000FF06 4E75                       	rts
0000FF08                            
0000FF08                            ; -------------------------------------------------------------------------------
0000FF08                            
0000FF08                            .ForceJump:
0000FF08 6100 0000                  	bsr.w	Player_Jump2
0000FF0C 08A8 0000 003E             	bclr	#0,oVar3E(a0)
0000FF12 117C 0002 0024             	move.b	#2,oRoutine(a0)
0000FF18 4E75                       	rts
0000FF1A                            ; End of function ObjAmyRose_HoldSonic
0000FF1A                            
0000FF1A                            ; -------------------------------------------------------------------------------
0000FF1A                            
0000FF1A                            ObjAmyRose_FollowSonic:
0000FF1A 117C 0006 001A             	move.b	#6,oMapFrame(a0)
0000FF20 303C 0080                  	move.w	#$80,d0
0000FF24 0828 0000 0022             	btst	#0,oStatus(a0)
0000FF2A 6600                       	bne.s	.NoFlip
0000FF2C 4440                       	neg.w	d0
0000FF2E                            
0000FF2E                            .NoFlip:
0000FF2E 3140 0010                  	move.w	d0,oXVel(a0)
0000FF32 3028 0008                  	move.w	oX(a0),d0
0000FF36 9068 0036                  	sub.w	oVar36(a0),d0
0000FF3A 6400                       	bcc.s	.ChkRange
0000FF3C 4440                       	neg.w	d0
0000FF3E                            
0000FF3E                            .ChkRange:
0000FF3E 0C40 0080                  	cmpi.w	#$80,d0
0000FF42 6500                       	bcs.s	.Jump
0000FF44 4268 0010                  	clr.w	oXVel(a0)
0000FF48                            
0000FF48                            .Jump:
0000FF48 317C FD00 0012             	move.w	#-$300,oYVel(a0)
0000FF4E 5428 0024                  	addq.b	#2,oRoutine(a0)
0000FF52                            ; End of function ObjAmyRose_FollowSonic
0000FF52                            
0000FF52                            ; -------------------------------------------------------------------------------
0000FF52                            
0000FF52                            ObjAmyRose_WaitLand:
0000FF52 6100 0000                  	bsr.w	ObjectMove
0000FF56 0668 0040 0012             	addi.w	#$40,oYVel(a0)
0000FF5C 4A68 0012                  	tst.w	oYVel(a0)
0000FF60 6B00                       	bmi.s	.ChkFloor
0000FF62 117C 0007 001A             	move.b	#7,oMapFrame(a0)
0000FF68                            
0000FF68                            .ChkFloor:
0000FF68 4EB8 6F3C                  	jsr	CheckFloorEdge
0000FF6C 4A41                       	tst.w	d1
0000FF6E 6A00                       	bpl.s	.End
0000FF70 4268 0010                  	clr.w	oXVel(a0)
0000FF74 4268 0012                  	clr.w	oYVel(a0)
0000FF78 0628 0010 003A             	addi.b	#$10,oVar3A(a0)
0000FF7E 6400                       	bcc.s	.End
0000FF80 117C 0002 0024             	move.b	#2,oRoutine(a0)
0000FF86                            
0000FF86                            .End:
0000FF86 4E75                       	rts
0000FF88                            ; End of function ObjAmyRose_WaitLand
0000FF88                            
0000FF88                            ; -------------------------------------------------------------------------------
0000FF88                            
0000FF88                            ObjAmyRose_SlowSonic:
0000FF88 4A68 0010                  	tst.w	oXVel(a0)
0000FF8C 6700                       	beq.s	.End
0000FF8E 48E7 00C0                  	movem.l	a0-a1,-(sp)
0000FF92 C149                       	exg	a0,a1
0000FF94 6100 0000                  	bsr.w	ObjectMoveX
0000FF98 4EB8 6F3C                  	jsr	CheckFloorEdge
0000FF9C D368 000C                  	add.w	d1,oY(a0)
0000FFA0 4CDF 0300                  	movem.l	(sp)+,a0-a1
0000FFA4 4A69 0010                  	tst.w	oXVel(a1)
0000FFA8 6B00                       	bmi.s	.Decel
0000FFAA 0469 0040 0010             	subi.w	#$40,oXVel(a1)
0000FFB0 6A00                       	bpl.s	.End
0000FFB2 6000                       	bra.s	.StopSonic
0000FFB4                            
0000FFB4                            ; -------------------------------------------------------------------------------
0000FFB4                            
0000FFB4                            .Decel:
0000FFB4 0669 0040 0010             	addi.w	#$40,oXVel(a1)
0000FFBA 6B00                       	bmi.s	.End
0000FFBC                            
0000FFBC                            .StopSonic:
0000FFBC 4269 0010                  	clr.w	oXVel(a1)
0000FFC0                            
0000FFC0                            .End:
0000FFC0 4E75                       	rts
0000FFC2                            ; End of function ObjAmyRose_SlowSonic
0000FFC2                            
0000FFC2                            ; -------------------------------------------------------------------------------
0000FFC2                            
0000FFC2                            Player_Jump:
0000FFC2 1038 F603                  	move.b	(v_player_pressed).w,d0
0000FFC6 0200 0070                  	andi.b	#$70,d0
0000FFCA 6700 0000                  	beq.w	Player_Jump_Done
0000FFCE                            ; End of function Player_Jump
0000FFCE                            
0000FFCE                            ; -------------------------------------------------------------------------------
0000FFCE                            
0000FFCE                            Player_Jump2:
0000FFCE 4229 002C                  	clr.b	oPlayerCtrl(a1)
0000FFD2 343C 0680                  	move.w	#$680,d2
0000FFD6 7000                       	moveq	#0,d0
0000FFD8 1029 0026                  	move.b	oAngle(a1),d0
0000FFDC 0400 0040                  	subi.b	#$40,d0
0000FFE0 4EB8 0AAC                  	jsr	CalcSine
0000FFE4 C3C2                       	muls.w	d2,d1
0000FFE6 E081                       	asr.l	#8,d1
0000FFE8 D369 0010                  	add.w	d1,oXVel(a1)
0000FFEC C1C2                       	muls.w	d2,d0
0000FFEE E080                       	asr.l	#8,d0
0000FFF0 D169 0012                  	add.w	d0,oYVel(a1)
0000FFF4 08E9 0001 0022             	bset	#1,oStatus(a1)
0000FFFA 08A9 0005 0022             	bclr	#5,oStatus(a1)
00010000 137C 0001 003C             	move.b	#1,oPlayerJump(a1)
00010006 4229 0038                  	clr.b	oPlayerStick(a1)
0001000A 137C 0013 0016             	move.b	#$13,oYRadius(a1)
00010010 137C 0009 0017             	move.b	#9,oXRadius(a1)
00010016 0829 0002 0022             	btst	#2,oStatus(a1)
0001001C 6600                       	bne.s	Player_Jump_RollJmp
0001001E 137C 000E 0016             	move.b	#$E,oYRadius(a1)
00010024 137C 0007 0017             	move.b	#7,oXRadius(a1)
0001002A 5A69 000C                  	addq.w	#5,oY(a1)
0001002E 08E9 0002 0022             	bset	#2,oStatus(a1)
00010034 137C 0002 001C             	move.b	#2,oAnim(a1)
0001003A                            
0001003A                            Player_Jump_Done:
0001003A 4E75                       	rts
0001003C                            
0001003C                            ; -------------------------------------------------------------------------------
0001003C                            
0001003C                            Player_Jump_RollJmp:
0001003C 08E9 0004 0022             	bset	#4,oStatus(a1)
00010042 4E75                       	rts
00010044                            ; End of function Player_Jump2
00010044                            
00010044                            ; -------------------------------------------------------------------------------
00010044                            
00010044                            ObjAmyRose_CheckGrabSonic:
00010044 4A68 0010                  	tst.w	oXVel(a0)
00010048 6A00                       	bpl.s	.GoingRight
0001004A 3028 0036                  	move.w	oVar36(a0),d0
0001004E 0440 0130                  	subi.w	#$130,d0
00010052 B068 0008                  	cmp.w	oX(a0),d0
00010056 6500                       	bcs.s	.ChkRange
00010058 6000 0000                  	bra.w	.End
0001005C                            
0001005C                            ; -------------------------------------------------------------------------------
0001005C                            
0001005C                            .GoingRight:
0001005C 3028 0036                  	move.w	oVar36(a0),d0
00010060 0640 0090                  	addi.w	#$90,d0
00010064 B068 0008                  	cmp.w	oX(a0),d0
00010068 6400                       	bcc.s	.ChkRange
0001006A 6000 0000                  	bra.w	.End
0001006E                            
0001006E                            ; -------------------------------------------------------------------------------
0001006E                            
0001006E                            .ChkRange:
0001006E 0CB9 0009 3200 00FF 1514   	cmpi.l	#$93200,(v_time).l
00010078 6400 0000                  	bcc.w	.End
0001007C 43F8 D000                  	lea	(v_player).w,a1
00010080 4A39 00FF 1906             	tst.b	(v_debug_mode).l
00010086 6600 0000                  	bne.w	.End
0001008A 0829 0000 0022             	btst	#0,oStatus(a1)
00010090 6600                       	bne.s	.GetDX
00010092 3029 0008                  	move.w	oX(a1),d0
00010096 9068 0008                  	sub.w	oX(a0),d0
0001009A 6000                       	bra.s	.GotDX
0001009C                            
0001009C                            ; -------------------------------------------------------------------------------
0001009C                            
0001009C                            .GetDX:
0001009C 3028 0008                  	move.w	oX(a0),d0
000100A0 9069 0008                  	sub.w	oX(a1),d0
000100A4                            
000100A4                            .GotDX:
000100A4 6500 0000                  	bcs.w	.End
000100A8 0C40 000C                  	cmpi.w	#$C,d0
000100AC 6500 0000                  	bcs.w	.End
000100B0 0C40 0018                  	cmpi.w	#$18,d0
000100B4 6400                       	bcc.s	.End
000100B6 7208                       	moveq	#8,d1
000100B8 3029 000C                  	move.w	oY(a1),d0
000100BC 9068 000C                  	sub.w	oY(a0),d0
000100C0 D041                       	add.w	d1,d0
000100C2 6B00                       	bmi.s	.End
000100C4 3401                       	move.w	d1,d2
000100C6 D442                       	add.w	d2,d2
000100C8 B042                       	cmp.w	d2,d0
000100CA 6400                       	bcc.s	.End
000100CC 3029 0010                  	move.w	oXVel(a1),d0
000100D0 6A00                       	bpl.s	.AbsVX
000100D2 4440                       	neg.w	d0
000100D4                            
000100D4                            .AbsVX:
000100D4 0829 0001 0022             	btst	#1,oStatus(a1)
000100DA 6600                       	bne.s	.NoGrab
000100DC 0829 0002 0022             	btst	#2,oStatus(a1)
000100E2 6600                       	bne.s	.NoGrab
000100E4 4A29 0030                  	tst.b	oPlayerHurt(a1)
000100E8 6600                       	bne.s	.NoGrab
000100EA 0C40 0680                  	cmpi.w	#$680,d0
000100EE 6400                       	bcc.s	.NoGrab
000100F0 4A39 00FF 151E             	tst.b	(v_shield).l
000100F6 6600                       	bne.s	.NoGrab
000100F8 4A39 00FF 1521             	tst.b	(v_time_warp_on).l
000100FE 6600                       	bne.s	.NoGrab
00010100 4A39 00FF 151F             	tst.b	(v_invincible).l
00010106 6600                       	bne.s	.NoGrab
00010108 08A9 0002 0022             	bclr	#2,oStatus(a1)
0001010E 0028 0081 003E             	ori.b	#$81,oVar3E(a0)
00010114 4268 0012                  	clr.w	oYVel(a0)
00010118 4268 0010                  	clr.w	oXVel(a0)
0001011C 117C 0007 001A             	move.b	#7,oMapFrame(a0)
00010122 117C 0004 0024             	move.b	#4,oRoutine(a0)
00010128 303C 007C                  	move.w	#$7C,d0
0001012C 4EB8 61B2                  	jsr	SendSubCommand
00010130                            
00010130                            .End:
00010130 4E75                       	rts
00010132                            
00010132                            ; -------------------------------------------------------------------------------
00010132                            
00010132                            .NoGrab:
00010132 117C 0006 0024             	move.b	#6,oRoutine(a0)
00010138 4E75                       	rts
0001013A                            ; End of function ObjAmyRose_CheckGrabSonic
0001013A                            
0001013A                            ; -------------------------------------------------------------------------------
0001013A                            
0001013A                            CheckPlayerRange1:
0001013A 43F8 D000                  	lea	(v_player).w,a1
0001013E 3028 0008                  	move.w	oX(a0),d0
00010142 9069 0008                  	sub.w	oX(a1),d0
00010146 6400                       	bcc.s	.AbsDX
00010148 4440                       	neg.w	d0
0001014A                            
0001014A                            .AbsDX:
0001014A 0C40 0034                  	cmpi.w	#52,d0
0001014E 4E75                       	rts
00010150                            ; End of function CheckPlayerRange1
00010150                            
00010150                            ; -------------------------------------------------------------------------------
00010150                            
00010150                            CheckPlayerRange2:
00010150 43F8 D000                  	lea	(v_player).w,a1
00010154 3028 0008                  	move.w	oX(a0),d0
00010158 9069 0008                  	sub.w	oX(a1),d0
0001015C 6400                       	bcc.s	.AbsDX
0001015E 4440                       	neg.w	d0
00010160                            
00010160                            .AbsDX:
00010160 0C40 007C                  	cmpi.w	#124,d0
00010164 4E75                       	rts
00010166                            ; End of function CheckPlayerRange2
00010166                            
00010166                            ; -------------------------------------------------------------------------------
00010166                            
00010166                            ObjectMove:
00010166 6100                       	bsr.s	ObjectMoveX
00010168                            ; End of function ObjectMove
00010168                            
00010168                            ; -------------------------------------------------------------------------------
00010168                            
00010168                            ObjectMoveY:
00010168 3028 0012                  	move.w	oYVel(a0),d0
0001016C 48C0                       	ext.l	d0
0001016E E180                       	asl.l	#8,d0
00010170 D1A8 000C                  	add.l	d0,oY(a0)
00010174 4E75                       	rts
00010176                            ; End of function ObjectMoveY
00010176                            
00010176                            ; -------------------------------------------------------------------------------
00010176                            
00010176                            ObjectMoveX:
00010176 3028 0010                  	move.w	oXVel(a0),d0
0001017A 48C0                       	ext.l	d0
0001017C E180                       	asl.l	#8,d0
0001017E D1A8 0008                  	add.l	d0,oX(a0)
00010182 4E75                       	rts
00010184                            ; End of function ObjectMoveX
00010184                            
00010184                            ; -------------------------------------------------------------------------------
00010184                            ; START	OF FUNCTION CHUNK FOR ObjAmyRose_Init
00010184                            
00010184                            AnimateObjSimple:
00010184 7000                       	moveq	#0,d0
00010186 1028 001C                  	move.b	oAnim(a0),d0
0001018A B028 001D                  	cmp.b	oPrevAnim(a0),d0
0001018E 6700                       	beq.s	.run
00010190 1140 001D                  	move.b	d0,oPrevAnim(a0)
00010194 4228 001B                  	clr.b	oAnimFrame(a0)
00010198 4228 001E                  	clr.b	oAnimTime(a0)
0001019C                            
0001019C                            .run:
0001019C 5328 001E                  	subq.b	#1,oAnimTime(a0)
000101A0 6A00                       	bpl.s	.End
000101A2 D040                       	add.w	d0,d0
000101A4 D2F1 0000                  	adda.w	(a1,d0.w),a1
000101A8                            
000101A8                            .Next:
000101A8 1028 001B                  	move.b	oAnimFrame(a0),d0
000101AC 45F1 0000                  	lea	(a1,d0.w),a2
000101B0 1012                       	move.b	(a2),d0
000101B2 6A00                       	bpl.s	.SetFrame
000101B4 4228 001B                  	clr.b	oAnimFrame(a0)
000101B8 60EE                       	bra.s	.Next
000101BA                            
000101BA                            ; -------------------------------------------------------------------------------
000101BA                            
000101BA                            .SetFrame:
000101BA 1200                       	move.b	d0,d1
000101BC 0200 001F                  	andi.b	#$1F,d0
000101C0 1140 001A                  	move.b	d0,oMapFrame(a0)
000101C4 1028 0022                  	move.b	oStatus(a0),d0
000101C8 E719                       	rol.b	#3,d1
000101CA B101                       	eor.b	d0,d1
000101CC 0201 0003                  	andi.b	#3,d1
000101D0 0228 00FC 0001             	andi.b	#$FC,oRender(a0)
000101D6 8328 0001                  	or.b	d1,oRender(a0)
000101DA 116A 0001 001E             	move.b	oRender(a2),oAnimTime(a0)
000101E0 5428 001B                  	addq.b	#2,oAnimFrame(a0)
000101E4                            
000101E4                            .End:
000101E4 4E75                       	rts
000101E6                            ; END OF FUNCTION CHUNK	FOR ObjAmyRose_Init
000101E6                            ; -------------------------------------------------------------------------------
000101E6                            
000101E6                            ObjAmyRose_MakeHearts:
000101E6 7006                       	moveq	#6,d0
000101E8 0828 0000 003E             	btst	#0,oVar3E(a0)
000101EE 6700                       	beq.s	.ChkTimer
000101F0 7010                       	moveq	#$10,d0
000101F2                            
000101F2                            .ChkTimer:
000101F2 D128 003B                  	add.b	d0,oVar3B(a0)
000101F6 6400                       	bcc.s	.End
000101F8 4EB8 7CE4                  	jsr	FindObjSlot
000101FC 6600                       	bne.s	.End
000101FE 12BC 0030                  	move.b	#$30,oID(a1)
00010202 7208                       	moveq	#8,d1
00010204 0828 0000 0022             	btst	#0,oStatus(a0)
0001020A 6700                       	beq.s	.NoFlip
0001020C 323C FFF6                  	move.w	#-$A,d1
00010210                            
00010210                            .NoFlip:
00010210 0828 0000 003E             	btst	#0,oVar3E(a0)
00010216 6700                       	beq.s	.SetPos
00010218 4441                       	neg.w	d1
0001021A                            
0001021A                            .SetPos:
0001021A 3028 0008                  	move.w	oX(a0),d0
0001021E D041                       	add.w	d1,d0
00010220 3340 0008                  	move.w	d0,oX(a1)
00010224 3028 000C                  	move.w	oY(a0),d0
00010228 0440 000C                  	subi.w	#$C,d0
0001022C 3340 000C                  	move.w	d0,oY(a1)
00010230                            
00010230                            .End:
00010230 4E75                       	rts
00010232                            ; End of function ObjAmyRose_MakeHearts
00010232                            
00010232                            ; -------------------------------------------------------------------------------
00010232                            
00010232                            ObjAmyRose_SetFacing:
00010232 6100                       	bsr.s	ObjAmyRose_XUnflip
00010234 3028 0008                  	move.w	oX(a0),d0
00010238 9069 0008                  	sub.w	oX(a1),d0
0001023C 6500                       	bcs.s	.End
0001023E 6100                       	bsr.s	ObjAmyRose_XFlip
00010240                            
00010240                            .End:
00010240 4E75                       	rts
00010242                            ; End of function ObjAmyRose_SetFacing
00010242                            
00010242                            ; -------------------------------------------------------------------------------
00010242                            
00010242                            ObjAmyRose_XUnflip:
00010242 08A8 0000 0022             	bclr	#0,oStatus(a0)
00010248 08A8 0000 0001             	bclr	#0,oRender(a0)
0001024E 4E75                       	rts
00010250                            ; End of function ObjAmyRose_XUnflip
00010250                            
00010250                            ; -------------------------------------------------------------------------------
00010250                            
00010250                            ObjAmyRose_XFlip:
00010250 08E8 0000 0022             	bset	#0,oStatus(a0)
00010256 08E8 0000 0001             	bset	#0,oRender(a0)
0001025C 4E75                       	rts
0001025E                            ; End of function ObjAmyRose_XFlip
0001025E                            
0001025E                            ; -------------------------------------------------------------------------------
0001025E                            
0001025E                            ObjAmyRose_LoadPal:
0001025E 47FA 0000                  	lea	Pal_AmyRose(pc),a3
00010262                            ; End of function ObjAmyRose_LoadPal
00010262                            
00010262                            ; -------------------------------------------------------------------------------
00010262                            
00010262                            ObjAmyRose_ResetPal:
00010262 49F8 FB20                  	lea	(v_palette+$20).w,a4
00010266 4CDB 000F                  	movem.l	(a3)+,d0-d3
0001026A 48D4 000F                  	movem.l	d0-d3,(a4)
0001026E 4CDB 000F                  	movem.l	(a3)+,d0-d3
00010272 48EC 000F 0010             	movem.l	d0-d3,$10(a4)
00010278 4E75                       	rts
0001027A                            ; End of function ObjAmyRose_ResetPal
0001027A                            
0001027A                            ; -------------------------------------------------------------------------------
0001027A 0000 0000 0628 084A 0E6E+  Pal_AmyRose:	dc.w	0,	0, $628, $84A, $E6E, $EAE, $EEE, $AAA
0001028A 0888 0444 08AE 006C 00C2+  	dc.w	$888, $444, $8AE, $6C, $C2, $80, $806, $E
0001029A                            ; -------------------------------------------------------------------------------
0001029A                            
0001029A                            ObjAmyHeart:
0001029A 7000                       	moveq	#0,d0
0001029C 1028 0024                  	move.b	oRoutine(a0),d0
000102A0 303B 0000                  	move.w	ObjAmyHeart_Index(pc,d0.w),d0
000102A4 4EBB 0000                  	jsr	ObjAmyHeart_Index(pc,d0.w)
000102A8 4EB8 4012                  	jsr	DrawObject
000102AC 4EF8 7D1A                  	jmp	CheckObjDespawnTime
000102B0                            ; End of function ObjAmyHeart
000102B0                            
000102B0                            ; -------------------------------------------------------------------------------
000102B0 0000                       ObjAmyHeart_Index:dc.w	ObjAmyHeart_Init-ObjAmyHeart_Index
000102B2 0000                       	dc.w	ObjAmyHeart_Main-ObjAmyHeart_Index
000102B4                            ; -------------------------------------------------------------------------------
000102B4                            
000102B4                            ObjAmyHeart_Init:
000102B4 5428 0024                  	addq.b	#2,oRoutine(a0)
000102B8 0028 0004 0001             	ori.b	#4,oRender(a0)
000102BE 317C 0370 0002             	move.w	#$370,oTile(a0)
000102C4 217C 0000 0000 0004        	move.l	#MapSpr_AmyRose,oMap(a0)
000102CC 117C 0008 001A             	move.b	#8,oMapFrame(a0)
000102D2 317C FFA0 0012             	move.w	#-$60,oYVel(a0)
000102D8 117C 0003 0018             	move.b	#3,oPriority(a0)
000102DE                            ; End of function ObjAmyHeart_Init
000102DE                            
000102DE                            ; -------------------------------------------------------------------------------
000102DE                            
000102DE                            ObjAmyHeart_Main:
000102DE 4A28 003C                  	tst.b	oVar3C(a0)
000102E2 6600                       	bne.s	.StopRipple
000102E4 7000                       	moveq	#0,d0
000102E6 1028 003A                  	move.b	oVar3A(a0),d0
000102EA D000                       	add.b	d0,d0
000102EC D028 003A                  	add.b	oVar3A(a0),d0
000102F0 4EB8 0AAC                  	jsr	CalcSine
000102F4 E440                       	asr.w	#2,d0
000102F6 3140 0010                  	move.w	d0,oXVel(a0)
000102FA                            
000102FA                            .StopRipple:
000102FA 6100 FE6A                  	bsr.w	ObjectMove
000102FE 5228 003A                  	addq.b	#1,oVar3A(a0)
00010302 1028 003A                  	move.b	oVar3A(a0),d0
00010306 0C00 0014                  	cmpi.b	#$14,d0
0001030A 6600                       	bne.s	.ChkTimer
0001030C 5228 001A                  	addq.b	#1,oMapFrame(a0)
00010310                            
00010310                            .ChkTimer:
00010310 0C00 006E                  	cmpi.b	#$6E,d0
00010314 6600                       	bne.s	.ChkDel
00010316 5228 001A                  	addq.b	#1,oMapFrame(a0)
0001031A 4268 0012                  	clr.w	oYVel(a0)
0001031E 4268 0010                  	clr.w	oXVel(a0)
00010322 50E8 003C                  	st	oVar3C(a0)
00010326                            
00010326                            .ChkDel:
00010326 0C00 0078                  	cmpi.b	#$78,d0
0001032A 6600                       	bne.s	.End
0001032C 4EF8 40BE                  	jmp	DeleteObject
00010330                            
00010330                            ; -------------------------------------------------------------------------------
00010330                            
00010330                            .End:
00010330 4E75                       	rts
00010332                            ; End of function ObjAmyHeart_Main
00010332                            
00010332                            ; -------------------------------------------------------------------------------
00010332                            
00010332                            ObjGameOver:
00010332 7000                       	moveq	#0,d0
00010334 1028 0024                  	move.b	$24(a0),d0
00010338 303B 0000                  	move.w	ObjGameOver_Index(pc,d0.w),d0
0001033C 4EFB 0000                  	jmp	ObjGameOver_Index(pc,d0.w)
00010340                            ; End of function ObjGameOver
00010340                            
00010340                            ; -------------------------------------------------------------------------------
00010340 0000                       ObjGameOver_Index:dc.w	ObjGameOver_Init-ObjGameOver_Index
00010342 0000                       	dc.w	ObjGameOver_Main-ObjGameOver_Index
00010344                            ; -------------------------------------------------------------------------------
00010344                            
00010344                            ObjGameOver_Init:
00010344 303C 0082                  	move.w	#$82,d0
00010348 4EB8 61B2                  	jsr	SendSubCommand
0001034C 5428 0024                  	addq.b	#2,oRoutine(a0)
00010350 317C 00E0 000A             	move.w	#$E0,oYScr(a0)
00010356 317C 0080 0008             	move.w	#$80,oX(a0)
0001035C 317C 0120 002A             	move.w	#$120,oVar2A(a0)
00010362 317C 8544 0002             	move.w	#$8544,oTile(a0)
00010368 217C 0000 0000 0004        	move.l	#MapSpr_GameOver1,oMap(a0)
00010370 13FC 0008 00FF 156B        	move.b	#8,(v_load_shield_art).l
00010378 08B9 0000 00FF 150C        	bclr	#0,(v_time_over).l
00010380 6700                       	beq.s	.NotTimeOver
00010382 4A39 00FF 1508             	tst.b	(v_life_count).l
00010388 6700                       	beq.s	.GameOver
0001038A 217C 0000 0000 0004        	move.l	#MapSpr_GameOver2,4(a0)
00010392 5439 00FF 156B             	addq.b	#2,(v_load_shield_art).l
00010398 6000                       	bra.s	.GameOver
0001039A                            
0001039A                            ; -------------------------------------------------------------------------------
0001039A                            
0001039A                            .NotTimeOver:
0001039A 4A39 00FF 1508             	tst.b	(v_life_count).l
000103A0 6600                       	bne.s	.Destroy
000103A2                            
000103A2                            .GameOver:
000103A2 08F9 0007 00FF 156B        	bset	#7,(v_load_shield_art).l
000103AA 4EB8 7CE4                  	jsr	FindObjSlot
000103AE 6700                       	beq.s	.LoadAuxObj
000103B0                            
000103B0                            .Destroy:
000103B0 4EF8 40BE                  	jmp	DeleteObject
000103B4                            
000103B4                            ; -------------------------------------------------------------------------------
000103B4                            
000103B4                            .LoadAuxObj:
000103B4 12BC 003B                  	move.b	#$3B,oID(a1)
000103B8 1368 0024 0024             	move.b	oRoutine(a0),oRoutine(a1)
000103BE 3368 0002 0002             	move.w	oTile(a0),oTile(a1)
000103C4 2368 0004 0004             	move.l	oMap(a0),oMap(a1)
000103CA 137C 0001 001A             	move.b	#1,oMapFrame(a1)
000103D0 337C 00E0 000A             	move.w	#$E0,oYScr(a1)
000103D6 337C 01C0 0008             	move.w	#$1C0,oX(a1)
000103DC 337C 0120 002A             	move.w	#$120,oVar2A(a1)
000103E2 4A39 00FF 1508             	tst.b	(v_life_count).l
000103E8 6600                       	bne.s	ObjGameOver_Main
000103EA 303C 008F                  	move.w	#$8F,d0 ; Play Game Over Theme
000103EE 4EB8 2708                  	jsr	PlayFMSound
000103F2 303C 006E                  	move.w	#$6E,d0
000103F6 4EF8 61B2                  	jmp	SendSubCommand
000103FA                            ; End of function ObjGameOver_Init
000103FA                            
000103FA                            ; -------------------------------------------------------------------------------
000103FA                            
000103FA                            ObjGameOver_Main:
000103FA 7008                       	moveq	#8,d0
000103FC 3228 002A                  	move.w	oVar2A(a0),d1
00010400 B268 0008                  	cmp.w	oX(a0),d1
00010404 6700                       	beq.s	.Display
00010406 6C00                       	bge.s	.MoveToDest
00010408 4440                       	neg.w	d0
0001040A                            
0001040A                            .MoveToDest:
0001040A D168 0008                  	add.w	d0,oX(a0)
0001040E                            
0001040E                            .Display:
0001040E 4EF8 4012                  	jmp	DrawObject
00010412                            ; End of function ObjGameOver_Main
00010412                            
00010412                            ; -------------------------------------------------------------------------------
00010412                            	include	"level/objects/gameover/map.asm"
00010412                            MapSpr_GameOver1:
00010412 0000                       	dc.w	unk_20F046-MapSpr_GameOver1
00010414 0000                       	dc.w	unk_20F052-MapSpr_GameOver1
00010416                            MapSpr_GameOver2:
00010416 0000                       	dc.w	unk_20F05E-MapSpr_GameOver2
00010418 0000                       	dc.w	unk_20F06A-MapSpr_GameOver2
0001041A 02                         unk_20F046:	dc.b	  2
0001041B F8                         	dc.b	$F8 ; ø
0001041C 0D                         	dc.b	 $D
0001041D 00                         	dc.b	  0
0001041E 00                         	dc.b	  0
0001041F B8                         	dc.b	$B8 ; ¸
00010420 F8                         	dc.b	$F8 ; ø
00010421 0D                         	dc.b	 $D
00010422 00                         	dc.b	  0
00010423 08                         	dc.b	  8
00010424 D8                         	dc.b	$D8 ; Ø
00010425 00                         	dc.b	  0
00010426 02                         unk_20F052:	dc.b	  2
00010427 F8                         	dc.b	$F8 ; ø
00010428 0D                         	dc.b	 $D
00010429 00                         	dc.b	  0
0001042A 10                         	dc.b	$10
0001042B 08                         	dc.b	  8
0001042C F8                         	dc.b	$F8 ; ø
0001042D 0D                         	dc.b	 $D
0001042E 00                         	dc.b	  0
0001042F 18                         	dc.b	$18
00010430 28                         	dc.b	$28 ; (
00010431 00                         	dc.b	  0
00010432 02                         unk_20F05E:	dc.b	  2
00010433 F8                         	dc.b	$F8 ; ø
00010434 0D                         	dc.b	 $D
00010435 00                         	dc.b	  0
00010436 00                         	dc.b	  0
00010437 BC                         	dc.b	$BC ; ¼
00010438 F8                         	dc.b	$F8 ; ø
00010439 09                         	dc.b	  9
0001043A 00                         	dc.b	  0
0001043B 08                         	dc.b	  8
0001043C DC                         	dc.b	$DC ; Ü
0001043D 00                         	dc.b	  0
0001043E 02                         unk_20F06A:	dc.b	  2
0001043F F8                         	dc.b	$F8 ; ø
00010440 0D                         	dc.b	 $D
00010441 00                         	dc.b	  0
00010442 0E                         	dc.b	 $E
00010443 04                         	dc.b	  4
00010444 F8                         	dc.b	$F8 ; ø
00010445 0D                         	dc.b	 $D
00010446 00                         	dc.b	  0
00010447 16                         	dc.b	$16
00010448 24                         	dc.b	$24 ; $
00010449 00                         	dc.b	  0
00010449 00                         	dc.b	  0
0001044A                            	even
0001044A                            ; -------------------------------------------------------------------------------
0001044A                            
0001044A                            ObjTitleCard:
0001044A 7000                       	moveq	#0,d0
0001044C 1028 0024                  	move.b	oRoutine(a0),d0
00010450 303B 0000                  	move.w	ObjTitleCard_Index(pc,d0.w),d0
00010454 4EFB 0000                  	jmp	ObjTitleCard_Index(pc,d0.w)
00010458                            ; End of function ObjTitleCard
00010458                            
00010458                            ; -------------------------------------------------------------------------------
00010458 0000                       ObjTitleCard_Index:dc.w	ObjTitleCard_Init-ObjTitleCard_Index
0001045A 0000                       	dc.w	ObjTitleCard_SlideInVert-ObjTitleCard_Index
0001045C 0000                       	dc.w	ObjTitleCard_SlideInHoriz-ObjTitleCard_Index
0001045E 0000                       	dc.w	ObjTitleCard_SlideOutVert-ObjTitleCard_Index
00010460 0000                       	dc.w	ObjTitleCard_SlideOutHoriz-ObjTitleCard_Index
00010462 0000                       	dc.w	ObjTitleCard_WaitPLC-ObjTitleCard_Index
00010464                            ; -------------------------------------------------------------------------------
00010464                            
00010464                            ObjTitleCard_Init:
00010464 117C 0002 0024             	move.b	#2,oRoutine(a0)
0001046A 317C 0118 0008             	move.w	#$118,oX(a0)
00010470 317C 0030 000A             	move.w	#$30,oYScr(a0)
00010476 317C 0030 0030             	move.w	#$30,oVar30(a0)
0001047C 317C 00F0 002E             	move.w	#$F0,oVar2E(a0)
00010482 117C 005A 001E             	move.b	#$5A,oAnimTime(a0)
00010488 317C 8360 0002             	move.w	#$8360,oTile(a0)
0001048E 217C 0000 0000 0004        	move.l	#MapSpr_TitleCard,oMap(a0)
00010496 117C 0004 0018             	move.b	#4,oPriority(a0)
0001049C 7200                       	moveq	#0,d1
0001049E 7C07                       	moveq	#7,d6
000104A0 45F9 0000 0000             	lea	(ObjTitleCard_Data).l,a2
000104A6                            
000104A6                            .Loop:
000104A6 4EB8 7CE4                  	jsr	FindObjSlot
000104AA 12BC 003C                  	move.b	#$3C,oID(a1)
000104AE 137C 0004 0024             	move.b	#4,oRoutine(a1)
000104B4 337C 8360 0002             	move.w	#$8360,oTile(a1)
000104BA 237C 0000 0000 0004        	move.l	#MapSpr_TitleCard,4(a1)
000104C2 3401                       	move.w	d1,d2
000104C4 E74A                       	lsl.w	#3,d2
000104C6 3372 2000 000A             	move.w	(a2,d2.w),oYScr(a1)
000104CC 3372 2002 0008             	move.w	2(a2,d2.w),oX(a1)
000104D2 3372 2002 002C             	move.w	2(a2,d2.w),oVar2C(a1)
000104D8 3372 2004 002A             	move.w	4(a2,d2.w),oVar2A(a1)
000104DE 1372 2006 001A             	move.b	6(a2,d2.w),oMapFrame(a1)
000104E4 0C01 0005                  	cmpi.b	#5,d1
000104E8 6600                       	bne.s	.NotActNum
000104EA 1639 00FF 1507             	move.b	(v_act).l,d3
000104F0 D729 001A                  	add.b	d3,oMapFrame(a1)
000104F4                            
000104F4                            .NotActNum:
000104F4 1372 2007 001E             	move.b	7(a2,d2.w),oAnimTime(a1)
000104FA 5201                       	addq.b	#1,d1
000104FC 51CE FFA8                  	dbf	d6,.Loop
00010500 4E75                       	rts
00010502                            ; End of function ObjTitleCard_Init
00010502                            
00010502                            ; -------------------------------------------------------------------------------
00010502                            
00010502                            ObjTitleCard_SlideInVert:
00010502 7008                       	moveq	#8,d0
00010504 3228 002E                  	move.w	oVar2E(a0),d1
00010508 B268 000A                  	cmp.w	oYScr(a0),d1
0001050C 6700                       	beq.s	.DidSlide
0001050E 6C00                       	bge.s	.DoYSlide
00010510 4440                       	neg.w	d0
00010512                            
00010512                            .DoYSlide:
00010512 D168 000A                  	add.w	d0,oYScr(a0)
00010516 4EF8 4012                  	jmp	DrawObject
0001051A                            
0001051A                            ; -------------------------------------------------------------------------------
0001051A                            
0001051A                            .DidSlide:
0001051A 5828 0024                  	addq.b	#4,oRoutine(a0)
0001051E 4EF8 4012                  	jmp	DrawObject
00010522                            ; End of function ObjTitleCard_SlideInVert
00010522                            
00010522                            ; -------------------------------------------------------------------------------
00010522                            
00010522                            ObjTitleCard_SlideInHoriz:
00010522 7008                       	moveq	#8,d0
00010524 3228 002A                  	move.w	oVar2A(a0),d1
00010528 B268 0008                  	cmp.w	oX(a0),d1
0001052C 6700                       	beq.s	.DidSlide
0001052E 6C00                       	bge.s	.DoXSlide
00010530 4440                       	neg.w	d0
00010532                            
00010532                            .DoXSlide:
00010532 D168 0008                  	add.w	d0,oX(a0)
00010536 4EF8 4012                  	jmp	DrawObject
0001053A                            
0001053A                            ; -------------------------------------------------------------------------------
0001053A                            
0001053A                            .DidSlide:
0001053A 5828 0024                  	addq.b	#4,oRoutine(a0)
0001053E 4EF8 4012                  	jmp	DrawObject
00010542                            ; End of function ObjTitleCard_SlideInHoriz
00010542                            
00010542                            ; -------------------------------------------------------------------------------
00010542                            
00010542                            ObjTitleCard_SlideOutVert:
00010542 4A28 001E                  	tst.b	oAnimTime(a0)
00010546 6700                       	beq.s	.SlideOut
00010548 5328 001E                  	subq.b	#1,oAnimTime(a0)
0001054C 4EF8 4012                  	jmp	DrawObject
00010550                            
00010550                            ; -------------------------------------------------------------------------------
00010550                            
00010550                            .SlideOut:
00010550 7010                       	moveq	#$10,d0
00010552 3228 0030                  	move.w	oVar30(a0),d1
00010556 B268 000A                  	cmp.w	oYScr(a0),d1
0001055A 6700                       	beq.s	.DidSlide
0001055C 6C00                       	bge.s	.DoYSlide
0001055E 4440                       	neg.w	d0
00010560                            
00010560                            .DoYSlide:
00010560 D168 000A                  	add.w	d0,oYScr(a0)
00010564 4EF8 4012                  	jmp	DrawObject
00010568                            
00010568                            ; -------------------------------------------------------------------------------
00010568                            
00010568                            .DidSlide:
00010568 5828 0024                  	addq.b	#4,oRoutine(a0)
0001056C 11FC 0001 F744             	move.b	#1,(v_scroll_lock).w
00010572 7002                       	moveq	#2,d0
00010574 4EF8 28CE                  	jmp	LoadPLC
00010578                            ; End of function ObjTitleCard_SlideOutVert
00010578                            
00010578                            ; -------------------------------------------------------------------------------
00010578                            
00010578                            ObjTitleCard_SlideOutHoriz:
00010578 4A28 001E                  	tst.b	oAnimTime(a0)
0001057C 6700                       	beq.s	.SlideOut
0001057E 5328 001E                  	subq.b	#1,oAnimTime(a0)
00010582 4EF8 4012                  	jmp	DrawObject
00010586                            
00010586                            ; -------------------------------------------------------------------------------
00010586                            
00010586                            .SlideOut:
00010586 7010                       	moveq	#$10,d0
00010588 3228 002C                  	move.w	oVar2C(a0),d1
0001058C B268 0008                  	cmp.w	oX(a0),d1
00010590 6700                       	beq.s	.DidSlide
00010592 6C00                       	bge.s	.DoXSlide
00010594 4440                       	neg.w	d0
00010596                            
00010596                            .DoXSlide:
00010596 D168 0008                  	add.w	d0,oX(a0)
0001059A 4EF8 4012                  	jmp	DrawObject
0001059E                            
0001059E                            ; -------------------------------------------------------------------------------
0001059E                            
0001059E                            .DidSlide:
0001059E 4EF8 40BE                  	jmp	DeleteObject
000105A2                            ; End of function ObjTitleCard_SlideOutHoriz
000105A2                            
000105A2                            ; -------------------------------------------------------------------------------
000105A2                            
000105A2                            ObjTitleCard_WaitPLC:
000105A2 4AB8 F680                  	tst.l	(v_plc_buffer).w
000105A6 6600                       	bne.s	.End
000105A8 4238 F744                  	clr.b	(v_scroll_lock).w
000105AC 4238 F7CC                  	clr.b	(v_ctrl_locked).w
000105B0 4EF8 40BE                  	jmp	DeleteObject
000105B4                            
000105B4                            ; -------------------------------------------------------------------------------
000105B4                            
000105B4                            .End:
000105B4 4E75                       	rts
000105B6                            ; End of function ObjTitleCard_WaitPLC
000105B6                            
000105B6                            ; -------------------------------------------------------------------------------
000105B6                            
000105B6                            ObjResults:
000105B6 7000                       	moveq	#0,d0
000105B8 1028 0024                  	move.b	$24(a0),d0
000105BC 303B 0000                  	move.w	ObjResults_Index(pc,d0.w),d0
000105C0 4EFB 0000                  	jmp	ObjResults_Index(pc,d0.w)
000105C4                            ; End of function ObjResults
000105C4                            
000105C4                            ; -------------------------------------------------------------------------------
000105C4 0000                       ObjResults_Index:dc.w	ObjResults_Init-ObjResults_Index
000105C6 0000                       	dc.w	ObjResults_WaitPLC-ObjResults_Index
000105C8 0000                       	dc.w	ObjResults_MoveToDest-ObjResults_Index
000105CA 0000                       	dc.w	ObjResults_BonusCountdown-ObjResults_Index
000105CC 0000                       	dc.w	ObjResults_NextLevel-ObjResults_Index
000105CE                            ; -------------------------------------------------------------------------------
000105CE                            
000105CE                            ObjResults_Init:
000105CE 5328 0032                  	subq.b	#1,oVar32(a0)
000105D2 6700                       	beq.s	.LoadPLC
000105D4 4E75                       	rts
000105D6                            
000105D6                            ; -------------------------------------------------------------------------------
000105D6                            
000105D6                            .LoadPLC:
000105D6 7010                       	moveq	#$10,d0
000105D8 4EB8 28CE                  	jsr	LoadPLC
000105DC 5428 0024                  	addq.b	#2,oRoutine(a0)
000105E0                            ; End of function ObjResults_Init
000105E0                            
000105E0                            ; -------------------------------------------------------------------------------
000105E0                            
000105E0                            ObjResults_WaitPLC:
000105E0 4AB8 F680                  	tst.l	(v_plc_buffer).w
000105E4 6600                       	bne.s	.End
000105E6 0C79 0502 00FF 1506        	cmpi.w	#$502,(v_zone).l
000105EE 6700                       	beq.s	.LoadResults
000105F0 4DF8 D000                  	lea	(v_player).w,a6
000105F4 3038 F700                  	move.w	(v_cam_fg_x).w,d0
000105F8 0640 0150                  	addi.w	#$150,d0
000105FC B06E 0008                  	cmp.w	oX(a6),d0
00010600 6500                       	bcs.s	.LoadResults
00010602                            
00010602                            .End:
00010602 4E75                       	rts
00010604                            
00010604                            ; -------------------------------------------------------------------------------
00010604                            
00010604                            .LoadResults:
00010604 45F9 0000 0000             	lea	(ObjResults_Data).l,a2
0001060A 7C02                       	moveq	#2,d6
0001060C 7200                       	moveq	#0,d1
0001060E 2248                       	movea.l	a0,a1
00010610 317C 01E0 0032             	move.w	#$1E0,oVar32(a0)
00010616 6000                       	bra.s	.InitLoop
00010618                            
00010618                            ; -------------------------------------------------------------------------------
00010618                            
00010618                            .Loop:
00010618 4EB8 7CE4                  	jsr	FindObjSlot
0001061C                            
0001061C                            .InitLoop:
0001061C 337C 01E0 0032             	move.w	#$1E0,oVar32(a1)
00010622 12BC 003A                  	move.b	#$3A,oID(a1)
00010626 137C 0004 0024             	move.b	#4,oRoutine(a1)
0001062C 337C 83C4 0002             	move.w	#$83C4,oTile(a1)
00010632 0C79 0502 00FF 1506        	cmpi.w	#$502,(v_zone).l
0001063A 6600                       	bne.s	.NotSSZ3
0001063C 337C 82F2 0002             	move.w	#$82F2,oTile(a1)
00010642 237C 0000 0000 0004        	move.l	#MapSpr_Results2,oMap(a1)
0001064A 4A39 00FF 156A             	tst.b	(v_good_future).l
00010650 6700                       	beq.s	.GotMaps
00010652 237C 0000 0000 0004        	move.l	#MapSpr_Results4,oMap(a1)
0001065A 6000                       	bra.s	.GotMaps
0001065C                            
0001065C                            ; -------------------------------------------------------------------------------
0001065C                            
0001065C                            .NotSSZ3:
0001065C 237C 0000 0000 0004        	move.l	#MapSpr_Results1,4(a1)
00010664 4A39 00FF 156A             	tst.b	(v_good_future).l
0001066A 6700                       	beq.s	.GotMaps
0001066C 237C 0000 0000 0004        	move.l	#MapSpr_Results3,4(a1)
00010674                            
00010674                            .GotMaps:
00010674 3401                       	move.w	d1,d2
00010676 E74A                       	lsl.w	#3,d2
00010678 3372 2000 000A             	move.w	(a2,d2.w),oYScr(a1)
0001067E 3372 2002 0008             	move.w	2(a2,d2.w),oX(a1)
00010684 3372 2004 002A             	move.w	4(a2,d2.w),oVar2A(a1)
0001068A 1372 2007 001A             	move.b	7(a2,d2.w),oMapFrame(a1)
00010690 0C01 0002                  	cmpi.b	#2,d1
00010694 6600                       	bne.s	.GotFrame
00010696 1439 00FF 1507             	move.b	(v_act).l,d2
0001069C D529 001A                  	add.b	d2,oMapFrame(a1)
000106A0                            
000106A0                            .GotFrame:
000106A0 5201                       	addq.b	#1,d1
000106A2 51CE FF74                  	dbf	d6,.Loop
000106A6 4E75                       	rts
000106A8                            ; End of function ObjResults_WaitPLC
000106A8                            
000106A8                            ; -------------------------------------------------------------------------------
000106A8                            
000106A8                            ObjResults_MoveToDest:
000106A8 4A68 0032                  	tst.w	oVar32(a0)
000106AC 6700                       	beq.s	.TimerDone
000106AE 5368 0032                  	subq.w	#1,oVar32(a0)
000106B2                            
000106B2                            .TimerDone:
000106B2 7008                       	moveq	#8,d0
000106B4 3228 002A                  	move.w	oVar2A(a0),d1
000106B8 B268 0008                  	cmp.w	oX(a0),d1
000106BC 6700                       	beq.s	.InPlace
000106BE 6C00                       	bge.s	.GotSpeed
000106C0 4440                       	neg.w	d0
000106C2                            
000106C2                            .GotSpeed:
000106C2 D168 0008                  	add.w	d0,oX(a0)
000106C6                            
000106C6                            .TestDisplay:
000106C6 0C68 01D8 0032             	cmpi.w	#$1D8,oVar32(a0)
000106CC 6400                       	bcc.s	.End
000106CE 4EF8 4012                  	jmp	DrawObject
000106D2                            
000106D2                            ; -------------------------------------------------------------------------------
000106D2                            
000106D2                            .End:
000106D2 4E75                       	rts
000106D4                            
000106D4                            ; -------------------------------------------------------------------------------
000106D4                            
000106D4                            .InPlace:
000106D4 4A28 001A                  	tst.b	oMapFrame(a0)
000106D8 66EC                       	bne.s	.TestDisplay
000106DA 5428 0024                  	addq.b	#2,oRoutine(a0)
000106DE 60E6                       	bra.s	.TestDisplay
000106E0                            ; End of function ObjResults_MoveToDest
000106E0                            
000106E0                            ; -------------------------------------------------------------------------------
000106E0                            
000106E0                            ObjResults_BonusCountdown:
000106E0 11FC 0001 F7D6             	move.b	#1,(v_update_bonus_score).w
000106E6 7000                       	moveq	#0,d0
000106E8 4A78 F7D2                  	tst.w	(v_bonus_countdown_1).w
000106EC 6600                       	bne.s	.GiveBonus1
000106EE 4A78 F7D4                  	tst.w	(v_bonus_countdown_2).w
000106F2 6600                       	bne.s	.GiveBonus2
000106F4 5368 0032                  	subq.w	#1,oVar32(a0)
000106F8 6A00                       	bpl.s	.KeepRout
000106FA 5428 0024                  	addq.b	#2,oRoutine(a0)
000106FE                            
000106FE                            .KeepRout:
000106FE 0C68 001E 0032             	cmpi.w	#$1E,oVar32(a0)
00010704 6600                       	bne.s	.Display
00010706 4A39 00FF 156E             	tst.b	(v_entered_big_ring).l
0001070C 6700                       	beq.s	.Display
0001070E 4EF9 0000 0000                 jmp     .Display
00010714 303C 00C5                  	move.w	#$C5,d0
00010718 4EB8 2708                  	jsr	PlayFMSound
0001071C                            
0001071C                            .Display:
0001071C 4EF8 4012                  	jmp	DrawObject
00010720                            
00010720                            ; -------------------------------------------------------------------------------
00010720                            
00010720                            .GiveBonus1:
00010720 0640 000A                  	addi.w	#10,d0
00010724 0478 0064 F7D2             	subi.w	#100,(v_bonus_countdown_1).w
0001072A 4A78 F7D4                  	tst.w	(v_bonus_countdown_2).w
0001072E 6700                       	beq.s	.ChkDone
00010730                            
00010730                            .GiveBonus2:
00010730 0640 000A                  	addi.w	#10,d0
00010734 0478 0064 F7D4             	subi.w	#100,(v_bonus_countdown_2).w
0001073A                            
0001073A                            .ChkDone:
0001073A 2200                       	move.l	d0,d1
0001073C 4A78 F7D2                  	tst.w	(v_bonus_countdown_1).w
00010740 6600                       	bne.s	.HaveBonus
00010742 4A78 F7D4                  	tst.w	(v_bonus_countdown_2).w
00010746 6600                       	bne.s	.HaveBonus
00010748 303C 00C5                  	move.w	#$C5,d0 ; play "ker-ching" sound
0001074C 4EB8 2708                  	jsr	PlayFMSound
00010750                            ; =============================================================================
00010750                            ; I dunno what these lines do, but commenting them does not affect anything...
00010750                            ; =============================================================================
00010750                            	;jsr	StopZ80
00010750                            	;move.b	#$9A,(Z80_RAM+$1C09).l
00010750                                ;jsr	StartZ80
00010750                            	;cmpi.w	#$2D,oVar32(a0)
00010750                            	;bcc.s	.NoSFX
00010750                            	;move.w	#$2D,oVar32(a0)
00010750                            	;bra.s	.NoSFX
00010750                            ; =============================================================================
00010750                            
00010750                            ; -------------------------------------------------------------------------------
00010750                            
00010750                            .HaveBonus:
00010750 4A68 0032                  	tst.w	oVar32(a0)
00010754 6700                       	beq.s	.TestSFX
00010756 5368 0032                  	subq.w	#1,oVar32(a0)
0001075A 303C 00CD                  	move.w	#$CD,d0 ; play "blip" sound
0001075E 4EB8 2708                  	jsr	PlayFMSound
00010762                            
00010762                            .TestSFX:
00010762 0828 0000 0032             	btst	#0,oVar32(a0)
00010768 6600                       	bne.s	.NoSFX
0001076A 4EF9 0000 0000                 jmp     .NoSFX
00010770 303C 00BD                  	move.w	#$BD,d0
00010774 4EB8 2708                  	jsr	PlayFMSound
00010778                            
00010778                            .NoSFX:
00010778 2001                       	move.l	d1,d0
0001077A 4EBA BBCE                  	jsr	AddPoints
0001077E 4EF8 4012                  	jmp	DrawObject
00010782                            ; End of function ObjResults_BonusCountdown
00010782                            
00010782                            ; -------------------------------------------------------------------------------
00010782                            
00010782                            ObjResults_NextLevel:
00010782 33FC 0002 00FF 1502        	move.w	#2,(v_level_restart).l
0001078A 13FC 0000 00FF 1522        	move.b	#0,(v_reset_lvl_flags).l
00010792 4279 00FF 1574             	clr.w	(v_last_camera_plc).l
00010798 42B9 00FF 1900             	clr.l	(v_flower_count).l
0001079E 4239 00FF 156C             	clr.b	(v_unk_flag).l
000107A4 4239 00FF 156D             	clr.b	(v_destroyed_projector).l
000107AA 4239 00FF 158E             	clr.b	(v_last_checkpoint).l
000107B0 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l
000107B6 6700                       	beq.s	.NotTimeAttack
000107B8 08B9 0000 00FF 151C        	bclr	#0,(v_load_plc_flags).l
000107C0                            
000107C0                            .NotTimeAttack:
000107C0 08B9 0001 00FF 151C        	bclr	#1,(v_load_plc_flags).l
000107C8 13FC 0001 00FF 152E        	move.b	#1,(v_time_zone).l
000107D0 3039 00FF 1506             	move.w	(v_zone).l,d0
000107D6 5200                       	addq.b	#1,d0
000107D8 0C00 0002                  	cmpi.b	#2,d0
000107DC 6600                       	bne.s	.NotAct3
000107DE 13FC 0001 00FF 152E        	move.b	#1,(v_time_zone).l ; Set to 2 for future, currently at 1 for present(Due to Broken Timezones)
000107E6                            
000107E6                            .NotAct3:
000107E6 0C00 0003                  	cmpi.b	#3,d0
000107EA 6600                       	bne.s	.SameZone
000107EC 103C 0000                  	move.b	#0,d0
000107F0 0640 0100                  	addi.w	#$100,d0
000107F4 103C 0000                  	move.b	#0,d0
000107F8                            
000107F8                            .SameZone:
000107F8 33C0 00FF 1506             	move.w	d0,(v_zone).l
000107FE 4EB8 7AC8                  	jsr	ResetRespawnTable
00010802 4EB8 61AE                  	jsr	FadeOutMusic
00010806 4EB8 4012                  	jsr	DrawObject
0001080A 1039 00FF 1507             	move.b	(v_act).l,d0
00010810 5300                       	subq.b	#1,d0
00010812 6A00                       	bpl.s	.NotAct1
00010814 4239 00FF 1590             	clr.b	(v_good_future_flags).l
0001081A 4E75                       	rts
0001081C                            
0001081C                            ; -------------------------------------------------------------------------------
0001081C                            
0001081C                            .NotAct1:
0001081C 4A39 00FF 0F01             	tst.b	(v_time_attack_mode).l
00010822 6600                       	bne.s	.End
00010824 0C39 007F 00FF 0F20        	cmpi.b	#$7F,(v_got_time_stones).l
0001082C 6700                       	beq.s	.SetGoodFuture
0001082E 4A39 00FF 156A             	tst.b	(v_good_future).l
00010834 6700                       	beq.s	.End
00010836 4239 00FF 156A             	clr.b	(v_good_future).l
0001083C 01F9 00FF 1590             	bset	d0,(v_good_future_flags).l
00010842 0C39 0003 00FF 1590        	cmpi.b	#3,(v_good_future_flags).l
0001084A 6600                       	bne.s	.End
0001084C                            
0001084C                            .SetGoodFuture:
0001084C 13FC 0001 00FF 156A        	move.b	#1,(v_good_future).l
00010854                            
00010854                            .End:
00010854 4E75                       	rts
00010856                            ; End of function ObjResults_NextLevel
00010856                            
00010856                            ; -------------------------------------------------------------------------------
00010856 00CC 0000 0120 0000        ObjResults_Data:dc.w	$CC, 0, $120, 0
0001085E 0110 0200 00F0 0001        	dc.w	$110, $200, $F0, 1
00010866 00CC 0000 0120 0002        	dc.w	$CC, 0, $120, 2
0001086E                            
0001086E                            	include	"level/objects/endresults/map.asm"
0001086E                            MapSpr_Results1:
0001086E 0000                       	dc.w	unk_20F4FC-MapSpr_Results1
00010870 0000                       	dc.w	unk_20F6B2-MapSpr_Results1
00010872 0000                       	dc.w	unk_20F526-MapSpr_Results1
00010874 0000                       	dc.w	unk_20F55A-MapSpr_Results1
00010876 0000                       	dc.w	unk_20F58E-MapSpr_Results1
00010878                            MapSpr_Results2:
00010878 0000                       	dc.w	unk_20F4FC-MapSpr_Results2
0001087A 0000                       	dc.w	unk_20F6FA-MapSpr_Results2
0001087C 0000                       	dc.w	unk_20F526-MapSpr_Results2
0001087E 0000                       	dc.w	unk_20F55A-MapSpr_Results2
00010880 0000                       	dc.w	unk_20F58E-MapSpr_Results2
00010882                            MapSpr_Results3:
00010882 0000                       	dc.w	unk_20F5C2-MapSpr_Results3
00010884 0000                       	dc.w	unk_20F6B2-MapSpr_Results3
00010886 0000                       	dc.w	unk_20F60A-MapSpr_Results3
00010888 0000                       	dc.w	unk_20F642-MapSpr_Results3
0001088A 0000                       	dc.w	unk_20F67A-MapSpr_Results3
0001088C                            MapSpr_Results4:
0001088C 0000                       	dc.w	unk_20F5C2-MapSpr_Results4
0001088E 0000                       	dc.w	unk_20F6FA-MapSpr_Results4
00010890 0000                       	dc.w	unk_20F60A-MapSpr_Results4
00010892 0000                       	dc.w	unk_20F642-MapSpr_Results4
00010894 0000                       	dc.w	unk_20F67A-MapSpr_Results4
00010896 08                         unk_20F4FC:	dc.b	  8
00010897 EC                         	dc.b	$EC ; ì
00010898 05                         	dc.b	  5
00010899 00                         	dc.b	  0
0001089A 00                         	dc.b	  0
0001089B BC                         	dc.b	$BC ; ¼
0001089C EC                         	dc.b	$EC ; ì
0001089D 05                         	dc.b	  5
0001089E 00                         	dc.b	  0
0001089F 04                         	dc.b	  4
000108A0 CC                         	dc.b	$CC ; Ì
000108A1 EC                         	dc.b	$EC ; ì
000108A2 05                         	dc.b	  5
000108A3 00                         	dc.b	  0
000108A4 08                         	dc.b	  8
000108A5 DC                         	dc.b	$DC ; Ü
000108A6 EC                         	dc.b	$EC ; ì
000108A7 01                         	dc.b	  1
000108A8 00                         	dc.b	  0
000108A9 0C                         	dc.b	 $C
000108AA EC                         	dc.b	$EC ; ì
000108AB EC                         	dc.b	$EC ; ì
000108AC 05                         	dc.b	  5
000108AD 00                         	dc.b	  0
000108AE 0E                         	dc.b	 $E
000108AF F4                         	dc.b	$F4 ; ô
000108B0 EC                         	dc.b	$EC ; ì
000108B1 05                         	dc.b	  5
000108B2 00                         	dc.b	  0
000108B3 12                         	dc.b	$12
000108B4 14                         	dc.b	$14
000108B5 EC                         	dc.b	$EC ; ì
000108B6 05                         	dc.b	  5
000108B7 00                         	dc.b	  0
000108B8 04                         	dc.b	  4
000108B9 24                         	dc.b	$24 ; $
000108BA EC                         	dc.b	$EC ; ì
000108BB 05                         	dc.b	  5
000108BC 00                         	dc.b	  0
000108BD 16                         	dc.b	$16
000108BE 34                         	dc.b	$34 ; 4
000108BF 00                         	dc.b	  0
000108C0 0A                         unk_20F526:	dc.b	 $A
000108C1 04                         	dc.b	  4
000108C2 05                         	dc.b	  5
000108C3 00                         	dc.b	  0
000108C4 16                         	dc.b	$16
000108C5 9C                         	dc.b	$9C ; œ
000108C6 04                         	dc.b	  4
000108C7 05                         	dc.b	  5
000108C8 00                         	dc.b	  0
000108C9 1A                         	dc.b	$1A
000108CA AC                         	dc.b	$AC ; ¬
000108CB 04                         	dc.b	  4
000108CC 05                         	dc.b	  5
000108CD 00                         	dc.b	  0
000108CE 1E                         	dc.b	$1E
000108CF BC                         	dc.b	$BC ; ¼
000108D0 04                         	dc.b	  4
000108D1 05                         	dc.b	  5
000108D2 00                         	dc.b	  0
000108D3 04                         	dc.b	  4
000108D4 CC                         	dc.b	$CC ; Ì
000108D5 04                         	dc.b	  4
000108D6 05                         	dc.b	  5
000108D7 00                         	dc.b	  0
000108D8 22                         	dc.b	$22 ; "
000108D9 DC                         	dc.b	$DC ; Ü
000108DA 04                         	dc.b	  4
000108DB 05                         	dc.b	  5
000108DC 00                         	dc.b	  0
000108DD 12                         	dc.b	$12
000108DE EC                         	dc.b	$EC ; ì
000108DF 04                         	dc.b	  4
000108E0 05                         	dc.b	  5
000108E1 00                         	dc.b	  0
000108E2 1A                         	dc.b	$1A
000108E3 FC                         	dc.b	$FC ; ü
000108E4 04                         	dc.b	  4
000108E5 0D                         	dc.b	 $D
000108E6 00                         	dc.b	  0
000108E7 26                         	dc.b	$26 ; &
000108E8 1C                         	dc.b	$1C
000108E9 04                         	dc.b	  4
000108EA 09                         	dc.b	  9
000108EB 00                         	dc.b	  0
000108EC 2E                         	dc.b	$2E ; .
000108ED 3C                         	dc.b	$3C ; <
000108EE 04                         	dc.b	  4
000108EF 01                         	dc.b	  1
000108F0 00                         	dc.b	  0
000108F1 34                         	dc.b	$34 ; 4
000108F2 5C                         	dc.b	$5C ; \
000108F3 00                         	dc.b	  0
000108F4 0A                         unk_20F55A:	dc.b	 $A
000108F5 04                         	dc.b	  4
000108F6 05                         	dc.b	  5
000108F7 00                         	dc.b	  0
000108F8 16                         	dc.b	$16
000108F9 9C                         	dc.b	$9C ; œ
000108FA 04                         	dc.b	  4
000108FB 05                         	dc.b	  5
000108FC 00                         	dc.b	  0
000108FD 1A                         	dc.b	$1A
000108FE AC                         	dc.b	$AC ; ¬
000108FF 04                         	dc.b	  4
00010900 05                         	dc.b	  5
00010901 00                         	dc.b	  0
00010902 1E                         	dc.b	$1E
00010903 BC                         	dc.b	$BC ; ¼
00010904 04                         	dc.b	  4
00010905 05                         	dc.b	  5
00010906 00                         	dc.b	  0
00010907 04                         	dc.b	  4
00010908 CC                         	dc.b	$CC ; Ì
00010909 04                         	dc.b	  4
0001090A 05                         	dc.b	  5
0001090B 00                         	dc.b	  0
0001090C 22                         	dc.b	$22 ; "
0001090D DC                         	dc.b	$DC ; Ü
0001090E 04                         	dc.b	  4
0001090F 05                         	dc.b	  5
00010910 00                         	dc.b	  0
00010911 12                         	dc.b	$12
00010912 EC                         	dc.b	$EC ; ì
00010913 04                         	dc.b	  4
00010914 05                         	dc.b	  5
00010915 00                         	dc.b	  0
00010916 1A                         	dc.b	$1A
00010917 FC                         	dc.b	$FC ; ü
00010918 04                         	dc.b	  4
00010919 0D                         	dc.b	 $D
0001091A 00                         	dc.b	  0
0001091B 26                         	dc.b	$26 ; &
0001091C 1C                         	dc.b	$1C
0001091D 04                         	dc.b	  4
0001091E 09                         	dc.b	  9
0001091F 00                         	dc.b	  0
00010920 2E                         	dc.b	$2E ; .
00010921 3C                         	dc.b	$3C ; <
00010922 04                         	dc.b	  4
00010923 05                         	dc.b	  5
00010924 00                         	dc.b	  0
00010925 4A                         	dc.b	$4A ; J
00010926 5C                         	dc.b	$5C ; \
00010927 00                         	dc.b	  0
00010928 0A                         unk_20F58E:	dc.b	 $A
00010929 04                         	dc.b	  4
0001092A 05                         	dc.b	  5
0001092B 00                         	dc.b	  0
0001092C 16                         	dc.b	$16
0001092D 9C                         	dc.b	$9C ; œ
0001092E 04                         	dc.b	  4
0001092F 05                         	dc.b	  5
00010930 00                         	dc.b	  0
00010931 1A                         	dc.b	$1A
00010932 AC                         	dc.b	$AC ; ¬
00010933 04                         	dc.b	  4
00010934 05                         	dc.b	  5
00010935 00                         	dc.b	  0
00010936 1E                         	dc.b	$1E
00010937 BC                         	dc.b	$BC ; ¼
00010938 04                         	dc.b	  4
00010939 05                         	dc.b	  5
0001093A 00                         	dc.b	  0
0001093B 04                         	dc.b	  4
0001093C CC                         	dc.b	$CC ; Ì
0001093D 04                         	dc.b	  4
0001093E 05                         	dc.b	  5
0001093F 00                         	dc.b	  0
00010940 22                         	dc.b	$22 ; "
00010941 DC                         	dc.b	$DC ; Ü
00010942 04                         	dc.b	  4
00010943 05                         	dc.b	  5
00010944 00                         	dc.b	  0
00010945 12                         	dc.b	$12
00010946 EC                         	dc.b	$EC ; ì
00010947 04                         	dc.b	  4
00010948 05                         	dc.b	  5
00010949 00                         	dc.b	  0
0001094A 1A                         	dc.b	$1A
0001094B FC                         	dc.b	$FC ; ü
0001094C 04                         	dc.b	  4
0001094D 0D                         	dc.b	 $D
0001094E 00                         	dc.b	  0
0001094F 26                         	dc.b	$26 ; &
00010950 1C                         	dc.b	$1C
00010951 04                         	dc.b	  4
00010952 09                         	dc.b	  9
00010953 00                         	dc.b	  0
00010954 2E                         	dc.b	$2E ; .
00010955 3C                         	dc.b	$3C ; <
00010956 04                         	dc.b	  4
00010957 05                         	dc.b	  5
00010958 00                         	dc.b	  0
00010959 4E                         	dc.b	$4E ; N
0001095A 5C                         	dc.b	$5C ; \
0001095B 00                         	dc.b	  0
0001095C 0E                         unk_20F5C2:	dc.b	 $E
0001095D EC                         	dc.b	$EC ; ì
0001095E 05                         	dc.b	  5
0001095F 00                         	dc.b	  0
00010960 00                         	dc.b	  0
00010961 80                         	dc.b	$80 ; €
00010962 EC                         	dc.b	$EC ; ì
00010963 05                         	dc.b	  5
00010964 00                         	dc.b	  0
00010965 04                         	dc.b	  4
00010966 90                         	dc.b	$90 ; 
00010967 EC                         	dc.b	$EC ; ì
00010968 05                         	dc.b	  5
00010969 00                         	dc.b	  0
0001096A 08                         	dc.b	  8
0001096B A0                         	dc.b	$A0 ;  
0001096C EC                         	dc.b	$EC ; ì
0001096D 01                         	dc.b	  1
0001096E 00                         	dc.b	  0
0001096F 0C                         	dc.b	 $C
00010970 B0                         	dc.b	$B0 ; °
00010971 EC                         	dc.b	$EC ; ì
00010972 05                         	dc.b	  5
00010973 00                         	dc.b	  0
00010974 0E                         	dc.b	 $E
00010975 B8                         	dc.b	$B8 ; ¸
00010976 EC                         	dc.b	$EC ; ì
00010977 05                         	dc.b	  5
00010978 00                         	dc.b	  0
00010979 36                         	dc.b	$36 ; 6
0001097A D0                         	dc.b	$D0 ; Ð
0001097B EC                         	dc.b	$EC ; ì
0001097C 05                         	dc.b	  5
0001097D 00                         	dc.b	  0
0001097E 3A                         	dc.b	$3A ; :
0001097F E0                         	dc.b	$E0 ; à
00010980 EC                         	dc.b	$EC ; ì
00010981 05                         	dc.b	  5
00010982 00                         	dc.b	  0
00010983 3E                         	dc.b	$3E ; >
00010984 F0                         	dc.b	$F0 ; ð
00010985 EC                         	dc.b	$EC ; ì
00010986 05                         	dc.b	  5
00010987 00                         	dc.b	  0
00010988 42                         	dc.b	$42 ; B
00010989 00                         	dc.b	  0
0001098A EC                         	dc.b	$EC ; ì
0001098B 05                         	dc.b	  5
0001098C 00                         	dc.b	  0
0001098D 3A                         	dc.b	$3A ; :
0001098E 20                         	dc.b	$20
0001098F EC                         	dc.b	$EC ; ì
00010990 05                         	dc.b	  5
00010991 00                         	dc.b	  0
00010992 12                         	dc.b	$12
00010993 40                         	dc.b	$40 ; .
00010994 EC                         	dc.b	$EC ; ì
00010995 05                         	dc.b	  5
00010996 00                         	dc.b	  0
00010997 04                         	dc.b	  4
00010998 50                         	dc.b	$50 ; P
00010999 EC                         	dc.b	$EC ; ì
0001099A 05                         	dc.b	  5
0001099B 00                         	dc.b	  0
0001099C 04                         	dc.b	  4
0001099D 60                         	dc.b	$60 ; `
0001099E EC                         	dc.b	$EC ; ì
0001099F 05                         	dc.b	  5
000109A0 00                         	dc.b	  0
000109A1 3E                         	dc.b	$3E ; >
000109A2 70                         	dc.b	$70 ; p
000109A3 00                         	dc.b	  0
000109A4 0B                         unk_20F60A:	dc.b	 $B
000109A5 04                         	dc.b	  4
000109A6 05                         	dc.b	  5
000109A7 00                         	dc.b	  0
000109A8 46                         	dc.b	$46 ; F
000109A9 90                         	dc.b	$90 ; 
000109AA 04                         	dc.b	  4
000109AB 05                         	dc.b	  5
000109AC 00                         	dc.b	  0
000109AD 22                         	dc.b	$22 ; "
000109AE A0                         	dc.b	$A0 ;  
000109AF 04                         	dc.b	  4
000109B0 05                         	dc.b	  5
000109B1 00                         	dc.b	  0
000109B2 16                         	dc.b	$16
000109B3 B0                         	dc.b	$B0 ; °
000109B4 04                         	dc.b	  4
000109B5 05                         	dc.b	  5
000109B6 00                         	dc.b	  0
000109B7 22                         	dc.b	$22 ; "
000109B8 C0                         	dc.b	$C0 ; À
000109B9 04                         	dc.b	  4
000109BA 05                         	dc.b	  5
000109BB 00                         	dc.b	  0
000109BC 1E                         	dc.b	$1E
000109BD D0                         	dc.b	$D0 ; Ð
000109BE 04                         	dc.b	  4
000109BF 05                         	dc.b	  5
000109C0 00                         	dc.b	  0
000109C1 42                         	dc.b	$42 ; B
000109C2 E0                         	dc.b	$E0 ; à
000109C3 04                         	dc.b	  4
000109C4 01                         	dc.b	  1
000109C5 00                         	dc.b	  0
000109C6 0C                         	dc.b	 $C
000109C7 00                         	dc.b	  0
000109C8 04                         	dc.b	  4
000109C9 05                         	dc.b	  5
000109CA 00                         	dc.b	  0
000109CB 08                         	dc.b	  8
000109CC 08                         	dc.b	  8
000109CD 04                         	dc.b	  4
000109CE 0D                         	dc.b	 $D
000109CF 00                         	dc.b	  0
000109D0 26                         	dc.b	$26 ; &
000109D1 28                         	dc.b	$28 ; (
000109D2 04                         	dc.b	  4
000109D3 09                         	dc.b	  9
000109D4 00                         	dc.b	  0
000109D5 2E                         	dc.b	$2E ; .
000109D6 48                         	dc.b	$48 ; H
000109D7 04                         	dc.b	  4
000109D8 01                         	dc.b	  1
000109D9 00                         	dc.b	  0
000109DA 34                         	dc.b	$34 ; 4
000109DB 68                         	dc.b	$68 ; h
000109DC 0B                         unk_20F642:	dc.b	 $B
000109DD 04                         	dc.b	  4
000109DE 05                         	dc.b	  5
000109DF 00                         	dc.b	  0
000109E0 46                         	dc.b	$46 ; F
000109E1 90                         	dc.b	$90 ; 
000109E2 04                         	dc.b	  4
000109E3 05                         	dc.b	  5
000109E4 00                         	dc.b	  0
000109E5 22                         	dc.b	$22 ; "
000109E6 A0                         	dc.b	$A0 ;  
000109E7 04                         	dc.b	  4
000109E8 05                         	dc.b	  5
000109E9 00                         	dc.b	  0
000109EA 16                         	dc.b	$16
000109EB B0                         	dc.b	$B0 ; °
000109EC 04                         	dc.b	  4
000109ED 05                         	dc.b	  5
000109EE 00                         	dc.b	  0
000109EF 22                         	dc.b	$22 ; "
000109F0 C0                         	dc.b	$C0 ; À
000109F1 04                         	dc.b	  4
000109F2 05                         	dc.b	  5
000109F3 00                         	dc.b	  0
000109F4 1E                         	dc.b	$1E
000109F5 D0                         	dc.b	$D0 ; Ð
000109F6 04                         	dc.b	  4
000109F7 05                         	dc.b	  5
000109F8 00                         	dc.b	  0
000109F9 42                         	dc.b	$42 ; B
000109FA E0                         	dc.b	$E0 ; à
000109FB 04                         	dc.b	  4
000109FC 01                         	dc.b	  1
000109FD 00                         	dc.b	  0
000109FE 0C                         	dc.b	 $C
000109FF 00                         	dc.b	  0
00010A00 04                         	dc.b	  4
00010A01 05                         	dc.b	  5
00010A02 00                         	dc.b	  0
00010A03 08                         	dc.b	  8
00010A04 08                         	dc.b	  8
00010A05 04                         	dc.b	  4
00010A06 0D                         	dc.b	 $D
00010A07 00                         	dc.b	  0
00010A08 26                         	dc.b	$26 ; &
00010A09 28                         	dc.b	$28 ; (
00010A0A 04                         	dc.b	  4
00010A0B 09                         	dc.b	  9
00010A0C 00                         	dc.b	  0
00010A0D 2E                         	dc.b	$2E ; .
00010A0E 48                         	dc.b	$48 ; H
00010A0F 04                         	dc.b	  4
00010A10 05                         	dc.b	  5
00010A11 00                         	dc.b	  0
00010A12 4A                         	dc.b	$4A ; J
00010A13 68                         	dc.b	$68 ; h
00010A14 0B                         unk_20F67A:	dc.b	 $B
00010A15 04                         	dc.b	  4
00010A16 05                         	dc.b	  5
00010A17 00                         	dc.b	  0
00010A18 46                         	dc.b	$46 ; F
00010A19 90                         	dc.b	$90 ; 
00010A1A 04                         	dc.b	  4
00010A1B 05                         	dc.b	  5
00010A1C 00                         	dc.b	  0
00010A1D 22                         	dc.b	$22 ; "
00010A1E A0                         	dc.b	$A0 ;  
00010A1F 04                         	dc.b	  4
00010A20 05                         	dc.b	  5
00010A21 00                         	dc.b	  0
00010A22 16                         	dc.b	$16
00010A23 B0                         	dc.b	$B0 ; °
00010A24 04                         	dc.b	  4
00010A25 05                         	dc.b	  5
00010A26 00                         	dc.b	  0
00010A27 22                         	dc.b	$22 ; "
00010A28 C0                         	dc.b	$C0 ; À
00010A29 04                         	dc.b	  4
00010A2A 05                         	dc.b	  5
00010A2B 00                         	dc.b	  0
00010A2C 1E                         	dc.b	$1E
00010A2D D0                         	dc.b	$D0 ; Ð
00010A2E 04                         	dc.b	  4
00010A2F 05                         	dc.b	  5
00010A30 00                         	dc.b	  0
00010A31 42                         	dc.b	$42 ; B
00010A32 E0                         	dc.b	$E0 ; à
00010A33 04                         	dc.b	  4
00010A34 01                         	dc.b	  1
00010A35 00                         	dc.b	  0
00010A36 0C                         	dc.b	 $C
00010A37 00                         	dc.b	  0
00010A38 04                         	dc.b	  4
00010A39 05                         	dc.b	  5
00010A3A 00                         	dc.b	  0
00010A3B 08                         	dc.b	  8
00010A3C 08                         	dc.b	  8
00010A3D 04                         	dc.b	  4
00010A3E 0D                         	dc.b	 $D
00010A3F 00                         	dc.b	  0
00010A40 26                         	dc.b	$26 ; &
00010A41 28                         	dc.b	$28 ; (
00010A42 04                         	dc.b	  4
00010A43 09                         	dc.b	  9
00010A44 00                         	dc.b	  0
00010A45 2E                         	dc.b	$2E ; .
00010A46 48                         	dc.b	$48 ; H
00010A47 04                         	dc.b	  4
00010A48 05                         	dc.b	  5
00010A49 00                         	dc.b	  0
00010A4A 4E                         	dc.b	$4E ; N
00010A4B 68                         	dc.b	$68 ; h
00010A4C 0E                         unk_20F6B2:	dc.b	 $E
00010A4D E0                         	dc.b	$E0 ; à
00010A4E 0D                         	dc.b	 $D
00010A4F 00                         	dc.b	  0
00010A50 52                         	dc.b	$52 ; R
00010A51 D4                         	dc.b	$D4 ; Ô
00010A52 E0                         	dc.b	$E0 ; à
00010A53 01                         	dc.b	  1
00010A54 00                         	dc.b	  0
00010A55 5A                         	dc.b	$5A ; Z
00010A56 F4                         	dc.b	$F4 ; ô
00010A57 F8                         	dc.b	$F8 ; ø
00010A58 0D                         	dc.b	 $D
00010A59 00                         	dc.b	  0
00010A5A 5C                         	dc.b	$5C ; \
00010A5B D4                         	dc.b	$D4 ; Ô
00010A5C F8                         	dc.b	$F8 ; ø
00010A5D 0D                         	dc.b	 $D
00010A5E 00                         	dc.b	  0
00010A5F 64                         	dc.b	$64 ; d
00010A60 FC                         	dc.b	$FC ; ü
00010A61 F8                         	dc.b	$F8 ; ø
00010A62 05                         	dc.b	  5
00010A63 00                         	dc.b	  0
00010A64 6C                         	dc.b	$6C ; l
00010A65 1C                         	dc.b	$1C
00010A66 10                         	dc.b	$10
00010A67 0D                         	dc.b	 $D
00010A68 00                         	dc.b	  0
00010A69 70                         	dc.b	$70 ; p
00010A6A D4                         	dc.b	$D4 ; Ô
00010A6B 10                         	dc.b	$10
00010A6C 0D                         	dc.b	 $D
00010A6D 00                         	dc.b	  0
00010A6E 64                         	dc.b	$64 ; d
00010A6F FC                         	dc.b	$FC ; ü
00010A70 10                         	dc.b	$10
00010A71 05                         	dc.b	  5
00010A72 00                         	dc.b	  0
00010A73 6C                         	dc.b	$6C ; l
00010A74 1C                         	dc.b	$1C
00010A75 F8                         	dc.b	$F8 ; ø
00010A76 0D                         	dc.b	 $D
00010A77 00                         	dc.b	  0
00010A78 82                         	dc.b	$82 ; ‚
00010A79 58                         	dc.b	$58 ; X
00010A7A F8                         	dc.b	$F8 ; ø
00010A7B 01                         	dc.b	  1
00010A7C 00                         	dc.b	  0
00010A7D 8A                         	dc.b	$8A ; Š
00010A7E 78                         	dc.b	$78 ; x
00010A7F 10                         	dc.b	$10
00010A80 0D                         	dc.b	 $D
00010A81 00                         	dc.b	  0
00010A82 78                         	dc.b	$78 ; x
00010A83 58                         	dc.b	$58 ; X
00010A84 10                         	dc.b	$10
00010A85 01                         	dc.b	  1
00010A86 00                         	dc.b	  0
00010A87 80                         	dc.b	$80 ; €
00010A88 78                         	dc.b	$78 ; x
00010A89 E0                         	dc.b	$E0 ; à
00010A8A 09                         	dc.b	  9
00010A8B 01                         	dc.b	  1
00010A8C BF                         	dc.b	$BF ; ¿
00010A8D 48                         	dc.b	$48 ; H
00010A8E E0                         	dc.b	$E0 ; à
00010A8F 0D                         	dc.b	 $D
00010A90 01                         	dc.b	  1
00010A91 C5                         	dc.b	$C5 ; Å
00010A92 60                         	dc.b	$60 ; `
00010A93 00                         	dc.b	  0
00010A94 0E                         unk_20F6FA:	dc.b	 $E
00010A95 E0                         	dc.b	$E0 ; à
00010A96 0D                         	dc.b	 $D
00010A97 00                         	dc.b	  0
00010A98 52                         	dc.b	$52 ; R
00010A99 D4                         	dc.b	$D4 ; Ô
00010A9A E0                         	dc.b	$E0 ; à
00010A9B 01                         	dc.b	  1
00010A9C 00                         	dc.b	  0
00010A9D 5A                         	dc.b	$5A ; Z
00010A9E F4                         	dc.b	$F4 ; ô
00010A9F F8                         	dc.b	$F8 ; ø
00010AA0 0D                         	dc.b	 $D
00010AA1 00                         	dc.b	  0
00010AA2 5C                         	dc.b	$5C ; \
00010AA3 D4                         	dc.b	$D4 ; Ô
00010AA4 F8                         	dc.b	$F8 ; ø
00010AA5 0D                         	dc.b	 $D
00010AA6 00                         	dc.b	  0
00010AA7 64                         	dc.b	$64 ; d
00010AA8 FC                         	dc.b	$FC ; ü
00010AA9 F8                         	dc.b	$F8 ; ø
00010AAA 05                         	dc.b	  5
00010AAB 00                         	dc.b	  0
00010AAC 6C                         	dc.b	$6C ; l
00010AAD 1C                         	dc.b	$1C
00010AAE 10                         	dc.b	$10
00010AAF 0D                         	dc.b	 $D
00010AB0 00                         	dc.b	  0
00010AB1 70                         	dc.b	$70 ; p
00010AB2 D4                         	dc.b	$D4 ; Ô
00010AB3 10                         	dc.b	$10
00010AB4 0D                         	dc.b	 $D
00010AB5 00                         	dc.b	  0
00010AB6 64                         	dc.b	$64 ; d
00010AB7 FC                         	dc.b	$FC ; ü
00010AB8 10                         	dc.b	$10
00010AB9 05                         	dc.b	  5
00010ABA 00                         	dc.b	  0
00010ABB 6C                         	dc.b	$6C ; l
00010ABC 1C                         	dc.b	$1C
00010ABD F8                         	dc.b	$F8 ; ø
00010ABE 0D                         	dc.b	 $D
00010ABF 00                         	dc.b	  0
00010AC0 82                         	dc.b	$82 ; ‚
00010AC1 58                         	dc.b	$58 ; X
00010AC2 F8                         	dc.b	$F8 ; ø
00010AC3 01                         	dc.b	  1
00010AC4 00                         	dc.b	  0
00010AC5 8A                         	dc.b	$8A ; Š
00010AC6 78                         	dc.b	$78 ; x
00010AC7 10                         	dc.b	$10
00010AC8 0D                         	dc.b	 $D
00010AC9 00                         	dc.b	  0
00010ACA 78                         	dc.b	$78 ; x
00010ACB 58                         	dc.b	$58 ; X
00010ACC 10                         	dc.b	$10
00010ACD 01                         	dc.b	  1
00010ACE 00                         	dc.b	  0
00010ACF 80                         	dc.b	$80 ; €
00010AD0 78                         	dc.b	$78 ; x
00010AD1 E0                         	dc.b	$E0 ; à
00010AD2 09                         	dc.b	  9
00010AD3 02                         	dc.b	  2
00010AD4 91                         	dc.b	$91 ; ‘
00010AD5 48                         	dc.b	$48 ; H
00010AD6 E0                         	dc.b	$E0 ; à
00010AD7 0D                         	dc.b	 $D
00010AD8 02                         	dc.b	  2
00010AD9 97                         	dc.b	$97 ; —
00010ADA 60                         	dc.b	$60 ; `
00010ADB 00                         	dc.b	  0
00010ADB 00                         	dc.b	  0
00010ADC                            	even
00010ADC                            
00010ADC 0130 0228 0168 015A        ObjTitleCard_Data:dc.w	$130, $228, $168, $15A
00010AE4 0100 0238 0178 025A        	dc.w	$100, $238, $178, $25A
00010AEC 0100 0240 0180 025A        	dc.w	$100, $240, $180, $25A
00010AF4 0100 0248 0188 025A        	dc.w	$100, $248, $188, $25A
00010AFC 0120 0230 0170 035A        	dc.w	$120, $230, $170, $35A
00010B04 0140 0248 0188 045A        	dc.w	$140, $248, $188, $45A
00010B0C 0100 01D0 0110 075A        	dc.w	$100, $1D0, $110, $75A
00010B14 0100 01D0 0110 085A        	dc.w	$100, $1D0, $110, $85A
00010B1C                            MapSpr_TitleCard:
00010B1C                            	include	"level/objects/titlecard/map.asm"
00010B1C                            .Map:
00010B1C 0000                       	dc.w	unk_20F794-.Map
00010B1E 0000                       	dc.w	unk_20F7B4-.Map
00010B20 0000                       	dc.w	unk_20F7C0-.Map
00010B22 0000                       	dc.w	unk_20F7CC-.Map
00010B24 0000                       	dc.w	unk_20F7E6-.Map
00010B26 0000                       	dc.w	unk_20F80A-.Map
00010B28 0000                       	dc.w	unk_20F82E-.Map
00010B2A 0000                       	dc.w	unk_20F852-.Map
00010B2C 0000                       	dc.w	unk_20F876-.Map
00010B2E 06                         unk_20F794:	dc.b	  6
00010B2F 90                         	dc.b	$90 ; 
00010B30 0F                         	dc.b	 $F
00010B31 00                         	dc.b	  0
00010B32 00                         	dc.b	  0
00010B33 F0                         	dc.b	$F0 ; ð
00010B34 B0                         	dc.b	$B0 ; °
00010B35 0F                         	dc.b	 $F
00010B36 00                         	dc.b	  0
00010B37 00                         	dc.b	  0
00010B38 F0                         	dc.b	$F0 ; ð
00010B39 D0                         	dc.b	$D0 ; Ð
00010B3A 0F                         	dc.b	 $F
00010B3B 00                         	dc.b	  0
00010B3C 00                         	dc.b	  0
00010B3D F0                         	dc.b	$F0 ; ð
00010B3E F0                         	dc.b	$F0 ; ð
00010B3F 0F                         	dc.b	 $F
00010B40 00                         	dc.b	  0
00010B41 00                         	dc.b	  0
00010B42 F0                         	dc.b	$F0 ; ð
00010B43 10                         	dc.b	$10
00010B44 0F                         	dc.b	 $F
00010B45 00                         	dc.b	  0
00010B46 00                         	dc.b	  0
00010B47 F0                         	dc.b	$F0 ; ð
00010B48 30                         	dc.b	$30 ; 0
00010B49 0F                         	dc.b	 $F
00010B4A 00                         	dc.b	  0
00010B4B 00                         	dc.b	  0
00010B4C F0                         	dc.b	$F0 ; ð
00010B4D 00                         	dc.b	  0
00010B4E 02                         unk_20F7B4:	dc.b	  2
00010B4F F8                         	dc.b	$F8 ; ø
00010B50 09                         	dc.b	  9
00010B51 00                         	dc.b	  0
00010B52 10                         	dc.b	$10
00010B53 E8                         	dc.b	$E8 ; è
00010B54 00                         	dc.b	  0
00010B55 08                         	dc.b	  8
00010B56 00                         	dc.b	  0
00010B57 16                         	dc.b	$16
00010B58 00                         	dc.b	  0
00010B59 00                         	dc.b	  0
00010B5A 02                         unk_20F7C0:	dc.b	  2
00010B5B E8                         	dc.b	$E8 ; è
00010B5C 02                         	dc.b	  2
00010B5D 00                         	dc.b	  0
00010B5E 19                         	dc.b	$19
00010B5F FC                         	dc.b	$FC ; ü
00010B60 00                         	dc.b	  0
00010B61 02                         	dc.b	  2
00010B62 00                         	dc.b	  0
00010B63 1C                         	dc.b	$1C
00010B64 FC                         	dc.b	$FC ; ü
00010B65 00                         	dc.b	  0
00010B66 05                         unk_20F7CC:	dc.b	  5
00010B67 F8                         	dc.b	$F8 ; ø
00010B68 0D                         	dc.b	 $D
00010B69 00                         	dc.b	  0
00010B6A 1F                         	dc.b	$1F
00010B6B B0                         	dc.b	$B0 ; °
00010B6C F8                         	dc.b	$F8 ; ø
00010B6D 0D                         	dc.b	 $D
00010B6E 00                         	dc.b	  0
00010B6F 27                         	dc.b	$27 ; '
00010B70 D0                         	dc.b	$D0 ; Ð
00010B71 F8                         	dc.b	$F8 ; ø
00010B72 0D                         	dc.b	 $D
00010B73 00                         	dc.b	  0
00010B74 2F                         	dc.b	$2F ; /
00010B75 F0                         	dc.b	$F0 ; ð
00010B76 F8                         	dc.b	$F8 ; ø
00010B77 0D                         	dc.b	 $D
00010B78 00                         	dc.b	  0
00010B79 37                         	dc.b	$37 ; 7
00010B7A 10                         	dc.b	$10
00010B7B F8                         	dc.b	$F8 ; ø
00010B7C 0D                         	dc.b	 $D
00010B7D 00                         	dc.b	  0
00010B7E 3F                         	dc.b	$3F ; ?
00010B7F 30                         	dc.b	$30 ; 0
00010B80 07                         unk_20F7E6:	dc.b	  7
00010B81 E8                         	dc.b	$E8 ; è
00010B82 06                         	dc.b	  6
00010B83 00                         	dc.b	  0
00010B84 47                         	dc.b	$47 ; G
00010B85 E8                         	dc.b	$E8 ; è
00010B86 00                         	dc.b	  0
00010B87 06                         	dc.b	  6
00010B88 10                         	dc.b	$10
00010B89 47                         	dc.b	$47 ; G
00010B8A E8                         	dc.b	$E8 ; è
00010B8B E8                         	dc.b	$E8 ; è
00010B8C 06                         	dc.b	  6
00010B8D 08                         	dc.b	  8
00010B8E 47                         	dc.b	$47 ; G
00010B8F 08                         	dc.b	  8
00010B90 00                         	dc.b	  0
00010B91 06                         	dc.b	  6
00010B92 18                         	dc.b	$18
00010B93 47                         	dc.b	$47 ; G
00010B94 08                         	dc.b	  8
00010B95 E8                         	dc.b	$E8 ; è
00010B96 04                         	dc.b	  4
00010B97 00                         	dc.b	  0
00010B98 4D                         	dc.b	$4D ; M
00010B99 F8                         	dc.b	$F8 ; ø
00010B9A F0                         	dc.b	$F0 ; ð
00010B9B 07                         	dc.b	  7
00010B9C 00                         	dc.b	  0
00010B9D 4F                         	dc.b	$4F ; O
00010B9E F8                         	dc.b	$F8 ; ø
00010B9F 10                         	dc.b	$10
00010BA0 04                         	dc.b	  4
00010BA1 00                         	dc.b	  0
00010BA2 57                         	dc.b	$57 ; W
00010BA3 F8                         	dc.b	$F8 ; ø
00010BA4 07                         unk_20F80A:	dc.b	  7
00010BA5 E8                         	dc.b	$E8 ; è
00010BA6 06                         	dc.b	  6
00010BA7 00                         	dc.b	  0
00010BA8 47                         	dc.b	$47 ; G
00010BA9 E8                         	dc.b	$E8 ; è
00010BAA 00                         	dc.b	  0
00010BAB 06                         	dc.b	  6
00010BAC 10                         	dc.b	$10
00010BAD 47                         	dc.b	$47 ; G
00010BAE E8                         	dc.b	$E8 ; è
00010BAF E8                         	dc.b	$E8 ; è
00010BB0 06                         	dc.b	  6
00010BB1 08                         	dc.b	  8
00010BB2 47                         	dc.b	$47 ; G
00010BB3 08                         	dc.b	  8
00010BB4 00                         	dc.b	  0
00010BB5 06                         	dc.b	  6
00010BB6 00                         	dc.b	  0
00010BB7 59                         	dc.b	$59 ; Y
00010BB8 08                         	dc.b	  8
00010BB9 E8                         	dc.b	$E8 ; è
00010BBA 05                         	dc.b	  5
00010BBB 00                         	dc.b	  0
00010BBC 5F                         	dc.b	$5F ; _
00010BBD F8                         	dc.b	$F8 ; ø
00010BBE F8                         	dc.b	$F8 ; ø
00010BBF 06                         	dc.b	  6
00010BC0 00                         	dc.b	  0
00010BC1 63                         	dc.b	$63 ; c
00010BC2 F8                         	dc.b	$F8 ; ø
00010BC3 10                         	dc.b	$10
00010BC4 04                         	dc.b	  4
00010BC5 00                         	dc.b	  0
00010BC6 57                         	dc.b	$57 ; W
00010BC7 F8                         	dc.b	$F8 ; ø
00010BC8 07                         unk_20F82E:	dc.b	  7
00010BC9 E8                         	dc.b	$E8 ; è
00010BCA 06                         	dc.b	  6
00010BCB 00                         	dc.b	  0
00010BCC 47                         	dc.b	$47 ; G
00010BCD E8                         	dc.b	$E8 ; è
00010BCE 00                         	dc.b	  0
00010BCF 06                         	dc.b	  6
00010BD0 10                         	dc.b	$10
00010BD1 47                         	dc.b	$47 ; G
00010BD2 E8                         	dc.b	$E8 ; è
00010BD3 E8                         	dc.b	$E8 ; è
00010BD4 06                         	dc.b	  6
00010BD5 08                         	dc.b	  8
00010BD6 47                         	dc.b	$47 ; G
00010BD7 08                         	dc.b	  8
00010BD8 00                         	dc.b	  0
00010BD9 06                         	dc.b	  6
00010BDA 18                         	dc.b	$18
00010BDB 47                         	dc.b	$47 ; G
00010BDC 08                         	dc.b	  8
00010BDD E8                         	dc.b	$E8 ; è
00010BDE 05                         	dc.b	  5
00010BDF 00                         	dc.b	  0
00010BE0 5F                         	dc.b	$5F ; _
00010BE1 F8                         	dc.b	$F8 ; ø
00010BE2 F8                         	dc.b	$F8 ; ø
00010BE3 05                         	dc.b	  5
00010BE4 00                         	dc.b	  0
00010BE5 69                         	dc.b	$69 ; i
00010BE6 F8                         	dc.b	$F8 ; ø
00010BE7 08                         	dc.b	  8
00010BE8 05                         	dc.b	  5
00010BE9 10                         	dc.b	$10
00010BEA 5F                         	dc.b	$5F ; _
00010BEB F8                         	dc.b	$F8 ; ø
00010BEC 07                         unk_20F852:	dc.b	  7
00010BED C8                         	dc.b	$C8 ; È
00010BEE 00                         	dc.b	  0
00010BEF 00                         	dc.b	  0
00010BF0 70                         	dc.b	$70 ; p
00010BF1 00                         	dc.b	  0
00010BF2 D0                         	dc.b	$D0 ; Ð
00010BF3 07                         	dc.b	  7
00010BF4 00                         	dc.b	  0
00010BF5 71                         	dc.b	$71 ; q
00010BF6 00                         	dc.b	  0
00010BF7 D8                         	dc.b	$D8 ; Ø
00010BF8 01                         	dc.b	  1
00010BF9 00                         	dc.b	  0
00010BFA 79                         	dc.b	$79 ; y
00010BFB 10                         	dc.b	$10
00010BFC F0                         	dc.b	$F0 ; ð
00010BFD 01                         	dc.b	  1
00010BFE 00                         	dc.b	  0
00010BFF 7B                         	dc.b	$7B ; {
00010C00 00                         	dc.b	  0
00010C01 E8                         	dc.b	$E8 ; è
00010C02 06                         	dc.b	  6
00010C03 00                         	dc.b	  0
00010C04 7D                         	dc.b	$7D ; }
00010C05 18                         	dc.b	$18
00010C06 E8                         	dc.b	$E8 ; è
00010C07 0E                         	dc.b	 $E
00010C08 00                         	dc.b	  0
00010C09 83                         	dc.b	$83 ; ƒ
00010C0A 28                         	dc.b	$28 ; (
00010C0B E8                         	dc.b	$E8 ; è
00010C0C 0E                         	dc.b	 $E
00010C0D 00                         	dc.b	  0
00010C0E 8F                         	dc.b	$8F ; 
00010C0F 48                         	dc.b	$48 ; H
00010C10 06                         unk_20F876:	dc.b	  6
00010C11 00                         	dc.b	  0
00010C12 00                         	dc.b	  0
00010C13 00                         	dc.b	  0
00010C14 70                         	dc.b	$70 ; p
00010C15 00                         	dc.b	  0
00010C16 08                         	dc.b	  8
00010C17 07                         	dc.b	  7
00010C18 00                         	dc.b	  0
00010C19 71                         	dc.b	$71 ; q
00010C1A 00                         	dc.b	  0
00010C1B 10                         	dc.b	$10
00010C1C 01                         	dc.b	  1
00010C1D 00                         	dc.b	  0
00010C1E 79                         	dc.b	$79 ; y
00010C1F 10                         	dc.b	$10
00010C20 28                         	dc.b	$28 ; (
00010C21 01                         	dc.b	  1
00010C22 00                         	dc.b	  0
00010C23 7B                         	dc.b	$7B ; {
00010C24 00                         	dc.b	  0
00010C25 00                         	dc.b	  0
00010C26 06                         	dc.b	  6
00010C27 00                         	dc.b	  0
00010C28 7D                         	dc.b	$7D ; }
00010C29 18                         	dc.b	$18
00010C2A 00                         	dc.b	  0
00010C2B 0A                         	dc.b	 $A
00010C2C 00                         	dc.b	  0
00010C2D 9B                         	dc.b	$9B ; ›
00010C2E 28                         	dc.b	$28 ; (
00010C2F 00                         	dc.b	  0
00010C2F 00                         	dc.b	  0
00010C30                            	even
00010C30                            ; -------------------------------------------------------------------------------
00010C30                            
00010C30                            ObjBreakableWall:
00010C30 7000                       	moveq	#0,d0
00010C32 1028 0024                  	move.b	oRoutine(a0),d0
00010C36 303B 0000                  	move.w	ObjBreakableWall_Index(pc,d0.w),d0
00010C3A 4EFB 0000                  	jmp	ObjBreakableWall_Index(pc,d0.w)
00010C3E                            ; End of function ObjBreakableWall
00010C3E                            
00010C3E                            ; -------------------------------------------------------------------------------
00010C3E 0000                       ObjBreakableWall_Index:dc.w	ObjBreakableWall_Init-ObjBreakableWall_Index
00010C40 0000                       	dc.w	ObjBreakableWall_Main-ObjBreakableWall_Index
00010C42 0000                       	dc.w	ObjBreakableWall_Fall-ObjBreakableWall_Index
00010C44                            ; -------------------------------------------------------------------------------
00010C44                            
00010C44                            ObjBreakableWall_Init:
00010C44 5428 0024                  	addq.b	#2,oRoutine(a0)
00010C48 0028 0004 0001             	ori.b	#4,oRender(a0)
00010C4E 117C 0001 0018             	move.b	#1,oPriority(a0)
00010C54 117C 0010 0017             	move.b	#$10,oXRadius(a0)
00010C5A 117C 0010 0019             	move.b	#$10,oWidth(a0)
00010C60 117C 0018 0016             	move.b	#$18,oYRadius(a0)
00010C66 117C 00EF 0020             	move.b	#$EF,oColType(a0)
00010C6C 317C 44BE 0002             	move.w	#$44BE,oTile(a0)
00010C72 217C 0000 0000 0004        	move.l	#MapSpr_BreakableWall,oMap(a0)
00010C7A 1168 0028 001A             	move.b	oSubtype(a0),oMapFrame(a0)
00010C80                            ; End of function ObjBreakableWall_Init
00010C80                            
00010C80                            ; -------------------------------------------------------------------------------
00010C80                            
00010C80                            ObjBreakableWall_Main:
00010C80 4A28 0021                  	tst.b	oColStatus(a0)
00010C84 6700                       	beq.s	.Solid
00010C86 4268 0020                  	clr.w	oColType(a0)
00010C8A 5428 0024                  	addq.b	#2,oRoutine(a0)
00010C8E 43F8 D000                  	lea	(v_player).w,a1
00010C92 3169 0010 002A             	move.w	oXVel(a1),oVar2A(a0)
00010C98 3169 0012 002E             	move.w	oYVel(a1),oVar2E(a0)
00010C9E 6000                       	bra.s	.BreakUp
00010CA0                            
00010CA0                            ; -------------------------------------------------------------------------------
00010CA0                            
00010CA0                            .Solid:
00010CA0 43F8 D000                  	lea	(v_player).w,a1
00010CA4 4EBA 9922                  	jsr	SolidObject
00010CA8 4EB8 4012                  	jsr	DrawObject
00010CAC 4EF8 7D1A                  	jmp	CheckObjDespawnTime
00010CB0                            
00010CB0                            ; -------------------------------------------------------------------------------
00010CB0                            
00010CB0                            .BreakUp:
00010CB0 303C 00B9                  	move.w	#$B9,d0
00010CB4 4EB8 2708                  	jsr	PlayFMSound
00010CB8 4DF8 D000                  	lea	(v_player).w,a6
00010CBC E0EE 0010                  	asr	oXVel(a6)
00010CC0 4BFA 0000                  	lea	ObjBreakableWall_PieceFrames(pc),a5
00010CC4 7000                       	moveq	#0,d0
00010CC6 1028 0028                  	move.b	oSubtype(a0),d0
00010CCA E748                       	lsl.w	#3,d0
00010CCC DAC0                       	adda.w	d0,a5
00010CCE 49FA 0000                  	lea	ObjBreakableWall_PieceDeltas(pc),a4
00010CD2 47FA 0000                  	lea	ObjBreakableWall_PieceSpeeds(pc),a3
00010CD6 7C05                       	moveq	#5,d6
00010CD8 3248                       	movea.w	a0,a1
00010CDA 6000                       	bra.s	.InitLoop
00010CDC                            
00010CDC                            ; -------------------------------------------------------------------------------
00010CDC                            
00010CDC                            .Loop:
00010CDC 4EB8 7CE4                  	jsr	FindObjSlot
00010CE0 6600                       	bne.s	ObjBreakableWall_Fall
00010CE2 1290                       	move.b	oID(a0),oID(a1)
00010CE4 1368 0024 0024             	move.b	oRoutine(a0),oRoutine(a1)
00010CEA 3368 0008 0008             	move.w	oX(a0),oX(a1)
00010CF0 3368 000C 000C             	move.w	oY(a0),oY(a1)
00010CF6 1368 0001 0001             	move.b	oRender(a0),oRender(a1)
00010CFC 1368 0018 0018             	move.b	oPriority(a0),oPriority(a1)
00010D02 2368 0004 0004             	move.l	oMap(a0),oMap(a1)
00010D08 3368 0002 0002             	move.w	oTile(a0),oTile(a1)
00010D0E                            
00010D0E                            .InitLoop:
00010D0E 137C 0008 0017             	move.b	#8,oXRadius(a1)
00010D14 137C 0008 0019             	move.b	#8,oWidth(a1)
00010D1A 137C 0008 0016             	move.b	#8,oYRadius(a1)
00010D20 135D 001A                  	move.b	(a5)+,oMapFrame(a1)
00010D24 301C                       	move.w	(a4)+,d0
00010D26 321C                       	move.w	(a4)+,d1
00010D28 D169 0008                  	add.w	d0,oX(a1)
00010D2C D369 000C                  	add.w	d1,oY(a1)
00010D30 201B                       	move.l	(a3)+,d0
00010D32 235B 002E                  	move.l	(a3)+,oVar2E(a1)
00010D36 4A6E 0010                  	tst.w	oXVel(a6)
00010D3A 6A00                       	bpl.s	.NoFlip
00010D3C 4480                       	neg.l	d0
00010D3E                            
00010D3E                            .NoFlip:
00010D3E 2340 002A                  	move.l	d0,oVar2A(a1)
00010D42 51CE FF98                  	dbf	d6,.Loop
00010D46                            ; End of function ObjBreakableWall_Main
00010D46                            
00010D46                            ; -------------------------------------------------------------------------------
00010D46                            
00010D46                            ObjBreakableWall_Fall:
00010D46 06A8 0000 4000 002E        	addi.l	#$4000,oVar2E(a0)
00010D4E 2028 002A                  	move.l	oVar2A(a0),d0
00010D52 2228 002E                  	move.l	oVar2E(a0),d1
00010D56 D1A8 0008                  	add.l	d0,oX(a0)
00010D5A D3A8 000C                  	add.l	d1,oY(a0)
00010D5E 43F8 D000                  	lea	(v_player).w,a1
00010D62 3029 000C                  	move.w	oY(a1),d0
00010D66 9068 000C                  	sub.w	oY(a0),d0
00010D6A 0C40 FF20                  	cmpi.w	#-$E0,d0
00010D6E 6F00                       	ble.s	.Destroy
00010D70 4EF8 4012                  	jmp	DrawObject
00010D74                            
00010D74                            ; -------------------------------------------------------------------------------
00010D74                            
00010D74                            .Destroy:
00010D74 4EF8 40BE                  	jmp	DeleteObject
00010D78                            ; End of function ObjBreakableWall_Fall
00010D78                            
00010D78                            ; -------------------------------------------------------------------------------
00010D78                            MapSpr_BreakableWall:
00010D78                            	include	"level/objects/breakablewall/map.asm"
00010D78                            .Map:
00010D78 0000                       	dc.w	unk_20FA0C-.Map
00010D7A 0000                       	dc.w	unk_20FA2B-.Map
00010D7C 0000                       	dc.w	unk_20FA4A-.Map
00010D7E 0000                       	dc.w	unk_20FA69-.Map
00010D80 0000                       	dc.w	unk_20FA88-.Map
00010D82 0000                       	dc.w	unk_20FAA7-.Map
00010D84 0000                       	dc.w	unk_20FAC6-.Map
00010D86 0000                       	dc.w	unk_20FAE5-.Map
00010D88 0000                       	dc.w	unk_20FB04-.Map
00010D8A 0000                       	dc.w	unk_20FB0A-.Map
00010D8C 0000                       	dc.w	unk_20FB10-.Map
00010D8E 0000                       	dc.w	unk_20FB16-.Map
00010D90 0000                       	dc.w	unk_20FB1C-.Map
00010D92 0000                       	dc.w	unk_20FB22-.Map
00010D94 06                         unk_20FA0C:	dc.b	  6
00010D95 E8                         	dc.b	$E8 ; è
00010D96 05                         	dc.b	  5
00010D97 00                         	dc.b	  0
00010D98 29                         	dc.b	$29 ; )
00010D99 F0                         	dc.b	$F0 ; ð
00010D9A F8                         	dc.b	$F8 ; ø
00010D9B 05                         	dc.b	  5
00010D9C 00                         	dc.b	  0
00010D9D 31                         	dc.b	$31 ; 1
00010D9E F0                         	dc.b	$F0 ; ð
00010D9F 08                         	dc.b	  8
00010DA0 05                         	dc.b	  5
00010DA1 00                         	dc.b	  0
00010DA2 29                         	dc.b	$29 ; )
00010DA3 F0                         	dc.b	$F0 ; ð
00010DA4 E8                         	dc.b	$E8 ; è
00010DA5 05                         	dc.b	  5
00010DA6 00                         	dc.b	  0
00010DA7 2D                         	dc.b	$2D ; -
00010DA8 00                         	dc.b	  0
00010DA9 F8                         	dc.b	$F8 ; ø
00010DAA 05                         	dc.b	  5
00010DAB 00                         	dc.b	  0
00010DAC 35                         	dc.b	$35 ; 5
00010DAD 00                         	dc.b	  0
00010DAE 08                         	dc.b	  8
00010DAF 05                         	dc.b	  5
00010DB0 00                         	dc.b	  0
00010DB1 2D                         	dc.b	$2D ; -
00010DB2 00                         	dc.b	  0
00010DB3 06                         unk_20FA2B:	dc.b	  6
00010DB4 E8                         	dc.b	$E8 ; è
00010DB5 05                         	dc.b	  5
00010DB6 00                         	dc.b	  0
00010DB7 29                         	dc.b	$29 ; )
00010DB8 F0                         	dc.b	$F0 ; ð
00010DB9 F8                         	dc.b	$F8 ; ø
00010DBA 05                         	dc.b	  5
00010DBB 00                         	dc.b	  0
00010DBC 31                         	dc.b	$31 ; 1
00010DBD F0                         	dc.b	$F0 ; ð
00010DBE 08                         	dc.b	  8
00010DBF 05                         	dc.b	  5
00010DC0 00                         	dc.b	  0
00010DC1 29                         	dc.b	$29 ; )
00010DC2 F0                         	dc.b	$F0 ; ð
00010DC3 E8                         	dc.b	$E8 ; è
00010DC4 05                         	dc.b	  5
00010DC5 00                         	dc.b	  0
00010DC6 33                         	dc.b	$33 ; 3
00010DC7 00                         	dc.b	  0
00010DC8 F8                         	dc.b	$F8 ; ø
00010DC9 05                         	dc.b	  5
00010DCA 00                         	dc.b	  0
00010DCB 2B                         	dc.b	$2B ; +
00010DCC 00                         	dc.b	  0
00010DCD 08                         	dc.b	  8
00010DCE 05                         	dc.b	  5
00010DCF 00                         	dc.b	  0
00010DD0 33                         	dc.b	$33 ; 3
00010DD1 00                         	dc.b	  0
00010DD2 06                         unk_20FA4A:	dc.b	  6
00010DD3 E8                         	dc.b	$E8 ; è
00010DD4 05                         	dc.b	  5
00010DD5 00                         	dc.b	  0
00010DD6 33                         	dc.b	$33 ; 3
00010DD7 F0                         	dc.b	$F0 ; ð
00010DD8 F8                         	dc.b	$F8 ; ø
00010DD9 05                         	dc.b	  5
00010DDA 00                         	dc.b	  0
00010DDB 2B                         	dc.b	$2B ; +
00010DDC F0                         	dc.b	$F0 ; ð
00010DDD 08                         	dc.b	  8
00010DDE 05                         	dc.b	  5
00010DDF 00                         	dc.b	  0
00010DE0 33                         	dc.b	$33 ; 3
00010DE1 F0                         	dc.b	$F0 ; ð
00010DE2 E8                         	dc.b	$E8 ; è
00010DE3 05                         	dc.b	  5
00010DE4 00                         	dc.b	  0
00010DE5 33                         	dc.b	$33 ; 3
00010DE6 00                         	dc.b	  0
00010DE7 F8                         	dc.b	$F8 ; ø
00010DE8 05                         	dc.b	  5
00010DE9 00                         	dc.b	  0
00010DEA 2B                         	dc.b	$2B ; +
00010DEB 00                         	dc.b	  0
00010DEC 08                         	dc.b	  8
00010DED 05                         	dc.b	  5
00010DEE 00                         	dc.b	  0
00010DEF 33                         	dc.b	$33 ; 3
00010DF0 00                         	dc.b	  0
00010DF1 06                         unk_20FA69:	dc.b	  6
00010DF2 E8                         	dc.b	$E8 ; è
00010DF3 05                         	dc.b	  5
00010DF4 00                         	dc.b	  0
00010DF5 33                         	dc.b	$33 ; 3
00010DF6 F0                         	dc.b	$F0 ; ð
00010DF7 F8                         	dc.b	$F8 ; ø
00010DF8 05                         	dc.b	  5
00010DF9 00                         	dc.b	  0
00010DFA 2B                         	dc.b	$2B ; +
00010DFB F0                         	dc.b	$F0 ; ð
00010DFC 08                         	dc.b	  8
00010DFD 05                         	dc.b	  5
00010DFE 00                         	dc.b	  0
00010DFF 33                         	dc.b	$33 ; 3
00010E00 F0                         	dc.b	$F0 ; ð
00010E01 E8                         	dc.b	$E8 ; è
00010E02 05                         	dc.b	  5
00010E03 00                         	dc.b	  0
00010E04 2D                         	dc.b	$2D ; -
00010E05 00                         	dc.b	  0
00010E06 F8                         	dc.b	$F8 ; ø
00010E07 05                         	dc.b	  5
00010E08 00                         	dc.b	  0
00010E09 35                         	dc.b	$35 ; 5
00010E0A 00                         	dc.b	  0
00010E0B 08                         	dc.b	  8
00010E0C 05                         	dc.b	  5
00010E0D 00                         	dc.b	  0
00010E0E 2D                         	dc.b	$2D ; -
00010E0F 00                         	dc.b	  0
00010E10 06                         unk_20FA88:	dc.b	  6
00010E11 E8                         	dc.b	$E8 ; è
00010E12 05                         	dc.b	  5
00010E13 00                         	dc.b	  0
00010E14 31                         	dc.b	$31 ; 1
00010E15 F0                         	dc.b	$F0 ; ð
00010E16 F8                         	dc.b	$F8 ; ø
00010E17 05                         	dc.b	  5
00010E18 00                         	dc.b	  0
00010E19 29                         	dc.b	$29 ; )
00010E1A F0                         	dc.b	$F0 ; ð
00010E1B 08                         	dc.b	  8
00010E1C 05                         	dc.b	  5
00010E1D 00                         	dc.b	  0
00010E1E 31                         	dc.b	$31 ; 1
00010E1F F0                         	dc.b	$F0 ; ð
00010E20 E8                         	dc.b	$E8 ; è
00010E21 05                         	dc.b	  5
00010E22 00                         	dc.b	  0
00010E23 35                         	dc.b	$35 ; 5
00010E24 00                         	dc.b	  0
00010E25 F8                         	dc.b	$F8 ; ø
00010E26 05                         	dc.b	  5
00010E27 00                         	dc.b	  0
00010E28 2D                         	dc.b	$2D ; -
00010E29 00                         	dc.b	  0
00010E2A 08                         	dc.b	  8
00010E2B 05                         	dc.b	  5
00010E2C 00                         	dc.b	  0
00010E2D 35                         	dc.b	$35 ; 5
00010E2E 00                         	dc.b	  0
00010E2F 06                         unk_20FAA7:	dc.b	  6
00010E30 E8                         	dc.b	$E8 ; è
00010E31 05                         	dc.b	  5
00010E32 00                         	dc.b	  0
00010E33 31                         	dc.b	$31 ; 1
00010E34 F0                         	dc.b	$F0 ; ð
00010E35 F8                         	dc.b	$F8 ; ø
00010E36 05                         	dc.b	  5
00010E37 00                         	dc.b	  0
00010E38 29                         	dc.b	$29 ; )
00010E39 F0                         	dc.b	$F0 ; ð
00010E3A 08                         	dc.b	  8
00010E3B 05                         	dc.b	  5
00010E3C 00                         	dc.b	  0
00010E3D 31                         	dc.b	$31 ; 1
00010E3E F0                         	dc.b	$F0 ; ð
00010E3F E8                         	dc.b	$E8 ; è
00010E40 05                         	dc.b	  5
00010E41 00                         	dc.b	  0
00010E42 2B                         	dc.b	$2B ; +
00010E43 00                         	dc.b	  0
00010E44 F8                         	dc.b	$F8 ; ø
00010E45 05                         	dc.b	  5
00010E46 00                         	dc.b	  0
00010E47 33                         	dc.b	$33 ; 3
00010E48 00                         	dc.b	  0
00010E49 08                         	dc.b	  8
00010E4A 05                         	dc.b	  5
00010E4B 00                         	dc.b	  0
00010E4C 2B                         	dc.b	$2B ; +
00010E4D 00                         	dc.b	  0
00010E4E 06                         unk_20FAC6:	dc.b	  6
00010E4F E8                         	dc.b	$E8 ; è
00010E50 05                         	dc.b	  5
00010E51 00                         	dc.b	  0
00010E52 2B                         	dc.b	$2B ; +
00010E53 F0                         	dc.b	$F0 ; ð
00010E54 F8                         	dc.b	$F8 ; ø
00010E55 05                         	dc.b	  5
00010E56 00                         	dc.b	  0
00010E57 33                         	dc.b	$33 ; 3
00010E58 F0                         	dc.b	$F0 ; ð
00010E59 08                         	dc.b	  8
00010E5A 05                         	dc.b	  5
00010E5B 00                         	dc.b	  0
00010E5C 2B                         	dc.b	$2B ; +
00010E5D F0                         	dc.b	$F0 ; ð
00010E5E E8                         	dc.b	$E8 ; è
00010E5F 05                         	dc.b	  5
00010E60 00                         	dc.b	  0
00010E61 2B                         	dc.b	$2B ; +
00010E62 00                         	dc.b	  0
00010E63 F8                         	dc.b	$F8 ; ø
00010E64 05                         	dc.b	  5
00010E65 00                         	dc.b	  0
00010E66 33                         	dc.b	$33 ; 3
00010E67 00                         	dc.b	  0
00010E68 08                         	dc.b	  8
00010E69 05                         	dc.b	  5
00010E6A 00                         	dc.b	  0
00010E6B 2B                         	dc.b	$2B ; +
00010E6C 00                         	dc.b	  0
00010E6D 06                         unk_20FAE5:	dc.b	  6
00010E6E E8                         	dc.b	$E8 ; è
00010E6F 05                         	dc.b	  5
00010E70 00                         	dc.b	  0
00010E71 2B                         	dc.b	$2B ; +
00010E72 F0                         	dc.b	$F0 ; ð
00010E73 F8                         	dc.b	$F8 ; ø
00010E74 05                         	dc.b	  5
00010E75 00                         	dc.b	  0
00010E76 33                         	dc.b	$33 ; 3
00010E77 F0                         	dc.b	$F0 ; ð
00010E78 08                         	dc.b	  8
00010E79 05                         	dc.b	  5
00010E7A 00                         	dc.b	  0
00010E7B 2B                         	dc.b	$2B ; +
00010E7C F0                         	dc.b	$F0 ; ð
00010E7D E8                         	dc.b	$E8 ; è
00010E7E 05                         	dc.b	  5
00010E7F 00                         	dc.b	  0
00010E80 35                         	dc.b	$35 ; 5
00010E81 00                         	dc.b	  0
00010E82 F8                         	dc.b	$F8 ; ø
00010E83 05                         	dc.b	  5
00010E84 00                         	dc.b	  0
00010E85 2D                         	dc.b	$2D ; -
00010E86 00                         	dc.b	  0
00010E87 08                         	dc.b	  8
00010E88 05                         	dc.b	  5
00010E89 00                         	dc.b	  0
00010E8A 35                         	dc.b	$35 ; 5
00010E8B 00                         	dc.b	  0
00010E8C 01                         unk_20FB04:	dc.b	  1
00010E8D F8                         	dc.b	$F8 ; ø
00010E8E 05                         	dc.b	  5
00010E8F 00                         	dc.b	  0
00010E90 29                         	dc.b	$29 ; )
00010E91 F8                         	dc.b	$F8 ; ø
00010E92 01                         unk_20FB0A:	dc.b	  1
00010E93 F8                         	dc.b	$F8 ; ø
00010E94 05                         	dc.b	  5
00010E95 00                         	dc.b	  0
00010E96 31                         	dc.b	$31 ; 1
00010E97 F8                         	dc.b	$F8 ; ø
00010E98 01                         unk_20FB10:	dc.b	  1
00010E99 F8                         	dc.b	$F8 ; ø
00010E9A 05                         	dc.b	  5
00010E9B 00                         	dc.b	  0
00010E9C 33                         	dc.b	$33 ; 3
00010E9D F8                         	dc.b	$F8 ; ø
00010E9E 01                         unk_20FB16:	dc.b	  1
00010E9F F8                         	dc.b	$F8 ; ø
00010EA0 05                         	dc.b	  5
00010EA1 00                         	dc.b	  0
00010EA2 2B                         	dc.b	$2B ; +
00010EA3 F8                         	dc.b	$F8 ; ø
00010EA4 01                         unk_20FB1C:	dc.b	  1
00010EA5 F8                         	dc.b	$F8 ; ø
00010EA6 05                         	dc.b	  5
00010EA7 00                         	dc.b	  0
00010EA8 2D                         	dc.b	$2D ; -
00010EA9 F8                         	dc.b	$F8 ; ø
00010EAA 01                         unk_20FB22:	dc.b	  1
00010EAB F8                         	dc.b	$F8 ; ø
00010EAC 05                         	dc.b	  5
00010EAD 00                         	dc.b	  0
00010EAE 35                         	dc.b	$35 ; 5
00010EAF F8                         	dc.b	$F8 ; ø
00010EAF F8                         	dc.b	$F8 ; ø
00010EB0                            	even
00010EB0 0809 080C 0D0C 0000        ObjBreakableWall_PieceFrames:dc.b	8, 9,	8, $C, $D, $C, 0, 0
00010EB8 0809 080A 0B0A 0000        	dc.b	8,	9, 8, $A, $B, $A, 0, 0
00010EC0 0A0B 0A0A 0B0A 0000        	dc.b	$A, $B, $A, $A, $B, $A, 0,	0
00010EC8 0A0B 0A0C 0D0C 0000        	dc.b	$A, $B, $A, $C, $D, $C, 0,	0
00010ED0 0908 090D 0C0D 0000        	dc.b	9,	8, 9, $D, $C, $D, 0, 0
00010ED8 0908 090B 0A0B 0000        	dc.b	9,	8, 9, $B, $A, $B, 0, 0
00010EE0 0B0A 0B0B 0A0B 0000        	dc.b	$B, $A, $B, $B, $A, $B, 0,	0
00010EE8 0B0A 0B0D 0C0D 0000        	dc.b	$B, $A, $B, $D, $C, $D, 0,	0
00010EF0 FFF8 FFF0                  ObjBreakableWall_PieceDeltas:dc.w	$FFF8, $FFF0
00010EF4 0000 0010                  	dc.w	0,	$10
00010EF8 0000 0020                  	dc.w	0,	$20
00010EFC 0010 0000                  	dc.w	$10, 0
00010F00 0010 0010                  	dc.w	$10, $10
00010F04 0010 0020                  	dc.w	$10, $20
00010F08 FFFD 097C                  ObjBreakableWall_PieceSpeeds:dc.w	$FFFD, $97C
00010F0C FFFE B750                  	dc.w	$FFFE, $B750
00010F10 FFFC 25EE                  	dc.w	$FFFC, $25EE
00010F14 0000 0000                  	dc.w	0,	0
00010F18 FFFD 097C                  	dc.w	$FFFD, $97C
00010F1C 0001 48B0                  	dc.w	1,	$48B0
00010F20 FFFD 097C                  	dc.w	$FFFD, $97C
00010F24 FFFE 4445                  	dc.w	$FFFE, $4445
00010F28 FFFC 97B5                  	dc.w	$FFFC, $97B5
00010F2C 0000 0000                  	dc.w	0,	0
00010F30 FFFD 097C                  	dc.w	$FFFD, $97C
00010F34 0001 BBBB                  	dc.w	1,	$BBBB
00010F38                            ; -------------------------------------------------------------------------------
00010F38                            ; Attributes: thunk
00010F38                            
00010F38                            JmpTo_LoadShieldArt:
00010F38 4EF8 6A36                  	jmp	LoadShieldArt
00010F3C                            ; End of function JmpTo_LoadShieldArt
00010F3C                            
00010F3C                            ; -------------------------------------------------------------------------------
00010F3C                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00010F3C                            	dc.l (plc1<<24)+lvlgfx
00010F3C                            	dc.l (plc2<<24)+sixteen
00010F3C                            	dc.l twofivesix
00010F3C                            	dc.b 0, music, pal, pal
00010F3C                            	endm
00010F3C                            LevelHeaders:
00010F3C                            LevelDataIndex:
00010F3C                            
00010F3C 0000 0000 0000 0000 0000+  	lhead	0,	0,	0,	MapNem_LevelBlocks,	0,	0,	5	; Palmtree Panic Zone
00010F4C                            
00010F4C                            LevelDataBlocks:
00010F4C                            ; Palmtree Panic Zone
00010F4C 0000 0000                  	            dc.l MapNem_PPZ_P_Blocks ;Past Act 1
00010F50 0000 0000                  				dc.l MapNem_PPZ_P_Blocks ;Past Act 1
00010F54 0000 0000                                  dc.l MapNem_LevelBlocks ;Present Act 1
00010F58 0000 0000                                  dc.l MapNem_PPZ_BF_Blocks ;Future Act 1
00010F5C 0000 0000                                  dc.l MapNem_PPZ_GF_Blocks ;Good Future Act 1
00010F60                            
00010F60 0000 0000                  	            dc.l PPZ_2_BlocksP ;Past Act 2
00010F64 0000 0000                                  dc.l PPZ_2_Blocks ;Present Act 2
00010F68 0000 0000                                  dc.l PPZ_2_BlocksBF ;Future Act 2
00010F6C 0000 0000                                  dc.l PPZ_2_BlocksGF ;Good Future Act 2
00010F70                            
00010F70 0000 0000                  	            dc.l PPZ_3_Blocks ;Past Act 3
00010F74 0000 0000                                  dc.l PPZ_3_Blocks ;Present Act 3
00010F78 0000 0000                                  dc.l PPZ_3_Blocks ;Future Act 3
00010F7C 0000 0000                                  dc.l PPZ_3_Blocks_BF ;Good Future Act 3	
00010F80                            
00010F80 0000 0000                  	            dc.l MapNem_LevelBlocks ;Past Act 4
00010F84 0000 0000                                  dc.l MapNem_LevelBlocks ;Present Act 4
00010F88 0000 0000                                  dc.l MapNem_LevelBlocks ;Future Act 4
00010F8C 0000 0000                                  dc.l MapNem_LevelBlocks ;Good Future Act 4			
00010F90                            				even						
00010F90                            LevelPaletteID:
00010F90 05                         	dc.b	5
00010F91 05                         	dc.b	5
00010F92                            	even
00010F92                            Level_PalleteID: 
00010F92 05                                         dc.b  5
00010F93 05                                         dc.b  5
00010F94 05                                         dc.b  5
00010F95 05                                         dc.b  5	
00010F96 05                         				dc.b  5
00010F97 05                                         dc.b  5
00010F98 05                                         dc.b  5
00010F99 05                                         dc.b  5	
00010F9A                            				even
00010F9A                            LevelPLCID:
00010F9A 00                                         dc.b 0 ;Palmtree Panic Zone
00010F9B 17                                         dc.b $17
00010F9C 1B                                         dc.b $1B
00010F9D 00                                         dc.b 0
00010F9E 00                                         dc.b 0
00010F9F 00                                         dc.b 0
00010FA0                                            even
00010FA0                            LevelPLCID_Past:
00010FA0 14                                         dc.b $14 ;Palmtree Panic Zone
00010FA1 17                                         dc.b $17
00010FA2 1B                                         dc.b $1B
00010FA3 00                                         dc.b 0
00010FA4 00                                         dc.b 0
00010FA5 00                                         dc.b 0
00010FA6                                            even													
00010FA6                            PLCIndex:
00010FA6 0000                       	dc.w	PLC_Level-PLCIndex        ;0
00010FA8 0000                       	dc.w	PLC_Std-PLCIndex          ;1
00010FAA 0000                       	dc.w	PLC_Cam1_Full-PLCIndex    ;2
00010FAC 0000                       	dc.w	PLC_Level-PLCIndex        ;3
00010FAE 0000                       	dc.w	PLC_Cam2_Full-PLCIndex    ;4
00010FB0 0000                       	dc.w	PLC_Cam3_Full-PLCIndex    ;5
00010FB2 0000                       	dc.w	PLC_Cam4_Full-PLCIndex    ;6
00010FB4 0000                       	dc.w	PLC_Cam5_Full-PLCIndex    ;7
00010FB6 0000                       	dc.w	PLC_Cam1_Incr-PLCIndex    ;8
00010FB8 0000                       	dc.w	PLC_Cam2_Incr-PLCIndex    ;9
00010FBA 0000                       	dc.w	PLC_Cam3_Incr-PLCIndex    ;$A
00010FBC 0000                       	dc.w	PLC_Cam4_Incr-PLCIndex    ;$B
00010FBE 0000                       	dc.w	PLC_Cam5_Incr-PLCIndex    ;$C
00010FC0 0000                       	dc.w	PLC_Cam1_Full-PLCIndex    ;$D
00010FC2 0000                       	dc.w	PLC_Cam1_Full-PLCIndex    ;$E
00010FC4 0000                       	dc.w	PLC_Cam1_Full-PLCIndex    ;$F
00010FC6 0000                       	dc.w	PLC_Results-PLCIndex      ;$10
00010FC8 0000                       	dc.w	PLC_Cam1_Full-PLCIndex    ;$11
00010FCA 0000                       	dc.w	PLC_Signpost-PLCIndex     ;$12
00010FCC 0000                       	dc.w	PLC_Title-PLCIndex        ;$13
00010FCE                            ; Palmtree Panic Zone Act 1
00010FCE 0000                       	dc.w	PLC_PPZ_P-PLCIndex        ;$14
00010FD0 0000                       	dc.w	PLC_PPZ_F-PLCIndex        ;$15
00010FD2 0000                       	dc.w	PLC_PPZ_GF-PLCIndex       ;$16
00010FD4                            ; Palmtree Panic Zone Act 2
00010FD4 0000                           dc.w	PLC_PPZ2-PLCIndex         ;$17
00010FD6 0000                           dc.w 	PLC_PPZ2_P-PLCIndex       ;$18
00010FD8 0000                           dc.w 	PLC_PPZ2_F-PLCIndex       ;$19
00010FDA 0000                           dc.w 	PLC_PPZ2_GF-PLCIndex      ;$1A
00010FDC                            ; Palmtree Panic Zone Act 3	
00010FDC 0000                       	dc.w	PLC_PPZ3-PLCIndex         ;$1B
00010FDE 0000                           dc.w 	PLC_PPZ3_F-PLCIndex       ;$1C
00010FE0 0000                       	dc.w 	PLC_PPZ3_Eggman-PLCIndex       ;$1D
00010FE2                            
00010FE2 0001                       PLC_Level:	dc.w	1
00010FE4 0000 0000                  	dc.l	ArtNem_LevelArt
00010FE8 0000                       	dc.w	0
00010FEA 0000 0000                  	dc.l	ArtNem_ContinuePost
00010FEE D960                       	dc.w	$D960
00010FF0 0000                       PLC_Title:	dc.w	0
00010FF2 0000 0000                  	dc.l	Nem_TitleFg
00010FF6 0000                       	dc.w	0
00010FF8 000D                       PLC_Std:	dc.w	$D
00010FFA 0000 0000                  	dc.l	ArtNem_Spikes
00010FFE 6400                       	dc.w	$6400
00011000 0000 0000                  	dc.l	ArtNem_SpinTubeDoors
00011004 6500                       	dc.w	$6500
00011006 0000 0000                  	dc.l	ArtNem_HiddenPlatforms
0001100A 6680                       	dc.w	$6680
0001100C 0000 0000                  	dc.l	ArtNem_TitleCard
00011010 6C00                       	dc.w	$6C00
00011012 0000 0000                  	dc.l	ArtNem_TitleCardText
00011016 7A00                       	dc.w	$7A00
00011018 0000 0000                  	dc.l	ArtNem_DiagonalSpring
0001101C 9200                       	dc.w	$9200
0001101E 0000 0000                  	dc.l	ArtNem_CollapsePlatform
00011022 97C0                       	dc.w	$97C0
00011024 0000 0000                  	dc.l	ArtNem_Springs
00011028 A400                       	dc.w	$A400
0001102A 0000 0000                  	dc.l	ArtNem_HUD
0001102E AD00                       	dc.w	$AD00
00011030 0000 0000                  	dc.l	ArtNem_MonitorTimePosts
00011034 B500                       	dc.w	$B500
00011036 0000 0000                  	dc.l	ArtNem_Explosions
0001103A D000                       	dc.w	$D000
0001103C 0000 0000                  	dc.l	ArtNem_Points
00011040 D8C0                       	dc.w	$D8C0
00011042 0000 0000                  	dc.l	ArtNem_Flower
00011046 DAE0                       	dc.w	$DAE0
00011048 0000 0000                  	dc.l	ArtNem_Rings
0001104C F5C0                       	dc.w	$F5C0
0001104E 0006                       PLC_Cam1_Full:	dc.w	6
00011050 0000 0000                  	dc.l	ArtNem_GreyRock
00011054 6E80                       	dc.w	$6E80
00011056 0000 0000                  	dc.l	ArtNem_PPZAnimals
0001105A 7100                       	dc.w	$7100
0001105C 0000 0000                  	dc.l	ArtNem_Mosqui
00011060 7400                       	dc.w	$7400
00011062 0000 0000                  	dc.l	ArtNem_Anton
00011066 8120                       	dc.w	$8120
00011068 0000 0000                  	dc.l	ArtNem_StarBush
0001106C 8480                       	dc.w	$8480
0001106E 0000 0000                  	dc.l	ArtNem_LargeFan
00011072 8820                       	dc.w	$8820
00011074 0000 0000                  	dc.l	ArtNem_GoalPost
00011078 9EE0                       	dc.w	$9EE0
0001107A 0005                       PLC_Cam2_Full:	dc.w	5
0001107C 0000 0000                  	dc.l	ArtNem_GreyRock
00011080 6E80                       	dc.w	$6E80
00011082 0000 0000                  	dc.l	ArtNem_PPZAnimals
00011086 7100                       	dc.w	$7100
00011088 0000 0000                  	dc.l	ArtNem_PataBata
0001108C 7600                       	dc.w	$7600
0001108E 0000 0000                  	dc.l	ArtNem_Anton
00011092 8120                       	dc.w	$8120
00011094 0000 0000                  	dc.l	ArtNem_MotorizedBeetle
00011098 8500                       	dc.w	$8500
0001109A 0000 0000                  	dc.l	ArtNem_GoalPost
0001109E 9EE0                       	dc.w	$9EE0
000110A0 0008                       PLC_Cam3_Full:	dc.w	8
000110A2 0000 0000                  	dc.l	ArtNem_GreyRock
000110A6 6E80                       	dc.w	$6E80
000110A8 0000 0000                  	dc.l	ArtNem_PPZAnimals
000110AC 7100                       	dc.w	$7100
000110AE 0000 0000                  	dc.l	ArtNem_SonicHole
000110B2 7400                       	dc.w	$7400
000110B4 0000 0000                  	dc.l	ArtNem_PataBata
000110B8 7600                       	dc.w	$7600
000110BA 0000 0000                  	dc.l	ArtNem_WaterSplash
000110BE 7C80                       	dc.w	$7C80
000110C0 0000 0000                  	dc.l	ArtNem_RotPlatform
000110C4 8120                       	dc.w	$8120
000110C6 0000 0000                  	dc.l	ArtNem_HollowLogBG
000110CA 8300                       	dc.w	$8300
000110CC 0000 0000                  	dc.l	ArtNem_MotorizedBeetle
000110D0 8500                       	dc.w	$8500
000110D2 0000 0000                  	dc.l	ArtNem_GoalPost
000110D6 9EE0                       	dc.w	$9EE0
000110D8 0006                       PLC_Cam4_Full:	dc.w	6
000110DA 0000 0000                  	dc.l	ArtNem_Anton
000110DE 6E00                       	dc.w	$6E00
000110E0 0000 0000                  	dc.l	ArtNem_PPZAnimals
000110E4 7100                       	dc.w	$7100
000110E6 0000 0000                  	dc.l	ArtNem_Mosqui
000110EA 7400                       	dc.w	$7400
000110EC 0000 0000                  	dc.l	ArtNem_RotPlatform
000110F0 8120                       	dc.w	$8120
000110F2 0000 0000                  	dc.l	ArtNem_StarBush
000110F6 8480                       	dc.w	$8480
000110F8 0000 0000                  	dc.l	ArtNem_LargeFan
000110FC 8820                       	dc.w	$8820
000110FE 0000 0000                  	dc.l	ArtNem_GoalPost
00011102 9EE0                       	dc.w	$9EE0
00011104 0004                       PLC_Cam5_Full:	dc.w	4
00011106 0000 0000                  	dc.l	ArtNem_AmyRose
0001110A 6E00                       	dc.w	$6E00
0001110C 0000 0000                  	dc.l	ArtNem_AgedTeleporter
00011110 8120                       	dc.w	$8120
00011112 0000 0000                  	dc.l	ArtNem_StarBush
00011116 8480                       	dc.w	$8480
00011118 0000 0000                  	dc.l	ArtNem_LargeFan
0001111C 8820                       	dc.w	$8820
0001111E 0000 0000                  	dc.l	ArtNem_GoalPost
00011122 9EE0                       	dc.w	$9EE0
00011124 0005                       PLC_Cam1_Incr:	dc.w	5
00011126 0000 0000                  	dc.l	ArtNem_GreyRock
0001112A 6E80                       	dc.w	$6E80
0001112C 0000 0000                  	dc.l	ArtNem_PPZAnimals
00011130 7100                       	dc.w	$7100
00011132 0000 0000                  	dc.l	ArtNem_Mosqui
00011136 7400                       	dc.w	$7400
00011138 0000 0000                  	dc.l	ArtNem_Anton
0001113C 8120                       	dc.w	$8120
0001113E 0000 0000                  	dc.l	ArtNem_StarBush
00011142 8480                       	dc.w	$8480
00011144 0000 0000                  	dc.l	ArtNem_LargeFan
00011148 8820                       	dc.w	$8820
0001114A 0002                       PLC_Cam2_Incr:	dc.w	2
0001114C 0000 0000                  	dc.l	ArtNem_PataBata
00011150 7600                       	dc.w	$7600
00011152 0000 0000                  	dc.l	ArtNem_Anton
00011156 8120                       	dc.w	$8120
00011158 0000 0000                  	dc.l	ArtNem_MotorizedBeetle
0001115C 8500                       	dc.w	$8500
0001115E 0006                       PLC_Cam3_Incr:	dc.w	6
00011160 0000 0000                  	dc.l	ArtNem_GreyRock
00011164 6E80                       	dc.w	$6E80
00011166 0000 0000                  	dc.l	ArtNem_SonicHole
0001116A 7400                       	dc.w	$7400
0001116C 0000 0000                  	dc.l	ArtNem_PataBata
00011170 7600                       	dc.w	$7600
00011172 0000 0000                  	dc.l	ArtNem_WaterSplash
00011176 7C80                       	dc.w	$7C80
00011178 0000 0000                  	dc.l	ArtNem_RotPlatform
0001117C 8120                       	dc.w	$8120
0001117E 0000 0000                  	dc.l	ArtNem_HollowLogBG
00011182 8300                       	dc.w	$8300
00011184 0000 0000                  	dc.l	ArtNem_MotorizedBeetle
00011188 8500                       	dc.w	$8500
0001118A 0005                       PLC_Cam4_Incr:	dc.w	5
0001118C 0000 0000                  	dc.l	ArtNem_Anton
00011190 6E00                       	dc.w	$6E00
00011192 0000 0000                  	dc.l	ArtNem_PPZAnimals
00011196 7100                       	dc.w	$7100
00011198 0000 0000                  	dc.l	ArtNem_Mosqui
0001119C 7400                       	dc.w	$7400
0001119E 0000 0000                  	dc.l	ArtNem_RotPlatform
000111A2 8120                       	dc.w	$8120
000111A4 0000 0000                  	dc.l	ArtNem_StarBush
000111A8 8480                       	dc.w	$8480
000111AA 0000 0000                  	dc.l	ArtNem_LargeFan
000111AE 8820                       	dc.w	$8820
000111B0 0001                       PLC_Cam5_Incr:	dc.w	1
000111B2 0000 0000                  	dc.l	ArtNem_AmyRose
000111B6 6E00                       	dc.w	$6E00
000111B8 0000 0000                  	dc.l	ArtNem_AgedTeleporter
000111BC 8120                       	dc.w	$8120
000111BE 0000                       PLC_Results:	dc.w	0
000111C0 0000 0000                  	dc.l	ArtNem_Results
000111C4 7880                       	dc.w	$7880
000111C6 0002                       PLC_Signpost:	dc.w	2
000111C8 0000 0000                  	dc.l	ArtNem_Signpost
000111CC 8780                       	dc.w	$8780
000111CE 0000 0000                  	dc.l	ArtNem_BigRing
000111D2 9100                       	dc.w	$9100
000111D4 0000 EF90                  	dc.l	ArtNem_BigRingFlash
000111D8 7DE0                       	dc.w	$7DE0
000111DA                            ; Palmtree Panic Act 1
000111DA 0000                       PLC_PPZ_P:	dc.w	0
000111DC 0000 0000                  	dc.l	ArtNem_PPZ_P
000111E0 0000                       	dc.w	0
000111E2                            
000111E2 0000                       PLC_PPZ_F:	dc.w	0
000111E4 0000 0000                  	dc.l	ArtNem_PPZ_F
000111E8 0000                       	dc.w	0
000111EA                            
000111EA 0000                       PLC_PPZ_GF:	dc.w	0
000111EC 0000 0000                  	dc.l	ArtNem_PPZ_GF
000111F0 0000                       	dc.w	0
000111F2                            ; Palmtree Panic Act 2
000111F2 0000                       PLC_PPZ2:	dc.w	0
000111F4 0000 0000                  	dc.l	ArtNem_PPZ_2
000111F8 0000                       	dc.w	0
000111FA 0000                       PLC_PPZ2_P:	dc.w	0
000111FC 0000 0000                  	dc.l	ArtNem_PPZ_2P
00011200 0000                       	dc.w	0
00011202                            
00011202 0000                       PLC_PPZ2_F:	dc.w	0
00011204 0000 0000                  	dc.l	ArtNem_PPZ_2BF
00011208 0000                       	dc.w	0
0001120A                            
0001120A 0000                       PLC_PPZ2_GF:	dc.w	0
0001120C 0000 0000                  	dc.l	ArtNem_PPZ_2GF
00011210 0000                       	dc.w	0
00011212                            
00011212                            ; Palmtree Panic Act 3
00011212 0000                       PLC_PPZ3:	dc.w	0
00011214 0000 0000                  	dc.l	ArtNem_PPZ_3
00011218 0000                       	dc.w	0
0001121A                            
0001121A 0000                       PLC_PPZ3_F:	dc.w	0
0001121C 0000 0000                  	dc.l	ArtNem_PPZ_3BF
00011220 0000                       	dc.w	0
00011222 0002                       PLC_PPZ3_Eggman:dc.w 2 
00011224 0000 0000                      dc.l Art_FlowerCapsule
00011228 9020                           dc.w $9020
0001122A 0000 0000                      dc.l Art_BossMachine
0001122E 6B20                           dc.w $6B20
00011230 0000 0000                      dc.l Art_Robotnik
00011234 7FA0                           dc.w $7FA0
00011236                            
00011236                            ; -------------------------------------------------------------------------------
00011236                            ; Leftover data from other level files used as padding, can be replaced
00011236                            ; with a "align $10000"
00011236                            ; -------------------------------------------------------------------------------
00011236                            
00011236                            ;	align $10000
00011236                            
00011236                            ; -------------------------------------------------------------------------------
00011236                            Blk256_GHZ:
00011236                            LevelChunks:
00011236                            	incbin	"level/level/PPZ1/Map256_u/chunks.bin"
00020436                            	even	
00020436                            MapSpr_Sonic:
00020436                            	include	"level/objects/sonic/map.asm"
00020436                            .Map:
00020436 0000                       		dc.w unk_21F38C-.Map
00020438 0000                       		dc.w unk_21F38E-.Map
0002043A 0000                       		dc.w unk_21F3A4-.Map
0002043C 0000                       		dc.w unk_21F3B4-.Map
0002043E 0000                       		dc.w unk_21F3C4-.Map
00020440 0000                       		dc.w unk_21F3D4-.Map
00020442 0000                       		dc.w unk_21F3E4-.Map
00020444 0000                       		dc.w unk_21F3E4-.Map
00020446 0000                       		dc.w unk_21F3F4-.Map
00020448 0000                       		dc.w unk_21F400-.Map
0002044A 0000                       		dc.w unk_21F410-.Map
0002044C 0000                       		dc.w unk_21F38C-.Map
0002044E 0000                       		dc.w unk_21F38C-.Map
00020450 0000                       		dc.w unk_21F38C-.Map
00020452 0000                       		dc.w unk_21F38C-.Map
00020454 0000                       		dc.w unk_21F38C-.Map
00020456 0000                       		dc.w unk_21F38C-.Map
00020458 0000                       		dc.w unk_21F97E-.Map
0002045A 0000                       		dc.w unk_21F98A-.Map
0002045C 0000                       		dc.w unk_21F99A-.Map
0002045E 0000                       		dc.w unk_21F9AA-.Map
00020460 0000                       		dc.w unk_21F9C0-.Map
00020462 0000                       		dc.w unk_21F9CC-.Map
00020464 0000                       		dc.w unk_21F9DC-.Map
00020466 0000                       		dc.w unk_21F38C-.Map
00020468 0000                       		dc.w unk_21F38C-.Map
0002046A 0000                       		dc.w unk_21FD58-.Map
0002046C 0000                       		dc.w unk_21FD68-.Map
0002046E 0000                       		dc.w unk_21FD7E-.Map
00020470 0000                       		dc.w unk_21FD8E-.Map
00020472 0000                       		dc.w unk_21FDA4-.Map
00020474 0000                       		dc.w unk_21FDB0-.Map
00020476 0000                       		dc.w unk_21FD28-.Map
00020478 0000                       		dc.w unk_21FD2E-.Map
0002047A 0000                       		dc.w unk_21FD34-.Map
0002047C 0000                       		dc.w unk_21FD3A-.Map
0002047E 0000                       		dc.w unk_21FD40-.Map
00020480 0000                       		dc.w unk_21FD46-.Map
00020482 0000                       		dc.w unk_21F38C-.Map
00020484 0000                       		dc.w unk_21F38C-.Map
00020486 0000                       		dc.w unk_21F38C-.Map
00020488 0000                       		dc.w unk_21F38C-.Map
0002048A 0000                       		dc.w unk_21F38C-.Map
0002048C 0000                       		dc.w unk_21F38C-.Map
0002048E 0000                       		dc.w unk_21F38C-.Map
00020490 0000                       		dc.w unk_21F7FA-.Map
00020492 0000                       		dc.w unk_21F800-.Map
00020494 0000                       		dc.w unk_21F806-.Map
00020496 0000                       		dc.w unk_21F80C-.Map
00020498 0000                       		dc.w unk_21F812-.Map
0002049A 0000                       		dc.w unk_21F49C-.Map
0002049C 0000                       		dc.w unk_21F426-.Map
0002049E 0000                       		dc.w unk_21F440-.Map
000204A0 0000                       		dc.w unk_21F450-.Map
000204A2 0000                       		dc.w unk_21F45C-.Map
000204A4 0000                       		dc.w unk_21F476-.Map
000204A6 0000                       		dc.w unk_21F486-.Map
000204A8 0000                       		dc.w unk_21F4F0-.Map
000204AA 0000                       		dc.w unk_21F50A-.Map
000204AC 0000                       		dc.w unk_21F52A-.Map
000204AE 0000                       		dc.w unk_21F54A-.Map
000204B0 0000                       		dc.w unk_21F56A-.Map
000204B2 0000                       		dc.w unk_21F58A-.Map
000204B4 0000                       		dc.w unk_21F5A4-.Map
000204B6 0000                       		dc.w unk_21F5BE-.Map
000204B8 0000                       		dc.w unk_21F5CE-.Map
000204BA 0000                       		dc.w unk_21F5DA-.Map
000204BC 0000                       		dc.w unk_21F5F4-.Map
000204BE 0000                       		dc.w unk_21F604-.Map
000204C0 0000                       		dc.w unk_21F61A-.Map
000204C2 0000                       		dc.w unk_21F634-.Map
000204C4 0000                       		dc.w unk_21F654-.Map
000204C6 0000                       		dc.w unk_21F674-.Map
000204C8 0000                       		dc.w unk_21F694-.Map
000204CA 0000                       		dc.w unk_21F6B4-.Map
000204CC 0000                       		dc.w unk_21F6CE-.Map
000204CE 0000                       		dc.w unk_21F6DA-.Map
000204D0 0000                       		dc.w unk_21F6E6-.Map
000204D2 0000                       		dc.w unk_21F6F2-.Map
000204D4 0000                       		dc.w unk_21F6FE-.Map
000204D6 0000                       		dc.w unk_21F718-.Map
000204D8 0000                       		dc.w unk_21F72E-.Map
000204DA 0000                       		dc.w unk_21F74E-.Map
000204DC 0000                       		dc.w unk_21F764-.Map
000204DE 0000                       		dc.w unk_21F770-.Map
000204E0 0000                       		dc.w unk_21F77C-.Map
000204E2 0000                       		dc.w unk_21F788-.Map
000204E4 0000                       		dc.w unk_21F794-.Map
000204E6 0000                       		dc.w unk_21F7AE-.Map
000204E8 0000                       		dc.w unk_21F7C4-.Map
000204EA 0000                       		dc.w unk_21F7E4-.Map
000204EC 0000                       		dc.w unk_21F818-.Map
000204EE 0000                       		dc.w unk_21F828-.Map
000204F0 0000                       		dc.w unk_21F864-.Map
000204F2 0000                       		dc.w unk_21F38C-.Map
000204F4 0000                       		dc.w unk_21F38C-.Map
000204F6 0000                       		dc.w unk_21F874-.Map
000204F8 0000                       		dc.w unk_21F38C-.Map
000204FA 0000                       		dc.w unk_21F38C-.Map
000204FC 0000                       		dc.w unk_21F38C-.Map
000204FE 0000                       		dc.w unk_21F88A-.Map
00020500 0000                       		dc.w unk_21F89A-.Map
00020502 0000                       		dc.w unk_21F8AA-.Map
00020504 0000                       		dc.w unk_21F8BA-.Map
00020506 0000                       		dc.w unk_21F38C-.Map
00020508 0000                       		dc.w unk_21F38C-.Map
0002050A 0000                       		dc.w unk_21F8CA-.Map
0002050C 0000                       		dc.w unk_21F38C-.Map
0002050E 0000                       		dc.w unk_21F38C-.Map
00020510 0000                       		dc.w unk_21F8EA-.Map
00020512 0000                       		dc.w unk_21F900-.Map
00020514 0000                       		dc.w unk_21F38C-.Map
00020516 0000                       		dc.w unk_21F38C-.Map
00020518 0000                       		dc.w unk_21F38C-.Map
0002051A 0000                       		dc.w unk_21F38C-.Map
0002051C 0000                       		dc.w unk_21F38C-.Map
0002051E 0000                       		dc.w unk_21F38C-.Map
00020520 0000                       		dc.w unk_21F38C-.Map
00020522 0000                       		dc.w unk_21F38C-.Map
00020524 0000                       		dc.w unk_21F38C-.Map
00020526 0000                       		dc.w unk_21F38C-.Map
00020528 0000                       		dc.w unk_21F38C-.Map
0002052A 0000                       		dc.w unk_21F38C-.Map
0002052C 0000                       		dc.w unk_21F38C-.Map
0002052E 0000                       		dc.w unk_21F38C-.Map
00020530 0000                       		dc.w unk_21F38C-.Map
00020532 0000                       		dc.w unk_21F38C-.Map
00020534 0000                       		dc.w unk_21F838-.Map
00020536 0000                       		dc.w unk_21F84E-.Map
00020538 0000                       		dc.w unk_21F38C-.Map
0002053A 0000                       		dc.w unk_21F38C-.Map
0002053C 0000                       		dc.w unk_21F910-.Map
0002053E 0000                       		dc.w unk_21F920-.Map
00020540 0000                       		dc.w unk_21F92C-.Map
00020542 0000                       		dc.w unk_21F93C-.Map
00020544 0000                       		dc.w unk_21F952-.Map
00020546 0000                       		dc.w unk_21F968-.Map
00020548 0000                       		dc.w unk_21F38C-.Map
0002054A 0000                       		dc.w unk_21F38C-.Map
0002054C 0000                       		dc.w unk_21F38C-.Map
0002054E 0000                       		dc.w unk_21F38C-.Map
00020550 0000                       		dc.w unk_21F38C-.Map
00020552 0000                       		dc.w unk_21F38C-.Map
00020554 0000                       		dc.w unk_21F38C-.Map
00020556 0000                       		dc.w unk_21F4AC-.Map
00020558 0000                       		dc.w unk_21F4B8-.Map
0002055A 0000                       		dc.w unk_21F4CE-.Map
0002055C 0000                       		dc.w unk_21F4E4-.Map
0002055E 0000                       		dc.w unk_21FA12-.Map
00020560 0000                       		dc.w unk_21FA1E-.Map
00020562 0000                       		dc.w unk_21FA2A-.Map
00020564 0000                       		dc.w unk_21FA36-.Map
00020566 0000                       		dc.w unk_21FA42-.Map
00020568 0000                       		dc.w unk_21FA5C-.Map
0002056A 0000                       		dc.w unk_21FA6C-.Map
0002056C 0000                       		dc.w unk_21FA86-.Map
0002056E 0000                       		dc.w unk_21FA96-.Map
00020570 0000                       		dc.w unk_21FAA2-.Map
00020572 0000                       		dc.w unk_21FAAE-.Map
00020574 0000                       		dc.w unk_21FABA-.Map
00020576 0000                       		dc.w unk_21FAC6-.Map
00020578 0000                       		dc.w unk_21FADC-.Map
0002057A 0000                       		dc.w unk_21FAEC-.Map
0002057C 0000                       		dc.w unk_21FB06-.Map
0002057E 0000                       		dc.w unk_21F9EC-.Map
00020580 0000                       		dc.w unk_21F9FC-.Map
00020582 0000                       		dc.w unk_21FB16-.Map
00020584 0000                       		dc.w unk_21FB30-.Map
00020586 0000                       		dc.w unk_21FB46-.Map
00020588 0000                       		dc.w unk_21FB60-.Map
0002058A 0000                       		dc.w unk_21FB76-.Map
0002058C 0000                       		dc.w unk_21FB86-.Map
0002058E 0000                       		dc.w unk_21FB9C-.Map
00020590 0000                       		dc.w unk_21FBAC-.Map
00020592 0000                       		dc.w unk_21FBC2-.Map
00020594 0000                       		dc.w unk_21FBDC-.Map
00020596 0000                       		dc.w unk_21FBF6-.Map
00020598 0000                       		dc.w unk_21FC10-.Map
0002059A 0000                       		dc.w unk_21FBC2-.Map
0002059C 0000                       		dc.w unk_21FBDC-.Map
0002059E 0000                       		dc.w unk_21FBF6-.Map
000205A0 0000                       		dc.w unk_21FC10-.Map
000205A2 0000                       		dc.w unk_21FC2A-.Map
000205A4 0000                       		dc.w unk_21FC44-.Map
000205A6 0000                       		dc.w unk_21FC5E-.Map
000205A8 0000                       		dc.w unk_21FC78-.Map
000205AA 0000                       		dc.w unk_21FC92-.Map
000205AC 0000                       		dc.w unk_21FC9E-.Map
000205AE 0000                       		dc.w unk_21FCB8-.Map
000205B0 0000                       		dc.w unk_21FCCE-.Map
000205B2 0000                       		dc.w unk_21FC92-.Map
000205B4 0000                       		dc.w unk_21FC9E-.Map
000205B6 0000                       		dc.w unk_21FCB8-.Map
000205B8 0000                       		dc.w unk_21FCCE-.Map
000205BA 0000                       		dc.w unk_21FCE4-.Map
000205BC 0000                       		dc.w unk_21FCF0-.Map
000205BE 0000                       		dc.w unk_21FCFC-.Map
000205C0 0000                       		dc.w unk_21FD12-.Map
000205C2 00                         unk_21F38C:	dc.b   0
000205C3 00                         		dc.b   0
000205C4 04                         unk_21F38E:	dc.b   4
000205C5 EC                         		dc.b $EC ; ì
000205C6 08                         		dc.b   8
000205C7 00                         		dc.b   0
000205C8 00                         		dc.b   0
000205C9 F0                         		dc.b $F0 ; ð
000205CA F4                         		dc.b $F4 ; ô
000205CB 0D                         		dc.b  $D
000205CC 00                         		dc.b   0
000205CD 03                         		dc.b   3
000205CE F0                         		dc.b $F0 ; ð
000205CF 04                         		dc.b   4
000205D0 08                         		dc.b   8
000205D1 00                         		dc.b   0
000205D2 0B                         		dc.b  $B
000205D3 F0                         		dc.b $F0 ; ð
000205D4 0C                         		dc.b  $C
000205D5 08                         		dc.b   8
000205D6 00                         		dc.b   0
000205D7 0E                         		dc.b  $E
000205D8 F8                         		dc.b $F8 ; ø
000205D9 00                         		dc.b   0
000205DA 03                         unk_21F3A4:	dc.b   3
000205DB EC                         		dc.b $EC ; ì
000205DC 09                         		dc.b   9
000205DD 00                         		dc.b   0
000205DE 00                         		dc.b   0
000205DF F0                         		dc.b $F0 ; ð
000205E0 FC                         		dc.b $FC ; ü
000205E1 09                         		dc.b   9
000205E2 00                         		dc.b   0
000205E3 06                         		dc.b   6
000205E4 F0                         		dc.b $F0 ; ð
000205E5 0C                         		dc.b  $C
000205E6 08                         		dc.b   8
000205E7 00                         		dc.b   0
000205E8 0C                         		dc.b  $C
000205E9 F8                         		dc.b $F8 ; ø
000205EA 03                         unk_21F3B4:	dc.b   3
000205EB EC                         		dc.b $EC ; ì
000205EC 09                         		dc.b   9
000205ED 00                         		dc.b   0
000205EE 00                         		dc.b   0
000205EF F0                         		dc.b $F0 ; ð
000205F0 FC                         		dc.b $FC ; ü
000205F1 09                         		dc.b   9
000205F2 00                         		dc.b   0
000205F3 06                         		dc.b   6
000205F4 F0                         		dc.b $F0 ; ð
000205F5 0C                         		dc.b  $C
000205F6 08                         		dc.b   8
000205F7 00                         		dc.b   0
000205F8 0C                         		dc.b  $C
000205F9 F8                         		dc.b $F8 ; ø
000205FA 03                         unk_21F3C4:	dc.b   3
000205FB EC                         		dc.b $EC ; ì
000205FC 09                         		dc.b   9
000205FD 00                         		dc.b   0
000205FE 00                         		dc.b   0
000205FF F0                         		dc.b $F0 ; ð
00020600 FC                         		dc.b $FC ; ü
00020601 09                         		dc.b   9
00020602 00                         		dc.b   0
00020603 06                         		dc.b   6
00020604 F0                         		dc.b $F0 ; ð
00020605 0C                         		dc.b  $C
00020606 08                         		dc.b   8
00020607 00                         		dc.b   0
00020608 0C                         		dc.b  $C
00020609 F8                         		dc.b $F8 ; ø
0002060A 03                         unk_21F3D4:	dc.b   3
0002060B EC                         		dc.b $EC ; ì
0002060C 0A                         		dc.b  $A
0002060D 00                         		dc.b   0
0002060E 00                         		dc.b   0
0002060F F0                         		dc.b $F0 ; ð
00020610 04                         		dc.b   4
00020611 08                         		dc.b   8
00020612 00                         		dc.b   0
00020613 09                         		dc.b   9
00020614 F0                         		dc.b $F0 ; ð
00020615 0C                         		dc.b  $C
00020616 08                         		dc.b   8
00020617 00                         		dc.b   0
00020618 0C                         		dc.b  $C
00020619 F8                         		dc.b $F8 ; ø
0002061A 03                         unk_21F3E4:	dc.b   3
0002061B EC                         		dc.b $EC ; ì
0002061C 09                         		dc.b   9
0002061D 00                         		dc.b   0
0002061E 00                         		dc.b   0
0002061F F0                         		dc.b $F0 ; ð
00020620 FC                         		dc.b $FC ; ü
00020621 0D                         		dc.b  $D
00020622 00                         		dc.b   0
00020623 06                         		dc.b   6
00020624 F0                         		dc.b $F0 ; ð
00020625 0C                         		dc.b  $C
00020626 08                         		dc.b   8
00020627 00                         		dc.b   0
00020628 0E                         		dc.b  $E
00020629 F8                         		dc.b $F8 ; ø
0002062A 02                         unk_21F3F4:	dc.b   2
0002062B EC                         		dc.b $EC ; ì
0002062C 0F                         		dc.b  $F
0002062D 00                         		dc.b   0
0002062E 00                         		dc.b   0
0002062F F0                         		dc.b $F0 ; ð
00020630 0C                         		dc.b  $C
00020631 04                         		dc.b   4
00020632 00                         		dc.b   0
00020633 10                         		dc.b $10
00020634 00                         		dc.b   0
00020635 00                         		dc.b   0
00020636 03                         unk_21F400:	dc.b   3
00020637 EC                         		dc.b $EC ; ì
00020638 0F                         		dc.b  $F
00020639 00                         		dc.b   0
0002063A 00                         		dc.b   0
0002063B EC                         		dc.b $EC ; ì
0002063C FC                         		dc.b $FC ; ü
0002063D 01                         		dc.b   1
0002063E 00                         		dc.b   0
0002063F 10                         		dc.b $10
00020640 0C                         		dc.b  $C
00020641 0C                         		dc.b  $C
00020642 04                         		dc.b   4
00020643 00                         		dc.b   0
00020644 12                         		dc.b $12
00020645 FC                         		dc.b $FC ; ü
00020646 04                         unk_21F410:	dc.b   4
00020647 EC                         		dc.b $EC ; ì
00020648 08                         		dc.b   8
00020649 00                         		dc.b   0
0002064A 00                         		dc.b   0
0002064B F0                         		dc.b $F0 ; ð
0002064C F4                         		dc.b $F4 ; ô
0002064D 0D                         		dc.b  $D
0002064E 00                         		dc.b   0
0002064F 03                         		dc.b   3
00020650 F0                         		dc.b $F0 ; ð
00020651 04                         		dc.b   4
00020652 08                         		dc.b   8
00020653 00                         		dc.b   0
00020654 0B                         		dc.b  $B
00020655 F0                         		dc.b $F0 ; ð
00020656 0C                         		dc.b  $C
00020657 08                         		dc.b   8
00020658 00                         		dc.b   0
00020659 0E                         		dc.b  $E
0002065A F8                         		dc.b $F8 ; ø
0002065B 00                         		dc.b   0
0002065C 05                         unk_21F426:	dc.b   5
0002065D EC                         		dc.b $EC ; ì
0002065E 08                         		dc.b   8
0002065F 00                         		dc.b   0
00020660 00                         		dc.b   0
00020661 F4                         		dc.b $F4 ; ô
00020662 F4                         		dc.b $F4 ; ô
00020663 0C                         		dc.b  $C
00020664 00                         		dc.b   0
00020665 03                         		dc.b   3
00020666 EC                         		dc.b $EC ; ì
00020667 FC                         		dc.b $FC ; ü
00020668 06                         		dc.b   6
00020669 00                         		dc.b   0
0002066A 07                         		dc.b   7
0002066B EC                         		dc.b $EC ; ì
0002066C FC                         		dc.b $FC ; ü
0002066D 09                         		dc.b   9
0002066E 00                         		dc.b   0
0002066F 0D                         		dc.b  $D
00020670 FC                         		dc.b $FC ; ü
00020671 0C                         		dc.b  $C
00020672 04                         		dc.b   4
00020673 00                         		dc.b   0
00020674 13                         		dc.b $13
00020675 04                         		dc.b   4
00020676 03                         unk_21F440:	dc.b   3
00020677 EC                         		dc.b $EC ; ì
00020678 08                         		dc.b   8
00020679 00                         		dc.b   0
0002067A 00                         		dc.b   0
0002067B F4                         		dc.b $F4 ; ô
0002067C F4                         		dc.b $F4 ; ô
0002067D 0C                         		dc.b  $C
0002067E 00                         		dc.b   0
0002067F 03                         		dc.b   3
00020680 EC                         		dc.b $EC ; ì
00020681 FC                         		dc.b $FC ; ü
00020682 0E                         		dc.b  $E
00020683 00                         		dc.b   0
00020684 07                         		dc.b   7
00020685 F4                         		dc.b $F4 ; ô
00020686 02                         unk_21F450:	dc.b   2
00020687 EC                         		dc.b $EC ; ì
00020688 08                         		dc.b   8
00020689 00                         		dc.b   0
0002068A 00                         		dc.b   0
0002068B F4                         		dc.b $F4 ; ô
0002068C F4                         		dc.b $F4 ; ô
0002068D 0B                         		dc.b  $B
0002068E 00                         		dc.b   0
0002068F 03                         		dc.b   3
00020690 F4                         		dc.b $F4 ; ô
00020691 00                         		dc.b   0
00020692 05                         unk_21F45C:	dc.b   5
00020693 EC                         		dc.b $EC ; ì
00020694 08                         		dc.b   8
00020695 00                         		dc.b   0
00020696 00                         		dc.b   0
00020697 F4                         		dc.b $F4 ; ô
00020698 F4                         		dc.b $F4 ; ô
00020699 08                         		dc.b   8
0002069A 00                         		dc.b   0
0002069B 03                         		dc.b   3
0002069C F4                         		dc.b $F4 ; ô
0002069D FC                         		dc.b $FC ; ü
0002069E 06                         		dc.b   6
0002069F 00                         		dc.b   0
000206A0 06                         		dc.b   6
000206A1 EC                         		dc.b $EC ; ì
000206A2 FC                         		dc.b $FC ; ü
000206A3 09                         		dc.b   9
000206A4 00                         		dc.b   0
000206A5 0C                         		dc.b  $C
000206A6 FC                         		dc.b $FC ; ü
000206A7 0C                         		dc.b  $C
000206A8 04                         		dc.b   4
000206A9 00                         		dc.b   0
000206AA 12                         		dc.b $12
000206AB 04                         		dc.b   4
000206AC 03                         unk_21F476:	dc.b   3
000206AD EC                         		dc.b $EC ; ì
000206AE 08                         		dc.b   8
000206AF 00                         		dc.b   0
000206B0 00                         		dc.b   0
000206B1 F4                         		dc.b $F4 ; ô
000206B2 F4                         		dc.b $F4 ; ô
000206B3 0B                         		dc.b  $B
000206B4 00                         		dc.b   0
000206B5 03                         		dc.b   3
000206B6 F4                         		dc.b $F4 ; ô
000206B7 FC                         		dc.b $FC ; ü
000206B8 02                         		dc.b   2
000206B9 00                         		dc.b   0
000206BA 0F                         		dc.b  $F
000206BB EC                         		dc.b $EC ; ì
000206BC 04                         unk_21F486:	dc.b   4
000206BD EC                         		dc.b $EC ; ì
000206BE 08                         		dc.b   8
000206BF 00                         		dc.b   0
000206C0 00                         		dc.b   0
000206C1 F4                         		dc.b $F4 ; ô
000206C2 F4                         		dc.b $F4 ; ô
000206C3 0C                         		dc.b  $C
000206C4 00                         		dc.b   0
000206C5 03                         		dc.b   3
000206C6 EC                         		dc.b $EC ; ì
000206C7 FC                         		dc.b $FC ; ü
000206C8 0C                         		dc.b  $C
000206C9 00                         		dc.b   0
000206CA 07                         		dc.b   7
000206CB F4                         		dc.b $F4 ; ô
000206CC 04                         		dc.b   4
000206CD 09                         		dc.b   9
000206CE 00                         		dc.b   0
000206CF 0B                         		dc.b  $B
000206D0 F4                         		dc.b $F4 ; ô
000206D1 00                         		dc.b   0
000206D2 03                         unk_21F49C:	dc.b   3
000206D3 E8                         		dc.b $E8 ; è
000206D4 05                         		dc.b   5
000206D5 00                         		dc.b   0
000206D6 00                         		dc.b   0
000206D7 F8                         		dc.b $F8 ; ø
000206D8 F8                         		dc.b $F8 ; ø
000206D9 0D                         		dc.b  $D
000206DA 00                         		dc.b   0
000206DB 04                         		dc.b   4
000206DC F0                         		dc.b $F0 ; ð
000206DD 08                         		dc.b   8
000206DE 05                         		dc.b   5
000206DF 00                         		dc.b   0
000206E0 0C                         		dc.b  $C
000206E1 F8                         		dc.b $F8 ; ø
000206E2 02                         unk_21F4AC:	dc.b   2
000206E3 E8                         		dc.b $E8 ; è
000206E4 0B                         		dc.b  $B
000206E5 00                         		dc.b   0
000206E6 00                         		dc.b   0
000206E7 F0                         		dc.b $F0 ; ð
000206E8 08                         		dc.b   8
000206E9 05                         		dc.b   5
000206EA 00                         		dc.b   0
000206EB 0C                         		dc.b  $C
000206EC F8                         		dc.b $F8 ; ø
000206ED 00                         		dc.b   0
000206EE 04                         unk_21F4B8:	dc.b   4
000206EF E8                         		dc.b $E8 ; è
000206F0 04                         		dc.b   4
000206F1 00                         		dc.b   0
000206F2 00                         		dc.b   0
000206F3 F8                         		dc.b $F8 ; ø
000206F4 F0                         		dc.b $F0 ; ð
000206F5 09                         		dc.b   9
000206F6 00                         		dc.b   0
000206F7 02                         		dc.b   2
000206F8 F0                         		dc.b $F0 ; ð
000206F9 00                         		dc.b   0
000206FA 0D                         		dc.b  $D
000206FB 00                         		dc.b   0
000206FC 08                         		dc.b   8
000206FD F0                         		dc.b $F0 ; ð
000206FE 10                         		dc.b $10
000206FF 08                         		dc.b   8
00020700 00                         		dc.b   0
00020701 10                         		dc.b $10
00020702 F0                         		dc.b $F0 ; ð
00020703 00                         		dc.b   0
00020704 04                         unk_21F4CE:	dc.b   4
00020705 E8                         		dc.b $E8 ; è
00020706 04                         		dc.b   4
00020707 08                         		dc.b   8
00020708 00                         		dc.b   0
00020709 F8                         		dc.b $F8 ; ø
0002070A F0                         		dc.b $F0 ; ð
0002070B 09                         		dc.b   9
0002070C 08                         		dc.b   8
0002070D 02                         		dc.b   2
0002070E F8                         		dc.b $F8 ; ø
0002070F 00                         		dc.b   0
00020710 0D                         		dc.b  $D
00020711 08                         		dc.b   8
00020712 08                         		dc.b   8
00020713 F0                         		dc.b $F0 ; ð
00020714 10                         		dc.b $10
00020715 08                         		dc.b   8
00020716 08                         		dc.b   8
00020717 10                         		dc.b $10
00020718 F8                         		dc.b $F8 ; ø
00020719 00                         		dc.b   0
0002071A 02                         unk_21F4E4:	dc.b   2
0002071B E8                         		dc.b $E8 ; è
0002071C 0B                         		dc.b  $B
0002071D 08                         		dc.b   8
0002071E 00                         		dc.b   0
0002071F F8                         		dc.b $F8 ; ø
00020720 08                         		dc.b   8
00020721 05                         		dc.b   5
00020722 08                         		dc.b   8
00020723 0C                         		dc.b  $C
00020724 F8                         		dc.b $F8 ; ø
00020725 00                         		dc.b   0
00020726 05                         unk_21F4F0:	dc.b   5
00020727 F0                         		dc.b $F0 ; ð
00020728 0C                         		dc.b  $C
00020729 00                         		dc.b   0
0002072A 00                         		dc.b   0
0002072B E8                         		dc.b $E8 ; è
0002072C F8                         		dc.b $F8 ; ø
0002072D 05                         		dc.b   5
0002072E 00                         		dc.b   0
0002072F 04                         		dc.b   4
00020730 E8                         		dc.b $E8 ; è
00020731 F8                         		dc.b $F8 ; ø
00020732 09                         		dc.b   9
00020733 00                         		dc.b   0
00020734 08                         		dc.b   8
00020735 F8                         		dc.b $F8 ; ø
00020736 08                         		dc.b   8
00020737 09                         		dc.b   9
00020738 00                         		dc.b   0
00020739 0E                         		dc.b  $E
0002073A F0                         		dc.b $F0 ; ð
0002073B 18                         		dc.b $18
0002073C 00                         		dc.b   0
0002073D 00                         		dc.b   0
0002073E 14                         		dc.b $14
0002073F F8                         		dc.b $F8 ; ø
00020740 06                         unk_21F50A:	dc.b   6
00020741 F0                         		dc.b $F0 ; ð
00020742 0C                         		dc.b  $C
00020743 00                         		dc.b   0
00020744 00                         		dc.b   0
00020745 E8                         		dc.b $E8 ; è
00020746 F8                         		dc.b $F8 ; ø
00020747 05                         		dc.b   5
00020748 00                         		dc.b   0
00020749 04                         		dc.b   4
0002074A E8                         		dc.b $E8 ; è
0002074B F8                         		dc.b $F8 ; ø
0002074C 05                         		dc.b   5
0002074D 00                         		dc.b   0
0002074E 08                         		dc.b   8
0002074F F8                         		dc.b $F8 ; ø
00020750 F8                         		dc.b $F8 ; ø
00020751 00                         		dc.b   0
00020752 00                         		dc.b   0
00020753 0C                         		dc.b  $C
00020754 10                         		dc.b $10
00020755 00                         		dc.b   0
00020756 05                         		dc.b   5
00020757 00                         		dc.b   0
00020758 0D                         		dc.b  $D
00020759 08                         		dc.b   8
0002075A 08                         		dc.b   8
0002075B 09                         		dc.b   9
0002075C 00                         		dc.b   0
0002075D 11                         		dc.b $11
0002075E F0                         		dc.b $F0 ; ð
0002075F 00                         		dc.b   0
00020760 06                         unk_21F52A:	dc.b   6
00020761 F0                         		dc.b $F0 ; ð
00020762 0C                         		dc.b  $C
00020763 00                         		dc.b   0
00020764 00                         		dc.b   0
00020765 E8                         		dc.b $E8 ; è
00020766 F8                         		dc.b $F8 ; ø
00020767 04                         		dc.b   4
00020768 00                         		dc.b   0
00020769 04                         		dc.b   4
0002076A E8                         		dc.b $E8 ; è
0002076B F8                         		dc.b $F8 ; ø
0002076C 07                         		dc.b   7
0002076D 00                         		dc.b   0
0002076E 06                         		dc.b   6
0002076F F8                         		dc.b $F8 ; ø
00020770 00                         		dc.b   0
00020771 00                         		dc.b   0
00020772 00                         		dc.b   0
00020773 0E                         		dc.b  $E
00020774 F0                         		dc.b $F0 ; ð
00020775 08                         		dc.b   8
00020776 00                         		dc.b   0
00020777 00                         		dc.b   0
00020778 0F                         		dc.b  $F
00020779 F0                         		dc.b $F0 ; ð
0002077A 00                         		dc.b   0
0002077B 02                         		dc.b   2
0002077C 00                         		dc.b   0
0002077D 10                         		dc.b $10
0002077E 08                         		dc.b   8
0002077F 00                         		dc.b   0
00020780 06                         unk_21F54A:	dc.b   6
00020781 F0                         		dc.b $F0 ; ð
00020782 0C                         		dc.b  $C
00020783 00                         		dc.b   0
00020784 00                         		dc.b   0
00020785 E8                         		dc.b $E8 ; è
00020786 F8                         		dc.b $F8 ; ø
00020787 04                         		dc.b   4
00020788 00                         		dc.b   0
00020789 04                         		dc.b   4
0002078A E8                         		dc.b $E8 ; è
0002078B F8                         		dc.b $F8 ; ø
0002078C 0A                         		dc.b  $A
0002078D 00                         		dc.b   0
0002078E 06                         		dc.b   6
0002078F F8                         		dc.b $F8 ; ø
00020790 00                         		dc.b   0
00020791 00                         		dc.b   0
00020792 00                         		dc.b   0
00020793 0F                         		dc.b  $F
00020794 F0                         		dc.b $F0 ; ð
00020795 08                         		dc.b   8
00020796 01                         		dc.b   1
00020797 00                         		dc.b   0
00020798 10                         		dc.b $10
00020799 F0                         		dc.b $F0 ; ð
0002079A 10                         		dc.b $10
0002079B 05                         		dc.b   5
0002079C 00                         		dc.b   0
0002079D 12                         		dc.b $12
0002079E F8                         		dc.b $F8 ; ø
0002079F 00                         		dc.b   0
000207A0 06                         unk_21F56A:	dc.b   6
000207A1 F0                         		dc.b $F0 ; ð
000207A2 0C                         		dc.b  $C
000207A3 00                         		dc.b   0
000207A4 00                         		dc.b   0
000207A5 E8                         		dc.b $E8 ; è
000207A6 F8                         		dc.b $F8 ; ø
000207A7 04                         		dc.b   4
000207A8 00                         		dc.b   0
000207A9 04                         		dc.b   4
000207AA E8                         		dc.b $E8 ; è
000207AB F8                         		dc.b $F8 ; ø
000207AC 07                         		dc.b   7
000207AD 00                         		dc.b   0
000207AE 06                         		dc.b   6
000207AF F8                         		dc.b $F8 ; ø
000207B0 00                         		dc.b   0
000207B1 00                         		dc.b   0
000207B2 00                         		dc.b   0
000207B3 0E                         		dc.b  $E
000207B4 F0                         		dc.b $F0 ; ð
000207B5 08                         		dc.b   8
000207B6 00                         		dc.b   0
000207B7 00                         		dc.b   0
000207B8 0F                         		dc.b  $F
000207B9 F0                         		dc.b $F0 ; ð
000207BA 00                         		dc.b   0
000207BB 02                         		dc.b   2
000207BC 00                         		dc.b   0
000207BD 10                         		dc.b $10
000207BE 08                         		dc.b   8
000207BF 00                         		dc.b   0
000207C0 05                         unk_21F58A:	dc.b   5
000207C1 F0                         		dc.b $F0 ; ð
000207C2 0C                         		dc.b  $C
000207C3 00                         		dc.b   0
000207C4 00                         		dc.b   0
000207C5 E8                         		dc.b $E8 ; è
000207C6 F8                         		dc.b $F8 ; ø
000207C7 05                         		dc.b   5
000207C8 00                         		dc.b   0
000207C9 04                         		dc.b   4
000207CA E8                         		dc.b $E8 ; è
000207CB F8                         		dc.b $F8 ; ø
000207CC 07                         		dc.b   7
000207CD 00                         		dc.b   0
000207CE 08                         		dc.b   8
000207CF F8                         		dc.b $F8 ; ø
000207D0 08                         		dc.b   8
000207D1 00                         		dc.b   0
000207D2 00                         		dc.b   0
000207D3 10                         		dc.b $10
000207D4 F0                         		dc.b $F0 ; ð
000207D5 00                         		dc.b   0
000207D6 02                         		dc.b   2
000207D7 00                         		dc.b   0
000207D8 11                         		dc.b $11
000207D9 08                         		dc.b   8
000207DA 05                         unk_21F5A4:	dc.b   5
000207DB EC                         		dc.b $EC ; ì
000207DC 06                         		dc.b   6
000207DD 00                         		dc.b   0
000207DE 00                         		dc.b   0
000207DF FC                         		dc.b $FC ; ü
000207E0 EC                         		dc.b $EC ; ì
000207E1 01                         		dc.b   1
000207E2 00                         		dc.b   0
000207E3 06                         		dc.b   6
000207E4 0C                         		dc.b  $C
000207E5 F4                         		dc.b $F4 ; ô
000207E6 02                         		dc.b   2
000207E7 00                         		dc.b   0
000207E8 08                         		dc.b   8
000207E9 EC                         		dc.b $EC ; ì
000207EA F4                         		dc.b $F4 ; ô
000207EB 03                         		dc.b   3
000207EC 00                         		dc.b   0
000207ED 0B                         		dc.b  $B
000207EE F4                         		dc.b $F4 ; ô
000207EF 04                         		dc.b   4
000207F0 09                         		dc.b   9
000207F1 00                         		dc.b   0
000207F2 0F                         		dc.b  $F
000207F3 FC                         		dc.b $FC ; ü
000207F4 03                         unk_21F5BE:	dc.b   3
000207F5 EC                         		dc.b $EC ; ì
000207F6 0B                         		dc.b  $B
000207F7 00                         		dc.b   0
000207F8 00                         		dc.b   0
000207F9 FC                         		dc.b $FC ; ü
000207FA F4                         		dc.b $F4 ; ô
000207FB 02                         		dc.b   2
000207FC 00                         		dc.b   0
000207FD 0C                         		dc.b  $C
000207FE EC                         		dc.b $EC ; ì
000207FF F4                         		dc.b $F4 ; ô
00020800 03                         		dc.b   3
00020801 00                         		dc.b   0
00020802 0F                         		dc.b  $F
00020803 F4                         		dc.b $F4 ; ô
00020804 02                         unk_21F5CE:	dc.b   2
00020805 F4                         		dc.b $F4 ; ô
00020806 02                         		dc.b   2
00020807 00                         		dc.b   0
00020808 00                         		dc.b   0
00020809 EC                         		dc.b $EC ; ì
0002080A F4                         		dc.b $F4 ; ô
0002080B 0E                         		dc.b  $E
0002080C 00                         		dc.b   0
0002080D 03                         		dc.b   3
0002080E F4                         		dc.b $F4 ; ô
0002080F 00                         		dc.b   0
00020810 05                         unk_21F5DA:	dc.b   5
00020811 EC                         		dc.b $EC ; ì
00020812 06                         		dc.b   6
00020813 00                         		dc.b   0
00020814 00                         		dc.b   0
00020815 FC                         		dc.b $FC ; ü
00020816 EC                         		dc.b $EC ; ì
00020817 01                         		dc.b   1
00020818 00                         		dc.b   0
00020819 06                         		dc.b   6
0002081A 0C                         		dc.b  $C
0002081B F4                         		dc.b $F4 ; ô
0002081C 02                         		dc.b   2
0002081D 00                         		dc.b   0
0002081E 08                         		dc.b   8
0002081F EC                         		dc.b $EC ; ì
00020820 F4                         		dc.b $F4 ; ô
00020821 02                         		dc.b   2
00020822 00                         		dc.b   0
00020823 0B                         		dc.b  $B
00020824 F4                         		dc.b $F4 ; ô
00020825 04                         		dc.b   4
00020826 09                         		dc.b   9
00020827 00                         		dc.b   0
00020828 0E                         		dc.b  $E
00020829 FC                         		dc.b $FC ; ü
0002082A 03                         unk_21F5F4:	dc.b   3
0002082B F4                         		dc.b $F4 ; ô
0002082C 02                         		dc.b   2
0002082D 00                         		dc.b   0
0002082E 00                         		dc.b   0
0002082F EC                         		dc.b $EC ; ì
00020830 F4                         		dc.b $F4 ; ô
00020831 0E                         		dc.b  $E
00020832 00                         		dc.b   0
00020833 03                         		dc.b   3
00020834 F4                         		dc.b $F4 ; ô
00020835 0C                         		dc.b  $C
00020836 08                         		dc.b   8
00020837 00                         		dc.b   0
00020838 0F                         		dc.b  $F
00020839 FC                         		dc.b $FC ; ü
0002083A 04                         unk_21F604:	dc.b   4
0002083B F4                         		dc.b $F4 ; ô
0002083C 02                         		dc.b   2
0002083D 00                         		dc.b   0
0002083E 00                         		dc.b   0
0002083F EC                         		dc.b $EC ; ì
00020840 F4                         		dc.b $F4 ; ô
00020841 03                         		dc.b   3
00020842 00                         		dc.b   0
00020843 03                         		dc.b   3
00020844 F4                         		dc.b $F4 ; ô
00020845 EC                         		dc.b $EC ; ì
00020846 03                         		dc.b   3
00020847 00                         		dc.b   0
00020848 07                         		dc.b   7
00020849 FC                         		dc.b $FC ; ü
0002084A F4                         		dc.b $F4 ; ô
0002084B 06                         		dc.b   6
0002084C 00                         		dc.b   0
0002084D 0B                         		dc.b  $B
0002084E 04                         		dc.b   4
0002084F 00                         		dc.b   0
00020850 05                         unk_21F61A:	dc.b   5
00020851 F0                         		dc.b $F0 ; ð
00020852 03                         		dc.b   3
00020853 00                         		dc.b   0
00020854 00                         		dc.b   0
00020855 E8                         		dc.b $E8 ; è
00020856 E8                         		dc.b $E8 ; è
00020857 06                         		dc.b   6
00020858 00                         		dc.b   0
00020859 04                         		dc.b   4
0002085A F0                         		dc.b $F0 ; ð
0002085B 00                         		dc.b   0
0002085C 05                         		dc.b   5
0002085D 00                         		dc.b   0
0002085E 0A                         		dc.b  $A
0002085F F0                         		dc.b $F0 ; ð
00020860 F0                         		dc.b $F0 ; ð
00020861 06                         		dc.b   6
00020862 00                         		dc.b   0
00020863 0E                         		dc.b  $E
00020864 00                         		dc.b   0
00020865 F8                         		dc.b $F8 ; ø
00020866 00                         		dc.b   0
00020867 00                         		dc.b   0
00020868 14                         		dc.b $14
00020869 10                         		dc.b $10
0002086A 06                         unk_21F634:	dc.b   6
0002086B E0                         		dc.b $E0 ; à
0002086C 00                         		dc.b   0
0002086D 00                         		dc.b   0
0002086E 00                         		dc.b   0
0002086F F0                         		dc.b $F0 ; ð
00020870 E0                         		dc.b $E0 ; à
00020871 05                         		dc.b   5
00020872 00                         		dc.b   0
00020873 01                         		dc.b   1
00020874 F8                         		dc.b $F8 ; ø
00020875 F0                         		dc.b $F0 ; ð
00020876 03                         		dc.b   3
00020877 00                         		dc.b   0
00020878 05                         		dc.b   5
00020879 E8                         		dc.b $E8 ; è
0002087A F0                         		dc.b $F0 ; ð
0002087B 05                         		dc.b   5
0002087C 00                         		dc.b   0
0002087D 09                         		dc.b   9
0002087E F0                         		dc.b $F0 ; ð
0002087F 00                         		dc.b   0
00020880 05                         		dc.b   5
00020881 00                         		dc.b   0
00020882 0D                         		dc.b  $D
00020883 F0                         		dc.b $F0 ; ð
00020884 F0                         		dc.b $F0 ; ð
00020885 06                         		dc.b   6
00020886 00                         		dc.b   0
00020887 11                         		dc.b $11
00020888 00                         		dc.b   0
00020889 00                         		dc.b   0
0002088A 06                         unk_21F654:	dc.b   6
0002088B E8                         		dc.b $E8 ; è
0002088C 08                         		dc.b   8
0002088D 00                         		dc.b   0
0002088E 00                         		dc.b   0
0002088F F8                         		dc.b $F8 ; ø
00020890 F0                         		dc.b $F0 ; ð
00020891 03                         		dc.b   3
00020892 00                         		dc.b   0
00020893 03                         		dc.b   3
00020894 E8                         		dc.b $E8 ; è
00020895 F0                         		dc.b $F0 ; ð
00020896 0D                         		dc.b  $D
00020897 00                         		dc.b   0
00020898 07                         		dc.b   7
00020899 F0                         		dc.b $F0 ; ð
0002089A 00                         		dc.b   0
0002089B 01                         		dc.b   1
0002089C 00                         		dc.b   0
0002089D 0F                         		dc.b  $F
0002089E F0                         		dc.b $F0 ; ð
0002089F 00                         		dc.b   0
000208A0 00                         		dc.b   0
000208A1 00                         		dc.b   0
000208A2 11                         		dc.b $11
000208A3 F8                         		dc.b $F8 ; ø
000208A4 00                         		dc.b   0
000208A5 00                         		dc.b   0
000208A6 00                         		dc.b   0
000208A7 12                         		dc.b $12
000208A8 00                         		dc.b   0
000208A9 00                         		dc.b   0
000208AA 06                         unk_21F674:	dc.b   6
000208AB E8                         		dc.b $E8 ; è
000208AC 0A                         		dc.b  $A
000208AD 00                         		dc.b   0
000208AE 00                         		dc.b   0
000208AF F0                         		dc.b $F0 ; ð
000208B0 F0                         		dc.b $F0 ; ð
000208B1 05                         		dc.b   5
000208B2 00                         		dc.b   0
000208B3 09                         		dc.b   9
000208B4 08                         		dc.b   8
000208B5 F0                         		dc.b $F0 ; ð
000208B6 03                         		dc.b   3
000208B7 00                         		dc.b   0
000208B8 0D                         		dc.b  $D
000208B9 E8                         		dc.b $E8 ; è
000208BA 00                         		dc.b   0
000208BB 01                         		dc.b   1
000208BC 00                         		dc.b   0
000208BD 11                         		dc.b $11
000208BE F0                         		dc.b $F0 ; ð
000208BF 00                         		dc.b   0
000208C0 00                         		dc.b   0
000208C1 00                         		dc.b   0
000208C2 13                         		dc.b $13
000208C3 F8                         		dc.b $F8 ; ø
000208C4 00                         		dc.b   0
000208C5 04                         		dc.b   4
000208C6 00                         		dc.b   0
000208C7 14                         		dc.b $14
000208C8 00                         		dc.b   0
000208C9 00                         		dc.b   0
000208CA 06                         unk_21F694:	dc.b   6
000208CB E8                         		dc.b $E8 ; è
000208CC 08                         		dc.b   8
000208CD 00                         		dc.b   0
000208CE 00                         		dc.b   0
000208CF F8                         		dc.b $F8 ; ø
000208D0 F0                         		dc.b $F0 ; ð
000208D1 03                         		dc.b   3
000208D2 00                         		dc.b   0
000208D3 03                         		dc.b   3
000208D4 E8                         		dc.b $E8 ; è
000208D5 F0                         		dc.b $F0 ; ð
000208D6 0D                         		dc.b  $D
000208D7 00                         		dc.b   0
000208D8 07                         		dc.b   7
000208D9 F0                         		dc.b $F0 ; ð
000208DA 00                         		dc.b   0
000208DB 01                         		dc.b   1
000208DC 00                         		dc.b   0
000208DD 0F                         		dc.b  $F
000208DE F0                         		dc.b $F0 ; ð
000208DF 00                         		dc.b   0
000208E0 00                         		dc.b   0
000208E1 00                         		dc.b   0
000208E2 11                         		dc.b $11
000208E3 F8                         		dc.b $F8 ; ø
000208E4 00                         		dc.b   0
000208E5 00                         		dc.b   0
000208E6 00                         		dc.b   0
000208E7 12                         		dc.b $12
000208E8 00                         		dc.b   0
000208E9 00                         		dc.b   0
000208EA 05                         unk_21F6B4:	dc.b   5
000208EB E8                         		dc.b $E8 ; è
000208EC 08                         		dc.b   8
000208ED 00                         		dc.b   0
000208EE 00                         		dc.b   0
000208EF F8                         		dc.b $F8 ; ø
000208F0 F0                         		dc.b $F0 ; ð
000208F1 03                         		dc.b   3
000208F2 00                         		dc.b   0
000208F3 03                         		dc.b   3
000208F4 E8                         		dc.b $E8 ; è
000208F5 F0                         		dc.b $F0 ; ð
000208F6 0D                         		dc.b  $D
000208F7 00                         		dc.b   0
000208F8 07                         		dc.b   7
000208F9 F0                         		dc.b $F0 ; ð
000208FA 00                         		dc.b   0
000208FB 05                         		dc.b   5
000208FC 00                         		dc.b   0
000208FD 0F                         		dc.b  $F
000208FE F0                         		dc.b $F0 ; ð
000208FF 00                         		dc.b   0
00020900 00                         		dc.b   0
00020901 00                         		dc.b   0
00020902 13                         		dc.b $13
00020903 00                         		dc.b   0
00020904 02                         unk_21F6CE:	dc.b   2
00020905 EC                         		dc.b $EC ; ì
00020906 09                         		dc.b   9
00020907 00                         		dc.b   0
00020908 00                         		dc.b   0
00020909 F4                         		dc.b $F4 ; ô
0002090A FC                         		dc.b $FC ; ü
0002090B 0E                         		dc.b  $E
0002090C 00                         		dc.b   0
0002090D 06                         		dc.b   6
0002090E EC                         		dc.b $EC ; ì
0002090F 00                         		dc.b   0
00020910 02                         unk_21F6DA:	dc.b   2
00020911 EC                         		dc.b $EC ; ì
00020912 09                         		dc.b   9
00020913 00                         		dc.b   0
00020914 00                         		dc.b   0
00020915 F4                         		dc.b $F4 ; ô
00020916 FC                         		dc.b $FC ; ü
00020917 0E                         		dc.b  $E
00020918 00                         		dc.b   0
00020919 06                         		dc.b   6
0002091A EC                         		dc.b $EC ; ì
0002091B 00                         		dc.b   0
0002091C 02                         unk_21F6E6:	dc.b   2
0002091D EC                         		dc.b $EC ; ì
0002091E 09                         		dc.b   9
0002091F 00                         		dc.b   0
00020920 00                         		dc.b   0
00020921 F4                         		dc.b $F4 ; ô
00020922 FC                         		dc.b $FC ; ü
00020923 0E                         		dc.b  $E
00020924 00                         		dc.b   0
00020925 06                         		dc.b   6
00020926 EC                         		dc.b $EC ; ì
00020927 00                         		dc.b   0
00020928 02                         unk_21F6F2:	dc.b   2
00020929 EC                         		dc.b $EC ; ì
0002092A 09                         		dc.b   9
0002092B 00                         		dc.b   0
0002092C 00                         		dc.b   0
0002092D F4                         		dc.b $F4 ; ô
0002092E FC                         		dc.b $FC ; ü
0002092F 0E                         		dc.b  $E
00020930 00                         		dc.b   0
00020931 06                         		dc.b   6
00020932 EC                         		dc.b $EC ; ì
00020933 00                         		dc.b   0
00020934 05                         unk_21F6FE:	dc.b   5
00020935 EC                         		dc.b $EC ; ì
00020936 08                         		dc.b   8
00020937 00                         		dc.b   0
00020938 00                         		dc.b   0
00020939 F4                         		dc.b $F4 ; ô
0002093A F4                         		dc.b $F4 ; ô
0002093B 08                         		dc.b   8
0002093C 00                         		dc.b   0
0002093D 03                         		dc.b   3
0002093E EC                         		dc.b $EC ; ì
0002093F F4                         		dc.b $F4 ; ô
00020940 00                         		dc.b   0
00020941 00                         		dc.b   0
00020942 06                         		dc.b   6
00020943 04                         		dc.b   4
00020944 FC                         		dc.b $FC ; ü
00020945 00                         		dc.b   0
00020946 00                         		dc.b   0
00020947 07                         		dc.b   7
00020948 EC                         		dc.b $EC ; ì
00020949 FC                         		dc.b $FC ; ü
0002094A 0E                         		dc.b  $E
0002094B 00                         		dc.b   0
0002094C 08                         		dc.b   8
0002094D F4                         		dc.b $F4 ; ô
0002094E 04                         unk_21F718:	dc.b   4
0002094F EC                         		dc.b $EC ; ì
00020950 0C                         		dc.b  $C
00020951 00                         		dc.b   0
00020952 00                         		dc.b   0
00020953 EC                         		dc.b $EC ; ì
00020954 F4                         		dc.b $F4 ; ô
00020955 08                         		dc.b   8
00020956 00                         		dc.b   0
00020957 04                         		dc.b   4
00020958 EC                         		dc.b $EC ; ì
00020959 F4                         		dc.b $F4 ; ô
0002095A 00                         		dc.b   0
0002095B 00                         		dc.b   0
0002095C 07                         		dc.b   7
0002095D 04                         		dc.b   4
0002095E FC                         		dc.b $FC ; ü
0002095F 0E                         		dc.b  $E
00020960 00                         		dc.b   0
00020961 08                         		dc.b   8
00020962 F4                         		dc.b $F4 ; ô
00020963 00                         		dc.b   0
00020964 06                         unk_21F72E:	dc.b   6
00020965 EC                         		dc.b $EC ; ì
00020966 08                         		dc.b   8
00020967 00                         		dc.b   0
00020968 00                         		dc.b   0
00020969 F4                         		dc.b $F4 ; ô
0002096A F4                         		dc.b $F4 ; ô
0002096B 08                         		dc.b   8
0002096C 00                         		dc.b   0
0002096D 03                         		dc.b   3
0002096E EC                         		dc.b $EC ; ì
0002096F F4                         		dc.b $F4 ; ô
00020970 00                         		dc.b   0
00020971 00                         		dc.b   0
00020972 06                         		dc.b   6
00020973 04                         		dc.b   4
00020974 FC                         		dc.b $FC ; ü
00020975 00                         		dc.b   0
00020976 00                         		dc.b   0
00020977 07                         		dc.b   7
00020978 EC                         		dc.b $EC ; ì
00020979 FC                         		dc.b $FC ; ü
0002097A 0D                         		dc.b  $D
0002097B 00                         		dc.b   0
0002097C 08                         		dc.b   8
0002097D F4                         		dc.b $F4 ; ô
0002097E 0C                         		dc.b  $C
0002097F 08                         		dc.b   8
00020980 00                         		dc.b   0
00020981 10                         		dc.b $10
00020982 FC                         		dc.b $FC ; ü
00020983 00                         		dc.b   0
00020984 04                         unk_21F74E:	dc.b   4
00020985 EC                         		dc.b $EC ; ì
00020986 0C                         		dc.b  $C
00020987 00                         		dc.b   0
00020988 00                         		dc.b   0
00020989 EC                         		dc.b $EC ; ì
0002098A F4                         		dc.b $F4 ; ô
0002098B 08                         		dc.b   8
0002098C 00                         		dc.b   0
0002098D 04                         		dc.b   4
0002098E EC                         		dc.b $EC ; ì
0002098F F4                         		dc.b $F4 ; ô
00020990 00                         		dc.b   0
00020991 00                         		dc.b   0
00020992 07                         		dc.b   7
00020993 04                         		dc.b   4
00020994 FC                         		dc.b $FC ; ü
00020995 0E                         		dc.b  $E
00020996 00                         		dc.b   0
00020997 08                         		dc.b   8
00020998 F4                         		dc.b $F4 ; ô
00020999 00                         		dc.b   0
0002099A 02                         unk_21F764:	dc.b   2
0002099B F4                         		dc.b $F4 ; ô
0002099C 06                         		dc.b   6
0002099D 00                         		dc.b   0
0002099E 00                         		dc.b   0
0002099F EC                         		dc.b $EC ; ì
000209A0 F4                         		dc.b $F4 ; ô
000209A1 0B                         		dc.b  $B
000209A2 00                         		dc.b   0
000209A3 06                         		dc.b   6
000209A4 FC                         		dc.b $FC ; ü
000209A5 00                         		dc.b   0
000209A6 02                         unk_21F770:	dc.b   2
000209A7 F4                         		dc.b $F4 ; ô
000209A8 06                         		dc.b   6
000209A9 00                         		dc.b   0
000209AA 00                         		dc.b   0
000209AB EC                         		dc.b $EC ; ì
000209AC F4                         		dc.b $F4 ; ô
000209AD 0B                         		dc.b  $B
000209AE 00                         		dc.b   0
000209AF 06                         		dc.b   6
000209B0 FC                         		dc.b $FC ; ü
000209B1 00                         		dc.b   0
000209B2 02                         unk_21F77C:	dc.b   2
000209B3 F4                         		dc.b $F4 ; ô
000209B4 06                         		dc.b   6
000209B5 00                         		dc.b   0
000209B6 00                         		dc.b   0
000209B7 EC                         		dc.b $EC ; ì
000209B8 F4                         		dc.b $F4 ; ô
000209B9 0B                         		dc.b  $B
000209BA 00                         		dc.b   0
000209BB 06                         		dc.b   6
000209BC FC                         		dc.b $FC ; ü
000209BD 00                         		dc.b   0
000209BE 02                         unk_21F788:	dc.b   2
000209BF F4                         		dc.b $F4 ; ô
000209C0 06                         		dc.b   6
000209C1 00                         		dc.b   0
000209C2 00                         		dc.b   0
000209C3 EC                         		dc.b $EC ; ì
000209C4 F4                         		dc.b $F4 ; ô
000209C5 0B                         		dc.b  $B
000209C6 00                         		dc.b   0
000209C7 06                         		dc.b   6
000209C8 FC                         		dc.b $FC ; ü
000209C9 00                         		dc.b   0
000209CA 05                         unk_21F794:	dc.b   5
000209CB F4                         		dc.b $F4 ; ô
000209CC 02                         		dc.b   2
000209CD 00                         		dc.b   0
000209CE 00                         		dc.b   0
000209CF EC                         		dc.b $EC ; ì
000209D0 F4                         		dc.b $F4 ; ô
000209D1 00                         		dc.b   0
000209D2 00                         		dc.b   0
000209D3 03                         		dc.b   3
000209D4 F4                         		dc.b $F4 ; ô
000209D5 FC                         		dc.b $FC ; ü
000209D6 02                         		dc.b   2
000209D7 00                         		dc.b   0
000209D8 04                         		dc.b   4
000209D9 F4                         		dc.b $F4 ; ô
000209DA EC                         		dc.b $EC ; ì
000209DB 0B                         		dc.b  $B
000209DC 00                         		dc.b   0
000209DD 07                         		dc.b   7
000209DE FC                         		dc.b $FC ; ü
000209DF 0C                         		dc.b  $C
000209E0 00                         		dc.b   0
000209E1 00                         		dc.b   0
000209E2 13                         		dc.b $13
000209E3 FC                         		dc.b $FC ; ü
000209E4 04                         unk_21F7AE:	dc.b   4
000209E5 F4                         		dc.b $F4 ; ô
000209E6 03                         		dc.b   3
000209E7 00                         		dc.b   0
000209E8 00                         		dc.b   0
000209E9 EC                         		dc.b $EC ; ì
000209EA F4                         		dc.b $F4 ; ô
000209EB 00                         		dc.b   0
000209EC 00                         		dc.b   0
000209ED 04                         		dc.b   4
000209EE F4                         		dc.b $F4 ; ô
000209EF FC                         		dc.b $FC ; ü
000209F0 02                         		dc.b   2
000209F1 00                         		dc.b   0
000209F2 05                         		dc.b   5
000209F3 F4                         		dc.b $F4 ; ô
000209F4 EC                         		dc.b $EC ; ì
000209F5 0B                         		dc.b  $B
000209F6 00                         		dc.b   0
000209F7 08                         		dc.b   8
000209F8 FC                         		dc.b $FC ; ü
000209F9 00                         		dc.b   0
000209FA 06                         unk_21F7C4:	dc.b   6
000209FB F4                         		dc.b $F4 ; ô
000209FC 02                         		dc.b   2
000209FD 00                         		dc.b   0
000209FE 00                         		dc.b   0
000209FF EC                         		dc.b $EC ; ì
00020A00 F4                         		dc.b $F4 ; ô
00020A01 00                         		dc.b   0
00020A02 00                         		dc.b   0
00020A03 03                         		dc.b   3
00020A04 F4                         		dc.b $F4 ; ô
00020A05 FC                         		dc.b $FC ; ü
00020A06 02                         		dc.b   2
00020A07 00                         		dc.b   0
00020A08 04                         		dc.b   4
00020A09 F4                         		dc.b $F4 ; ô
00020A0A EC                         		dc.b $EC ; ì
00020A0B 07                         		dc.b   7
00020A0C 00                         		dc.b   0
00020A0D 07                         		dc.b   7
00020A0E FC                         		dc.b $FC ; ü
00020A0F 0C                         		dc.b  $C
00020A10 00                         		dc.b   0
00020A11 00                         		dc.b   0
00020A12 0F                         		dc.b  $F
00020A13 FC                         		dc.b $FC ; ü
00020A14 EC                         		dc.b $EC ; ì
00020A15 02                         		dc.b   2
00020A16 00                         		dc.b   0
00020A17 10                         		dc.b $10
00020A18 0C                         		dc.b  $C
00020A19 00                         		dc.b   0
00020A1A 04                         unk_21F7E4:	dc.b   4
00020A1B F4                         		dc.b $F4 ; ô
00020A1C 03                         		dc.b   3
00020A1D 00                         		dc.b   0
00020A1E 00                         		dc.b   0
00020A1F EC                         		dc.b $EC ; ì
00020A20 F4                         		dc.b $F4 ; ô
00020A21 00                         		dc.b   0
00020A22 00                         		dc.b   0
00020A23 04                         		dc.b   4
00020A24 F4                         		dc.b $F4 ; ô
00020A25 FC                         		dc.b $FC ; ü
00020A26 02                         		dc.b   2
00020A27 00                         		dc.b   0
00020A28 05                         		dc.b   5
00020A29 F4                         		dc.b $F4 ; ô
00020A2A EC                         		dc.b $EC ; ì
00020A2B 0B                         		dc.b  $B
00020A2C 00                         		dc.b   0
00020A2D 08                         		dc.b   8
00020A2E FC                         		dc.b $FC ; ü
00020A2F 00                         		dc.b   0
00020A30 01                         unk_21F7FA:	dc.b   1
00020A31 F0                         		dc.b $F0 ; ð
00020A32 0F                         		dc.b  $F
00020A33 00                         		dc.b   0
00020A34 00                         		dc.b   0
00020A35 F0                         		dc.b $F0 ; ð
00020A36 01                         unk_21F800:	dc.b   1
00020A37 F0                         		dc.b $F0 ; ð
00020A38 0F                         		dc.b  $F
00020A39 00                         		dc.b   0
00020A3A 00                         		dc.b   0
00020A3B F0                         		dc.b $F0 ; ð
00020A3C 01                         unk_21F806:	dc.b   1
00020A3D F0                         		dc.b $F0 ; ð
00020A3E 0F                         		dc.b  $F
00020A3F 00                         		dc.b   0
00020A40 00                         		dc.b   0
00020A41 F0                         		dc.b $F0 ; ð
00020A42 01                         unk_21F80C:	dc.b   1
00020A43 F0                         		dc.b $F0 ; ð
00020A44 0F                         		dc.b  $F
00020A45 00                         		dc.b   0
00020A46 00                         		dc.b   0
00020A47 F0                         		dc.b $F0 ; ð
00020A48 01                         unk_21F812:	dc.b   1
00020A49 F0                         		dc.b $F0 ; ð
00020A4A 0F                         		dc.b  $F
00020A4B 00                         		dc.b   0
00020A4C 00                         		dc.b   0
00020A4D F0                         		dc.b $F0 ; ð
00020A4E 03                         unk_21F818:	dc.b   3
00020A4F EC                         		dc.b $EC ; ì
00020A50 09                         		dc.b   9
00020A51 08                         		dc.b   8
00020A52 00                         		dc.b   0
00020A53 F4                         		dc.b $F4 ; ô
00020A54 FC                         		dc.b $FC ; ü
00020A55 06                         		dc.b   6
00020A56 08                         		dc.b   8
00020A57 06                         		dc.b   6
00020A58 04                         		dc.b   4
00020A59 FC                         		dc.b $FC ; ü
00020A5A 06                         		dc.b   6
00020A5B 08                         		dc.b   8
00020A5C 0C                         		dc.b  $C
00020A5D F4                         		dc.b $F4 ; ô
00020A5E 03                         unk_21F828:	dc.b   3
00020A5F EC                         		dc.b $EC ; ì
00020A60 09                         		dc.b   9
00020A61 08                         		dc.b   8
00020A62 00                         		dc.b   0
00020A63 F4                         		dc.b $F4 ; ô
00020A64 FC                         		dc.b $FC ; ü
00020A65 0A                         		dc.b  $A
00020A66 08                         		dc.b   8
00020A67 06                         		dc.b   6
00020A68 F4                         		dc.b $F4 ; ô
00020A69 04                         		dc.b   4
00020A6A 01                         		dc.b   1
00020A6B 08                         		dc.b   8
00020A6C 0F                         		dc.b  $F
00020A6D 0C                         		dc.b  $C
00020A6E 04                         unk_21F838:	dc.b   4
00020A6F EC                         		dc.b $EC ; ì
00020A70 09                         		dc.b   9
00020A71 08                         		dc.b   8
00020A72 00                         		dc.b   0
00020A73 F4                         		dc.b $F4 ; ô
00020A74 FC                         		dc.b $FC ; ü
00020A75 0D                         		dc.b  $D
00020A76 08                         		dc.b   8
00020A77 06                         		dc.b   6
00020A78 F4                         		dc.b $F4 ; ô
00020A79 0C                         		dc.b  $C
00020A7A 04                         		dc.b   4
00020A7B 08                         		dc.b   8
00020A7C 0E                         		dc.b  $E
00020A7D 04                         		dc.b   4
00020A7E 04                         		dc.b   4
00020A7F 00                         		dc.b   0
00020A80 08                         		dc.b   8
00020A81 10                         		dc.b $10
00020A82 F4                         		dc.b $F4 ; ô
00020A83 00                         		dc.b   0
00020A84 04                         unk_21F84E:	dc.b   4
00020A85 EC                         		dc.b $EC ; ì
00020A86 08                         		dc.b   8
00020A87 00                         		dc.b   0
00020A88 00                         		dc.b   0
00020A89 F4                         		dc.b $F4 ; ô
00020A8A F4                         		dc.b $F4 ; ô
00020A8B 0E                         		dc.b  $E
00020A8C 00                         		dc.b   0
00020A8D 03                         		dc.b   3
00020A8E EC                         		dc.b $EC ; ì
00020A8F FC                         		dc.b $FC ; ü
00020A90 01                         		dc.b   1
00020A91 00                         		dc.b   0
00020A92 0F                         		dc.b  $F
00020A93 0C                         		dc.b  $C
00020A94 0C                         		dc.b  $C
00020A95 08                         		dc.b   8
00020A96 00                         		dc.b   0
00020A97 11                         		dc.b $11
00020A98 EC                         		dc.b $EC ; ì
00020A99 00                         		dc.b   0
00020A9A 03                         unk_21F864:	dc.b   3
00020A9B F0                         		dc.b $F0 ; ð
00020A9C 02                         		dc.b   2
00020A9D 00                         		dc.b   0
00020A9E 00                         		dc.b   0
00020A9F EC                         		dc.b $EC ; ì
00020AA0 F0                         		dc.b $F0 ; ð
00020AA1 0B                         		dc.b  $B
00020AA2 00                         		dc.b   0
00020AA3 03                         		dc.b   3
00020AA4 F4                         		dc.b $F4 ; ô
00020AA5 F8                         		dc.b $F8 ; ø
00020AA6 02                         		dc.b   2
00020AA7 00                         		dc.b   0
00020AA8 0F                         		dc.b  $F
00020AA9 0C                         		dc.b  $C
00020AAA 04                         unk_21F874:	dc.b   4
00020AAB F4                         		dc.b $F4 ; ô
00020AAC 04                         		dc.b   4
00020AAD 00                         		dc.b   0
00020AAE 00                         		dc.b   0
00020AAF FC                         		dc.b $FC ; ü
00020AB0 04                         		dc.b   4
00020AB1 00                         		dc.b   0
00020AB2 00                         		dc.b   0
00020AB3 02                         		dc.b   2
00020AB4 EC                         		dc.b $EC ; ì
00020AB5 FC                         		dc.b $FC ; ü
00020AB6 0A                         		dc.b  $A
00020AB7 00                         		dc.b   0
00020AB8 03                         		dc.b   3
00020AB9 F4                         		dc.b $F4 ; ô
00020ABA FC                         		dc.b $FC ; ü
00020ABB 01                         		dc.b   1
00020ABC 00                         		dc.b   0
00020ABD 0C                         		dc.b  $C
00020ABE 0C                         		dc.b  $C
00020ABF 00                         		dc.b   0
00020AC0 03                         unk_21F88A:	dc.b   3
00020AC1 EC                         		dc.b $EC ; ì
00020AC2 09                         		dc.b   9
00020AC3 00                         		dc.b   0
00020AC4 00                         		dc.b   0
00020AC5 F4                         		dc.b $F4 ; ô
00020AC6 FC                         		dc.b $FC ; ü
00020AC7 0A                         		dc.b  $A
00020AC8 00                         		dc.b   0
00020AC9 06                         		dc.b   6
00020ACA F4                         		dc.b $F4 ; ô
00020ACB 04                         		dc.b   4
00020ACC 01                         		dc.b   1
00020ACD 00                         		dc.b   0
00020ACE 0F                         		dc.b  $F
00020ACF EC                         		dc.b $EC ; ì
00020AD0 03                         unk_21F89A:	dc.b   3
00020AD1 EC                         		dc.b $EC ; ì
00020AD2 09                         		dc.b   9
00020AD3 00                         		dc.b   0
00020AD4 00                         		dc.b   0
00020AD5 F4                         		dc.b $F4 ; ô
00020AD6 FC                         		dc.b $FC ; ü
00020AD7 09                         		dc.b   9
00020AD8 00                         		dc.b   0
00020AD9 06                         		dc.b   6
00020ADA F4                         		dc.b $F4 ; ô
00020ADB 0C                         		dc.b  $C
00020ADC 04                         		dc.b   4
00020ADD 00                         		dc.b   0
00020ADE 0C                         		dc.b  $C
00020ADF F4                         		dc.b $F4 ; ô
00020AE0 03                         unk_21F8AA:	dc.b   3
00020AE1 EC                         		dc.b $EC ; ì
00020AE2 09                         		dc.b   9
00020AE3 00                         		dc.b   0
00020AE4 00                         		dc.b   0
00020AE5 F4                         		dc.b $F4 ; ô
00020AE6 FC                         		dc.b $FC ; ü
00020AE7 0A                         		dc.b  $A
00020AE8 00                         		dc.b   0
00020AE9 06                         		dc.b   6
00020AEA F4                         		dc.b $F4 ; ô
00020AEB 04                         		dc.b   4
00020AEC 01                         		dc.b   1
00020AED 00                         		dc.b   0
00020AEE 0F                         		dc.b  $F
00020AEF EC                         		dc.b $EC ; ì
00020AF0 03                         unk_21F8BA:	dc.b   3
00020AF1 EC                         		dc.b $EC ; ì
00020AF2 09                         		dc.b   9
00020AF3 00                         		dc.b   0
00020AF4 00                         		dc.b   0
00020AF5 F4                         		dc.b $F4 ; ô
00020AF6 FC                         		dc.b $FC ; ü
00020AF7 09                         		dc.b   9
00020AF8 00                         		dc.b   0
00020AF9 06                         		dc.b   6
00020AFA F4                         		dc.b $F4 ; ô
00020AFB 0C                         		dc.b  $C
00020AFC 04                         		dc.b   4
00020AFD 00                         		dc.b   0
00020AFE 0C                         		dc.b  $C
00020AFF F4                         		dc.b $F4 ; ô
00020B00 06                         unk_21F8CA:	dc.b   6
00020B01 E8                         		dc.b $E8 ; è
00020B02 0D                         		dc.b  $D
00020B03 00                         		dc.b   0
00020B04 00                         		dc.b   0
00020B05 EC                         		dc.b $EC ; ì
00020B06 E8                         		dc.b $E8 ; è
00020B07 01                         		dc.b   1
00020B08 00                         		dc.b   0
00020B09 08                         		dc.b   8
00020B0A 0C                         		dc.b  $C
00020B0B F8                         		dc.b $F8 ; ø
00020B0C 08                         		dc.b   8
00020B0D 00                         		dc.b   0
00020B0E 0A                         		dc.b  $A
00020B0F F4                         		dc.b $F4 ; ô
00020B10 00                         		dc.b   0
00020B11 09                         		dc.b   9
00020B12 00                         		dc.b   0
00020B13 0D                         		dc.b  $D
00020B14 F4                         		dc.b $F4 ; ô
00020B15 08                         		dc.b   8
00020B16 00                         		dc.b   0
00020B17 00                         		dc.b   0
00020B18 13                         		dc.b $13
00020B19 0C                         		dc.b  $C
00020B1A 10                         		dc.b $10
00020B1B 00                         		dc.b   0
00020B1C 00                         		dc.b   0
00020B1D 14                         		dc.b $14
00020B1E F4                         		dc.b $F4 ; ô
00020B1F 00                         		dc.b   0
00020B20 04                         unk_21F8EA:	dc.b   4
00020B21 EC                         		dc.b $EC ; ì
00020B22 08                         		dc.b   8
00020B23 08                         		dc.b   8
00020B24 00                         		dc.b   0
00020B25 EC                         		dc.b $EC ; ì
00020B26 F4                         		dc.b $F4 ; ô
00020B27 0E                         		dc.b  $E
00020B28 08                         		dc.b   8
00020B29 03                         		dc.b   3
00020B2A EC                         		dc.b $EC ; ì
00020B2B FC                         		dc.b $FC ; ü
00020B2C 00                         		dc.b   0
00020B2D 08                         		dc.b   8
00020B2E 0F                         		dc.b  $F
00020B2F E4                         		dc.b $E4 ; ä
00020B30 0C                         		dc.b  $C
00020B31 0C                         		dc.b  $C
00020B32 08                         		dc.b   8
00020B33 10                         		dc.b $10
00020B34 E4                         		dc.b $E4 ; ä
00020B35 00                         		dc.b   0
00020B36 03                         unk_21F900:	dc.b   3
00020B37 EC                         		dc.b $EC ; ì
00020B38 08                         		dc.b   8
00020B39 08                         		dc.b   8
00020B3A 00                         		dc.b   0
00020B3B EC                         		dc.b $EC ; ì
00020B3C F4                         		dc.b $F4 ; ô
00020B3D 02                         		dc.b   2
00020B3E 08                         		dc.b   8
00020B3F 03                         		dc.b   3
00020B40 04                         		dc.b   4
00020B41 F4                         		dc.b $F4 ; ô
00020B42 0F                         		dc.b  $F
00020B43 08                         		dc.b   8
00020B44 06                         		dc.b   6
00020B45 E4                         		dc.b $E4 ; ä
00020B46 03                         unk_21F910:	dc.b   3
00020B47 EC                         		dc.b $EC ; ì
00020B48 0E                         		dc.b  $E
00020B49 08                         		dc.b   8
00020B4A 00                         		dc.b   0
00020B4B EC                         		dc.b $EC ; ì
00020B4C 04                         		dc.b   4
00020B4D 0C                         		dc.b  $C
00020B4E 08                         		dc.b   8
00020B4F 0C                         		dc.b  $C
00020B50 E4                         		dc.b $E4 ; ä
00020B51 0C                         		dc.b  $C
00020B52 0C                         		dc.b  $C
00020B53 08                         		dc.b   8
00020B54 10                         		dc.b $10
00020B55 EC                         		dc.b $EC ; ì
00020B56 02                         unk_21F920:	dc.b   2
00020B57 EC                         		dc.b $EC ; ì
00020B58 0E                         		dc.b  $E
00020B59 08                         		dc.b   8
00020B5A 00                         		dc.b   0
00020B5B EC                         		dc.b $EC ; ì
00020B5C 04                         		dc.b   4
00020B5D 0D                         		dc.b  $D
00020B5E 08                         		dc.b   8
00020B5F 0C                         		dc.b  $C
00020B60 E4                         		dc.b $E4 ; ä
00020B61 00                         		dc.b   0
00020B62 03                         unk_21F92C:	dc.b   3
00020B63 EC                         		dc.b $EC ; ì
00020B64 0E                         		dc.b  $E
00020B65 08                         		dc.b   8
00020B66 00                         		dc.b   0
00020B67 EC                         		dc.b $EC ; ì
00020B68 F4                         		dc.b $F4 ; ô
00020B69 02                         		dc.b   2
00020B6A 08                         		dc.b   8
00020B6B 0C                         		dc.b  $C
00020B6C 0C                         		dc.b  $C
00020B6D 04                         		dc.b   4
00020B6E 09                         		dc.b   9
00020B6F 08                         		dc.b   8
00020B70 0F                         		dc.b  $F
00020B71 F4                         		dc.b $F4 ; ô
00020B72 04                         unk_21F93C:	dc.b   4
00020B73 EC                         		dc.b $EC ; ì
00020B74 0E                         		dc.b  $E
00020B75 08                         		dc.b   8
00020B76 00                         		dc.b   0
00020B77 EC                         		dc.b $EC ; ì
00020B78 FC                         		dc.b $FC ; ü
00020B79 01                         		dc.b   1
00020B7A 08                         		dc.b   8
00020B7B 0C                         		dc.b  $C
00020B7C 0C                         		dc.b  $C
00020B7D 04                         		dc.b   4
00020B7E 05                         		dc.b   5
00020B7F 08                         		dc.b   8
00020B80 0E                         		dc.b  $E
00020B81 FC                         		dc.b $FC ; ü
00020B82 04                         		dc.b   4
00020B83 00                         		dc.b   0
00020B84 08                         		dc.b   8
00020B85 12                         		dc.b $12
00020B86 F4                         		dc.b $F4 ; ô
00020B87 00                         		dc.b   0
00020B88 04                         unk_21F952:	dc.b   4
00020B89 EC                         		dc.b $EC ; ì
00020B8A 0E                         		dc.b  $E
00020B8B 08                         		dc.b   8
00020B8C 00                         		dc.b   0
00020B8D EC                         		dc.b $EC ; ì
00020B8E FC                         		dc.b $FC ; ü
00020B8F 01                         		dc.b   1
00020B90 08                         		dc.b   8
00020B91 0C                         		dc.b  $C
00020B92 0C                         		dc.b  $C
00020B93 04                         		dc.b   4
00020B94 05                         		dc.b   5
00020B95 08                         		dc.b   8
00020B96 0E                         		dc.b  $E
00020B97 FC                         		dc.b $FC ; ü
00020B98 04                         		dc.b   4
00020B99 00                         		dc.b   0
00020B9A 08                         		dc.b   8
00020B9B 12                         		dc.b $12
00020B9C F4                         		dc.b $F4 ; ô
00020B9D 00                         		dc.b   0
00020B9E 04                         unk_21F968:	dc.b   4
00020B9F EC                         		dc.b $EC ; ì
00020BA0 0E                         		dc.b  $E
00020BA1 08                         		dc.b   8
00020BA2 00                         		dc.b   0
00020BA3 EC                         		dc.b $EC ; ì
00020BA4 F4                         		dc.b $F4 ; ô
00020BA5 02                         		dc.b   2
00020BA6 08                         		dc.b   8
00020BA7 0C                         		dc.b  $C
00020BA8 0C                         		dc.b  $C
00020BA9 04                         		dc.b   4
00020BAA 08                         		dc.b   8
00020BAB 08                         		dc.b   8
00020BAC 0F                         		dc.b  $F
00020BAD EC                         		dc.b $EC ; ì
00020BAE 0C                         		dc.b  $C
00020BAF 04                         		dc.b   4
00020BB0 08                         		dc.b   8
00020BB1 12                         		dc.b $12
00020BB2 FC                         		dc.b $FC ; ü
00020BB3 00                         		dc.b   0
00020BB4 02                         unk_21F97E:	dc.b   2
00020BB5 EC                         		dc.b $EC ; ì
00020BB6 0B                         		dc.b  $B
00020BB7 00                         		dc.b   0
00020BB8 00                         		dc.b   0
00020BB9 F4                         		dc.b $F4 ; ô
00020BBA 0C                         		dc.b  $C
00020BBB 0C                         		dc.b  $C
00020BBC 00                         		dc.b   0
00020BBD 0C                         		dc.b  $C
00020BBE F4                         		dc.b $F4 ; ô
00020BBF 00                         		dc.b   0
00020BC0 03                         unk_21F98A:	dc.b   3
00020BC1 EC                         		dc.b $EC ; ì
00020BC2 0A                         		dc.b  $A
00020BC3 00                         		dc.b   0
00020BC4 00                         		dc.b   0
00020BC5 F4                         		dc.b $F4 ; ô
00020BC6 04                         		dc.b   4
00020BC7 04                         		dc.b   4
00020BC8 00                         		dc.b   0
00020BC9 09                         		dc.b   9
00020BCA FC                         		dc.b $FC ; ü
00020BCB 0C                         		dc.b  $C
00020BCC 0C                         		dc.b  $C
00020BCD 00                         		dc.b   0
00020BCE 0B                         		dc.b  $B
00020BCF F4                         		dc.b $F4 ; ô
00020BD0 03                         unk_21F99A:	dc.b   3
00020BD1 EC                         		dc.b $EC ; ì
00020BD2 0A                         		dc.b  $A
00020BD3 00                         		dc.b   0
00020BD4 00                         		dc.b   0
00020BD5 F4                         		dc.b $F4 ; ô
00020BD6 04                         		dc.b   4
00020BD7 04                         		dc.b   4
00020BD8 00                         		dc.b   0
00020BD9 09                         		dc.b   9
00020BDA FC                         		dc.b $FC ; ü
00020BDB 0C                         		dc.b  $C
00020BDC 0C                         		dc.b  $C
00020BDD 00                         		dc.b   0
00020BDE 0B                         		dc.b  $B
00020BDF F4                         		dc.b $F4 ; ô
00020BE0 04                         unk_21F9AA:	dc.b   4
00020BE1 E4                         		dc.b $E4 ; ä
00020BE2 00                         		dc.b   0
00020BE3 00                         		dc.b   0
00020BE4 00                         		dc.b   0
00020BE5 FC                         		dc.b $FC ; ü
00020BE6 EC                         		dc.b $EC ; ì
00020BE7 0D                         		dc.b  $D
00020BE8 00                         		dc.b   0
00020BE9 01                         		dc.b   1
00020BEA F4                         		dc.b $F4 ; ô
00020BEB FC                         		dc.b $FC ; ü
00020BEC 0A                         		dc.b  $A
00020BED 00                         		dc.b   0
00020BEE 09                         		dc.b   9
00020BEF F4                         		dc.b $F4 ; ô
00020BF0 0C                         		dc.b  $C
00020BF1 00                         		dc.b   0
00020BF2 00                         		dc.b   0
00020BF3 12                         		dc.b $12
00020BF4 0C                         		dc.b  $C
00020BF5 00                         		dc.b   0
00020BF6 02                         unk_21F9C0:	dc.b   2
00020BF7 EC                         		dc.b $EC ; ì
00020BF8 04                         		dc.b   4
00020BF9 00                         		dc.b   0
00020BFA 00                         		dc.b   0
00020BFB FC                         		dc.b $FC ; ü
00020BFC F4                         		dc.b $F4 ; ô
00020BFD 0F                         		dc.b  $F
00020BFE 00                         		dc.b   0
00020BFF 02                         		dc.b   2
00020C00 F4                         		dc.b $F4 ; ô
00020C01 00                         		dc.b   0
00020C02 03                         unk_21F9CC:	dc.b   3
00020C03 EC                         		dc.b $EC ; ì
00020C04 04                         		dc.b   4
00020C05 00                         		dc.b   0
00020C06 00                         		dc.b   0
00020C07 FC                         		dc.b $FC ; ü
00020C08 FC                         		dc.b $FC ; ü
00020C09 01                         		dc.b   1
00020C0A 00                         		dc.b   0
00020C0B 02                         		dc.b   2
00020C0C EC                         		dc.b $EC ; ì
00020C0D F4                         		dc.b $F4 ; ô
00020C0E 0F                         		dc.b  $F
00020C0F 00                         		dc.b   0
00020C10 04                         		dc.b   4
00020C11 F4                         		dc.b $F4 ; ô
00020C12 03                         unk_21F9DC:	dc.b   3
00020C13 E8                         		dc.b $E8 ; è
00020C14 0A                         		dc.b  $A
00020C15 00                         		dc.b   0
00020C16 00                         		dc.b   0
00020C17 FC                         		dc.b $FC ; ü
00020C18 F0                         		dc.b $F0 ; ð
00020C19 05                         		dc.b   5
00020C1A 00                         		dc.b   0
00020C1B 09                         		dc.b   9
00020C1C EC                         		dc.b $EC ; ì
00020C1D 00                         		dc.b   0
00020C1E 06                         		dc.b   6
00020C1F 00                         		dc.b   0
00020C20 0D                         		dc.b  $D
00020C21 F4                         		dc.b $F4 ; ô
00020C22 03                         unk_21F9EC:	dc.b   3
00020C23 E8                         		dc.b $E8 ; è
00020C24 0E                         		dc.b  $E
00020C25 00                         		dc.b   0
00020C26 00                         		dc.b   0
00020C27 F4                         		dc.b $F4 ; ô
00020C28 F0                         		dc.b $F0 ; ð
00020C29 00                         		dc.b   0
00020C2A 00                         		dc.b   0
00020C2B 0C                         		dc.b  $C
00020C2C EC                         		dc.b $EC ; ì
00020C2D 00                         		dc.b   0
00020C2E 06                         		dc.b   6
00020C2F 00                         		dc.b   0
00020C30 0D                         		dc.b  $D
00020C31 F4                         		dc.b $F4 ; ô
00020C32 04                         unk_21F9FC:	dc.b   4
00020C33 E8                         		dc.b $E8 ; è
00020C34 0A                         		dc.b  $A
00020C35 00                         		dc.b   0
00020C36 00                         		dc.b   0
00020C37 FC                         		dc.b $FC ; ü
00020C38 F0                         		dc.b $F0 ; ð
00020C39 00                         		dc.b   0
00020C3A 00                         		dc.b   0
00020C3B 09                         		dc.b   9
00020C3C EC                         		dc.b $EC ; ì
00020C3D F0                         		dc.b $F0 ; ð
00020C3E 01                         		dc.b   1
00020C3F 00                         		dc.b   0
00020C40 0A                         		dc.b  $A
00020C41 F4                         		dc.b $F4 ; ô
00020C42 00                         		dc.b   0
00020C43 06                         		dc.b   6
00020C44 00                         		dc.b   0
00020C45 0C                         		dc.b  $C
00020C46 F4                         		dc.b $F4 ; ô
00020C47 00                         		dc.b   0
00020C48 02                         unk_21FA12:	dc.b   2
00020C49 F8                         		dc.b $F8 ; ø
00020C4A 02                         		dc.b   2
00020C4B 00                         		dc.b   0
00020C4C 00                         		dc.b   0
00020C4D EC                         		dc.b $EC ; ì
00020C4E F0                         		dc.b $F0 ; ð
00020C4F 0F                         		dc.b  $F
00020C50 00                         		dc.b   0
00020C51 03                         		dc.b   3
00020C52 F4                         		dc.b $F4 ; ô
00020C53 00                         		dc.b   0
00020C54 02                         unk_21FA1E:	dc.b   2
00020C55 F8                         		dc.b $F8 ; ø
00020C56 02                         		dc.b   2
00020C57 00                         		dc.b   0
00020C58 00                         		dc.b   0
00020C59 EC                         		dc.b $EC ; ì
00020C5A F0                         		dc.b $F0 ; ð
00020C5B 0F                         		dc.b  $F
00020C5C 00                         		dc.b   0
00020C5D 03                         		dc.b   3
00020C5E F4                         		dc.b $F4 ; ô
00020C5F 00                         		dc.b   0
00020C60 02                         unk_21FA2A:	dc.b   2
00020C61 F8                         		dc.b $F8 ; ø
00020C62 02                         		dc.b   2
00020C63 00                         		dc.b   0
00020C64 00                         		dc.b   0
00020C65 EC                         		dc.b $EC ; ì
00020C66 F0                         		dc.b $F0 ; ð
00020C67 0F                         		dc.b  $F
00020C68 00                         		dc.b   0
00020C69 03                         		dc.b   3
00020C6A F4                         		dc.b $F4 ; ô
00020C6B 00                         		dc.b   0
00020C6C 02                         unk_21FA36:	dc.b   2
00020C6D F8                         		dc.b $F8 ; ø
00020C6E 01                         		dc.b   1
00020C6F 00                         		dc.b   0
00020C70 00                         		dc.b   0
00020C71 EC                         		dc.b $EC ; ì
00020C72 F0                         		dc.b $F0 ; ð
00020C73 0F                         		dc.b  $F
00020C74 00                         		dc.b   0
00020C75 02                         		dc.b   2
00020C76 F4                         		dc.b $F4 ; ô
00020C77 00                         		dc.b   0
00020C78 05                         unk_21FA42:	dc.b   5
00020C79 E8                         		dc.b $E8 ; è
00020C7A 08                         		dc.b   8
00020C7B 00                         		dc.b   0
00020C7C 00                         		dc.b   0
00020C7D F4                         		dc.b $F4 ; ô
00020C7E F0                         		dc.b $F0 ; ð
00020C7F 0E                         		dc.b  $E
00020C80 00                         		dc.b   0
00020C81 03                         		dc.b   3
00020C82 EC                         		dc.b $EC ; ì
00020C83 F0                         		dc.b $F0 ; ð
00020C84 02                         		dc.b   2
00020C85 00                         		dc.b   0
00020C86 0F                         		dc.b  $F
00020C87 0C                         		dc.b  $C
00020C88 08                         		dc.b   8
00020C89 05                         		dc.b   5
00020C8A 00                         		dc.b   0
00020C8B 12                         		dc.b $12
00020C8C EC                         		dc.b $EC ; ì
00020C8D 08                         		dc.b   8
00020C8E 00                         		dc.b   0
00020C8F 00                         		dc.b   0
00020C90 16                         		dc.b $16
00020C91 FC                         		dc.b $FC ; ü
00020C92 03                         unk_21FA5C:	dc.b   3
00020C93 EC                         		dc.b $EC ; ì
00020C94 08                         		dc.b   8
00020C95 00                         		dc.b   0
00020C96 00                         		dc.b   0
00020C97 F4                         		dc.b $F4 ; ô
00020C98 F4                         		dc.b $F4 ; ô
00020C99 0F                         		dc.b  $F
00020C9A 00                         		dc.b   0
00020C9B 03                         		dc.b   3
00020C9C EC                         		dc.b $EC ; ì
00020C9D FC                         		dc.b $FC ; ü
00020C9E 01                         		dc.b   1
00020C9F 00                         		dc.b   0
00020CA0 13                         		dc.b $13
00020CA1 0C                         		dc.b  $C
00020CA2 05                         unk_21FA6C:	dc.b   5
00020CA3 E8                         		dc.b $E8 ; è
00020CA4 08                         		dc.b   8
00020CA5 00                         		dc.b   0
00020CA6 00                         		dc.b   0
00020CA7 F4                         		dc.b $F4 ; ô
00020CA8 F0                         		dc.b $F0 ; ð
00020CA9 0E                         		dc.b  $E
00020CAA 00                         		dc.b   0
00020CAB 03                         		dc.b   3
00020CAC F4                         		dc.b $F4 ; ô
00020CAD F8                         		dc.b $F8 ; ø
00020CAE 02                         		dc.b   2
00020CAF 00                         		dc.b   0
00020CB0 0F                         		dc.b  $F
00020CB1 EC                         		dc.b $EC ; ì
00020CB2 08                         		dc.b   8
00020CB3 05                         		dc.b   5
00020CB4 00                         		dc.b   0
00020CB5 12                         		dc.b $12
00020CB6 F4                         		dc.b $F4 ; ô
00020CB7 08                         		dc.b   8
00020CB8 00                         		dc.b   0
00020CB9 00                         		dc.b   0
00020CBA 16                         		dc.b $16
00020CBB 04                         		dc.b   4
00020CBC 03                         unk_21FA86:	dc.b   3
00020CBD EC                         		dc.b $EC ; ì
00020CBE 08                         		dc.b   8
00020CBF 00                         		dc.b   0
00020CC0 00                         		dc.b   0
00020CC1 F4                         		dc.b $F4 ; ô
00020CC2 F4                         		dc.b $F4 ; ô
00020CC3 0F                         		dc.b  $F
00020CC4 00                         		dc.b   0
00020CC5 03                         		dc.b   3
00020CC6 EC                         		dc.b $EC ; ì
00020CC7 FC                         		dc.b $FC ; ü
00020CC8 01                         		dc.b   1
00020CC9 00                         		dc.b   0
00020CCA 13                         		dc.b $13
00020CCB 0C                         		dc.b  $C
00020CCC 02                         unk_21FA96:	dc.b   2
00020CCD EC                         		dc.b $EC ; ì
00020CCE 0F                         		dc.b  $F
00020CCF 00                         		dc.b   0
00020CD0 00                         		dc.b   0
00020CD1 F0                         		dc.b $F0 ; ð
00020CD2 0C                         		dc.b  $C
00020CD3 08                         		dc.b   8
00020CD4 00                         		dc.b   0
00020CD5 10                         		dc.b $10
00020CD6 F8                         		dc.b $F8 ; ø
00020CD7 00                         		dc.b   0
00020CD8 02                         unk_21FAA2:	dc.b   2
00020CD9 EC                         		dc.b $EC ; ì
00020CDA 0F                         		dc.b  $F
00020CDB 00                         		dc.b   0
00020CDC 00                         		dc.b   0
00020CDD F0                         		dc.b $F0 ; ð
00020CDE 0C                         		dc.b  $C
00020CDF 08                         		dc.b   8
00020CE0 00                         		dc.b   0
00020CE1 10                         		dc.b $10
00020CE2 F8                         		dc.b $F8 ; ø
00020CE3 00                         		dc.b   0
00020CE4 02                         unk_21FAAE:	dc.b   2
00020CE5 EC                         		dc.b $EC ; ì
00020CE6 0F                         		dc.b  $F
00020CE7 00                         		dc.b   0
00020CE8 00                         		dc.b   0
00020CE9 F0                         		dc.b $F0 ; ð
00020CEA 0C                         		dc.b  $C
00020CEB 08                         		dc.b   8
00020CEC 00                         		dc.b   0
00020CED 10                         		dc.b $10
00020CEE F8                         		dc.b $F8 ; ø
00020CEF 00                         		dc.b   0
00020CF0 02                         unk_21FABA:	dc.b   2
00020CF1 EC                         		dc.b $EC ; ì
00020CF2 0F                         		dc.b  $F
00020CF3 00                         		dc.b   0
00020CF4 00                         		dc.b   0
00020CF5 F0                         		dc.b $F0 ; ð
00020CF6 0C                         		dc.b  $C
00020CF7 04                         		dc.b   4
00020CF8 00                         		dc.b   0
00020CF9 10                         		dc.b $10
00020CFA F8                         		dc.b $F8 ; ø
00020CFB 00                         		dc.b   0
00020CFC 04                         unk_21FAC6:	dc.b   4
00020CFD EC                         		dc.b $EC ; ì
00020CFE 09                         		dc.b   9
00020CFF 00                         		dc.b   0
00020D00 00                         		dc.b   0
00020D01 F0                         		dc.b $F0 ; ð
00020D02 F4                         		dc.b $F4 ; ô
00020D03 02                         		dc.b   2
00020D04 00                         		dc.b   0
00020D05 06                         		dc.b   6
00020D06 E8                         		dc.b $E8 ; è
00020D07 FC                         		dc.b $FC ; ü
00020D08 0E                         		dc.b  $E
00020D09 00                         		dc.b   0
00020D0A 09                         		dc.b   9
00020D0B F0                         		dc.b $F0 ; ð
00020D0C 04                         		dc.b   4
00020D0D 01                         		dc.b   1
00020D0E 00                         		dc.b   0
00020D0F 15                         		dc.b $15
00020D10 10                         		dc.b $10
00020D11 00                         		dc.b   0
00020D12 03                         unk_21FADC:	dc.b   3
00020D13 EC                         		dc.b $EC ; ì
00020D14 04                         		dc.b   4
00020D15 00                         		dc.b   0
00020D16 00                         		dc.b   0
00020D17 FC                         		dc.b $FC ; ü
00020D18 F4                         		dc.b $F4 ; ô
00020D19 02                         		dc.b   2
00020D1A 00                         		dc.b   0
00020D1B 02                         		dc.b   2
00020D1C EC                         		dc.b $EC ; ì
00020D1D F4                         		dc.b $F4 ; ô
00020D1E 0F                         		dc.b  $F
00020D1F 00                         		dc.b   0
00020D20 05                         		dc.b   5
00020D21 F4                         		dc.b $F4 ; ô
00020D22 05                         unk_21FAEC:	dc.b   5
00020D23 EC                         		dc.b $EC ; ì
00020D24 08                         		dc.b   8
00020D25 00                         		dc.b   0
00020D26 00                         		dc.b   0
00020D27 F0                         		dc.b $F0 ; ð
00020D28 F4                         		dc.b $F4 ; ô
00020D29 02                         		dc.b   2
00020D2A 00                         		dc.b   0
00020D2B 03                         		dc.b   3
00020D2C E8                         		dc.b $E8 ; è
00020D2D F4                         		dc.b $F4 ; ô
00020D2E 0E                         		dc.b  $E
00020D2F 00                         		dc.b   0
00020D30 06                         		dc.b   6
00020D31 F0                         		dc.b $F0 ; ð
00020D32 FC                         		dc.b $FC ; ü
00020D33 01                         		dc.b   1
00020D34 00                         		dc.b   0
00020D35 12                         		dc.b $12
00020D36 10                         		dc.b $10
00020D37 0C                         		dc.b  $C
00020D38 08                         		dc.b   8
00020D39 00                         		dc.b   0
00020D3A 14                         		dc.b $14
00020D3B F8                         		dc.b $F8 ; ø
00020D3C 03                         unk_21FB06:	dc.b   3
00020D3D EC                         		dc.b $EC ; ì
00020D3E 04                         		dc.b   4
00020D3F 00                         		dc.b   0
00020D40 00                         		dc.b   0
00020D41 FC                         		dc.b $FC ; ü
00020D42 F4                         		dc.b $F4 ; ô
00020D43 02                         		dc.b   2
00020D44 00                         		dc.b   0
00020D45 02                         		dc.b   2
00020D46 EC                         		dc.b $EC ; ì
00020D47 F4                         		dc.b $F4 ; ô
00020D48 0F                         		dc.b  $F
00020D49 00                         		dc.b   0
00020D4A 05                         		dc.b   5
00020D4B F4                         		dc.b $F4 ; ô
00020D4C 05                         unk_21FB16:	dc.b   5
00020D4D EC                         		dc.b $EC ; ì
00020D4E 08                         		dc.b   8
00020D4F 00                         		dc.b   0
00020D50 00                         		dc.b   0
00020D51 F4                         		dc.b $F4 ; ô
00020D52 F4                         		dc.b $F4 ; ô
00020D53 0C                         		dc.b  $C
00020D54 00                         		dc.b   0
00020D55 03                         		dc.b   3
00020D56 EC                         		dc.b $EC ; ì
00020D57 F4                         		dc.b $F4 ; ô
00020D58 00                         		dc.b   0
00020D59 00                         		dc.b   0
00020D5A 07                         		dc.b   7
00020D5B 0C                         		dc.b  $C
00020D5C FC                         		dc.b $FC ; ü
00020D5D 02                         		dc.b   2
00020D5E 00                         		dc.b   0
00020D5F 08                         		dc.b   8
00020D60 EC                         		dc.b $EC ; ì
00020D61 FC                         		dc.b $FC ; ü
00020D62 0E                         		dc.b  $E
00020D63 00                         		dc.b   0
00020D64 0B                         		dc.b  $B
00020D65 F4                         		dc.b $F4 ; ô
00020D66 04                         unk_21FB30:	dc.b   4
00020D67 EC                         		dc.b $EC ; ì
00020D68 09                         		dc.b   9
00020D69 00                         		dc.b   0
00020D6A 00                         		dc.b   0
00020D6B F4                         		dc.b $F4 ; ô
00020D6C F4                         		dc.b $F4 ; ô
00020D6D 00                         		dc.b   0
00020D6E 00                         		dc.b   0
00020D6F 06                         		dc.b   6
00020D70 0C                         		dc.b  $C
00020D71 FC                         		dc.b $FC ; ü
00020D72 02                         		dc.b   2
00020D73 00                         		dc.b   0
00020D74 07                         		dc.b   7
00020D75 EC                         		dc.b $EC ; ì
00020D76 FC                         		dc.b $FC ; ü
00020D77 0E                         		dc.b  $E
00020D78 00                         		dc.b   0
00020D79 0A                         		dc.b  $A
00020D7A F4                         		dc.b $F4 ; ô
00020D7B 00                         		dc.b   0
00020D7C 05                         unk_21FB46:	dc.b   5
00020D7D EC                         		dc.b $EC ; ì
00020D7E 08                         		dc.b   8
00020D7F 00                         		dc.b   0
00020D80 00                         		dc.b   0
00020D81 F4                         		dc.b $F4 ; ô
00020D82 F4                         		dc.b $F4 ; ô
00020D83 0C                         		dc.b  $C
00020D84 00                         		dc.b   0
00020D85 03                         		dc.b   3
00020D86 EC                         		dc.b $EC ; ì
00020D87 F4                         		dc.b $F4 ; ô
00020D88 00                         		dc.b   0
00020D89 00                         		dc.b   0
00020D8A 07                         		dc.b   7
00020D8B 0C                         		dc.b  $C
00020D8C FC                         		dc.b $FC ; ü
00020D8D 0E                         		dc.b  $E
00020D8E 00                         		dc.b   0
00020D8F 08                         		dc.b   8
00020D90 EC                         		dc.b $EC ; ì
00020D91 FC                         		dc.b $FC ; ü
00020D92 01                         		dc.b   1
00020D93 00                         		dc.b   0
00020D94 14                         		dc.b $14
00020D95 0C                         		dc.b  $C
00020D96 04                         unk_21FB60:	dc.b   4
00020D97 EC                         		dc.b $EC ; ì
00020D98 09                         		dc.b   9
00020D99 00                         		dc.b   0
00020D9A 00                         		dc.b   0
00020D9B F4                         		dc.b $F4 ; ô
00020D9C F4                         		dc.b $F4 ; ô
00020D9D 00                         		dc.b   0
00020D9E 00                         		dc.b   0
00020D9F 06                         		dc.b   6
00020DA0 0C                         		dc.b  $C
00020DA1 FC                         		dc.b $FC ; ü
00020DA2 0E                         		dc.b  $E
00020DA3 00                         		dc.b   0
00020DA4 07                         		dc.b   7
00020DA5 EC                         		dc.b $EC ; ì
00020DA6 FC                         		dc.b $FC ; ü
00020DA7 01                         		dc.b   1
00020DA8 00                         		dc.b   0
00020DA9 13                         		dc.b $13
00020DAA 0C                         		dc.b  $C
00020DAB 00                         		dc.b   0
00020DAC 03                         unk_21FB76:	dc.b   3
00020DAD EC                         		dc.b $EC ; ì
00020DAE 09                         		dc.b   9
00020DAF 00                         		dc.b   0
00020DB0 00                         		dc.b   0
00020DB1 F8                         		dc.b $F8 ; ø
00020DB2 F4                         		dc.b $F4 ; ô
00020DB3 00                         		dc.b   0
00020DB4 00                         		dc.b   0
00020DB5 06                         		dc.b   6
00020DB6 F0                         		dc.b $F0 ; ð
00020DB7 FC                         		dc.b $FC ; ü
00020DB8 0A                         		dc.b  $A
00020DB9 00                         		dc.b   0
00020DBA 07                         		dc.b   7
00020DBB F8                         		dc.b $F8 ; ø
00020DBC 04                         unk_21FB86:	dc.b   4
00020DBD EC                         		dc.b $EC ; ì
00020DBE 09                         		dc.b   9
00020DBF 00                         		dc.b   0
00020DC0 00                         		dc.b   0
00020DC1 F8                         		dc.b $F8 ; ø
00020DC2 F4                         		dc.b $F4 ; ô
00020DC3 00                         		dc.b   0
00020DC4 00                         		dc.b   0
00020DC5 06                         		dc.b   6
00020DC6 F0                         		dc.b $F0 ; ð
00020DC7 FC                         		dc.b $FC ; ü
00020DC8 09                         		dc.b   9
00020DC9 00                         		dc.b   0
00020DCA 07                         		dc.b   7
00020DCB F8                         		dc.b $F8 ; ø
00020DCC 0C                         		dc.b  $C
00020DCD 04                         		dc.b   4
00020DCE 00                         		dc.b   0
00020DCF 0D                         		dc.b  $D
00020DD0 F8                         		dc.b $F8 ; ø
00020DD1 00                         		dc.b   0
00020DD2 03                         unk_21FB9C:	dc.b   3
00020DD3 EC                         		dc.b $EC ; ì
00020DD4 09                         		dc.b   9
00020DD5 00                         		dc.b   0
00020DD6 00                         		dc.b   0
00020DD7 F8                         		dc.b $F8 ; ø
00020DD8 F4                         		dc.b $F4 ; ô
00020DD9 00                         		dc.b   0
00020DDA 00                         		dc.b   0
00020DDB 06                         		dc.b   6
00020DDC F0                         		dc.b $F0 ; ð
00020DDD FC                         		dc.b $FC ; ü
00020DDE 0E                         		dc.b  $E
00020DDF 00                         		dc.b   0
00020DE0 07                         		dc.b   7
00020DE1 F0                         		dc.b $F0 ; ð
00020DE2 04                         unk_21FBAC:	dc.b   4
00020DE3 EC                         		dc.b $EC ; ì
00020DE4 09                         		dc.b   9
00020DE5 00                         		dc.b   0
00020DE6 00                         		dc.b   0
00020DE7 F8                         		dc.b $F8 ; ø
00020DE8 F4                         		dc.b $F4 ; ô
00020DE9 00                         		dc.b   0
00020DEA 00                         		dc.b   0
00020DEB 06                         		dc.b   6
00020DEC F0                         		dc.b $F0 ; ð
00020DED FC                         		dc.b $FC ; ü
00020DEE 00                         		dc.b   0
00020DEF 00                         		dc.b   0
00020DF0 07                         		dc.b   7
00020DF1 F0                         		dc.b $F0 ; ð
00020DF2 FC                         		dc.b $FC ; ü
00020DF3 0A                         		dc.b  $A
00020DF4 00                         		dc.b   0
00020DF5 08                         		dc.b   8
00020DF6 F8                         		dc.b $F8 ; ø
00020DF7 00                         		dc.b   0
00020DF8 05                         unk_21FBC2:	dc.b   5
00020DF9 EC                         		dc.b $EC ; ì
00020DFA 08                         		dc.b   8
00020DFB 00                         		dc.b   0
00020DFC 00                         		dc.b   0
00020DFD F8                         		dc.b $F8 ; ø
00020DFE F4                         		dc.b $F4 ; ô
00020DFF 08                         		dc.b   8
00020E00 00                         		dc.b   0
00020E01 03                         		dc.b   3
00020E02 F0                         		dc.b $F0 ; ð
00020E03 F4                         		dc.b $F4 ; ô
00020E04 00                         		dc.b   0
00020E05 00                         		dc.b   0
00020E06 06                         		dc.b   6
00020E07 08                         		dc.b   8
00020E08 FC                         		dc.b $FC ; ü
00020E09 0D                         		dc.b  $D
00020E0A 00                         		dc.b   0
00020E0B 07                         		dc.b   7
00020E0C F0                         		dc.b $F0 ; ð
00020E0D 0C                         		dc.b  $C
00020E0E 04                         		dc.b   4
00020E0F 00                         		dc.b   0
00020E10 0F                         		dc.b  $F
00020E11 F8                         		dc.b $F8 ; ø
00020E12 05                         unk_21FBDC:	dc.b   5
00020E13 EC                         		dc.b $EC ; ì
00020E14 08                         		dc.b   8
00020E15 00                         		dc.b   0
00020E16 00                         		dc.b   0
00020E17 F8                         		dc.b $F8 ; ø
00020E18 F4                         		dc.b $F4 ; ô
00020E19 08                         		dc.b   8
00020E1A 00                         		dc.b   0
00020E1B 03                         		dc.b   3
00020E1C F0                         		dc.b $F0 ; ð
00020E1D F4                         		dc.b $F4 ; ô
00020E1E 00                         		dc.b   0
00020E1F 00                         		dc.b   0
00020E20 06                         		dc.b   6
00020E21 08                         		dc.b   8
00020E22 FC                         		dc.b $FC ; ü
00020E23 0D                         		dc.b  $D
00020E24 00                         		dc.b   0
00020E25 07                         		dc.b   7
00020E26 F0                         		dc.b $F0 ; ð
00020E27 0C                         		dc.b  $C
00020E28 08                         		dc.b   8
00020E29 00                         		dc.b   0
00020E2A 0F                         		dc.b  $F
00020E2B F0                         		dc.b $F0 ; ð
00020E2C 05                         unk_21FBF6:	dc.b   5
00020E2D EC                         		dc.b $EC ; ì
00020E2E 08                         		dc.b   8
00020E2F 00                         		dc.b   0
00020E30 00                         		dc.b   0
00020E31 F8                         		dc.b $F8 ; ø
00020E32 F4                         		dc.b $F4 ; ô
00020E33 08                         		dc.b   8
00020E34 00                         		dc.b   0
00020E35 03                         		dc.b   3
00020E36 F0                         		dc.b $F0 ; ð
00020E37 F4                         		dc.b $F4 ; ô
00020E38 00                         		dc.b   0
00020E39 00                         		dc.b   0
00020E3A 06                         		dc.b   6
00020E3B 08                         		dc.b   8
00020E3C FC                         		dc.b $FC ; ü
00020E3D 0D                         		dc.b  $D
00020E3E 00                         		dc.b   0
00020E3F 07                         		dc.b   7
00020E40 F0                         		dc.b $F0 ; ð
00020E41 0C                         		dc.b  $C
00020E42 04                         		dc.b   4
00020E43 00                         		dc.b   0
00020E44 0F                         		dc.b  $F
00020E45 F0                         		dc.b $F0 ; ð
00020E46 05                         unk_21FC10:	dc.b   5
00020E47 EC                         		dc.b $EC ; ì
00020E48 08                         		dc.b   8
00020E49 00                         		dc.b   0
00020E4A 00                         		dc.b   0
00020E4B F8                         		dc.b $F8 ; ø
00020E4C F4                         		dc.b $F4 ; ô
00020E4D 08                         		dc.b   8
00020E4E 00                         		dc.b   0
00020E4F 03                         		dc.b   3
00020E50 F0                         		dc.b $F0 ; ð
00020E51 F4                         		dc.b $F4 ; ô
00020E52 00                         		dc.b   0
00020E53 00                         		dc.b   0
00020E54 06                         		dc.b   6
00020E55 08                         		dc.b   8
00020E56 FC                         		dc.b $FC ; ü
00020E57 0D                         		dc.b  $D
00020E58 00                         		dc.b   0
00020E59 07                         		dc.b   7
00020E5A F0                         		dc.b $F0 ; ð
00020E5B 0C                         		dc.b  $C
00020E5C 04                         		dc.b   4
00020E5D 00                         		dc.b   0
00020E5E 0F                         		dc.b  $F
00020E5F 00                         		dc.b   0
00020E60 05                         unk_21FC2A:	dc.b   5
00020E61 EC                         		dc.b $EC ; ì
00020E62 05                         		dc.b   5
00020E63 00                         		dc.b   0
00020E64 00                         		dc.b   0
00020E65 F8                         		dc.b $F8 ; ø
00020E66 EC                         		dc.b $EC ; ì
00020E67 02                         		dc.b   2
00020E68 00                         		dc.b   0
00020E69 04                         		dc.b   4
00020E6A F0                         		dc.b $F0 ; ð
00020E6B EC                         		dc.b $EC ; ì
00020E6C 01                         		dc.b   1
00020E6D 00                         		dc.b   0
00020E6E 07                         		dc.b   7
00020E6F 08                         		dc.b   8
00020E70 FC                         		dc.b $FC ; ü
00020E71 09                         		dc.b   9
00020E72 00                         		dc.b   0
00020E73 09                         		dc.b   9
00020E74 F8                         		dc.b $F8 ; ø
00020E75 0C                         		dc.b  $C
00020E76 04                         		dc.b   4
00020E77 00                         		dc.b   0
00020E78 0F                         		dc.b  $F
00020E79 00                         		dc.b   0
00020E7A 05                         unk_21FC44:	dc.b   5
00020E7B EC                         		dc.b $EC ; ì
00020E7C 05                         		dc.b   5
00020E7D 00                         		dc.b   0
00020E7E 00                         		dc.b   0
00020E7F F8                         		dc.b $F8 ; ø
00020E80 EC                         		dc.b $EC ; ì
00020E81 01                         		dc.b   1
00020E82 00                         		dc.b   0
00020E83 04                         		dc.b   4
00020E84 F0                         		dc.b $F0 ; ð
00020E85 EC                         		dc.b $EC ; ì
00020E86 01                         		dc.b   1
00020E87 00                         		dc.b   0
00020E88 06                         		dc.b   6
00020E89 08                         		dc.b   8
00020E8A FC                         		dc.b $FC ; ü
00020E8B 0D                         		dc.b  $D
00020E8C 00                         		dc.b   0
00020E8D 08                         		dc.b   8
00020E8E F0                         		dc.b $F0 ; ð
00020E8F 0C                         		dc.b  $C
00020E90 00                         		dc.b   0
00020E91 00                         		dc.b   0
00020E92 10                         		dc.b $10
00020E93 F8                         		dc.b $F8 ; ø
00020E94 05                         unk_21FC5E:	dc.b   5
00020E95 EC                         		dc.b $EC ; ì
00020E96 05                         		dc.b   5
00020E97 00                         		dc.b   0
00020E98 00                         		dc.b   0
00020E99 F8                         		dc.b $F8 ; ø
00020E9A EC                         		dc.b $EC ; ì
00020E9B 01                         		dc.b   1
00020E9C 00                         		dc.b   0
00020E9D 04                         		dc.b   4
00020E9E F0                         		dc.b $F0 ; ð
00020E9F EC                         		dc.b $EC ; ì
00020EA0 02                         		dc.b   2
00020EA1 00                         		dc.b   0
00020EA2 06                         		dc.b   6
00020EA3 08                         		dc.b   8
00020EA4 FC                         		dc.b $FC ; ü
00020EA5 09                         		dc.b   9
00020EA6 00                         		dc.b   0
00020EA7 09                         		dc.b   9
00020EA8 F0                         		dc.b $F0 ; ð
00020EA9 0C                         		dc.b  $C
00020EAA 00                         		dc.b   0
00020EAB 00                         		dc.b   0
00020EAC 0F                         		dc.b  $F
00020EAD F8                         		dc.b $F8 ; ø
00020EAE 05                         unk_21FC78:	dc.b   5
00020EAF EC                         		dc.b $EC ; ì
00020EB0 05                         		dc.b   5
00020EB1 00                         		dc.b   0
00020EB2 00                         		dc.b   0
00020EB3 F8                         		dc.b $F8 ; ø
00020EB4 EC                         		dc.b $EC ; ì
00020EB5 01                         		dc.b   1
00020EB6 00                         		dc.b   0
00020EB7 04                         		dc.b   4
00020EB8 F0                         		dc.b $F0 ; ð
00020EB9 EC                         		dc.b $EC ; ì
00020EBA 01                         		dc.b   1
00020EBB 00                         		dc.b   0
00020EBC 06                         		dc.b   6
00020EBD 08                         		dc.b   8
00020EBE FC                         		dc.b $FC ; ü
00020EBF 0D                         		dc.b  $D
00020EC0 00                         		dc.b   0
00020EC1 08                         		dc.b   8
00020EC2 F0                         		dc.b $F0 ; ð
00020EC3 0C                         		dc.b  $C
00020EC4 00                         		dc.b   0
00020EC5 00                         		dc.b   0
00020EC6 10                         		dc.b $10
00020EC7 00                         		dc.b   0
00020EC8 02                         unk_21FC92:	dc.b   2
00020EC9 04                         		dc.b   4
00020ECA 0D                         		dc.b  $D
00020ECB 10                         		dc.b $10
00020ECC 00                         		dc.b   0
00020ECD F0                         		dc.b $F0 ; ð
00020ECE EC                         		dc.b $EC ; ì
00020ECF 0E                         		dc.b  $E
00020ED0 10                         		dc.b $10
00020ED1 08                         		dc.b   8
00020ED2 F0                         		dc.b $F0 ; ð
00020ED3 00                         		dc.b   0
00020ED4 05                         unk_21FC9E:	dc.b   5
00020ED5 0C                         		dc.b  $C
00020ED6 0C                         		dc.b  $C
00020ED7 10                         		dc.b $10
00020ED8 00                         		dc.b   0
00020ED9 F0                         		dc.b $F0 ; ð
00020EDA 04                         		dc.b   4
00020EDB 08                         		dc.b   8
00020EDC 10                         		dc.b $10
00020EDD 04                         		dc.b   4
00020EDE F8                         		dc.b $F8 ; ø
00020EDF 04                         		dc.b   4
00020EE0 00                         		dc.b   0
00020EE1 10                         		dc.b $10
00020EE2 07                         		dc.b   7
00020EE3 F0                         		dc.b $F0 ; ð
00020EE4 F4                         		dc.b $F4 ; ô
00020EE5 0D                         		dc.b  $D
00020EE6 10                         		dc.b $10
00020EE7 08                         		dc.b   8
00020EE8 F0                         		dc.b $F0 ; ð
00020EE9 EC                         		dc.b $EC ; ì
00020EEA 08                         		dc.b   8
00020EEB 10                         		dc.b $10
00020EEC 10                         		dc.b $10
00020EED F0                         		dc.b $F0 ; ð
00020EEE 04                         unk_21FCB8:	dc.b   4
00020EEF 04                         		dc.b   4
00020EF0 0D                         		dc.b  $D
00020EF1 10                         		dc.b $10
00020EF2 00                         		dc.b   0
00020EF3 F0                         		dc.b $F0 ; ð
00020EF4 FC                         		dc.b $FC ; ü
00020EF5 00                         		dc.b   0
00020EF6 10                         		dc.b $10
00020EF7 08                         		dc.b   8
00020EF8 F0                         		dc.b $F0 ; ð
00020EF9 F4                         		dc.b $F4 ; ô
00020EFA 09                         		dc.b   9
00020EFB 10                         		dc.b $10
00020EFC 09                         		dc.b   9
00020EFD F8                         		dc.b $F8 ; ø
00020EFE EC                         		dc.b $EC ; ì
00020EFF 04                         		dc.b   4
00020F00 10                         		dc.b $10
00020F01 0F                         		dc.b  $F
00020F02 F8                         		dc.b $F8 ; ø
00020F03 00                         		dc.b   0
00020F04 04                         unk_21FCCE:	dc.b   4
00020F05 0C                         		dc.b  $C
00020F06 0C                         		dc.b  $C
00020F07 10                         		dc.b $10
00020F08 00                         		dc.b   0
00020F09 F0                         		dc.b $F0 ; ð
00020F0A 04                         		dc.b   4
00020F0B 08                         		dc.b   8
00020F0C 10                         		dc.b $10
00020F0D 04                         		dc.b   4
00020F0E F8                         		dc.b $F8 ; ø
00020F0F F4                         		dc.b $F4 ; ô
00020F10 02                         		dc.b   2
00020F11 10                         		dc.b $10
00020F12 07                         		dc.b   7
00020F13 F0                         		dc.b $F0 ; ð
00020F14 EC                         		dc.b $EC ; ì
00020F15 0A                         		dc.b  $A
00020F16 10                         		dc.b $10
00020F17 0A                         		dc.b  $A
00020F18 F8                         		dc.b $F8 ; ø
00020F19 00                         		dc.b   0
00020F1A 02                         unk_21FCE4:	dc.b   2
00020F1B 04                         		dc.b   4
00020F1C 09                         		dc.b   9
00020F1D 10                         		dc.b $10
00020F1E 00                         		dc.b   0
00020F1F F4                         		dc.b $F4 ; ô
00020F20 EC                         		dc.b $EC ; ì
00020F21 0E                         		dc.b  $E
00020F22 10                         		dc.b $10
00020F23 06                         		dc.b   6
00020F24 F4                         		dc.b $F4 ; ô
00020F25 00                         		dc.b   0
00020F26 02                         unk_21FCF0:	dc.b   2
00020F27 04                         		dc.b   4
00020F28 09                         		dc.b   9
00020F29 10                         		dc.b $10
00020F2A 00                         		dc.b   0
00020F2B F4                         		dc.b $F4 ; ô
00020F2C EC                         		dc.b $EC ; ì
00020F2D 0E                         		dc.b  $E
00020F2E 10                         		dc.b $10
00020F2F 06                         		dc.b   6
00020F30 F4                         		dc.b $F4 ; ô
00020F31 00                         		dc.b   0
00020F32 04                         unk_21FCFC:	dc.b   4
00020F33 04                         		dc.b   4
00020F34 09                         		dc.b   9
00020F35 10                         		dc.b $10
00020F36 00                         		dc.b   0
00020F37 F4                         		dc.b $F4 ; ô
00020F38 F4                         		dc.b $F4 ; ô
00020F39 09                         		dc.b   9
00020F3A 10                         		dc.b $10
00020F3B 06                         		dc.b   6
00020F3C F4                         		dc.b $F4 ; ô
00020F3D FC                         		dc.b $FC ; ü
00020F3E 00                         		dc.b   0
00020F3F 10                         		dc.b $10
00020F40 0C                         		dc.b  $C
00020F41 0C                         		dc.b  $C
00020F42 EC                         		dc.b $EC ; ì
00020F43 04                         		dc.b   4
00020F44 10                         		dc.b $10
00020F45 0D                         		dc.b  $D
00020F46 FC                         		dc.b $FC ; ü
00020F47 00                         		dc.b   0
00020F48 04                         unk_21FD12:	dc.b   4
00020F49 04                         		dc.b   4
00020F4A 09                         		dc.b   9
00020F4B 10                         		dc.b $10
00020F4C 00                         		dc.b   0
00020F4D F4                         		dc.b $F4 ; ô
00020F4E F4                         		dc.b $F4 ; ô
00020F4F 09                         		dc.b   9
00020F50 10                         		dc.b $10
00020F51 06                         		dc.b   6
00020F52 F4                         		dc.b $F4 ; ô
00020F53 FC                         		dc.b $FC ; ü
00020F54 00                         		dc.b   0
00020F55 10                         		dc.b $10
00020F56 0C                         		dc.b  $C
00020F57 0C                         		dc.b  $C
00020F58 EC                         		dc.b $EC ; ì
00020F59 08                         		dc.b   8
00020F5A 10                         		dc.b $10
00020F5B 0D                         		dc.b  $D
00020F5C FC                         		dc.b $FC ; ü
00020F5D 00                         		dc.b   0
00020F5E 01                         unk_21FD28:	dc.b   1
00020F5F F0                         		dc.b $F0 ; ð
00020F60 0F                         		dc.b  $F
00020F61 00                         		dc.b   0
00020F62 00                         		dc.b   0
00020F63 F0                         		dc.b $F0 ; ð
00020F64 01                         unk_21FD2E:	dc.b   1
00020F65 F0                         		dc.b $F0 ; ð
00020F66 0F                         		dc.b  $F
00020F67 00                         		dc.b   0
00020F68 00                         		dc.b   0
00020F69 F0                         		dc.b $F0 ; ð
00020F6A 01                         unk_21FD34:	dc.b   1
00020F6B F0                         		dc.b $F0 ; ð
00020F6C 0F                         		dc.b  $F
00020F6D 00                         		dc.b   0
00020F6E 00                         		dc.b   0
00020F6F F0                         		dc.b $F0 ; ð
00020F70 01                         unk_21FD3A:	dc.b   1
00020F71 F0                         		dc.b $F0 ; ð
00020F72 0F                         		dc.b  $F
00020F73 00                         		dc.b   0
00020F74 00                         		dc.b   0
00020F75 F0                         		dc.b $F0 ; ð
00020F76 01                         unk_21FD40:	dc.b   1
00020F77 F0                         		dc.b $F0 ; ð
00020F78 0F                         		dc.b  $F
00020F79 00                         		dc.b   0
00020F7A 00                         		dc.b   0
00020F7B F0                         		dc.b $F0 ; ð
00020F7C 01                         unk_21FD46:	dc.b   1
00020F7D F0                         		dc.b $F0 ; ð
00020F7E 0F                         		dc.b  $F
00020F7F 00                         		dc.b   0
00020F80 00                         		dc.b   0
00020F81 F0                         		dc.b $F0 ; ð
00020F82 02                         		dc.b   2
00020F83 EC                         		dc.b $EC ; ì
00020F84 0E                         		dc.b  $E
00020F85 00                         		dc.b   0
00020F86 00                         		dc.b   0
00020F87 F0                         		dc.b $F0 ; ð
00020F88 04                         		dc.b   4
00020F89 09                         		dc.b   9
00020F8A 00                         		dc.b   0
00020F8B 0C                         		dc.b  $C
00020F8C F8                         		dc.b $F8 ; ø
00020F8D 00                         		dc.b   0
00020F8E 03                         unk_21FD58:	dc.b   3
00020F8F EC                         		dc.b $EC ; ì
00020F90 0E                         		dc.b  $E
00020F91 00                         		dc.b   0
00020F92 00                         		dc.b   0
00020F93 F8                         		dc.b $F8 ; ø
00020F94 04                         		dc.b   4
00020F95 09                         		dc.b   9
00020F96 00                         		dc.b   0
00020F97 0C                         		dc.b  $C
00020F98 F8                         		dc.b $F8 ; ø
00020F99 0C                         		dc.b  $C
00020F9A 00                         		dc.b   0
00020F9B 00                         		dc.b   0
00020F9C 12                         		dc.b $12
00020F9D 10                         		dc.b $10
00020F9E 04                         unk_21FD68:	dc.b   4
00020F9F EC                         		dc.b $EC ; ì
00020FA0 09                         		dc.b   9
00020FA1 00                         		dc.b   0
00020FA2 00                         		dc.b   0
00020FA3 F4                         		dc.b $F4 ; ô
00020FA4 FC                         		dc.b $FC ; ü
00020FA5 01                         		dc.b   1
00020FA6 00                         		dc.b   0
00020FA7 06                         		dc.b   6
00020FA8 EC                         		dc.b $EC ; ì
00020FA9 FC                         		dc.b $FC ; ü
00020FAA 0A                         		dc.b  $A
00020FAB 00                         		dc.b   0
00020FAC 08                         		dc.b   8
00020FAD F4                         		dc.b $F4 ; ô
00020FAE FC                         		dc.b $FC ; ü
00020FAF 01                         		dc.b   1
00020FB0 00                         		dc.b   0
00020FB1 11                         		dc.b $11
00020FB2 0C                         		dc.b  $C
00020FB3 00                         		dc.b   0
00020FB4 03                         unk_21FD7E:	dc.b   3
00020FB5 EC                         		dc.b $EC ; ì
00020FB6 0E                         		dc.b  $E
00020FB7 08                         		dc.b   8
00020FB8 00                         		dc.b   0
00020FB9 E8                         		dc.b $E8 ; è
00020FBA 04                         		dc.b   4
00020FBB 09                         		dc.b   9
00020FBC 08                         		dc.b   8
00020FBD 0C                         		dc.b  $C
00020FBE F0                         		dc.b $F0 ; ð
00020FBF 0C                         		dc.b  $C
00020FC0 00                         		dc.b   0
00020FC1 08                         		dc.b   8
00020FC2 12                         		dc.b $12
00020FC3 E8                         		dc.b $E8 ; è
00020FC4 04                         unk_21FD8E:	dc.b   4
00020FC5 EC                         		dc.b $EC ; ì
00020FC6 09                         		dc.b   9
00020FC7 00                         		dc.b   0
00020FC8 00                         		dc.b   0
00020FC9 F4                         		dc.b $F4 ; ô
00020FCA FC                         		dc.b $FC ; ü
00020FCB 01                         		dc.b   1
00020FCC 00                         		dc.b   0
00020FCD 06                         		dc.b   6
00020FCE EC                         		dc.b $EC ; ì
00020FCF FC                         		dc.b $FC ; ü
00020FD0 0A                         		dc.b  $A
00020FD1 00                         		dc.b   0
00020FD2 08                         		dc.b   8
00020FD3 F4                         		dc.b $F4 ; ô
00020FD4 FC                         		dc.b $FC ; ü
00020FD5 01                         		dc.b   1
00020FD6 08                         		dc.b   8
00020FD7 11                         		dc.b $11
00020FD8 0C                         		dc.b  $C
00020FD9 00                         		dc.b   0
00020FDA 02                         unk_21FDA4:	dc.b   2
00020FDB EC                         		dc.b $EC ; ì
00020FDC 0F                         		dc.b  $F
00020FDD 00                         		dc.b   0
00020FDE 00                         		dc.b   0
00020FDF F8                         		dc.b $F8 ; ø
00020FE0 0C                         		dc.b  $C
00020FE1 0C                         		dc.b  $C
00020FE2 00                         		dc.b   0
00020FE3 10                         		dc.b $10
00020FE4 F8                         		dc.b $F8 ; ø
00020FE5 00                         		dc.b   0
00020FE6 02                         unk_21FDB0:	dc.b   2
00020FE7 EC                         		dc.b $EC ; ì
00020FE8 0F                         		dc.b  $F
00020FE9 08                         		dc.b   8
00020FEA 00                         		dc.b   0
00020FEB E8                         		dc.b $E8 ; è
00020FEC 0C                         		dc.b  $C
00020FED 0C                         		dc.b  $C
00020FEE 08                         		dc.b   8
00020FEF 10                         		dc.b $10
00020FF0 E8                         		dc.b $E8 ; è
00020FF1 00                         		dc.b   0
00020FF2                            		even
00020FF2                            		even
00020FF2                            	even
00020FF2                            MapSpr_3DRamp:
00020FF2                            	include	"level/objects/3dramp/map.asm"
00020FF2                            .Map:
00020FF2 0000                       		dc.w unk_21FDD0-.Map
00020FF4 0000                       		dc.w unk_21FDFA-.Map
00020FF6 0000                       		dc.w unk_21FE28-.Map
00020FF8 0000                       		dc.w unk_21FE56-.Map
00020FFA 0000                       		dc.w unk_21FE84-.Map
00020FFC 0000                       		dc.w unk_21FEA8-.Map
00020FFE 0000                       		dc.w unk_21FEC8-.Map
00021000 0000                       		dc.w unk_21FF1A-.Map
00021002 0000                       		dc.w unk_21FF66-.Map
00021004 0000                       		dc.w unk_21FFAE-.Map
00021006 08                         unk_21FDD0:	dc.b   8
00021007 E8                         		dc.b $E8 ; è
00021008 01                         		dc.b   1
00021009 00                         		dc.b   0
0002100A 00                         		dc.b   0
0002100B F8                         		dc.b $F8 ; ø
0002100C F8                         		dc.b $F8 ; ø
0002100D 08                         		dc.b   8
0002100E 00                         		dc.b   0
0002100F 02                         		dc.b   2
00021010 E8                         		dc.b $E8 ; è
00021011 E8                         		dc.b $E8 ; è
00021012 01                         		dc.b   1
00021013 08                         		dc.b   8
00021014 00                         		dc.b   0
00021015 00                         		dc.b   0
00021016 F8                         		dc.b $F8 ; ø
00021017 08                         		dc.b   8
00021018 08                         		dc.b   8
00021019 02                         		dc.b   2
0002101A 00                         		dc.b   0
0002101B 00                         		dc.b   0
0002101C 08                         		dc.b   8
0002101D 10                         		dc.b $10
0002101E 02                         		dc.b   2
0002101F E8                         		dc.b $E8 ; è
00021020 00                         		dc.b   0
00021021 08                         		dc.b   8
00021022 18                         		dc.b $18
00021023 02                         		dc.b   2
00021024 00                         		dc.b   0
00021025 08                         		dc.b   8
00021026 01                         		dc.b   1
00021027 10                         		dc.b $10
00021028 00                         		dc.b   0
00021029 F8                         		dc.b $F8 ; ø
0002102A 08                         		dc.b   8
0002102B 01                         		dc.b   1
0002102C 18                         		dc.b $18
0002102D 00                         		dc.b   0
0002102E 00                         		dc.b   0
0002102F 00                         		dc.b   0
00021030 09                         unk_21FDFA:	dc.b   9
00021031 E8                         		dc.b $E8 ; è
00021032 09                         		dc.b   9
00021033 00                         		dc.b   0
00021034 05                         		dc.b   5
00021035 F4                         		dc.b $F4 ; ô
00021036 F8                         		dc.b $F8 ; ø
00021037 0C                         		dc.b  $C
00021038 00                         		dc.b   0
00021039 0B                         		dc.b  $B
0002103A E4                         		dc.b $E4 ; ä
0002103B F8                         		dc.b $F8 ; ø
0002103C 04                         		dc.b   4
0002103D 00                         		dc.b   0
0002103E 0F                         		dc.b  $F
0002103F 04                         		dc.b   4
00021040 00                         		dc.b   0
00021041 0C                         		dc.b  $C
00021042 10                         		dc.b $10
00021043 0B                         		dc.b  $B
00021044 E4                         		dc.b $E4 ; ä
00021045 00                         		dc.b   0
00021046 04                         		dc.b   4
00021047 10                         		dc.b $10
00021048 0F                         		dc.b  $F
00021049 04                         		dc.b   4
0002104A 08                         		dc.b   8
0002104B 09                         		dc.b   9
0002104C 10                         		dc.b $10
0002104D 05                         		dc.b   5
0002104E F4                         		dc.b $F4 ; ô
0002104F E8                         		dc.b $E8 ; è
00021050 05                         		dc.b   5
00021051 00                         		dc.b   0
00021052 37                         		dc.b $37 ; 7
00021053 ED                         		dc.b $ED ; í
00021054 F8                         		dc.b $F8 ; ø
00021055 05                         		dc.b   5
00021056 00                         		dc.b   0
00021057 3B                         		dc.b $3B ; ;
00021058 DD                         		dc.b $DD ; Ý
00021059 08                         		dc.b   8
0002105A 05                         		dc.b   5
0002105B 10                         		dc.b $10
0002105C 37                         		dc.b $37 ; 7
0002105D ED                         		dc.b $ED ; í
0002105E 09                         unk_21FE28:	dc.b   9
0002105F E8                         		dc.b $E8 ; è
00021060 09                         		dc.b   9
00021061 00                         		dc.b   0
00021062 11                         		dc.b $11
00021063 F3                         		dc.b $F3 ; ó
00021064 F8                         		dc.b $F8 ; ø
00021065 0C                         		dc.b  $C
00021066 00                         		dc.b   0
00021067 17                         		dc.b $17
00021068 E3                         		dc.b $E3 ; ã
00021069 F8                         		dc.b $F8 ; ø
0002106A 04                         		dc.b   4
0002106B 00                         		dc.b   0
0002106C 1B                         		dc.b $1B
0002106D 03                         		dc.b   3
0002106E 00                         		dc.b   0
0002106F 0C                         		dc.b  $C
00021070 10                         		dc.b $10
00021071 17                         		dc.b $17
00021072 E3                         		dc.b $E3 ; ã
00021073 00                         		dc.b   0
00021074 04                         		dc.b   4
00021075 10                         		dc.b $10
00021076 1B                         		dc.b $1B
00021077 03                         		dc.b   3
00021078 08                         		dc.b   8
00021079 09                         		dc.b   9
0002107A 10                         		dc.b $10
0002107B 11                         		dc.b $11
0002107C F3                         		dc.b $F3 ; ó
0002107D E8                         		dc.b $E8 ; è
0002107E 05                         		dc.b   5
0002107F 00                         		dc.b   0
00021080 37                         		dc.b $37 ; 7
00021081 E6                         		dc.b $E6 ; æ
00021082 F8                         		dc.b $F8 ; ø
00021083 05                         		dc.b   5
00021084 00                         		dc.b   0
00021085 3B                         		dc.b $3B ; ;
00021086 D8                         		dc.b $D8 ; Ø
00021087 08                         		dc.b   8
00021088 05                         		dc.b   5
00021089 10                         		dc.b $10
0002108A 37                         		dc.b $37 ; 7
0002108B E6                         		dc.b $E6 ; æ
0002108C 09                         unk_21FE56:	dc.b   9
0002108D E8                         		dc.b $E8 ; è
0002108E 09                         		dc.b   9
0002108F 00                         		dc.b   0
00021090 1D                         		dc.b $1D
00021091 ED                         		dc.b $ED ; í
00021092 F8                         		dc.b $F8 ; ø
00021093 0C                         		dc.b  $C
00021094 00                         		dc.b   0
00021095 23                         		dc.b $23 ; #
00021096 E5                         		dc.b $E5 ; å
00021097 F8                         		dc.b $F8 ; ø
00021098 00                         		dc.b   0
00021099 00                         		dc.b   0
0002109A 10                         		dc.b $10
0002109B 05                         		dc.b   5
0002109C 00                         		dc.b   0
0002109D 0C                         		dc.b  $C
0002109E 10                         		dc.b $10
0002109F 23                         		dc.b $23 ; #
000210A0 E5                         		dc.b $E5 ; å
000210A1 00                         		dc.b   0
000210A2 00                         		dc.b   0
000210A3 10                         		dc.b $10
000210A4 10                         		dc.b $10
000210A5 05                         		dc.b   5
000210A6 08                         		dc.b   8
000210A7 09                         		dc.b   9
000210A8 10                         		dc.b $10
000210A9 1D                         		dc.b $1D
000210AA ED                         		dc.b $ED ; í
000210AB E8                         		dc.b $E8 ; è
000210AC 05                         		dc.b   5
000210AD 00                         		dc.b   0
000210AE 37                         		dc.b $37 ; 7
000210AF E2                         		dc.b $E2 ; â
000210B0 F8                         		dc.b $F8 ; ø
000210B1 05                         		dc.b   5
000210B2 00                         		dc.b   0
000210B3 3B                         		dc.b $3B ; ;
000210B4 D5                         		dc.b $D5 ; Õ
000210B5 08                         		dc.b   8
000210B6 05                         		dc.b   5
000210B7 10                         		dc.b $10
000210B8 37                         		dc.b $37 ; 7
000210B9 E2                         		dc.b $E2 ; â
000210BA 07                         unk_21FE84:	dc.b   7
000210BB E8                         		dc.b $E8 ; è
000210BC 03                         		dc.b   3
000210BD 00                         		dc.b   0
000210BE 27                         		dc.b $27 ; '
000210BF D8                         		dc.b $D8 ; Ø
000210C0 E8                         		dc.b $E8 ; è
000210C1 03                         		dc.b   3
000210C2 00                         		dc.b   0
000210C3 27                         		dc.b $27 ; '
000210C4 E0                         		dc.b $E0 ; à
000210C5 E8                         		dc.b $E8 ; è
000210C6 03                         		dc.b   3
000210C7 00                         		dc.b   0
000210C8 27                         		dc.b $27 ; '
000210C9 E8                         		dc.b $E8 ; è
000210CA E8                         		dc.b $E8 ; è
000210CB 06                         		dc.b   6
000210CC 00                         		dc.b   0
000210CD 2B                         		dc.b $2B ; +
000210CE F0                         		dc.b $F0 ; ð
000210CF E8                         		dc.b $E8 ; è
000210D0 06                         		dc.b   6
000210D1 00                         		dc.b   0
000210D2 31                         		dc.b $31 ; 1
000210D3 00                         		dc.b   0
000210D4 00                         		dc.b   0
000210D5 06                         		dc.b   6
000210D6 18                         		dc.b $18
000210D7 31                         		dc.b $31 ; 1
000210D8 F0                         		dc.b $F0 ; ð
000210D9 00                         		dc.b   0
000210DA 06                         		dc.b   6
000210DB 18                         		dc.b $18
000210DC 2B                         		dc.b $2B ; +
000210DD 00                         		dc.b   0
000210DE 06                         unk_21FEA8:	dc.b   6
000210DF F8                         		dc.b $F8 ; ø
000210E0 03                         		dc.b   3
000210E1 10                         		dc.b $10
000210E2 27                         		dc.b $27 ; '
000210E3 D8                         		dc.b $D8 ; Ø
000210E4 F8                         		dc.b $F8 ; ø
000210E5 03                         		dc.b   3
000210E6 10                         		dc.b $10
000210E7 27                         		dc.b $27 ; '
000210E8 E0                         		dc.b $E0 ; à
000210E9 E8                         		dc.b $E8 ; è
000210EA 06                         		dc.b   6
000210EB 08                         		dc.b   8
000210EC 31                         		dc.b $31 ; 1
000210ED F0                         		dc.b $F0 ; ð
000210EE E8                         		dc.b $E8 ; è
000210EF 06                         		dc.b   6
000210F0 08                         		dc.b   8
000210F1 2B                         		dc.b $2B ; +
000210F2 00                         		dc.b   0
000210F3 00                         		dc.b   0
000210F4 06                         		dc.b   6
000210F5 10                         		dc.b $10
000210F6 2B                         		dc.b $2B ; +
000210F7 F0                         		dc.b $F0 ; ð
000210F8 00                         		dc.b   0
000210F9 06                         		dc.b   6
000210FA 10                         		dc.b $10
000210FB 31                         		dc.b $31 ; 1
000210FC 00                         		dc.b   0
000210FD 00                         		dc.b   0
000210FE 10                         unk_21FEC8:	dc.b $10
000210FF E8                         		dc.b $E8 ; è
00021100 09                         		dc.b   9
00021101 00                         		dc.b   0
00021102 11                         		dc.b $11
00021103 F3                         		dc.b $F3 ; ó
00021104 F8                         		dc.b $F8 ; ø
00021105 0C                         		dc.b  $C
00021106 00                         		dc.b   0
00021107 17                         		dc.b $17
00021108 E3                         		dc.b $E3 ; ã
00021109 F8                         		dc.b $F8 ; ø
0002110A 04                         		dc.b   4
0002110B 00                         		dc.b   0
0002110C 1B                         		dc.b $1B
0002110D 03                         		dc.b   3
0002110E 00                         		dc.b   0
0002110F 0C                         		dc.b  $C
00021110 10                         		dc.b $10
00021111 17                         		dc.b $17
00021112 E3                         		dc.b $E3 ; ã
00021113 00                         		dc.b   0
00021114 04                         		dc.b   4
00021115 10                         		dc.b $10
00021116 1B                         		dc.b $1B
00021117 03                         		dc.b   3
00021118 08                         		dc.b   8
00021119 09                         		dc.b   9
0002111A 10                         		dc.b $10
0002111B 11                         		dc.b $11
0002111C F3                         		dc.b $F3 ; ó
0002111D E8                         		dc.b $E8 ; è
0002111E 03                         		dc.b   3
0002111F 00                         		dc.b   0
00021120 27                         		dc.b $27 ; '
00021121 D8                         		dc.b $D8 ; Ø
00021122 E8                         		dc.b $E8 ; è
00021123 03                         		dc.b   3
00021124 00                         		dc.b   0
00021125 27                         		dc.b $27 ; '
00021126 E0                         		dc.b $E0 ; à
00021127 E8                         		dc.b $E8 ; è
00021128 03                         		dc.b   3
00021129 00                         		dc.b   0
0002112A 27                         		dc.b $27 ; '
0002112B E8                         		dc.b $E8 ; è
0002112C E8                         		dc.b $E8 ; è
0002112D 06                         		dc.b   6
0002112E 00                         		dc.b   0
0002112F 2B                         		dc.b $2B ; +
00021130 F0                         		dc.b $F0 ; ð
00021131 E8                         		dc.b $E8 ; è
00021132 06                         		dc.b   6
00021133 00                         		dc.b   0
00021134 31                         		dc.b $31 ; 1
00021135 00                         		dc.b   0
00021136 00                         		dc.b   0
00021137 06                         		dc.b   6
00021138 18                         		dc.b $18
00021139 31                         		dc.b $31 ; 1
0002113A F0                         		dc.b $F0 ; ð
0002113B 00                         		dc.b   0
0002113C 06                         		dc.b   6
0002113D 18                         		dc.b $18
0002113E 2B                         		dc.b $2B ; +
0002113F 00                         		dc.b   0
00021140 E8                         		dc.b $E8 ; è
00021141 05                         		dc.b   5
00021142 00                         		dc.b   0
00021143 37                         		dc.b $37 ; 7
00021144 E6                         		dc.b $E6 ; æ
00021145 F8                         		dc.b $F8 ; ø
00021146 05                         		dc.b   5
00021147 00                         		dc.b   0
00021148 3B                         		dc.b $3B ; ;
00021149 D8                         		dc.b $D8 ; Ø
0002114A 08                         		dc.b   8
0002114B 05                         		dc.b   5
0002114C 00                         		dc.b   0
0002114D 37                         		dc.b $37 ; 7
0002114E E6                         		dc.b $E6 ; æ
0002114F 00                         		dc.b   0
00021150 0F                         unk_21FF1A:	dc.b  $F
00021151 E8                         		dc.b $E8 ; è
00021152 09                         		dc.b   9
00021153 00                         		dc.b   0
00021154 1D                         		dc.b $1D
00021155 ED                         		dc.b $ED ; í
00021156 F8                         		dc.b $F8 ; ø
00021157 0C                         		dc.b  $C
00021158 00                         		dc.b   0
00021159 23                         		dc.b $23 ; #
0002115A E5                         		dc.b $E5 ; å
0002115B F8                         		dc.b $F8 ; ø
0002115C 00                         		dc.b   0
0002115D 00                         		dc.b   0
0002115E 10                         		dc.b $10
0002115F 05                         		dc.b   5
00021160 00                         		dc.b   0
00021161 0C                         		dc.b  $C
00021162 10                         		dc.b $10
00021163 23                         		dc.b $23 ; #
00021164 E5                         		dc.b $E5 ; å
00021165 00                         		dc.b   0
00021166 00                         		dc.b   0
00021167 10                         		dc.b $10
00021168 10                         		dc.b $10
00021169 05                         		dc.b   5
0002116A 08                         		dc.b   8
0002116B 09                         		dc.b   9
0002116C 10                         		dc.b $10
0002116D 1D                         		dc.b $1D
0002116E ED                         		dc.b $ED ; í
0002116F F8                         		dc.b $F8 ; ø
00021170 03                         		dc.b   3
00021171 10                         		dc.b $10
00021172 27                         		dc.b $27 ; '
00021173 D8                         		dc.b $D8 ; Ø
00021174 F8                         		dc.b $F8 ; ø
00021175 03                         		dc.b   3
00021176 10                         		dc.b $10
00021177 27                         		dc.b $27 ; '
00021178 E0                         		dc.b $E0 ; à
00021179 E8                         		dc.b $E8 ; è
0002117A 06                         		dc.b   6
0002117B 08                         		dc.b   8
0002117C 31                         		dc.b $31 ; 1
0002117D F0                         		dc.b $F0 ; ð
0002117E E8                         		dc.b $E8 ; è
0002117F 06                         		dc.b   6
00021180 08                         		dc.b   8
00021181 2B                         		dc.b $2B ; +
00021182 00                         		dc.b   0
00021183 00                         		dc.b   0
00021184 06                         		dc.b   6
00021185 10                         		dc.b $10
00021186 2B                         		dc.b $2B ; +
00021187 F0                         		dc.b $F0 ; ð
00021188 00                         		dc.b   0
00021189 06                         		dc.b   6
0002118A 10                         		dc.b $10
0002118B 31                         		dc.b $31 ; 1
0002118C 00                         		dc.b   0
0002118D E8                         		dc.b $E8 ; è
0002118E 05                         		dc.b   5
0002118F 00                         		dc.b   0
00021190 37                         		dc.b $37 ; 7
00021191 E2                         		dc.b $E2 ; â
00021192 F8                         		dc.b $F8 ; ø
00021193 05                         		dc.b   5
00021194 00                         		dc.b   0
00021195 3B                         		dc.b $3B ; ;
00021196 D5                         		dc.b $D5 ; Õ
00021197 08                         		dc.b   8
00021198 05                         		dc.b   5
00021199 00                         		dc.b   0
0002119A 37                         		dc.b $37 ; 7
0002119B E2                         		dc.b $E2 ; â
0002119C 0C                         unk_21FF66:	dc.b  $C
0002119D E8                         		dc.b $E8 ; è
0002119E 01                         		dc.b   1
0002119F 00                         		dc.b   0
000211A0 00                         		dc.b   0
000211A1 F8                         		dc.b $F8 ; ø
000211A2 F8                         		dc.b $F8 ; ø
000211A3 08                         		dc.b   8
000211A4 00                         		dc.b   0
000211A5 02                         		dc.b   2
000211A6 E8                         		dc.b $E8 ; è
000211A7 E8                         		dc.b $E8 ; è
000211A8 01                         		dc.b   1
000211A9 08                         		dc.b   8
000211AA 00                         		dc.b   0
000211AB 00                         		dc.b   0
000211AC F8                         		dc.b $F8 ; ø
000211AD 08                         		dc.b   8
000211AE 08                         		dc.b   8
000211AF 02                         		dc.b   2
000211B0 00                         		dc.b   0
000211B1 00                         		dc.b   0
000211B2 08                         		dc.b   8
000211B3 10                         		dc.b $10
000211B4 02                         		dc.b   2
000211B5 E8                         		dc.b $E8 ; è
000211B6 00                         		dc.b   0
000211B7 08                         		dc.b   8
000211B8 18                         		dc.b $18
000211B9 02                         		dc.b   2
000211BA 00                         		dc.b   0
000211BB 08                         		dc.b   8
000211BC 01                         		dc.b   1
000211BD 10                         		dc.b $10
000211BE 00                         		dc.b   0
000211BF F8                         		dc.b $F8 ; ø
000211C0 08                         		dc.b   8
000211C1 01                         		dc.b   1
000211C2 18                         		dc.b $18
000211C3 00                         		dc.b   0
000211C4 00                         		dc.b   0
000211C5 E8                         		dc.b $E8 ; è
000211C6 06                         		dc.b   6
000211C7 00                         		dc.b   0
000211C8 2B                         		dc.b $2B ; +
000211C9 EC                         		dc.b $EC ; ì
000211CA E8                         		dc.b $E8 ; è
000211CB 06                         		dc.b   6
000211CC 00                         		dc.b   0
000211CD 31                         		dc.b $31 ; 1
000211CE 04                         		dc.b   4
000211CF 00                         		dc.b   0
000211D0 06                         		dc.b   6
000211D1 18                         		dc.b $18
000211D2 2B                         		dc.b $2B ; +
000211D3 04                         		dc.b   4
000211D4 00                         		dc.b   0
000211D5 06                         		dc.b   6
000211D6 18                         		dc.b $18
000211D7 31                         		dc.b $31 ; 1
000211D8 EC                         		dc.b $EC ; ì
000211D9 EC                         		dc.b $EC ; ì
000211DA 03                         		dc.b   3
000211DB 00                         		dc.b   0
000211DC 27                         		dc.b $27 ; '
000211DD E4                         		dc.b $E4 ; ä
000211DE F4                         		dc.b $F4 ; ô
000211DF 03                         		dc.b   3
000211E0 18                         		dc.b $18
000211E1 27                         		dc.b $27 ; '
000211E2 14                         		dc.b $14
000211E3 00                         		dc.b   0
000211E4 0C                         unk_21FFAE:	dc.b  $C
000211E5 E8                         		dc.b $E8 ; è
000211E6 01                         		dc.b   1
000211E7 00                         		dc.b   0
000211E8 00                         		dc.b   0
000211E9 F8                         		dc.b $F8 ; ø
000211EA F8                         		dc.b $F8 ; ø
000211EB 08                         		dc.b   8
000211EC 00                         		dc.b   0
000211ED 02                         		dc.b   2
000211EE E8                         		dc.b $E8 ; è
000211EF E8                         		dc.b $E8 ; è
000211F0 01                         		dc.b   1
000211F1 08                         		dc.b   8
000211F2 00                         		dc.b   0
000211F3 00                         		dc.b   0
000211F4 F8                         		dc.b $F8 ; ø
000211F5 08                         		dc.b   8
000211F6 08                         		dc.b   8
000211F7 02                         		dc.b   2
000211F8 00                         		dc.b   0
000211F9 00                         		dc.b   0
000211FA 08                         		dc.b   8
000211FB 10                         		dc.b $10
000211FC 02                         		dc.b   2
000211FD E8                         		dc.b $E8 ; è
000211FE 00                         		dc.b   0
000211FF 08                         		dc.b   8
00021200 18                         		dc.b $18
00021201 02                         		dc.b   2
00021202 00                         		dc.b   0
00021203 08                         		dc.b   8
00021204 01                         		dc.b   1
00021205 10                         		dc.b $10
00021206 00                         		dc.b   0
00021207 F8                         		dc.b $F8 ; ø
00021208 08                         		dc.b   8
00021209 01                         		dc.b   1
0002120A 18                         		dc.b $18
0002120B 00                         		dc.b   0
0002120C 00                         		dc.b   0
0002120D E8                         		dc.b $E8 ; è
0002120E 06                         		dc.b   6
0002120F 10                         		dc.b $10
00021210 2B                         		dc.b $2B ; +
00021211 04                         		dc.b   4
00021212 E8                         		dc.b $E8 ; è
00021213 06                         		dc.b   6
00021214 10                         		dc.b $10
00021215 31                         		dc.b $31 ; 1
00021216 EC                         		dc.b $EC ; ì
00021217 00                         		dc.b   0
00021218 06                         		dc.b   6
00021219 08                         		dc.b   8
0002121A 2B                         		dc.b $2B ; +
0002121B EC                         		dc.b $EC ; ì
0002121C 00                         		dc.b   0
0002121D 06                         		dc.b   6
0002121E 08                         		dc.b   8
0002121F 31                         		dc.b $31 ; 1
00021220 04                         		dc.b   4
00021221 F4                         		dc.b $F4 ; ô
00021222 03                         		dc.b   3
00021223 10                         		dc.b $10
00021224 27                         		dc.b $27 ; '
00021225 E4                         		dc.b $E4 ; ä
00021226 EC                         		dc.b $EC ; ì
00021227 03                         		dc.b   3
00021228 08                         		dc.b   8
00021229 27                         		dc.b $27 ; '
0002122A 14                         		dc.b $14
0002122B 00                         		dc.b   0
0002122C E0                         		dc.b $E0 ; à
0002122D 00                         		dc.b   0
0002122E 00                         		dc.b   0
0002122F 00                         		dc.b   0
00021230 E0                         		dc.b $E0 ; à
00021231 00                         		dc.b   0
00021232 00                         		dc.b   0
00021233 00                         		dc.b   0
00021234 E0                         		dc.b $E0 ; à
00021235 00                         		dc.b   0
00021235 00                         		dc.b   0
00021236                            	even
00021236                            ArtUnc_Sonic:
00021236                            	incbin	"level/objects/sonic/art.bin"
00032196 00                         	even
00032196                            DPLC_Sonic:
00032196                            	include	"level/objects/sonic/dplc.asm"
00032196                            .DPLCs:
00032196 0000                       		dc.w unk_2310EC-.DPLCs
00032198 0000                       		dc.w unk_2310EE-.DPLCs
0003219A 0000                       		dc.w unk_2310F8-.DPLCs
0003219C 0000                       		dc.w unk_231100-.DPLCs
0003219E 0000                       		dc.w unk_231108-.DPLCs
000321A0 0000                       		dc.w unk_231110-.DPLCs
000321A2 0000                       		dc.w unk_231118-.DPLCs
000321A4 0000                       		dc.w unk_231118-.DPLCs
000321A6 0000                       		dc.w unk_231120-.DPLCs
000321A8 0000                       		dc.w unk_231126-.DPLCs
000321AA 0000                       		dc.w unk_23112E-.DPLCs
000321AC 0000                       		dc.w unk_2310EC-.DPLCs
000321AE 0000                       		dc.w unk_2310EC-.DPLCs
000321B0 0000                       		dc.w unk_2310EC-.DPLCs
000321B2 0000                       		dc.w unk_2310EC-.DPLCs
000321B4 0000                       		dc.w unk_2310EC-.DPLCs
000321B6 0000                       		dc.w unk_2310EC-.DPLCs
000321B8 0000                       		dc.w unk_2313BA-.DPLCs
000321BA 0000                       		dc.w unk_2313C0-.DPLCs
000321BC 0000                       		dc.w unk_2313C8-.DPLCs
000321BE 0000                       		dc.w unk_2313D0-.DPLCs
000321C0 0000                       		dc.w unk_2313DA-.DPLCs
000321C2 0000                       		dc.w unk_2313E0-.DPLCs
000321C4 0000                       		dc.w unk_2313E8-.DPLCs
000321C6 0000                       		dc.w unk_2310EC-.DPLCs
000321C8 0000                       		dc.w unk_2310EC-.DPLCs
000321CA 0000                       		dc.w unk_231594-.DPLCs
000321CC 0000                       		dc.w unk_23159C-.DPLCs
000321CE 0000                       		dc.w unk_2315A6-.DPLCs
000321D0 0000                       		dc.w unk_2315AE-.DPLCs
000321D2 0000                       		dc.w unk_2315B8-.DPLCs
000321D4 0000                       		dc.w unk_2315BE-.DPLCs
000321D6 0000                       		dc.w unk_231576-.DPLCs
000321D8 0000                       		dc.w unk_23157A-.DPLCs
000321DA 0000                       		dc.w unk_23157E-.DPLCs
000321DC 0000                       		dc.w unk_231582-.DPLCs
000321DE 0000                       		dc.w unk_231586-.DPLCs
000321E0 0000                       		dc.w unk_23158A-.DPLCs
000321E2 0000                       		dc.w unk_2310EC-.DPLCs
000321E4 0000                       		dc.w unk_2310EC-.DPLCs
000321E6 0000                       		dc.w unk_2310EC-.DPLCs
000321E8 0000                       		dc.w unk_2310EC-.DPLCs
000321EA 0000                       		dc.w unk_2310EC-.DPLCs
000321EC 0000                       		dc.w unk_2310EC-.DPLCs
000321EE 0000                       		dc.w unk_2310EC-.DPLCs
000321F0 0000                       		dc.w unk_2312FC-.DPLCs
000321F2 0000                       		dc.w unk_231300-.DPLCs
000321F4 0000                       		dc.w unk_231304-.DPLCs
000321F6 0000                       		dc.w unk_231308-.DPLCs
000321F8 0000                       		dc.w unk_23130C-.DPLCs
000321FA 0000                       		dc.w unk_231170-.DPLCs
000321FC 0000                       		dc.w unk_231138-.DPLCs
000321FE 0000                       		dc.w unk_231144-.DPLCs
00032200 0000                       		dc.w unk_23114C-.DPLCs
00032202 0000                       		dc.w unk_231152-.DPLCs
00032204 0000                       		dc.w unk_23115E-.DPLCs
00032206 0000                       		dc.w unk_231166-.DPLCs
00032208 0000                       		dc.w unk_231198-.DPLCs
0003220A 0000                       		dc.w unk_2311A4-.DPLCs
0003220C 0000                       		dc.w unk_2311B2-.DPLCs
0003220E 0000                       		dc.w unk_2311C0-.DPLCs
00032210 0000                       		dc.w unk_2311CE-.DPLCs
00032212 0000                       		dc.w unk_2311DC-.DPLCs
00032214 0000                       		dc.w unk_2311E8-.DPLCs
00032216 0000                       		dc.w unk_2311F4-.DPLCs
00032218 0000                       		dc.w unk_2311FC-.DPLCs
0003221A 0000                       		dc.w unk_231202-.DPLCs
0003221C 0000                       		dc.w unk_23120E-.DPLCs
0003221E 0000                       		dc.w unk_231216-.DPLCs
00032220 0000                       		dc.w unk_231220-.DPLCs
00032222 0000                       		dc.w unk_23122C-.DPLCs
00032224 0000                       		dc.w unk_23123A-.DPLCs
00032226 0000                       		dc.w unk_231248-.DPLCs
00032228 0000                       		dc.w unk_231256-.DPLCs
0003222A 0000                       		dc.w unk_231264-.DPLCs
0003222C 0000                       		dc.w unk_231270-.DPLCs
0003222E 0000                       		dc.w unk_231276-.DPLCs
00032230 0000                       		dc.w unk_23127C-.DPLCs
00032232 0000                       		dc.w unk_231282-.DPLCs
00032234 0000                       		dc.w unk_231288-.DPLCs
00032236 0000                       		dc.w unk_231294-.DPLCs
00032238 0000                       		dc.w unk_23129E-.DPLCs
0003223A 0000                       		dc.w unk_2312AC-.DPLCs
0003223C 0000                       		dc.w unk_2312B6-.DPLCs
0003223E 0000                       		dc.w unk_2312BC-.DPLCs
00032240 0000                       		dc.w unk_2312C2-.DPLCs
00032242 0000                       		dc.w unk_2312C8-.DPLCs
00032244 0000                       		dc.w unk_2312CE-.DPLCs
00032246 0000                       		dc.w unk_2312DA-.DPLCs
00032248 0000                       		dc.w unk_2312E4-.DPLCs
0003224A 0000                       		dc.w unk_2312F2-.DPLCs
0003224C 0000                       		dc.w unk_231310-.DPLCs
0003224E 0000                       		dc.w unk_231318-.DPLCs
00032250 0000                       		dc.w unk_231334-.DPLCs
00032252 0000                       		dc.w unk_2310EC-.DPLCs
00032254 0000                       		dc.w unk_2310EC-.DPLCs
00032256 0000                       		dc.w unk_23133C-.DPLCs
00032258 0000                       		dc.w unk_2310EC-.DPLCs
0003225A 0000                       		dc.w unk_2310EC-.DPLCs
0003225C 0000                       		dc.w unk_2310EC-.DPLCs
0003225E 0000                       		dc.w unk_231346-.DPLCs
00032260 0000                       		dc.w unk_23134E-.DPLCs
00032262 0000                       		dc.w unk_231356-.DPLCs
00032264 0000                       		dc.w unk_23135E-.DPLCs
00032266 0000                       		dc.w unk_2310EC-.DPLCs
00032268 0000                       		dc.w unk_2310EC-.DPLCs
0003226A 0000                       		dc.w unk_231366-.DPLCs
0003226C 0000                       		dc.w unk_2310EC-.DPLCs
0003226E 0000                       		dc.w unk_2310EC-.DPLCs
00032270 0000                       		dc.w unk_231374-.DPLCs
00032272 0000                       		dc.w unk_23137E-.DPLCs
00032274 0000                       		dc.w unk_2310EC-.DPLCs
00032276 0000                       		dc.w unk_2310EC-.DPLCs
00032278 0000                       		dc.w unk_2310EC-.DPLCs
0003227A 0000                       		dc.w unk_2310EC-.DPLCs
0003227C 0000                       		dc.w unk_2310EC-.DPLCs
0003227E 0000                       		dc.w unk_2310EC-.DPLCs
00032280 0000                       		dc.w unk_2310EC-.DPLCs
00032282 0000                       		dc.w unk_2310EC-.DPLCs
00032284 0000                       		dc.w unk_2310EC-.DPLCs
00032286 0000                       		dc.w unk_2310EC-.DPLCs
00032288 0000                       		dc.w unk_2310EC-.DPLCs
0003228A 0000                       		dc.w unk_2310EC-.DPLCs
0003228C 0000                       		dc.w unk_2310EC-.DPLCs
0003228E 0000                       		dc.w unk_2310EC-.DPLCs
00032290 0000                       		dc.w unk_2310EC-.DPLCs
00032292 0000                       		dc.w unk_2310EC-.DPLCs
00032294 0000                       		dc.w unk_231320-.DPLCs
00032296 0000                       		dc.w unk_23132A-.DPLCs
00032298 0000                       		dc.w unk_2310EC-.DPLCs
0003229A 0000                       		dc.w unk_2310EC-.DPLCs
0003229C 0000                       		dc.w unk_231386-.DPLCs
0003229E 0000                       		dc.w unk_23138E-.DPLCs
000322A0 0000                       		dc.w unk_231394-.DPLCs
000322A2 0000                       		dc.w unk_23139C-.DPLCs
000322A4 0000                       		dc.w unk_2313A6-.DPLCs
000322A6 0000                       		dc.w unk_2313B0-.DPLCs
000322A8 0000                       		dc.w unk_2310EC-.DPLCs
000322AA 0000                       		dc.w unk_2310EC-.DPLCs
000322AC 0000                       		dc.w unk_2310EC-.DPLCs
000322AE 0000                       		dc.w unk_2310EC-.DPLCs
000322B0 0000                       		dc.w unk_2310EC-.DPLCs
000322B2 0000                       		dc.w unk_2310EC-.DPLCs
000322B4 0000                       		dc.w unk_2310EC-.DPLCs
000322B6 0000                       		dc.w unk_231178-.DPLCs
000322B8 0000                       		dc.w unk_23117E-.DPLCs
000322BA 0000                       		dc.w unk_231188-.DPLCs
000322BC 0000                       		dc.w unk_231192-.DPLCs
000322BE 0000                       		dc.w unk_231402-.DPLCs
000322C0 0000                       		dc.w unk_231408-.DPLCs
000322C2 0000                       		dc.w unk_23140E-.DPLCs
000322C4 0000                       		dc.w unk_231414-.DPLCs
000322C6 0000                       		dc.w unk_23141A-.DPLCs
000322C8 0000                       		dc.w unk_231426-.DPLCs
000322CA 0000                       		dc.w unk_23142E-.DPLCs
000322CC 0000                       		dc.w unk_23143A-.DPLCs
000322CE 0000                       		dc.w unk_231442-.DPLCs
000322D0 0000                       		dc.w unk_231448-.DPLCs
000322D2 0000                       		dc.w unk_23144E-.DPLCs
000322D4 0000                       		dc.w unk_231454-.DPLCs
000322D6 0000                       		dc.w unk_23145A-.DPLCs
000322D8 0000                       		dc.w unk_231464-.DPLCs
000322DA 0000                       		dc.w unk_23146C-.DPLCs
000322DC 0000                       		dc.w unk_231478-.DPLCs
000322DE 0000                       		dc.w unk_2313F0-.DPLCs
000322E0 0000                       		dc.w unk_2313F8-.DPLCs
000322E2 0000                       		dc.w unk_231480-.DPLCs
000322E4 0000                       		dc.w unk_23148C-.DPLCs
000322E6 0000                       		dc.w unk_231496-.DPLCs
000322E8 0000                       		dc.w unk_2314A2-.DPLCs
000322EA 0000                       		dc.w unk_2314AC-.DPLCs
000322EC 0000                       		dc.w unk_2314B4-.DPLCs
000322EE 0000                       		dc.w unk_2314BE-.DPLCs
000322F0 0000                       		dc.w unk_2314C6-.DPLCs
000322F2 0000                       		dc.w unk_2314D0-.DPLCs
000322F4 0000                       		dc.w unk_2314DC-.DPLCs
000322F6 0000                       		dc.w unk_2314E8-.DPLCs
000322F8 0000                       		dc.w unk_2314F4-.DPLCs
000322FA 0000                       		dc.w unk_2314D0-.DPLCs
000322FC 0000                       		dc.w unk_2314DC-.DPLCs
000322FE 0000                       		dc.w unk_2314E8-.DPLCs
00032300 0000                       		dc.w unk_2314F4-.DPLCs
00032302 0000                       		dc.w unk_231500-.DPLCs
00032304 0000                       		dc.w unk_23150C-.DPLCs
00032306 0000                       		dc.w unk_231518-.DPLCs
00032308 0000                       		dc.w unk_231524-.DPLCs
0003230A 0000                       		dc.w unk_231530-.DPLCs
0003230C 0000                       		dc.w unk_231536-.DPLCs
0003230E 0000                       		dc.w unk_231542-.DPLCs
00032310 0000                       		dc.w unk_23154C-.DPLCs
00032312 0000                       		dc.w unk_231530-.DPLCs
00032314 0000                       		dc.w unk_231536-.DPLCs
00032316 0000                       		dc.w unk_231542-.DPLCs
00032318 0000                       		dc.w unk_23154C-.DPLCs
0003231A 0000                       		dc.w unk_231556-.DPLCs
0003231C 0000                       		dc.w unk_23155C-.DPLCs
0003231E 0000                       		dc.w unk_231562-.DPLCs
00032320 0000                       		dc.w unk_23156C-.DPLCs
00032322 00                         unk_2310EC:	dc.b   0
00032323 00                         		dc.b   0
00032324 00                         unk_2310EE:	dc.b   0
00032325 04                         		dc.b   4
00032326 20                         		dc.b $20
00032327 00                         		dc.b   0
00032328 70                         		dc.b $70 ; p
00032329 03                         		dc.b   3
0003232A 20                         		dc.b $20
0003232B 0B                         		dc.b  $B
0003232C 20                         		dc.b $20
0003232D 0E                         		dc.b  $E
0003232E 00                         unk_2310F8:	dc.b   0
0003232F 03                         		dc.b   3
00032330 50                         		dc.b $50 ; P
00032331 11                         		dc.b $11
00032332 50                         		dc.b $50 ; P
00032333 17                         		dc.b $17
00032334 20                         		dc.b $20
00032335 1D                         		dc.b $1D
00032336 00                         unk_231100:	dc.b   0
00032337 03                         		dc.b   3
00032338 50                         		dc.b $50 ; P
00032339 20                         		dc.b $20
0003233A 50                         		dc.b $50 ; P
0003233B 17                         		dc.b $17
0003233C 20                         		dc.b $20
0003233D 1D                         		dc.b $1D
0003233E 00                         unk_231108:	dc.b   0
0003233F 03                         		dc.b   3
00032340 50                         		dc.b $50 ; P
00032341 20                         		dc.b $20
00032342 50                         		dc.b $50 ; P
00032343 17                         		dc.b $17
00032344 20                         		dc.b $20
00032345 26                         		dc.b $26 ; &
00032346 00                         unk_231110:	dc.b   0
00032347 03                         		dc.b   3
00032348 80                         		dc.b $80 ; €
00032349 29                         		dc.b $29 ; )
0003234A 20                         		dc.b $20
0003234B 0B                         		dc.b  $B
0003234C 20                         		dc.b $20
0003234D 0E                         		dc.b  $E
0003234E 00                         unk_231118:	dc.b   0
0003234F 03                         		dc.b   3
00032350 50                         		dc.b $50 ; P
00032351 32                         		dc.b $32 ; 2
00032352 70                         		dc.b $70 ; p
00032353 38                         		dc.b $38 ; 8
00032354 20                         		dc.b $20
00032355 40                         		dc.b $40 ; .
00032356 00                         unk_231120:	dc.b   0
00032357 02                         		dc.b   2
00032358 F0                         		dc.b $F0 ; ð
00032359 43                         		dc.b $43 ; C
0003235A 10                         		dc.b $10
0003235B 53                         		dc.b $53 ; S
0003235C 00                         unk_231126:	dc.b   0
0003235D 03                         		dc.b   3
0003235E F0                         		dc.b $F0 ; ð
0003235F 43                         		dc.b $43 ; C
00032360 10                         		dc.b $10
00032361 55                         		dc.b $55 ; U
00032362 10                         		dc.b $10
00032363 53                         		dc.b $53 ; S
00032364 00                         unk_23112E:	dc.b   0
00032365 04                         		dc.b   4
00032366 20                         		dc.b $20
00032367 00                         		dc.b   0
00032368 70                         		dc.b $70 ; p
00032369 57                         		dc.b $57 ; W
0003236A 20                         		dc.b $20
0003236B 0B                         		dc.b  $B
0003236C 20                         		dc.b $20
0003236D 0E                         		dc.b  $E
0003236E 00                         unk_231138:	dc.b   0
0003236F 05                         		dc.b   5
00032370 20                         		dc.b $20
00032371 5F                         		dc.b $5F ; _
00032372 30                         		dc.b $30 ; 0
00032373 62                         		dc.b $62 ; b
00032374 50                         		dc.b $50 ; P
00032375 66                         		dc.b $66 ; f
00032376 50                         		dc.b $50 ; P
00032377 6C                         		dc.b $6C ; l
00032378 10                         		dc.b $10
00032379 72                         		dc.b $72 ; r
0003237A 00                         unk_231144:	dc.b   0
0003237B 03                         		dc.b   3
0003237C 20                         		dc.b $20
0003237D 5F                         		dc.b $5F ; _
0003237E 30                         		dc.b $30 ; 0
0003237F 62                         		dc.b $62 ; b
00032380 B0                         		dc.b $B0 ; °
00032381 74                         		dc.b $74 ; t
00032382 00                         unk_23114C:	dc.b   0
00032383 02                         		dc.b   2
00032384 20                         		dc.b $20
00032385 80                         		dc.b $80 ; €
00032386 B0                         		dc.b $B0 ; °
00032387 83                         		dc.b $83 ; ƒ
00032388 00                         unk_231152:	dc.b   0
00032389 05                         		dc.b   5
0003238A 20                         		dc.b $20
0003238B 80                         		dc.b $80 ; €
0003238C 20                         		dc.b $20
0003238D 8F                         		dc.b $8F ; 
0003238E 50                         		dc.b $50 ; P
0003238F 92                         		dc.b $92 ; ’
00032390 50                         		dc.b $50 ; P
00032391 98                         		dc.b $98 ; ˜
00032392 10                         		dc.b $10
00032393 9E                         		dc.b $9E ; ž
00032394 00                         unk_23115E:	dc.b   0
00032395 03                         		dc.b   3
00032396 20                         		dc.b $20
00032397 80                         		dc.b $80 ; €
00032398 B0                         		dc.b $B0 ; °
00032399 A0                         		dc.b $A0 ;  
0003239A 20                         		dc.b $20
0003239B AC                         		dc.b $AC ; ¬
0003239C 00                         unk_231166:	dc.b   0
0003239D 04                         		dc.b   4
0003239E 20                         		dc.b $20
0003239F 5F                         		dc.b $5F ; _
000323A0 30                         		dc.b $30 ; 0
000323A1 62                         		dc.b $62 ; b
000323A2 30                         		dc.b $30 ; 0
000323A3 AF                         		dc.b $AF ; ¯
000323A4 50                         		dc.b $50 ; P
000323A5 B3                         		dc.b $B3 ; ³
000323A6 00                         unk_231170:	dc.b   0
000323A7 03                         		dc.b   3
000323A8 30                         		dc.b $30 ; 0
000323A9 B9                         		dc.b $B9 ; ¹
000323AA 70                         		dc.b $70 ; p
000323AB BD                         		dc.b $BD ; ½
000323AC 30                         		dc.b $30 ; 0
000323AD C5                         		dc.b $C5 ; Å
000323AE 00                         unk_231178:	dc.b   0
000323AF 02                         		dc.b   2
000323B0 B0                         		dc.b $B0 ; °
000323B1 C9                         		dc.b $C9 ; É
000323B2 30                         		dc.b $30 ; 0
000323B3 D5                         		dc.b $D5 ; Õ
000323B4 00                         unk_23117E:	dc.b   0
000323B5 04                         		dc.b   4
000323B6 10                         		dc.b $10
000323B7 D9                         		dc.b $D9 ; Ù
000323B8 50                         		dc.b $50 ; P
000323B9 DB                         		dc.b $DB ; Û
000323BA 70                         		dc.b $70 ; p
000323BB E1                         		dc.b $E1 ; á
000323BC 20                         		dc.b $20
000323BD E9                         		dc.b $E9 ; é
000323BE 00                         unk_231188:	dc.b   0
000323BF 04                         		dc.b   4
000323C0 10                         		dc.b $10
000323C1 D9                         		dc.b $D9 ; Ù
000323C2 50                         		dc.b $50 ; P
000323C3 DB                         		dc.b $DB ; Û
000323C4 70                         		dc.b $70 ; p
000323C5 E1                         		dc.b $E1 ; á
000323C6 20                         		dc.b $20
000323C7 E9                         		dc.b $E9 ; é
000323C8 00                         unk_231192:	dc.b   0
000323C9 02                         		dc.b   2
000323CA B0                         		dc.b $B0 ; °
000323CB C9                         		dc.b $C9 ; É
000323CC 30                         		dc.b $30 ; 0
000323CD D5                         		dc.b $D5 ; Õ
000323CE 00                         unk_231198:	dc.b   0
000323CF 05                         		dc.b   5
000323D0 30                         		dc.b $30 ; 0
000323D1 EC                         		dc.b $EC ; ì
000323D2 30                         		dc.b $30 ; 0
000323D3 F0                         		dc.b $F0 ; ð
000323D4 50                         		dc.b $50 ; P
000323D5 F4                         		dc.b $F4 ; ô
000323D6 50                         		dc.b $50 ; P
000323D7 FA                         		dc.b $FA ; ú
000323D8 01                         		dc.b   1
000323D9 00                         		dc.b   0
000323DA 00                         unk_2311A4:	dc.b   0
000323DB 06                         		dc.b   6
000323DC 30                         		dc.b $30 ; 0
000323DD EC                         		dc.b $EC ; ì
000323DE 30                         		dc.b $30 ; 0
000323DF F0                         		dc.b $F0 ; ð
000323E0 31                         		dc.b $31 ; 1
000323E1 01                         		dc.b   1
000323E2 01                         		dc.b   1
000323E3 05                         		dc.b   5
000323E4 31                         		dc.b $31 ; 1
000323E5 06                         		dc.b   6
000323E6 51                         		dc.b $51 ; Q
000323E7 0A                         		dc.b  $A
000323E8 00                         unk_2311B2:	dc.b   0
000323E9 06                         		dc.b   6
000323EA 31                         		dc.b $31 ; 1
000323EB 10                         		dc.b $10
000323EC 11                         		dc.b $11
000323ED 14                         		dc.b $14
000323EE 71                         		dc.b $71 ; q
000323EF 16                         		dc.b $16
000323F0 01                         		dc.b   1
000323F1 1E                         		dc.b $1E
000323F2 01                         		dc.b   1
000323F3 1F                         		dc.b $1F
000323F4 21                         		dc.b $21 ; !
000323F5 20                         		dc.b $20
000323F6 00                         unk_2311C0:	dc.b   0
000323F7 06                         		dc.b   6
000323F8 31                         		dc.b $31 ; 1
000323F9 10                         		dc.b $10
000323FA 11                         		dc.b $11
000323FB 14                         		dc.b $14
000323FC 81                         		dc.b $81 ; 
000323FD 23                         		dc.b $23 ; #
000323FE 01                         		dc.b   1
000323FF 1E                         		dc.b $1E
00032400 11                         		dc.b $11
00032401 2C                         		dc.b $2C ; ,
00032402 31                         		dc.b $31 ; 1
00032403 2E                         		dc.b $2E ; .
00032404 00                         unk_2311CE:	dc.b   0
00032405 06                         		dc.b   6
00032406 31                         		dc.b $31 ; 1
00032407 10                         		dc.b $10
00032408 11                         		dc.b $11
00032409 14                         		dc.b $14
0003240A 71                         		dc.b $71 ; q
0003240B 32                         		dc.b $32 ; 2
0003240C 01                         		dc.b   1
0003240D 1E                         		dc.b $1E
0003240E 01                         		dc.b   1
0003240F 3A                         		dc.b $3A ; :
00032410 21                         		dc.b $21 ; !
00032411 3B                         		dc.b $3B ; ;
00032412 00                         unk_2311DC:	dc.b   0
00032413 05                         		dc.b   5
00032414 30                         		dc.b $30 ; 0
00032415 EC                         		dc.b $EC ; ì
00032416 30                         		dc.b $30 ; 0
00032417 F0                         		dc.b $F0 ; ð
00032418 71                         		dc.b $71 ; q
00032419 3E                         		dc.b $3E ; >
0003241A 01                         		dc.b   1
0003241B 46                         		dc.b $46 ; F
0003241C 21                         		dc.b $21 ; !
0003241D 47                         		dc.b $47 ; G
0003241E 00                         unk_2311E8:	dc.b   0
0003241F 05                         		dc.b   5
00032420 51                         		dc.b $51 ; Q
00032421 4A                         		dc.b $4A ; J
00032422 11                         		dc.b $11
00032423 50                         		dc.b $50 ; P
00032424 21                         		dc.b $21 ; !
00032425 52                         		dc.b $52 ; R
00032426 31                         		dc.b $31 ; 1
00032427 55                         		dc.b $55 ; U
00032428 51                         		dc.b $51 ; Q
00032429 59                         		dc.b $59 ; Y
0003242A 00                         unk_2311F4:	dc.b   0
0003242B 03                         		dc.b   3
0003242C B1                         		dc.b $B1 ; ±
0003242D 5F                         		dc.b $5F ; _
0003242E 21                         		dc.b $21 ; !
0003242F 52                         		dc.b $52 ; R
00032430 31                         		dc.b $31 ; 1
00032431 55                         		dc.b $55 ; U
00032432 00                         unk_2311FC:	dc.b   0
00032433 02                         		dc.b   2
00032434 21                         		dc.b $21 ; !
00032435 6B                         		dc.b $6B ; k
00032436 B1                         		dc.b $B1 ; ±
00032437 6E                         		dc.b $6E ; n
00032438 00                         unk_231202:	dc.b   0
00032439 05                         		dc.b   5
0003243A 51                         		dc.b $51 ; Q
0003243B 7A                         		dc.b $7A ; z
0003243C 11                         		dc.b $11
0003243D 80                         		dc.b $80 ; €
0003243E 21                         		dc.b $21 ; !
0003243F 6B                         		dc.b $6B ; k
00032440 21                         		dc.b $21 ; !
00032441 6E                         		dc.b $6E ; n
00032442 51                         		dc.b $51 ; Q
00032443 82                         		dc.b $82 ; ‚
00032444 00                         unk_23120E:	dc.b   0
00032445 03                         		dc.b   3
00032446 21                         		dc.b $21 ; !
00032447 6B                         		dc.b $6B ; k
00032448 B1                         		dc.b $B1 ; ±
00032449 88                         		dc.b $88 ; ˆ
0003244A 21                         		dc.b $21 ; !
0003244B 94                         		dc.b $94 ; ”
0003244C 00                         unk_231216:	dc.b   0
0003244D 04                         		dc.b   4
0003244E 21                         		dc.b $21 ; !
0003244F 52                         		dc.b $52 ; R
00032450 31                         		dc.b $31 ; 1
00032451 55                         		dc.b $55 ; U
00032452 31                         		dc.b $31 ; 1
00032453 97                         		dc.b $97 ; —
00032454 51                         		dc.b $51 ; Q
00032455 9B                         		dc.b $9B ; ›
00032456 00                         unk_231220:	dc.b   0
00032457 05                         		dc.b   5
00032458 31                         		dc.b $31 ; 1
00032459 A1                         		dc.b $A1 ; ¡
0003245A 51                         		dc.b $51 ; Q
0003245B A5                         		dc.b $A5 ; ¥
0003245C 31                         		dc.b $31 ; 1
0003245D AB                         		dc.b $AB ; «
0003245E 51                         		dc.b $51 ; Q
0003245F AF                         		dc.b $AF ; ¯
00032460 01                         		dc.b   1
00032461 B5                         		dc.b $B5 ; µ
00032462 00                         unk_23122C:	dc.b   0
00032463 06                         		dc.b   6
00032464 01                         		dc.b   1
00032465 B6                         		dc.b $B6 ; ¶
00032466 31                         		dc.b $31 ; 1
00032467 B7                         		dc.b $B7 ; ·
00032468 31                         		dc.b $31 ; 1
00032469 A1                         		dc.b $A1 ; ¡
0003246A 31                         		dc.b $31 ; 1
0003246B BB                         		dc.b $BB ; »
0003246C 31                         		dc.b $31 ; 1
0003246D AB                         		dc.b $AB ; «
0003246E 51                         		dc.b $51 ; Q
0003246F BF                         		dc.b $BF ; ¿
00032470 00                         unk_23123A:	dc.b   0
00032471 06                         		dc.b   6
00032472 21                         		dc.b $21 ; !
00032473 C5                         		dc.b $C5 ; Å
00032474 31                         		dc.b $31 ; 1
00032475 C8                         		dc.b $C8 ; È
00032476 71                         		dc.b $71 ; q
00032477 CC                         		dc.b $CC ; Ì
00032478 11                         		dc.b $11
00032479 D4                         		dc.b $D4 ; Ô
0003247A 01                         		dc.b   1
0003247B D6                         		dc.b $D6 ; Ö
0003247C 01                         		dc.b   1
0003247D D7                         		dc.b $D7 ; ×
0003247E 00                         unk_231248:	dc.b   0
0003247F 06                         		dc.b   6
00032480 81                         		dc.b $81 ; 
00032481 D8                         		dc.b $D8 ; Ø
00032482 31                         		dc.b $31 ; 1
00032483 E1                         		dc.b $E1 ; á
00032484 31                         		dc.b $31 ; 1
00032485 C8                         		dc.b $C8 ; È
00032486 11                         		dc.b $11
00032487 D4                         		dc.b $D4 ; Ô
00032488 01                         		dc.b   1
00032489 D6                         		dc.b $D6 ; Ö
0003248A 11                         		dc.b $11
0003248B E5                         		dc.b $E5 ; å
0003248C 00                         unk_231256:	dc.b   0
0003248D 06                         		dc.b   6
0003248E 21                         		dc.b $21 ; !
0003248F E7                         		dc.b $E7 ; ç
00032490 31                         		dc.b $31 ; 1
00032491 C8                         		dc.b $C8 ; È
00032492 71                         		dc.b $71 ; q
00032493 EA                         		dc.b $EA ; ê
00032494 11                         		dc.b $11
00032495 D4                         		dc.b $D4 ; Ô
00032496 01                         		dc.b   1
00032497 D6                         		dc.b $D6 ; Ö
00032498 01                         		dc.b   1
00032499 F2                         		dc.b $F2 ; ò
0003249A 00                         unk_231264:	dc.b   0
0003249B 05                         		dc.b   5
0003249C 21                         		dc.b $21 ; !
0003249D F3                         		dc.b $F3 ; ó
0003249E 31                         		dc.b $31 ; 1
0003249F A1                         		dc.b $A1 ; ¡
000324A0 71                         		dc.b $71 ; q
000324A1 F6                         		dc.b $F6 ; ö
000324A2 31                         		dc.b $31 ; 1
000324A3 AB                         		dc.b $AB ; «
000324A4 01                         		dc.b   1
000324A5 FE                         		dc.b $FE ; þ
000324A6 00                         unk_231270:	dc.b   0
000324A7 02                         		dc.b   2
000324A8 51                         		dc.b $51 ; Q
000324A9 FF                         		dc.b $FF
000324AA B2                         		dc.b $B2 ; ²
000324AB 05                         		dc.b   5
000324AC 00                         unk_231276:	dc.b   0
000324AD 02                         		dc.b   2
000324AE 52                         		dc.b $52 ; R
000324AF 11                         		dc.b $11
000324B0 B2                         		dc.b $B2 ; ²
000324B1 17                         		dc.b $17
000324B2 00                         unk_23127C:	dc.b   0
000324B3 02                         		dc.b   2
000324B4 51                         		dc.b $51 ; Q
000324B5 FF                         		dc.b $FF
000324B6 B2                         		dc.b $B2 ; ²
000324B7 23                         		dc.b $23 ; #
000324B8 00                         unk_231282:	dc.b   0
000324B9 02                         		dc.b   2
000324BA 52                         		dc.b $52 ; R
000324BB 11                         		dc.b $11
000324BC B2                         		dc.b $B2 ; ²
000324BD 2F                         		dc.b $2F ; /
000324BE 00                         unk_231288:	dc.b   0
000324BF 05                         		dc.b   5
000324C0 22                         		dc.b $22 ; "
000324C1 3B                         		dc.b $3B ; ;
000324C2 22                         		dc.b $22 ; "
000324C3 3E                         		dc.b $3E ; >
000324C4 02                         		dc.b   2
000324C5 41                         		dc.b $41 ; A
000324C6 02                         		dc.b   2
000324C7 42                         		dc.b $42 ; B
000324C8 B2                         		dc.b $B2 ; ²
000324C9 43                         		dc.b $43 ; C
000324CA 00                         unk_231294:	dc.b   0
000324CB 04                         		dc.b   4
000324CC 32                         		dc.b $32 ; 2
000324CD 4F                         		dc.b $4F ; O
000324CE 22                         		dc.b $22 ; "
000324CF 53                         		dc.b $53 ; S
000324D0 02                         		dc.b   2
000324D1 56                         		dc.b $56 ; V
000324D2 B2                         		dc.b $B2 ; ²
000324D3 57                         		dc.b $57 ; W
000324D4 00                         unk_23129E:	dc.b   0
000324D5 06                         		dc.b   6
000324D6 22                         		dc.b $22 ; "
000324D7 3B                         		dc.b $3B ; ;
000324D8 22                         		dc.b $22 ; "
000324D9 3E                         		dc.b $3E ; >
000324DA 02                         		dc.b   2
000324DB 63                         		dc.b $63 ; c
000324DC 02                         		dc.b   2
000324DD 42                         		dc.b $42 ; B
000324DE 72                         		dc.b $72 ; r
000324DF 64                         		dc.b $64 ; d
000324E0 22                         		dc.b $22 ; "
000324E1 6C                         		dc.b $6C ; l
000324E2 00                         unk_2312AC:	dc.b   0
000324E3 04                         		dc.b   4
000324E4 32                         		dc.b $32 ; 2
000324E5 4F                         		dc.b $4F ; O
000324E6 22                         		dc.b $22 ; "
000324E7 53                         		dc.b $53 ; S
000324E8 02                         		dc.b   2
000324E9 56                         		dc.b $56 ; V
000324EA B2                         		dc.b $B2 ; ²
000324EB 6F                         		dc.b $6F ; o
000324EC 00                         unk_2312B6:	dc.b   0
000324ED 02                         		dc.b   2
000324EE 52                         		dc.b $52 ; R
000324EF 7B                         		dc.b $7B ; {
000324F0 B2                         		dc.b $B2 ; ²
000324F1 81                         		dc.b $81 ; 
000324F2 00                         unk_2312BC:	dc.b   0
000324F3 02                         		dc.b   2
000324F4 51                         		dc.b $51 ; Q
000324F5 6B                         		dc.b $6B ; k
000324F6 B2                         		dc.b $B2 ; ²
000324F7 8D                         		dc.b $8D ; 
000324F8 00                         unk_2312C2:	dc.b   0
000324F9 02                         		dc.b   2
000324FA 52                         		dc.b $52 ; R
000324FB 7B                         		dc.b $7B ; {
000324FC B2                         		dc.b $B2 ; ²
000324FD 99                         		dc.b $99 ; ™
000324FE 00                         unk_2312C8:	dc.b   0
000324FF 02                         		dc.b   2
00032500 51                         		dc.b $51 ; Q
00032501 6B                         		dc.b $6B ; k
00032502 B2                         		dc.b $B2 ; ²
00032503 A5                         		dc.b $A5 ; ¥
00032504 00                         unk_2312CE:	dc.b   0
00032505 05                         		dc.b   5
00032506 22                         		dc.b $22 ; "
00032507 B1                         		dc.b $B1 ; ±
00032508 02                         		dc.b   2
00032509 B4                         		dc.b $B4 ; ´
0003250A 22                         		dc.b $22 ; "
0003250B B5                         		dc.b $B5 ; µ
0003250C B2                         		dc.b $B2 ; ²
0003250D B8                         		dc.b $B8 ; ¸
0003250E 02                         		dc.b   2
0003250F C4                         		dc.b $C4 ; Ä
00032510 00                         unk_2312DA:	dc.b   0
00032511 04                         		dc.b   4
00032512 32                         		dc.b $32 ; 2
00032513 C5                         		dc.b $C5 ; Å
00032514 02                         		dc.b   2
00032515 C9                         		dc.b $C9 ; É
00032516 22                         		dc.b $22 ; "
00032517 CA                         		dc.b $CA ; Ê
00032518 B2                         		dc.b $B2 ; ²
00032519 CD                         		dc.b $CD ; Í
0003251A 00                         unk_2312E4:	dc.b   0
0003251B 06                         		dc.b   6
0003251C 22                         		dc.b $22 ; "
0003251D B1                         		dc.b $B1 ; ±
0003251E 02                         		dc.b   2
0003251F D9                         		dc.b $D9 ; Ù
00032520 22                         		dc.b $22 ; "
00032521 B5                         		dc.b $B5 ; µ
00032522 72                         		dc.b $72 ; r
00032523 DA                         		dc.b $DA ; Ú
00032524 02                         		dc.b   2
00032525 C4                         		dc.b $C4 ; Ä
00032526 22                         		dc.b $22 ; "
00032527 E2                         		dc.b $E2 ; â
00032528 00                         unk_2312F2:	dc.b   0
00032529 04                         		dc.b   4
0003252A 32                         		dc.b $32 ; 2
0003252B C5                         		dc.b $C5 ; Å
0003252C 02                         		dc.b   2
0003252D C9                         		dc.b $C9 ; É
0003252E 22                         		dc.b $22 ; "
0003252F CA                         		dc.b $CA ; Ê
00032530 B2                         		dc.b $B2 ; ²
00032531 E5                         		dc.b $E5 ; å
00032532 00                         unk_2312FC:	dc.b   0
00032533 01                         		dc.b   1
00032534 F2                         		dc.b $F2 ; ò
00032535 F1                         		dc.b $F1 ; ñ
00032536 00                         unk_231300:	dc.b   0
00032537 01                         		dc.b   1
00032538 F3                         		dc.b $F3 ; ó
00032539 01                         		dc.b   1
0003253A 00                         unk_231304:	dc.b   0
0003253B 01                         		dc.b   1
0003253C F3                         		dc.b $F3 ; ó
0003253D 11                         		dc.b $11
0003253E 00                         unk_231308:	dc.b   0
0003253F 01                         		dc.b   1
00032540 F3                         		dc.b $F3 ; ó
00032541 21                         		dc.b $21 ; !
00032542 00                         unk_23130C:	dc.b   0
00032543 01                         		dc.b   1
00032544 F3                         		dc.b $F3 ; ó
00032545 31                         		dc.b $31 ; 1
00032546 00                         unk_231310:	dc.b   0
00032547 03                         		dc.b   3
00032548 53                         		dc.b $53 ; S
00032549 41                         		dc.b $41 ; A
0003254A 53                         		dc.b $53 ; S
0003254B 47                         		dc.b $47 ; G
0003254C 53                         		dc.b $53 ; S
0003254D 4D                         		dc.b $4D ; M
0003254E 00                         unk_231318:	dc.b   0
0003254F 03                         		dc.b   3
00032550 53                         		dc.b $53 ; S
00032551 53                         		dc.b $53 ; S
00032552 83                         		dc.b $83 ; ƒ
00032553 59                         		dc.b $59 ; Y
00032554 13                         		dc.b $13
00032555 62                         		dc.b $62 ; b
00032556 00                         unk_231320:	dc.b   0
00032557 04                         		dc.b   4
00032558 53                         		dc.b $53 ; S
00032559 64                         		dc.b $64 ; d
0003255A 73                         		dc.b $73 ; s
0003255B 6A                         		dc.b $6A ; j
0003255C 13                         		dc.b $13
0003255D 72                         		dc.b $72 ; r
0003255E 03                         		dc.b   3
0003255F 74                         		dc.b $74 ; t
00032560 00                         unk_23132A:	dc.b   0
00032561 04                         		dc.b   4
00032562 23                         		dc.b $23 ; #
00032563 75                         		dc.b $75 ; u
00032564 B3                         		dc.b $B3 ; ³
00032565 78                         		dc.b $78 ; x
00032566 13                         		dc.b $13
00032567 84                         		dc.b $84 ; „
00032568 23                         		dc.b $23 ; #
00032569 86                         		dc.b $86 ; †
0003256A 00                         unk_231334:	dc.b   0
0003256B 03                         		dc.b   3
0003256C 23                         		dc.b $23 ; #
0003256D 89                         		dc.b $89 ; ‰
0003256E B3                         		dc.b $B3 ; ³
0003256F 8C                         		dc.b $8C ; Œ
00032570 23                         		dc.b $23 ; #
00032571 98                         		dc.b $98 ; ˜
00032572 00                         unk_23133C:	dc.b   0
00032573 04                         		dc.b   4
00032574 13                         		dc.b $13
00032575 9B                         		dc.b $9B ; ›
00032576 03                         		dc.b   3
00032577 9D                         		dc.b $9D ; 
00032578 83                         		dc.b $83 ; ƒ
00032579 9E                         		dc.b $9E ; ž
0003257A 13                         		dc.b $13
0003257B A7                         		dc.b $A7 ; §
0003257C 00                         unk_231346:	dc.b   0
0003257D 03                         		dc.b   3
0003257E 53                         		dc.b $53 ; S
0003257F A9                         		dc.b $A9 ; ©
00032580 83                         		dc.b $83 ; ƒ
00032581 AF                         		dc.b $AF ; ¯
00032582 13                         		dc.b $13
00032583 B8                         		dc.b $B8 ; ¸
00032584 00                         unk_23134E:	dc.b   0
00032585 03                         		dc.b   3
00032586 53                         		dc.b $53 ; S
00032587 A9                         		dc.b $A9 ; ©
00032588 53                         		dc.b $53 ; S
00032589 BA                         		dc.b $BA ; º
0003258A 13                         		dc.b $13
0003258B C0                         		dc.b $C0 ; À
0003258C 00                         unk_231356:	dc.b   0
0003258D 03                         		dc.b   3
0003258E 53                         		dc.b $53 ; S
0003258F A9                         		dc.b $A9 ; ©
00032590 83                         		dc.b $83 ; ƒ
00032591 C2                         		dc.b $C2 ; Â
00032592 13                         		dc.b $13
00032593 CB                         		dc.b $CB ; Ë
00032594 00                         unk_23135E:	dc.b   0
00032595 03                         		dc.b   3
00032596 53                         		dc.b $53 ; S
00032597 A9                         		dc.b $A9 ; ©
00032598 53                         		dc.b $53 ; S
00032599 CD                         		dc.b $CD ; Í
0003259A 13                         		dc.b $13
0003259B D3                         		dc.b $D3 ; Ó
0003259C 00                         unk_231366:	dc.b   0
0003259D 06                         		dc.b   6
0003259E 73                         		dc.b $73 ; s
0003259F D5                         		dc.b $D5 ; Õ
000325A0 13                         		dc.b $13
000325A1 DD                         		dc.b $DD ; Ý
000325A2 23                         		dc.b $23 ; #
000325A3 DF                         		dc.b $DF ; ß
000325A4 53                         		dc.b $53 ; S
000325A5 E2                         		dc.b $E2 ; â
000325A6 03                         		dc.b   3
000325A7 E8                         		dc.b $E8 ; è
000325A8 03                         		dc.b   3
000325A9 E9                         		dc.b $E9 ; é
000325AA 00                         unk_231374:	dc.b   0
000325AB 04                         		dc.b   4
000325AC 23                         		dc.b $23 ; #
000325AD EA                         		dc.b $EA ; ê
000325AE B3                         		dc.b $B3 ; ³
000325AF ED                         		dc.b $ED ; í
000325B0 03                         		dc.b   3
000325B1 F9                         		dc.b $F9 ; ù
000325B2 33                         		dc.b $33 ; 3
000325B3 FA                         		dc.b $FA ; ú
000325B4 00                         unk_23137E:	dc.b   0
000325B5 03                         		dc.b   3
000325B6 23                         		dc.b $23 ; #
000325B7 EA                         		dc.b $EA ; ê
000325B8 23                         		dc.b $23 ; #
000325B9 FE                         		dc.b $FE ; þ
000325BA F4                         		dc.b $F4 ; ô
000325BB 01                         		dc.b   1
000325BC 00                         unk_231386:	dc.b   0
000325BD 03                         		dc.b   3
000325BE B4                         		dc.b $B4 ; ´
000325BF 11                         		dc.b $11
000325C0 34                         		dc.b $34 ; 4
000325C1 1D                         		dc.b $1D
000325C2 34                         		dc.b $34 ; 4
000325C3 21                         		dc.b $21 ; !
000325C4 00                         unk_23138E:	dc.b   0
000325C5 02                         		dc.b   2
000325C6 B4                         		dc.b $B4 ; ´
000325C7 25                         		dc.b $25 ; %
000325C8 74                         		dc.b $74 ; t
000325C9 31                         		dc.b $31 ; 1
000325CA 00                         unk_231394:	dc.b   0
000325CB 03                         		dc.b   3
000325CC B4                         		dc.b $B4 ; ´
000325CD 39                         		dc.b $39 ; 9
000325CE 24                         		dc.b $24 ; $
000325CF 45                         		dc.b $45 ; E
000325D0 54                         		dc.b $54 ; T
000325D1 48                         		dc.b $48 ; H
000325D2 00                         unk_23139C:	dc.b   0
000325D3 04                         		dc.b   4
000325D4 B4                         		dc.b $B4 ; ´
000325D5 4E                         		dc.b $4E ; N
000325D6 14                         		dc.b $14
000325D7 5A                         		dc.b $5A ; Z
000325D8 34                         		dc.b $34 ; 4
000325D9 5C                         		dc.b $5C ; \
000325DA 04                         		dc.b   4
000325DB 60                         		dc.b $60 ; `
000325DC 00                         unk_2313A6:	dc.b   0
000325DD 04                         		dc.b   4
000325DE B4                         		dc.b $B4 ; ´
000325DF 61                         		dc.b $61 ; a
000325E0 14                         		dc.b $14
000325E1 5A                         		dc.b $5A ; Z
000325E2 34                         		dc.b $34 ; 4
000325E3 6D                         		dc.b $6D ; m
000325E4 04                         		dc.b   4
000325E5 60                         		dc.b $60 ; `
000325E6 00                         unk_2313B0:	dc.b   0
000325E7 04                         		dc.b   4
000325E8 B4                         		dc.b $B4 ; ´
000325E9 71                         		dc.b $71 ; q
000325EA 24                         		dc.b $24 ; $
000325EB 7D                         		dc.b $7D ; }
000325EC 24                         		dc.b $24 ; $
000325ED 80                         		dc.b $80 ; €
000325EE 14                         		dc.b $14
000325EF 83                         		dc.b $83 ; ƒ
000325F0 00                         unk_2313BA:	dc.b   0
000325F1 02                         		dc.b   2
000325F2 B4                         		dc.b $B4 ; ´
000325F3 85                         		dc.b $85 ; …
000325F4 34                         		dc.b $34 ; 4
000325F5 91                         		dc.b $91 ; ‘
000325F6 00                         unk_2313C0:	dc.b   0
000325F7 03                         		dc.b   3
000325F8 84                         		dc.b $84 ; „
000325F9 95                         		dc.b $95 ; •
000325FA 14                         		dc.b $14
000325FB 9E                         		dc.b $9E ; ž
000325FC 34                         		dc.b $34 ; 4
000325FD 91                         		dc.b $91 ; ‘
000325FE 00                         unk_2313C8:	dc.b   0
000325FF 03                         		dc.b   3
00032600 84                         		dc.b $84 ; „
00032601 A0                         		dc.b $A0 ;  
00032602 14                         		dc.b $14
00032603 9E                         		dc.b $9E ; ž
00032604 34                         		dc.b $34 ; 4
00032605 91                         		dc.b $91 ; ‘
00032606 00                         unk_2313D0:	dc.b   0
00032607 04                         		dc.b   4
00032608 04                         		dc.b   4
00032609 A9                         		dc.b $A9 ; ©
0003260A 74                         		dc.b $74 ; t
0003260B AA                         		dc.b $AA ; ª
0003260C 84                         		dc.b $84 ; „
0003260D B2                         		dc.b $B2 ; ²
0003260E 04                         		dc.b   4
0003260F 94                         		dc.b $94 ; ”
00032610 00                         unk_2313DA:	dc.b   0
00032611 02                         		dc.b   2
00032612 14                         		dc.b $14
00032613 BB                         		dc.b $BB ; »
00032614 F4                         		dc.b $F4 ; ô
00032615 BD                         		dc.b $BD ; ½
00032616 00                         unk_2313E0:	dc.b   0
00032617 03                         		dc.b   3
00032618 14                         		dc.b $14
00032619 CD                         		dc.b $CD ; Í
0003261A 14                         		dc.b $14
0003261B CF                         		dc.b $CF ; Ï
0003261C F4                         		dc.b $F4 ; ô
0003261D D1                         		dc.b $D1 ; Ñ
0003261E 00                         unk_2313E8:	dc.b   0
0003261F 03                         		dc.b   3
00032620 84                         		dc.b $84 ; „
00032621 E1                         		dc.b $E1 ; á
00032622 34                         		dc.b $34 ; 4
00032623 EA                         		dc.b $EA ; ê
00032624 54                         		dc.b $54 ; T
00032625 EE                         		dc.b $EE ; î
00032626 00                         unk_2313F0:	dc.b   0
00032627 03                         		dc.b   3
00032628 B4                         		dc.b $B4 ; ´
00032629 F4                         		dc.b $F4 ; ô
0003262A 05                         		dc.b   5
0003262B 00                         		dc.b   0
0003262C 55                         		dc.b $55 ; U
0003262D 01                         		dc.b   1
0003262E 00                         unk_2313F8:	dc.b   0
0003262F 04                         		dc.b   4
00032630 85                         		dc.b $85 ; …
00032631 07                         		dc.b   7
00032632 05                         		dc.b   5
00032633 00                         		dc.b   0
00032634 15                         		dc.b $15
00032635 10                         		dc.b $10
00032636 55                         		dc.b $55 ; U
00032637 01                         		dc.b   1
00032638 00                         unk_231402:	dc.b   0
00032639 02                         		dc.b   2
0003263A 25                         		dc.b $25 ; %
0003263B 12                         		dc.b $12
0003263C F5                         		dc.b $F5 ; õ
0003263D 15                         		dc.b $15
0003263E 00                         unk_231408:	dc.b   0
0003263F 02                         		dc.b   2
00032640 25                         		dc.b $25 ; %
00032641 25                         		dc.b $25 ; %
00032642 F5                         		dc.b $F5 ; õ
00032643 28                         		dc.b $28 ; (
00032644 00                         unk_23140E:	dc.b   0
00032645 02                         		dc.b   2
00032646 25                         		dc.b $25 ; %
00032647 38                         		dc.b $38 ; 8
00032648 F5                         		dc.b $F5 ; õ
00032649 3B                         		dc.b $3B ; ;
0003264A 00                         unk_231414:	dc.b   0
0003264B 02                         		dc.b   2
0003264C 15                         		dc.b $15
0003264D 4B                         		dc.b $4B ; K
0003264E F5                         		dc.b $F5 ; õ
0003264F 4D                         		dc.b $4D ; M
00032650 00                         unk_23141A:	dc.b   0
00032651 05                         		dc.b   5
00032652 25                         		dc.b $25 ; %
00032653 5D                         		dc.b $5D ; ]
00032654 B5                         		dc.b $B5 ; µ
00032655 60                         		dc.b $60 ; `
00032656 25                         		dc.b $25 ; %
00032657 6C                         		dc.b $6C ; l
00032658 35                         		dc.b $35 ; 5
00032659 6F                         		dc.b $6F ; o
0003265A 05                         		dc.b   5
0003265B 73                         		dc.b $73 ; s
0003265C 00                         unk_231426:	dc.b   0
0003265D 03                         		dc.b   3
0003265E 25                         		dc.b $25 ; %
0003265F 74                         		dc.b $74 ; t
00032660 F5                         		dc.b $F5 ; õ
00032661 77                         		dc.b $77 ; w
00032662 15                         		dc.b $15
00032663 87                         		dc.b $87 ; ‡
00032664 00                         unk_23142E:	dc.b   0
00032665 05                         		dc.b   5
00032666 25                         		dc.b $25 ; %
00032667 89                         		dc.b $89 ; ‰
00032668 B5                         		dc.b $B5 ; µ
00032669 8C                         		dc.b $8C ; Œ
0003266A 25                         		dc.b $25 ; %
0003266B 98                         		dc.b $98 ; ˜
0003266C 35                         		dc.b $35 ; 5
0003266D 9B                         		dc.b $9B ; ›
0003266E 05                         		dc.b   5
0003266F 9F                         		dc.b $9F ; Ÿ
00032670 00                         unk_23143A:	dc.b   0
00032671 03                         		dc.b   3
00032672 25                         		dc.b $25 ; %
00032673 A0                         		dc.b $A0 ;  
00032674 F5                         		dc.b $F5 ; õ
00032675 A3                         		dc.b $A3 ; £
00032676 15                         		dc.b $15
00032677 B3                         		dc.b $B3 ; ³
00032678 00                         unk_231442:	dc.b   0
00032679 02                         		dc.b   2
0003267A F5                         		dc.b $F5 ; õ
0003267B B5                         		dc.b $B5 ; µ
0003267C 25                         		dc.b $25 ; %
0003267D C5                         		dc.b $C5 ; Å
0003267E 00                         unk_231448:	dc.b   0
0003267F 02                         		dc.b   2
00032680 F5                         		dc.b $F5 ; õ
00032681 C8                         		dc.b $C8 ; È
00032682 25                         		dc.b $25 ; %
00032683 D8                         		dc.b $D8 ; Ø
00032684 00                         unk_23144E:	dc.b   0
00032685 02                         		dc.b   2
00032686 F5                         		dc.b $F5 ; õ
00032687 DB                         		dc.b $DB ; Û
00032688 25                         		dc.b $25 ; %
00032689 EB                         		dc.b $EB ; ë
0003268A 00                         unk_231454:	dc.b   0
0003268B 02                         		dc.b   2
0003268C F5                         		dc.b $F5 ; õ
0003268D EE                         		dc.b $EE ; î
0003268E 15                         		dc.b $15
0003268F FE                         		dc.b $FE ; þ
00032690 00                         unk_23145A:	dc.b   0
00032691 04                         		dc.b   4
00032692 56                         		dc.b $56 ; V
00032693 00                         		dc.b   0
00032694 26                         		dc.b $26 ; &
00032695 06                         		dc.b   6
00032696 B6                         		dc.b $B6 ; ¶
00032697 09                         		dc.b   9
00032698 16                         		dc.b $16
00032699 15                         		dc.b $15
0003269A 00                         unk_231464:	dc.b   0
0003269B 03                         		dc.b   3
0003269C 16                         		dc.b $16
0003269D 17                         		dc.b $17
0003269E 26                         		dc.b $26 ; &
0003269F 19                         		dc.b $19
000326A0 F6                         		dc.b $F6 ; ö
000326A1 1C                         		dc.b $1C
000326A2 00                         unk_23146C:	dc.b   0
000326A3 05                         		dc.b   5
000326A4 26                         		dc.b $26 ; &
000326A5 2C                         		dc.b $2C ; ,
000326A6 26                         		dc.b $26 ; &
000326A7 2F                         		dc.b $2F ; /
000326A8 B6                         		dc.b $B6 ; ¶
000326A9 32                         		dc.b $32 ; 2
000326AA 16                         		dc.b $16
000326AB 3E                         		dc.b $3E ; >
000326AC 26                         		dc.b $26 ; &
000326AD 40                         		dc.b $40 ; .
000326AE 00                         unk_231478:	dc.b   0
000326AF 03                         		dc.b   3
000326B0 16                         		dc.b $16
000326B1 43                         		dc.b $43 ; C
000326B2 26                         		dc.b $26 ; &
000326B3 45                         		dc.b $45 ; E
000326B4 F6                         		dc.b $F6 ; ö
000326B5 48                         		dc.b $48 ; H
000326B6 00                         unk_231480:	dc.b   0
000326B7 05                         		dc.b   5
000326B8 26                         		dc.b $26 ; &
000326B9 58                         		dc.b $58 ; X
000326BA 36                         		dc.b $36 ; 6
000326BB 5B                         		dc.b $5B ; [
000326BC 06                         		dc.b   6
000326BD 5F                         		dc.b $5F ; _
000326BE 26                         		dc.b $26 ; &
000326BF 60                         		dc.b $60 ; `
000326C0 B6                         		dc.b $B6 ; ¶
000326C1 63                         		dc.b $63 ; c
000326C2 00                         unk_23148C:	dc.b   0
000326C3 04                         		dc.b   4
000326C4 56                         		dc.b $56 ; V
000326C5 6F                         		dc.b $6F ; o
000326C6 06                         		dc.b   6
000326C7 5F                         		dc.b $5F ; _
000326C8 26                         		dc.b $26 ; &
000326C9 75                         		dc.b $75 ; u
000326CA B6                         		dc.b $B6 ; ¶
000326CB 78                         		dc.b $78 ; x
000326CC 00                         unk_231496:	dc.b   0
000326CD 05                         		dc.b   5
000326CE 26                         		dc.b $26 ; &
000326CF 58                         		dc.b $58 ; X
000326D0 36                         		dc.b $36 ; 6
000326D1 5B                         		dc.b $5B ; [
000326D2 06                         		dc.b   6
000326D3 5F                         		dc.b $5F ; _
000326D4 B6                         		dc.b $B6 ; ¶
000326D5 84                         		dc.b $84 ; „
000326D6 16                         		dc.b $16
000326D7 90                         		dc.b $90 ; 
000326D8 00                         unk_2314A2:	dc.b   0
000326D9 04                         		dc.b   4
000326DA 56                         		dc.b $56 ; V
000326DB 6F                         		dc.b $6F ; o
000326DC 06                         		dc.b   6
000326DD 5F                         		dc.b $5F ; _
000326DE B6                         		dc.b $B6 ; ¶
000326DF 92                         		dc.b $92 ; ’
000326E0 16                         		dc.b $16
000326E1 9E                         		dc.b $9E ; ž
000326E2 00                         unk_2314AC:	dc.b   0
000326E3 03                         		dc.b   3
000326E4 56                         		dc.b $56 ; V
000326E5 A0                         		dc.b $A0 ;  
000326E6 06                         		dc.b   6
000326E7 A6                         		dc.b $A6 ; ¦
000326E8 86                         		dc.b $86 ; †
000326E9 A7                         		dc.b $A7 ; §
000326EA 00                         unk_2314B4:	dc.b   0
000326EB 04                         		dc.b   4
000326EC 56                         		dc.b $56 ; V
000326ED B0                         		dc.b $B0 ; °
000326EE 06                         		dc.b   6
000326EF B6                         		dc.b $B6 ; ¶
000326F0 56                         		dc.b $56 ; V
000326F1 B7                         		dc.b $B7 ; ·
000326F2 16                         		dc.b $16
000326F3 BD                         		dc.b $BD ; ½
000326F4 00                         unk_2314BE:	dc.b   0
000326F5 03                         		dc.b   3
000326F6 56                         		dc.b $56 ; V
000326F7 A0                         		dc.b $A0 ;  
000326F8 06                         		dc.b   6
000326F9 A6                         		dc.b $A6 ; ¦
000326FA B6                         		dc.b $B6 ; ¶
000326FB BF                         		dc.b $BF ; ¿
000326FC 00                         unk_2314C6:	dc.b   0
000326FD 04                         		dc.b   4
000326FE 56                         		dc.b $56 ; V
000326FF B0                         		dc.b $B0 ; °
00032700 06                         		dc.b   6
00032701 B6                         		dc.b $B6 ; ¶
00032702 06                         		dc.b   6
00032703 CB                         		dc.b $CB ; Ë
00032704 86                         		dc.b $86 ; †
00032705 CC                         		dc.b $CC ; Ì
00032706 00                         unk_2314D0:	dc.b   0
00032707 05                         		dc.b   5
00032708 26                         		dc.b $26 ; &
00032709 D5                         		dc.b $D5 ; Õ
0003270A 26                         		dc.b $26 ; &
0003270B D8                         		dc.b $D8 ; Ø
0003270C 06                         		dc.b   6
0003270D DB                         		dc.b $DB ; Û
0003270E 76                         		dc.b $76 ; v
0003270F DC                         		dc.b $DC ; Ü
00032710 16                         		dc.b $16
00032711 E4                         		dc.b $E4 ; ä
00032712 00                         unk_2314DC:	dc.b   0
00032713 05                         		dc.b   5
00032714 26                         		dc.b $26 ; &
00032715 E6                         		dc.b $E6 ; æ
00032716 26                         		dc.b $26 ; &
00032717 E9                         		dc.b $E9 ; é
00032718 06                         		dc.b   6
00032719 EC                         		dc.b $EC ; ì
0003271A 76                         		dc.b $76 ; v
0003271B ED                         		dc.b $ED ; í
0003271C 26                         		dc.b $26 ; &
0003271D F5                         		dc.b $F5 ; õ
0003271E 00                         unk_2314E8:	dc.b   0
0003271F 05                         		dc.b   5
00032720 26                         		dc.b $26 ; &
00032721 D5                         		dc.b $D5 ; Õ
00032722 26                         		dc.b $26 ; &
00032723 D8                         		dc.b $D8 ; Ø
00032724 06                         		dc.b   6
00032725 F8                         		dc.b $F8 ; ø
00032726 76                         		dc.b $76 ; v
00032727 F9                         		dc.b $F9 ; ù
00032728 17                         		dc.b $17
00032729 01                         		dc.b   1
0003272A 00                         unk_2314F4:	dc.b   0
0003272B 05                         		dc.b   5
0003272C 26                         		dc.b $26 ; &
0003272D E6                         		dc.b $E6 ; æ
0003272E 26                         		dc.b $26 ; &
0003272F E9                         		dc.b $E9 ; é
00032730 06                         		dc.b   6
00032731 EC                         		dc.b $EC ; ì
00032732 77                         		dc.b $77 ; w
00032733 03                         		dc.b   3
00032734 17                         		dc.b $17
00032735 0B                         		dc.b  $B
00032736 00                         unk_231500:	dc.b   0
00032737 05                         		dc.b   5
00032738 37                         		dc.b $37 ; 7
00032739 0D                         		dc.b  $D
0003273A 27                         		dc.b $27 ; '
0003273B 11                         		dc.b $11
0003273C 17                         		dc.b $17
0003273D 14                         		dc.b $14
0003273E 57                         		dc.b $57 ; W
0003273F 16                         		dc.b $16
00032740 17                         		dc.b $17
00032741 1C                         		dc.b $1C
00032742 00                         unk_23150C:	dc.b   0
00032743 05                         		dc.b   5
00032744 37                         		dc.b $37 ; 7
00032745 1E                         		dc.b $1E
00032746 17                         		dc.b $17
00032747 22                         		dc.b $22 ; "
00032748 17                         		dc.b $17
00032749 24                         		dc.b $24 ; $
0003274A 77                         		dc.b $77 ; w
0003274B 26                         		dc.b $26 ; &
0003274C 07                         		dc.b   7
0003274D 2E                         		dc.b $2E ; .
0003274E 00                         unk_231518:	dc.b   0
0003274F 05                         		dc.b   5
00032750 37                         		dc.b $37 ; 7
00032751 2F                         		dc.b $2F ; /
00032752 17                         		dc.b $17
00032753 33                         		dc.b $33 ; 3
00032754 27                         		dc.b $27 ; '
00032755 35                         		dc.b $35 ; 5
00032756 57                         		dc.b $57 ; W
00032757 38                         		dc.b $38 ; 8
00032758 07                         		dc.b   7
00032759 3E                         		dc.b $3E ; >
0003275A 00                         unk_231524:	dc.b   0
0003275B 05                         		dc.b   5
0003275C 37                         		dc.b $37 ; 7
0003275D 1E                         		dc.b $1E
0003275E 17                         		dc.b $17
0003275F 3F                         		dc.b $3F ; ?
00032760 17                         		dc.b $17
00032761 41                         		dc.b $41 ; A
00032762 77                         		dc.b $77 ; w
00032763 43                         		dc.b $43 ; C
00032764 07                         		dc.b   7
00032765 4B                         		dc.b $4B ; K
00032766 00                         unk_231530:	dc.b   0
00032767 02                         		dc.b   2
00032768 77                         		dc.b $77 ; w
00032769 4C                         		dc.b $4C ; L
0003276A B7                         		dc.b $B7 ; ·
0003276B 54                         		dc.b $54 ; T
0003276C 00                         unk_231536:	dc.b   0
0003276D 05                         		dc.b   5
0003276E 37                         		dc.b $37 ; 7
0003276F 60                         		dc.b $60 ; `
00032770 27                         		dc.b $27 ; '
00032771 64                         		dc.b $64 ; d
00032772 07                         		dc.b   7
00032773 67                         		dc.b $67 ; g
00032774 77                         		dc.b $77 ; w
00032775 68                         		dc.b $68 ; h
00032776 27                         		dc.b $27 ; '
00032777 70                         		dc.b $70 ; p
00032778 00                         unk_231542:	dc.b   0
00032779 04                         		dc.b   4
0003277A 77                         		dc.b $77 ; w
0003277B 4C                         		dc.b $4C ; L
0003277C 07                         		dc.b   7
0003277D 68                         		dc.b $68 ; h
0003277E 57                         		dc.b $57 ; W
0003277F 73                         		dc.b $73 ; s
00032780 17                         		dc.b $17
00032781 79                         		dc.b $79 ; y
00032782 00                         unk_23154C:	dc.b   0
00032783 04                         		dc.b   4
00032784 37                         		dc.b $37 ; 7
00032785 60                         		dc.b $60 ; `
00032786 27                         		dc.b $27 ; '
00032787 64                         		dc.b $64 ; d
00032788 27                         		dc.b $27 ; '
00032789 7B                         		dc.b $7B ; {
0003278A 87                         		dc.b $87 ; ‡
0003278B 7E                         		dc.b $7E ; ~
0003278C 00                         unk_231556:	dc.b   0
0003278D 02                         		dc.b   2
0003278E 57                         		dc.b $57 ; W
0003278F 87                         		dc.b $87 ; ‡
00032790 B7                         		dc.b $B7 ; ·
00032791 8D                         		dc.b $8D ; 
00032792 00                         unk_23155C:	dc.b   0
00032793 02                         		dc.b   2
00032794 57                         		dc.b $57 ; W
00032795 99                         		dc.b $99 ; ™
00032796 B7                         		dc.b $B7 ; ·
00032797 9F                         		dc.b $9F ; Ÿ
00032798 00                         unk_231562:	dc.b   0
00032799 04                         		dc.b   4
0003279A 57                         		dc.b $57 ; W
0003279B 87                         		dc.b $87 ; ‡
0003279C 57                         		dc.b $57 ; W
0003279D AB                         		dc.b $AB ; «
0003279E 07                         		dc.b   7
0003279F B1                         		dc.b $B1 ; ±
000327A0 17                         		dc.b $17
000327A1 B2                         		dc.b $B2 ; ²
000327A2 00                         unk_23156C:	dc.b   0
000327A3 04                         		dc.b   4
000327A4 57                         		dc.b $57 ; W
000327A5 99                         		dc.b $99 ; ™
000327A6 57                         		dc.b $57 ; W
000327A7 B4                         		dc.b $B4 ; ´
000327A8 07                         		dc.b   7
000327A9 BA                         		dc.b $BA ; º
000327AA 27                         		dc.b $27 ; '
000327AB BB                         		dc.b $BB ; »
000327AC 00                         unk_231576:	dc.b   0
000327AD 01                         		dc.b   1
000327AE F7                         		dc.b $F7 ; ÷
000327AF BE                         		dc.b $BE ; ¾
000327B0 00                         unk_23157A:	dc.b   0
000327B1 01                         		dc.b   1
000327B2 F7                         		dc.b $F7 ; ÷
000327B3 CE                         		dc.b $CE ; Î
000327B4 00                         unk_23157E:	dc.b   0
000327B5 01                         		dc.b   1
000327B6 F7                         		dc.b $F7 ; ÷
000327B7 DE                         		dc.b $DE ; Þ
000327B8 00                         unk_231582:	dc.b   0
000327B9 01                         		dc.b   1
000327BA F7                         		dc.b $F7 ; ÷
000327BB EE                         		dc.b $EE ; î
000327BC 00                         unk_231586:	dc.b   0
000327BD 01                         		dc.b   1
000327BE F7                         		dc.b $F7 ; ÷
000327BF FE                         		dc.b $FE ; þ
000327C0 00                         unk_23158A:	dc.b   0
000327C1 01                         		dc.b   1
000327C2 F8                         		dc.b $F8 ; ø
000327C3 0E                         		dc.b  $E
000327C4 00                         		dc.b   0
000327C5 02                         		dc.b   2
000327C6 B8                         		dc.b $B8 ; ¸
000327C7 1E                         		dc.b $1E
000327C8 58                         		dc.b $58 ; X
000327C9 2A                         		dc.b $2A ; *
000327CA 00                         unk_231594:	dc.b   0
000327CB 03                         		dc.b   3
000327CC B8                         		dc.b $B8 ; ¸
000327CD 30                         		dc.b $30 ; 0
000327CE 58                         		dc.b $58 ; X
000327CF 3C                         		dc.b $3C ; <
000327D0 08                         		dc.b   8
000327D1 42                         		dc.b $42 ; B
000327D2 00                         unk_23159C:	dc.b   0
000327D3 04                         		dc.b   4
000327D4 58                         		dc.b $58 ; X
000327D5 43                         		dc.b $43 ; C
000327D6 18                         		dc.b $18
000327D7 49                         		dc.b $49 ; I
000327D8 88                         		dc.b $88 ; ˆ
000327D9 4B                         		dc.b $4B ; K
000327DA 18                         		dc.b $18
000327DB 54                         		dc.b $54 ; T
000327DC 00                         unk_2315A6:	dc.b   0
000327DD 03                         		dc.b   3
000327DE B8                         		dc.b $B8 ; ¸
000327DF 30                         		dc.b $30 ; 0
000327E0 58                         		dc.b $58 ; X
000327E1 3C                         		dc.b $3C ; <
000327E2 08                         		dc.b   8
000327E3 42                         		dc.b $42 ; B
000327E4 00                         unk_2315AE:	dc.b   0
000327E5 04                         		dc.b   4
000327E6 58                         		dc.b $58 ; X
000327E7 56                         		dc.b $56 ; V
000327E8 18                         		dc.b $18
000327E9 5C                         		dc.b $5C ; \
000327EA 88                         		dc.b $88 ; ˆ
000327EB 5E                         		dc.b $5E ; ^
000327EC 18                         		dc.b $18
000327ED 5C                         		dc.b $5C ; \
000327EE 00                         unk_2315B8:	dc.b   0
000327EF 02                         		dc.b   2
000327F0 F8                         		dc.b $F8 ; ø
000327F1 67                         		dc.b $67 ; g
000327F2 38                         		dc.b $38 ; 8
000327F3 77                         		dc.b $77 ; w
000327F4 00                         unk_2315BE:	dc.b   0
000327F5 02                         		dc.b   2
000327F6 F8                         		dc.b $F8 ; ø
000327F7 67                         		dc.b $67 ; g
000327F8 38                         		dc.b $38 ; 8
000327F9 77                         		dc.b $77 ; w
000327FA                            		even
000327FA                            		even
000327FA                            	even
000327FA                            ArtNem_Points:
000327FA                            	incbin	"level/objects/points/art.bin"
0003285E                            	even
0003285E                            ArtNem_SeedPods:
0003285E                            	incbin	"level/objects/flowercapsule/art.bin"
00032F06                            	even
00032F06                            ArtNem_BigRing:
00032F06                            	incbin	"level/objects/bigring/art.bin"
00033310                            	even
00033310                            ArtNem_GoalPost:
00033310                            	incbin	"level/objects/endpost/artgoal.bin"
000334D0                            	even
000334D0                            ArtNem_Signpost:
000334D0                            	incbin	"level/objects/endpost/artsign.bin"
00033AAC                            	even
00033AAC                            ArtNem_Results:
00033AAC                            	incbin	"level/objects/endresults/art.bin"
00033FF6                            	even
00033FF6                            ArtUnc_TimeOver:
00033FF6                            	incbin	"level/objects/gameover/arttimeover.bin"
000343B6                            	even
000343B6                            ArtUnc_GameOver:
000343B6                            	incbin	"level/objects/gameover/artgameover.bin"
000347B6                            	even
000347B6                            ArtNem_TitleCard:
000347B6                            	incbin	"level/objects/titlecard/artbase.bin"
00034B62                            	even
00034B62                            ArtUnc_Shield:
00034B62                            	incbin	"level/objects/powerup/artshield.bin"
00034FE2                            	even
00034FE2                            ArtUnc_InvStars:
00034FE2                            	incbin	"level/objects/powerup/artinvinc.bin"
00035462                            	even
00035462                            ArtUnc_TimeStars:
00035462                            	incbin	"level/objects/powerup/artwarp.bin"
00035842                            	even
00035842                            Art_DiagonalSpring:
00035842                            ArtNem_DiagonalSpring:
00035842                            	incbin	"level/objects/spring/artdiag.bin"
00035B4E                            	even
00035B4E                            ArtNem_Springs:
00035B4E                            	incbin	"level/objects/spring/artnormal.bin"
00035D70                            	even
00035D70                            ArtNem_MonitorTimePosts:
00035D70                            	incbin	"level/objects/monitor/art.bin"
00036374                            	even
00036374                            ArtNem_Explosions:
00036374                            	incbin	"level/objects/explosion/art.bin"
0003685C                            	even
0003685C                            ArtNem_Rings:
0003685C                            	incbin	"level/objects/ring/art.bin"
00036950                            	even
00036950                            ArtUnc_LifeIcon:
00036950                            	incbin	"level/objects/hud/artlifeicon.bin"
00036AD0                            	even
00036AD0                            ArtUnc_HUD:
00036AD0                            	incbin	"level/objects/hud/artnumbers.bin"
00036ED0                            	even
00036ED0                            ArtNem_HUD:
00036ED0                            	incbin	"level/objects/hud/artbase.bin"
00036FFC                            	even
00036FFC                            ArtNem_ContinuePost:
00036FFC                            	incbin	"level/objects/checkpoint/art.bin"
000370D0                            	even
000370D0                            ArtNem_Unused1:
000370D0                            	incbin	"level/objects/logbg/artunused.bin"
000370F6                            	even
000370F6                            Art_LogShadow:
000370F6                            ArtNem_HollowLogBG:
000370F6                            	incbin	"level/objects/logbg/art.bin"
0003710E                            	even
0003710E                            Ani_Flower:
0003710E                            	include	"level/objects/flower/anim.asm"
0003710E                            .Anim:
0003710E 0000                       	dc.w byte_235EE0-.Anim
00037110 0000                       	dc.w byte_235EE4-.Anim
00037112 0000                       	dc.w byte_235EEA-.Anim
00037114 0000                       	dc.w byte_235EF0-.Anim
00037116 0300 01FF                  byte_235EE0:	dc.b 3,	0, 1, $FF
0003711A 0302 0302 03FC             byte_235EE4:	dc.b 3,	2, 3, 2, 3, $FC
00037120 0105 0504 06FC             byte_235EEA:	dc.b 1,	5, 5, 4, 6, $FC
00037126 1306 07FF                  byte_235EF0:	dc.b $13, 6, 7,	$FF
00037126 1306 07FF                  byte_235EF0:	dc.b $13, 6, 7,	$FF
0003712A                            	even
0003712A                            MapSpr_Flower:
0003712A                            	include	"level/objects/flower/map.asm"
0003712A                            .Map:
0003712A 0000                       	dc.w unk_235F04-.Map
0003712C 0000                       	dc.w unk_235F0A-.Map
0003712E 0000                       	dc.w unk_235F10-.Map
00037130 0000                       	dc.w unk_235F16-.Map
00037132 0000                       	dc.w unk_235F1C-.Map
00037134 0000                       	dc.w unk_235F28-.Map
00037136 0000                       	dc.w unk_235F2E-.Map
00037138 0000                       	dc.w unk_235F3E-.Map
0003713A 01                         unk_235F04:	dc.b   1
0003713B F0                         		dc.b $F0 ; ð
0003713C 01                         		dc.b   1
0003713D 00                         		dc.b   0
0003713E 00                         		dc.b   0
0003713F FC                         		dc.b $FC ; ü
00037140 01                         unk_235F0A:	dc.b   1
00037141 F0                         		dc.b $F0 ; ð
00037142 01                         		dc.b   1
00037143 08                         		dc.b   8
00037144 00                         		dc.b   0
00037145 FC                         		dc.b $FC ; ü
00037146 01                         unk_235F10:	dc.b   1
00037147 F0                         		dc.b $F0 ; ð
00037148 05                         		dc.b   5
00037149 00                         		dc.b   0
0003714A 02                         		dc.b   2
0003714B F8                         		dc.b $F8 ; ø
0003714C 01                         unk_235F16:	dc.b   1
0003714D F0                         		dc.b $F0 ; ð
0003714E 05                         		dc.b   5
0003714F 00                         		dc.b   0
00037150 06                         		dc.b   6
00037151 F8                         		dc.b $F8 ; ø
00037152 02                         unk_235F1C:	dc.b   2
00037153 E8                         		dc.b $E8 ; è
00037154 09                         		dc.b   9
00037155 00                         		dc.b   0
00037156 1C                         		dc.b $1C
00037157 F4                         		dc.b $F4 ; ô
00037158 F8                         		dc.b $F8 ; ø
00037159 00                         		dc.b   0
0003715A 00                         		dc.b   0
0003715B 22                         		dc.b $22 ; "
0003715C FC                         		dc.b $FC ; ü
0003715D 00                         		dc.b   0
0003715E 01                         unk_235F28:	dc.b   1
0003715F F0                         		dc.b $F0 ; ð
00037160 05                         		dc.b   5
00037161 00                         		dc.b   0
00037162 23                         		dc.b $23 ; #
00037163 F8                         		dc.b $F8 ; ø
00037164 03                         unk_235F2E:	dc.b   3
00037165 D0                         		dc.b $D0 ; Ð
00037166 0A                         		dc.b  $A
00037167 00                         		dc.b   0
00037168 0A                         		dc.b  $A
00037169 F4                         		dc.b $F4 ; ô
0003716A E8                         		dc.b $E8 ; è
0003716B 09                         		dc.b   9
0003716C 00                         		dc.b   0
0003716D 1C                         		dc.b $1C
0003716E F4                         		dc.b $F4 ; ô
0003716F F8                         		dc.b $F8 ; ø
00037170 00                         		dc.b   0
00037171 00                         		dc.b   0
00037172 22                         		dc.b $22 ; "
00037173 FC                         		dc.b $FC ; ü
00037174 03                         unk_235F3E:	dc.b   3
00037175 D0                         		dc.b $D0 ; Ð
00037176 0A                         		dc.b  $A
00037177 00                         		dc.b   0
00037178 13                         		dc.b $13
00037179 F4                         		dc.b $F4 ; ô
0003717A E8                         		dc.b $E8 ; è
0003717B 09                         		dc.b   9
0003717C 00                         		dc.b   0
0003717D 1C                         		dc.b $1C
0003717E F4                         		dc.b $F4 ; ô
0003717F F8                         		dc.b $F8 ; ø
00037180 00                         		dc.b   0
00037181 00                         		dc.b   0
00037182 22                         		dc.b $22 ; "
00037183 FC                         		dc.b $FC ; ü
00037183 FC                         		dc.b $FC ; ü
00037184                            	even
00037184                            ArtNem_Flower:
00037184                            	incbin	"level/objects/flower/art.bin"
0003740A                            	even
0003740A                            ArtNem_TitleCardText:
0003740A                            	incbin	"level/objects/titlecard/arttext.bin"
00037534                            	even
00037534                            ArtNem_CollapsePlatform:
00037534                            	incbin	"level/objects/platform/art.bin"
000376F8                            	even
000376F8                            Art_Boulder:
000376F8                            ArtNem_GreyRock:
000376F8                            	incbin	"level/objects/grayrock/art.bin"
00037806                            	even
00037806                            Art_FloatBlock:
00037806                            ArtNem_HiddenPlatforms:
00037806                            	incbin	"level/objects/smallptfm/art.bin"
000378EC                            	even
000378EC                            ArtNem_Wheel:
000378EC                            	incbin	"level/objects/spring/artwheel.bin"
000379A2                            	even
000379A2                            Art_SpinningDisc:
000379A2                            ArtNem_RotPlatform:
000379A2                            	incbin	"level/objects/rotatingptfm/art.bin"
00037A48                            	even
00037A48                            ArtNem_WaterSplash:
00037A48                            	incbin	"level/objects/splash/artwaterfall.bin"
00037B90                            	even
00037B90                            ArtNem_ExtraWaterSplashes1:
00037B90                            	incbin	"level/objects/waterfall/art.bin"
00037D34                            	even
00037D34                            Art_TunnelDoorSplash:
00037D34                            ArtNem_SpinTubeDoors:
00037D34                            	incbin	"level/objects/flapdoor/art.bin"
00037DCE                            	even
00037DCE                            ArtNem_ExtraWaterSplashes2:
00037DCE                            	incbin	"level/objects/splash/artnormal.bin"
0003807C                            	even
0003807C                            Art_Anton:
0003807C                            ArtNem_Anton:
0003807C                            	incbin	"level/objects/anton/art.bin"
00038260                            	even
00038260                            Art_Mosqui:
00038260                            ArtNem_Mosqui:
00038260                            	incbin	"level/objects/mosqui/art.bin"
000385AE                            	even
000385AE                            Art_PataBata:
000385AE                            ArtNem_PataBata:
000385AE                            	incbin	"level/objects/patabata/art.bin"
00038878                            	even
00038878                            Art_TagaTaga:
00038878                            ArtNem_TagaTaga:
00038878                            	incbin	"level/objects/tagataga/art.bin"
00038B86                            	even
00038B86                            Art_Tamabboh:
00038B86                            ArtNem_MotorizedBeetle:
00038B86                            	incbin	"level/objects/tamabboh/art.bin"
00038FFC                            	even
00038FFC                            Art_Springboard:
00038FFC                            ArtNem_SprintPole:
00038FFC                            	incbin	"level/objects/springboard/art.bin"
00039134                            	even
00039134                            ArtNem_Button:
00039134                            	incbin	"level/unused/art/button.bin"
0003924E                            	even
0003924E                            ArtNem_Spikes:
0003924E                            	incbin	"level/objects/spikes/art.bin"
000392A4                            	even
000392A4                            Art_Swing:
000392A4                            ArtNem_SwingingPlatform:
000392A4                            	incbin	"level/unused/art/swingptfm.bin"
000393F6                            	even
000393F6                            Art_Animals:
000393F6                            ArtNem_PPZAnimals:
000393F6                            	incbin	"level/objects/animal/art.bin"
000395B4                            	even
000395B4                            ArtNem_RotPlatformDrill:
000395B4                            	incbin	"level/unused/art/rotptfmdrill.bin"
000396A2                            	even
000396A2                            Art_RobotGenWithered:
000396A2                            ArtNem_AgedTeleporter:
000396A2                            	incbin	"level/objects/robotgenerator/art.bin"
000397EE                            	even
000397EE                            Art_FlowerCapsule:
000397EE                            Art_BossMachine:                        ; DATA XREF: ROM:0020E3B8↑o
000397EE                                incbin	"artnem/Art_BossMachine.bin"
0003A2F4                                even
0003A2F4                            Art_Robotnik:                           ; DATA XREF: ROM:0020E3BE↑o
0003A2F4                                incbin	"artnem/Art_Robotnik.bin"
0003AA62                                even	
0003AA62                            ; Main Game Collision Files
0003AA62                            ColAngleMap:
0003AA62                            	incbin	"level/level/mainCol/colangles.bin"
0003AB62                            	even
0003AB62                            ColHeightMap:
0003AB62                            	incbin	"level/level/mainCol/colheights.bin"
0003BB62                            	even
0003BB62                            ColWidthMap:
0003BB62                            	incbin	"level/level/mainCol/colwidths.bin"
0003CB62                            	even
0003CB62                            ; Palmtree Panic Act 1 Collision Files
0003CB62                            LevelCollision:
0003CB62                            	incbin	"level/level/PPZ1/Collision/colblocks.bin"
0003CEE6                            	even
0003CEE6                            PPZ1_Collision_P:
0003CEE6                            	incbin	"level/level/PPZ1/Collision/R11B.bin"
0003D206                            	even
0003D206                            PPZ1_Collision_GF:
0003D206                            	incbin	"level/level/PPZ1/Collision/R11C.bin"
0003D526                            	even
0003D526                            PPZ1_Collision_BF:
0003D526                            	incbin	"level/level/PPZ1/Collision/R11D.bin"
0003D846                            	even
0003D846                            ; Palmtree Panic Act 2 Collision Files
0003D846                            PPZ2_Collision:
0003D846                            	incbin	"level/level/PPZ2/Collision/R12A.bin"
0003DBCA                            	even
0003DBCA                            PPZ2_Collision_P:
0003DBCA                            	incbin	"level/level/PPZ2/Collision/R12B.bin"
0003DF4E                            	even
0003DF4E                            PPZ2_Collision_GF:
0003DF4E                            	incbin	"level/level/PPZ2/Collision/R12C.bin"
0003E2D2                            	even
0003E2D2                            PPZ2_Collision_BF:
0003E2D2                            	incbin	"level/level/PPZ2/Collision/R12D.bin"
0003E656                            	even
0003E656                            ; Palmtree Panic Act 3 Collision Files
0003E656                            PPZ3_Collision_GF:
0003E656                            	incbin	"level/level/PPZ3/Collision/R13C.bin"
0003E976                            	even
0003E976                            PPZ3_Collision_BF:
0003E976                            	incbin	"level/level/PPZ3/Collision/R13D.bin"
0003EC96                            	even
0003EC96                            LevelLayoutIndex:
0003EC96 0000                       	dc.w LevelLayout_FG-LevelLayoutIndex
0003EC98 0000                       	dc.w LevelLayout_BG-LevelLayoutIndex
0003EC9A 0000                       	dc.w byte_68D70-LevelLayoutIndex
0003EC9C                            
0003EC9C 0000                       	dc.w LevelR12A_FG-LevelLayoutIndex
0003EC9E 0000                       	dc.w LevelR12A_BG-LevelLayoutIndex
0003ECA0 0000                       	dc.w byte_68D70-LevelLayoutIndex
0003ECA2                            
0003ECA2 0000                       	dc.w LevelR13C_FG-LevelLayoutIndex
0003ECA4 0000                       	dc.w LevelR13C_BG-LevelLayoutIndex
0003ECA6 0000                       	dc.w byte_68D70-LevelLayoutIndex
0003ECA8                            
0003ECA8 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECAA 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECAC 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECAE 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECB0 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECB2 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECB4 0000                       	dc.w LevelLayout_FG-LevelLayoutIndex
0003ECB6 0000                       	dc.w LevelLayout_BG-LevelLayoutIndex
0003ECB8 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECBA 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECBC 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECBE 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECC0 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECC2 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECC4 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECC6 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECC8 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECCA 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECCC 0000                       	dc.w LevelLayout_FG-LevelLayoutIndex
0003ECCE 0000                       	dc.w LevelLayout_BG-LevelLayoutIndex
0003ECD0 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECD2 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECD4 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECD6 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECD8 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECDA 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECDC 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECDE 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECE0 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECE2 0000                       	dc.w LevelLayout_Null-LevelLayoutIndex
0003ECE4                            LevelLayoutIndex_Past:
0003ECE4 0000                       	dc.w LevelR11B_FG-LevelLayoutIndex_Past
0003ECE6 0000                       	dc.w LevelR11B_BG-LevelLayoutIndex_Past
0003ECE8 0000                       	dc.w LevelR12B_FG-LevelLayoutIndex_Past
0003ECEA 0000                       	dc.w LevelR12B_BG-LevelLayoutIndex_Past	
0003ECEC                            ; Palmtree Panic Act 1 Specific Timezone Layouts
0003ECEC                            LevelLayout_FG:
0003ECEC                            	incbin	"level/level/PPZ1/FG/levelfg.bin"
0003EE3E                            	even
0003EE3E                            LevelLayout_BG:
0003EE3E                            	incbin	"level/level/PPZ1/BG/levelbg.bin"
0003EE70                            	even	
0003EE70                            LevelR11B_FG:
0003EE70                            	incbin	"level/level/PPZ1/FG/R11B_FG.bin"
0003EF1A                            	even
0003EF1A                            LevelR11B_BG:
0003EF1A                            	incbin	"level/level/PPZ1/BG/R11B_BG.bin"
0003EF30                            	even		
0003EF30                            LevelR11C_FG:
0003EF30                            	incbin	"level/level/PPZ1/FG/R11C_FG.bin"
0003EFDA                            	even
0003EFDA                            LevelR11C_BG:
0003EFDA                            	incbin	"level/level/PPZ1/BG/R11C_BG.bin"
0003EFF8                            	even	
0003EFF8                            LevelR11D_FG:
0003EFF8                            	incbin	"level/level/PPZ1/FG/R11D_FG.bin"
0003F0A2                            	even
0003F0A2                            LevelR11D_BG:
0003F0A2                            	incbin	"level/level/PPZ1/BG/R11D_BG.bin"
0003F0C0                            	even	
0003F0C0                            
0003F0C0                            ; Palmtree Panic Act 2 Timezone specific layouts
0003F0C0                            LevelR12A_FG:
0003F0C0                            	incbin	"level/level/PPZ2/FG/R12A_FG.bin"
0003F16A                            	even
0003F16A                            LevelR12A_BG:
0003F16A                            	incbin	"level/level/PPZ2/BG/R12A_BG.bin"
0003F180                            	even
0003F180                            LevelR12B_FG:
0003F180                            	incbin	"level/level/PPZ2/FG/R12B_FG.bin"
0003F22A                            	even
0003F22A                            LevelR12B_BG:
0003F22A                            	incbin	"level/level/PPZ2/BG/R12B_BG.bin"
0003F240                            	even
0003F240                            LevelR12C_FG:
0003F240                            	incbin	"level/level/PPZ2/FG/R12C_FG.bin"
0003F2EA                            	even
0003F2EA                            LevelR12C_BG:
0003F2EA                            	incbin	"level/level/PPZ2/BG/R12C_BG.bin"
0003F300                            	even
0003F300                            LevelR12D_FG:
0003F300                            	incbin	"level/level/PPZ2/FG/R12D_FG.bin"
0003F3AA                            	even
0003F3AA                            LevelR12D_BG:
0003F3AA                            	incbin	"level/level/PPZ2/BG/R12D_BG.bin"
0003F3C0                            	even
0003F3C0                            ; Palmtree Panic Act 3 Timezone specific layouts
0003F3C0                            LevelR13C_FG:
0003F3C0                            	incbin	"level/level/PPZ3/FG/R13C_FG.bin"
0003F3FE                            	even
0003F3FE                            LevelR13C_BG:
0003F3FE                            	incbin	"level/level/PPZ3/BG/R13C_BG.bin"
0003F414                            	even
0003F414                            LevelR13D_FG:
0003F414                            	incbin	"level/level/PPZ3/FG/R13D_FG.bin"
0003F452                            	even
0003F452                            LevelR13D_BG:
0003F452                            	incbin	"level/level/PPZ3/BG/R13D_BG.bin"
0003F468                            	even
0003F468 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0003F46C                                even	
0003F46C                            LevelLayout_Null:
0003F46C                            
0003F46C                            ArtNem_SonicHole:
0003F46C                            	incbin	"level/objects/sonichole/art.bin"
0003F4DE                            	even
0003F4DE                            ArtNem_StarBush:
0003F4DE                            	incbin	"level/objects/3dplant/art.bin"
0003F666                            	even
0003F666                            ArtNem_LargeFan:
0003F666                            	incbin	"level/objects/3dramp/art.bin"
0003F90C                            	even
0003F90C                            Ani_Powerup:
0003F90C                            	include	"level/objects/powerup/anim.asm"
0003F90C                            .Anim:
0003F90C 0000                       		dc.w byte_23ED86-.Anim
0003F90E 0000                       		dc.w byte_23ED8E-.Anim
0003F910 0000                       		dc.w byte_23ED94-.Anim
0003F912 0000                       		dc.w byte_23EDAE-.Anim
0003F914 0000                       		dc.w byte_23EDC8-.Anim
0003F916 0000                       		dc.w byte_23EDE2-.Anim
0003F918 0000                       		dc.w byte_23EDEE-.Anim
0003F91A 0000                       		dc.w byte_23EE28-.Anim
0003F91C 0000                       		dc.w byte_23EE62-.Anim
0003F91E 0101 0002 0003 00FF        byte_23ED86:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0003F926 0504 0506 07FF             byte_23ED8E:	dc.b 5,	4, 5, 6, 7, $FF
0003F92C 0004 0400 0404 0005 0500+  byte_23ED94:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6,	6, 0, 7, 7, 0, 7, 7, 0,	$FF
0003F946 0004 0400 0400 0005 0500+  byte_23EDAE:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6,	0, 0, 7, 7, 0, 7, 0, 0,	$FF
0003F960 0004 0000 0400 0005 0000+  byte_23EDC8:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6,	0, 0, 7, 0, 0, 7, 0, 0,	$FF
0003F97A 0008 090A 0B0C 0B0A 0908+  byte_23EDE2:	dc.b 0,	8, 9, $A, $B, $C, $B, $A, 9, 8,	0, $FF
0003F986 0008 0800 0808 0009 0900+  byte_23EDEE:	dc.b 0,	8, 8, 0, 8, 8, 0, 9, 9,	0, 9, 9, 0, $A,	$A, 0, $A, $A, 0, $B, $B, 0, $B, $B, 0,	$C, $C,	0, $C, $C, 0, $B
0003F9A6 0B00 0B0B 000A 0A00 0A0A+  		dc.b $B, 0, $B,	$B, 0, $A, $A, 0, $A, $A, 0, 9,	9, 0, 9, 9, 0, 8, 8, 0,	8, 8, 0, 0, $FF, 0
0003F9C0 0008 0800 0800 0009 0900+  byte_23EE28:	dc.b 0,	8, 8, 0, 8, 0, 0, 9, 9,	0, 9, 0, 0, $A,	$A, 0, $A, 0, 0, $B, $B, 0, $B,	0, 0, $C, $C, 0, $C, 0,	0, $B
0003F9E0 0B00 0B00 000A 0A00 0A00+  		dc.b $B, 0, $B,	0, 0, $A, $A, 0, $A, 0,	0, 9, 9, 0, 9, 0, 0, 8,	8, 0, 8, 0, 0, 0, $FF, 0
0003F9FA 0008 0000 0800 0009 0000+  byte_23EE62:	dc.b 0,	8, 0, 0, 8, 0, 0, 9, 0,	0, 9, 0, 0, $A,	0, 0, $A, 0, 0,	$B, 0, 0, $B, 0, 0, $C,	0, 0, $C, 0, 0,	$B
0003FA1A 0000 0B00 000A 0000 0A00+  		dc.b 0,	0, $B, 0, 0, $A, 0, 0, $A, 0, 0, 9, 0, 0, 9, 0,	0, 8, 0, 0, 8, 0, 0, 0,	$FF, 0
0003FA1A 0000 0B00 000A 0000 0A00+  		dc.b 0,	0, $B, 0, 0, $A, 0, 0, $A, 0, 0, 9, 0, 0, 9, 0,	0, 8, 0, 0, 8, 0, 0, 0,	$FF, 0
0003FA34                            	even
0003FA34                            MapSpr_Powerup:
0003FA34                            	include	"level/objects/powerup/map.asm"
0003FA34                            .Map:
0003FA34 0000                       	dc.w unk_23EEC1-.Map
0003FA36 0000                       	dc.w byte_23EEB6-.Map
0003FA38 0000                       	dc.w unk_23EECB-.Map
0003FA3A 0000                       	dc.w unk_23EEE0-.Map
0003FA3C 0000                       	dc.w unk_23EEF5-.Map
0003FA3E 0000                       	dc.w unk_23EF0A-.Map
0003FA40 0000                       	dc.w unk_23EF1F-.Map
0003FA42 0000                       	dc.w unk_23EF34-.Map
0003FA44 0000                       	dc.w unk_23EF4A-.Map
0003FA46 0000                       	dc.w unk_23EF60-.Map
0003FA48 0000                       	dc.w unk_23EF76-.Map
0003FA4A 0000                       	dc.w unk_23EF8C-.Map
0003FA4C 0000                       	dc.w unk_23EFA2-.Map
0003FA4E 04                         byte_23EEB6:	dc.b 4
0003FA4F E8                         		dc.b $E8 ; è
0003FA50 0A                         		dc.b  $A
0003FA51 00                         		dc.b   0
0003FA52 00                         		dc.b   0
0003FA53 E8                         		dc.b $E8 ; è
0003FA54 E8                         		dc.b $E8 ; è
0003FA55 0A                         		dc.b  $A
0003FA56 00                         		dc.b   0
0003FA57 09                         		dc.b   9
0003FA58 00                         		dc.b   0
0003FA59 00                         unk_23EEC1:	dc.b   0
0003FA5A 0A                         		dc.b  $A
0003FA5B 10                         		dc.b $10
0003FA5C 00                         		dc.b   0
0003FA5D E8                         		dc.b $E8 ; è
0003FA5E 00                         		dc.b   0
0003FA5F 0A                         		dc.b  $A
0003FA60 10                         		dc.b $10
0003FA61 09                         		dc.b   9
0003FA62 00                         		dc.b   0
0003FA63 04                         unk_23EECB:	dc.b   4
0003FA64 E8                         		dc.b $E8 ; è
0003FA65 0A                         		dc.b  $A
0003FA66 00                         		dc.b   0
0003FA67 12                         		dc.b $12
0003FA68 E8                         		dc.b $E8 ; è
0003FA69 E8                         		dc.b $E8 ; è
0003FA6A 0A                         		dc.b  $A
0003FA6B 00                         		dc.b   0
0003FA6C 1B                         		dc.b $1B
0003FA6D 00                         		dc.b   0
0003FA6E 00                         		dc.b   0
0003FA6F 0A                         		dc.b  $A
0003FA70 10                         		dc.b $10
0003FA71 12                         		dc.b $12
0003FA72 E8                         		dc.b $E8 ; è
0003FA73 00                         		dc.b   0
0003FA74 0A                         		dc.b  $A
0003FA75 10                         		dc.b $10
0003FA76 1B                         		dc.b $1B
0003FA77 00                         		dc.b   0
0003FA78 04                         unk_23EEE0:	dc.b   4
0003FA79 E8                         		dc.b $E8 ; è
0003FA7A 0A                         		dc.b  $A
0003FA7B 08                         		dc.b   8
0003FA7C 09                         		dc.b   9
0003FA7D E8                         		dc.b $E8 ; è
0003FA7E E8                         		dc.b $E8 ; è
0003FA7F 0A                         		dc.b  $A
0003FA80 08                         		dc.b   8
0003FA81 00                         		dc.b   0
0003FA82 00                         		dc.b   0
0003FA83 00                         		dc.b   0
0003FA84 0A                         		dc.b  $A
0003FA85 18                         		dc.b $18
0003FA86 09                         		dc.b   9
0003FA87 E8                         		dc.b $E8 ; è
0003FA88 00                         		dc.b   0
0003FA89 0A                         		dc.b  $A
0003FA8A 18                         		dc.b $18
0003FA8B 00                         		dc.b   0
0003FA8C 00                         		dc.b   0
0003FA8D 04                         unk_23EEF5:	dc.b   4
0003FA8E E8                         		dc.b $E8 ; è
0003FA8F 0A                         		dc.b  $A
0003FA90 00                         		dc.b   0
0003FA91 00                         		dc.b   0
0003FA92 E8                         		dc.b $E8 ; è
0003FA93 E8                         		dc.b $E8 ; è
0003FA94 0A                         		dc.b  $A
0003FA95 00                         		dc.b   0
0003FA96 09                         		dc.b   9
0003FA97 00                         		dc.b   0
0003FA98 00                         		dc.b   0
0003FA99 0A                         		dc.b  $A
0003FA9A 18                         		dc.b $18
0003FA9B 09                         		dc.b   9
0003FA9C E8                         		dc.b $E8 ; è
0003FA9D 00                         		dc.b   0
0003FA9E 0A                         		dc.b  $A
0003FA9F 18                         		dc.b $18
0003FAA0 00                         		dc.b   0
0003FAA1 00                         		dc.b   0
0003FAA2 04                         unk_23EF0A:	dc.b   4
0003FAA3 E8                         		dc.b $E8 ; è
0003FAA4 0A                         		dc.b  $A
0003FAA5 08                         		dc.b   8
0003FAA6 09                         		dc.b   9
0003FAA7 E8                         		dc.b $E8 ; è
0003FAA8 E8                         		dc.b $E8 ; è
0003FAA9 0A                         		dc.b  $A
0003FAAA 08                         		dc.b   8
0003FAAB 00                         		dc.b   0
0003FAAC 00                         		dc.b   0
0003FAAD 00                         		dc.b   0
0003FAAE 0A                         		dc.b  $A
0003FAAF 10                         		dc.b $10
0003FAB0 00                         		dc.b   0
0003FAB1 E8                         		dc.b $E8 ; è
0003FAB2 00                         		dc.b   0
0003FAB3 0A                         		dc.b  $A
0003FAB4 10                         		dc.b $10
0003FAB5 09                         		dc.b   9
0003FAB6 00                         		dc.b   0
0003FAB7 04                         unk_23EF1F:	dc.b   4
0003FAB8 E8                         		dc.b $E8 ; è
0003FAB9 0A                         		dc.b  $A
0003FABA 00                         		dc.b   0
0003FABB 12                         		dc.b $12
0003FABC E8                         		dc.b $E8 ; è
0003FABD E8                         		dc.b $E8 ; è
0003FABE 0A                         		dc.b  $A
0003FABF 00                         		dc.b   0
0003FAC0 1B                         		dc.b $1B
0003FAC1 00                         		dc.b   0
0003FAC2 00                         		dc.b   0
0003FAC3 0A                         		dc.b  $A
0003FAC4 18                         		dc.b $18
0003FAC5 1B                         		dc.b $1B
0003FAC6 E8                         		dc.b $E8 ; è
0003FAC7 00                         		dc.b   0
0003FAC8 0A                         		dc.b  $A
0003FAC9 18                         		dc.b $18
0003FACA 12                         		dc.b $12
0003FACB 00                         		dc.b   0
0003FACC 04                         unk_23EF34:	dc.b   4
0003FACD E8                         		dc.b $E8 ; è
0003FACE 0A                         		dc.b  $A
0003FACF 08                         		dc.b   8
0003FAD0 1B                         		dc.b $1B
0003FAD1 E8                         		dc.b $E8 ; è
0003FAD2 E8                         		dc.b $E8 ; è
0003FAD3 0A                         		dc.b  $A
0003FAD4 08                         		dc.b   8
0003FAD5 12                         		dc.b $12
0003FAD6 00                         		dc.b   0
0003FAD7 00                         		dc.b   0
0003FAD8 0A                         		dc.b  $A
0003FAD9 10                         		dc.b $10
0003FADA 12                         		dc.b $12
0003FADB E8                         		dc.b $E8 ; è
0003FADC 00                         		dc.b   0
0003FADD 0A                         		dc.b  $A
0003FADE 10                         		dc.b $10
0003FADF 1B                         		dc.b $1B
0003FAE0 00                         		dc.b   0
0003FAE1 00                         		dc.b   0
0003FAE2 04                         unk_23EF4A:	dc.b   4
0003FAE3 F0                         		dc.b $F0 ; ð
0003FAE4 05                         		dc.b   5
0003FAE5 00                         		dc.b   0
0003FAE6 00                         		dc.b   0
0003FAE7 F0                         		dc.b $F0 ; ð
0003FAE8 F0                         		dc.b $F0 ; ð
0003FAE9 05                         		dc.b   5
0003FAEA 08                         		dc.b   8
0003FAEB 00                         		dc.b   0
0003FAEC 00                         		dc.b   0
0003FAED 00                         		dc.b   0
0003FAEE 05                         		dc.b   5
0003FAEF 10                         		dc.b $10
0003FAF0 00                         		dc.b   0
0003FAF1 F0                         		dc.b $F0 ; ð
0003FAF2 00                         		dc.b   0
0003FAF3 05                         		dc.b   5
0003FAF4 18                         		dc.b $18
0003FAF5 00                         		dc.b   0
0003FAF6 00                         		dc.b   0
0003FAF7 00                         		dc.b   0
0003FAF8 04                         unk_23EF60:	dc.b   4
0003FAF9 F0                         		dc.b $F0 ; ð
0003FAFA 05                         		dc.b   5
0003FAFB 00                         		dc.b   0
0003FAFC 04                         		dc.b   4
0003FAFD F0                         		dc.b $F0 ; ð
0003FAFE F0                         		dc.b $F0 ; ð
0003FAFF 05                         		dc.b   5
0003FB00 08                         		dc.b   8
0003FB01 04                         		dc.b   4
0003FB02 00                         		dc.b   0
0003FB03 00                         		dc.b   0
0003FB04 05                         		dc.b   5
0003FB05 10                         		dc.b $10
0003FB06 04                         		dc.b   4
0003FB07 F0                         		dc.b $F0 ; ð
0003FB08 00                         		dc.b   0
0003FB09 05                         		dc.b   5
0003FB0A 18                         		dc.b $18
0003FB0B 04                         		dc.b   4
0003FB0C 00                         		dc.b   0
0003FB0D 00                         		dc.b   0
0003FB0E 04                         unk_23EF76:	dc.b   4
0003FB0F E8                         		dc.b $E8 ; è
0003FB10 0A                         		dc.b  $A
0003FB11 00                         		dc.b   0
0003FB12 08                         		dc.b   8
0003FB13 E8                         		dc.b $E8 ; è
0003FB14 E8                         		dc.b $E8 ; è
0003FB15 0A                         		dc.b  $A
0003FB16 08                         		dc.b   8
0003FB17 08                         		dc.b   8
0003FB18 00                         		dc.b   0
0003FB19 00                         		dc.b   0
0003FB1A 0A                         		dc.b  $A
0003FB1B 10                         		dc.b $10
0003FB1C 08                         		dc.b   8
0003FB1D E8                         		dc.b $E8 ; è
0003FB1E 00                         		dc.b   0
0003FB1F 0A                         		dc.b  $A
0003FB20 18                         		dc.b $18
0003FB21 08                         		dc.b   8
0003FB22 00                         		dc.b   0
0003FB23 00                         		dc.b   0
0003FB24 04                         unk_23EF8C:	dc.b   4
0003FB25 F0                         		dc.b $F0 ; ð
0003FB26 05                         		dc.b   5
0003FB27 00                         		dc.b   0
0003FB28 11                         		dc.b $11
0003FB29 F0                         		dc.b $F0 ; ð
0003FB2A F0                         		dc.b $F0 ; ð
0003FB2B 05                         		dc.b   5
0003FB2C 00                         		dc.b   0
0003FB2D 15                         		dc.b $15
0003FB2E 00                         		dc.b   0
0003FB2F 00                         		dc.b   0
0003FB30 05                         		dc.b   5
0003FB31 18                         		dc.b $18
0003FB32 15                         		dc.b $15
0003FB33 F0                         		dc.b $F0 ; ð
0003FB34 00                         		dc.b   0
0003FB35 05                         		dc.b   5
0003FB36 18                         		dc.b $18
0003FB37 11                         		dc.b $11
0003FB38 00                         		dc.b   0
0003FB39 00                         		dc.b   0
0003FB3A 02                         unk_23EFA2:	dc.b   2
0003FB3B F4                         		dc.b $F4 ; ô
0003FB3C 06                         		dc.b   6
0003FB3D 00                         		dc.b   0
0003FB3E 19                         		dc.b $19
0003FB3F F0                         		dc.b $F0 ; ð
0003FB40 F4                         		dc.b $F4 ; ô
0003FB41 06                         		dc.b   6
0003FB42 08                         		dc.b   8
0003FB43 19                         		dc.b $19
0003FB44 00                         		dc.b   0
0003FB45 00                         		dc.b   0
0003FB45 00                         		dc.b   0
0003FB46                            	even
0003FB46                            Ani_WaterSplash:
0003FB46                            	include	"level/objects/splash/animnormal.asm"
0003FB46                            .Anim:
0003FB46 0000                       	dc.w byte_23EFB4-.Anim
0003FB48 0000                       	dc.w byte_23EFBC-.Anim
0003FB4A 0000                       	dc.w byte_23EFC2-.Anim
0003FB4C 0300 0403 0102 FC          byte_23EFB4:	dc.b 3,	0, 4, 3, 1, 2, $FC
0003FB53 00                         		dc.b 0
0003FB54 0300 0102 FC               byte_23EFBC:	dc.b 3,	0, 1, 2, $FC
0003FB59 00                         		dc.b 0
0003FB5A 0306 05FC                  byte_23EFC2:	dc.b 3,	6, 5, $FC
0003FB5A 0306 05FC                  byte_23EFC2:	dc.b 3,	6, 5, $FC
0003FB5E                            	even
0003FB5E                            MapSpr_WaterSplash:
0003FB5E                            	include	"level/objects/splash/mapnormal.asm"
0003FB5E                            .Map:
0003FB5E 0000                       	dc.w byte_23EFD4-.Map
0003FB60 0000                       	dc.w byte_23EFE0-.Map
0003FB62 0000                       	dc.w unk_23EFEC-.Map
0003FB64 0000                       	dc.w unk_23EFF2-.Map
0003FB66 0000                       	dc.w unk_23F008-.Map
0003FB68 0000                       	dc.w unk_23F01E-.Map
0003FB6A 0000                       	dc.w unk_23F024-.Map
0003FB6C 02                         byte_23EFD4:	dc.b 2
0003FB6D F0                         		dc.b $F0 ; ð
0003FB6E 05                         		dc.b   5
0003FB6F 00                         		dc.b   0
0003FB70 00                         		dc.b   0
0003FB71 FC                         		dc.b $FC ; ü
0003FB72 F8                         		dc.b $F8 ; ø
0003FB73 00                         		dc.b   0
0003FB74 00                         		dc.b   0
0003FB75 04                         		dc.b   4
0003FB76 F4                         		dc.b $F4 ; ô
0003FB77 00                         		dc.b 0
0003FB78 02                         byte_23EFE0:	dc.b 2
0003FB79 E0                         		dc.b $E0 ; à
0003FB7A 00                         		dc.b   0
0003FB7B 00                         		dc.b   0
0003FB7C 05                         		dc.b   5
0003FB7D F8                         		dc.b $F8 ; ø
0003FB7E E8                         		dc.b $E8 ; è
0003FB7F 0E                         		dc.b  $E
0003FB80 00                         		dc.b   0
0003FB81 06                         		dc.b   6
0003FB82 F0                         		dc.b $F0 ; ð
0003FB83 00                         		dc.b 0
0003FB84 01                         unk_23EFEC:	dc.b   1
0003FB85 E0                         		dc.b $E0 ; à
0003FB86 0F                         		dc.b  $F
0003FB87 00                         		dc.b   0
0003FB88 12                         		dc.b $12
0003FB89 F0                         		dc.b $F0 ; ð
0003FB8A 04                         unk_23EFF2:	dc.b   4
0003FB8B D0                         		dc.b $D0 ; Ð
0003FB8C 06                         		dc.b   6
0003FB8D 00                         		dc.b   0
0003FB8E 22                         		dc.b $22 ; "
0003FB8F F8                         		dc.b $F8 ; ø
0003FB90 D8                         		dc.b $D8 ; Ø
0003FB91 00                         		dc.b   0
0003FB92 00                         		dc.b   0
0003FB93 28                         		dc.b $28 ; (
0003FB94 F0                         		dc.b $F0 ; ð
0003FB95 E0                         		dc.b $E0 ; à
0003FB96 00                         		dc.b   0
0003FB97 00                         		dc.b   0
0003FB98 29                         		dc.b $29 ; )
0003FB99 08                         		dc.b   8
0003FB9A E8                         		dc.b $E8 ; è
0003FB9B 0E                         		dc.b  $E
0003FB9C 00                         		dc.b   0
0003FB9D 2A                         		dc.b $2A ; *
0003FB9E F0                         		dc.b $F0 ; ð
0003FB9F 00                         		dc.b   0
0003FBA0 04                         unk_23F008:	dc.b   4
0003FBA1 C0                         		dc.b $C0 ; À
0003FBA2 00                         		dc.b   0
0003FBA3 00                         		dc.b   0
0003FBA4 36                         		dc.b $36 ; 6
0003FBA5 F8                         		dc.b $F8 ; ø
0003FBA6 C8                         		dc.b $C8 ; È
0003FBA7 06                         		dc.b   6
0003FBA8 00                         		dc.b   0
0003FBA9 37                         		dc.b $37 ; 7
0003FBAA F8                         		dc.b $F8 ; ø
0003FBAB D8                         		dc.b $D8 ; Ø
0003FBAC 00                         		dc.b   0
0003FBAD 00                         		dc.b   0
0003FBAE 3D                         		dc.b $3D ; =
0003FBAF F0                         		dc.b $F0 ; ð
0003FBB0 E0                         		dc.b $E0 ; à
0003FBB1 0F                         		dc.b  $F
0003FBB2 00                         		dc.b   0
0003FBB3 3E                         		dc.b $3E ; >
0003FBB4 F0                         		dc.b $F0 ; ð
0003FBB5 00                         		dc.b   0
0003FBB6 01                         unk_23F01E:	dc.b   1
0003FBB7 F0                         		dc.b $F0 ; ð
0003FBB8 09                         		dc.b   9
0003FBB9 00                         		dc.b   0
0003FBBA 4E                         		dc.b $4E ; N
0003FBBB F4                         		dc.b $F4 ; ô
0003FBBC 01                         unk_23F024:	dc.b   1
0003FBBD F8                         		dc.b $F8 ; ø
0003FBBE 04                         		dc.b   4
0003FBBF 00                         		dc.b   0
0003FBC0 54                         		dc.b $54 ; T
0003FBC1 F8                         		dc.b $F8 ; ø
0003FBC1 F8                         		dc.b $F8 ; ø
0003FBC2                            	even
0003FBC2                            Ani_FlapDoorH:
0003FBC2                            	include	"level/objects/flapdoor/animhoriz.asm"
0003FBC2                            .Anim:
0003FBC2 0000                       	dc.w byte_23F02C-.Anim
0003FBC4 0000 0001 0101 0101 0101+  byte_23F02C:	dc.b 0,	0, 0, 1, 1, 1, 1, 1, 1,	1, 1, $FC
0003FBC4 0000 0001 0101 0101 0101+  byte_23F02C:	dc.b 0,	0, 0, 1, 1, 1, 1, 1, 1,	1, 1, $FC
0003FBD0                            	even
0003FBD0                            MapSpr_FlapDoorH:
0003FBD0                            	include	"level/objects/flapdoor/maphoriz.asm"
0003FBD0                            .Map:
0003FBD0 0000                       		dc.w unk_23F048-.Map
0003FBD2 0000                       		dc.w unk_23F03C-.Map
0003FBD4 02                         unk_23F03C:	dc.b   2
0003FBD5 D0                         		dc.b $D0 ; Ð
0003FBD6 03                         		dc.b   3
0003FBD7 00                         		dc.b   0
0003FBD8 00                         		dc.b   0
0003FBD9 E4                         		dc.b $E4 ; ä
0003FBDA F0                         		dc.b $F0 ; ð
0003FBDB 01                         		dc.b   1
0003FBDC 00                         		dc.b   0
0003FBDD 04                         		dc.b   4
0003FBDE E4                         		dc.b $E4 ; ä
0003FBDF 00                         		dc.b   0
0003FBE0 02                         unk_23F048:	dc.b   2
0003FBE1 F8                         		dc.b $F8 ; ø
0003FBE2 0C                         		dc.b  $C
0003FBE3 00                         		dc.b   0
0003FBE4 06                         		dc.b   6
0003FBE5 E8                         		dc.b $E8 ; è
0003FBE6 F8                         		dc.b $F8 ; ø
0003FBE7 04                         		dc.b   4
0003FBE8 00                         		dc.b   0
0003FBE9 0A                         		dc.b  $A
0003FBEA 08                         		dc.b   8
0003FBEB 00                         		dc.b   0
0003FBEB 00                         		dc.b   0
0003FBEC                            	even
0003FBEC                            Ani_WaterfallSplash:
0003FBEC                            	include	"level/objects/splash/animwaterfall.asm"
0003FBEC                            .Anim:
0003FBEC 0000                       	dc.w byte_23F056-.Anim
0003FBEE 0300 0102 FC00             byte_23F056:	dc.b 3,	0, 1, 2, $FC, 0
0003FBEE 0300 0102 FC00             byte_23F056:	dc.b 3,	0, 1, 2, $FC, 0
0003FBF4                            	even
0003FBF4                            MapSpr_WaterfallSplash:
0003FBF4                            	include	"level/objects/splash/mapwaterfall.asm"
0003FBF4                            .Map:
0003FBF4 0000                       	dc.w unk_23F062-.Map
0003FBF6 0000                       	dc.w unk_23F068-.Map
0003FBF8 0000                       	dc.w unk_23F06E-.Map
0003FBFA 01                         unk_23F062:	dc.b   1
0003FBFB F0                         		dc.b $F0 ; ð
0003FBFC 0F                         		dc.b  $F
0003FBFD 00                         		dc.b   0
0003FBFE 00                         		dc.b   0
0003FBFF F0                         		dc.b $F0 ; ð
0003FC00 01                         unk_23F068:	dc.b   1
0003FC01 F4                         		dc.b $F4 ; ô
0003FC02 0A                         		dc.b  $A
0003FC03 00                         		dc.b   0
0003FC04 10                         		dc.b $10
0003FC05 F4                         		dc.b $F4 ; ô
0003FC06 01                         unk_23F06E:	dc.b   1
0003FC07 F8                         		dc.b $F8 ; ø
0003FC08 05                         		dc.b   5
0003FC09 00                         		dc.b   0
0003FC0A 19                         		dc.b $19
0003FC0B F8                         		dc.b $F8 ; ø
0003FC0B F8                         		dc.b $F8 ; ø
0003FC0C                            	even
0003FC0C                            Ani_Explosion:
0003FC0C                            	include	"level/objects/explosion/anim.asm"
0003FC0C                            .Anim:
0003FC0C 0000                       	dc.w byte_23F078-.Anim
0003FC0E 0000                       	dc.w byte_23F080-.Anim
0003FC10 0300 0506 0304 FC00        byte_23F078:	dc.b 3,	0, 5, 6, 3, 4, $FC, 0
0003FC18 0300 0102 0304 FC00        byte_23F080:	dc.b 3,	0, 1, 2, 3, 4, $FC, 0
0003FC18 0300 0102 0304 FC00        byte_23F080:	dc.b 3,	0, 1, 2, 3, 4, $FC, 0
0003FC20                            	even
0003FC20                            MapSpr_Explosion:
0003FC20                            	include	"level/objects/explosion/map.asm"
0003FC20                            .Map:
0003FC20 0000                       	dc.w unk_23F096-.Map
0003FC22 0000                       	dc.w unk_23F0A2-.Map
0003FC24 0000                       	dc.w unk_23F0B2-.Map
0003FC26 0000                       	dc.w unk_23F0C8-.Map
0003FC28 0000                       	dc.w unk_23F0DE-.Map
0003FC2A 0000                       	dc.w unk_23F0F4-.Map
0003FC2C 0000                       	dc.w unk_23F104-.Map
0003FC2E 02                         unk_23F096:	dc.b   2
0003FC2F F8                         		dc.b $F8 ; ø
0003FC30 05                         		dc.b   5
0003FC31 00                         		dc.b   0
0003FC32 00                         		dc.b   0
0003FC33 F0                         		dc.b $F0 ; ð
0003FC34 F8                         		dc.b $F8 ; ø
0003FC35 05                         		dc.b   5
0003FC36 08                         		dc.b   8
0003FC37 00                         		dc.b   0
0003FC38 00                         		dc.b   0
0003FC39 00                         		dc.b   0
0003FC3A 03                         unk_23F0A2:	dc.b   3
0003FC3B F0                         		dc.b $F0 ; ð
0003FC3C 0D                         		dc.b  $D
0003FC3D 00                         		dc.b   0
0003FC3E 04                         		dc.b   4
0003FC3F F0                         		dc.b $F0 ; ð
0003FC40 00                         		dc.b   0
0003FC41 05                         		dc.b   5
0003FC42 00                         		dc.b   0
0003FC43 0C                         		dc.b  $C
0003FC44 F0                         		dc.b $F0 ; ð
0003FC45 00                         		dc.b   0
0003FC46 05                         		dc.b   5
0003FC47 08                         		dc.b   8
0003FC48 0C                         		dc.b  $C
0003FC49 00                         		dc.b   0
0003FC4A 04                         unk_23F0B2:	dc.b   4
0003FC4B F0                         		dc.b $F0 ; ð
0003FC4C 05                         		dc.b   5
0003FC4D 00                         		dc.b   0
0003FC4E 10                         		dc.b $10
0003FC4F F0                         		dc.b $F0 ; ð
0003FC50 F0                         		dc.b $F0 ; ð
0003FC51 05                         		dc.b   5
0003FC52 00                         		dc.b   0
0003FC53 14                         		dc.b $14
0003FC54 00                         		dc.b   0
0003FC55 00                         		dc.b   0
0003FC56 05                         		dc.b   5
0003FC57 00                         		dc.b   0
0003FC58 18                         		dc.b $18
0003FC59 F0                         		dc.b $F0 ; ð
0003FC5A 00                         		dc.b   0
0003FC5B 05                         		dc.b   5
0003FC5C 18                         		dc.b $18
0003FC5D 10                         		dc.b $10
0003FC5E 00                         		dc.b   0
0003FC5F 00                         		dc.b   0
0003FC60 04                         unk_23F0C8:	dc.b   4
0003FC61 E8                         		dc.b $E8 ; è
0003FC62 0A                         		dc.b  $A
0003FC63 00                         		dc.b   0
0003FC64 1C                         		dc.b $1C
0003FC65 E8                         		dc.b $E8 ; è
0003FC66 E8                         		dc.b $E8 ; è
0003FC67 0A                         		dc.b  $A
0003FC68 08                         		dc.b   8
0003FC69 1C                         		dc.b $1C
0003FC6A 00                         		dc.b   0
0003FC6B 00                         		dc.b   0
0003FC6C 0A                         		dc.b  $A
0003FC6D 10                         		dc.b $10
0003FC6E 1C                         		dc.b $1C
0003FC6F E8                         		dc.b $E8 ; è
0003FC70 00                         		dc.b   0
0003FC71 0A                         		dc.b  $A
0003FC72 18                         		dc.b $18
0003FC73 1C                         		dc.b $1C
0003FC74 00                         		dc.b   0
0003FC75 00                         		dc.b   0
0003FC76 04                         unk_23F0DE:	dc.b   4
0003FC77 E8                         		dc.b $E8 ; è
0003FC78 0A                         		dc.b  $A
0003FC79 00                         		dc.b   0
0003FC7A 25                         		dc.b $25 ; %
0003FC7B E8                         		dc.b $E8 ; è
0003FC7C E8                         		dc.b $E8 ; è
0003FC7D 0A                         		dc.b  $A
0003FC7E 08                         		dc.b   8
0003FC7F 25                         		dc.b $25 ; %
0003FC80 00                         		dc.b   0
0003FC81 00                         		dc.b   0
0003FC82 0A                         		dc.b  $A
0003FC83 10                         		dc.b $10
0003FC84 25                         		dc.b $25 ; %
0003FC85 E8                         		dc.b $E8 ; è
0003FC86 00                         		dc.b   0
0003FC87 0A                         		dc.b  $A
0003FC88 18                         		dc.b $18
0003FC89 25                         		dc.b $25 ; %
0003FC8A 00                         		dc.b   0
0003FC8B 00                         		dc.b   0
0003FC8C 03                         unk_23F0F4:	dc.b   3
0003FC8D F0                         		dc.b $F0 ; ð
0003FC8E 0D                         		dc.b  $D
0003FC8F 00                         		dc.b   0
0003FC90 2E                         		dc.b $2E ; .
0003FC91 F0                         		dc.b $F0 ; ð
0003FC92 00                         		dc.b   0
0003FC93 05                         		dc.b   5
0003FC94 00                         		dc.b   0
0003FC95 36                         		dc.b $36 ; 6
0003FC96 F0                         		dc.b $F0 ; ð
0003FC97 00                         		dc.b   0
0003FC98 05                         		dc.b   5
0003FC99 08                         		dc.b   8
0003FC9A 36                         		dc.b $36 ; 6
0003FC9B 00                         		dc.b   0
0003FC9C 04                         unk_23F104:	dc.b   4
0003FC9D F0                         		dc.b $F0 ; ð
0003FC9E 05                         		dc.b   5
0003FC9F 00                         		dc.b   0
0003FCA0 3A                         		dc.b $3A ; :
0003FCA1 F0                         		dc.b $F0 ; ð
0003FCA2 F0                         		dc.b $F0 ; ð
0003FCA3 05                         		dc.b   5
0003FCA4 00                         		dc.b   0
0003FCA5 3E                         		dc.b $3E ; >
0003FCA6 00                         		dc.b   0
0003FCA7 00                         		dc.b   0
0003FCA8 05                         		dc.b   5
0003FCA9 00                         		dc.b   0
0003FCAA 42                         		dc.b $42 ; B
0003FCAB F0                         		dc.b $F0 ; ð
0003FCAC 00                         		dc.b   0
0003FCAD 05                         		dc.b   5
0003FCAE 18                         		dc.b $18
0003FCAF 3A                         		dc.b $3A ; :
0003FCB0 00                         		dc.b   0
0003FCB1 00                         		dc.b   0
0003FCB1 00                         		dc.b   0
0003FCB2                            	even
0003FCB2                            Ani_Checkpoint:
0003FCB2                            	include	"level/objects/checkpoint/anim.asm"
0003FCB2                            .Anim:
0003FCB2 0000                       	dc.w byte_23F11C-.Anim
0003FCB4 0302 03FF                  byte_23F11C:	dc.b 3,	2, 3, $FF
0003FCB4 0302 03FF                  byte_23F11C:	dc.b 3,	2, 3, $FF
0003FCB8                            	even
0003FCB8                            MapSpr_Checkpoint:
0003FCB8                            	include	"level/objects/checkpoint/map.asm"
0003FCB8                            .Map:
0003FCB8 0000                       		dc.w unk_23F128-.Map
0003FCBA 0000                       		dc.w unk_23F13E-.Map
0003FCBC 0000                       		dc.w unk_23F14A-.Map
0003FCBE 0000                       		dc.w unk_23F156-.Map
0003FCC0 04                         unk_23F128:	dc.b   4
0003FCC1 E8                         		dc.b $E8 ; è
0003FCC2 03                         		dc.b   3
0003FCC3 00                         		dc.b   0
0003FCC4 00                         		dc.b   0
0003FCC5 F8                         		dc.b $F8 ; ø
0003FCC6 E8                         		dc.b $E8 ; è
0003FCC7 03                         		dc.b   3
0003FCC8 08                         		dc.b   8
0003FCC9 00                         		dc.b   0
0003FCCA 00                         		dc.b   0
0003FCCB 08                         		dc.b   8
0003FCCC 01                         		dc.b   1
0003FCCD 00                         		dc.b   0
0003FCCE 04                         		dc.b   4
0003FCCF F8                         		dc.b $F8 ; ø
0003FCD0 08                         		dc.b   8
0003FCD1 01                         		dc.b   1
0003FCD2 08                         		dc.b   8
0003FCD3 04                         		dc.b   4
0003FCD4 00                         		dc.b   0
0003FCD5 00                         		dc.b   0
0003FCD6 02                         unk_23F13E:	dc.b   2
0003FCD7 F8                         		dc.b $F8 ; ø
0003FCD8 01                         		dc.b   1
0003FCD9 00                         		dc.b   0
0003FCDA 06                         		dc.b   6
0003FCDB F8                         		dc.b $F8 ; ø
0003FCDC F8                         		dc.b $F8 ; ø
0003FCDD 01                         		dc.b   1
0003FCDE 08                         		dc.b   8
0003FCDF 06                         		dc.b   6
0003FCE0 00                         		dc.b   0
0003FCE1 00                         		dc.b   0
0003FCE2 02                         unk_23F14A:	dc.b   2
0003FCE3 F8                         		dc.b $F8 ; ø
0003FCE4 01                         		dc.b   1
0003FCE5 00                         		dc.b   0
0003FCE6 08                         		dc.b   8
0003FCE7 F8                         		dc.b $F8 ; ø
0003FCE8 F8                         		dc.b $F8 ; ø
0003FCE9 01                         		dc.b   1
0003FCEA 08                         		dc.b   8
0003FCEB 08                         		dc.b   8
0003FCEC 00                         		dc.b   0
0003FCED 00                         		dc.b   0
0003FCEE 02                         unk_23F156:	dc.b   2
0003FCEF F8                         		dc.b $F8 ; ø
0003FCF0 01                         		dc.b   1
0003FCF1 00                         		dc.b   0
0003FCF2 0A                         		dc.b  $A
0003FCF3 F8                         		dc.b $F8 ; ø
0003FCF4 F8                         		dc.b $F8 ; ø
0003FCF5 01                         		dc.b   1
0003FCF6 08                         		dc.b   8
0003FCF7 0A                         		dc.b  $A
0003FCF8 00                         		dc.b   0
0003FCF9 00                         		dc.b   0
0003FCF9 00                         		dc.b   0
0003FCFA                            	even
0003FCFA                            Ani_BigRing:
0003FCFA                            	include	"level/objects/bigring/anim.asm"
0003FCFA                            .Anim:
0003FCFA 0000                       	dc.w byte_23F164-.Anim
0003FCFC 0700 0102 03FF             byte_23F164:	dc.b 7,	0, 1, 2, 3, $FF
0003FCFC 0700 0102 03FF             byte_23F164:	dc.b 7,	0, 1, 2, 3, $FF
0003FD02                            	even
0003FD02                            MapSpr_BigRing:
0003FD02                            	include	"level/objects/bigring/map.asm"
0003FD02                            .Map:
0003FD02 0000                       	dc.w unk_23F172-.Map
0003FD04 0000                       	dc.w unk_23F1A6-.Map
0003FD06 0000                       	dc.w unk_23F1DA-.Map
0003FD08 0000                       	dc.w unk_23F1E6-.Map
0003FD0A 0A                         unk_23F172:	dc.b  $A
0003FD0B E0                         		dc.b $E0 ; à
0003FD0C 09                         		dc.b   9
0003FD0D 00                         		dc.b   0
0003FD0E 00                         		dc.b   0
0003FD0F E8                         		dc.b $E8 ; è
0003FD10 E0                         		dc.b $E0 ; à
0003FD11 09                         		dc.b   9
0003FD12 00                         		dc.b   0
0003FD13 06                         		dc.b   6
0003FD14 00                         		dc.b   0
0003FD15 E8                         		dc.b $E8 ; è
0003FD16 00                         		dc.b   0
0003FD17 00                         		dc.b   0
0003FD18 0C                         		dc.b  $C
0003FD19 E0                         		dc.b $E0 ; à
0003FD1A E8                         		dc.b $E8 ; è
0003FD1B 00                         		dc.b   0
0003FD1C 00                         		dc.b   0
0003FD1D 0D                         		dc.b  $D
0003FD1E 18                         		dc.b $18
0003FD1F F0                         		dc.b $F0 ; ð
0003FD20 07                         		dc.b   7
0003FD21 00                         		dc.b   0
0003FD22 0E                         		dc.b  $E
0003FD23 E0                         		dc.b $E0 ; à
0003FD24 10                         		dc.b $10
0003FD25 00                         		dc.b   0
0003FD26 00                         		dc.b   0
0003FD27 16                         		dc.b $16
0003FD28 E0                         		dc.b $E0 ; à
0003FD29 10                         		dc.b $10
0003FD2A 09                         		dc.b   9
0003FD2B 00                         		dc.b   0
0003FD2C 17                         		dc.b $17
0003FD2D E8                         		dc.b $E8 ; è
0003FD2E 10                         		dc.b $10
0003FD2F 09                         		dc.b   9
0003FD30 00                         		dc.b   0
0003FD31 1D                         		dc.b $1D
0003FD32 00                         		dc.b   0
0003FD33 10                         		dc.b $10
0003FD34 00                         		dc.b   0
0003FD35 00                         		dc.b   0
0003FD36 23                         		dc.b $23 ; #
0003FD37 18                         		dc.b $18
0003FD38 F0                         		dc.b $F0 ; ð
0003FD39 07                         		dc.b   7
0003FD3A 00                         		dc.b   0
0003FD3B 24                         		dc.b $24 ; $
0003FD3C 10                         		dc.b $10
0003FD3D 00                         		dc.b   0
0003FD3E 0A                         unk_23F1A6:	dc.b  $A
0003FD3F E0                         		dc.b $E0 ; à
0003FD40 0D                         		dc.b  $D
0003FD41 00                         		dc.b   0
0003FD42 2C                         		dc.b $2C ; ,
0003FD43 F0                         		dc.b $F0 ; ð
0003FD44 E8                         		dc.b $E8 ; è
0003FD45 00                         		dc.b   0
0003FD46 00                         		dc.b   0
0003FD47 34                         		dc.b $34 ; 4
0003FD48 E8                         		dc.b $E8 ; è
0003FD49 F0                         		dc.b $F0 ; ð
0003FD4A 07                         		dc.b   7
0003FD4B 00                         		dc.b   0
0003FD4C 35                         		dc.b $35 ; 5
0003FD4D E8                         		dc.b $E8 ; è
0003FD4E 10                         		dc.b $10
0003FD4F 00                         		dc.b   0
0003FD50 00                         		dc.b   0
0003FD51 3D                         		dc.b $3D ; =
0003FD52 E8                         		dc.b $E8 ; è
0003FD53 10                         		dc.b $10
0003FD54 0D                         		dc.b  $D
0003FD55 00                         		dc.b   0
0003FD56 3E                         		dc.b $3E ; >
0003FD57 F0                         		dc.b $F0 ; ð
0003FD58 E8                         		dc.b $E8 ; è
0003FD59 00                         		dc.b   0
0003FD5A 00                         		dc.b   0
0003FD5B 46                         		dc.b $46 ; F
0003FD5C 10                         		dc.b $10
0003FD5D F0                         		dc.b $F0 ; ð
0003FD5E 00                         		dc.b   0
0003FD5F 00                         		dc.b   0
0003FD60 47                         		dc.b $47 ; G
0003FD61 00                         		dc.b   0
0003FD62 F0                         		dc.b $F0 ; ð
0003FD63 07                         		dc.b   7
0003FD64 00                         		dc.b   0
0003FD65 48                         		dc.b $48 ; H
0003FD66 08                         		dc.b   8
0003FD67 08                         		dc.b   8
0003FD68 00                         		dc.b   0
0003FD69 00                         		dc.b   0
0003FD6A 50                         		dc.b $50 ; P
0003FD6B 00                         		dc.b   0
0003FD6C 10                         		dc.b $10
0003FD6D 00                         		dc.b   0
0003FD6E 00                         		dc.b   0
0003FD6F 51                         		dc.b $51 ; Q
0003FD70 10                         		dc.b $10
0003FD71 00                         		dc.b   0
0003FD72 02                         unk_23F1DA:	dc.b   2
0003FD73 E0                         		dc.b $E0 ; à
0003FD74 0B                         		dc.b  $B
0003FD75 00                         		dc.b   0
0003FD76 52                         		dc.b $52 ; R
0003FD77 F4                         		dc.b $F4 ; ô
0003FD78 00                         		dc.b   0
0003FD79 0B                         		dc.b  $B
0003FD7A 00                         		dc.b   0
0003FD7B 5E                         		dc.b $5E ; ^
0003FD7C F4                         		dc.b $F4 ; ô
0003FD7D 00                         		dc.b   0
0003FD7E 0A                         unk_23F1E6:	dc.b  $A
0003FD7F E0                         		dc.b $E0 ; à
0003FD80 0D                         		dc.b  $D
0003FD81 08                         		dc.b   8
0003FD82 2C                         		dc.b $2C ; ,
0003FD83 F0                         		dc.b $F0 ; ð
0003FD84 E8                         		dc.b $E8 ; è
0003FD85 00                         		dc.b   0
0003FD86 08                         		dc.b   8
0003FD87 34                         		dc.b $34 ; 4
0003FD88 10                         		dc.b $10
0003FD89 F0                         		dc.b $F0 ; ð
0003FD8A 07                         		dc.b   7
0003FD8B 08                         		dc.b   8
0003FD8C 35                         		dc.b $35 ; 5
0003FD8D 08                         		dc.b   8
0003FD8E 10                         		dc.b $10
0003FD8F 00                         		dc.b   0
0003FD90 08                         		dc.b   8
0003FD91 3D                         		dc.b $3D ; =
0003FD92 10                         		dc.b $10
0003FD93 10                         		dc.b $10
0003FD94 0D                         		dc.b  $D
0003FD95 08                         		dc.b   8
0003FD96 3E                         		dc.b $3E ; >
0003FD97 F0                         		dc.b $F0 ; ð
0003FD98 E8                         		dc.b $E8 ; è
0003FD99 00                         		dc.b   0
0003FD9A 08                         		dc.b   8
0003FD9B 46                         		dc.b $46 ; F
0003FD9C E8                         		dc.b $E8 ; è
0003FD9D F0                         		dc.b $F0 ; ð
0003FD9E 00                         		dc.b   0
0003FD9F 08                         		dc.b   8
0003FDA0 47                         		dc.b $47 ; G
0003FDA1 F8                         		dc.b $F8 ; ø
0003FDA2 F0                         		dc.b $F0 ; ð
0003FDA3 07                         		dc.b   7
0003FDA4 08                         		dc.b   8
0003FDA5 48                         		dc.b $48 ; H
0003FDA6 E8                         		dc.b $E8 ; è
0003FDA7 08                         		dc.b   8
0003FDA8 00                         		dc.b   0
0003FDA9 08                         		dc.b   8
0003FDAA 50                         		dc.b $50 ; P
0003FDAB F8                         		dc.b $F8 ; ø
0003FDAC 10                         		dc.b $10
0003FDAD 00                         		dc.b   0
0003FDAE 08                         		dc.b   8
0003FDAF 51                         		dc.b $51 ; Q
0003FDB0 E8                         		dc.b $E8 ; è
0003FDB1 00                         		dc.b   0
0003FDB2 00                         unk_23F21A:	dc.b   0
0003FDB3 02                         		dc.b   2
0003FDB4 01                         		dc.b   1
0003FDB5 00                         		dc.b   0
0003FDB6 01                         		dc.b   1
0003FDB7 02                         		dc.b   2
0003FDB8 04                         		dc.b   4
0003FDB9 03                         		dc.b   3
0003FDBA 03                         		dc.b   3
0003FDBB 01                         		dc.b   1
0003FDBC 02                         		dc.b   2
0003FDBD 04                         		dc.b   4
0003FDBE FF                         		dc.b $FF
0003FDBF 00                         		dc.b   0
0003FDBF 00                         		dc.b   0
0003FDC0                            	even
0003FDC0                            MapSpr_GoalPost_Signpost:
0003FDC0                            	include	"level/objects/endpost/map.asm"
0003FDC0                            .Map:
0003FDC0 0000                       	dc.w unk_23F234-.Map
0003FDC2 0000                       	dc.w unk_23F24A-.Map
0003FDC4 0000                       	dc.w unk_23F25A-.Map
0003FDC6 0000                       	dc.w unk_23F26A-.Map
0003FDC8 0000                       	dc.w unk_23F280-.Map
0003FDCA 0000                       	dc.w unk_23F290-.Map
0003FDCC 04                         unk_23F234:	dc.b   4
0003FDCD D4                         		dc.b $D4 ; Ô
0003FDCE 0B                         		dc.b  $B
0003FDCF 00                         		dc.b   0
0003FDD0 00                         		dc.b   0
0003FDD1 E8                         		dc.b $E8 ; è
0003FDD2 D4                         		dc.b $D4 ; Ô
0003FDD3 0B                         		dc.b  $B
0003FDD4 00                         		dc.b   0
0003FDD5 0C                         		dc.b  $C
0003FDD6 00                         		dc.b   0
0003FDD7 F4                         		dc.b $F4 ; ô
0003FDD8 05                         		dc.b   5
0003FDD9 00                         		dc.b   0
0003FDDA 44                         		dc.b $44 ; D
0003FDDB F8                         		dc.b $F8 ; ø
0003FDDC 04                         		dc.b   4
0003FDDD 0C                         		dc.b  $C
0003FDDE 00                         		dc.b   0
0003FDDF 48                         		dc.b $48 ; H
0003FDE0 F0                         		dc.b $F0 ; ð
0003FDE1 00                         		dc.b   0
0003FDE2 03                         unk_23F24A:	dc.b   3
0003FDE3 D4                         		dc.b $D4 ; Ô
0003FDE4 0F                         		dc.b  $F
0003FDE5 00                         		dc.b   0
0003FDE6 18                         		dc.b $18
0003FDE7 F0                         		dc.b $F0 ; ð
0003FDE8 F4                         		dc.b $F4 ; ô
0003FDE9 05                         		dc.b   5
0003FDEA 00                         		dc.b   0
0003FDEB 44                         		dc.b $44 ; D
0003FDEC F8                         		dc.b $F8 ; ø
0003FDED 04                         		dc.b   4
0003FDEE 0C                         		dc.b  $C
0003FDEF 00                         		dc.b   0
0003FDF0 48                         		dc.b $48 ; H
0003FDF1 F0                         		dc.b $F0 ; ð
0003FDF2 03                         unk_23F25A:	dc.b   3
0003FDF3 D4                         		dc.b $D4 ; Ô
0003FDF4 03                         		dc.b   3
0003FDF5 00                         		dc.b   0
0003FDF6 28                         		dc.b $28 ; (
0003FDF7 FC                         		dc.b $FC ; ü
0003FDF8 F4                         		dc.b $F4 ; ô
0003FDF9 05                         		dc.b   5
0003FDFA 00                         		dc.b   0
0003FDFB 44                         		dc.b $44 ; D
0003FDFC F8                         		dc.b $F8 ; ø
0003FDFD 04                         		dc.b   4
0003FDFE 0C                         		dc.b  $C
0003FDFF 00                         		dc.b   0
0003FE00 48                         		dc.b $48 ; H
0003FE01 F0                         		dc.b $F0 ; ð
0003FE02 04                         unk_23F26A:	dc.b   4
0003FE03 D4                         		dc.b $D4 ; Ô
0003FE04 0B                         		dc.b  $B
0003FE05 00                         		dc.b   0
0003FE06 2C                         		dc.b $2C ; ,
0003FE07 E8                         		dc.b $E8 ; è
0003FE08 D4                         		dc.b $D4 ; Ô
0003FE09 0B                         		dc.b  $B
0003FE0A 00                         		dc.b   0
0003FE0B 38                         		dc.b $38 ; 8
0003FE0C 00                         		dc.b   0
0003FE0D F4                         		dc.b $F4 ; ô
0003FE0E 05                         		dc.b   5
0003FE0F 00                         		dc.b   0
0003FE10 44                         		dc.b $44 ; D
0003FE11 F8                         		dc.b $F8 ; ø
0003FE12 04                         		dc.b   4
0003FE13 0C                         		dc.b  $C
0003FE14 00                         		dc.b   0
0003FE15 48                         		dc.b $48 ; H
0003FE16 F0                         		dc.b $F0 ; ð
0003FE17 00                         		dc.b   0
0003FE18 03                         unk_23F280:	dc.b   3
0003FE19 D4                         		dc.b $D4 ; Ô
0003FE1A 0F                         		dc.b  $F
0003FE1B 08                         		dc.b   8
0003FE1C 18                         		dc.b $18
0003FE1D F0                         		dc.b $F0 ; ð
0003FE1E F4                         		dc.b $F4 ; ô
0003FE1F 05                         		dc.b   5
0003FE20 00                         		dc.b   0
0003FE21 44                         		dc.b $44 ; D
0003FE22 F8                         		dc.b $F8 ; ø
0003FE23 04                         		dc.b   4
0003FE24 0C                         		dc.b  $C
0003FE25 00                         		dc.b   0
0003FE26 48                         		dc.b $48 ; H
0003FE27 F0                         		dc.b $F0 ; ð
0003FE28 04                         unk_23F290:	dc.b   4
0003FE29 E4                         		dc.b $E4 ; ä
0003FE2A 02                         		dc.b   2
0003FE2B 00                         		dc.b   0
0003FE2C 00                         		dc.b   0
0003FE2D EC                         		dc.b $EC ; ì
0003FE2E E4                         		dc.b $E4 ; ä
0003FE2F 0F                         		dc.b  $F
0003FE30 00                         		dc.b   0
0003FE31 03                         		dc.b   3
0003FE32 F4                         		dc.b $F4 ; ô
0003FE33 04                         		dc.b   4
0003FE34 01                         		dc.b   1
0003FE35 00                         		dc.b   0
0003FE36 13                         		dc.b $13
0003FE37 FC                         		dc.b $FC ; ü
0003FE38 14                         		dc.b $14
0003FE39 08                         		dc.b   8
0003FE3A 00                         		dc.b   0
0003FE3B 15                         		dc.b $15
0003FE3C F4                         		dc.b $F4 ; ô
0003FE3D 00                         		dc.b   0
0003FE3D 00                         		dc.b   0
0003FE3E                            	even
0003FE3E                            MapSpr_FlowerCapsule:
0003FE3E                            	include	"level/objects/flowercapsule/map.asm"
0003FE3E                            .Map:
0003FE3E 0000                       	dc.w unk_23C954-.Map
0003FE40 0000                       	dc.w unk_23C992-.Map
0003FE42 0000                       	dc.w unk_23C9D0-.Map
0003FE44 0000                       	dc.w unk_23C9F0-.Map
0003FE46 0000                       	dc.w unk_23C9F6-.Map
0003FE48 0000                       	dc.w unk_23C9FC-.Map
0003FE4A 0000                       	dc.w unk_23CA02-.Map
0003FE4C 0000                       	dc.w unk_23CA08-.Map
0003FE4E 0000                       	dc.w unk_23CA0E-.Map
0003FE50                            unk_23C954:
0003FE50 0C                         	dc.b  $C
0003FE51 E0                         	dc.b $E0 ; a
0003FE52 01                         	dc.b   1
0003FE53 00                         	dc.b   0
0003FE54 00                         	dc.b   0
0003FE55 F8                         	dc.b $F8 ; °
0003FE56 E0                         	dc.b $E0 ; a
0003FE57 01                         	dc.b   1
0003FE58 08                         	dc.b   8
0003FE59 00                         	dc.b   0
0003FE5A 00                         	dc.b   0
0003FE5B F0                         	dc.b $F0 ; =
0003FE5C 08                         	dc.b   8
0003FE5D 00                         	dc.b   0
0003FE5E 02                         	dc.b   2
0003FE5F E8                         	dc.b $E8 ; F
0003FE60 F0                         	dc.b $F0 ; =
0003FE61 08                         	dc.b   8
0003FE62 00                         	dc.b   0
0003FE63 05                         	dc.b   5
0003FE64 00                         	dc.b   0
0003FE65 F8                         	dc.b $F8 ; °
0003FE66 0D                         	dc.b  $D
0003FE67 00                         	dc.b   0
0003FE68 08                         	dc.b   8
0003FE69 E0                         	dc.b $E0 ; a
0003FE6A F8                         	dc.b $F8 ; °
0003FE6B 0D                         	dc.b  $D
0003FE6C 00                         	dc.b   0
0003FE6D 10                         	dc.b $10
0003FE6E 00                         	dc.b   0
0003FE6F 08                         	dc.b   8
0003FE70 0D                         	dc.b  $D
0003FE71 00                         	dc.b   0
0003FE72 18                         	dc.b $18
0003FE73 E0                         	dc.b $E0 ; a
0003FE74 08                         	dc.b   8
0003FE75 0D                         	dc.b  $D
0003FE76 08                         	dc.b   8
0003FE77 18                         	dc.b $18
0003FE78 00                         	dc.b   0
0003FE79 18                         	dc.b $18
0003FE7A 0C                         	dc.b  $C
0003FE7B 00                         	dc.b   0
0003FE7C 20                         	dc.b $20
0003FE7D E0                         	dc.b $E0 ; a
0003FE7E 18                         	dc.b $18
0003FE7F 0C                         	dc.b  $C
0003FE80 08                         	dc.b   8
0003FE81 20                         	dc.b $20
0003FE82 00                         	dc.b   0
0003FE83 20                         	dc.b $20
0003FE84 07                         	dc.b   7
0003FE85 00                         	dc.b   0
0003FE86 54                         	dc.b $54 ; T
0003FE87 F0                         	dc.b $F0 ; =
0003FE88 20                         	dc.b $20
0003FE89 07                         	dc.b   7
0003FE8A 08                         	dc.b   8
0003FE8B 54                         	dc.b $54 ; T
0003FE8C 00                         	dc.b   0
0003FE8D 00                         	dc.b   0
0003FE8E                            unk_23C992:
0003FE8E 0C                         	dc.b  $C
0003FE8F E0                         	dc.b $E0 ; a
0003FE90 01                         	dc.b   1
0003FE91 00                         	dc.b   0
0003FE92 24                         	dc.b $24 ; $
0003FE93 F8                         	dc.b $F8 ; °
0003FE94 E0                         	dc.b $E0 ; a
0003FE95 01                         	dc.b   1
0003FE96 08                         	dc.b   8
0003FE97 24                         	dc.b $24 ; $
0003FE98 00                         	dc.b   0
0003FE99 F0                         	dc.b $F0 ; =
0003FE9A 08                         	dc.b   8
0003FE9B 00                         	dc.b   0
0003FE9C 26                         	dc.b $26 ; &
0003FE9D E8                         	dc.b $E8 ; F
0003FE9E F0                         	dc.b $F0 ; =
0003FE9F 08                         	dc.b   8
0003FEA0 00                         	dc.b   0
0003FEA1 29                         	dc.b $29 ; )
0003FEA2 00                         	dc.b   0
0003FEA3 F8                         	dc.b $F8 ; °
0003FEA4 0D                         	dc.b  $D
0003FEA5 00                         	dc.b   0
0003FEA6 2C                         	dc.b $2C ; ,
0003FEA7 E0                         	dc.b $E0 ; a
0003FEA8 F8                         	dc.b $F8 ; °
0003FEA9 0D                         	dc.b  $D
0003FEAA 00                         	dc.b   0
0003FEAB 34                         	dc.b $34 ; 4
0003FEAC 00                         	dc.b   0
0003FEAD 08                         	dc.b   8
0003FEAE 0D                         	dc.b  $D
0003FEAF 00                         	dc.b   0
0003FEB0 3C                         	dc.b $3C ; <
0003FEB1 E0                         	dc.b $E0 ; a
0003FEB2 08                         	dc.b   8
0003FEB3 0D                         	dc.b  $D
0003FEB4 08                         	dc.b   8
0003FEB5 3C                         	dc.b $3C ; <
0003FEB6 00                         	dc.b   0
0003FEB7 18                         	dc.b $18
0003FEB8 0C                         	dc.b  $C
0003FEB9 00                         	dc.b   0
0003FEBA 20                         	dc.b $20
0003FEBB E0                         	dc.b $E0 ; a
0003FEBC 18                         	dc.b $18
0003FEBD 0C                         	dc.b  $C
0003FEBE 08                         	dc.b   8
0003FEBF 20                         	dc.b $20
0003FEC0 00                         	dc.b   0
0003FEC1 20                         	dc.b $20
0003FEC2 07                         	dc.b   7
0003FEC3 00                         	dc.b   0
0003FEC4 54                         	dc.b $54 ; T
0003FEC5 F0                         	dc.b $F0 ; =
0003FEC6 20                         	dc.b $20
0003FEC7 07                         	dc.b   7
0003FEC8 08                         	dc.b   8
0003FEC9 54                         	dc.b $54 ; T
0003FECA 00                         	dc.b   0
0003FECB 00                         	dc.b   0
0003FECC                            unk_23C9D0:
0003FECC 06                         	dc.b   6
0003FECD 08                         	dc.b   8
0003FECE 0D                         	dc.b  $D
0003FECF 00                         	dc.b   0
0003FED0 44                         	dc.b $44 ; D
0003FED1 E0                         	dc.b $E0 ; a
0003FED2 08                         	dc.b   8
0003FED3 0D                         	dc.b  $D
0003FED4 00                         	dc.b   0
0003FED5 4C                         	dc.b $4C ; L
0003FED6 00                         	dc.b   0
0003FED7 18                         	dc.b $18
0003FED8 0C                         	dc.b  $C
0003FED9 00                         	dc.b   0
0003FEDA 20                         	dc.b $20
0003FEDB E0                         	dc.b $E0 ; a
0003FEDC 18                         	dc.b $18
0003FEDD 0C                         	dc.b  $C
0003FEDE 08                         	dc.b   8
0003FEDF 20                         	dc.b $20
0003FEE0 00                         	dc.b   0
0003FEE1 20                         	dc.b $20
0003FEE2 07                         	dc.b   7
0003FEE3 00                         	dc.b   0
0003FEE4 54                         	dc.b $54 ; T
0003FEE5 F0                         	dc.b $F0 ; =
0003FEE6 20                         	dc.b $20
0003FEE7 07                         	dc.b   7
0003FEE8 08                         	dc.b   8
0003FEE9 54                         	dc.b $54 ; T
0003FEEA 00                         	dc.b   0
0003FEEB 00                         	dc.b   0
0003FEEC                            unk_23C9F0:
0003FEEC 01                         	dc.b   1
0003FEED F8                         	dc.b $F8 ; °
0003FEEE 05                         	dc.b   5
0003FEEF 00                         	dc.b   0
0003FEF0 5C                         	dc.b $5C ; \
0003FEF1 F8                         	dc.b $F8 ; °
0003FEF2                            unk_23C9F6:
0003FEF2 01                         	dc.b   1
0003FEF3 F8                         	dc.b $F8 ; °
0003FEF4 05                         	dc.b   5
0003FEF5 00                         	dc.b   0
0003FEF6 60                         	dc.b $60 ; `
0003FEF7 F8                         	dc.b $F8 ; °
0003FEF8                            unk_23C9FC:
0003FEF8 01                         	dc.b   1
0003FEF9 F8                         	dc.b $F8 ; °
0003FEFA 05                         	dc.b   5
0003FEFB 00                         	dc.b   0
0003FEFC 64                         	dc.b $64 ; d
0003FEFD F8                         	dc.b $F8 ; °
0003FEFE                            unk_23CA02:
0003FEFE 01                         	dc.b   1
0003FEFF F8                         	dc.b $F8 ; °
0003FF00 05                         	dc.b   5
0003FF01 08                         	dc.b   8
0003FF02 64                         	dc.b $64 ; d
0003FF03 F8                         	dc.b $F8 ; °
0003FF04                            unk_23CA08:
0003FF04 01                         	dc.b   1
0003FF05 F8                         	dc.b $F8 ; °
0003FF06 05                         	dc.b   5
0003FF07 08                         	dc.b   8
0003FF08 60                         	dc.b $60 ; `
0003FF09 F8                         	dc.b $F8 ; °
0003FF0A                            unk_23CA0E:
0003FF0A 01                         	dc.b   1
0003FF0B F8                         	dc.b $F8 ; °
0003FF0C 05                         	dc.b   5
0003FF0D 08                         	dc.b   8
0003FF0E 5C                         	dc.b $5C ; \
0003FF0F F8                         	dc.b $F8 ; °
0003FF0F F8                         	dc.b $F8 ; °
0003FF10                            	even
0003FF10                            Ani_FlowerCapsule:
0003FF10                            	include	"level/objects/flowercapsule/anim.asm"
0003FF10                            .Anim:
0003FF10 0000                       	dc.w	unk_23C912-.Anim
0003FF12 0000                       	dc.w	unk_23C93A-.Anim
0003FF14                            unk_23C912:
0003FF14 0100 0000 0000 0000 0000+  	dc.b	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0003FF24 0000 0000 0000 0000 0000+  	dc.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
0003FF34 0000 0100 0001 FF          	dc.b	0, 0, 1, 0, 0, 1, $FF
0003FF3C 00                         	even
0003FF3C                            unk_23C93A:
0003FF3C 0203 0405 0607 08FF        	dc.b   2, 3, 4, 5, 6, 7, 8, $FF
0003FF44                            	even
0003FF44                            	even
0003FF44                            	even
0003FF44                            ArtNem_Projector:
0003FF44                            	incbin	"level/objects/projector/art.bin"
00040344                            	even
00040344                            ArtNem_AmyRose:
00040344                            	incbin	"level/objects/amyrose/art.bin"
00040DBA                            	even
00040DBA                            MapSpr_AmyRose:	
00040DBA                            	include	"level/objects/amyrose/map.asm"
00040DBA                            .Map:
00040DBA 0000                       	dc.w unk_23FD3E-.Map
00040DBC 0000                       	dc.w unk_23FD54-.Map
00040DBE 0000                       	dc.w unk_23FD60-.Map
00040DC0 0000                       	dc.w unk_23FD6C-.Map
00040DC2 0000                       	dc.w unk_23FD82-.Map
00040DC4 0000                       	dc.w unk_23FD98-.Map
00040DC6 0000                       	dc.w unk_23FDA4-.Map
00040DC8 0000                       	dc.w unk_23FDB4-.Map
00040DCA 0000                       	dc.w unk_23FDC0-.Map
00040DCC 0000                       	dc.w unk_23FDC6-.Map
00040DCE 0000                       	dc.w unk_23FDCC-.Map
00040DD0 0000                       	dc.w unk_23FDD2-.Map
00040DD2 0000                       	dc.w unk_23FDE2-.Map
00040DD4 0000                       	dc.w unk_23FDEE-.Map
00040DD6 0000                       	dc.w unk_23FE08-.Map
00040DD8 0000                       	dc.w unk_23FE18-.Map
00040DDA 0000                       	dc.w unk_23FE28-.Map
00040DDC 04                         unk_23FD3E:	dc.b   4
00040DDD E8                         		dc.b $E8 ; è
00040DDE 0D                         		dc.b  $D
00040DDF 00                         		dc.b   0
00040DE0 43                         		dc.b $43 ; C
00040DE1 F0                         		dc.b $F0 ; ð
00040DE2 F8                         		dc.b $F8 ; ø
00040DE3 0C                         		dc.b  $C
00040DE4 00                         		dc.b   0
00040DE5 4B                         		dc.b $4B ; K
00040DE6 F0                         		dc.b $F0 ; ð
00040DE7 00                         		dc.b   0
00040DE8 08                         		dc.b   8
00040DE9 00                         		dc.b   0
00040DEA 4F                         		dc.b $4F ; O
00040DEB F0                         		dc.b $F0 ; ð
00040DEC 08                         		dc.b   8
00040DED 0C                         		dc.b  $C
00040DEE 00                         		dc.b   0
00040DEF 52                         		dc.b $52 ; R
00040DF0 F0                         		dc.b $F0 ; ð
00040DF1 00                         		dc.b   0
00040DF2 02                         unk_23FD54:	dc.b   2
00040DF3 E8                         		dc.b $E8 ; è
00040DF4 09                         		dc.b   9
00040DF5 00                         		dc.b   0
00040DF6 00                         		dc.b   0
00040DF7 F4                         		dc.b $F4 ; ô
00040DF8 F8                         		dc.b $F8 ; ø
00040DF9 0A                         		dc.b  $A
00040DFA 00                         		dc.b   0
00040DFB 3A                         		dc.b $3A ; :
00040DFC F4                         		dc.b $F4 ; ô
00040DFD 00                         		dc.b   0
00040DFE 02                         unk_23FD60:	dc.b   2
00040DFF E8                         		dc.b $E8 ; è
00040E00 0D                         		dc.b  $D
00040E01 00                         		dc.b   0
00040E02 43                         		dc.b $43 ; C
00040E03 F0                         		dc.b $F0 ; ð
00040E04 F8                         		dc.b $F8 ; ø
00040E05 0E                         		dc.b  $E
00040E06 00                         		dc.b   0
00040E07 56                         		dc.b $56 ; V
00040E08 F0                         		dc.b $F0 ; ð
00040E09 00                         		dc.b   0
00040E0A 04                         unk_23FD6C:	dc.b   4
00040E0B E8                         		dc.b $E8 ; è
00040E0C 09                         		dc.b   9
00040E0D 00                         		dc.b   0
00040E0E 00                         		dc.b   0
00040E0F F4                         		dc.b $F4 ; ô
00040E10 F8                         		dc.b $F8 ; ø
00040E11 08                         		dc.b   8
00040E12 00                         		dc.b   0
00040E13 06                         		dc.b   6
00040E14 F4                         		dc.b $F4 ; ô
00040E15 00                         		dc.b   0
00040E16 04                         		dc.b   4
00040E17 00                         		dc.b   0
00040E18 09                         		dc.b   9
00040E19 FC                         		dc.b $FC ; ü
00040E1A 08                         		dc.b   8
00040E1B 08                         		dc.b   8
00040E1C 00                         		dc.b   0
00040E1D 0B                         		dc.b  $B
00040E1E F4                         		dc.b $F4 ; ô
00040E1F 00                         		dc.b   0
00040E20 04                         unk_23FD82:	dc.b   4
00040E21 E8                         		dc.b $E8 ; è
00040E22 09                         		dc.b   9
00040E23 00                         		dc.b   0
00040E24 00                         		dc.b   0
00040E25 F4                         		dc.b $F4 ; ô
00040E26 F8                         		dc.b $F8 ; ø
00040E27 08                         		dc.b   8
00040E28 00                         		dc.b   0
00040E29 0E                         		dc.b  $E
00040E2A F4                         		dc.b $F4 ; ô
00040E2B 00                         		dc.b   0
00040E2C 04                         		dc.b   4
00040E2D 00                         		dc.b   0
00040E2E 11                         		dc.b $11
00040E2F FC                         		dc.b $FC ; ü
00040E30 08                         		dc.b   8
00040E31 08                         		dc.b   8
00040E32 00                         		dc.b   0
00040E33 13                         		dc.b $13
00040E34 F4                         		dc.b $F4 ; ô
00040E35 00                         		dc.b   0
00040E36 02                         unk_23FD98:	dc.b   2
00040E37 E8                         		dc.b $E8 ; è
00040E38 09                         		dc.b   9
00040E39 00                         		dc.b   0
00040E3A 00                         		dc.b   0
00040E3B F4                         		dc.b $F4 ; ô
00040E3C F8                         		dc.b $F8 ; ø
00040E3D 0A                         		dc.b  $A
00040E3E 00                         		dc.b   0
00040E3F 16                         		dc.b $16
00040E40 F4                         		dc.b $F4 ; ô
00040E41 00                         		dc.b   0
00040E42 03                         unk_23FDA4:	dc.b   3
00040E43 E8                         		dc.b $E8 ; è
00040E44 0E                         		dc.b  $E
00040E45 00                         		dc.b   0
00040E46 6E                         		dc.b $6E ; n
00040E47 F0                         		dc.b $F0 ; ð
00040E48 00                         		dc.b   0
00040E49 08                         		dc.b   8
00040E4A 00                         		dc.b   0
00040E4B 7A                         		dc.b $7A ; z
00040E4C F0                         		dc.b $F0 ; ð
00040E4D 08                         		dc.b   8
00040E4E 04                         		dc.b   4
00040E4F 00                         		dc.b   0
00040E50 7D                         		dc.b $7D ; }
00040E51 F0                         		dc.b $F0 ; ð
00040E52 02                         unk_23FDB4:	dc.b   2
00040E53 E8                         		dc.b $E8 ; è
00040E54 0A                         		dc.b  $A
00040E55 00                         		dc.b   0
00040E56 7F                         		dc.b $7F ; 
00040E57 F8                         		dc.b $F8 ; ø
00040E58 00                         		dc.b   0
00040E59 0D                         		dc.b  $D
00040E5A 00                         		dc.b   0
00040E5B 88                         		dc.b $88 ; ˆ
00040E5C F0                         		dc.b $F0 ; ð
00040E5D 00                         		dc.b   0
00040E5E 01                         unk_23FDC0:	dc.b   1
00040E5F F8                         		dc.b $F8 ; ø
00040E60 05                         		dc.b   5
00040E61 00                         		dc.b   0
00040E62 62                         		dc.b $62 ; b
00040E63 F8                         		dc.b $F8 ; ø
00040E64 01                         unk_23FDC6:	dc.b   1
00040E65 F8                         		dc.b $F8 ; ø
00040E66 05                         		dc.b   5
00040E67 00                         		dc.b   0
00040E68 66                         		dc.b $66 ; f
00040E69 F8                         		dc.b $F8 ; ø
00040E6A 01                         unk_23FDCC:	dc.b   1
00040E6B F8                         		dc.b $F8 ; ø
00040E6C 05                         		dc.b   5
00040E6D 00                         		dc.b   0
00040E6E 6A                         		dc.b $6A ; j
00040E6F F8                         		dc.b $F8 ; ø
00040E70 03                         unk_23FDD2:	dc.b   3
00040E71 E8                         		dc.b $E8 ; è
00040E72 0A                         		dc.b  $A
00040E73 00                         		dc.b   0
00040E74 1F                         		dc.b $1F
00040E75 F4                         		dc.b $F4 ; ô
00040E76 F0                         		dc.b $F0 ; ð
00040E77 00                         		dc.b   0
00040E78 00                         		dc.b   0
00040E79 28                         		dc.b $28 ; (
00040E7A 0C                         		dc.b  $C
00040E7B 00                         		dc.b   0
00040E7C 09                         		dc.b   9
00040E7D 00                         		dc.b   0
00040E7E 32                         		dc.b $32 ; 2
00040E7F F4                         		dc.b $F4 ; ô
00040E80 02                         unk_23FDE2:	dc.b   2
00040E81 E8                         		dc.b $E8 ; è
00040E82 0A                         		dc.b  $A
00040E83 00                         		dc.b   0
00040E84 29                         		dc.b $29 ; )
00040E85 F4                         		dc.b $F4 ; ô
00040E86 00                         		dc.b   0
00040E87 09                         		dc.b   9
00040E88 00                         		dc.b   0
00040E89 32                         		dc.b $32 ; 2
00040E8A F4                         		dc.b $F4 ; ô
00040E8B 00                         		dc.b   0
00040E8C 05                         unk_23FDEE:	dc.b   5
00040E8D F4                         		dc.b $F4 ; ô
00040E8E 04                         		dc.b   4
00040E8F 00                         		dc.b   0
00040E90 38                         		dc.b $38 ; 8
00040E91 FE                         		dc.b $FE ; þ
00040E92 E8                         		dc.b $E8 ; è
00040E93 09                         		dc.b   9
00040E94 00                         		dc.b   0
00040E95 00                         		dc.b   0
00040E96 F4                         		dc.b $F4 ; ô
00040E97 F8                         		dc.b $F8 ; ø
00040E98 08                         		dc.b   8
00040E99 00                         		dc.b   0
00040E9A 0E                         		dc.b  $E
00040E9B F4                         		dc.b $F4 ; ô
00040E9C 00                         		dc.b   0
00040E9D 04                         		dc.b   4
00040E9E 00                         		dc.b   0
00040E9F 11                         		dc.b $11
00040EA0 FC                         		dc.b $FC ; ü
00040EA1 08                         		dc.b   8
00040EA2 08                         		dc.b   8
00040EA3 00                         		dc.b   0
00040EA4 13                         		dc.b $13
00040EA5 F4                         		dc.b $F4 ; ô
00040EA6 03                         unk_23FE08:	dc.b   3
00040EA7 F8                         		dc.b $F8 ; ø
00040EA8 04                         		dc.b   4
00040EA9 00                         		dc.b   0
00040EAA 38                         		dc.b $38 ; 8
00040EAB FE                         		dc.b $FE ; þ
00040EAC EC                         		dc.b $EC ; ì
00040EAD 0A                         		dc.b  $A
00040EAE 00                         		dc.b   0
00040EAF 7F                         		dc.b $7F ; 
00040EB0 F8                         		dc.b $F8 ; ø
00040EB1 04                         		dc.b   4
00040EB2 0D                         		dc.b  $D
00040EB3 00                         		dc.b   0
00040EB4 88                         		dc.b $88 ; ˆ
00040EB5 F0                         		dc.b $F0 ; ð
00040EB6 03                         unk_23FE18:	dc.b   3
00040EB7 F4                         		dc.b $F4 ; ô
00040EB8 04                         		dc.b   4
00040EB9 00                         		dc.b   0
00040EBA 38                         		dc.b $38 ; 8
00040EBB FE                         		dc.b $FE ; þ
00040EBC E8                         		dc.b $E8 ; è
00040EBD 0A                         		dc.b  $A
00040EBE 00                         		dc.b   0
00040EBF 29                         		dc.b $29 ; )
00040EC0 F4                         		dc.b $F4 ; ô
00040EC1 00                         		dc.b   0
00040EC2 09                         		dc.b   9
00040EC3 00                         		dc.b   0
00040EC4 32                         		dc.b $32 ; 2
00040EC5 F4                         		dc.b $F4 ; ô
00040EC6 03                         unk_23FE28:	dc.b   3
00040EC7 EC                         		dc.b $EC ; ì
00040EC8 0A                         		dc.b  $A
00040EC9 00                         		dc.b   0
00040ECA 7F                         		dc.b $7F ; 
00040ECB F8                         		dc.b $F8 ; ø
00040ECC 04                         		dc.b   4
00040ECD 0C                         		dc.b  $C
00040ECE 00                         		dc.b   0
00040ECF 90                         		dc.b $90 ; 
00040ED0 F0                         		dc.b $F0 ; ð
00040ED1 0C                         		dc.b  $C
00040ED2 08                         		dc.b   8
00040ED3 00                         		dc.b   0
00040ED4 94                         		dc.b $94 ; ”
00040ED5 F0                         		dc.b $F0 ; ð
00040ED5 F0                         		dc.b $F0 ; ð
00040ED6                            	even
00040ED6                            Ani_AmyRose:
00040ED6                            	include	"level/objects/amyrose/anim.asm"
00040ED6                            .Anim:
00040ED6 0000                       	dc.w byte_23FE5C-.Anim
00040ED8 0000                       	dc.w byte_23FE44-.Anim
00040EDA 0000                       	dc.w byte_23FE4E-.Anim
00040EDC 0000                       	dc.w byte_23FE58-.Anim
00040EDE 0000                       	dc.w byte_23FE62-.Anim
00040EE0 0000                       	dc.w byte_23FE68-.Anim
00040EE2 030B 040B 050B 040B FF00   byte_23FE44:	dc.b 3,	$B, 4, $B, 5, $B, 4, $B, $FF, 0
00040EEC 0003 0102 0203 0102 FF00   byte_23FE4E:	dc.b 0,	3, 1, 2, 2, 3, 1, 2, $FF, 0
00040EF6 0E09 FF00                  byte_23FE58:	dc.b $E, 9, $FF, 0
00040EFA 0B13 0C13 FF00             byte_23FE5C:	dc.b $B, $13, $C, $13, $FF, 0
00040F00 0609 0709 FF00             byte_23FE62:	dc.b 6,	9, 7, 9, $FF, 0
00040F06 0B1D 0C1D 0B1D 0C31 FF00   byte_23FE68:	dc.b $B, $1D, $C, $1D, $B, $1D,	$C, $31, $FF, 0
00040F06 0B1D 0C1D 0B1D 0C31 FF00   byte_23FE68:	dc.b $B, $1D, $C, $1D, $B, $1D,	$C, $31, $FF, 0
00040F10                            	even
00040F10                            ; Palmtree Panic Act 1 Tiles
00040F10                            Nem_GHZ_1st:
00040F10                            ArtNem_LevelArt:
00040F10                            	incbin	"level/level/PPZ1/Tiles/art.bin"
00043796                            	even
00043796                            ArtNem_PPZ_P:
00043796                                incbin "level/level/PPZ1/Tiles/art_p.bin"	
00045F84                                even
00045F84                            ArtNem_PPZ_GF:
00045F84                                incbin "level/level/PPZ1/Tiles/R11C.bin"	
00048958                                even	
00048958                            ArtNem_PPZ_F:
00048958                                incbin "level/level/PPZ1/Tiles/R11D.bin"	
0004B586 00                             even
0004B586                            ; Palmtree Panic Act 1 Chunks (map256_u)
0004B586                            PPZ_ChunksP:
0004B586                                incbin	"level/level/PPZ1/Map256_u/chunks_p.bin"
00058986                            	even
00058986                            PPZ_ChunksGF:
00058986                                incbin	"level/level/PPZ1/Map256_u/R11C.bin"
00066186                            	even
00066186                            PPZ_ChunksBF:
00066186                                incbin	"level/level/PPZ1/Map256_u/R11D.bin"
00073986                            	even
00073986                            ; Palmtree Panic Act 1 Blocks	
00073986                            Blk16_GHZ:
00073986                            MapNem_LevelBlocks:
00073986                            	incbin	"level/level/PPZ1/Map16/blocks.bin"
00074DCC                            	even
00074DCC                            MapNem_PPZ_P_Blocks:
00074DCC                            	incbin	"level/level/PPZ1/Map16/blocks_p.bin"
00075E50 00                         	even
00075E50                            MapNem_PPZ_GF_Blocks:
00075E50                            	incbin	"level/level/PPZ1/Map16/R11C.bin"
0007703E                            	even
0007703E                            MapNem_PPZ_BF_Blocks:
0007703E                            	incbin	"level/level/PPZ1/Map16/R11D.bin"
000782A2 00                         	even
000782A2                            ; Palmtree Panic Act 2 Tiles
000782A2                            ArtNem_PPZ_2:
000782A2                                incbin "level/level/PPZ2/Tiles/R12A.bin"
0007ABAE                                even
0007ABAE                            ArtNem_PPZ_2P:
0007ABAE                                incbin "level/level/PPZ2/Tiles/R12B.bin"
0007D5E0                                even
0007D5E0                            ArtNem_PPZ_2GF:
0007D5E0                                incbin "level/level/PPZ2/Tiles/R12C.bin"
00080176                                even
00080176                            ArtNem_PPZ_2BF:
00080176                                incbin "level/level/PPZ2/Tiles/R12D.bin"
00082F1C 00                             even
00082F1C                            ; Palmtree Panic Act 2 Chunks (map256_u)
00082F1C                            PPZ_2_Chunks:
00082F1C                                incbin	"level/level/PPZ2/map256_u/R12A.bin"
0009031C                            	even
0009031C                            PPZ_2_ChunksP:
0009031C                                incbin	"level/level/PPZ2/map256_u/R12B.bin"
0009D71C                            	even
0009D71C                            PPZ_2_ChunksGF:
0009D71C                                incbin	"level/level/PPZ2/map256_u/R12C.bin"
000AAB1C                            	even
000AAB1C                            PPZ_2_ChunksBF:
000AAB1C                                incbin	"level/level/PPZ2/map256_u/R12D.bin"
000B7F1C                            	even
000B7F1C                            ; Palmtree Panic Act 2 Blocks (map16)
000B7F1C                            PPZ_2_Blocks:
000B7F1C                                incbin	"level/level/PPZ2/Map16/R12A.bin"
000B9056                            	even
000B9056                            PPZ_2_BlocksP:
000B9056                                incbin	"level/level/PPZ2/Map16/R12B.bin"
000BA1CA 00                         	even
000BA1CA                            PPZ_2_BlocksGF:
000BA1CA                                incbin	"level/level/PPZ2/Map16/R12C.bin"
000BB472                            	even
000BB472                            PPZ_2_BlocksBF:
000BB472                                incbin	"level/level/PPZ2/Map16/R12D.bin"
000BC74C 00                         	even
000BC74C                            ; Palmtree Panic Act 3 Tiles
000BC74C                            ArtNem_PPZ_3:
000BC74C                                incbin "level/level/PPZ3/Tiles/R13C.bin"
000BF230                                even
000BF230                            ArtNem_PPZ_3BF:
000BF230                                incbin "level/level/PPZ3/Tiles/R13D.bin"
000C1FD6 00                             even
000C1FD6                            ; Palmtree Panic Act 3 Chunks (map256_u)
000C1FD6                            PPZ_3_Chunks:
000C1FD6                                incbin	"level/level/PPZ3/map256_u/R13C.bin"
000CF3D6                            	even
000CF3D6                            PPZ_3_Chunks_BF:
000CF3D6                                incbin	"level/level/PPZ3/map256_u/R13D.bin"
000DC7D6                            	even
000DC7D6                            ; Palmtree Panic Act 3 Blocks (map16)
000DC7D6                            PPZ_3_Blocks:
000DC7D6                                incbin	"level/level/PPZ3/Map16/R13C.bin"
000DD9D2                            	even		
000DD9D2                            PPZ_3_Blocks_BF:
000DD9D2                                incbin	"level/level/PPZ3/Map16/R13D.bin"
000DEC76                            	even
000DEC76                            PPZ_Eggman:
000DEC76                               include "_incObj/PPZ_Eggman.asm"	
000DEC76                            ObjBossEggman:                          ; DATA XREF: ROM:00203C22↑o
000DEC76 6100 0000                          bsr.w   sub_20B9A6
000DEC7A 6100 0000                          bsr.w   sub_20B9CA
000DEC7E 6100 0000                          bsr.w   sub_20BAC0
000DEC82 6100 0000                          bsr.w   sub_20B9FC
000DEC86 7000                               moveq   #0,d0
000DEC88 1028 0024                          move.b  oRoutine(a0),d0
000DEC8C 303B 0000                          move.w  off_20B996(pc,d0.w),d0
000DEC90 4EBB 0000                          jsr     off_20B996(pc,d0.w)
000DEC94 43F9 0000 0000                     lea     (Ani_20D7BC).l,a1
000DEC9A 4EB8 61F4                          jsr     AnimateObject
000DEC9E 4EF8 4012                          jmp     DrawObject
000DECA2                            ; End of function ObjBossEggman
000DECA2                            
000DECA2                            ; ---------------------------------------------------------------------------
000DECA2 0000                       off_20B996:dc.w ObjBossEggman_0_Routine0-off_20B996
000DECA4                                                                    ; CODE XREF: ObjBossEggman+1A↑p
000DECA4                                                                    ; DATA XREF: ...
000DECA4 0000                               dc.w ObjBossEggman_0_Routine2-off_20B996
000DECA6 0000                               dc.w ObjBossEggman_0_Routine4-off_20B996
000DECA8 0000                               dc.w ObjBossEggman_0_Routine6-off_20B996
000DECAA 0000                               dc.w ObjBossEggman_0_Routine8-off_20B996
000DECAC 0000                               dc.w ObjBossEggman_0_RoutineA-off_20B996
000DECAE 0000                               dc.w ObjBossEggman_0_RoutineC-off_20B996
000DECB0 0000                               dc.w ObjBossEggman_0_RoutineE-off_20B996
000DECB2                            
000DECB2                            ; =============== S U B R O U T I N E =======================================
000DECB2                            
000DECB2                            
000DECB2                            sub_20B9A6:                             ; CODE XREF: ObjBossEggman↑p
000DECB2 4A28 002A                          tst.b   oVar2A(a0)
000DECB6 6700                               beq.s   locret_20B9C8
000DECB8 5328 002A                          subq.b  #1,oVar2A(a0)
000DECBC 6600                               bne.s   locret_20B9C8
000DECBE 4228 001A                          clr.b   oSprFrame(a0)
000DECC2 4228 001B                          clr.b   oAnimFrame(a0)
000DECC6 4228 001E                          clr.b   oAnimTime(a0)
000DECCA 4228 001F                          clr.b   oVar1F(a0)
000DECCE 117C 0000 001C                     move.b  #0,oAnim(a0)
000DECD4                            
000DECD4                            locret_20B9C8:                          ; CODE XREF: sub_20B9A6+4↑j ...
000DECD4 4E75                               rts
000DECD6                            ; End of function sub_20B9A6
000DECD6                            
000DECD6                            
000DECD6                            ; =============== S U B R O U T I N E =======================================
000DECD6                            
000DECD6                            
000DECD6                            sub_20B9CA:                             ; CODE XREF: ObjBossEggman+4↑p
000DECD6 323C 0310                          move.w  #$310,d1
000DECDA 4A38 F7A7                          tst.b   (bossFlags).w
000DECDE 6700                               beq.s   loc_20B9F2
000DECE0 323C 0100                          move.w  #$100,d1
000DECE4 4A28 0035                          tst.b   oVar35(a0)
000DECE8 6700                               beq.s   loc_20B9F2
000DECEA 5328 0035                          subq.b  #1,oVar35(a0)
000DECEE 303C 0001                          move.w  #1,d0
000DECF2 0828 0000 0035                     btst    #0,oVar35(a0)
000DECF8 6700                               beq.s   loc_20B9F0
000DECFA 4440                               neg.w   d0
000DECFC                            
000DECFC                            loc_20B9F0:                             ; CODE XREF: sub_20B9CA+22↑j
000DECFC D240                               add.w   d0,d1
000DECFE                            
000DECFE                            loc_20B9F2:                             ; CODE XREF: sub_20B9CA+8↑j ...
000DECFE 31C1 F72E                          move.w  d1,(bottomBound).w
000DED02 31C1 F726                          move.w  d1,(destBottomBound).w
000DED06 4E75                               rts
000DED08                            ; End of function sub_20B9CA
000DED08                            
000DED08                            
000DED08                            ; =============== S U B R O U T I N E =======================================
000DED08                            
000DED08                            
000DED08                            sub_20B9FC:                             ; CODE XREF: ObjBossEggman+C↑p
000DED08                            
000DED08                            ; FUNCTION CHUNK AT 0020BAF8 SIZE 000000AA BYTES
000DED08                            
000DED08 4A28 0034                          tst.b   oVar34(a0)
000DED0C 6600                               bne.s   loc_20BA0C
000DED0E 0828 0003 002C                     btst    #3,oVar2C(a0)
000DED14 6600                               bne.s   loc_20BA1A
000DED16 4E75                               rts
000DED18                            ; ---------------------------------------------------------------------------
000DED18                            
000DED18                            loc_20BA0C:                             ; CODE XREF: sub_20B9FC+4↑j
000DED18 5328 0034                          subq.b  #1,oVar34(a0)
000DED1C 6600                               bne.s   locret_20BA18
000DED1E 4EB9 0000 0000                     jsr     sub_20BC06
000DED24                            
000DED24                            locret_20BA18:                          ; CODE XREF: sub_20B9FC+14↑j
000DED24 4E75                               rts
000DED26                            ; ---------------------------------------------------------------------------
000DED26                            
000DED26                            loc_20BA1A:                             ; CODE XREF: sub_20B9FC+C↑j
000DED26 2248                               movea.l a0,a1
000DED28 4A29 0020                          tst.b   $20(a1)
000DED2C 6700 0000                          beq.w   loc_20BAF8
000DED30 3268 0030                          movea.w oVar30(a0),a1
000DED34 3269 0030                          movea.w $30(a1),a1
000DED38 3269 0030                          movea.w $30(a1),a1
000DED3C 4A29 0020                          tst.b   $20(a1)
000DED40 6700 0000                          beq.w   loc_20BAF8
000DED44 3269 0030                          movea.w $30(a1),a1
000DED48 4A29 0020                          tst.b   $20(a1)
000DED4C 6700 0000                          beq.w   loc_20BAF8
000DED50 3268 0030                          movea.w oVar30(a0),a1
000DED54 3269 0032                          movea.w $32(a1),a1
000DED58 3269 0030                          movea.w $30(a1),a1
000DED5C 4A29 0020                          tst.b   $20(a1)
000DED60 6700 0000                          beq.w   loc_20BAF8
000DED64 3269 0030                          movea.w $30(a1),a1
000DED68 4A29 0020                          tst.b   $20(a1)
000DED6C 6700 0000                          beq.w   loc_20BAF8
000DED70 0C28 0003 002B                     cmpi.b  #3,oVar2B(a0)
000DED76 6700                               beq.s   loc_20BA76
000DED78 0C28 0002 002B                     cmpi.b  #2,oVar2B(a0)
000DED7E 6700                               beq.s   loc_20BA8E
000DED80 4E75                               rts
000DED82                            ; ---------------------------------------------------------------------------
000DED82                            
000DED82                            loc_20BA76:                             ; CODE XREF: sub_20B9FC+6E↑j
000DED82 3268 0032                          movea.w oVar32(a0),a1
000DED86 3269 0032                          movea.w $32(a1),a1
000DED8A 3269 0030                          movea.w $30(a1),a1
000DED8E 3269 0030                          movea.w $30(a1),a1
000DED92 4A29 0020                          tst.b   $20(a1)
000DED96 6700 0000                          beq.w   loc_20BAA8
000DED9A                            
000DED9A                            loc_20BA8E:                             ; CODE XREF: sub_20B9FC+76↑j
000DED9A 3268 0032                          movea.w oVar32(a0),a1
000DED9E 3269 0030                          movea.w $30(a1),a1
000DEDA2 3269 0030                          movea.w $30(a1),a1
000DEDA6 3269 0030                          movea.w $30(a1),a1
000DEDAA 4A29 0020                          tst.b   $20(a1)
000DEDAE 6700 0000                          beq.w   loc_20BAA8
000DEDB2 4E75                               rts
000DEDB4                            ; ---------------------------------------------------------------------------
000DEDB4                            
000DEDB4                            loc_20BAA8:                             ; CODE XREF: sub_20B9FC+8E↑j ...
000DEDB4 08E9 0004 002C                     bset    #4,$2C(a1)
000DEDBA 6100 0000                          bsr.w   sub_20BBCE
000DEDBE 6100 0000                          bsr.w   sub_20BC06
000DEDC2 303C 00CC                          move.w  #sfx_bumper,d0
000DEDC6 4EB8 2708                          jsr     PlayFMSound
000DEDCA                            ; End of function sub_20B9FC
000DEDCA                            
000DEDCA                            
000DEDCA                            ; =============== S U B R O U T I N E =======================================
000DEDCA                            
000DEDCA                            
000DEDCA                            sub_20BAC0:                             ; CODE XREF: ObjBossEggman+8↑p
000DEDCA 4A28 001C                          tst.b   oAnim(a0)
000DEDCE 6600                               bne.s   locret_20BAD8
000DEDD0 43F8 D000                          lea     (v_player).w,a1
000DEDD4 4A69 0030                          tst.w   objPlayerSlot+oVar30-objPlayerSlot(a1)
000DEDD8 6600                               bne.s   loc_20BADA
000DEDDA 0C29 0006 0024                     cmpi.b  #6,$24(a1)
000DEDE0 6700                               beq.s   loc_20BADA
000DEDE2                            
000DEDE2                            locret_20BAD8:                          ; CODE XREF: sub_20BAC0+4↑j
000DEDE2 4E75                               rts
000DEDE4                            ; ---------------------------------------------------------------------------
000DEDE4                            
000DEDE4                            loc_20BADA:                             ; CODE XREF: sub_20BAC0+E↑j ...
000DEDE4 4228 001A                          clr.b   oSprFrame(a0)
000DEDE8 4228 001B                          clr.b   oAnimFrame(a0)
000DEDEC 4228 001E                          clr.b   oAnimTime(a0)
000DEDF0 4228 001F                          clr.b   oVar1F(a0)
000DEDF4 117C 0001 001C                     move.b  #1,oAnim(a0)
000DEDFA 117C 003C 002A                     move.b  #$3C,oVar2A(a0) ; '<'
000DEE00 4E75                               rts
000DEE02                            ; End of function sub_20BAC0
000DEE02                            
000DEE02                            ; ---------------------------------------------------------------------------
000DEE02                            ; START OF FUNCTION CHUNK FOR sub_20B9FC
000DEE02                            
000DEE02                            loc_20BAF8:                             ; CODE XREF: sub_20B9FC+24↑j ...
000DEE02 117C 0014 0034                     move.b  #$14,oVar34(a0)
000DEE08 6100 0000                          bsr.w   sub_20BBCE
000DEE0C 4228 001A                          clr.b   oSprFrame(a0)
000DEE10 4228 001B                          clr.b   oAnimFrame(a0)
000DEE14 4228 001E                          clr.b   oAnimTime(a0)
000DEE18 4228 001F                          clr.b   oVar1F(a0)
000DEE1C 117C 0002 001C                     move.b  #2,oAnim(a0)
000DEE22 117C 0078 002A                     move.b  #$78,oVar2A(a0) ; 'x'
000DEE28 5328 002B                          subq.b  #1,oVar2B(a0)
000DEE2C 6700 0000                          beq.w   loc_20BB4C
000DEE30 0C28 0002 002B                     cmpi.b  #2,oVar2B(a0)
000DEE36 6700 0000                          beq.w   loc_20BB3E
000DEE3A 3268 0032                          movea.w oVar32(a0),a1
000DEE3E 08E9 0006 002C                     bset    #6,$2C(a1)
000DEE44 6000 0000                          bra.w   loc_20BC38
000DEE48                            ; ---------------------------------------------------------------------------
000DEE48                            
000DEE48                            loc_20BB3E:                             ; CODE XREF: sub_20B9FC+130↑j
000DEE48 3268 0032                          movea.w oVar32(a0),a1
000DEE4C 08E9 0005 002C                     bset    #5,$2C(a1)
000DEE52 6000 0000                          bra.w   loc_20BC2C
000DEE56                            ; ---------------------------------------------------------------------------
000DEE56                            
000DEE56                            loc_20BB4C:                             ; CODE XREF: sub_20B9FC+126↑j
000DEE56 4228 001A                          clr.b   oSprFrame(a0)
000DEE5A 4228 001B                          clr.b   oAnimFrame(a0)
000DEE5E 4228 001E                          clr.b   oAnimTime(a0)
000DEE62 4228 001F                          clr.b   oVar1F(a0)
000DEE66 117C 0002 001C                     move.b  #2,oAnim(a0)
000DEE6C 4228 002A                          clr.b   oVar2A(a0)
000DEE70 08A8 0003 002C                     bclr    #3,oVar2C(a0)
000DEE76 4228 0025                          clr.b   oRoutine2(a0)
000DEE7A 117C 0006 0024                     move.b  #6,oRoutine(a0)
000DEE80 4228 0020                          clr.b   oColType(a0)
000DEE84 4228 0021                          clr.b   oColStatus(a0)
000DEE88 3268 0032                          movea.w oVar32(a0),a1
000DEE8C 137C 0004 0024                     move.b  #4,$24(a1)
000DEE92 3268 0030                          movea.w oVar30(a0),a1
000DEE96 137C 000E 0024                     move.b  #$E,$24(a1)
000DEE9C 3269 0030                          movea.w $30(a1),a1
000DEEA0 6100 0000                          bsr.w   sub_20BBA2
000DEEA4 3268 0030                          movea.w oVar30(a0),a1
000DEEA8 3269 0032                          movea.w $32(a1),a1
000DEEAC                            ; END OF FUNCTION CHUNK FOR sub_20B9FC
000DEEAC                            
000DEEAC                            ; =============== S U B R O U T I N E =======================================
000DEEAC                            
000DEEAC                            
000DEEAC                            sub_20BBA2:                             ; CODE XREF: sub_20B9FC+19A↑p
000DEEAC 137C 0018 0024                     move.b  #$18,$24(a1)
000DEEB2 3269 0030                          movea.w $30(a1),a1
000DEEB6 137C 000E 0024                     move.b  #$E,$24(a1)
000DEEBC 4229 0020                          clr.b   $20(a1)
000DEEC0 4229 0021                          clr.b   $21(a1)
000DEEC4 3269 0030                          movea.w $30(a1),a1
000DEEC8 137C 000C 0024                     move.b  #$C,$24(a1)
000DEECE 4229 0020                          clr.b   $20(a1)
000DEED2 4229 0021                          clr.b   $21(a1)
000DEED6 4E75                               rts
000DEED8                            ; End of function sub_20BBA2
000DEED8                            
000DEED8                            
000DEED8                            ; =============== S U B R O U T I N E =======================================
000DEED8                            
000DEED8                            
000DEED8                            sub_20BBCE:                             ; CODE XREF: sub_20B9FC+B2↑p ...
000DEED8 45F8 D000                          lea     (objPlayerSlot).w,a2
000DEEDC 323C 0400                          move.w  #$400,d1
000DEEE0 343C FC00                          move.w  #$FC00,d2
000DEEE4 357C 0400 0014                     move.w  #$400,$14(a2)
000DEEEA 082A 0001 0022                     btst    #1,$22(a2)
000DEEF0 6600                               bne.s   loc_20BBF0
000DEEF2 0A2A 0080 0026                     eori.b  #$80,$26(a2)
000DEEF8 7400                               moveq   #0,d2
000DEEFA                            
000DEEFA                            loc_20BBF0:                             ; CODE XREF: sub_20BBCE+18↑j
000DEEFA 302A 0008                          move.w  8(a2),d0
000DEEFE B069 0008                          cmp.w   8(a1),d0
000DEF02 6400                               bcc.s   loc_20BBFC
000DEF04 4441                               neg.w   d1
000DEF06                            
000DEF06                            loc_20BBFC:                             ; CODE XREF: sub_20BBCE+2A↑j
000DEF06 3541 0010                          move.w  d1,$10(a2)
000DEF0A 3542 0012                          move.w  d2,$12(a2)
000DEF0E 4E75                               rts
000DEF10                            ; End of function sub_20BBCE
000DEF10                            
000DEF10                            
000DEF10                            ; =============== S U B R O U T I N E =======================================
000DEF10                            
000DEF10                            
000DEF10                            sub_20BC06:                             ; CODE XREF: sub_20B9FC+16↑p ...
000DEF10 0C28 0003 002B                     cmpi.b  #3,oVar2B(a0)
000DEF16 6700                               beq.s   loc_20BC20
000DEF18 0C28 0002 002B                     cmpi.b  #2,oVar2B(a0)
000DEF1E 6700                               beq.s   loc_20BC2C
000DEF20 0C28 0001 002B                     cmpi.b  #1,oVar2B(a0)
000DEF26 6700                               beq.s   loc_20BC38
000DEF28 4E75                               rts
000DEF2A                            ; ---------------------------------------------------------------------------
000DEF2A                            
000DEF2A                            loc_20BC20:                             ; CODE XREF: sub_20BC06+6↑j
000DEF2A 3268 0032                          movea.w oVar32(a0),a1
000DEF2E 3269 0032                          movea.w $32(a1),a1
000DEF32 6100 0000                          bsr.w   sub_20BC92
000DEF36                            
000DEF36                            loc_20BC2C:                             ; CODE XREF: sub_20B9FC+14C↑j ...
000DEF36 3268 0032                          movea.w oVar32(a0),a1
000DEF3A 3269 0030                          movea.w $30(a1),a1
000DEF3E 6100 0000                          bsr.w   sub_20BC92
000DEF42                            
000DEF42                            loc_20BC38:                             ; CODE XREF: sub_20B9FC+13E↑j ...
000DEF42 117C 00FC 0020                     move.b  #$FC,oColType(a0)
000DEF48 117C 0002 0021                     move.b  #2,oColStatus(a0)
000DEF4E 3468 0030                          movea.w oVar30(a0),a2
000DEF52 326A 0030                          movea.w $30(a2),a1
000DEF56 3269 0030                          movea.w $30(a1),a1
000DEF5A 137C 00BD 0020                     move.b  #$BD,$20(a1)
000DEF60 137C 0002 0021                     move.b  #2,$21(a1)
000DEF66 3269 0030                          movea.w $30(a1),a1
000DEF6A 137C 00BE 0020                     move.b  #$BE,$20(a1)
000DEF70 137C 0002 0021                     move.b  #2,$21(a1)
000DEF76 326A 0032                          movea.w $32(a2),a1
000DEF7A 3269 0030                          movea.w $30(a1),a1
000DEF7E 137C 00BD 0020                     move.b  #$BD,$20(a1)
000DEF84 137C 0002 0021                     move.b  #2,$21(a1)
000DEF8A 3269 0030                          movea.w $30(a1),a1
000DEF8E 137C 00BE 0020                     move.b  #$BE,$20(a1)
000DEF94 137C 0002 0021                     move.b  #2,$21(a1)
000DEF9A 4E75                               rts
000DEF9C                            ; End of function sub_20BC06
000DEF9C                            
000DEF9C                            
000DEF9C                            ; =============== S U B R O U T I N E =======================================
000DEF9C                            
000DEF9C                            
000DEF9C                            sub_20BC92:                             ; CODE XREF: sub_20BC06+22↑p ...
000DEF9C 3269 0030                          movea.w $30(a1),a1
000DEFA0 3269 0030                          movea.w $30(a1),a1
000DEFA4 137C 00FF 0020                     move.b  #$FF,$20(a1)
000DEFAA 137C 0002 0021                     move.b  #2,$21(a1)
000DEFB0 4E75                               rts
000DEFB2                            ; End of function sub_20BC92
000DEFB2                            
000DEFB2                            
000DEFB2                            ; =============== S U B R O U T I N E =======================================
000DEFB2                            
000DEFB2                            
000DEFB2                            ObjBossEggman_0_Routine0:               ; DATA XREF: ROM:off_20B996↑o
000DEFB2 701D                               moveq   #$1D,d0
000DEFB4 4EB8 28CE                          jsr     AddPLCs
000DEFB8 11FC 0001 F7AA                     move.b  #1,(bossFight).w
000DEFBE 4228 0022                          clr.b   oFlags(a0)
000DEFC2 117C 0002 0024                     move.b  #2,oRoutine(a0)
000DEFC8 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000DEFCE 117C 0006 0018                     move.b  #6,oPriority(a0)
000DEFD4 117C 0014 0019                     move.b  #$14,oWidth(a0)
000DEFDA 117C 0008 0016                     move.b  #8,oYRadius(a0)
000DEFE0 317C 03FD 0002                     move.w  #$3FD,oTile(a0)
000DEFE6 217C 0000 0000 0004                move.l  #Spr_20D7DC,oSprites(a0)
000DEFEE 117C 0001 001C                     move.b  #1,oAnim(a0)
000DEFF4 4228 001A                          clr.b   oSprFrame(a0)
000DEFF8 4228 001B                          clr.b   oAnimFrame(a0)
000DEFFC 4228 001E                          clr.b   oAnimTime(a0)
000DF000 4228 001F                          clr.b   oVar1F(a0)
000DF004 317C 0C52 0008                     move.w  #$C52,oX(a0)
000DF00A 317C 0078 000C                     move.w  #$78,oY(a0) ; 'x'
000DF010 303C 0005                          move.w  #5,d0
000DF014 48E7 01FF                          movem.l d7-a7,-(sp)
000DF018 4EB8 06D4                          jsr     LoadPalette
000DF01C 4CDF FF80                          movem.l (sp)+,d7-a7
000DF020 4E75                               rts
000DF022                            ; End of function ObjBossEggman_0_Routine0
000DF022                            
000DF022                            
000DF022                            ; =============== S U B R O U T I N E =======================================
000DF022                            SpawnObjectWithXAndYCord:                             ; CODE XREF: sub_20BD36+2↓p ...
000DF022 4EB8 7CE4                          jsr     FindObjSlot
000DF026 6600 0000                          bne.w   locret_20BD34
000DF02A 3368 0008 0008                     move.w  oX(a0),oX(a1)
000DF030 3368 000C 000C                     move.w  oY(a0),oY(a1)
000DF036 7000                               moveq   #0,d0
000DF038                            
000DF038                            locret_20BD34:                          ; CODE XREF: SpawnObjectWithXAndYCord+6↑j
000DF038 4E75                               rts
000DF03A                            ; End of function SpawnObjectWithXAndYCord
000DF03A                            
000DF03A                            
000DF03A                            ; =============== S U B R O U T I N E =======================================
000DF03A                            
000DF03A                            
000DF03A                            sub_20BD36:                             ; CODE XREF: ObjBossEggman_0_RoutineE+22↓p
000DF03A 2648                               movea.l a0,a3
000DF03C 61E4                               bsr.s   SpawnObjectWithXAndYCord
000DF03E 6600 0000                          bne.w   locret_20BF42
000DF042 3749 0030                          move.w  a1,$30(a3)
000DF046 334B 002E                          move.w  a3,oVar2E(a1)
000DF04A 137C 0006 0018                     move.b  #6,oPriority(a1)
000DF050 12BC 0043                          move.b  #$43,obj(a1) ; '+'
000DF054 2649                               movea.l a1,a3
000DF056 2849                               movea.l a1,a4
000DF058 61C8                               bsr.s   SpawnObjectWithXAndYCord
000DF05A 6600 0000                          bne.w   locret_20BF42
000DF05E 3749 0030                          move.w  a1,$30(a3)
000DF062 334B 002E                          move.w  a3,oVar2E(a1)
000DF066 137C 0006 0018                     move.b  #6,oPriority(a1)
000DF06C 12BC 0044                          move.b  #$44,obj(a1) ; ','
000DF070 2649                               movea.l a1,a3
000DF072 61AE                               bsr.s   SpawnObjectWithXAndYCord
000DF074 6600 0000                          bne.w   locret_20BF42
000DF078 3749 0030                          move.w  a1,$30(a3)
000DF07C 334B 002E                          move.w  a3,oVar2E(a1)
000DF080 137C 0003 0018                     move.b  #3,oPriority(a1)
000DF086 12BC 0045                          move.b  #$45,obj(a1) ; '-'
000DF08A 2649                               movea.l a1,a3
000DF08C 6194                               bsr.s   SpawnObjectWithXAndYCord
000DF08E 6600 0000                          bne.w   locret_20BF42
000DF092 3749 0030                          move.w  a1,$30(a3)
000DF096 334B 002E                          move.w  a3,oVar2E(a1)
000DF09A 137C 0002 0018                     move.b  #2,oPriority(a1)
000DF0A0 12BC 0046                          move.b  #$46,obj(a1) ; '.'
000DF0A4 364C                               movea.w a4,a3
000DF0A6 334B 0030                          move.w  a3,oVar30(a1)
000DF0AA 6100 FF76                          bsr.w   SpawnObjectWithXAndYCord
000DF0AE 6600 0000                          bne.w   locret_20BF42
000DF0B2 3749 0032                          move.w  a1,$32(a3)
000DF0B6 334B 002E                          move.w  a3,oVar2E(a1)
000DF0BA 137C 0007 0018                     move.b  #7,oPriority(a1)
000DF0C0 12BC 0044                          move.b  #$44,obj(a1) ; ','
000DF0C4 08E9 0002 002C                     bset    #2,oVar2C(a1)
000DF0CA 2649                               movea.l a1,a3
000DF0CC 6100 FF54                          bsr.w   SpawnObjectWithXAndYCord
000DF0D0 6600 0000                          bne.w   locret_20BF42
000DF0D4 3749 0030                          move.w  a1,$30(a3)
000DF0D8 334B 002E                          move.w  a3,oVar2E(a1)
000DF0DC 137C 0006 0018                     move.b  #6,oPriority(a1)
000DF0E2 12BC 0045                          move.b  #$45,obj(a1) ; '-'
000DF0E6 08E9 0002 002C                     bset    #2,oVar2C(a1)
000DF0EC 2649                               movea.l a1,a3
000DF0EE 6100 FF32                          bsr.w   SpawnObjectWithXAndYCord
000DF0F2 6600 0000                          bne.w   locret_20BF42
000DF0F6 3749 0030                          move.w  a1,$30(a3)
000DF0FA 334B 002E                          move.w  a3,oVar2E(a1)
000DF0FE 137C 0005 0018                     move.b  #5,oPriority(a1)
000DF104 12BC 0046                          move.b  #$46,obj(a1) ; '.'
000DF108 08E9 0002 002C                     bset    #2,oVar2C(a1)
000DF10E 2649                               movea.l a1,a3
000DF110 364C                               movea.w a4,a3
000DF112 334B 0030                          move.w  a3,oVar30(a1)
000DF116 6100 FF0A                          bsr.w   SpawnObjectWithXAndYCord
000DF11A 6600 0000                          bne.w   locret_20BF42
000DF11E 334B 002E                          move.w  a3,oVar2E(a1)
000DF122 366B 002E                          movea.w $2E(a3),a3
000DF126 3749 0032                          move.w  a1,$32(a3)
000DF12A 137C 0003 0018                     move.b  #3,oPriority(a1)
000DF130 12BC 0047                          move.b  #$47,obj(a1) ; '/'
000DF134 2649                               movea.l a1,a3
000DF136 6100 FEEA                          bsr.w   SpawnObjectWithXAndYCord
000DF13A 6600 0000                          bne.w   locret_20BF42
000DF13E 3749 0030                          move.w  a1,$30(a3)
000DF142 137C 0080 002A                     move.b  #$80,oVar2A(a1)
000DF148 334B 002E                          move.w  a3,oVar2E(a1)
000DF14C 3749 0030                          move.w  a1,$30(a3)
000DF150 137C 0005 0018                     move.b  #5,oPriority(a1)
000DF156 12BC 0048                          move.b  #$48,obj(a1) ; '0'
000DF15A 2649                               movea.l a1,a3
000DF15C 6100 FEC4                          bsr.w   SpawnObjectWithXAndYCord
000DF160 6600 0000                          bne.w   locret_20BF42
000DF164 334B 002E                          move.w  a3,oVar2E(a1)
000DF168 3749 0030                          move.w  a1,$30(a3)
000DF16C 137C 0004 0018                     move.b  #4,oPriority(a1)
000DF172 237C 0000 0000 0004                move.l  #Spr_20D918,oSprites(a1)
000DF17A 12BC 0049                          move.b  #$49,obj(a1) ; '1'
000DF17E 2649                               movea.l a1,a3
000DF180 6100 FEA0                          bsr.w   SpawnObjectWithXAndYCord
000DF184 6600 0000                          bne.w   locret_20BF42
000DF188 334B 002E                          move.w  a3,oVar2E(a1)
000DF18C 3749 0030                          move.w  a1,$30(a3)
000DF190 137C 0003 0018                     move.b  #3,oPriority(a1)
000DF196 12BC 004A                          move.b  #$4A,obj(a1) ; '2'
000DF19A 2649                               movea.l a1,a3
000DF19C 334C 0030                          move.w  a4,oVar30(a1)
000DF1A0 366B 002E                          movea.w $2E(a3),a3
000DF1A4 366B 002E                          movea.w $2E(a3),a3
000DF1A8 366B 002E                          movea.w $2E(a3),a3
000DF1AC 6100 FE74                          bsr.w   SpawnObjectWithXAndYCord
000DF1B0 6600 0000                          bne.w   locret_20BF42
000DF1B4 3749 0032                          move.w  a1,$32(a3)
000DF1B8 334B 002E                          move.w  a3,oVar2E(a1)
000DF1BC 137C 0007 0018                     move.b  #7,oPriority(a1)
000DF1C2 12BC 0048                          move.b  #$48,obj(a1) ; '0'
000DF1C6 08E9 0002 002C                     bset    #2,oVar2C(a1)
000DF1CC 2649                               movea.l a1,a3
000DF1CE 6100 FE52                          bsr.w   SpawnObjectWithXAndYCord
000DF1D2 6600 0000                          bne.w   locret_20BF42
000DF1D6 334B 002E                          move.w  a3,oVar2E(a1)
000DF1DA 3749 0030                          move.w  a1,$30(a3)
000DF1DE 137C 0007 0018                     move.b  #7,oPriority(a1)
000DF1E4 237C 0000 0000 0004                move.l  #Spr_20D942,oSprites(a1)
000DF1EC 12BC 0049                          move.b  #$49,obj(a1) ; '1'
000DF1F0 08E9 0002 002C                     bset    #2,oVar2C(a1)
000DF1F6 2649                               movea.l a1,a3
000DF1F8 6100 FE28                          bsr.w   SpawnObjectWithXAndYCord
000DF1FC 6600 0000                          bne.w   locret_20BF42
000DF200 334B 002E                          move.w  a3,oVar2E(a1)
000DF204 3749 0030                          move.w  a1,$30(a3)
000DF208 137C 0006 0018                     move.b  #6,oPriority(a1)
000DF20E 12BC 004A                          move.b  #$4A,obj(a1) ; '2'
000DF212 08E9 0002 002C                     bset    #2,oVar2C(a1)
000DF218 2649                               movea.l a1,a3
000DF21A 334C 0030                          move.w  a4,oVar30(a1)
000DF21E 117C 0003 002B                     move.b  #3,oVar2B(a0)
000DF224 4EBA FCEA                          jsr     sub_20BC06                      
000DF228                            locret_20BF42:                          ; CODE XREF: sub_20BD36+4↑j ...
000DF228 4E75                               rts
000DF22A                            ; End of function sub_20BD36
000DF22A                            
000DF22A                            
000DF22A                            ; =============== S U B R O U T I N E =======================================
000DF22A                            
000DF22A                            
000DF22A                            ObjBossEggman_0_Routine2:               ; DATA XREF: ROM:0020B998↑o
000DF22A 303C 0AC0                          move.w  #$AC0,d0
000DF22E 31C0 F72A                          move.w  d0,(rightBound).w
000DF232 31C0 F722                          move.w  d0,(destRightBound).w
000DF236 43F8 D000                          lea     (objPlayerSlot).w,a1
000DF23A 0C69 0A6A 0008                     cmpi.w  #$A6A,objPlayerSlot+oX-objPlayerSlot(a1)
000DF240 6D00                               blt.s   locret_20BF90
000DF242 3029 0008                          move.w  8(a1),d0
000DF246 0440 00A0                          subi.w  #$A0,d0
000DF24A B078 F728                          cmp.w   (leftBound).w,d0
000DF24E 6D00                               blt.s   locret_20BF90
000DF250 0C69 0B60 0008                     cmpi.w  #$B60,8(a1)
000DF256 6D00                               blt.s   loc_20BF88
000DF258 117C 000C 0024                     move.b  #$C,oRoutine(a0)
000DF25E 303C 0AC0                          move.w  #$AC0,d0
000DF262 31C0 F72A                          move.w  d0,(rightBound).w
000DF266 31C0 F722                          move.w  d0,(destRightBound).w
000DF26A 303C 0AC0                          move.w  #$AC0,d0
000DF26E                            
000DF26E                            loc_20BF88:                             ; CODE XREF: ObjBossEggman_0_Routine2+2C↑j
000DF26E 31C0 F728                          move.w  d0,(leftBound).w
000DF272 31C0 F720                          move.w  d0,(destLeftBound).w
000DF276                            
000DF276                            locret_20BF90:                          ; CODE XREF: ObjBossEggman_0_Routine2+16↑j ...
000DF276 4E75                               rts
000DF278                            ; End of function ObjBossEggman_0_Routine2
000DF278                            
000DF278                            
000DF278                            ; =============== S U B R O U T I N E =======================================
000DF278                            
000DF278                            
000DF278                            ObjBossEggman_0_RoutineC:               ; DATA XREF: ROM:0020B9A2↑o
000DF278 5C78 F73E                          addq.w  #6,(camYCenter).w
000DF27C 0C78 00C8 F73E                     cmpi.w  #$C8,(camYCenter).w
000DF282 6C00                               bge.s   loc_20BFA0
000DF284 4E75                               rts
000DF286                            ; ---------------------------------------------------------------------------
000DF286                            
000DF286                            loc_20BFA0:                             ; CODE XREF: ObjBossEggman_0_RoutineC+A↑j
000DF286 303C 0094                          move.w  #bgm_S3Boss,d0 ; Play Boss Theme
000DF28A 4EB8 2708                          jsr     PlaySound
000DF28E 11FC 0001 F7A7                     move.b  #1,(bossFlags).w
000DF294 117C 000E 0024                     move.b  #$E,oRoutine(a0)
000DF29A 4E75                               rts
000DF29C                            ; End of function ObjBossEggman_0_RoutineC
000DF29C                            
000DF29C                            
000DF29C                            ; =============== S U B R O U T I N E =======================================
000DF29C                            
000DF29C                            
000DF29C                            ObjBossEggman_0_RoutineE:               ; DATA XREF: ROM:0020B9A4↑o
000DF29C 5228 002B                          addq.b  #1,oVar2B(a0)
000DF2A0 0C28 003C 002B                     cmpi.b  #$3C,oVar2B(a0) ; '<'
000DF2A6 6600                               bne.s   locret_20BFDE
000DF2A8 4228 002B                          clr.b   oVar2B(a0)
000DF2AC 117C 0004 0024                     move.b  #4,oRoutine(a0)
000DF2B2 317C 0BD2 0008                     move.w  #$BD2,oX(a0)
000DF2B8 317C 0078 000C                     move.w  #$78,oY(a0) ; 'x'
000DF2BE 6100 FD7A                          bsr.w   sub_20BD36
000DF2C2                            
000DF2C2                            locret_20BFDE:                          ; CODE XREF: ObjBossEggman_0_RoutineE+A↑j
000DF2C2 4E75                               rts
000DF2C4                            ; End of function ObjBossEggman_0_RoutineE
000DF2C4                            
000DF2C4                            
000DF2C4                            ; =============== S U B R O U T I N E =======================================
000DF2C4                            
000DF2C4                            
000DF2C4                            ObjBossEggman_0_Routine4:               ; DATA XREF: ROM:0020B99A↑o
000DF2C4 3268 0030                          movea.w oVar30(a0),a1
000DF2C8 08A9 0000 002C                     bclr    #0,$2C(a1)
000DF2CE 6700                               beq.s   locret_20C04C
000DF2D0 0C28 0002 0025                     cmpi.b  #2,oRoutine2(a0)
000DF2D6 6600                               bne.s   loc_20C020
000DF2D8 317C 0000 001C                     move.w  #0,oAnim(a0)
000DF2DE 4228 001A                          clr.b   oSprFrame(a0)
000DF2E2 4228 001B                          clr.b   oAnimFrame(a0)
000DF2E6 4228 001E                          clr.b   oAnimTime(a0)
000DF2EA 4228 001F                          clr.b   oVar1F(a0)
000DF2EE 117C 0003 002B                     move.b  #3,oVar2B(a0)
000DF2F4 08E8 0003 002C                     bset    #3,oVar2C(a0)
000DF2FA 4EBA FC14                          jsr     sub_20BC06
000DF2FE 3268 0030                          movea.w oVar30(a0),a1
000DF302                            
000DF302                            loc_20C020:                             ; CODE XREF: ObjBossEggman_0_Routine4+12↑j
000DF302 5428 0025                          addq.b  #2,oRoutine2(a0)
000DF306 7000                               moveq   #0,d0
000DF308 08A9 0001 002C                     bclr    #1,$2C(a1)
000DF30E                            
000DF30E                            loc_20C02C:                             ; CODE XREF: ObjBossEggman_0_Routine4+62↓j
000DF30E 45F9 0000 0000                     lea     (unk_20C04E).l,a2
000DF314 1028 0025                          move.b  oRoutine2(a0),d0
000DF318 D4C0                               adda.w  d0,a2
000DF31A 4A12                               tst.b   (a2)
000DF31C 6C00                               bge.s   loc_20C044
000DF31E 117C 0006 0025                     move.b  #6,oRoutine2(a0)
000DF324 60E8                               bra.s   loc_20C02C
000DF326                            ; ---------------------------------------------------------------------------
000DF326                            
000DF326                            loc_20C044:                             ; CODE XREF: ObjBossEggman_0_Routine4+5A↑j
000DF326 135A 0024                          move.b  (a2)+,$24(a1)
000DF32A 1352 002D                          move.b  (a2),$2D(a1)
000DF32E                            
000DF32E                            locret_20C04C:                          ; CODE XREF: ObjBossEggman_0_Routine4+A↑j
000DF32E 4E75                               rts
000DF330                            ; End of function ObjBossEggman_0_Routine4
000DF330                            
000DF330                            ; ---------------------------------------------------------------------------
000DF330 02                         unk_20C04E:dc.b   2                     ; DATA XREF: ObjBossEggman_0_Routine4:loc_20C02C↑o
000DF331 00                                 dc.b   0
000DF332 04                                 dc.b   4
000DF333 00                                 dc.b   0
000DF334 06                                 dc.b   6
000DF335 00                                 dc.b   0
000DF336 08                                 dc.b   8
000DF337 05                                 dc.b   5
000DF338 0A                                 dc.b  $A
000DF339 06                                 dc.b   6
000DF33A 0C                                 dc.b  $C
000DF33B 0A                                 dc.b  $A
000DF33C 08                                 dc.b   8
000DF33D 0A                                 dc.b  $A
000DF33E 10                                 dc.b $10
000DF33F 32                                 dc.b $32 ; 2
000DF340 0A                                 dc.b  $A
000DF341 0A                                 dc.b  $A
000DF342 FF                                 dc.b $FF
000DF343 FF                                 dc.b $FF
000DF344                            
000DF344                            ; =============== S U B R O U T I N E =======================================
000DF344                            
000DF344                            
000DF344                            ObjBossEggman_0_Routine6:               ; DATA XREF: ROM:0020B99C↑o
000DF344 5228 002B                          addq.b  #1,oVar2B(a0)
000DF348 6100 0000                          bsr.w   sub_20D72A
000DF34C 0C28 005E 002B                     cmpi.b  #$5E,oVar2B(a0) ; '^'
000DF352 6600                               bne.s   loc_20C09E
000DF354 3168 0008 003C                     move.w  oX(a0),oVar3C(a0)
000DF35A 3168 000C 0010                     move.w  oY(a0),oXVel(a0)
000DF360 117C 0003 001C                     move.b  #3,oAnim(a0)
000DF366 4228 001A                          clr.b   oSprFrame(a0)
000DF36A 4228 001B                          clr.b   oAnimFrame(a0)
000DF36E 4228 001E                          clr.b   oAnimTime(a0)
000DF372 4228 001F                          clr.b   oVar1F(a0)
000DF376 3268 0030                          movea.w oVar30(a0),a1
000DF37A 08E9 0000 002C                     bset    #0,oVar2C(a1)
000DF380                            
000DF380                            loc_20C09E:                             ; CODE XREF: ObjBossEggman_0_Routine6+E↑j
000DF380 0C28 0078 002B                     cmpi.b  #$78,oVar2B(a0) ; 'x'
000DF386 6500                               bcs.s   locret_20C0C4
000DF388 4228 002B                          clr.b   oVar2B(a0)
000DF38C 117C 0008 0024                     move.b  #8,oRoutine(a0)
000DF392 117C 0020 0019                     move.b  #$20,oWidth(a0) ; ' '
000DF398 117C 0020 0016                     move.b  #$20,oYRadius(a0) ; ' '
000DF39E 7064                               moveq   #$64,d0 ; 'd'
000DF3A0 4EB9 0000 C34A                     jsr     AddPoints
000DF3A6                            
000DF3A6                            locret_20C0C4:                          ; CODE XREF: ObjBossEggman_0_Routine6+42↑j
000DF3A6 4E75                               rts
000DF3A8                            ; End of function ObjBossEggman_0_Routine6
000DF3A8                            
000DF3A8                            
000DF3A8                            ; =============== S U B R O U T I N E =======================================
000DF3A8                            
000DF3A8                            
000DF3A8                            ObjBossEggman_0_Routine8:               ; DATA XREF: ROM:0020B99E↑o
000DF3A8 4A28 0025                          tst.b   oRoutine2(a0)
000DF3AC 6700 0000                          beq.w   loc_20C100
000DF3B0 3028 0038                          move.w  oVar38(a0),d0
000DF3B4 9168 000C                          sub.w   d0,oY(a0)
000DF3B8 5628 002B                          addq.b  #3,oVar2B(a0)
000DF3BC 1028 002B                          move.b  oVar2B(a0),d0
000DF3C0 4EB8 0AAC                          jsr     CalcSine
000DF3C4 EA40                               asr.w   #5,d0
000DF3C6 3140 0038                          move.w  d0,oVar38(a0)
000DF3CA D168 000C                          add.w   d0,oY(a0)
000DF3CE 06A8 0002 8000 0008                addi.l  #$28000,oX(a0)
000DF3D6 0C68 0C80 0008                     cmpi.w  #$C80,oX(a0)
000DF3DC 6C00                               bge.s   loc_20C16C
000DF3DE 4E75                               rts
000DF3E0                            ; ---------------------------------------------------------------------------
000DF3E0                            
000DF3E0                            loc_20C100:                             ; CODE XREF: ObjBossEggman_0_Routine8+4↑j
000DF3E0 5228 002B                          addq.b  #1,oVar2B(a0)
000DF3E4 3028 0008                          move.w  oX(a0),d0
000DF3E8 3228 000C                          move.w  oY(a0),d1
000DF3EC 48A7 C000                          movem.w d0-d1,-(sp)
000DF3F0 3168 003C 0008                     move.w  oVar3C(a0),oX(a0)
000DF3F6 3168 0010 000C                     move.w  oXVel(a0),oY(a0)
000DF3FC 6100 0000                          bsr.w   sub_20D72A
000DF400 4C9F 0003                          movem.w (sp)+,d0-d1
000DF404 3140 0008                          move.w  d0,oX(a0)
000DF408 3141 000C                          move.w  d1,oY(a0)
000DF40C 06A8 0000 8000 0008                addi.l  #$8000,oX(a0)
000DF414 04A8 0002 0000 000C                subi.l  #$20000,oY(a0)
000DF41C 0C68 0158 000C                     cmpi.w  #$158,oY(a0)
000DF422 6E00                               bgt.s   locret_20C16A
000DF424 5228 0025                          addq.b  #1,oRoutine2(a0)
000DF428 4228 001A                          clr.b   oSprFrame(a0)
000DF42C 4228 001B                          clr.b   oAnimFrame(a0)
000DF430 4228 001E                          clr.b   oAnimTime(a0)
000DF434 4228 001F                          clr.b   oVar1F(a0)
000DF438 117C 0004 001C                     move.b  #4,oAnim(a0)
000DF43E 117C 0040 002B                     move.b  #$40,oVar2B(a0) ; '@'
000DF444 317C 0008 0038                     move.w  #8,oVar38(a0)
000DF44A                            
000DF44A                            locret_20C16A:                          ; CODE XREF: ObjBossEggman_0_Routine8+7C↑j
000DF44A 4E75                               rts
000DF44C                            ; ---------------------------------------------------------------------------
000DF44C                            
000DF44C                            loc_20C16C:                             ; CODE XREF: ObjBossEggman_0_Routine8+36↑j
000DF44C 4228 002B                          clr.b   oVar2B(a0)
000DF450 303C 0011                          move.w  #$11,d0
000DF454 4A39 00FF 156A                     tst.b   (goodFuture).l
000DF45A 6700                               beq.s   loc_20C180
000DF45C 303C 0010                          move.w  #$10,d0
000DF460                            
000DF460                            loc_20C180:                             ; CODE XREF: ObjBossEggman_0_Routine8+B4↑j
000DF460 4EB8 61B2                          jsr     SubCPUCmd
000DF464 4EB9 0000 EDAE                     jsr     sub_20B604
000DF46A 4238 F7A7                          clr.b   (bossFlags).w
000DF46E 4238 F7AA                          clr.b   (bossFight).w
000DF472 117C 000A 0024                     move.b  #$A,oRoutine(a0)
000DF478                            
000DF478                            ObjBossEggman_0_RoutineA:               ; DATA XREF: ROM:0020B9A0↑o
000DF478 43F9 0000 2D20                     lea     (word_2027F8).l,a1
000DF47E 3019                               move.w  (a1)+,d0
000DF480 3219                               move.w  (a1)+,d1
000DF482 5C78 F72A                          addq.w  #6,(rightBound).w
000DF486 5C78 F722                          addq.w  #6,(destRightBound).w
000DF48A B278 F72A                          cmp.w   (rightBound).w,d1
000DF48E 6F00                               ble.s   loc_20C1B6
000DF490 588F                               addq.l  #4,sp
000DF492 4E75                               rts
000DF494                            ; ---------------------------------------------------------------------------
000DF494                            
000DF494                            loc_20C1B6:                             ; CODE XREF: ObjBossEggman_0_Routine8+EA↑j
000DF494 31C1 F72A                          move.w  d1,(rightBound).w
000DF498 31C1 F722                          move.w  d1,(destRightBound).w
000DF49C 588F                               addq.l  #4,sp
000DF49E 4EF8 40BE                          jmp     DeleteObject
000DF4A2                            ; End of function ObjBossEggman_0_Routine8
000DF4A2                            ; =============== S U B R O U T I N E =======================================
000DF4A2                            
000DF4A2                            
000DF4A2                            ObjBossBody:                            ; DATA XREF: ROM:00203C26↑o
000DF4A2 7000                               moveq   #0,d0
000DF4A4 1028 0024                          move.b  oRoutine(a0),d0
000DF4A8 303B 0000                          move.w  off_20C1DA(pc,d0.w),d0
000DF4AC 4EBB 0000                          jsr     off_20C1DA(pc,d0.w)
000DF4B0 4EF8 4012                          jmp     DrawObject
000DF4B4                            ; End of function ObjBossBody
000DF4B4                            
000DF4B4                            ; ---------------------------------------------------------------------------
000DF4B4 0000                       off_20C1DA:dc.w ObjBossBody_0_Routine0-*
000DF4B6                                                                    ; CODE XREF: ObjBossBody+A↑p
000DF4B6                                                                    ; DATA XREF: ...
000DF4B6 0000                               dc.w ObjBossBody_0_Routine2-off_20C1DA
000DF4B8 0000                               dc.w ObjBossBody_0_Routine4-off_20C1DA
000DF4BA 0000                               dc.w ObjBossBody_0_Routine6-off_20C1DA
000DF4BC 0000                               dc.w ObjBossBody_0_Routine8-off_20C1DA
000DF4BE 0000                               dc.w ObjBossBody_0_RoutineA-off_20C1DA
000DF4C0 0000                               dc.w ObjBossBody_0_RoutineC-off_20C1DA
000DF4C2 0000                               dc.w ObjBossBody_0_RoutineE-off_20C1DA
000DF4C4 0000                               dc.w ObjBossBody_0_Routine10-off_20C1DA
000DF4C6                            
000DF4C6                            ; =============== S U B R O U T I N E =======================================
000DF4C6                            
000DF4C6                            
000DF4C6                            ObjBossBody_0_Routine0:                 ; DATA XREF: ROM:off_20C1DA↑o
000DF4C6 4228 0022                          clr.b   oFlags(a0)
000DF4CA 117C 0002 0024                     move.b  #2,oRoutine(a0)
000DF4D0 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000DF4D6 117C 0024 0019                     move.b  #$24,oWidth(a0) ; '$'
000DF4DC 117C 0020 0016                     move.b  #$20,oYRadius(a0) ; ' '
000DF4E2 317C 0359 0002                     move.w  #$359,oTile(a0)
000DF4E8 217C 0000 0000 0004                move.l  #Spr_20D8AE,oSprites(a0)
000DF4F0 6100 0000                          bsr.w   sub_20C5AE
000DF4F4 4E75                               rts
000DF4F6                            ; End of function ObjBossBody_0_Routine0
000DF4F6                            
000DF4F6                            
000DF4F6                            ; =============== S U B R O U T I N E =======================================
000DF4F6                            
000DF4F6                            
000DF4F6                            ObjBossBody_0_Routine10:                ; DATA XREF: ROM:0020C1EA↑o
000DF4F6 5328 002D                          subq.b  #1,oVar2D(a0)
000DF4FA 6600 0000                          bne.w   locret_20C234
000DF4FE 6100 0000                          bsr.w   sub_20C5AE
000DF502 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DF508 08A8 0001 002C                     bclr    #1,oVar2C(a0)
000DF50E                            
000DF50E                            locret_20C234:                          ; CODE XREF: ObjBossBody_0_Routine10+4↑j
000DF50E 4E75                               rts
000DF510                            ; End of function ObjBossBody_0_Routine10
000DF510                            
000DF510                            
000DF510                            ; =============== S U B R O U T I N E =======================================
000DF510                            
000DF510                            
000DF510                            ObjBossBody_0_Routine2:                 ; DATA XREF: ROM:0020C1DC↑o
000DF510 3268 0032                          movea.w oVar32(a0),a1
000DF514 137C 0010 0024                     move.b  #$10,$24(a1)
000DF51A 3269 0030                          movea.w $30(a1),a1
000DF51E 137C 0004 0024                     move.b  #4,$24(a1)
000DF524 3269 0030                          movea.w $30(a1),a1
000DF528 137C 000A 0024                     move.b  #$A,$24(a1)
000DF52E 3268 0030                          movea.w oVar30(a0),a1
000DF532 6100 0000                          bsr.w   sub_20C8D0
000DF536 0829 0004 002C                     btst    #4,$2C(a1)
000DF53C 6600                               bne.s   loc_20C27A
000DF53E 06A8 0001 8000 000C                addi.l  #$18000,oY(a0)
000DF546 3268 002E                          movea.w oVar2E(a0),a1
000DF54A 06A9 0001 8000 000C                addi.l  #$18000,$C(a1)
000DF552 4E75                               rts
000DF554                            ; ---------------------------------------------------------------------------
000DF554                            
000DF554                            loc_20C27A:                             ; CODE XREF: ObjBossBody_0_Routine2+2C↑j
000DF554 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DF55A 4E75                               rts
000DF55C                            ; End of function ObjBossBody_0_Routine2
000DF55C                            
000DF55C                            
000DF55C                            ; =============== S U B R O U T I N E =======================================
000DF55C                            
000DF55C                            
000DF55C                            ObjBossBody_0_Routine4:                 ; DATA XREF: ROM:0020C1DE↑o
000DF55C 3268 0032                          movea.w oVar32(a0),a1
000DF560 08A9 0000 002C                     bclr    #0,$2C(a1)
000DF566 3268 0030                          movea.w oVar30(a0),a1
000DF56A 08A9 0000 002C                     bclr    #0,$2C(a1)
000DF570 6700                               beq.s   locret_20C2F4
000DF572 0C29 000C 0024                     cmpi.b  #$C,$24(a1)
000DF578 6700                               beq.s   loc_20C2EC
000DF57A 0C29 000A 0024                     cmpi.b  #$A,$24(a1)
000DF580 6700                               beq.s   loc_20C2E4
000DF582 137C 0002 0024                     move.b  #2,$24(a1)
000DF588 6100 0000                          bsr.w   sub_20C8F4
000DF58C 6100 0000                          bsr.w   sub_20C93C
000DF590 3268 0032                          movea.w oVar32(a0),a1
000DF594 137C 0008 0024                     move.b  #8,$24(a1)
000DF59A 6100 0000                          bsr.w   sub_20C8D0
000DF59E 6100 0000                          bsr.w   sub_20C918
000DF5A2 3269 0030                          movea.w $30(a1),a1
000DF5A6 137C 0002 0024                     move.b  #2,$24(a1)
000DF5AC 3269 0030                          movea.w $30(a1),a1
000DF5B0 137C 0004 0024                     move.b  #4,$24(a1)
000DF5B6 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DF5BC 4E75                               rts
000DF5BE                            ; ---------------------------------------------------------------------------
000DF5BE                            
000DF5BE                            loc_20C2E4:                             ; CODE XREF: ObjBossBody_0_Routine4+24↑j
000DF5BE 137C 000E 0024                     move.b  #$E,$24(a1)
000DF5C4 4E75                               rts
000DF5C6                            ; ---------------------------------------------------------------------------
000DF5C6                            
000DF5C6                            loc_20C2EC:                             ; CODE XREF: ObjBossBody_0_Routine4+1C↑j
000DF5C6 137C 000A 0024                     move.b  #$A,$24(a1)
000DF5CC 4E75                               rts
000DF5CE                            ; ---------------------------------------------------------------------------
000DF5CE                            
000DF5CE                            locret_20C2F4:                          ; CODE XREF: ObjBossBody_0_Routine4+14↑j
000DF5CE 4E75                               rts
000DF5D0                            ; End of function ObjBossBody_0_Routine4
000DF5D0                            
000DF5D0                            
000DF5D0                            ; =============== S U B R O U T I N E =======================================
000DF5D0                            
000DF5D0                            
000DF5D0                            ObjBossBody_0_Routine6:                 ; DATA XREF: ROM:0020C1E0↑o
000DF5D0 08E8 0001 002C                     bset    #1,oVar2C(a0)
000DF5D6 6600                               bne.s   loc_20C302
000DF5D8 6100 0000                          bsr.w   sub_20C474
000DF5DC                            
000DF5DC                            loc_20C302:                             ; CODE XREF: ObjBossBody_0_Routine6+6↑j
000DF5DC 3268 0030                          movea.w oVar30(a0),a1
000DF5E0 0829 0000 002C                     btst    #0,$2C(a1)
000DF5E6 6700                               beq.s   locret_20C32C
000DF5E8 3268 0032                          movea.w oVar32(a0),a1
000DF5EC 0829 0000 002C                     btst    #0,$2C(a1)
000DF5F2 6700                               beq.s   locret_20C32C
000DF5F4 08A8 0001 002C                     bclr    #1,oVar2C(a0)
000DF5FA 08E8 0006 002C                     bset    #6,oVar2C(a0)
000DF600 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DF606                            
000DF606                            locret_20C32C:                          ; CODE XREF: ObjBossBody_0_Routine6+16↑j ...
000DF606 4E75                               rts
000DF608                            ; End of function ObjBossBody_0_Routine6
000DF608                            
000DF608                            
000DF608                            ; =============== S U B R O U T I N E =======================================
000DF608                            
000DF608                            
000DF608                            ObjBossBody_0_Routine8:                 ; DATA XREF: ROM:0020C1E2↑o
000DF608 0828 0006 002C                     btst    #6,oVar2C(a0)
000DF60E 6600                               bne.s   loc_20C340
000DF610 3268 0030                          movea.w oVar30(a0),a1
000DF614 3468 0032                          movea.w oVar32(a0),a2
000DF618 6000                               bra.s   loc_20C348
000DF61A                            ; ---------------------------------------------------------------------------
000DF61A                            
000DF61A                            loc_20C340:                             ; CODE XREF: ObjBossBody_0_Routine8+6↑j
000DF61A 3268 0032                          movea.w oVar32(a0),a1
000DF61E 3468 0030                          movea.w oVar30(a0),a2
000DF622                            
000DF622                            loc_20C348:                             ; CODE XREF: ObjBossBody_0_Routine8+10↑j
000DF622 0829 0000 002C                     btst    #0,$2C(a1)
000DF628 6700 0000                          beq.w   locret_20C42C
000DF62C 082A 0000 002C                     btst    #0,$2C(a2)
000DF632 6700 0000                          beq.w   locret_20C42C
000DF636 3669 0030                          movea.w $30(a1),a3
000DF63A 366B 0030                          movea.w $30(a3),a3
000DF63E 386A 0030                          movea.w $30(a2),a4
000DF642 386A 0030                          movea.w $30(a2),a4
000DF646 08A9 0000 002C                     bclr    #0,$2C(a1)
000DF64C 08AB 0000 002C                     bclr    #0,$2C(a3)
000DF652 08AA 0000 002C                     bclr    #0,$2C(a2)
000DF658 08AC 0000 002C                     bclr    #0,$2C(a4)
000DF65E 0C68 0B58 0008                     cmpi.w  #$B58,oX(a0)
000DF664 6E00                               bgt.s   loc_20C392
000DF666 117C 0001 002D                     move.b  #1,oVar2D(a0)
000DF66C                            
000DF66C                            loc_20C392:                             ; CODE XREF: ObjBossBody_0_Routine8+5C↑j
000DF66C 5328 002D                          subq.b  #1,oVar2D(a0)
000DF670 6600 0000                          bne.w   loc_20C3A8
000DF674 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DF67A 08A8 0001 002C                     bclr    #1,oVar2C(a0)
000DF680 4E75                               rts
000DF682                            ; ---------------------------------------------------------------------------
000DF682                            
000DF682                            loc_20C3A8:                             ; CODE XREF: ObjBossBody_0_Routine8+68↑j
000DF682 0868 0006 002C                     bchg    #6,oVar2C(a0)
000DF688 6700 0000                          beq.w   loc_20C3F0
000DF68C 3268 0030                          movea.w oVar30(a0),a1
000DF690 137C 0008 0024                     move.b  #8,$24(a1)
000DF696 6100 0000                          bsr.w   sub_20C8D0
000DF69A 6100 0000                          bsr.w   sub_20C918
000DF69E 3269 0030                          movea.w $30(a1),a1
000DF6A2 137C 0006 0024                     move.b  #6,$24(a1)
000DF6A8 3268 0032                          movea.w oVar32(a0),a1
000DF6AC 137C 0002 0024                     move.b  #2,$24(a1)
000DF6B2 6100 0000                          bsr.w   sub_20C8F4
000DF6B6 6100 0000                          bsr.w   sub_20C93C
000DF6BA 3269 0030                          movea.w $30(a1),a1
000DF6BE 137C 0008 0024                     move.b  #8,$24(a1)
000DF6C4 6100 0000                          bsr.w   sub_20C42E
000DF6C8 4E75                               rts
000DF6CA                            ; ---------------------------------------------------------------------------
000DF6CA                            
000DF6CA                            loc_20C3F0:                             ; CODE XREF: ObjBossBody_0_Routine8+80↑j
000DF6CA 3268 0030                          movea.w oVar30(a0),a1
000DF6CE 137C 0002 0024                     move.b  #2,$24(a1)
000DF6D4 6100 0000                          bsr.w   sub_20C8F4
000DF6D8 6100 0000                          bsr.w   sub_20C93C
000DF6DC 3269 0030                          movea.w $30(a1),a1
000DF6E0 137C 0008 0024                     move.b  #8,$24(a1)
000DF6E6 3268 0032                          movea.w oVar32(a0),a1
000DF6EA 137C 0008 0024                     move.b  #8,$24(a1)
000DF6F0 6100 0000                          bsr.w   sub_20C8D0
000DF6F4 6100 0000                          bsr.w   sub_20C918
000DF6F8 3269 0030                          movea.w $30(a1),a1
000DF6FC 137C 0006 0024                     move.b  #6,$24(a1)
000DF702 6100 0000                          bsr.w   sub_20C474
000DF706                            
000DF706                            locret_20C42C:                          ; CODE XREF: ObjBossBody_0_Routine8+20↑j ...
000DF706 4E75                               rts
000DF708                            ; End of function ObjBossBody_0_Routine8
000DF708                            
000DF708                            
000DF708                            ; =============== S U B R O U T I N E =======================================
000DF708                            
000DF708                            
000DF708                            sub_20C42E:                             ; CODE XREF: ObjBossBody_0_Routine8+BC↑p ...
000DF708 3268 002E                          movea.w oVar2E(a0),a1
000DF70C 3469 0032                          movea.w $32(a1),a2
000DF710 326A 0032                          movea.w $32(a2),a1
000DF714 2009                               move.l  a1,d0
000DF716 6700                               beq.s   loc_20C454
000DF718 137C 0002 0024                     move.b  #2,$24(a1)
000DF71E 3269 0030                          movea.w $30(a1),a1
000DF722 137C 0008 0024                     move.b  #8,$24(a1)
000DF728 137C 0000 001A                     move.b  #0,$1A(a1)
000DF72E                            
000DF72E                            loc_20C454:                             ; CODE XREF: sub_20C42E+E↑j
000DF72E 326A 0030                          movea.w $30(a2),a1
000DF732 2009                               move.l  a1,d0
000DF734 6700                               beq.s   locret_20C472
000DF736 137C 0006 0024                     move.b  #6,$24(a1)
000DF73C 3269 0030                          movea.w $30(a1),a1
000DF740 137C 0006 0024                     move.b  #6,$24(a1)
000DF746 137C 0000 001A                     move.b  #0,$1A(a1)
000DF74C                            
000DF74C                            locret_20C472:                          ; CODE XREF: sub_20C42E+2C↑j
000DF74C 4E75                               rts
000DF74E                            ; End of function sub_20C42E
000DF74E                            
000DF74E                            
000DF74E                            ; =============== S U B R O U T I N E =======================================
000DF74E                            
000DF74E                            
000DF74E                            sub_20C474:                             ; CODE XREF: ObjBossBody_0_Routine6+8↑p ...
000DF74E 3268 002E                          movea.w oVar2E(a0),a1
000DF752 3469 0032                          movea.w $32(a1),a2
000DF756 326A 0032                          movea.w $32(a2),a1
000DF75A 2009                               move.l  a1,d0
000DF75C 6700                               beq.s   loc_20C49A
000DF75E 137C 0006 0024                     move.b  #6,$24(a1)
000DF764 3269 0030                          movea.w $30(a1),a1
000DF768 137C 0006 0024                     move.b  #6,$24(a1)
000DF76E 137C 0000 001A                     move.b  #0,$1A(a1)
000DF774                            
000DF774                            loc_20C49A:                             ; CODE XREF: sub_20C474+E↑j
000DF774 326A 0030                          movea.w $30(a2),a1
000DF778 2009                               move.l  a1,d0
000DF77A 6700                               beq.s   locret_20C4B8
000DF77C 137C 0002 0024                     move.b  #2,$24(a1)
000DF782 3269 0030                          movea.w $30(a1),a1
000DF786 137C 0008 0024                     move.b  #8,$24(a1)
000DF78C 137C 0000 001A                     move.b  #0,$1A(a1)
000DF792                            
000DF792                            locret_20C4B8:                          ; CODE XREF: sub_20C474+2C↑j
000DF792 4E75                               rts
000DF794                            ; End of function sub_20C474
000DF794                            
000DF794                            
000DF794                            ; =============== S U B R O U T I N E =======================================
000DF794                            
000DF794                            
000DF794                            sub_20C4BA:                             ; CODE XREF: ObjBossBody_0_RoutineC+E6↓p ...
000DF794 3268 002E                          movea.w oVar2E(a0),a1
000DF798 3469 0032                          movea.w $32(a1),a2
000DF79C 326A 0032                          movea.w $32(a2),a1
000DF7A0 2009                               move.l  a1,d0
000DF7A2 6700                               beq.s   loc_20C4E0
000DF7A4 137C 0002 0024                     move.b  #2,$24(a1)
000DF7AA 3269 0030                          movea.w $30(a1),a1
000DF7AE 137C 000A 0024                     move.b  #$A,$24(a1)
000DF7B4 137C 0001 001A                     move.b  #1,$1A(a1)
000DF7BA                            
000DF7BA                            loc_20C4E0:                             ; CODE XREF: sub_20C4BA+E↑j
000DF7BA 326A 0030                          movea.w $30(a2),a1
000DF7BE 2009                               move.l  a1,d0
000DF7C0 6700                               beq.s   locret_20C4FE
000DF7C2 137C 0002 0024                     move.b  #2,$24(a1)
000DF7C8 3269 0030                          movea.w $30(a1),a1
000DF7CC 137C 000A 0024                     move.b  #$A,$24(a1)
000DF7D2 137C 0001 001A                     move.b  #1,$1A(a1)
000DF7D8                            
000DF7D8                            locret_20C4FE:                          ; CODE XREF: sub_20C4BA+2C↑j
000DF7D8 4E75                               rts
000DF7DA                            ; End of function sub_20C4BA
000DF7DA                            
000DF7DA                            
000DF7DA                            ; =============== S U B R O U T I N E =======================================
000DF7DA                            
000DF7DA                            
000DF7DA                            sub_20C500:                             ; CODE XREF: ObjBossBody_0_RoutineC+22↓p
000DF7DA 48E7 0040                          movem.l a1,-(sp)
000DF7DE 3268 0030                          movea.w oVar30(a0),a1
000DF7E2 137C 0008 003C                     move.b  #8,$3C(a1)
000DF7E8 3269 0030                          movea.w $30(a1),a1
000DF7EC 237C 0001 0000 003C                move.l  #$10000,$3C(a1)
000DF7F4 237C 0000 8000 0010                move.l  #$8000,$10(a1)
000DF7FC 3269 0030                          movea.w $30(a1),a1
000DF800 237C 0000 C000 003C                move.l  #$C000,$3C(a1)
000DF808 237C 0001 8000 0010                move.l  #$18000,$10(a1)
000DF810 3268 0032                          movea.w oVar32(a0),a1
000DF814 137C 0008 003C                     move.b  #8,$3C(a1)
000DF81A 3269 0030                          movea.w $30(a1),a1
000DF81E 237C 0001 0000 003C                move.l  #$10000,$3C(a1)
000DF826 237C 0000 8000 0010                move.l  #$8000,$10(a1)
000DF82E 3269 0030                          movea.w $30(a1),a1
000DF832 237C 0000 C000 003C                move.l  #$C000,$3C(a1)
000DF83A 237C 0001 8000 0010                move.l  #$18000,$10(a1)
000DF842 4CDF 0200                          movem.l (sp)+,a1
000DF846 3268 002E                          movea.w oVar2E(a0),a1
000DF84A 3469 0032                          movea.w $32(a1),a2
000DF84E 326A 0032                          movea.w $32(a2),a1
000DF852 2009                               move.l  a1,d0
000DF854 6700                               beq.s   loc_20C590
000DF856 3269 0030                          movea.w $30(a1),a1
000DF85A 08E9 0007 002C                     bset    #7,$2C(a1)
000DF860 3269 0030                          movea.w $30(a1),a1
000DF864 08E9 0007 002C                     bset    #7,$2C(a1)
000DF86A                            
000DF86A                            loc_20C590:                             ; CODE XREF: sub_20C500+7A↑j
000DF86A 326A 0030                          movea.w $30(a2),a1
000DF86E 2009                               move.l  a1,d0
000DF870 6700                               beq.s   locret_20C5AC
000DF872 3269 0030                          movea.w $30(a1),a1
000DF876 08E9 0007 002C                     bset    #7,$2C(a1)
000DF87C 3269 0030                          movea.w $30(a1),a1
000DF880 08E9 0007 002C                     bset    #7,$2C(a1)
000DF886                            
000DF886                            locret_20C5AC:                          ; CODE XREF: sub_20C500+96↑j
000DF886 4E75                               rts
000DF888                            ; End of function sub_20C500
000DF888                            
000DF888                            
000DF888                            ; =============== S U B R O U T I N E =======================================
000DF888                            
000DF888                            
000DF888                            sub_20C5AE:                             ; CODE XREF: ObjBossBody_0_Routine0+2A↑p ...
000DF888 48E7 0040                          movem.l a1,-(sp)
000DF88C 3268 0030                          movea.w oVar30(a0),a1
000DF890 137C 0002 003C                     move.b  #2,$3C(a1)
000DF896 3269 0030                          movea.w $30(a1),a1
000DF89A 237C 0000 8000 003C                move.l  #$8000,$3C(a1)
000DF8A2 237C 0000 4000 0010                move.l  #$4000,$10(a1)
000DF8AA 3269 0030                          movea.w $30(a1),a1
000DF8AE 237C 0000 4000 003C                move.l  #$4000,$3C(a1)
000DF8B6 237C 0000 8000 0010                move.l  #$8000,$10(a1)
000DF8BE 3268 0032                          movea.w oVar32(a0),a1
000DF8C2 137C 0002 003C                     move.b  #2,$3C(a1)
000DF8C8 3269 0030                          movea.w $30(a1),a1
000DF8CC 237C 0000 8000 003C                move.l  #$8000,$3C(a1)
000DF8D4 237C 0000 4000 0010                move.l  #$4000,$10(a1)
000DF8DC 3269 0030                          movea.w $30(a1),a1
000DF8E0 237C 0000 4000 003C                move.l  #$4000,$3C(a1)
000DF8E8 237C 0000 8000 0010                move.l  #$8000,$10(a1)
000DF8F0 4CDF 0200                          movem.l (sp)+,a1
000DF8F4 3268 002E                          movea.w oVar2E(a0),a1
000DF8F8 3469 0032                          movea.w $32(a1),a2
000DF8FC 326A 0032                          movea.w $32(a2),a1
000DF900 2009                               move.l  a1,d0
000DF902 6700                               beq.s   loc_20C63E
000DF904 3269 0030                          movea.w $30(a1),a1
000DF908 08A9 0007 002C                     bclr    #7,$2C(a1)
000DF90E 3269 0030                          movea.w $30(a1),a1
000DF912 08A9 0007 002C                     bclr    #7,$2C(a1)
000DF918                            
000DF918                            loc_20C63E:                             ; CODE XREF: sub_20C5AE+7A↑j
000DF918 326A 0030                          movea.w $30(a2),a1
000DF91C 2009                               move.l  a1,d0
000DF91E 6700                               beq.s   locret_20C65A
000DF920 3269 0030                          movea.w $30(a1),a1
000DF924 08A9 0007 002C                     bclr    #7,$2C(a1)
000DF92A 3269 0030                          movea.w $30(a1),a1
000DF92E 08A9 0007 002C                     bclr    #7,$2C(a1)
000DF934                            
000DF934                            locret_20C65A:                          ; CODE XREF: sub_20C5AE+96↑j
000DF934 4E75                               rts
000DF936                            ; End of function sub_20C5AE
000DF936                            
000DF936                            
000DF936                            ; =============== S U B R O U T I N E =======================================
000DF936                            
000DF936                            
000DF936                            ObjBossBody_0_RoutineA:                 ; DATA XREF: ROM:0020C1E4↑o
000DF936 0828 0006 002C                     btst    #6,oVar2C(a0)
000DF93C 6600                               bne.s   loc_20C66E
000DF93E 3268 0030                          movea.w oVar30(a0),a1
000DF942 3468 0032                          movea.w oVar32(a0),a2
000DF946 6000                               bra.s   loc_20C676
000DF948                            ; ---------------------------------------------------------------------------
000DF948                            
000DF948                            loc_20C66E:                             ; CODE XREF: ObjBossBody_0_RoutineA+6↑j
000DF948 3268 0032                          movea.w oVar32(a0),a1
000DF94C 3468 0030                          movea.w oVar30(a0),a2
000DF950                            
000DF950                            loc_20C676:                             ; CODE XREF: ObjBossBody_0_RoutineA+10↑j
000DF950 0829 0000 002C                     btst    #0,$2C(a1)
000DF956 6700 0000                          beq.w   locret_20C76A
000DF95A 082A 0000 002C                     btst    #0,$2C(a2)
000DF960 6700 0000                          beq.w   locret_20C76A
000DF964 08E8 0001 002C                     bset    #1,oVar2C(a0)
000DF96A 6600                               bne.s   loc_20C69A
000DF96C 6100 FF1A                          bsr.w   sub_20C5AE
000DF970 6000 0000                          bra.w   loc_20C6E6
000DF974                            ; ---------------------------------------------------------------------------
000DF974                            
000DF974                            loc_20C69A:                             ; CODE XREF: ObjBossBody_0_RoutineA+34↑j
000DF974 3669 0030                          movea.w $30(a1),a3
000DF978 366B 0030                          movea.w $30(a3),a3
000DF97C 386A 0030                          movea.w $30(a2),a4
000DF980 386A 0030                          movea.w $30(a2),a4
000DF984 08A9 0000 002C                     bclr    #0,$2C(a1)
000DF98A 08AB 0000 002C                     bclr    #0,$2C(a3)
000DF990 08AA 0000 002C                     bclr    #0,$2C(a2)
000DF996 08AC 0000 002C                     bclr    #0,$2C(a4)
000DF99C 0C68 0BA0 0008                     cmpi.w  #$BA0,oX(a0)
000DF9A2 6D00                               blt.s   loc_20C6D0
000DF9A4 117C 0001 002D                     move.b  #1,oVar2D(a0)
000DF9AA                            
000DF9AA                            loc_20C6D0:                             ; CODE XREF: ObjBossBody_0_RoutineA+6C↑j
000DF9AA 5328 002D                          subq.b  #1,oVar2D(a0)
000DF9AE 6600 0000                          bne.w   loc_20C6E6
000DF9B2 08A8 0001 002C                     bclr    #1,oVar2C(a0)
000DF9B8 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DF9BE 4E75                               rts
000DF9C0                            ; ---------------------------------------------------------------------------
000DF9C0                            
000DF9C0                            loc_20C6E6:                             ; CODE XREF: ObjBossBody_0_RoutineA+3A↑j ...
000DF9C0 0868 0006 002C                     bchg    #6,oVar2C(a0)
000DF9C6 6700 0000                          beq.w   loc_20C72E
000DF9CA 3268 0030                          movea.w oVar30(a0),a1
000DF9CE 137C 0016 0024                     move.b  #$16,$24(a1)
000DF9D4 6100 0000                          bsr.w   sub_20C8D0
000DF9D8 6100 0000                          bsr.w   sub_20C918
000DF9DC 3269 0030                          movea.w $30(a1),a1
000DF9E0 137C 0008 0024                     move.b  #8,$24(a1)
000DF9E6 3268 0032                          movea.w oVar32(a0),a1
000DF9EA 137C 0012 0024                     move.b  #$12,$24(a1)
000DF9F0 6100 0000                          bsr.w   sub_20C8F4
000DF9F4 6100 0000                          bsr.w   sub_20C93C
000DF9F8 3269 0030                          movea.w $30(a1),a1
000DF9FC 137C 0006 0024                     move.b  #6,$24(a1)
000DFA02 6100 FD4A                          bsr.w   sub_20C474
000DFA06 4E75                               rts
000DFA08                            ; ---------------------------------------------------------------------------
000DFA08                            
000DFA08                            loc_20C72E:                             ; CODE XREF: ObjBossBody_0_RoutineA+90↑j
000DFA08 3268 0030                          movea.w oVar30(a0),a1
000DFA0C 137C 0012 0024                     move.b  #$12,$24(a1)
000DFA12 6100 0000                          bsr.w   sub_20C8F4
000DFA16 6100 0000                          bsr.w   sub_20C93C
000DFA1A 3269 0030                          movea.w $30(a1),a1
000DFA1E 137C 0006 0024                     move.b  #6,$24(a1)
000DFA24 3268 0032                          movea.w oVar32(a0),a1
000DFA28 137C 0016 0024                     move.b  #$16,$24(a1)
000DFA2E 6100 0000                          bsr.w   sub_20C8D0
000DFA32 6100 0000                          bsr.w   sub_20C918
000DFA36 3269 0030                          movea.w $30(a1),a1
000DFA3A 137C 0008 0024                     move.b  #8,$24(a1)
000DFA40 6100 FCC6                          bsr.w   sub_20C42E
000DFA44                            
000DFA44                            locret_20C76A:                          ; CODE XREF: ObjBossBody_0_RoutineA+20↑j ...
000DFA44 4E75                               rts
000DFA46                            ; End of function ObjBossBody_0_RoutineA
000DFA46                            
000DFA46                            
000DFA46                            ; =============== S U B R O U T I N E =======================================
000DFA46                            
000DFA46                            
000DFA46                            ObjBossBody_0_RoutineC:                 ; DATA XREF: ROM:0020C1E6↑o
000DFA46 0828 0006 002C                     btst    #6,oVar2C(a0)
000DFA4C 6600                               bne.s   loc_20C77E
000DFA4E 3268 0030                          movea.w oVar30(a0),a1
000DFA52 3468 0032                          movea.w oVar32(a0),a2
000DFA56 6000                               bra.s   loc_20C786
000DFA58                            ; ---------------------------------------------------------------------------
000DFA58                            
000DFA58                            loc_20C77E:                             ; CODE XREF: ObjBossBody_0_RoutineC+6↑j
000DFA58 3268 0032                          movea.w oVar32(a0),a1
000DFA5C 3468 0030                          movea.w oVar30(a0),a2
000DFA60                            
000DFA60                            loc_20C786:                             ; CODE XREF: ObjBossBody_0_RoutineC+10↑j
000DFA60 08E8 0001 002C                     bset    #1,oVar2C(a0)
000DFA66 6600                               bne.s   loc_20C792
000DFA68 6100 FD70                          bsr.w   sub_20C500
000DFA6C                            
000DFA6C                            loc_20C792:                             ; CODE XREF: ObjBossBody_0_RoutineC+20↑j
000DFA6C 0C29 0004 0024                     cmpi.b  #4,$24(a1)
000DFA72 6600                               bne.s   loc_20C7AE
000DFA74 3669 0030                          movea.w $30(a1),a3
000DFA78 177C 000A 0024                     move.b  #$A,$24(a3)
000DFA7E 366A 0030                          movea.w $30(a2),a3
000DFA82 177C 000C 0024                     move.b  #$C,$24(a3)
000DFA88                            
000DFA88                            loc_20C7AE:                             ; CODE XREF: ObjBossBody_0_RoutineC+2C↑j
000DFA88 0829 0000 002C                     btst    #0,$2C(a1)
000DFA8E 6700 0000                          beq.w   locret_20C8A4
000DFA92 082A 0000 002C                     btst    #0,$2C(a2)
000DFA98 6700 0000                          beq.w   locret_20C8A4
000DFA9C 3669 0030                          movea.w $30(a1),a3
000DFAA0 366B 0030                          movea.w $30(a3),a3
000DFAA4 386A 0030                          movea.w $30(a2),a4
000DFAA8 386A 0030                          movea.w $30(a2),a4
000DFAAC 08A9 0000 002C                     bclr    #0,$2C(a1)
000DFAB2 08AB 0000 002C                     bclr    #0,$2C(a3)
000DFAB8 08AA 0000 002C                     bclr    #0,$2C(a2)
000DFABE 08AC 0000 002C                     bclr    #0,$2C(a4)
000DFAC4 5328 002D                          subq.b  #1,oVar2D(a0)
000DFAC8 6600 0000                          bne.w   loc_20C800
000DFACC 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DFAD2 08A8 0001 002C                     bclr    #1,oVar2C(a0)
000DFAD8 4E75                               rts
000DFADA                            ; ---------------------------------------------------------------------------
000DFADA                            
000DFADA                            loc_20C800:                             ; CODE XREF: ObjBossBody_0_RoutineC+82↑j
000DFADA 0868 0006 002C                     bchg    #6,oVar2C(a0)
000DFAE0 6700 0000                          beq.w   loc_20C858
000DFAE4 3268 0030                          movea.w oVar30(a0),a1
000DFAE8 08A9 0001 002C                     bclr    #1,$2C(a1)
000DFAEE 6100 0000                          bsr.w   sub_20C8D0
000DFAF2 6100 0000                          bsr.w   sub_20C918
000DFAF6 3269 0030                          movea.w $30(a1),a1
000DFAFA 137C 000A 0024                     move.b  #$A,$24(a1)
000DFB00 3269 0030                          movea.w $30(a1),a1
000DFB04 137C 0002 0024                     move.b  #2,$24(a1)
000DFB0A 3268 0032                          movea.w oVar32(a0),a1
000DFB0E 08A9 0001 002C                     bclr    #1,$2C(a1)
000DFB14 137C 0002 0024                     move.b  #2,$24(a1)
000DFB1A 6100 0000                          bsr.w   sub_20C8F4
000DFB1E 6100 0000                          bsr.w   sub_20C93C
000DFB22 3269 0030                          movea.w $30(a1),a1
000DFB26 137C 000C 0024                     move.b  #$C,$24(a1)
000DFB2C 6100 FC66                          bsr.w   sub_20C4BA
000DFB30 4E75                               rts
000DFB32                            ; ---------------------------------------------------------------------------
000DFB32                            
000DFB32                            loc_20C858:                             ; CODE XREF: ObjBossBody_0_RoutineC+9A↑j
000DFB32 3268 0030                          movea.w oVar30(a0),a1
000DFB36 08A9 0001 002C                     bclr    #1,$2C(a1)
000DFB3C 137C 0002 0024                     move.b  #2,$24(a1)
000DFB42 6100 0000                          bsr.w   sub_20C8F4
000DFB46 6100 0000                          bsr.w   sub_20C93C
000DFB4A 3269 0030                          movea.w $30(a1),a1
000DFB4E 137C 000C 0024                     move.b  #$C,$24(a1)
000DFB54 3268 0032                          movea.w oVar32(a0),a1
000DFB58 08A9 0001 002C                     bclr    #1,$2C(a1)
000DFB5E 6100 0000                          bsr.w   sub_20C8D0
000DFB62 6100 0000                          bsr.w   sub_20C918
000DFB66 3269 0030                          movea.w $30(a1),a1
000DFB6A 137C 000A 0024                     move.b  #$A,$24(a1)
000DFB70 3269 0030                          movea.w $30(a1),a1
000DFB74 137C 0002 0024                     move.b  #2,$24(a1)
000DFB7A 6100 FC18                          bsr.w   sub_20C4BA
000DFB7E                            
000DFB7E                            locret_20C8A4:                          ; CODE XREF: ObjBossBody_0_RoutineC+48↑j ...
000DFB7E 4E75                               rts
000DFB80                            ; End of function ObjBossBody_0_RoutineC
000DFB80                            
000DFB80                            
000DFB80                            ; =============== S U B R O U T I N E =======================================
000DFB80                            
000DFB80                            
000DFB80                            ObjBossBody_0_RoutineE:                 ; DATA XREF: ROM:0020C1E8↑o
000DFB80 0828 0000 002C                     btst    #0,oVar2C(a0)
000DFB86 6600 0000                          bne.w   loc_20C8C8
000DFB8A 4EB8 6F3C                          jsr     CheckSolidDown
000DFB8E 4A41                               tst.w   d1
000DFB90 6F00                               ble.s   locret_20C8C6
000DFB92 3268 002E                          movea.w oVar2E(a0),a1
000DFB96 5468 000C                          addq.w  #2,oY(a0)
000DFB9A 5469 000C                          addq.w  #2,$C(a1)
000DFB9E                            
000DFB9E                            locret_20C8C6:                          ; CODE XREF: ObjBossBody_0_RoutineE+12↑j
000DFB9E 4E75                               rts
000DFBA0                            ; ---------------------------------------------------------------------------
000DFBA0                            
000DFBA0                            loc_20C8C8:                             ; CODE XREF: ObjBossBody_0_RoutineE+6↑j
000DFBA0 588F                               addq.l  #4,sp
000DFBA2 4EF8 40BE                          jmp     DeleteObject
000DFBA6                            ; End of function ObjBossBody_0_RoutineE
000DFBA6                            
000DFBA6                            
000DFBA6                            ; =============== S U B R O U T I N E =======================================
000DFBA6                            
000DFBA6                            
000DFBA6                            sub_20C8D0:                             ; CODE XREF: ObjBossBody_0_Routine2+22↑p ...
000DFBA6 48E7 0040                          movem.l a1,-(sp)
000DFBAA 08E9 0005 002C                     bset    #5,$2C(a1)
000DFBB0 3269 0030                          movea.w $30(a1),a1
000DFBB4 08E9 0005 002C                     bset    #5,$2C(a1)
000DFBBA 3269 0030                          movea.w $30(a1),a1
000DFBBE 08E9 0005 002C                     bset    #5,$2C(a1)
000DFBC4 4CDF 0200                          movem.l (sp)+,a1
000DFBC8 4E75                               rts
000DFBCA                            ; End of function sub_20C8D0
000DFBCA                            
000DFBCA                            
000DFBCA                            ; =============== S U B R O U T I N E =======================================
000DFBCA                            
000DFBCA                            
000DFBCA                            sub_20C8F4:                             ; CODE XREF: ObjBossBody_0_Routine4+2C↑p ...
000DFBCA 48E7 0040                          movem.l a1,-(sp)
000DFBCE 08A9 0005 002C                     bclr    #5,$2C(a1)
000DFBD4 3269 0030                          movea.w $30(a1),a1
000DFBD8 08A9 0005 002C                     bclr    #5,$2C(a1)
000DFBDE 3269 0030                          movea.w $30(a1),a1
000DFBE2 08A9 0005 002C                     bclr    #5,$2C(a1)
000DFBE8 4CDF 0200                          movem.l (sp)+,a1
000DFBEC 4E75                               rts
000DFBEE                            ; End of function sub_20C8F4
000DFBEE                            
000DFBEE                            
000DFBEE                            ; =============== S U B R O U T I N E =======================================
000DFBEE                            
000DFBEE                            
000DFBEE                            sub_20C918:                             ; CODE XREF: ObjBossBody_0_Routine4+42↑p ...
000DFBEE 48E7 0040                          movem.l a1,-(sp)
000DFBF2 08E9 0004 002C                     bset    #4,$2C(a1)
000DFBF8 3269 0030                          movea.w $30(a1),a1
000DFBFC 08E9 0004 002C                     bset    #4,$2C(a1)
000DFC02 3269 0030                          movea.w $30(a1),a1
000DFC06 08E9 0004 002C                     bset    #4,$2C(a1)
000DFC0C 4CDF 0200                          movem.l (sp)+,a1
000DFC10 4E75                               rts
000DFC12                            ; End of function sub_20C918
000DFC12                            
000DFC12                            
000DFC12                            ; =============== S U B R O U T I N E =======================================
000DFC12                            
000DFC12                            
000DFC12                            sub_20C93C:                             ; CODE XREF: ObjBossBody_0_Routine4+30↑p ...
000DFC12 48E7 0040                          movem.l a1,-(sp)
000DFC16 08A9 0004 002C                     bclr    #4,$2C(a1)
000DFC1C 3269 0030                          movea.w $30(a1),a1
000DFC20 08A9 0004 002C                     bclr    #4,$2C(a1)
000DFC26 3269 0030                          movea.w $30(a1),a1
000DFC2A 08A9 0004 002C                     bclr    #4,$2C(a1)
000DFC30 4CDF 0200                          movem.l (sp)+,a1
000DFC34 4E75                               rts
000DFC36                            ; End of function sub_20C93C
000DFC36                            
000DFC36                            
000DFC36                            ; =============== S U B R O U T I N E =======================================
000DFC36                            
000DFC36                            
000DFC36                            sub_20C960:                             ; CODE XREF: ObjBossForearm_0_Routine4+72↓p
000DFC36 4EB8 7CE4                          jsr     FindObjSlot
000DFC3A 6600                               bne.s   locret_20C988
000DFC3C 50E9 0025                          st      oRoutine2(a1)
000DFC40 12BC 0018                          move.b  #$18,obj(a1) ; Load Explosion Object
000DFC44 3368 0008 0008                     move.w  oX(a0),oX(a1)
000DFC4A 3368 000C 000C                     move.w  oY(a0),oY(a1)
000DFC50 303C 00C4                          move.w  #sfx_explosion,d0
000DFC54 4EB8 2708                          jsr     PlayFMSound
000DFC58                            
000DFC58                            locret_20C988:                          ; CODE XREF: sub_20C960+6↑j
000DFC58 4E75                               rts
000DFC5A                            ; End of function sub_20C960
000DFC5A                            
000DFC5A                            
000DFC5A                            ; =============== S U B R O U T I N E =======================================
000DFC5A                            
000DFC5A                            
000DFC5A                            ObjBossElbow: 
000DFC5A                                                ; DATA XREF: ROM:00203C36↑o
000DFC5A 7000                       	moveq   #0,d0
000DFC5C 1028 0024                          move.b  oRoutine(a0),d0
000DFC60 303B 0000                          move.w  off_20C99E(pc,d0.w),d0
000DFC64 4EBB 0000                          jsr     off_20C99E(pc,d0.w)
000DFC68 4EF8 4012                          jmp     DrawObject
000DFC6C                            ; End of function ObjBossElbow
000DFC6C                            
000DFC6C                            ; ---------------------------------------------------------------------------
000DFC6C                            off_20C99E:
000DFC6C 0000                               dc.w ObjBossElbow_0_Routine0-off_20C99E
000DFC6E 0000                               dc.w ObjBossElbow_0_Routine2-off_20C99E
000DFC70 0000                               dc.w ObjBossElbow_0_Routine4-off_20C99E
000DFC72                            
000DFC72                            ; =============== S U B R O U T I N E =======================================
000DFC72                            
000DFC72                            
000DFC72                            ObjBossElbow_0_Routine0:                ; DATA XREF: ROM:off_20C99E↑o
000DFC72 4228 0022                          clr.b   oStatus(a0)
000DFC76 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000DFC7C 117C 0010 0019                     move.b  #$10,oWidth(a0)
000DFC82 117C 000C 0016                     move.b  #$C,oYRadius(a0)
000DFC88 317C 2359 0002                     move.w  #$2359,oTile(a0)
000DFC8E 217C 0000 0000 0004                move.l  #Spr_20D902,oSprites(a0)
000DFC96 117C 0002 0024                     move.b  #2,oRoutine(a0)
000DFC9C                            
000DFC9C                            ObjBossElbow_0_Routine2:                ; DATA XREF: ROM:0020C9A0↑o
000DFC9C 3268 002E                          movea.w oVar2E(a0),a1
000DFCA0 3169 0008 0008                     move.w  8(a1),oX(a0)
000DFCA6 0668 0018 0008                     addi.w  #$18,oX(a0)
000DFCAC 3169 000C 000C                     move.w  $C(a1),oY(a0)
000DFCB2 0668 FFF4 000C                     addi.w  #-$C,oY(a0)
000DFCB8 08A8 0006 002C                     bclr    #6,oVar2C(a0)
000DFCBE 6600                               bne.s   loc_20CA12
000DFCC0 08A8 0005 002C                     bclr    #5,oVar2C(a0)
000DFCC6 6600                               bne.s   loc_20C9FC
000DFCC8 4E75                               rts
000DFCCA                            ; ---------------------------------------------------------------------------
000DFCCA                            
000DFCCA                            loc_20C9FC:                             ; CODE XREF: ObjBossElbow_0_Routine0+54↑j
000DFCCA 3268 0032                          movea.w oVar32(a0),a1
000DFCCE 137C 000A 0024                     move.b  #$A,oRoutine(a1)
000DFCD4 4268 0032                          clr.w   oVar32(a0)
000DFCD8 137C 0000 001A                     move.b  #0,oMapFrame(a1)
000DFCDE 4E75                               rts
000DFCE0                            ; ---------------------------------------------------------------------------
000DFCE0                            
000DFCE0                            loc_20CA12:                             ; CODE XREF: ObjBossElbow_0_Routine0+4C↑j
000DFCE0 3268 0030                          movea.w oVar30(a0),a1
000DFCE4 137C 000A 0024                     move.b  #$A,oRoutine(a1)
000DFCEA 4268 0030                          clr.w   oVar30(a0)
000DFCEE 3268 0032                          movea.w oVar32(a0),a1
000DFCF2 3269 0030                          movea.w $30(a1),a1
000DFCF6 4E75                               rts
000DFCF8                            ; End of function ObjBossElbow_0_Routine0
000DFCF8                            
000DFCF8                            
000DFCF8                            ; =============== S U B R O U T I N E =======================================
000DFCF8                            
000DFCF8                            
000DFCF8                            ObjBossElbow_0_Routine4:                ; DATA XREF: ROM:0020C9A2↑o
000DFCF8                            
000DFCF8                            ; FUNCTION CHUNK AT 0020D7AE SIZE 00000002 BYTES
000DFCF8                            
000DFCF8 08E8 0001 002C                     bset    #1,oVar2C(a0)
000DFCFE 6600                               bne.s   loc_20CA44
000DFD00 217C FFFF 0000 003C                move.l  #$FFFF0000,oVar3C(a0)
000DFD08 217C FFFE 0000 0010                move.l  #$FFFE0000,oXVel(a0)
000DFD10 6000                               bra.s   loc_20CA54
000DFD12                            ; ---------------------------------------------------------------------------
000DFD12                            
000DFD12                            loc_20CA44:                             ; CODE XREF: ObjBossElbow_0_Routine4+6↑j
000DFD12 06A8 FFFF FA00 003C                addi.l  #-$600,oVar3C(a0)
000DFD1A 06A8 0000 1800 0010                addi.l  #$1800,oXVel(a0)
000DFD22                            
000DFD22                            loc_20CA54:                             ; CODE XREF: ObjBossElbow_0_Routine4+18↑j
000DFD22 2028 003C                          move.l  oVar3C(a0),d0
000DFD26 D1A8 0008                          add.l   d0,oX(a0)
000DFD2A 2028 0010                          move.l  oXVel(a0),d0
000DFD2E D1A8 000C                          add.l   d0,oY(a0)
000DFD32 0C68 0240 000C                     cmpi.w  #$240,oY(a0)
000DFD38 6D00                               blt.s   loc_20CA74
000DFD3A 588F                               addq.l  #4,sp
000DFD3C 4EF8 40BE                          jmp     DeleteObject
000DFD40                            ; ---------------------------------------------------------------------------
000DFD40                            
000DFD40                            loc_20CA74:                             ; CODE XREF: ObjBossElbow_0_Routine4+40↑j
000DFD40 6000 0000                          bra.w   locret_20D7AE
000DFD44                            ; End of function ObjBossElbow_0_Routine4
000DFD44                            
000DFD44                            
000DFD44                            ; =============== S U B R O U T I N E =======================================
000DFD44                            
000DFD44                            
000DFD44                            ObjBossUpperArm:                        ; DATA XREF: ROM:00203C3A↑o
000DFD44 7000                               moveq   #0,d0
000DFD46 1028 0024                          move.b  oRoutine(a0),d0
000DFD4A 303B 0000                          move.w  off_20CA96(pc,d0.w),d0
000DFD4E 4EBB 0000                          jsr     off_20CA96(pc,d0.w)
000DFD52 0828 0002 002C                     btst    #2,oVar2C(a0)
000DFD58 6600                               bne.s   locret_20CA94
000DFD5A 4EF8 4012                          jmp     DrawObject
000DFD5E                            ; ---------------------------------------------------------------------------
000DFD5E                            
000DFD5E                            locret_20CA94:                          ; CODE XREF: ObjBossUpperArm+14↑j
000DFD5E 4E75                               rts
000DFD60                            ; End of function ObjBossUpperArm
000DFD60                            
000DFD60                            ; ---------------------------------------------------------------------------
000DFD60 0000                       off_20CA96:dc.w ObjBossUpperArm_0_Routine0-*
000DFD62                                                                    ; CODE XREF: ObjBossUpperArm+A↑p
000DFD62                                                                    ; DATA XREF: ...
000DFD62 0000                               dc.w ObjBossUpperArm_0_Routine2-off_20CA96
000DFD64 0000                               dc.w ObjBossUpperArm_0_Routine4-off_20CA96
000DFD66 0000                               dc.w ObjBossUpperArm_0_Routine6-off_20CA96
000DFD68 0000                               dc.w ObjBossUpperArm_0_Routine4-off_20CA96
000DFD6A 0000                               dc.w ObjBossUpperArm_0_RoutineA-off_20CA96
000DFD6C                            
000DFD6C                            ; =============== S U B R O U T I N E =======================================
000DFD6C                            
000DFD6C                            
000DFD6C                            ObjBossUpperArm_0_Routine0:             ; DATA XREF: ROM:off_20CA96↑o
000DFD6C                            
000DFD6C                            ; FUNCTION CHUNK AT 0020D7AE SIZE 00000002 BYTES
000DFD6C                            
000DFD6C 4228 0022                          clr.b   oFlags(a0)
000DFD70 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000DFD76 117C 0008 0019                     move.b  #8,oWidth(a0)
000DFD7C 117C 0008 0016                     move.b  #8,oYRadius(a0)
000DFD82 317C 2359 0002                     move.w  #$2359,oTile(a0)
000DFD88 217C 0000 0000 0004                move.l  #Spr_20D910,oSprites(a0)
000DFD90 117C 0006 0024                     move.b  #6,oRoutine(a0)
000DFD96                            
000DFD96                            ObjBossUpperArm_0_Routine2:             ; DATA XREF: ROM:0020CA98↑o
000DFD96 5528 002A                          subq.b  #2,oVar2A(a0)
000DFD9A 6200 0000                          bhi.w   loc_20CB6E
000DFD9E 117C 0004 0024                     move.b  #4,oRoutine(a0)
000DFDA4 4228 002A                          clr.b   oVar2A(a0)
000DFDA8 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DFDAE 6000 0000                          bra.w   loc_20CB6E
000DFDB2                            ; ---------------------------------------------------------------------------
000DFDB2                            
000DFDB2                            ObjBossUpperArm_0_Routine6:             ; DATA XREF: ROM:0020CA9C↑o
000DFDB2 5428 002A                          addq.b  #2,oVar2A(a0)
000DFDB6 0C28 0030 002A                     cmpi.b  #$30,oVar2A(a0) ; '0'
000DFDBC 6500 0000                          bcs.w   loc_20CB6E
000DFDC0 117C 0008 0024                     move.b  #8,oRoutine(a0)
000DFDC6 117C 0030 002A                     move.b  #$30,oVar2A(a0) ; '0'
000DFDCC 08E8 0000 002C                     bset    #0,oVar2C(a0)
000DFDD2 6000 0000                          bra.w   loc_20CB6E
000DFDD6                            ; ---------------------------------------------------------------------------
000DFDD6                            
000DFDD6                            ObjBossUpperArm_0_Routine4:             ; DATA XREF: ROM:0020CA9A↑o ...
000DFDD6 6000 0000                          bra.w   loc_20CB6E
000DFDDA                            ; ---------------------------------------------------------------------------
000DFDDA                            
000DFDDA                            ObjBossUpperArm_0_RoutineA:             ; DATA XREF: ROM:0020CAA0↑o
000DFDDA 08E8 0001 002C                     bset    #1,oVar2C(a0)
000DFDE0 6600                               bne.s   loc_20CB3A
000DFDE2 117C 0000 002B                     move.b  #0,oVar2B(a0)
000DFDE8 217C 0001 0000 003C                move.l  #$10000,oVar3C(a0)
000DFDF0 217C FFFE 0000 0010                move.l  #$FFFE0000,oXVel(a0)
000DFDF8 3268 0030                          movea.w oVar30(a0),a1
000DFDFC 137C 0004 0024                     move.b  #4,$24(a1)
000DFE02 6000                               bra.s   loc_20CB4A
000DFE04                            ; ---------------------------------------------------------------------------
000DFE04                            
000DFE04                            loc_20CB3A:                             ; CODE XREF: ObjBossUpperArm_0_Routine0+74↑j
000DFE04 06A8 0000 0600 003C                addi.l  #$600,oVar3C(a0)
000DFE0C 06A8 0000 1F00 0010                addi.l  #$1F00,oXVel(a0)
000DFE14                            
000DFE14                            loc_20CB4A:                             ; CODE XREF: ObjBossUpperArm_0_Routine0+96↑j
000DFE14 2028 003C                          move.l  oVar3C(a0),d0
000DFE18 D1A8 0008                          add.l   d0,oX(a0)
000DFE1C 2028 0010                          move.l  oXVel(a0),d0
000DFE20 D1A8 000C                          add.l   d0,oY(a0)
000DFE24 0C68 0240 000C                     cmpi.w  #$240,oY(a0)
000DFE2A 6D00                               blt.s   loc_20CB6A
000DFE2C 588F                               addq.l  #4,sp
000DFE2E 4EF8 40BE                          jmp     DeleteObject
000DFE32                            ; ---------------------------------------------------------------------------
000DFE32                            
000DFE32                            loc_20CB6A:                             ; CODE XREF: ObjBossUpperArm_0_Routine0+BE↑j
000DFE32 6000 0000                          bra.w   locret_20D7AE
000DFE36                            ; ---------------------------------------------------------------------------
000DFE36                            
000DFE36                            loc_20CB6E:                             ; CODE XREF: ObjBossUpperArm_0_Routine0+2E↑j ...
000DFE36 3268 002E                          movea.w oVar2E(a0),a1
000DFE3A 3169 0008 0008                     move.w  8(a1),oX(a0)
000DFE40 3169 000C 000C                     move.w  $C(a1),oY(a0)
000DFE46 7000                               moveq   #0,d0
000DFE48 1028 002A                          move.b  oVar2A(a0),d0
000DFE4C 0600 0040                          addi.b  #$40,d0 ; '@'
000DFE50 4EB8 0AAC                          jsr     CalcSine
000DFE54 E840                               asr.w   #4,d0
000DFE56 E841                               asr.w   #4,d1
000DFE58 D368 0008                          add.w   d1,oX(a0)
000DFE5C D168 000C                          add.w   d0,oY(a0)
000DFE60 0828 0002 002C                     btst    #2,oVar2C(a0)
000DFE66 6700                               beq.s   locret_20CBA8
000DFE68 0668 FFF6 0008                     addi.w  #-$A,oX(a0)
000DFE6E                            
000DFE6E                            locret_20CBA8:                          ; CODE XREF: ObjBossUpperArm_0_Routine0+FE↑j
000DFE6E 4E75                               rts
000DFE70                            ; End of function ObjBossUpperArm_0_Routine0
000DFE70                            
000DFE70                            
000DFE70                            ; =============== S U B R O U T I N E =======================================
000DFE70                            
000DFE70                            
000DFE70                            ObjBossForearm:                         ; DATA XREF: ROM:00203C3E↑o
000DFE70 7000                               moveq   #0,d0
000DFE72 1028 0024                          move.b  oRoutine(a0),d0
000DFE76 303B 0000                          move.w  off_20CBBE(pc,d0.w),d0
000DFE7A 4EBB 0000                          jsr     off_20CBBE(pc,d0.w)
000DFE7E 4EF8 4012                          jmp     DrawObject
000DFE82                            ; End of function ObjBossForearm
000DFE82                            
000DFE82                            ; ---------------------------------------------------------------------------
000DFE82 0000                       off_20CBBE:dc.w ObjBossForearm_0_Routine0-*
000DFE84                                                                    ; CODE XREF: ObjBossForearm+A↑p
000DFE84                                                                    ; DATA XREF: ...
000DFE84 0000                               dc.w ObjBossForearm_0_Routine2-off_20CBBE
000DFE86 0000                               dc.w ObjBossForearm_0_Routine4-off_20CBBE
000DFE88 0000                               dc.w ObjBossForearm_0_Routine6-off_20CBBE
000DFE8A 0000                               dc.w ObjBossForearm_0_Routine8-off_20CBBE
000DFE8C 0000                               dc.w ObjBossForearm_0_RoutineA-off_20CBBE
000DFE8E                            
000DFE8E                            ; =============== S U B R O U T I N E =======================================
000DFE8E                            
000DFE8E                            
000DFE8E                            ObjBossForearm_0_Routine0:              ; DATA XREF: ROM:off_20CBBE↑o
000DFE8E 4228 0022                          clr.b   oFlags(a0)
000DFE92 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000DFE98 117C 0020 0019                     move.b  #$20,oWidth(a0) ; ' '
000DFE9E 117C 0008 0016                     move.b  #8,oYRadius(a0)
000DFEA4 317C 2359 0002                     move.w  #$2359,oTile(a0)
000DFEAA 117C 0002 0024                     move.b  #2,oRoutine(a0)
000DFEB0                            
000DFEB0                            ObjBossForearm_0_Routine2:              ; CODE XREF: ObjBossForearm_0_Routine6:loc_20CC62↓j ...
000DFEB0 3268 002E                          movea.w oVar2E(a0),a1
000DFEB4 3169 0008 0008                     move.w  8(a1),oX(a0)
000DFEBA 0668 FFDC 0008                     addi.w  #-$24,oX(a0)
000DFEC0 3028 0034                          move.w  oVar34(a0),d0
000DFEC4 D168 0008                          add.w   d0,oX(a0)
000DFEC8 3169 000C 000C                     move.w  $C(a1),oY(a0)
000DFECE 0668 0000 000C                     addi.w  #0,oY(a0)
000DFED4 0828 0007 002C                     btst    #7,oVar2C(a0)
000DFEDA 6600                               bne.s   loc_20CC38
000DFEDC 43F9 00FF D000                     lea     ($FFD000).l,a1
000DFEE2 3229 000C                          move.w  objPlayerSlot+oY-objPlayerSlot(a1),d1
000DFEE6 B268 000C                          cmp.w   oY(a0),d1
000DFEEA 6E00                               bgt.s   loc_20CC38
000DFEEC 0C68 FFF8 0038                     cmpi.w  #$FFF8,oVar38(a0)
000DFEF2 6F00                               ble.s   loc_20CC48
000DFEF4 04A8 0001 0000 0038                subi.l  #$10000,oVar38(a0)
000DFEFC 6000                               bra.s   loc_20CC48
000DFEFE                            ; ---------------------------------------------------------------------------
000DFEFE                            
000DFEFE                            loc_20CC38:                             ; CODE XREF: ObjBossForearm_0_Routine0+4C↑j ...
000DFEFE 0C68 0008 0038                     cmpi.w  #8,oVar38(a0)
000DFF04 6C00                               bge.s   loc_20CC48
000DFF06 06A8 0001 0000 0038                addi.l  #$10000,oVar38(a0)
000DFF0E                            
000DFF0E                            loc_20CC48:                             ; CODE XREF: ObjBossForearm_0_Routine0+62↑j ...
000DFF0E 3028 0038                          move.w  oVar38(a0),d0
000DFF12 D168 000C                          add.w   d0,oY(a0)
000DFF16 4E75                               rts
000DFF18                            ; End of function ObjBossForearm_0_Routine0
000DFF18                            
000DFF18                            
000DFF18                            ; =============== S U B R O U T I N E =======================================
000DFF18                            
000DFF18                            
000DFF18                            ObjBossForearm_0_Routine6:              ; DATA XREF: ROM:0020CBC4↑o
000DFF18 0C68 0000 0034                     cmpi.w  #0,oVar34(a0)
000DFF1E 6F00                               ble.s   loc_20CC62
000DFF20 04A8 0000 8000 0034                subi.l  #$8000,oVar34(a0)
000DFF28                            
000DFF28                            loc_20CC62:                             ; CODE XREF: ObjBossForearm_0_Routine6+6↑j
000DFF28 6086                               bra.s   ObjBossForearm_0_Routine2
000DFF2A                            ; End of function ObjBossForearm_0_Routine6
000DFF2A                            
000DFF2A                            
000DFF2A                            ; =============== S U B R O U T I N E =======================================
000DFF2A                            
000DFF2A                            
000DFF2A                            ObjBossForearm_0_Routine8:              ; DATA XREF: ROM:0020CBC6↑o
000DFF2A 0C68 0010 0034                     cmpi.w  #$10,oVar34(a0)
000DFF30 6C00                               bge.s   loc_20CC74
000DFF32 06A8 0000 8000 0034                addi.l  #$8000,oVar34(a0)
000DFF3A                            
000DFF3A                            loc_20CC74:                             ; CODE XREF: ObjBossForearm_0_Routine8+6↑j
000DFF3A 6000 FF74                          bra.w   ObjBossForearm_0_Routine2
000DFF3E                            ; End of function ObjBossForearm_0_Routine8
000DFF3E                            
000DFF3E                            
000DFF3E                            ; =============== S U B R O U T I N E =======================================
000DFF3E                            
000DFF3E                            
000DFF3E                            ObjBossForearm_0_RoutineA:              ; DATA XREF: ROM:0020CBC8↑o
000DFF3E 0C68 0008 0034                     cmpi.w  #8,oVar34(a0)
000DFF44 6C00                               bge.s   loc_20CC8A
000DFF46 06A8 0000 8000 0034                addi.l  #$8000,oVar34(a0)
000DFF4E 6000                               bra.s   loc_20CC90
000DFF50                            ; ---------------------------------------------------------------------------
000DFF50                            
000DFF50                            loc_20CC8A:                             ; CODE XREF: ObjBossForearm_0_RoutineA+6↑j
000DFF50 117C 0001 001A                     move.b  #1,oSprFrame(a0)
000DFF56                            
000DFF56                            loc_20CC90:                             ; CODE XREF: ObjBossForearm_0_RoutineA+10↑j
000DFF56 3268 002E                          movea.w oVar2E(a0),a1
000DFF5A 3169 0008 0008                     move.w  oX(a1),oX(a0)
000DFF60 0668 FFDC 0008                     addi.w  #-$24,oX(a0)
000DFF66 3028 0034                          move.w  oVar34(a0),d0
000DFF6A D168 0008                          add.w   d0,oX(a0)
000DFF6E 3169 000C 000C                     move.w  oY(a1),oY(a0)
000DFF74 0668 0000 000C                     addi.w  #0,oY(a0)
000DFF7A 0C68 0008 0038                     cmpi.w  #8,oVar38(a0)
000DFF80 6C00                               bge.s   loc_20CCC4
000DFF82 06A8 0001 0000 0038                addi.l  #$10000,oVar38(a0)
000DFF8A                            
000DFF8A                            loc_20CCC4:                             ; CODE XREF: ObjBossForearm_0_RoutineA+42↑j
000DFF8A 3028 0038                          move.w  oVar38(a0),d0
000DFF8E D168 000C                          add.w   d0,oY(a0)
000DFF92 4E75                               rts
000DFF94                            ; End of function ObjBossForearm_0_RoutineA
000DFF94                            
000DFF94                            
000DFF94                            ; =============== S U B R O U T I N E =======================================
000DFF94                            
000DFF94                            
000DFF94                            ObjBossForearm_0_Routine4:              ; DATA XREF: ROM:0020CBC2↑o
000DFF94                            
000DFF94                            ; FUNCTION CHUNK AT 0020D7AE SIZE 00000002 BYTES
000DFF94                            
000DFF94 08E8 0001 002C                     bset    #1,oVar2C(a0)
000DFF9A 6600                               bne.s   loc_20CCFC
000DFF9C 117C 0001 002B                     move.b  #1,oVar2B(a0)
000DFFA2 4228 002A                          clr.b   oVar2A(a0)
000DFFA6 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000DFFAE 217C 0001 0000 0010                move.l  #$10000,oXVel(a0)
000DFFB6 3268 0030                          movea.w oVar30(a0),a1
000DFFBA 137C 0004 0024                     move.b  #4,oRoutine(a1)
000DFFC0 6000                               bra.s   loc_20CD0C
000DFFC2                            ; ---------------------------------------------------------------------------
000DFFC2                            
000DFFC2                            loc_20CCFC:                             ; CODE XREF: ObjBossForearm_0_Routine4+6↑j
000DFFC2 06A8 FFFF F9E0 003C                addi.l  #-$620,oVar3C(a0)
000DFFCA 06A8 0000 1220 0010                addi.l  #$1220,oXVel(a0)
000DFFD2                            
000DFFD2                            loc_20CD0C:                             ; CODE XREF: ObjBossForearm_0_Routine4+2C↑j
000DFFD2 2028 003C                          move.l  oVar3C(a0),d0
000DFFD6 D1A8 0008                          add.l   d0,oX(a0)
000DFFDA 2028 0010                          move.l  oXVel(a0),d0
000DFFDE D1A8 000C                          add.l   d0,oY(a0)
000DFFE2 0C68 0240 000C                     cmpi.w  #$240,oY(a0)
000DFFE8 6D00                               blt.s   loc_20CD2C
000DFFEA 588F                               addq.l  #4,sp
000DFFEC 4EF8 40BE                          jmp     DeleteObject
000DFFF0                            ; ---------------------------------------------------------------------------
000DFFF0                            
000DFFF0                            loc_20CD2C:                             ; CODE XREF: ObjBossForearm_0_Routine4+54↑j
000DFFF0 5228 002A                          addq.b  #1,oVar2A(a0)
000DFFF4 7400                               moveq   #0,d2
000DFFF6 1428 002A                          move.b  oVar2A(a0),d2
000DFFFA 84FC 0007                          divu.w  #7,d2
000DFFFE 4842                               swap    d2
000E0000 4A42                               tst.w   d2
000E0002 6600                               bne.s   loc_20CD44
000E0004 6100 FC30                          bsr.w   sub_20C960
000E0008                            
000E0008                            loc_20CD44:                             ; CODE XREF: ObjBossForearm_0_Routine4+70↑j
000E0008 6000 0000                          bra.w   locret_20D7AE
000E000C                            ; End of function ObjBossForearm_0_Routine4
000E000C                            
000E000C                            
000E000C                            ; =============== S U B R O U T I N E =======================================
000E000C                            
000E000C                            
000E000C                            ObjBossBumper:                          ; DATA XREF: ROM:00203C42↑o
000E000C 7000                               moveq   #0,d0
000E000E 1028 0024                          move.b  oRoutine(a0),d0
000E0012 303B 0000                          move.w  off_20CD5C(pc,d0.w),d0
000E0016 4EBB 0000                          jsr     off_20CD5C(pc,d0.w)
000E001A 4EF8 4012                          jmp     DrawObject
000E001E                            ; End of function ObjBossBumper
000E001E                            
000E001E                            ; ---------------------------------------------------------------------------
000E001E 0000                       off_20CD5C:dc.w ObjBossBumper_0_Routine0-*
000E0020                                                                    ; CODE XREF: ObjBossBumper+A↑p
000E0020                                                                    ; DATA XREF: ...
000E0020 0000                               dc.w ObjBossBumper_0_Routine2-off_20CD5C
000E0022 0000                               dc.w ObjBossBumper_0_Routine4-off_20CD5C
000E0024                            
000E0024                            ; =============== S U B R O U T I N E =======================================
000E0024                            
000E0024                            
000E0024                            ObjBossBumper_0_Routine0:               ; DATA XREF: ROM:off_20CD5C↑o
000E0024 4228 0022                          clr.b   oFlags(a0)
000E0028 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000E002E 117C 000C 0019                     move.b  #$C,oWidth(a0)
000E0034 117C 0010 0016                     move.b  #$10,oYRadius(a0)
000E003A 317C 2359 0002                     move.w  #$2359,oTile(a0)
000E0040 217C 0000 0000 0004                move.l  #Spr_20D95A,oSprites(a0)
000E0048 117C 0002 0024                     move.b  #2,oRoutine(a0)
000E004E                            
000E004E                            ObjBossBumper_0_Routine2:               ; DATA XREF: ROM:0020CD5E↑o
000E004E 3268 002E                          movea.w oVar2E(a0),a1
000E0052 3169 0008 0008                     move.w  8(a1),oX(a0)
000E0058 0668 FFF4 0008                     addi.w  #-$C,oX(a0)
000E005E 3169 000C 000C                     move.w  $C(a1),oY(a0)
000E0064 4A29 001A                          tst.b   $1A(a1)
000E0068 6700                               beq.s   loc_20CDBC
000E006A 0C29 0001 001A                     cmpi.b  #1,$1A(a1)
000E0070 6600                               bne.s   loc_20CDB6
000E0072 5068 0008                          addq.w  #8,oX(a0)
000E0076 6000                               bra.s   loc_20CDBC
000E0078                            ; ---------------------------------------------------------------------------
000E0078                            
000E0078                            loc_20CDB6:                             ; CODE XREF: ObjBossBumper_0_Routine0+4C↑j
000E0078 0668 0010 0008                     addi.w  #$10,oX(a0)
000E007E                            
000E007E                            loc_20CDBC:                             ; CODE XREF: ObjBossBumper_0_Routine0+44↑j ...
000E007E 08A8 0004 002C                     bclr    #4,oVar2C(a0)
000E0084 6700                               beq.s   locret_20CDC8
000E0086 5968 0008                          subq.w  #4,oX(a0)
000E008A                            
000E008A                            locret_20CDC8:                          ; CODE XREF: ObjBossBumper_0_Routine0+60↑j
000E008A 4E75                               rts
000E008C                            ; End of function ObjBossBumper_0_Routine0
000E008C                            
000E008C                            
000E008C                            ; =============== S U B R O U T I N E =======================================
000E008C                            
000E008C                            
000E008C                            ObjBossBumper_0_Routine4:               ; DATA XREF: ROM:0020CD60↑o
000E008C                            
000E008C                            ; FUNCTION CHUNK AT 0020D7AE SIZE 00000002 BYTES
000E008C                            
000E008C 08E8 0001 002C                     bset    #1,oVar2C(a0)
000E0092 6600                               bne.s   loc_20CDF2
000E0094 117C 0000 002B                     move.b  #0,oVar2B(a0)
000E009A 4228 0020                          clr.b   oColType(a0)
000E009E 4228 0021                          clr.b   oColStatus(a0)
000E00A2 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000E00AA 217C FFFE 8000 0010                move.l  #$FFFE8000,oXVel(a0)
000E00B2 6000                               bra.s   loc_20CE02
000E00B4                            ; ---------------------------------------------------------------------------
000E00B4                            
000E00B4                            loc_20CDF2:                             ; CODE XREF: ObjBossBumper_0_Routine4+6↑j
000E00B4 06A8 FFFF FB00 003C                addi.l  #-$500,oVar3C(a0)
000E00BC 06A8 0000 1800 0010                addi.l  #$1800,oXVel(a0)
000E00C4                            
000E00C4                            loc_20CE02:                             ; CODE XREF: ObjBossBumper_0_Routine4+26↑j
000E00C4 2028 003C                          move.l  oVar3C(a0),d0
000E00C8 D1A8 0008                          add.l   d0,oX(a0)
000E00CC 2028 0010                          move.l  oXVel(a0),d0
000E00D0 D1A8 000C                          add.l   d0,oY(a0)
000E00D4 0C68 0240 000C                     cmpi.w  #$240,oY(a0)
000E00DA 6D00                               blt.s   loc_20CE22
000E00DC 588F                               addq.l  #4,sp
000E00DE 4EF8 40BE                          jmp     DeleteObject
000E00E2                            ; ---------------------------------------------------------------------------
000E00E2                            
000E00E2                            loc_20CE22:                             ; CODE XREF: ObjBossBumper_0_Routine4+4E↑j
000E00E2 6000 0000                          bra.w   locret_20D7AE
000E00E6                            ; End of function ObjBossBumper_0_Routine4
000E00E6                            
000E00E6                            
000E00E6                            ; =============== S U B R O U T I N E =======================================
000E00E6                            
000E00E6                            
000E00E6                            ObjBossThigh:                           ; DATA XREF: ROM:00203C2A↑o
000E00E6 7000                               moveq   #0,d0
000E00E8 1028 0024                          move.b  oRoutine(a0),d0
000E00EC 303B 0000                          move.w  off_20CE3A(pc,d0.w),d0
000E00F0 4EBB 0000                          jsr     off_20CE3A(pc,d0.w)
000E00F4 4EF8 4012                          jmp     DrawObject
000E00F8                            ; End of function ObjBossThigh
000E00F8                            
000E00F8                            ; ---------------------------------------------------------------------------
000E00F8 0000                       off_20CE3A:dc.w ObjBossThigh_0_Routine0-*
000E00FA                                                                    ; CODE XREF: ObjBossThigh+A↑p
000E00FA                                                                    ; DATA XREF: ...
000E00FA 0000                               dc.w ObjBossThigh_0_Routine2-off_20CE3A
000E00FC 0000                               dc.w ObjBossThigh_0_Routine4-off_20CE3A
000E00FE 0000                               dc.w ObjBossThigh_0_Routine6-off_20CE3A
000E0100 0000                               dc.w ObjBossThigh_0_Routine8-off_20CE3A
000E0102 0000                               dc.w ObjBossThigh_0_RoutineA-off_20CE3A
000E0104 0000                               dc.w ObjBossThigh_0_RoutineC-off_20CE3A
000E0106 0000                               dc.w ObjBossThigh_0_RoutineE-off_20CE3A
000E0108 0000                               dc.w ObjBossThigh_0_Routine10-off_20CE3A
000E010A 0000                               dc.w ObjBossThigh_0_Routine12-off_20CE3A
000E010C 0000                               dc.w ObjBossThigh_0_Routine14-off_20CE3A
000E010E 0000                               dc.w ObjBossThigh_0_Routine16-off_20CE3A
000E0110 0000                               dc.w ObjBossThigh_0_Routine18-off_20CE3A
000E0112                            
000E0112                            ; =============== S U B R O U T I N E =======================================
000E0112                            
000E0112                            
000E0112                            ObjBossThigh_0_Routine0:                ; DATA XREF: ROM:off_20CE3A↑o
000E0112 4228 0022                          clr.b   oFlags(a0)
000E0116 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000E011C 117C 0008 0019                     move.b  #8,oWidth(a0)
000E0122 117C 0008 0016                     move.b  #8,oYRadius(a0)
000E0128 317C 2359 0002                     move.w  #$2359,oTile(a0)
000E012E 217C 0000 0000 0004                move.l  #Spr_20D8DA,oSprites(a0)
000E0136 117C 000C 0024                     move.b  #$C,oRoutine(a0)
000E013C 117C 0058 002A                     move.b  #$58,oVar2A(a0) ; 'X'
000E0142 117C 0002 003C                     move.b  #2,oVar3C(a0)
000E0148 4E75                               rts
000E014A                            ; End of function ObjBossThigh_0_Routine0
000E014A                            
000E014A                            
000E014A                            ; =============== S U B R O U T I N E =======================================
000E014A                            
000E014A                            
000E014A                            ObjBossThigh_0_Routine2:                ; DATA XREF: ROM:0020CE3C↑o
000E014A 3268 0030                          movea.w oVar30(a0),a1
000E014E 3269 0030                          movea.w $30(a1),a1
000E0152 0C29 0006 0024                     cmpi.b  #6,$24(a1)
000E0158 6700                               beq.s   loc_20CEB0
000E015A 0C29 0008 0024                     cmpi.b  #8,$24(a1)
000E0160 6700                               beq.s   loc_20CEB0
000E0162 08A9 0000 002C                     bclr    #0,$2C(a1)
000E0168 137C 0006 0024                     move.b  #6,$24(a1)
000E016E                            
000E016E                            loc_20CEB0:                             ; CODE XREF: ObjBossThigh_0_Routine2+E↑j ...
000E016E 0C28 0000 002A                     cmpi.b  #0,oVar2A(a0)
000E0174 6F00                               ble.s   loc_20CEC8
000E0176 1028 003C                          move.b  oVar3C(a0),d0
000E017A 9128 002A                          sub.b   d0,oVar2A(a0)
000E017E 0C28 0000 002A                     cmpi.b  #0,oVar2A(a0)
000E0184 6E00                               bgt.s   loc_20CEE4
000E0186                            
000E0186                            loc_20CEC8:                             ; CODE XREF: ObjBossThigh_0_Routine2+2A↑j
000E0186 117C 0000 002A                     move.b  #0,oVar2A(a0)
000E018C 0C29 0008 0024                     cmpi.b  #8,$24(a1)
000E0192 6700                               beq.s   loc_20CEDE
000E0194 08A9 0000 002C                     bclr    #0,$2C(a1)
000E019A 6700                               beq.s   loc_20CEE4
000E019C                            
000E019C                            loc_20CEDE:                             ; CODE XREF: ObjBossThigh_0_Routine2+48↑j
000E019C 117C 0004 0024                     move.b  #4,oRoutine(a0)
000E01A2                            
000E01A2                            loc_20CEE4:                             ; CODE XREF: ObjBossThigh_0_Routine2+3A↑j ...
000E01A2 6000 0000                          bra.w   loc_20D132
000E01A6                            ; ---------------------------------------------------------------------------
000E01A6                            
000E01A6                            ObjBossThigh_0_Routine4:                ; DATA XREF: ROM:0020CE3E↑o
000E01A6 3268 0030                          movea.w oVar30(a0),a1
000E01AA 3269 0030                          movea.w $30(a1),a1
000E01AE 1028 003C                          move.b  oVar3C(a0),d0
000E01B2 D128 002A                          add.b   d0,oVar2A(a0)
000E01B6 0C28 0058 002A                     cmpi.b  #$58,oVar2A(a0) ; 'X'
000E01BC 6500                               bcs.s   loc_20CF12
000E01BE 117C 0058 002A                     move.b  #$58,oVar2A(a0) ; 'X'
000E01C4 117C 0006 0024                     move.b  #6,oRoutine(a0)
000E01CA 137C 0002 0024                     move.b  #2,$24(a1)
000E01D0                            
000E01D0                            loc_20CF12:                             ; CODE XREF: ObjBossThigh_0_Routine2+72↑j
000E01D0 6000 0000                          bra.w   loc_20D132
000E01D4                            ; ---------------------------------------------------------------------------
000E01D4                            
000E01D4                            ObjBossThigh_0_Routine6:                ; DATA XREF: ROM:0020CE40↑o
000E01D4 3268 0030                          movea.w oVar30(a0),a1
000E01D8 3269 0030                          movea.w $30(a1),a1
000E01DC 0829 0004 002C                     btst    #4,$2C(a1)
000E01E2 6700                               beq.s   loc_20CF2C
000E01E4 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E01EA                            
000E01EA                            loc_20CF2C:                             ; CODE XREF: ObjBossThigh_0_Routine2+98↑j
000E01EA 6000 0000                          bra.w   loc_20D132
000E01EE                            ; ---------------------------------------------------------------------------
000E01EE                            
000E01EE                            ObjBossThigh_0_Routine8:                ; DATA XREF: ROM:0020CE42↑o
000E01EE 0828 0000 002C                     btst    #0,oVar2C(a0)
000E01F4 6600                               bne.s   loc_20CF54
000E01F6 1028 003C                          move.b  oVar3C(a0),d0
000E01FA 9128 002A                          sub.b   d0,oVar2A(a0)
000E01FE 0C28 0018 002A                     cmpi.b  #$18,oVar2A(a0)
000E0204 6400                               bcc.s   loc_20CF54
000E0206 117C 0018 002A                     move.b  #$18,oVar2A(a0)
000E020C 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E0212                            
000E0212                            loc_20CF54:                             ; CODE XREF: ObjBossThigh_0_Routine2+AA↑j ...
000E0212 6000 0000                          bra.w   loc_20D132
000E0216                            ; ---------------------------------------------------------------------------
000E0216                            
000E0216                            ObjBossThigh_0_RoutineA:                ; CODE XREF: ObjBossThigh_0_Routine2+1BC↓j
000E0216                                                                    ; DATA XREF: ...
000E0216 3268 0030                          movea.w oVar30(a0),a1
000E021A 3269 0030                          movea.w $30(a1),a1
000E021E 0C29 0008 0024                     cmpi.b  #8,$24(a1)
000E0224 6700                               beq.s   loc_20CF70
000E0226 137C 0006 0024                     move.b  #6,$24(a1)
000E022C 6000                               bra.s   loc_20CF7A
000E022E                            ; ---------------------------------------------------------------------------
000E022E                            
000E022E                            loc_20CF70:                             ; CODE XREF: ObjBossThigh_0_Routine2+DA↑j
000E022E 0C28 0000 002A                     cmpi.b  #0,oVar2A(a0)
000E0234 6700 0000                          beq.w   loc_20CF90
000E0238                            
000E0238                            loc_20CF7A:                             ; CODE XREF: ObjBossThigh_0_Routine2+E2↑j
000E0238 0C28 0000 002A                     cmpi.b  #0,oVar2A(a0)
000E023E 6700 0000                          beq.w   loc_20CF8C
000E0242 1028 003C                          move.b  oVar3C(a0),d0
000E0246 9128 002A                          sub.b   d0,oVar2A(a0)
000E024A                            
000E024A                            loc_20CF8C:                             ; CODE XREF: ObjBossThigh_0_Routine2+F4↑j
000E024A 6000 0000                          bra.w   loc_20D132
000E024E                            ; ---------------------------------------------------------------------------
000E024E                            
000E024E                            loc_20CF90:                             ; CODE XREF: ObjBossThigh_0_Routine2+EA↑j
000E024E 08A9 0000 002C                     bclr    #0,$2C(a1)
000E0254 6700                               beq.s   loc_20CF9E
000E0256 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E025C                            
000E025C                            loc_20CF9E:                             ; CODE XREF: ObjBossThigh_0_Routine2+10A↑j
000E025C 6000 0000                          bra.w   loc_20D132
000E0260                            ; ---------------------------------------------------------------------------
000E0260                            
000E0260                            ObjBossThigh_0_RoutineC:                ; CODE XREF: ObjBossThigh_0_Routine2+1B0↓j
000E0260                                                                    ; DATA XREF: ...
000E0260 3268 0030                          movea.w oVar30(a0),a1
000E0264 3269 0030                          movea.w $30(a1),a1
000E0268 0C29 0004 0024                     cmpi.b  #4,$24(a1)
000E026E 6700                               beq.s   loc_20CFBA
000E0270 137C 0002 0024                     move.b  #2,$24(a1)
000E0276 6000                               bra.s   loc_20CFC4
000E0278                            ; ---------------------------------------------------------------------------
000E0278                            
000E0278                            loc_20CFBA:                             ; CODE XREF: ObjBossThigh_0_Routine2+124↑j
000E0278 0C28 0058 002A                     cmpi.b  #$58,oVar2A(a0) ; 'X'
000E027E 6C00 0000                          bge.w   loc_20CFDA
000E0282                            
000E0282                            loc_20CFC4:                             ; CODE XREF: ObjBossThigh_0_Routine2+12C↑j
000E0282 0C28 0058 002A                     cmpi.b  #$58,oVar2A(a0) ; 'X'
000E0288 6C00 0000                          bge.w   loc_20CFD6
000E028C 1028 003C                          move.b  oVar3C(a0),d0
000E0290 D128 002A                          add.b   d0,oVar2A(a0)
000E0294                            
000E0294                            loc_20CFD6:                             ; CODE XREF: ObjBossThigh_0_Routine2+13E↑j
000E0294 6000 0000                          bra.w   loc_20D132
000E0298                            ; ---------------------------------------------------------------------------
000E0298                            
000E0298                            loc_20CFDA:                             ; CODE XREF: ObjBossThigh_0_Routine2+134↑j
000E0298 08A9 0000 002C                     bclr    #0,$2C(a1)
000E029E 6700                               beq.s   loc_20CFE8
000E02A0 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E02A6                            
000E02A6                            loc_20CFE8:                             ; CODE XREF: ObjBossThigh_0_Routine2+154↑j
000E02A6 6000 0000                          bra.w   loc_20D132
000E02AA                            ; ---------------------------------------------------------------------------
000E02AA                            
000E02AA                            ObjBossThigh_0_RoutineE:                ; DATA XREF: ROM:0020CE48↑o
000E02AA 0C28 0018 002A                     cmpi.b  #$18,oVar2A(a0)
000E02B0 6D00                               blt.s   loc_20D010
000E02B2 6E00                               bgt.s   loc_20D040
000E02B4 3268 0030                          movea.w oVar30(a0),a1
000E02B8 3269 0030                          movea.w $30(a1),a1
000E02BC 0829 0000 002C                     btst    #0,$2C(a1)
000E02C2 6700                               beq.s   loc_20D00C
000E02C4 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E02CA                            
000E02CA                            loc_20D00C:                             ; CODE XREF: ObjBossThigh_0_Routine2+178↑j
000E02CA 6000 0000                          bra.w   loc_20D132
000E02CE                            ; ---------------------------------------------------------------------------
000E02CE                            
000E02CE                            loc_20D010:                             ; CODE XREF: ObjBossThigh_0_Routine2+166↑j
000E02CE 1028 003C                          move.b  oVar3C(a0),d0
000E02D2 D128 002A                          add.b   d0,oVar2A(a0)
000E02D6 3268 0030                          movea.w oVar30(a0),a1
000E02DA 3269 0030                          movea.w $30(a1),a1
000E02DE 08E9 0007 002C                     bset    #7,$2C(a1)
000E02E4 3268 002E                          movea.w oVar2E(a0),a1
000E02E8 3269 0032                          movea.w $32(a1),a1
000E02EC 3269 0030                          movea.w $30(a1),a1
000E02F0 3269 0030                          movea.w $30(a1),a1
000E02F4 08E9 0007 002C                     bset    #7,$2C(a1)
000E02FA 6000 FF64                          bra.w   ObjBossThigh_0_RoutineC
000E02FE                            ; ---------------------------------------------------------------------------
000E02FE                            
000E02FE                            loc_20D040:                             ; CODE XREF: ObjBossThigh_0_Routine2+168↑j
000E02FE 1028 003C                          move.b  oVar3C(a0),d0
000E0302 9128 002A                          sub.b   d0,oVar2A(a0)
000E0306 6000 FF0E                          bra.w   ObjBossThigh_0_RoutineA
000E030A                            ; ---------------------------------------------------------------------------
000E030A                            
000E030A                            ObjBossThigh_0_Routine10:               ; DATA XREF: ROM:0020CE4A↑o
000E030A 3268 002E                          movea.w oVar2E(a0),a1
000E030E 3269 0030                          movea.w $30(a1),a1
000E0312 3169 0008 0008                     move.w  8(a1),oX(a0)
000E0318 0668 FFF6 0008                     addi.w  #-$A,oX(a0)
000E031E 3169 000C 000C                     move.w  $C(a1),oY(a0)
000E0324 3169 002A 002A                     move.w  $2A(a1),oVar2A(a0)
000E032A 4E75                               rts
000E032C                            ; ---------------------------------------------------------------------------
000E032C                            
000E032C                            ObjBossThigh_0_Routine12:               ; DATA XREF: ROM:0020CE4C↑o
000E032C 3268 0030                          movea.w oVar30(a0),a1
000E0330 3269 0030                          movea.w $30(a1),a1
000E0334 0C29 0006 0024                     cmpi.b  #6,$24(a1)
000E033A 6700 0000                          beq.w   loc_20D0BC
000E033E 0C29 0008 0024                     cmpi.b  #8,$24(a1)
000E0344 6700                               beq.s   loc_20D098
000E0346 08A9 0000 002C                     bclr    #0,$2C(a1)
000E034C 137C 0006 0024                     move.b  #6,$24(a1)
000E0352 6000 0000                          bra.w   loc_20D0BC
000E0356                            ; ---------------------------------------------------------------------------
000E0356                            
000E0356                            loc_20D098:                             ; CODE XREF: ObjBossThigh_0_Routine2+1FA↑j
000E0356 0C28 0020 002A                     cmpi.b  #$20,oVar2A(a0) ; ' '
000E035C 6700                               beq.s   loc_20D0AA
000E035E 1028 003C                          move.b  oVar3C(a0),d0
000E0362 9128 002A                          sub.b   d0,oVar2A(a0)
000E0366 6E00                               bgt.s   loc_20D0BC
000E0368                            
000E0368                            loc_20D0AA:                             ; CODE XREF: ObjBossThigh_0_Routine2+212↑j
000E0368 117C 0020 002A                     move.b  #$20,oVar2A(a0) ; ' '
000E036E 08A9 0000 002C                     bclr    #0,$2C(a1)
000E0374 117C 0014 0024                     move.b  #$14,oRoutine(a0)
000E037A                            
000E037A                            loc_20D0BC:                             ; CODE XREF: ObjBossThigh_0_Routine2+1F0↑j ...
000E037A 6000 0000                          bra.w   loc_20D132
000E037E                            ; ---------------------------------------------------------------------------
000E037E                            
000E037E                            ObjBossThigh_0_Routine14:               ; DATA XREF: ROM:0020CE4E↑o
000E037E 3268 0030                          movea.w oVar30(a0),a1
000E0382 3269 0030                          movea.w $30(a1),a1
000E0386 1028 003C                          move.b  oVar3C(a0),d0
000E038A D128 002A                          add.b   d0,oVar2A(a0)
000E038E 0C28 0030 002A                     cmpi.b  #$30,oVar2A(a0) ; '0'
000E0394 6D00                               blt.s   loc_20D0EA
000E0396 117C 0030 002A                     move.b  #$30,oVar2A(a0) ; '0'
000E039C 117C 0006 0024                     move.b  #6,oRoutine(a0)
000E03A2 137C 0002 0024                     move.b  #2,$24(a1)
000E03A8                            
000E03A8                            loc_20D0EA:                             ; CODE XREF: ObjBossThigh_0_Routine2+24A↑j
000E03A8 6000 0000                          bra.w   loc_20D132
000E03AC                            ; ---------------------------------------------------------------------------
000E03AC                            
000E03AC                            ObjBossThigh_0_Routine16:               ; DATA XREF: ROM:0020CE50↑o
000E03AC 0828 0000 002C                     btst    #0,oVar2C(a0)
000E03B2 6600                               bne.s   loc_20D12E
000E03B4 3268 0030                          movea.w oVar30(a0),a1
000E03B8 3269 0030                          movea.w $30(a1),a1
000E03BC 0C29 0002 0024                     cmpi.b  #2,$24(a1)
000E03C2 6700                               beq.s   loc_20D114
000E03C4 0C29 0004 0024                     cmpi.b  #4,$24(a1)
000E03CA 6700                               beq.s   loc_20D118
000E03CC 137C 0002 0024                     move.b  #2,$24(a1)
000E03D2                            
000E03D2                            loc_20D114:                             ; CODE XREF: ObjBossThigh_0_Routine2+278↑j
000E03D2 6000 0000                          bra.w   loc_20D12E
000E03D6                            ; ---------------------------------------------------------------------------
000E03D6                            
000E03D6                            loc_20D118:                             ; CODE XREF: ObjBossThigh_0_Routine2+280↑j
000E03D6 1028 003C                          move.b  oVar3C(a0),d0
000E03DA D128 002A                          add.b   d0,oVar2A(a0)
000E03DE 0C28 0050 002A                     cmpi.b  #$50,oVar2A(a0) ; 'P'
000E03E4 6D00                               blt.s   loc_20D12E
000E03E6 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E03EC                            
000E03EC                            loc_20D12E:                             ; CODE XREF: ObjBossThigh_0_Routine2+268↑j ...
000E03EC 6000 0002                          bra.w   *+4
000E03F0                            ; ---------------------------------------------------------------------------
000E03F0                            
000E03F0                            loc_20D132:                             ; CODE XREF: ObjBossThigh_0_Routine2:loc_20CEE4↑j ...
000E03F0 7000                               moveq   #0,d0
000E03F2 1028 002A                          move.b  oVar2A(a0),d0
000E03F6 4EB8 0AAC                          jsr     CalcSine
000E03FA 7400                               moveq   #0,d2
000E03FC 7600                               moveq   #0,d3
000E03FE E840                               asr.w   #4,d0
000E0400 E841                               asr.w   #4,d1
000E0402 0828 0004 002C                     btst    #4,oVar2C(a0)
000E0408 6700 0000                          beq.w   loc_20D198
000E040C 0828 0005 002C                     btst    #5,oVar2C(a0)
000E0412 6700 0000                          beq.w   loc_20D19E
000E0416 08E8 0001 002C                     bset    #1,oVar2C(a0)
000E041C 6600                               bne.s   loc_20D16A
000E041E 3141 0034                          move.w  d1,oVar34(a0)
000E0422 3140 0038                          move.w  d0,oVar38(a0)
000E0426                            
000E0426                            loc_20D16A:                             ; CODE XREF: ObjBossThigh_0_Routine2+2D4↑j
000E0426 3400                               move.w  d0,d2
000E0428 3601                               move.w  d1,d3
000E042A 9668 0034                          sub.w   oVar34(a0),d3
000E042E 9468 0038                          sub.w   oVar38(a0),d2
000E0432 3141 0034                          move.w  d1,oVar34(a0)
000E0436 3140 0038                          move.w  d0,oVar38(a0)
000E043A 3268 002E                          movea.w oVar2E(a0),a1
000E043E 9769 0008                          sub.w   d3,8(a1)
000E0442 9569 000C                          sub.w   d2,$C(a1)
000E0446 3269 002E                          movea.w $2E(a1),a1
000E044A 9769 0008                          sub.w   d3,8(a1)
000E044E 9569 000C                          sub.w   d2,$C(a1)
000E0452 4E75                               rts
000E0454                            ; ---------------------------------------------------------------------------
000E0454                            
000E0454                            loc_20D198:                             ; CODE XREF: ObjBossThigh_0_Routine2+2C0↑j
000E0454 08A8 0001 002C                     bclr    #1,oVar2C(a0)
000E045A                            
000E045A                            loc_20D19E:                             ; CODE XREF: ObjBossThigh_0_Routine2+2CA↑j
000E045A 3268 002E                          movea.w oVar2E(a0),a1
000E045E 3429 0008                          move.w  8(a1),d2
000E0462 0642 000C                          addi.w  #$C,d2
000E0466 D441                               add.w   d1,d2
000E0468 0828 0002 002C                     btst    #2,oVar2C(a0)
000E046E 6700                               beq.s   loc_20D1B8
000E0470 0642 FFF6                          addi.w  #-$A,d2
000E0474                            
000E0474                            loc_20D1B8:                             ; CODE XREF: ObjBossThigh_0_Routine2+326↑j
000E0474 3142 0008                          move.w  d2,oX(a0)
000E0478 3429 000C                          move.w  $C(a1),d2
000E047C 0642 0014                          addi.w  #$14,d2
000E0480 D440                               add.w   d0,d2
000E0482 3142 000C                          move.w  d2,oY(a0)
000E0486 4E75                               rts
000E0488                            ; End of function ObjBossThigh_0_Routine2
000E0488                            
000E0488                            
000E0488                            ; =============== S U B R O U T I N E =======================================
000E0488                            
000E0488                            
000E0488                            ObjBossThigh_0_Routine18:               ; DATA XREF: ROM:0020CE52↑o
000E0488                            
000E0488                            ; FUNCTION CHUNK AT 0020D7AE SIZE 00000002 BYTES
000E0488                            
000E0488 08E8 0001 002C                     bset    #1,oVar2C(a0)
000E048E 6600                               bne.s   loc_20D200
000E0490 0828 0004 002C                     btst    #4,oVar2C(a0)
000E0496 6700                               beq.s   loc_20D1EE
000E0498 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000E04A0 217C FFFD 8000 0010                move.l  #$FFFD8000,oXVel(a0)
000E04A8 6000                               bra.s   loc_20D22A
000E04AA                            ; ---------------------------------------------------------------------------
000E04AA                            
000E04AA                            loc_20D1EE:                             ; CODE XREF: ObjBossThigh_0_Routine18+E↑j
000E04AA 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000E04B2 217C FFFD 8000 0010                move.l  #$FFFD8000,oXVel(a0)
000E04BA 6000                               bra.s   loc_20D22A
000E04BC                            ; ---------------------------------------------------------------------------
000E04BC                            
000E04BC                            loc_20D200:                             ; CODE XREF: ObjBossThigh_0_Routine18+6↑j
000E04BC 0828 0004 002C                     btst    #4,oVar2C(a0)
000E04C2 6700                               beq.s   loc_20D21A
000E04C4 06A8 FFFF FA00 003C                addi.l  #-$600,oVar3C(a0)
000E04CC 06A8 0000 1860 0010                addi.l  #$1860,oXVel(a0)
000E04D4 6000                               bra.s   loc_20D22A
000E04D6                            ; ---------------------------------------------------------------------------
000E04D6                            
000E04D6                            loc_20D21A:                             ; CODE XREF: ObjBossThigh_0_Routine18+3A↑j
000E04D6 04A8 FFFF FA00 003C                subi.l  #$FFFFFA00,oVar3C(a0)
000E04DE 06A8 0000 1860 0010                addi.l  #$1860,oXVel(a0)
000E04E6                            
000E04E6                            loc_20D22A:                             ; CODE XREF: ObjBossThigh_0_Routine18+20↑j ...
000E04E6 2028 003C                          move.l  oVar3C(a0),d0
000E04EA D1A8 0008                          add.l   d0,oX(a0)
000E04EE 2028 0010                          move.l  oXVel(a0),d0
000E04F2 D1A8 000C                          add.l   d0,oY(a0)
000E04F6 0C68 0240 000C                     cmpi.w  #$240,oY(a0)
000E04FC 6D00                               blt.s   loc_20D24A
000E04FE 588F                               addq.l  #4,sp
000E0500 4EF8 40BE                          jmp     DeleteObject
000E0504                            ; ---------------------------------------------------------------------------
000E0504                            
000E0504                            loc_20D24A:                             ; CODE XREF: ObjBossThigh_0_Routine18+74↑j
000E0504 6000 0000                          bra.w   locret_20D7AE
000E0508                            ; End of function ObjBossThigh_0_Routine18
000E0508                            
000E0508                            
000E0508                            ; =============== S U B R O U T I N E =======================================
000E0508                            
000E0508                            
000E0508                            ObjBossCalf:                            ; DATA XREF: ROM:00203C2E↑o
000E0508 7000                               moveq   #0,d0
000E050A 1028 0024                          move.b  oRoutine(a0),d0
000E050E 303B 0000                          move.w  off_20D262(pc,d0.w),d0
000E0512 4EBB 0000                          jsr     off_20D262(pc,d0.w)
000E0516 4EF8 4012                          jmp     DrawObject
000E051A                            ; End of function ObjBossCalf
000E051A                            
000E051A                            ; ---------------------------------------------------------------------------
000E051A 0000                       off_20D262:dc.w ObjBossCalf_0_Routine0-*
000E051C                                                                    ; CODE XREF: ObjBossCalf+A↑p
000E051C                                                                    ; DATA XREF: ...
000E051C 0000                               dc.w ObjBossCalf_0_Routine2-off_20D262
000E051E 0000                               dc.w ObjBossCalf_0_Routine4-off_20D262
000E0520 0000                               dc.w ObjBossCalf_0_Routine6-off_20D262
000E0522 0000                               dc.w ObjBossCalf_0_Routine8-off_20D262
000E0524 0000                               dc.w ObjBossCalf_0_RoutineA-off_20D262
000E0526 0000                               dc.w ObjBossCalf_0_RoutineC-off_20D262
000E0528 0000                               dc.w ObjBossCalf_0_RoutineE-off_20D262
000E052A                            
000E052A                            ; =============== S U B R O U T I N E =======================================
000E052A                            
000E052A                            
000E052A                            ObjBossCalf_0_Routine0:                 ; DATA XREF: ROM:off_20D262↑o
000E052A 4228 0022                          clr.b   oFlags(a0)
000E052E 117C 0002 0024                     move.b  #2,oRoutine(a0)
000E0534 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000E053A 117C 0008 0019                     move.b  #8,oWidth(a0)
000E0540 117C 0014 0016                     move.b  #$14,oYRadius(a0)
000E0546 317C 2359 0002                     move.w  #$2359,oTile(a0)
000E054C 217C 0000 0000 0004                move.l  #Spr_20D8E2,oSprites(a0)
000E0554 217C 0000 8000 003C                move.l  #$8000,oVar3C(a0)
000E055C 217C 0000 4000 0010                move.l  #$4000,oXVel(a0)
000E0564 4E75                               rts
000E0566                            ; End of function ObjBossCalf_0_Routine0
000E0566                            
000E0566                            
000E0566                            ; =============== S U B R O U T I N E =======================================
000E0566                            
000E0566                            
000E0566                            ObjBossCalf_0_Routine2:                 ; DATA XREF: ROM:0020D264↑o
000E0566 3268 002E                          movea.w oVar2E(a0),a1
000E056A 3429 0008                          move.w  8(a1),d2
000E056E 5842                               addq.w  #4,d2
000E0570 3142 0008                          move.w  d2,oX(a0)
000E0574 3429 000C                          move.w  $C(a1),d2
000E0578 0642 0010                          addi.w  #$10,d2
000E057C 3142 000C                          move.w  d2,oY(a0)
000E0580 4E75                               rts
000E0582                            ; End of function ObjBossCalf_0_Routine2
000E0582                            
000E0582                            
000E0582                            ; =============== S U B R O U T I N E =======================================
000E0582                            
000E0582                            
000E0582                            ObjBossCalf_0_Routine4:                 ; DATA XREF: ROM:0020D266↑o
000E0582 3268 002E                          movea.w oVar2E(a0),a1
000E0586 3269 002E                          movea.w $2E(a1),a1
000E058A 3269 0030                          movea.w $30(a1),a1
000E058E 3269 0030                          movea.w $30(a1),a1
000E0592 3169 0008 0008                     move.w  8(a1),oX(a0)
000E0598 0668 FFF6 0008                     addi.w  #-$A,oX(a0)
000E059E 3169 000C 000C                     move.w  $C(a1),oY(a0)
000E05A4 4E75                               rts
000E05A6                            ; End of function ObjBossCalf_0_Routine4
000E05A6                            
000E05A6                            
000E05A6                            ; =============== S U B R O U T I N E =======================================
000E05A6                            
000E05A6                            
000E05A6                            ObjBossCalf_0_Routine6:                 ; DATA XREF: ROM:0020D268↑o
000E05A6 0C68 0008 0034                     cmpi.w  #8,oVar34(a0)
000E05AC 6C00                               bge.s   loc_20D30E
000E05AE 2228 003C                          move.l  oVar3C(a0),d1
000E05B2 D3A8 0034                          add.l   d1,oVar34(a0)
000E05B6 0828 0004 002C                     btst    #4,oVar2C(a0)
000E05BC 6700                               beq.s   loc_20D30E
000E05BE 4481                               neg.l   d1
000E05C0 7400                               moveq   #0,d2
000E05C2 6000 0000                          bra.w   loc_20D3AC
000E05C6                            ; ---------------------------------------------------------------------------
000E05C6                            
000E05C6                            loc_20D30E:                             ; CODE XREF: ObjBossCalf_0_Routine6+6↑j ...
000E05C6 6000 0000                          bra.w   loc_20D3DE
000E05CA                            ; ---------------------------------------------------------------------------
000E05CA                            
000E05CA                            ObjBossCalf_0_Routine8:                 ; DATA XREF: ROM:0020D26A↑o
000E05CA 317C 0000 0038                     move.w  #0,oVar38(a0)
000E05D0 0C68 FFF8 0034                     cmpi.w  #$FFF8,oVar34(a0)
000E05D6 6F00                               ble.s   loc_20D336
000E05D8 2228 003C                          move.l  oVar3C(a0),d1
000E05DC 93A8 0034                          sub.l   d1,oVar34(a0)
000E05E0 0828 0004 002C                     btst    #4,oVar2C(a0)
000E05E6 6700                               beq.s   loc_20D336
000E05E8 7400                               moveq   #0,d2
000E05EA 6000 0000                          bra.w   loc_20D3AC
000E05EE                            ; ---------------------------------------------------------------------------
000E05EE                            
000E05EE                            loc_20D336:                             ; CODE XREF: ObjBossCalf_0_Routine6+30↑j ...
000E05EE 6000 0000                          bra.w   loc_20D3DE
000E05F2                            ; ---------------------------------------------------------------------------
000E05F2                            
000E05F2                            ObjBossCalf_0_RoutineA:                 ; DATA XREF: ROM:0020D26C↑o
000E05F2 0C68 FFF8 0034                     cmpi.w  #$FFF8,oVar34(a0)
000E05F8 6F00                               ble.s   loc_20D34C
000E05FA 2228 003C                          move.l  oVar3C(a0),d1
000E05FE 93A8 0034                          sub.l   d1,oVar34(a0)
000E0602 6000                               bra.s   loc_20D34E
000E0604                            ; ---------------------------------------------------------------------------
000E0604                            
000E0604                            loc_20D34C:                             ; CODE XREF: ObjBossCalf_0_Routine6+52↑j
000E0604 7200                               moveq   #0,d1
000E0606                            
000E0606                            loc_20D34E:                             ; CODE XREF: ObjBossCalf_0_Routine6+5C↑j
000E0606 0C68 FFFC 0038                     cmpi.w  #$FFFC,oVar38(a0)
000E060C 6F00                               ble.s   loc_20D360
000E060E 2428 0010                          move.l  oXVel(a0),d2
000E0612 95A8 0038                          sub.l   d2,oVar38(a0)
000E0616 6000                               bra.s   loc_20D362
000E0618                            ; ---------------------------------------------------------------------------
000E0618                            
000E0618                            loc_20D360:                             ; CODE XREF: ObjBossCalf_0_Routine6+66↑j
000E0618 7400                               moveq   #0,d2
000E061A                            
000E061A                            loc_20D362:                             ; CODE XREF: ObjBossCalf_0_Routine6+70↑j
000E061A 0828 0004 002C                     btst    #4,oVar2C(a0)
000E0620 6700                               beq.s   loc_20D36E
000E0622 6000 0000                          bra.w   loc_20D3AC
000E0626                            ; ---------------------------------------------------------------------------
000E0626                            
000E0626                            loc_20D36E:                             ; CODE XREF: ObjBossCalf_0_Routine6+7A↑j
000E0626 6000 0000                          bra.w   loc_20D3DE
000E062A                            ; ---------------------------------------------------------------------------
000E062A                            
000E062A                            ObjBossCalf_0_RoutineC:                 ; DATA XREF: ROM:0020D26E↑o
000E062A 0C68 FFF8 0034                     cmpi.w  #$FFF8,oVar34(a0)
000E0630 6F00                               ble.s   loc_20D384
000E0632 2228 003C                          move.l  oVar3C(a0),d1
000E0636 93A8 0034                          sub.l   d1,oVar34(a0)
000E063A 6000                               bra.s   loc_20D386
000E063C                            ; ---------------------------------------------------------------------------
000E063C                            
000E063C                            loc_20D384:                             ; CODE XREF: ObjBossCalf_0_Routine6+8A↑j
000E063C 7200                               moveq   #0,d1
000E063E                            
000E063E                            loc_20D386:                             ; CODE XREF: ObjBossCalf_0_Routine6+94↑j
000E063E 0C68 0004 0038                     cmpi.w  #4,oVar38(a0)
000E0644 6C00                               bge.s   loc_20D398
000E0646 2428 0010                          move.l  oXVel(a0),d2
000E064A D5A8 0038                          add.l   d2,oVar38(a0)
000E064E 6000                               bra.s   loc_20D39A
000E0650                            ; ---------------------------------------------------------------------------
000E0650                            
000E0650                            loc_20D398:                             ; CODE XREF: ObjBossCalf_0_Routine6+9E↑j
000E0650 7400                               moveq   #0,d2
000E0652                            
000E0652                            loc_20D39A:                             ; CODE XREF: ObjBossCalf_0_Routine6+A8↑j
000E0652 0828 0004 002C                     btst    #4,oVar2C(a0)
000E0658 6700                               beq.s   loc_20D3A8
000E065A 4482                               neg.l   d2
000E065C 6000 0000                          bra.w   loc_20D3AC
000E0660                            ; ---------------------------------------------------------------------------
000E0660                            
000E0660                            loc_20D3A8:                             ; CODE XREF: ObjBossCalf_0_Routine6+B2↑j
000E0660 6000 0000                          bra.w   loc_20D3DE
000E0664                            ; ---------------------------------------------------------------------------
000E0664                            
000E0664                            loc_20D3AC:                             ; CODE XREF: ObjBossCalf_0_Routine6+1C↑j ...
000E0664 0828 0005 002C                     btst    #5,oVar2C(a0)
000E066A 6600 0000                          bne.w   loc_20D3B8
000E066E 4E75                               rts
000E0670                            ; ---------------------------------------------------------------------------
000E0670                            
000E0670                            loc_20D3B8:                             ; CODE XREF: ObjBossCalf_0_Routine6+C4↑j
000E0670 3668 002E                          movea.w oVar2E(a0),a3
000E0674 D3AB 0008                          add.l   d1,8(a3)
000E0678 D5AB 000C                          add.l   d2,$C(a3)
000E067C 366B 002E                          movea.w $2E(a3),a3
000E0680 D3AB 0008                          add.l   d1,8(a3)
000E0684 D5AB 000C                          add.l   d2,$C(a3)
000E0688 366B 002E                          movea.w $2E(a3),a3
000E068C D3AB 0008                          add.l   d1,8(a3)
000E0690 D5AB 000C                          add.l   d2,$C(a3)
000E0694 4E75                               rts
000E0696                            ; ---------------------------------------------------------------------------
000E0696                            
000E0696                            loc_20D3DE:                             ; CODE XREF: ObjBossCalf_0_Routine6:loc_20D30E↑j ...
000E0696 3268 002E                          movea.w oVar2E(a0),a1
000E069A 3029 0008                          move.w  8(a1),d0
000E069E 5840                               addq.w  #4,d0
000E06A0 3140 0008                          move.w  d0,oX(a0)
000E06A4 3028 0034                          move.w  oVar34(a0),d0
000E06A8 D168 0008                          add.w   d0,oX(a0)
000E06AC 3029 000C                          move.w  $C(a1),d0
000E06B0 0640 0010                          addi.w  #$10,d0
000E06B4 3140 000C                          move.w  d0,oY(a0)
000E06B8 3028 0038                          move.w  oVar38(a0),d0
000E06BC D168 000C                          add.w   d0,oY(a0)
000E06C0 4E75                               rts
000E06C2                            ; End of function ObjBossCalf_0_Routine6
000E06C2                            
000E06C2                            
000E06C2                            ; =============== S U B R O U T I N E =======================================
000E06C2                            
000E06C2                            
000E06C2                            ObjBossCalf_0_RoutineE:                 ; DATA XREF: ROM:0020D270↑o
000E06C2                            
000E06C2                            ; FUNCTION CHUNK AT 0020D7AE SIZE 00000002 BYTES
000E06C2                            
000E06C2 08E8 0001 002C                     bset    #1,oVar2C(a0)
000E06C8 6600                               bne.s   loc_20D43E
000E06CA 0828 0004 002C                     btst    #4,oVar2C(a0)
000E06D0 6600                               bne.s   loc_20D42C
000E06D2 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000E06DA 217C FFFE 0000 0010                move.l  #$FFFE0000,oXVel(a0)
000E06E2 6000                               bra.s   loc_20D468
000E06E4                            ; ---------------------------------------------------------------------------
000E06E4                            
000E06E4                            loc_20D42C:                             ; CODE XREF: ObjBossCalf_0_RoutineE+E↑j
000E06E4 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000E06EC 217C FFFE 0000 0010                move.l  #$FFFE0000,oXVel(a0)
000E06F4 6000                               bra.s   loc_20D468
000E06F6                            ; ---------------------------------------------------------------------------
000E06F6                            
000E06F6                            loc_20D43E:                             ; CODE XREF: ObjBossCalf_0_RoutineE+6↑j
000E06F6 0828 0004 002C                     btst    #4,oVar2C(a0)
000E06FC 6600                               bne.s   loc_20D458
000E06FE 06A8 FFFF FA00 003C                addi.l  #-$600,oVar3C(a0)
000E0706 06A8 0000 1A60 0010                addi.l  #$1A60,oXVel(a0)
000E070E 6000                               bra.s   loc_20D468
000E0710                            ; ---------------------------------------------------------------------------
000E0710                            
000E0710                            loc_20D458:                             ; CODE XREF: ObjBossCalf_0_RoutineE+3A↑j
000E0710 04A8 FFFF FA00 003C                subi.l  #$FFFFFA00,oVar3C(a0)
000E0718 06A8 0000 1A60 0010                addi.l  #$1A60,oXVel(a0)
000E0720                            
000E0720                            loc_20D468:                             ; CODE XREF: ObjBossCalf_0_RoutineE+20↑j ...
000E0720 2028 003C                          move.l  oVar3C(a0),d0
000E0724 D1A8 0008                          add.l   d0,oX(a0)
000E0728 2028 0010                          move.l  oXVel(a0),d0
000E072C D1A8 000C                          add.l   d0,oY(a0)
000E0730 0C68 0240 000C                     cmpi.w  #$240,oY(a0)
000E0736 6D00                               blt.s   loc_20D488
000E0738 588F                               addq.l  #4,sp
000E073A 4EF8 40BE                          jmp     DeleteObject
000E073E                            ; ---------------------------------------------------------------------------
000E073E                            
000E073E                            loc_20D488:                             ; CODE XREF: ObjBossCalf_0_RoutineE+74↑j
000E073E 6000 0000                          bra.w   locret_20D7AE
000E0742                            ; End of function ObjBossCalf_0_RoutineE
000E0742                            
000E0742                            
000E0742                            ; =============== S U B R O U T I N E =======================================
000E0742                            
000E0742                            
000E0742                            ObjBossFoot:                            ; DATA XREF: ROM:00203C32↑o
000E0742 7000                               moveq   #0,d0
000E0744 1028 0024                          move.b  oRoutine(a0),d0
000E0748 303B 0000                          move.w  off_20D4A0(pc,d0.w),d0
000E074C 4EBB 0000                          jsr     off_20D4A0(pc,d0.w)
000E0750 4EF8 4012                          jmp     DrawObject
000E0754                            ; End of function ObjBossFoot
000E0754                            
000E0754                            ; ---------------------------------------------------------------------------
000E0754 0000                       off_20D4A0:dc.w ObjBossFoot_0_Routine0-*
000E0756                                                                    ; CODE XREF: ObjBossFoot+A↑p
000E0756                                                                    ; DATA XREF: ...
000E0756 0000                               dc.w ObjBossFoot_0_Routine2-off_20D4A0
000E0758 0000                               dc.w ObjBossFoot_0_Routine4-off_20D4A0
000E075A 0000                               dc.w ObjBossFoot_0_Routine6-off_20D4A0
000E075C 0000                               dc.w ObjBossFoot_0_Routine8-off_20D4A0
000E075E 0000                               dc.w ObjBossFoot_0_RoutineA-off_20D4A0
000E0760 0000                               dc.w ObjBossFoot_0_RoutineC-off_20D4A0
000E0762                            
000E0762                            ; =============== S U B R O U T I N E =======================================
000E0762                            
000E0762                            
000E0762                            ObjBossFoot_0_Routine0:                 ; DATA XREF: ROM:off_20D4A0↑o
000E0762 4228 0022                          clr.b   oFlags(a0)
000E0766 117C 0004 0001                     move.b  #4,oSprFlags(a0)
000E076C 117C 0020 0019                     move.b  #$20,oWidth(a0) ; ' '
000E0772 117C 0014 0016                     move.b  #$14,oYRadius(a0)
000E0778 317C 2359 0002                     move.w  #$2359,oTile(a0)
000E077E 217C 0000 0000 0004                move.l  #Spr_20D8F0,oSprites(a0)
000E0786 217C 0000 4000 003C                move.l  #$4000,oVar3C(a0)
000E078E 217C 0000 8000 0010                move.l  #$8000,oXVel(a0)
000E0796 117C 0004 0024                     move.b  #4,oRoutine(a0)
000E079C 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E07A2 317C FFF8 0034                     move.w  #$FFF8,oVar34(a0)
000E07A8 317C 0010 0038                     move.w  #$10,oVar38(a0)
000E07AE 6000 0000                          bra.w   loc_20D67A
000E07B2                            ; ---------------------------------------------------------------------------
000E07B2                            
000E07B2                            ObjBossFoot_0_Routine2:                 ; DATA XREF: ROM:0020D4A2↑o
000E07B2 2028 003C                          move.l  oVar3C(a0),d0
000E07B6 91A8 0034                          sub.l   d0,oVar34(a0)
000E07BA 2028 0010                          move.l  oXVel(a0),d0
000E07BE D1A8 0038                          add.l   d0,oVar38(a0)
000E07C2 0828 0004 002C                     btst    #4,oVar2C(a0)
000E07C8 6700                               beq.s   loc_20D52A
000E07CA 0828 0007 002C                     btst    #7,oVar2C(a0)
000E07D0 6700                               beq.s   loc_20D52A
000E07D2 0C68 000C 0038                     cmpi.w  #$C,oVar38(a0)
000E07D8 6D00                               blt.s   loc_20D536
000E07DA 6000 0000                          bra.w   loc_20D548
000E07DE                            ; ---------------------------------------------------------------------------
000E07DE                            
000E07DE                            loc_20D52A:                             ; CODE XREF: ObjBossFoot_0_Routine0+66↑j ...
000E07DE 0C68 0010 0038                     cmpi.w  #$10,oVar38(a0)
000E07E4 6D00                               blt.s   loc_20D536
000E07E6 6000 0000                          bra.w   loc_20D548
000E07EA                            ; ---------------------------------------------------------------------------
000E07EA                            
000E07EA                            loc_20D536:                             ; CODE XREF: ObjBossFoot_0_Routine0+76↑j ...
000E07EA 6100 0000                          bsr.w   loc_20D620
000E07EE 4EB8 6F3C                          jsr     CheckSolidDown
000E07F2 4A41                               tst.w   d1
000E07F4 6F00 0000                          ble.w   loc_20D556
000E07F8 4E75                               rts
000E07FA                            ; ---------------------------------------------------------------------------
000E07FA                            
000E07FA                            loc_20D548:                             ; CODE XREF: ObjBossFoot_0_Routine0+78↑j ...
000E07FA 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E0800 117C 0004 0024                     move.b  #4,oRoutine(a0)
000E0806 4E75                               rts
000E0808                            ; ---------------------------------------------------------------------------
000E0808                            
000E0808                            loc_20D556:                             ; CODE XREF: ObjBossFoot_0_Routine0+94↑j ...
000E0808 08E8 0004 002C                     bset    #4,oVar2C(a0)
000E080E 3668 002E                          movea.w oVar2E(a0),a3
000E0812 08EB 0004 002C                     bset    #4,$2C(a3)
000E0818 366B 002E                          movea.w $2E(a3),a3
000E081C 08EB 0004 002C                     bset    #4,$2C(a3)
000E0822 366B 002E                          movea.w $2E(a3),a3
000E0826 366B 002E                          movea.w $2E(a3),a3
000E082A 177C 0008 0035                     move.b  #8,$35(a3)
000E0830 303C 007E                          move.w  #$7E,d0 ; '~'
000E0834 4EB8 61B2                          jsr     SubCPUCmd
000E0838 4E75                               rts
000E083A                            ; ---------------------------------------------------------------------------
000E083A                            
000E083A                            ObjBossFoot_0_Routine6:                 ; DATA XREF: ROM:0020D4A6↑o
000E083A 2028 003C                          move.l  oVar3C(a0),d0
000E083E D1A8 0034                          add.l   d0,oVar34(a0)
000E0842 2028 0010                          move.l  oXVel(a0),d0
000E0846 91A8 0038                          sub.l   d0,oVar38(a0)
000E084A 0C68 0000 0038                     cmpi.w  #0,oVar38(a0)
000E0850 6E00                               bgt.s   loc_20D5C2
000E0852 317C 0000 0034                     move.w  #0,oVar34(a0)
000E0858 4268 0036                          clr.w   oVar36(a0)
000E085C 317C 0000 0038                     move.w  #0,oVar38(a0)
000E0862 4268 003A                          clr.w   oVar3A(a0)
000E0866 08E8 0000 002C                     bset    #0,oVar2C(a0)
000E086C 117C 0008 0024                     move.b  #8,oRoutine(a0)
000E0872                            
000E0872                            loc_20D5C2:                             ; CODE XREF: ObjBossFoot_0_Routine0+F2↑j
000E0872 6000 0000                          bra.w   loc_20D620
000E0876                            ; ---------------------------------------------------------------------------
000E0876                            
000E0876                            ObjBossFoot_0_Routine4:                 ; DATA XREF: ROM:0020D4A4↑o
000E0876 0828 0004 002C                     btst    #4,oVar2C(a0)
000E087C 6600 0000                          bne.w   locret_20D5E0
000E0880 6100 0000                          bsr.w   loc_20D67A
000E0884 4EB8 6F3C                          jsr     CheckSolidDown
000E0888 4A41                               tst.w   d1
000E088A 6F00 FF7C                          ble.w   loc_20D556
000E088E                            
000E088E                            locret_20D5E0:                          ; CODE XREF: ObjBossFoot_0_Routine0+11E↑j
000E088E 4E75                               rts
000E0890                            ; ---------------------------------------------------------------------------
000E0890                            
000E0890                            ObjBossFoot_0_Routine8:                 ; DATA XREF: ROM:0020D4A8↑o
000E0890 6100 0000                          bsr.w   loc_20D67A
000E0894 4E75                               rts
000E0896                            ; ---------------------------------------------------------------------------
000E0896                            
000E0896                            ObjBossFoot_0_RoutineA:                 ; DATA XREF: ROM:0020D4AA↑o
000E0896 3268 002E                          movea.w oVar2E(a0),a1
000E089A 3269 002E                          movea.w $2E(a1),a1
000E089E 3269 002E                          movea.w $2E(a1),a1
000E08A2 3269 0030                          movea.w $30(a1),a1
000E08A6 3269 0030                          movea.w $30(a1),a1
000E08AA 3269 0030                          movea.w $30(a1),a1
000E08AE 3169 0008 0008                     move.w  8(a1),oX(a0)
000E08B4 0668 FFF6 0008                     addi.w  #-$A,oX(a0)
000E08BA 3169 000C 000C                     move.w  $C(a1),oY(a0)
000E08C0 3169 0034 0034                     move.w  $34(a1),oVar34(a0)
000E08C6 3169 0038 0038                     move.w  $38(a1),oVar38(a0)
000E08CC 4E75                               rts
000E08CE                            ; ---------------------------------------------------------------------------
000E08CE                            
000E08CE                            loc_20D620:                             ; CODE XREF: ObjBossFoot_0_Routine0:loc_20D536↑p ...
000E08CE 0828 0004 002C                     btst    #4,oVar2C(a0)
000E08D4 6700                               beq.s   loc_20D67A
000E08D6 0828 0005 002C                     btst    #5,oVar2C(a0)
000E08DC 6600 0000                          bne.w   loc_20D634
000E08E0 4E75                               rts
000E08E2                            ; ---------------------------------------------------------------------------
000E08E2                            
000E08E2                            loc_20D634:                             ; CODE XREF: ObjBossFoot_0_Routine0+180↑j
000E08E2 2228 003C                          move.l  oVar3C(a0),d1
000E08E6 2428 0010                          move.l  oXVel(a0),d2
000E08EA 0C28 0006 0024                     cmpi.b  #6,oRoutine(a0)
000E08F0 6700                               beq.s   loc_20D648
000E08F2 4481                               neg.l   d1
000E08F4 4482                               neg.l   d2
000E08F6                            
000E08F6                            loc_20D648:                             ; CODE XREF: ObjBossFoot_0_Routine0+194↑j
000E08F6 3668 002E                          movea.w oVar2E(a0),a3
000E08FA 93AB 0008                          sub.l   d1,8(a3)
000E08FE D5AB 000C                          add.l   d2,$C(a3)
000E0902 366B 002E                          movea.w $2E(a3),a3
000E0906 93AB 0008                          sub.l   d1,8(a3)
000E090A D5AB 000C                          add.l   d2,$C(a3)
000E090E 366B 002E                          movea.w $2E(a3),a3
000E0912 93AB 0008                          sub.l   d1,8(a3)
000E0916 D5AB 000C                          add.l   d2,$C(a3)
000E091A 366B 002E                          movea.w $2E(a3),a3
000E091E 93AB 0008                          sub.l   d1,8(a3)
000E0922 D5AB 000C                          add.l   d2,$C(a3)
000E0926 4E75                               rts
000E0928                            ; ---------------------------------------------------------------------------
000E0928                            
000E0928                            loc_20D67A:                             ; CODE XREF: ObjBossFoot_0_Routine0+4C↑j ...
000E0928 3268 002E                          movea.w oVar2E(a0),a1
000E092C 3029 0008                          move.w  8(a1),d0
000E0930 0640 FFF5                          addi.w  #-$B,d0
000E0934 3140 0008                          move.w  d0,oX(a0)
000E0938 3028 0034                          move.w  oVar34(a0),d0
000E093C D168 0008                          add.w   d0,oX(a0)
000E0940 3029 000C                          move.w  $C(a1),d0
000E0944 0640 000E                          addi.w  #$E,d0
000E0948 3140 000C                          move.w  d0,oY(a0)
000E094C 3028 0038                          move.w  oVar38(a0),d0
000E0950 D168 000C                          add.w   d0,oY(a0)
000E0954 4E75                               rts
000E0956                            ; End of function ObjBossFoot_0_Routine0
000E0956                            
000E0956                            
000E0956                            ; =============== S U B R O U T I N E =======================================
000E0956                            
000E0956                            
000E0956                            ObjBossFoot_0_RoutineC:                 ; DATA XREF: ROM:0020D4AC↑o
000E0956                            
000E0956                            ; FUNCTION CHUNK AT 0020D7AE SIZE 00000002 BYTES
000E0956                            
000E0956 08E8 0001 002C                     bset    #1,oVar2C(a0)
000E095C 6600                               bne.s   loc_20D6DC
000E095E 0828 0004 002C                     btst    #4,oVar2C(a0)
000E0964 6700                               beq.s   loc_20D6CA
000E0966 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000E096E 217C FFFD D000 0010                move.l  #$FFFDD000,oXVel(a0)
000E0976 6000                               bra.s   loc_20D706
000E0978                            ; ---------------------------------------------------------------------------
000E0978                            
000E0978                            loc_20D6CA:                             ; CODE XREF: ObjBossFoot_0_RoutineC+E↑j
000E0978 217C 0000 0000 003C                move.l  #0,oVar3C(a0)
000E0980 217C FFFD D000 0010                move.l  #$FFFDD000,oXVel(a0)
000E0988 6000                               bra.s   loc_20D706
000E098A                            ; ---------------------------------------------------------------------------
000E098A                            
000E098A                            loc_20D6DC:                             ; CODE XREF: ObjBossFoot_0_RoutineC+6↑j
000E098A 0828 0004 002C                     btst    #4,oVar2C(a0)
000E0990 6600                               bne.s   loc_20D6F6
000E0992 06A8 FFFF F9A0 003C                addi.l  #-$660,oVar3C(a0)
000E099A 06A8 0000 1660 0010                addi.l  #$1660,oXVel(a0)
000E09A2 6000                               bra.s   loc_20D706
000E09A4                            ; ---------------------------------------------------------------------------
000E09A4                            
000E09A4                            loc_20D6F6:                             ; CODE XREF: ObjBossFoot_0_RoutineC+3A↑j
000E09A4 04A8 FFFF F9A0 003C                subi.l  #$FFFFF9A0,oVar3C(a0)
000E09AC 06A8 0000 1660 0010                addi.l  #$1660,oXVel(a0)
000E09B4                            
000E09B4                            loc_20D706:                             ; CODE XREF: ObjBossFoot_0_RoutineC+20↑j ...
000E09B4 2028 003C                          move.l  oVar3C(a0),d0
000E09B8 D1A8 0008                          add.l   d0,oX(a0)
000E09BC 2028 0010                          move.l  oXVel(a0),d0
000E09C0 D1A8 000C                          add.l   d0,oY(a0)
000E09C4 0C68 0240 000C                     cmpi.w  #$240,oY(a0)
000E09CA 6D00                               blt.s   loc_20D726
000E09CC 588F                               addq.l  #4,sp
000E09CE 4EF8 40BE                          jmp     DeleteObject
000E09D2                            ; ---------------------------------------------------------------------------
000E09D2                            
000E09D2                            loc_20D726:                             ; CODE XREF: ObjBossFoot_0_RoutineC+74↑j
000E09D2 6000 0000                          bra.w   locret_20D7AE
000E09D6                            ; End of function ObjBossFoot_0_RoutineC
000E09D6                            
000E09D6                            
000E09D6                            ; =============== S U B R O U T I N E =======================================
000E09D6                            
000E09D6                            
000E09D6                            sub_20D72A:                             ; CODE XREF: ObjBossEggman_0_Routine6+4↑p ...
000E09D6 7400                               moveq   #0,d2
000E09D8 1428 002B                          move.b  oVar2B(a0),d2
000E09DC 84FC 0004                          divu.w  #4,d2
000E09E0 4842                               swap    d2
000E09E2 4A42                               tst.w   d2
000E09E4 6600                               bne.s   locret_20D784
000E09E6 4242                               clr.w   d2
000E09E8 4842                               swap    d2
000E09EA 84FC 000A                          divu.w  #$A,d2
000E09EE 4842                               swap    d2
000E09F0 D442                               add.w   d2,d2
000E09F2 D442                               add.w   d2,d2
000E09F4 4EB8 7CE4                          jsr     FindObjSlot
000E09F8 6600                               bne.s   locret_20D784
000E09FA 50E9 0025                          st      oRoutine2(a1)
000E09FE 45F9 0000 0000                     lea     (unk_20D786).l,a2
000E0A04 D4C2                               adda.w  d2,a2
000E0A06 12BC 0018                          move.b  #$18,obj(a1)
000E0A0A 3368 0008 0008                     move.w  oX(a0),oX(a1)
000E0A10 3368 000C 000C                     move.w  oY(a0),oY(a1)
000E0A16 301A                               move.w  (a2)+,d0
000E0A18 D169 0008                          add.w   d0,oX(a1)
000E0A1C 3012                               move.w  (a2),d0
000E0A1E D169 000C                          add.w   d0,oY(a1)
000E0A22 303C 00C4                          move.w  #sfx_explosion,d0
000E0A26 4EB8 2708                          jsr     PlayFMSound
000E0A2A                            
000E0A2A                            locret_20D784:                          ; CODE XREF: sub_20D72A+E↑j ...
000E0A2A 4E75                               rts
000E0A2C                            ; End of function sub_20D72A
000E0A2C                            
000E0A2C                            ; ---------------------------------------------------------------------------
000E0A2C FF                         unk_20D786:dc.b $FF                     ; DATA XREF: sub_20D72A+2A↑o
000E0A2D D0                                 dc.b $D0
000E0A2E FF                                 dc.b $FF
000E0A2F F0                                 dc.b $F0
000E0A30 00                                 dc.b   0
000E0A31 30                                 dc.b $30 ; 0
000E0A32 00                                 dc.b   0
000E0A33 10                                 dc.b $10
000E0A34 FF                                 dc.b $FF
000E0A35 F0                                 dc.b $F0
000E0A36 FF                                 dc.b $FF
000E0A37 F0                                 dc.b $F0
000E0A38 00                                 dc.b   0
000E0A39 10                                 dc.b $10
000E0A3A 00                                 dc.b   0
000E0A3B 10                                 dc.b $10
000E0A3C FF                                 dc.b $FF
000E0A3D E0                                 dc.b $E0
000E0A3E 00                                 dc.b   0
000E0A3F 00                                 dc.b   0
000E0A40 00                                 dc.b   0
000E0A41 30                                 dc.b $30 ; 0
000E0A42 FF                                 dc.b $FF
000E0A43 F0                                 dc.b $F0
000E0A44 FF                                 dc.b $FF
000E0A45 D0                                 dc.b $D0
000E0A46 00                                 dc.b   0
000E0A47 10                                 dc.b $10
000E0A48 FF                                 dc.b $FF
000E0A49 F0                                 dc.b $F0
000E0A4A 00                                 dc.b   0
000E0A4B 10                                 dc.b $10
000E0A4C 00                                 dc.b   0
000E0A4D 10                                 dc.b $10
000E0A4E FF                                 dc.b $FF
000E0A4F F0                                 dc.b $F0
000E0A50 00                                 dc.b   0
000E0A51 20                                 dc.b $20
000E0A52 00                                 dc.b   0
000E0A53 00                                 dc.b   0
000E0A54                            ; ---------------------------------------------------------------------------
000E0A54                            ; START OF FUNCTION CHUNK FOR ObjBossElbow_0_Routine4
000E0A54                            ;   ADDITIONAL PARENT FUNCTION ObjBossUpperArm_0_Routine0
000E0A54                            ;   ADDITIONAL PARENT FUNCTION ObjBossForearm_0_Routine4
000E0A54                            ;   ADDITIONAL PARENT FUNCTION ObjBossBumper_0_Routine4
000E0A54                            ;   ADDITIONAL PARENT FUNCTION ObjBossThigh_0_Routine18
000E0A54                            ;   ADDITIONAL PARENT FUNCTION ObjBossCalf_0_RoutineE
000E0A54                            ;   ADDITIONAL PARENT FUNCTION ObjBossFoot_0_RoutineC
000E0A54                            
000E0A54                            locret_20D7AE:                          ; CODE XREF: ObjBossElbow_0_Routine4:loc_20CA74↑j ...
000E0A54 4E75                               rts
000E0A56                            ; END OF FUNCTION CHUNK FOR ObjBossElbow_0_Routine4
000E0A56                            
000E0A56 0000                       Ani_20D7BC:dc.w .Ani_20D7BC_0-*         ; DATA XREF: ObjBossEggman+1E↑o ...
000E0A58 0000                               dc.w .Ani_20D7BC_1-Ani_20D7BC
000E0A5A 0000                               dc.w .Ani_20D7BC_2-Ani_20D7BC
000E0A5C 0000                               dc.w .Ani_20D7BC_3-Ani_20D7BC
000E0A5E 0000                               dc.w .Ani_20D7BC_4-Ani_20D7BC
000E0A60 3B                         .Ani_20D7BC_0:dc.b $3B                  ; DATA XREF: ROM:Ani_20D7BC↑o
000E0A61 00                                 dc.b 0
000E0A62 FF                                 dc.b $FF
000E0A63 07                         .Ani_20D7BC_1:dc.b 7                    ; DATA XREF: ROM:0020D7BE↑o
000E0A64 0203                               dc.b 2, 3
000E0A66 FF                                 dc.b $FF
000E0A67 03                         .Ani_20D7BC_2:dc.b 3                    ; DATA XREF: ROM:0020D7C0↑o
000E0A68 0105 0406                          dc.b 1, 5, 4, 6
000E0A6C FF                                 dc.b $FF
000E0A6D 03                         .Ani_20D7BC_3:dc.b 3                    ; DATA XREF: ROM:0020D7C2↑o
000E0A6E 0708                               dc.b 7, 8
000E0A70 FF                                 dc.b $FF
000E0A71 03                         .Ani_20D7BC_4:dc.b 3                    ; DATA XREF: ROM:0020D7C4↑o
000E0A72 090A                               dc.b 9, $A
000E0A74 FF                                 dc.b $FF
000E0A75 00                                 dc.b   0
000E0A76                            
000E0A76 0000                       Spr_20D7DC:dc.w .Spr_20D7DC_0-*         ; DATA XREF: ROM:0020713E↑o ...
000E0A78 0000                               dc.w .Spr_20D7DC_1-Spr_20D7DC
000E0A7A 0000                               dc.w .Spr_20D7DC_2-Spr_20D7DC
000E0A7C 0000                               dc.w .Spr_20D7DC_3-Spr_20D7DC
000E0A7E 0000                               dc.w .Spr_20D7DC_4-Spr_20D7DC
000E0A80 0000                               dc.w .Spr_20D7DC_5-Spr_20D7DC
000E0A82 0000                               dc.w .Spr_20D7DC_6-Spr_20D7DC
000E0A84 0000                               dc.w .Spr_20D7DC_7-Spr_20D7DC
000E0A86 0000                               dc.w .Spr_20D7DC_8-Spr_20D7DC
000E0A88 0000                               dc.w .Spr_20D7DC_9-Spr_20D7DC
000E0A8A 0000                               dc.w .Spr_20D7DC_A-Spr_20D7DC
000E0A8C 02                         .Spr_20D7DC_0:dc.b 2                    ; DATA XREF: ROM:Spr_20D7DC↑o
000E0A8D E80D 0000 E4                       dc.b $E8, $D, 0, 0, $E4
000E0A92 E801 0008 04                       dc.b $E8, 1, 0, 8, 4
000E0A97 00                                 dc.b   0
000E0A98 03                         .Spr_20D7DC_1:dc.b 3                    ; DATA XREF: ROM:0020D7DE↑o
000E0A99 D805 0832 E4                       dc.b $D8, 5, 8, $32, $E4
000E0A9E E80D 000A E4                       dc.b $E8, $D, 0, $A, $E4
000E0AA3 E801 0012 04                       dc.b $E8, 1, 0, $12, 4
000E0AA8 02                         .Spr_20D7DC_2:dc.b 2                    ; DATA XREF: ROM:0020D7E0↑o
000E0AA9 E80D 0014 E4                       dc.b $E8, $D, 0, $14, $E4
000E0AAE E801 001C 04                       dc.b $E8, 1, 0, $1C, 4
000E0AB3 00                                 dc.b   0
000E0AB4 02                         .Spr_20D7DC_3:dc.b 2                    ; DATA XREF: ROM:0020D7E2↑o
000E0AB5 E80D 001E E4                       dc.b $E8, $D, 0, $1E, $E4
000E0ABA E801 0026 04                       dc.b $E8, 1, 0, $26, 4
000E0ABF 00                                 dc.b   0
000E0AC0 03                         .Spr_20D7DC_4:dc.b 3                    ; DATA XREF: ROM:0020D7E4↑o
000E0AC1 D805 0836 E4                       dc.b $D8, 5, 8, $36, $E4
000E0AC6 E80D 0028 E4                       dc.b $E8, $D, 0, $28, $E4
000E0ACB E801 0030 04                       dc.b $E8, 1, 0, $30, 4
000E0AD0 02                         .Spr_20D7DC_5:dc.b 2                    ; DATA XREF: ROM:0020D7E6↑o
000E0AD1 E80D 000A E4                       dc.b $E8, $D, 0, $A, $E4
000E0AD6 E801 0012 04                       dc.b $E8, 1, 0, $12, 4
000E0ADB 00                                 dc.b   0
000E0ADC 02                         .Spr_20D7DC_6:dc.b 2                    ; DATA XREF: ROM:0020D7E8↑o
000E0ADD E80D 0028 E4                       dc.b $E8, $D, 0, $28, $E4
000E0AE2 E801 0030 04                       dc.b $E8, 1, 0, $30, 4
000E0AE7 00                                 dc.b   0
000E0AE8 04                         .Spr_20D7DC_7:dc.b 4                    ; DATA XREF: ROM:0020D7EA↑o
000E0AE9 E80F 003A E8                       dc.b $E8, $F, 0, $3A, $E8
000E0AEE E807 004A 08                       dc.b $E8, 7, 0, $4A, 8
000E0AF3 080E 0052 F0                       dc.b 8, $E, 0, $52, $F0
000E0AF8 0801 006D E4                       dc.b 8, 1, 0, $6D, $E4
000E0AFD 00                                 dc.b   0
000E0AFE 04                         .Spr_20D7DC_8:dc.b 4                    ; DATA XREF: ROM:0020D7EC↑o
000E0AFF E80F 003A E8                       dc.b $E8, $F, 0, $3A, $E8
000E0B04 E807 004A 08                       dc.b $E8, 7, 0, $4A, 8
000E0B09 080E 0052 F0                       dc.b 8, $E, 0, $52, $F0
000E0B0E 0800 006F E4                       dc.b 8, 0, 0, $6F, $E4
000E0B13 00                                 dc.b   0
000E0B14 05                         .Spr_20D7DC_9:dc.b 5                    ; DATA XREF: ROM:0020D7EE↑o
000E0B15 E80F 003A E8                       dc.b $E8, $F, 0, $3A, $E8
000E0B1A E807 004A 08                       dc.b $E8, 7, 0, $4A, 8
000E0B1F 080E 005E E8                       dc.b 8, $E, 0, $5E, $E8
000E0B24 0802 006A 08                       dc.b 8, 2, 0, $6A, 8
000E0B29 0801 006D E4                       dc.b 8, 1, 0, $6D, $E4
000E0B2E 05                         .Spr_20D7DC_A:dc.b 5                    ; DATA XREF: ROM:0020D7F0↑o
000E0B2F E80F 003A E8                       dc.b $E8, $F, 0, $3A, $E8
000E0B34 E807 004A 08                       dc.b $E8, 7, 0, $4A, 8
000E0B39 080E 005E E8                       dc.b 8, $E, 0, $5E, $E8
000E0B3E 0802 006A 08                       dc.b 8, 2, 0, $6A, 8
000E0B43 0800 006F E4                       dc.b 8, 0, 0, $6F, $E4        
000E0B48 0000                       Spr_20D918:dc.w .Spr_20D918_0-*         ; DATA XREF: sub_20BD36+14A↑o ...
000E0B4A 0000                               dc.w .Spr_20D918_1-Spr_20D918
000E0B4C 0000                               dc.w .Spr_20D918_2-Spr_20D918
000E0B4E 02                         .Spr_20D918_0:dc.b 2                    ; DATA XREF: ROM:Spr_20D918↑o
000E0B4F F80D 0045 F2                       dc.b $F8, $D, 0, $45, $F2
000E0B54 F809 0057 0A                       dc.b $F8, 9, 0, $57, $A
000E0B59 00                                 dc.b   0
000E0B5A 02                         .Spr_20D918_1:dc.b 2                    ; DATA XREF: ROM:0020D91A↑o
000E0B5B F809 004D FA                       dc.b $F8, 9, 0, $4D, $FA
000E0B60 F809 0057 0A                       dc.b $F8, 9, 0, $57, $A
000E0B65 00                                 dc.b   0
000E0B66 02                         .Spr_20D918_2:dc.b 2                    ; DATA XREF: ROM:0020D91C↑o
000E0B67 F805 0053 02                       dc.b $F8, 5, 0, $53, 2
000E0B6C F809 0057 0A                       dc.b $F8, 9, 0, $57, $A
000E0B71 00                                 dc.b   0        
000E0B72                            
000E0B72 0000                       Spr_20D942:dc.w .Spr_20D942_0-*         ; DATA XREF: sub_20BD36+1C2↑o ...
000E0B74 0000                               dc.w .Spr_20D942_1-Spr_20D942
000E0B76 0000                               dc.w .Spr_20D942_2-Spr_20D942
000E0B78 01                         .Spr_20D942_0:dc.b 1                    ; DATA XREF: ROM:Spr_20D942↑o
000E0B79 F80D 0045 F2                       dc.b $F8, $D, 0, $45, $F2
000E0B7E 01                         .Spr_20D942_1:dc.b 1                    ; DATA XREF: ROM:0020D944↑o
000E0B7F F809 004D FA                       dc.b $F8, 9, 0, $4D, $FA
000E0B84 01                         .Spr_20D942_2:dc.b 1                    ; DATA XREF: ROM:0020D946↑o
000E0B85 F805 0053 02                       dc.b $F8, 5, 0, $53, 2        
000E0B8A                            
000E0B8A 0000                       Spr_20D8AE:dc.w .Spr_20D8AE_0-*         ; DATA XREF: ObjBossBody_0_Routine0+22↑o
000E0B8C 08                         .Spr_20D8AE_0:dc.b 8                    ; DATA XREF: ROM:Spr_20D8AE↑o
000E0B8D 080A 2069 00                       dc.b 8, $A, $20, $69, 0
000E0B92 E008 0000 F4                       dc.b $E0, 8, 0, 0, $F4
000E0B97 E00A 0003 0C                       dc.b $E0, $A, 0, 3, $C
000E0B9C F80F 000C DC                       dc.b $F8, $F, 0, $C, $DC
000E0BA1 F80E 001C FC                       dc.b $F8, $E, 0, $1C, $FC
000E0BA6 F801 0028 1C                       dc.b $F8, 1, 0, $28, $1C
000E0BAB 1808 002A E4                       dc.b $18, 8, 0, $2A, $E4
000E0BB0 1009 002D FC                       dc.b $10, 9, 0, $2D, $FC
000E0BB5 00                                 dc.b   0        
000E0BB6                            
000E0BB6 0000                       Spr_20D902:dc.w .Spr_20D902_0-*         ; DATA XREF: ObjBossElbow_0_Routine0+1C↑o
000E0BB8 02                         .Spr_20D902_0:dc.b 2                    ; DATA XREF: ROM:Spr_20D902↑o
000E0BB9 F40E 0033 E8                       dc.b $F4, $E, 0, $33, $E8
000E0BBE F401 003F 08                       dc.b $F4, 1, 0, $3F, 8
000E0BC3 00                                 dc.b   0    
000E0BC4                            
000E0BC4 0000                       Spr_20D910:dc.w .Spr_20D910_0-*         ; DATA XREF: ObjBossUpperArm_0_Routine0+1C↑o
000E0BC6 01                         .Spr_20D910_0:dc.b 1                    ; DATA XREF: ROM:Spr_20D910↑o
000E0BC7 F805 0041 F8                       dc.b $F8, 5, 0, $41, $F8            
000E0BCC                            
000E0BCC 0000                       Spr_20D95A:dc.w .Spr_20D95A_0-*         ; DATA XREF: ObjBossBumper_0_Routine0+1C↑o
000E0BCE 01                         .Spr_20D95A_0:dc.b 1                    ; DATA XREF: ROM:Spr_20D95A↑o
000E0BCF F00B 005D EC                       dc.b $F0, $B, 0, $5D, $EC        
000E0BD4                            
000E0BD4 0000                       Spr_20D8DA:dc.w .Spr_20D8DA_0-*         ; DATA XREF: ObjBossThigh_0_Routine0+1C↑o
000E0BD6 01                         .Spr_20D8DA_0:dc.b 1                    ; DATA XREF: ROM:Spr_20D8DA↑o
000E0BD7 F805 0072 F8                       dc.b $F8, 5, 0, $72, $F8        
000E0BDC                            
000E0BDC 0000                       Spr_20D8E2:dc.w .Spr_20D8E2_0-*         ; DATA XREF: ObjBossCalf_0_Routine0+22↑o
000E0BDE 02                         .Spr_20D8E2_0:dc.b 2                    ; DATA XREF: ROM:Spr_20D8E2↑o
000E0BDF EC0B 0076 F4                       dc.b $EC, $B, 0, $76, $F4
000E0BE4 0C04 0082 F4                       dc.b $C, 4, 0, $82, $F4
000E0BE9 00                                 dc.b   0        
000E0BEA                            
000E0BEA 0000                       Spr_20D8F0:dc.w .Spr_20D8F0_0-*         ; DATA XREF: ObjBossFoot_0_Routine0+1C↑o
000E0BEC 03                         .Spr_20D8F0_0:dc.b 3                    ; DATA XREF: ROM:Spr_20D8F0↑o
000E0BED F40F 0084 E0                       dc.b $F4, $F, 0, $84, $E0
000E0BF2 EC0B 0094 00                       dc.b $EC, $B, 0, $94, 0
000E0BF7 0C0C 00A0 00                       dc.b $C, $C, 0, $A0, 0     
000E0BF7 0C0C 00A0 00                       dc.b $C, $C, 0, $A0, 0     
000E0BFC                            PPZ3_Scroll_Events:
000E0BFC                                include "_inc/PPZ3_Scroll.asm"   
000E0BFC                            PPZ3_IntScroll:
000E0BFC 4840                               swap    d0
000E0BFE E880                               asr.l   #4,d0
000E0C00 2400                               move.l  d0,d2
000E0C02 D482                               add.l   d2,d2
000E0C04 D082                               add.l   d2,d0
000E0C06 21C0 F70C                          move.l  d0,(cameraBgY).w
000E0C0A 4840                               swap    d0
000E0C0C 31C0 F714                          move.w  d0,(cameraBg2Y).w
000E0C10 31C0 F71C                          move.w  d0,(cameraBg3Y).w
000E0C14 E641                               asr.w   #3,d1
000E0C16 31C1 F708                          move.w  d1,(cameraBgX).w
000E0C1A E241                               asr.w   #1,d1
000E0C1C 3401                               move.w  d1,d2
000E0C1E D442                               add.w   d2,d2
000E0C20 D441                               add.w   d1,d2
000E0C22 31C2 F710                          move.w  d2,(cameraBg2X).w
000E0C26 E241                               asr.w   #1,d1
000E0C28 3401                               move.w  d1,d2
000E0C2A D442                               add.w   d2,d2
000E0C2C D441                               add.w   d1,d2
000E0C2E 31C2 F718                          move.w  d2,(cameraBg3X).w
000E0C32 45F8 A800                          lea     (deformBuffer).w,a2
000E0C36 429A                               clr.l   (a2)+
000E0C38 429A                               clr.l   (a2)+
000E0C3A 429A                               clr.l   (a2)+
000E0C3C 429A                               clr.l   (a2)+
000E0C3E 429A                               clr.l   (a2)+
000E0C40 4E75                               rts
000E0C42                            PPZ3_Scroll:                            ; CODE XREF: StageStart+298↑p ...
000E0C42 4DF8 D000                          lea     (objPlayerSlot).w,a6
000E0C46 4A38 F744                          tst.b   (scrollLock).w
000E0C4A 6700                               beq.s   loc_202916
000E0C4C 4E75                               rts
000E0C4E                            ; ---------------------------------------------------------------------------
000E0C4E                            
000E0C4E                            loc_202916:                             ; CODE XREF: ScrollStage+8↑j
000E0C4E 4278 F754                          clr.w   (scrollFlags).w
000E0C52 4278 F756                          clr.w   (scrollFlagsBg).w
000E0C56 4278 F758                          clr.w   (scrollFlagsBg2).w
000E0C5A 4278 F75A                          clr.w   (scrollFlagsBg3).w
000E0C5E 4EB8 31F8                          jsr   MoveCameraX
000E0C62 4EB8 3298                          jsr   MoveCameraY
000E0C66 4EB8 3BC8                          jsr   RunLevelEvents
000E0C6A 31F8 F704 F616                     move.w  (cameraY).w,(vscrollScreen).w
000E0C70 31F8 F70C F618                     move.w  (cameraBgY).w,(vscrollScreen+2).w
000E0C76 3838 F73A                          move.w  (scrollXDiff).w,d4
000E0C7A 48C4                               ext.l   d4
000E0C7C E784                               asl.l   #3,d4
000E0C7E 2604                               move.l  d4,d3
000E0C80 D884                               add.l   d4,d4
000E0C82 D883                               add.l   d3,d4
000E0C84 7C06                               moveq   #6,d6
000E0C86 4EB8 3522                          jsr   SetHScrollFlagsBG3
000E0C8A 3838 F73A                          move.w  (scrollXDiff).w,d4
000E0C8E 48C4                               ext.l   d4
000E0C90 E984                               asl.l   #4,d4
000E0C92 2604                               move.l  d4,d3
000E0C94 D683                               add.l   d3,d3
000E0C96 D883                               add.l   d3,d4
000E0C98 7C04                               moveq   #4,d6
000E0C9A 4EB8 34EE                          jsr   SetHScrollFlagsBG2
000E0C9E 43F9 00FF 5014                     lea     (deformBuffer+$FFA814).l,a1
000E0CA4 3838 F73A                          move.w  (scrollXDiff).w,d4
000E0CA8 48C4                               ext.l   d4
000E0CAA EB84                               asl.l   #5,d4
000E0CAC 3A38 F73C                          move.w  (scrollYDiff).w,d5
000E0CB0 48C5                               ext.l   d5
000E0CB2 E985                               asl.l   #4,d5
000E0CB4 2605                               move.l  d5,d3
000E0CB6 DA85                               add.l   d5,d5
000E0CB8 DA83                               add.l   d3,d5
000E0CBA 4EB8 33EA                          jsr   SetScrollFlagsBG
000E0CBE 31F8 F70C F618                     move.w  (cameraBgY).w,(vscrollScreen+2).w
000E0CC4 31F8 F70C F714                     move.w  (cameraBgY).w,(cameraBg2Y).w
000E0CCA 31F8 F70C F71C                     move.w  (cameraBgY).w,(cameraBg3Y).w
000E0CD0 1038 F75A                          move.b  (scrollFlagsBg3).w,d0
000E0CD4 8038 F758                          or.b    (scrollFlagsBg2).w,d0
000E0CD8 8138 F756                          or.b    d0,(scrollFlagsBg).w
000E0CDC 4238 F75A                          clr.b   (scrollFlagsBg3).w
000E0CE0 4238 F758                          clr.b   (scrollFlagsBg2).w
000E0CE4 45F8 A800                          lea     (deformBuffer).w,a2
000E0CE8 069A 0001 0000                     addi.l  #$10000,(a2)+
000E0CEE 069A 0000 E000                     addi.l  #$E000,(a2)+
000E0CF4 069A 0000 C000                     addi.l  #$C000,(a2)+
000E0CFA 069A 0000 A000                     addi.l  #$A000,(a2)+
000E0D00 069A 0000 8000                     addi.l  #$8000,(a2)+
000E0D06 3038 F700                          move.w  (cameraX).w,d0
000E0D0A 4440                               neg.w   d0
000E0D0C 4840                               swap    d0
000E0D0E 45F8 A800                          lea     (deformBuffer).w,a2
000E0D12 7C04                               moveq   #4,d6
000E0D14                            
000E0D14                            loc_2029DA:                             ; CODE XREF: ScrollStage+EC↓j
000E0D14 221A                               move.l  (a2)+,d1
000E0D16 4841                               swap    d1
000E0D18 D278 F718                          add.w   (cameraBg3X).w,d1
000E0D1C 4441                               neg.w   d1
000E0D1E 7A00                               moveq   #0,d5
000E0D20 47F9 0000 0000                     lea     (unk_202A60).l,a3
000E0D26 1A33 6000                          move.b  (a3,d6.w),d5
000E0D2A                            
000E0D2A                            loc_2029F0:                             ; CODE XREF: ScrollStage+E8↓j
000E0D2A 32C1                               move.w  d1,(a1)+
000E0D2C 51CD FFFC                          dbf     d5,loc_2029F0
000E0D30 51CE FFE2                          dbf     d6,loc_2029DA
000E0D34 323C 0005                          move.w  #5,d1
000E0D38 3038 F718                          move.w  (cameraBg3X).w,d0
000E0D3C 4440                               neg.w   d0
000E0D3E                            
000E0D3E                            loc_202A04:                             ; CODE XREF: ScrollStage+FC↓j
000E0D3E 32C0                               move.w  d0,(a1)+
000E0D40 51C9 FFFC                          dbf     d1,loc_202A04
000E0D44 323C 0001                          move.w  #1,d1
000E0D48 3038 F708                          move.w  (cameraBgX).w,d0
000E0D4C 4440                               neg.w   d0
000E0D4E                            
000E0D4E                            loc_202A14:                             ; CODE XREF: ScrollStage+10C↓j
000E0D4E 32C0                               move.w  d0,(a1)+
000E0D50 51C9 FFFC                          dbf     d1,loc_202A14
000E0D54 323C 0007                          move.w  #7,d1
000E0D58 3038 F710                          move.w  (cameraBg2X).w,d0
000E0D5C 4440                               neg.w   d0
000E0D5E                            
000E0D5E                            loc_202A24:                             ; CODE XREF: ScrollStage+11C↓j
000E0D5E 32C0                               move.w  d0,(a1)+
000E0D60 51C9 FFFC                          dbf     d1,loc_202A24
000E0D64 43F8 CC00                          lea     (hscroll).w,a1
000E0D68 45F9 00FF 5014                     lea     (deformBuffer+$FFA814).l,a2
000E0D6E 3038 F70C                          move.w  (cameraBgY).w,d0
000E0D72 3400                               move.w  d0,d2
000E0D74 0240 01F8                          andi.w  #$1F8,d0
000E0D78 E448                               lsr.w   #2,d0
000E0D7A 3600                               move.w  d0,d3
000E0D7C E24B                               lsr.w   #1,d3
000E0D7E 721F                               moveq   #$1F,d1
000E0D80 7A1C                               moveq   #$1C,d5
000E0D82 9243                               sub.w   d3,d1
000E0D84 6500                               bcs.s   loc_202A5C
000E0D86 0C41 001B                          cmpi.w  #$1B,d1
000E0D8A 6500                               bcs.s   loc_202A52
000E0D8C 721B                               moveq   #$1B,d1
000E0D8E                            
000E0D8E                            loc_202A52:                             ; CODE XREF: ScrollStage+144↑j
000E0D8E 9A41                               sub.w   d1,d5
000E0D90 45F2 0000                          lea     (a2,d0.w),a2
000E0D94 6100 0000                          bsr.w   sub_202A98
000E0D98                            
000E0D98                            loc_202A5C:                             ; CODE XREF: ScrollStage+13E↑j
000E0D98 6000 0000                          bra.w   loc_202A66
000E0D9C                            ; ---------------------------------------------------------------------------
000E0D9C 01                         unk_202A60:dc.b   1                     ; DATA XREF: ScrollStage+DC↑o
000E0D9D 03                                 dc.b   3
000E0D9E 03                                 dc.b   3
000E0D9F 03                                 dc.b   3
000E0DA0 01                                 dc.b   1
000E0DA1 00                                 dc.b   0
000E0DA2                            ; ---------------------------------------------------------------------------
000E0DA2                            
000E0DA2                            loc_202A66:                             ; CODE XREF: ScrollStage:loc_202A5C↑j
000E0DA2 3038 F710                          move.w  (cameraBg2X).w,d0
000E0DA6 3438 F700                          move.w  (cameraX).w,d2
000E0DAA 9440                               sub.w   d0,d2
000E0DAC 48C2                               ext.l   d2
000E0DAE E182                               asl.l   #8,d2
000E0DB0 85FC 0100                          divs.w  #$100,d2
000E0DB4 48C2                               ext.l   d2
000E0DB6 E182                               asl.l   #8,d2
000E0DB8 7600                               moveq   #0,d3
000E0DBA 3600                               move.w  d0,d3
000E0DBC 3205                               move.w  d5,d1
000E0DBE E749                               lsl.w   #3,d1
000E0DC0 5341                               subq.w  #1,d1
000E0DC2                            
000E0DC2                            loc_202A86:                             ; CODE XREF: ScrollStage+188↓j
000E0DC2 3003                               move.w  d3,d0
000E0DC4 4440                               neg.w   d0
000E0DC6 22C0                               move.l  d0,(a1)+
000E0DC8 4843                               swap    d3
000E0DCA D682                               add.l   d2,d3
000E0DCC 4843                               swap    d3
000E0DCE 51C9 FFF2                          dbf     d1,loc_202A86
000E0DD2 4E75                               rts
000E0DD4                            ; End of function ScrollStage
000E0DD4                            
000E0DD4                            
000E0DD4                            ; =============== S U B R O U T I N E =======================================
000E0DD4                            
000E0DD4                            
000E0DD4                            sub_202A98:                             ; CODE XREF: ScrollStage+14E↑p
000E0DD4 0242 0007                          andi.w  #7,d2
000E0DD8 D442                               add.w   d2,d2
000E0DDA 301A                               move.w  (a2)+,d0
000E0DDC 4EFB 2000                          jmp     loc_202AA6(pc,d2.w)
000E0DE0                            ; End of function sub_202A98
000E0DE0                            
000E0DE0                            ; ---------------------------------------------------------------------------
000E0DE0                            
000E0DE0                            loc_202AA4:                             ; CODE XREF: ROM:00202AB6↓j
000E0DE0 301A                               move.w  (a2)+,d0
000E0DE2                            
000E0DE2                            loc_202AA6:                             ; CODE XREF: sub_202A98+8↑j
000E0DE2 22C0                               move.l  d0,(a1)+
000E0DE4 22C0                               move.l  d0,(a1)+
000E0DE6 22C0                               move.l  d0,(a1)+
000E0DE8 22C0                               move.l  d0,(a1)+
000E0DEA 22C0                               move.l  d0,(a1)+
000E0DEC 22C0                               move.l  d0,(a1)+
000E0DEE 22C0                               move.l  d0,(a1)+
000E0DF0 22C0                               move.l  d0,(a1)+
000E0DF2 51C9 FFEC                          dbf     d1,loc_202AA4
000E0DF6 4E75                               rts
000E0DF8                            ; ---------------------------------------------------------------------------
000E0DF8                            Unk_Jump:
000E0DF8 4440                               neg.w   d0
000E0DFA 4EFB 2000                          jmp     loc_202AC4(pc,d2.w)
000E0DFE                            ; ---------------------------------------------------------------------------
000E0DFE                            Unk_Line:
000E0DFE 4440                               neg.w   d0
000E0E00                            loc_202AC4:                             ; CODE XREF: ROM:00202ABE↑j
000E0E00 22C0                               move.l  d0,(a1)+
000E0E02 22C0                               move.l  d0,(a1)+
000E0E04 22C0                               move.l  d0,(a1)+
000E0E06 22C0                               move.l  d0,(a1)+
000E0E08 22C0                               move.l  d0,(a1)+
000E0E0A 22C0                               move.l  d0,(a1)+
000E0E0C 22C0                               move.l  d0,(a1)+
000E0E0E 22C0                               move.l  d0,(a1)+
000E0E10 51C9 FFCE                          dbf     d1,loc_202AA4
000E0E14 4E75                               rts
000E0E14 4E75                               rts
000E0E16                            PPZ2_Scroll_Events:
000E0E16                                include "_inc/PPZ2_Scroll.asm"	
000E0E16                            ; =============== S U B R O U T I N E =======================================
000E0E16                            
000E0E16                            
000E0E16                            PPZ2_IntScroll:                         ; CODE XREF: InitCamera+10C↑p
000E0E16 4840                               swap    d0
000E0E18 E880                               asr.l   #4,d0
000E0E1A 2400                               move.l  d0,d2
000E0E1C D482                               add.l   d2,d2
000E0E1E D082                               add.l   d2,d0
000E0E20 21C0 F70C                          move.l  d0,(cameraBgY).w
000E0E24 4840                               swap    d0
000E0E26 31C0 F714                          move.w  d0,(cameraBg2Y).w
000E0E2A 31C0 F71C                          move.w  d0,(cameraBg3Y).w
000E0E2E E249                               lsr.w   #1,d1
000E0E30 31C1 F708                          move.w  d1,(cameraBgX).w
000E0E34 E449                               lsr.w   #2,d1
000E0E36 31C1 F718                          move.w  d1,(cameraBg3X).w
000E0E3A E249                               lsr.w   #1,d1
000E0E3C 3401                               move.w  d1,d2
000E0E3E D442                               add.w   d2,d2
000E0E40 D242                               add.w   d2,d1
000E0E42 31C1 F710                          move.w  d1,(cameraBg2X).w
000E0E46 45F8 A800                          lea     (deformBuffer).w,a2
000E0E4A 429A                               clr.l   (a2)+
000E0E4C 429A                               clr.l   (a2)+
000E0E4E 429A                               clr.l   (a2)+
000E0E50 4E75                               rts
000E0E52                            ; End of function PPZ2_IntScroll
000E0E52                            
000E0E52                            
000E0E52                            ; =============== S U B R O U T I N E =======================================
000E0E52                            
000E0E52                            
000E0E52                            PPZ2_Scroll:                            ; CODE XREF: StageStart+298↑p ...
000E0E52 4DF8 D000                          lea     (objPlayerSlot).w,a6
000E0E56 4A38 F744                          tst.b   (scrollLock).w
000E0E5A 6700                               beq.s   loc_202A64
000E0E5C 4E75                               rts
000E0E5E                            ; ---------------------------------------------------------------------------
000E0E5E                            
000E0E5E                            loc_202A64:                             ; CODE XREF: PPZ2_Scroll+8↑j
000E0E5E 4278 F754                          clr.w   (scrollFlags).w
000E0E62 4278 F756                          clr.w   (scrollFlagsBg).w
000E0E66 4278 F758                          clr.w   (scrollFlagsBg2).w
000E0E6A 4278 F75A                          clr.w   (scrollFlagsBg3).w
000E0E6E 4EB8 31F8                          jsr   MoveCameraX
000E0E72 4EB8 3298                          jsr   MoveCameraY
000E0E76 4EB8 3BC8                          jsr   RunLevelEvents
000E0E7A 31F8 F704 F616                     move.w  (cameraY).w,(vscrollScreen).w
000E0E80 31F8 F70C F618                     move.w  (cameraBgY).w,(vscrollScreen+2).w
000E0E86 3838 F73A                          move.w  (scrollXDiff).w,d4
000E0E8A 48C4                               ext.l   d4
000E0E8C EB84                               asl.l   #5,d4
000E0E8E 7C06                               moveq   #6,d6
000E0E90 4EB8 3522                          jsr   SetHScrollFlagsBG3
000E0E94 3838 F73A                          move.w  (scrollXDiff).w,d4
000E0E98 48C4                               ext.l   d4
000E0E9A E984                               asl.l   #4,d4
000E0E9C 2604                               move.l  d4,d3
000E0E9E D683                               add.l   d3,d3
000E0EA0 D883                               add.l   d3,d4
000E0EA2 7C04                               moveq   #4,d6
000E0EA4 4EB8 34EE                          jsr     SetHScrollFlagsBG2
000E0EA8 43F9 00FF 500C                     lea     (deformBuffer+$FFA80C).l,a1
000E0EAE 3838 F73A                          move.w  (scrollXDiff).w,d4
000E0EB2 48C4                               ext.l   d4
000E0EB4 EF84                               asl.l   #7,d4
000E0EB6 3A38 F73C                          move.w  (scrollYDiff).w,d5
000E0EBA 48C5                               ext.l   d5
000E0EBC E985                               asl.l   #4,d5
000E0EBE 2605                               move.l  d5,d3
000E0EC0 DA85                               add.l   d5,d5
000E0EC2 DA83                               add.l   d3,d5
000E0EC4 4EB8 33EA                          jsr   SetScrollFlagsBG
000E0EC8 31F8 F70C F618                     move.w  (cameraBgY).w,(vscrollScreen+2).w
000E0ECE 31F8 F70C F714                     move.w  (cameraBgY).w,(cameraBg2Y).w
000E0ED4 31F8 F70C F71C                     move.w  (cameraBgY).w,(cameraBg3Y).w
000E0EDA 1038 F75A                          move.b  (scrollFlagsBg3).w,d0
000E0EDE 8038 F758                          or.b    (scrollFlagsBg2).w,d0
000E0EE2 8138 F756                          or.b    d0,(scrollFlagsBg).w
000E0EE6 4238 F75A                          clr.b   (scrollFlagsBg3).w
000E0EEA 4238 F758                          clr.b   (scrollFlagsBg2).w
000E0EEE 45F8 A800                          lea     (deformBuffer).w,a2
000E0EF2 069A 0001 0000                     addi.l  #$10000,(a2)+
000E0EF8 069A 0000 C000                     addi.l  #$C000,(a2)+
000E0EFE 069A 0000 8000                     addi.l  #$8000,(a2)+
000E0F04 3038 F700                          move.w  (cameraX).w,d0
000E0F08 4440                               neg.w   d0
000E0F0A 4840                               swap    d0
000E0F0C 3038 A800                          move.w  (deformBuffer).w,d0
000E0F10 D078 F718                          add.w   (cameraBg3X).w,d0
000E0F14 4440                               neg.w   d0
000E0F16 323C 0003                          move.w  #3,d1
000E0F1A                            
000E0F1A                            loc_202B1E:                             ; CODE XREF: PPZ2_Scroll+C8↓j
000E0F1A 32C0                               move.w  d0,(a1)+
000E0F1C 51C9 FFFC                          dbf     d1,loc_202B1E
000E0F20 3038 A804                          move.w  (deformBuffer+4).w,d0
000E0F24 D078 F718                          add.w   (cameraBg3X).w,d0
000E0F28 4440                               neg.w   d0
000E0F2A 323C 0003                          move.w  #3,d1
000E0F2E                            
000E0F2E                            loc_202B32:                             ; CODE XREF: PPZ2_Scroll+DC↓j
000E0F2E 32C0                               move.w  d0,(a1)+
000E0F30 51C9 FFFC                          dbf     d1,loc_202B32
000E0F34 3038 A808                          move.w  (deformBuffer+8).w,d0
000E0F38 D078 F718                          add.w   (cameraBg3X).w,d0
000E0F3C 4440                               neg.w   d0
000E0F3E 323C 0003                          move.w  #3,d1
000E0F42                            
000E0F42                            loc_202B46:                             ; CODE XREF: PPZ2_Scroll+F0↓j
000E0F42 32C0                               move.w  d0,(a1)+
000E0F44 51C9 FFFC                          dbf     d1,loc_202B46
000E0F48 323C 0013                          move.w  #$13,d1
000E0F4C 3038 F718                          move.w  (cameraBg3X).w,d0
000E0F50 4440                               neg.w   d0
000E0F52                            
000E0F52                            loc_202B56:                             ; CODE XREF: PPZ2_Scroll+100↓j
000E0F52 32C0                               move.w  d0,(a1)+
000E0F54 51C9 FFFC                          dbf     d1,loc_202B56
000E0F58 323C 0003                          move.w  #3,d1
000E0F5C 3038 F710                          move.w  (cameraBg2X).w,d0
000E0F60 4440                               neg.w   d0
000E0F62                            
000E0F62                            loc_202B66:                             ; CODE XREF: PPZ2_Scroll+110↓j
000E0F62 32C0                               move.w  d0,(a1)+
000E0F64 51C9 FFFC                          dbf     d1,loc_202B66
000E0F68 43F8 CC00                          lea     (hscroll).w,a1
000E0F6C 45F9 00FF 500C                     lea     (deformBuffer+$FFA80C).l,a2
000E0F72 3038 F70C                          move.w  (cameraBgY).w,d0
000E0F76 3400                               move.w  d0,d2
000E0F78 0240 01F8                          andi.w  #$1F8,d0
000E0F7C E448                               lsr.w   #2,d0
000E0F7E 3600                               move.w  d0,d3
000E0F80 E24B                               lsr.w   #1,d3
000E0F82 7223                               moveq   #$23,d1 ; '#'
000E0F84 7A1C                               moveq   #$1C,d5
000E0F86 9243                               sub.w   d3,d1
000E0F88 6500                               bcs.s   loc_202B9E
000E0F8A 0C41 001B                          cmpi.w  #$1B,d1
000E0F8E 6500                               bcs.s   loc_202B94
000E0F90 721B                               moveq   #$1B,d1
000E0F92                            
000E0F92                            loc_202B94:                             ; CODE XREF: PPZ2_Scroll+138↑j
000E0F92 9A41                               sub.w   d1,d5
000E0F94 45F2 0000                          lea     (a2,d0.w),a2
000E0F98 6100 0000                          bsr.w   sub_202BD0
000E0F9C                            
000E0F9C                            loc_202B9E:                             ; CODE XREF: PPZ2_Scroll+132↑j
000E0F9C 3038 F710                          move.w  (cameraBg2X).w,d0
000E0FA0 3438 F700                          move.w  (cameraX).w,d2
000E0FA4 9440                               sub.w   d0,d2
000E0FA6 48C2                               ext.l   d2
000E0FA8 E182                               asl.l   #8,d2
000E0FAA 85FC 0100                          divs.w  #$100,d2
000E0FAE 48C2                               ext.l   d2
000E0FB0 E182                               asl.l   #8,d2
000E0FB2 7600                               moveq   #0,d3
000E0FB4 3600                               move.w  d0,d3
000E0FB6 3205                               move.w  d5,d1
000E0FB8 E749                               lsl.w   #3,d1
000E0FBA 5341                               subq.w  #1,d1
000E0FBC                            
000E0FBC                            loc_202BBE:                             ; CODE XREF: PPZ2_Scroll+172↓j
000E0FBC 3003                               move.w  d3,d0
000E0FBE 4440                               neg.w   d0
000E0FC0 22C0                               move.l  d0,(a1)+
000E0FC2 4843                               swap    d3
000E0FC4 D682                               add.l   d2,d3
000E0FC6 4843                               swap    d3
000E0FC8 51C9 FFF2                          dbf     d1,loc_202BBE
000E0FCC 4E75                               rts
000E0FCE                            ; End of function PPZ2_Scroll
000E0FCE                            
000E0FCE                            ; =============== S U B R O U T I N E =======================================
000E0FCE                            
000E0FCE                            
000E0FCE                            sub_202BD0:                             ; CODE XREF: PPZ2_Scroll+142↑p
000E0FCE 0242 0007                          andi.w  #7,d2
000E0FD2 D442                               add.w   d2,d2
000E0FD4 301A                               move.w  (a2)+,d0
000E0FD6 4EFB 2000                          jmp     word_202BDE(pc,d2.w)
000E0FDA                            ; End of function sub_202BD0
000E0FDA                            
000E0FDA                            ; ---------------------------------------------------------------------------
000E0FDA 30                                 dc.b $30 ; 0
000E0FDB 1A                                 dc.b $1A
000E0FDC 22C0                       word_202BDE:dc.w $22C0                  ; CODE XREF: sub_202BD0+8↑j
000E0FDE 22                                 dc.b $22 ; "
000E0FDF C0                                 dc.b $C0
000E0FE0 22                                 dc.b $22 ; "
000E0FE1 C0                                 dc.b $C0
000E0FE2 22                                 dc.b $22 ; "
000E0FE3 C0                                 dc.b $C0
000E0FE4 22                                 dc.b $22 ; "
000E0FE5 C0                                 dc.b $C0
000E0FE6 22                                 dc.b $22 ; "
000E0FE7 C0                                 dc.b $C0
000E0FE8 22                                 dc.b $22 ; "
000E0FE9 C0                                 dc.b $C0
000E0FEA 22                                 dc.b $22 ; "
000E0FEB C0                                 dc.b $C0
000E0FEC 51                                 dc.b $51 ; Q
000E0FED C9                                 dc.b $C9
000E0FEE FF                                 dc.b $FF
000E0FEF EC                                 dc.b $EC
000E0FF0 4E                                 dc.b $4E ; N
000E0FF1 75                                 dc.b $75 ; u
000E0FF2 44                                 dc.b $44 ; D
000E0FF3 40                                 dc.b $40 ; @
000E0FF4 4E                                 dc.b $4E ; N
000E0FF5 FB                                 dc.b $FB
000E0FF6 20                                 dc.b $20
000E0FF7 04                                 dc.b   4
000E0FF8 44                                 dc.b $44 ; D
000E0FF9 40                                 dc.b $40 ; @
000E0FFA 22                                 dc.b $22 ; "
000E0FFB C0                                 dc.b $C0
000E0FFC 22                                 dc.b $22 ; "
000E0FFD C0                                 dc.b $C0
000E0FFE 22                                 dc.b $22 ; "
000E0FFF C0                                 dc.b $C0
000E1000 22                                 dc.b $22 ; "
000E1001 C0                                 dc.b $C0
000E1002 22                                 dc.b $22 ; "
000E1003 C0                                 dc.b $C0
000E1004 22                                 dc.b $22 ; "
000E1005 C0                                 dc.b $C0
000E1006 22                                 dc.b $22 ; "
000E1007 C0                                 dc.b $C0
000E1008 22                                 dc.b $22 ; "
000E1009 C0                                 dc.b $C0
000E100A 51                                 dc.b $51 ; Q
000E100B C9                                 dc.b $C9
000E100C FF                                 dc.b $FF
000E100D CE                                 dc.b $CE
000E100E 4E                                 dc.b $4E ; N
000E100F 75                                 dc.b $75 ; u
000E100F 75                                 dc.b $75 ; u
000E1010                            TimeTravel:
000E1010 4E75                                 rts
000E1012                            ;SegaScreen:
000E1012                               include "_inc/SegaScreen.asm"
000E1012                            SegaScreen:				; XREF: GameModeArray
000E1012 103C 00E4                  		move.b	#$E4,d0
000E1016 4EB8 270E                  		jsr	PlaySound_Special ; stop music
000E101A 4EB8 292C                  		jsr	ClearPLC
000E101E 4EB8 04FE                  		jsr	Pal_FadeFrom
000E1022 4DF9 00C0 0004             		lea	($C00004).l,a6
000E1028 3CBC 8004                  		move.w	#$8004,(a6)
000E102C 3CBC 8230                  		move.w	#$8230,(a6)
000E1030 3CBC 8407                  		move.w	#$8407,(a6)
000E1034 3CBC 8700                  		move.w	#$8700,(a6)
000E1038 3CBC 8B00                  		move.w	#$8B00,(a6)
000E103C 4238 F64E                  		clr.b	($FFFFF64E).w
000E1040 46FC 2700                  		move	#$2700,sr
000E1044 3038 F60C                  		move.w	($FFFFF60C).w,d0
000E1048 0200 00BF                  		andi.b	#$BF,d0
000E104C 33C0 00C0 0004             		move.w	d0,($C00004).l
000E1052 4EB8 2626                  		jsr	ClearScreen
000E1056 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000E1060 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000E1066 4EB8 277E                  		jsr	NemDec
000E106A 43F9 00FF 0000             		lea	($FF0000).l,a1
000E1070 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000E1076 303C 0000                  		move.w	#0,d0
000E107A 4EB8 2A72                  		jsr	EniDec
000E107E 43F9 00FF 0000             		lea	($FF0000).l,a1
000E1084 203C 6510 0003             		move.l	#$65100003,d0
000E108A 7217                       		moveq	#$17,d1
000E108C 7407                       		moveq	#7,d2
000E108E 4EB8 275E                  		jsr	ShowVDPGraphics
000E1092 43F9 00FF 0180             		lea	($FF0180).l,a1
000E1098 203C 4000 0003             		move.l	#$40000003,d0
000E109E 7227                       		moveq	#$27,d1
000E10A0 741B                       		moveq	#$1B,d2
000E10A2 4EB8 275E                  		jsr	ShowVDPGraphics
000E10A6 7000                       		moveq	#0,d0
000E10A8 4EB8 06D4                  		jsr	PalLoad2	; load Sega logo pallet
000E10AC 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000E10B2 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000E10B8 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000E10BE 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000E10C4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000E10C8 0000 0040                  		ori.b	#$40,d0
000E10CC 33C0 00C0 0004             		move.w	d0,($C00004).l
000E10D2                            
000E10D2                            Sega_WaitPallet:
000E10D2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000E10D8 4EB8 0A9E                  		jsr	DelayProgram
000E10DC 6100 0000                  		bsr.w	PalCycle_Sega
000E10E0 66F0                       		bne.s	Sega_WaitPallet
000E10E2                            
000E10E2 103C 00E1                  		move.b	#$E1,d0
000E10E6 4EB8 270E                  		jsr	PlaySound_Special ; play "SEGA"	sound
000E10EA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000E10F0 4EB8 0A9E                  		jsr	DelayProgram
000E10F4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000E10FA                            
000E10FA                            Sega_WaitEnd:
000E10FA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000E1100 4EB8 0A9E                  		jsr	DelayProgram
000E1104 4A78 F614                  		tst.w	($FFFFF614).w
000E1108 6700                       		beq.s	Sega_GotoTitle
000E110A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000E1110 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000E1112                            
000E1112                            Sega_GotoTitle:
000E1112 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; go to title screen
000E1118 4E75                       		rts	
000E111A                            
000E111A                            PalCycle_Sega:				; XREF: SegaScreen
000E111A 4A38 F635                  		tst.b	($FFFFF635).w
000E111E 6600                       		bne.s	loc_206A
000E1120 43F8 FB20                  		lea	($FFFFFB20).w,a1
000E1124 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000E112A 7205                       		moveq	#5,d1
000E112C 3038 F632                  		move.w	($FFFFF632).w,d0
000E1130                            
000E1130                            loc_2020:
000E1130 6A00                       		bpl.s	loc_202A
000E1132 5448                       		addq.w	#2,a0
000E1134 5341                       		subq.w	#1,d1
000E1136 5440                       		addq.w	#2,d0
000E1138 60F6                       		bra.s	loc_2020
000E113A                            ; ===========================================================================
000E113A                            
000E113A                            loc_202A:				; XREF: PalCycle_Sega
000E113A 3400                       		move.w	d0,d2
000E113C 0242 001E                  		andi.w	#$1E,d2
000E1140 6600                       		bne.s	loc_2034
000E1142 5440                       		addq.w	#2,d0
000E1144                            
000E1144                            loc_2034:
000E1144 0C40 0060                  		cmpi.w	#$60,d0
000E1148 6400                       		bcc.s	loc_203E
000E114A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000E114E                            
000E114E                            loc_203E:
000E114E 5440                       		addq.w	#2,d0
000E1150 51C9 FFE8                  		dbf	d1,loc_202A
000E1154 3038 F632                  		move.w	($FFFFF632).w,d0
000E1158 5440                       		addq.w	#2,d0
000E115A 3400                       		move.w	d0,d2
000E115C 0242 001E                  		andi.w	#$1E,d2
000E1160 6600                       		bne.s	loc_2054
000E1162 5440                       		addq.w	#2,d0
000E1164                            
000E1164                            loc_2054:
000E1164 0C40 0064                  		cmpi.w	#$64,d0
000E1168 6D00                       		blt.s	loc_2062
000E116A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000E1170 70F4                       		moveq	#-$C,d0
000E1172                            
000E1172                            loc_2062:
000E1172 31C0 F632                  		move.w	d0,($FFFFF632).w
000E1176 7001                       		moveq	#1,d0
000E1178 4E75                       		rts	
000E117A                            ; ===========================================================================
000E117A                            
000E117A                            loc_206A:				; XREF: loc_202A
000E117A 5338 F634                  		subq.b	#1,($FFFFF634).w
000E117E 6A00                       		bpl.s	loc_20BC
000E1180 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000E1186 3038 F632                  		move.w	($FFFFF632).w,d0
000E118A 0640 000C                  		addi.w	#$C,d0
000E118E 0C40 0030                  		cmpi.w	#$30,d0
000E1192 6500                       		bcs.s	loc_2088
000E1194 7000                       		moveq	#0,d0
000E1196 4E75                       		rts	
000E1198                            ; ===========================================================================
000E1198                            
000E1198                            loc_2088:				; XREF: loc_206A
000E1198 31C0 F632                  		move.w	d0,($FFFFF632).w
000E119C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000E11A2 41F0 0000                  		lea	(a0,d0.w),a0
000E11A6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000E11AA 22D8                       		move.l	(a0)+,(a1)+
000E11AC 22D8                       		move.l	(a0)+,(a1)+
000E11AE 3298                       		move.w	(a0)+,(a1)
000E11B0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000E11B4 7000                       		moveq	#0,d0
000E11B6 722C                       		moveq	#$2C,d1
000E11B8                            
000E11B8                            loc_20A8:
000E11B8 3400                       		move.w	d0,d2
000E11BA 0242 001E                  		andi.w	#$1E,d2
000E11BE 6600                       		bne.s	loc_20B2
000E11C0 5440                       		addq.w	#2,d0
000E11C2                            
000E11C2                            loc_20B2:
000E11C2 3390 0000                  		move.w	(a0),(a1,d0.w)
000E11C6 5440                       		addq.w	#2,d0
000E11C8 51C9 FFEE                  		dbf	d1,loc_20A8
000E11CC                            
000E11CC                            loc_20BC:
000E11CC 7001                       		moveq	#1,d0
000E11CE 4E75                       		rts	
000E11D0                            ; End of function PalCycle_Sega
000E11D0                            
000E11D0                            ; ===========================================================================
000E11D0                            
000E11D0                            Pal_Sega1:	incbin	pallet\sega1.bin
000E11DC                            Pal_Sega2:	incbin	pallet\sega2.bin		
000E120C                            
000E120C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000E166E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000E1766                            ;TitleScreen:
000E1766                               include "_inc/TitleScreen.asm"
000E1766                            TitleScreen:				; XREF: GameModeArray
000E1766 103C 00E4                  		move.b	#$E4,d0
000E176A 4EB8 270E                  		jsr	PlaySound_Special ; stop music
000E176E 4EB8 292C                  		jsr	ClearPLC
000E1772 4EB8 04FE                  		jsr	Pal_FadeFrom
000E1776 46FC 2700                  		move	#$2700,sr
000E177A 4EB9 0000 0000             		jsr	SoundDriverLoad
000E1780 4DF9 00C0 0004             		lea	(VDP_CTRL).l,a6
000E1786 3CBC 8004                  		move.w	#$8004,(a6)
000E178A 3CBC 8230                  		move.w	#$8230,(a6)
000E178E 3CBC 8C00                  		move.w	#$8C00,(a6)		; H res 32 cells, no interlace, S/H enabled
000E1792 3CBC 9001                  		move.w	#$9001,(a6)
000E1796 3CBC 9200                  		move.w	#$9200,(a6)
000E179A 3CBC 8B03                  		move.w	#$8B03,(a6)
000E179E 3CBC 8720                  		move.w	#$8720,(a6)
000E17A2 4238 F64E                  		clr.b	($FFFFF64E).w
000E17A6 4EB8 2626                  		jsr	ClearScreen
000E17AA 43F8 D000                  		lea	($FFFFD000).w,a1
000E17AE 7000                       		moveq	#0,d0
000E17B0 323C 07FF                  		move.w	#$7FF,d1
000E17B4                            
000E17B4                            Title_ClrObjRam:
000E17B4 22C0                       		move.l	d0,(a1)+
000E17B6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000E17BA                            
000E17BA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,(VDP_CTRL).l
000E17C4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000E17CA 4EB8 277E                  		jsr	NemDec
000E17CE 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,(VDP_CTRL).l
000E17D8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000E17DE 4EB8 277E                  		jsr	NemDec
000E17E2 43F9 00FF 0000             		lea	($FF0000).l,a1
000E17E8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000E17EE 303C 0000                  		move.w	#0,d0
000E17F2 4EB8 2A72                  		jsr	EniDec
000E17F6 43F9 00FF 0000             		lea	($FF0000).l,a1
000E17FC 203C 4000 0003             		move.l	#$40000003,d0
000E1802 7227                       		moveq	#$27,d1
000E1804 741B                       		moveq	#$1B,d2
000E1806 4EB8 275E                  		jsr	ShowVDPGraphics
000E180A 43F8 FB80                  		lea	($FFFFFB80).w,a1
000E180E 7000                       		moveq	#0,d0
000E1810 323C 001F                  		move.w	#$1F,d1
000E1814                            
000E1814                            Title_ClrPallet:
000E1814 22C0                       		move.l	d0,(a1)+
000E1816 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000E181A                            
000E181A 7003                       		moveq	#3,d0		; load Sonic's pallet
000E181C 4EB8 06B8                  		jsr	PalLoad1
000E1820                            ;		move.b	#$4A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000E1820 4EB8 3F34                  		jsr	ObjectsLoad
000E1824 4EB8 40DC                  		jsr	BuildSprites
000E1828 4EB8 057C                  		jsr	Pal_FadeTo
000E182C 46FC 2700                  		move	#$2700,sr
000E1830 23FC 4000 0001 00C0 0004   		move.l	#$40000001,(VDP_CTRL).l
000E183A 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000E1840 4EB8 277E                  		jsr	NemDec
000E1844 23FC 6000 0001 00C0 0004   		move.l	#$60000001,(VDP_CTRL).l
000E184E 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000E1854 4EB8 277E                  		jsr	NemDec
000E1862 41F9 0000 0000             		lea	(Art_Banner).l,a0
000E1868 4EB8 277E                  	    jsr	NemDec
000E186C                            		
000E186C 4DF9 00C0 0000             		lea	(VDP_DATA).l,a6
000E1872 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000E187A 4BF9 0000 0000             		lea	(Art_Text).l,a5
000E1880 323C 028F                  		move.w	#$28F,d1
000E1884                            
000E1884                            Title_LoadText:
000E1884 3C9D                       		move.w	(a5)+,(a6)
000E1886 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000E188A                            
000E188A 13FC 0000 00FF 158E        		move.b	#0,(v_last_checkpoint).l ; clear lamppost counter
000E1892 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000E1898 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000E189E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; Unused
000E18A4 33FC 0000 00FF 1506        		move.w	#0,(v_zone).l ; set level to	GHZ (00)
000E18AC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000E18B2 4EB8 2CA2                  		jsr	LevelSizeLoad
000E18B6                            ;		jsr	DeformBgLayer
000E18B6 43F8 B000                  		lea	($FFFFB000).w,a1
000E18BA 41F9 0007 3986             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000E18C0 303C 0000                  		move.w	#0,d0
000E18C4 4EB8 2A72                  		jsr	EniDec
000E18C8 41F9 0001 1236             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000E18CE 43F9 00FF 0000             		lea	($FF0000).l,a1
000E18D4 4EB8 2BF0                  		jsr	KosDec
000E18D8 4EB8 3B5C                  		jsr	LevelLayoutLoad
000E18DC 4EB9 0000 0000             	    jsr   LoadMenuArt
000E18E2 4EB8 04FE                  		jsr	Pal_FadeFrom
000E18E6 46FC 2700                  		move	#$2700,sr
000E18EA 4EB8 2626                  		jsr	ClearScreen
000E18EE 4BF9 00C0 0004             		lea	(VDP_CTRL).l,a5
000E18F4 4DF9 00C0 0000             		lea	(VDP_DATA).l,a6
000E18FA 47F8 F708                  		lea	($FFFFF708).w,a3
000E18FE 49F8 A440                  		lea	($FFFFA440).w,a4
000E1902 343C 6000                  		move.w	#$6000,d2
000E1906 4EB8 399A                  		jsr	LoadTilesFromStart2
000E190A                            
000E190A 43F9 00FF 0000                     lea	($FF0000).l,a1
000E1910 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000E1916 303C 0200                  		move.w	#$200,d0
000E191A 4EB8 2A72                  		jsr	EniDec
000E191E                            
000E191E 43F9 00FF 0000             		lea	($FF0000).l,a1
000E1924 203C 4206 0003             		move.l	#$42060003,d0
000E192A 7219                       		moveq	#$1A-1,d1
000E192C 741E                       	    moveq	#$1F-1,d2
000E192E 4EB8 275E                  		jsr	ShowVDPGraphics
000E1932                            ;		move.l	#$40000000,(VDP_CTRL).l
000E1932                            ;		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000E1932                            ;		jsr	NemDec
000E1932 7006                       		moveq	#6,d0		; load title screen pallet
000E1934 4EB8 06B8                  		jsr	PalLoad1
000E1938                                ; Tittle Screen Music Not Here Anymore
000E1938 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000E193E 31FC 0178 F614             		move.w	#$178,(v_vint_timer).w ; run title	screen for $178	frames
000E1944 43F8 D080                  		lea	($FFFFD080).w,a1
000E1948 7000                       		moveq	#0,d0
000E194A 323C 0007                  		move.w	#7,d1
000E194E                            
000E194E                            Title_ClrObjRam2:
000E194E 22C0                       		move.l	d0,(a1)+
000E1950 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000E1954                            
000E1954 11FC 0041 D000             		move.b	#$41,(v_player).w ; load big Sonic object
000E195A                            ;		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000E195A 11FC 0041 D400             		move.b	#$41,(v_obj_sonicarm).w 
000E1960 11FC 0001 D428             		move.b  #1,(v_obj_sonicarm+oSubtype)
000E1966 11FC 0041 D440             		move.b	#$41,(v_obj_banner).w 
000E196C 11FC 0002 D468             		move.b  #2,(v_obj_banner+oSubtype)
000E1972 11FC 004A D480             		move.b	#$4A,(v_obj_titlemenu).w 
000E1978                            ;		move.b	#3,($FFFFD0DA).w
000E1978                            ;		move.b	#$F,($FFFFD100).w
000E1978                            ;		move.b	#2,($FFFFD11A).w
000E1978 4EB8 3F34                  		jsr	ObjectsLoad
000E197C                            ;		jsr	DeformBgLayer
000E197C 4EB8 40DC                  		jsr	BuildSprites
000E1980                            ;		moveq	#$13,d0
000E1980                            ;		jsr	LoadPLC2
000E1980 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000E1986 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000E198C 3038 F60C                  		move.w	($FFFFF60C).w,d0
000E1990 0000 0040                  		ori.b	#$40,d0
000E1994 33C0 00C0 0004             		move.w	d0,(VDP_CTRL).l
000E199A 4EB8 057C                  		jsr	Pal_FadeTo
000E199E                            
000E199E                            loc_317C:
000E199E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000E19A4 4EB8 0A9E                  		jsr	DelayProgram
000E19A8 4EB8 3F34                  		jsr	ObjectsLoad
000E19AC                            ;		jsr	DeformBgLayer   
000E19AC 0C39 0001 00FF 0F1E                cmpi.b #1,(v_title_final_state).l
000E19B4 6700                       		beq.s  .skip_pal
000E19B6 4EB9 0000 0000                     jsr	Pal_Title
000E19BC                              .skip_pal:
000E19BC 4EB8 40DC                  		jsr	BuildSprites
000E19C0 4EB8 293A                  		jsr	RunPLC_RAM
000E19C4 3038 D008                  		move.w	($FFFFD008).w,d0
000E19C8                            ;		addq.w	#2,d0
000E19C8                            ;		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000E19C8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000E19CC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000E19CE 11FC 0000 F600             		move.b	#id_Sega,($FFFFF600).w ; go to Sega screen
000E19D4 4E75                       		rts	
000E19D6                            ; ===========================================================================
000E19D6                            
000E19D6                            Title_ChkRegion:
000E19D6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000E19DA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000E19DC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000E19E2 6000                       		bra.s	Title_EnterCheat
000E19E4                            ; ===========================================================================
000E19E4                            
000E19E4                            Title_RegionJ:				; XREF: Title_ChkRegion
000E19E4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000E19EA                            
000E19EA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000E19EA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000E19EE D0C0                       		adda.w	d0,a0
000E19F0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000E19F4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000E19F8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000E19FA 6600                       		bne.s	loc_3210	; if not, branch
000E19FC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000E1A00 4A00                       		tst.b	d0
000E1A02 6600                       		bne.s	Title_CountC
000E1A04 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000E1A08 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000E1A0C E249                       		lsr.w	#1,d1
000E1A0E 0241 0003                  		andi.w	#3,d1
000E1A12 6700                       		beq.s	Title_PlayRing
000E1A14 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000E1A18 6A00                       		bpl.s	Title_PlayRing
000E1A1A 7201                       		moveq	#1,d1
000E1A1C 1181 1001                  		move.b	d1,1(a0,d1.w)
000E1A20                            
000E1A20                            Title_PlayRing:
000E1A20 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000E1A26 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000E1A2A 4EB8 270E                  		jsr	PlaySound_Special
000E1A2E 6000                       		bra.s	Title_CountC
000E1A30                            ; ===========================================================================
000E1A30                            
000E1A30                            loc_3210:				; XREF: Title_EnterCheat
000E1A30 4A00                       		tst.b	d0
000E1A32 6700                       		beq.s	Title_CountC
000E1A34 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000E1A3A 6700                       		beq.s	Title_CountC
000E1A3C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000E1A42                            
000E1A42                            Title_CountC:
000E1A42 1038 F605                  		move.b	($FFFFF605).w,d0
000E1A46 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000E1A4A 6700                       		beq.s	loc_3230	; if not, branch
000E1A4C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000E1A50                            
000E1A50                            loc_3230:
000E1A50                            ;		tst.w	(v_vint_timer).w
000E1A50                            ;		beq.w	Demo
000E1A50 0238 0080 F605             		andi.b	#button_start_mask,($FFFFF605).w ; check if Start is pressed
000E1A56 6700 FF46                  		beq.w	loc_317C	; if not, branch
000E1A5A                            
000E1A5A                            Title_ChkLevSel:
000E1A5A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000E1A5E 6700 0000                  		beq.w	PlayLevel	; if not, play level
000E1A62 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000E1A68 6700 0000                  		beq.w	PlayLevel	; if not, play level
000E1A6C 7002                       		moveq	#2,d0
000E1A6E 4EB8 06D4                  		jsr	PalLoad2	; load level select pallet
000E1A72 43F8 CC00                  		lea	($FFFFCC00).w,a1
000E1A76 7000                       		moveq	#0,d0
000E1A78 323C 00DF                  		move.w	#$DF,d1
000E1A7C                            
000E1A7C                            Title_ClrScroll:
000E1A7C 22C0                       		move.l	d0,(a1)+
000E1A7E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000E1A82                            
000E1A82 21C0 F616                  		move.l	d0,($FFFFF616).w
000E1A86 46FC 2700                  		move	#$2700,sr
000E1A8A 4DF9 00C0 0000             		lea	(VDP_DATA).l,a6
000E1A90 23FC 6000 0003 00C0 0004   		move.l	#$60000003,(VDP_CTRL).l
000E1A9A 323C 03FF                  		move.w	#$3FF,d1
000E1A9E                            
000E1A9E                            Title_ClrVram:
000E1A9E 2C80                       		move.l	d0,(a6)
000E1AA0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000E1AA4                            
000E1AA4 4EB9 0000 0000             		jsr	LevSelTextLoad
000E1AAA                            
000E1AAA                            ; ---------------------------------------------------------------------------
000E1AAA                            ; Level	Select
000E1AAA                            ; ---------------------------------------------------------------------------
000E1AAA                            
000E1AAA                            LevelSelect:
000E1AAA 11FC 0004 F62A             		move.b	#$04,($FFFFF62A).w
000E1AB0 4EB8 0A9E                  		jsr	DelayProgram
000E1AB4 4EB9 0000 0000             		jsr	LevSelControls
000E1ABA 4EB8 293A                  		jsr	RunPLC_RAM
000E1ABE 4AB8 F680                  		tst.l	($FFFFF680).w
000E1AC2 66E6                       		bne.s	LevelSelect
000E1AC4 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000E1ACA 67DE                       		beq.s	LevelSelect	; if not, branch
000E1ACC 3038 FF82                  		move.w	($FFFFFF82).w,d0
000E1AD0 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000E1AD4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000E1AD6 3038 FF84                  		move.w	($FFFFFF84).w,d0
000E1ADA 0640 0080                  		addi.w	#$80,d0
000E1ADE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000E1AE2 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000E1AE4 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000E1AE8 6700                       		beq.s	LevSel_Ending	; if yes, branch
000E1AEA 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000E1AEE 6700                       		beq.s	LevSel_Credits	; if yes, branch
000E1AF0                            
000E1AF0                            LevSel_NoCheat:
000E1AF0 0C40 0095                  		cmpi.w	#$95,d0		; is sound $80-$94 being played?
000E1AF4 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000E1AF6 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000E1AFA 65AE                       		bcs.s	LevelSelect	; if yes, branch
000E1AFC                            
000E1AFC                            LevSel_PlaySnd:
000E1AFC 4EB8 270E                  		jsr	PlaySound_Special
000E1B00 60A8                       		bra.s	LevelSelect
000E1B02                            ; ===========================================================================
000E1B02                            
000E1B02                            LevSel_Ending:				; XREF: LevelSelect
000E1B02 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000E1B08 33FC 0600 00FF 1506        		move.w	#$600,(v_zone).l ; set level	to 0600	(Ending)
000E1B10 4E75                       		rts	
000E1B12                            ; ===========================================================================
000E1B12                            
000E1B12                            LevSel_Credits:				; XREF: LevelSelect
000E1B12 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000E1B18 103C 0091                  		move.b	#$91,d0
000E1B1C 4EB8 270E                  		jsr	PlaySound_Special ; play credits music
000E1B20 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000E1B26 4E75                       		rts	
000E1B28                            ; ===========================================================================
000E1B28                            
000E1B28                            LevSel_Level_SS:			; XREF: LevelSelect
000E1B28 D040                       		add.w	d0,d0
000E1B2A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000E1B2E 6B00 FF7A                  		bmi.w	LevelSelect
000E1B32 0C40 0700                  		cmpi.w	#id_ST*$100,d0	; check	if level is 0700 (Special Stage)
000E1B36 6600 0000                  		bne.w	CheckOther	; if not, branch
000E1B3A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000E1B40 4279 00FF 1506             		clr.w	(v_zone).l	; clear	level
000E1B46 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000E1B4C 7000                       		moveq	#0,d0
000E1B4E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000E1B52 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000E1B56 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000E1B5A 4E75                       		rts	
000E1B5C                            
000E1B5C                            ; ===========================================================================
000E1B5C                            
000E1B5C                            LevSel_Level:				; XREF: LevSel_Level_SS
000E1B5C 0240 3FFF                  		andi.w	#$3FFF,d0
000E1B60 33C0 00FF 1506             		move.w	d0,(v_zone).l ; set level number
000E1B66                            
000E1B66                            PlayLevel:				; XREF: ROM:00003246j ...
000E1B66                                    ;move.b  #1,(Title_Press_Start).l
000E1B66                            		;jmp (loc_317C).l
000E1B66                            		;rts
000E1B66 11FC 0000 F600             		move.b	#id_Level,($FFFFF600).w ; set	screen mode to $0C (level)
000E1B6C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000E1B72 7000                       		moveq	#0,d0
000E1B74 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000E1B78 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000E1B7C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000E1B80 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000E1B84 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000E1B88 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000E1B8C 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000E1B90 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000E1B94 103C 00E0                  		move.b	#$E0,d0
000E1B98 4EB8 270E                  		jsr	PlaySound_Special ; fade out music
000E1B9C 4E75                       		rts	
000E1B9E                            
000E1B9E                            PlayLevel2:
000E1B9E 11FC 0000 F600             		move.b	#id_SoundTest,($FFFFF600).w			; set screen mode to sound test $20
000E1BA4 4E75                       		rts						; return
000E1BA6                            
000E1BA6                            ; ===========================================================================
000E1BA6                            ; ---------------------------------------------------------------------------
000E1BA6                            ; Level	select - level pointers
000E1BA6                            ; ---------------------------------------------------------------------------
000E1BA6                            LSelectPointers:
000E1BA6 0000                       		dc.b id_GHZ, 0
000E1BA8 0001                       		dc.b id_GHZ, 1
000E1BAA 0002                       		dc.b id_GHZ, 2
000E1BAC 0100                       		dc.b id_LZ, 0
000E1BAE 0101                       		dc.b id_LZ, 1
000E1BB0 0102                       		dc.b id_LZ, 2
000E1BB2 0200                       		dc.b id_MZ, 0
000E1BB4 0201                       		dc.b id_MZ, 1
000E1BB6 0202                       		dc.b id_MZ, 2
000E1BB8 0300                       		dc.b id_SLZ, 0
000E1BBA 0301                       		dc.b id_SLZ, 1
000E1BBC 0302                       		dc.b id_SLZ, 2
000E1BBE 0400                       		dc.b id_SYZ, 0
000E1BC0 0401                       		dc.b id_SYZ, 1
000E1BC2 0402                       		dc.b id_SYZ, 2
000E1BC4 0500                       		dc.b id_SBZ, 0
000E1BC6 0501                       		dc.b id_SBZ, 1
000E1BC8 0103                       		dc.b id_LZ, 3		; Scrap Brain Zone 3
000E1BCA 0502                       		dc.b id_SBZ, 2		; Final Zone
000E1BCC 0700                       		dc.b id_ST, 0		; Special Stage
000E1BCE 8000                       		dc.w $8000		; Sound Test
000E1BD0                            		even
000E1BD0                            CheckOther:
000E1BD0 0C40 0100                          cmpi.w	#id_LZ*$100,d0	; check	if level is 0700 (Special Stage)
000E1BD4 6600 FF86                  		bne.w	LevSel_Level	; if not, branch
000E1BD8 33FC 0000 00FF 1506        		move.w  #id_GHZ*$100,(v_zone).l
000E1BE0 13FC 0000 00FF 152E        		move.b  #0,(v_time_zone).l
000E1BE8 6000 FF72                  		bra.w   LevSel_Level		
000E1BEC                            ; ---------------------------------------------------------------------------
000E1BEC                            ; Level	select codes
000E1BEC                            ; ---------------------------------------------------------------------------
000E1BEC                            LevelSelectCode_J:
000E1BEC                            		incbin	misc\ls_jcode.bin
000E1BF2                            		even
000E1BF2                            
000E1BF2                            LevelSelectCode_US:
000E1BF2                            		incbin	misc\ls_ucode.bin
000E1BF8                            		even
000E1BF8                            ; ===========================================================================
000E1BF8                            
000E1BF8                            ; ---------------------------------------------------------------------------
000E1BF8                            ; Demo mode
000E1BF8                            ; ---------------------------------------------------------------------------
000E1BF8                            
000E1BF8                            Demo:					; XREF: TitleScreen
000E1BF8 31FC 001E F614             		move.w	#$1E,(v_vint_timer).w
000E1BFE                            
000E1BFE                            loc_33B6:				; XREF: loc_33E4
000E1BFE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000E1C04 4EB8 0A9E                  		jsr	DelayProgram
000E1C08                            ;		jsr	DeformBgLayer
000E1C08 4EB8 02CC                  		jsr	PalCycle_Load
000E1C0C 4EB8 293A                  		jsr	RunPLC_RAM
000E1C10 3038 D008                  		move.w	($FFFFD008).w,d0
000E1C14 5440                       		addq.w	#2,d0
000E1C16 31C0 D008                  		move.w	d0,($FFFFD008).w
000E1C1A 0C40 1C00                  		cmpi.w	#$1C00,d0
000E1C1E 6500                       		bcs.s	loc_33E4
000E1C20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000E1C26 4E75                       		rts	
000E1C28                            ; ===========================================================================
000E1C28                            
000E1C28                            loc_33E4:				; XREF: Demo
000E1C28 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000E1C2E 6600 FE2A                  		bne.w	Title_ChkLevSel	; if yes, branch
000E1C32 4A78 F614                  		tst.w	(v_vint_timer).w
000E1C36 6600 FFC6                  		bne.w	loc_33B6
000E1C3A 103C 00E0                  		move.b	#$E0,d0
000E1C3E 4EB8 270E                  		jsr	PlaySound_Special ; fade out music
000E1C42 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000E1C46 0240 0007                  		andi.w	#7,d0
000E1C4A D040                       		add.w	d0,d0
000E1C4C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000E1C50 33C0 00FF 1506             		move.w	d0,(v_zone).l
000E1C56 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000E1C5A 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000E1C60 6500                       		bcs.s	loc_3422	; if yes, branch
000E1C62 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000E1C68                            
000E1C68                            loc_3422:
000E1C68 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000E1C6E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000E1C74 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000E1C78 6600                       		bne.s	Demo_Level	; if not, branch
000E1C7A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000E1C80 4279 00FF 1506             		clr.w	(v_zone).l	; clear	level number
000E1C86 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000E1C8A                            
000E1C8A                            Demo_Level:
000E1C8A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000E1C90 7000                       		moveq	#0,d0
000E1C92 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000E1C96 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000E1C9A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000E1C9E 4E75                       		rts	
000E1CA0                            ; ===========================================================================
000E1CA0                            ; ---------------------------------------------------------------------------
000E1CA0                            ; Levels used in demos
000E1CA0                            ; ---------------------------------------------------------------------------
000E1CA0                            Demo_Levels:	incbin	misc\dm_ord1.bin
000E1CA8                            		even
000E1CA8                            
000E1CA8                            ; ---------------------------------------------------------------------------
000E1CA8                            ; Subroutine to	change what you're selecting in the level select
000E1CA8                            ; ---------------------------------------------------------------------------
000E1CA8                            
000E1CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1CA8                            
000E1CA8                            
000E1CA8                            LevSelControls:				; XREF: LevelSelect
000E1CA8 1238 F605                  		move.b	($FFFFF605).w,d1
000E1CAC 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000E1CB0 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000E1CB2 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000E1CB6 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000E1CB8                            
000E1CB8                            LevSel_UpDown:
000E1CB8 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000E1CBE 1238 F604                  		move.b	($FFFFF604).w,d1
000E1CC2 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000E1CC6 6700                       		beq.s	LevSel_SndTest	; if not, branch
000E1CC8 3038 FF82                  		move.w	($FFFFFF82).w,d0
000E1CCC 0801 0000                  		btst	#0,d1		; is up	pressed?
000E1CD0 6700                       		beq.s	LevSel_Down	; if not, branch
000E1CD2 5340                       		subq.w	#1,d0		; move up 1 selection
000E1CD4 6400                       		bcc.s	LevSel_Down
000E1CD6 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
000E1CD8                            
000E1CD8                            LevSel_Down:
000E1CD8 0801 0001                  		btst	#1,d1		; is down pressed?
000E1CDC 6700                       		beq.s	LevSel_Refresh	; if not, branch
000E1CDE 5240                       		addq.w	#1,d0		; move down 1 selection
000E1CE0 0C40 0015                  		cmpi.w	#$15,d0
000E1CE4 6500                       		bcs.s	LevSel_Refresh
000E1CE6 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000E1CE8                            
000E1CE8                            LevSel_Refresh:
000E1CE8 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000E1CEC 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
000E1CF2 4E75                       		rts	
000E1CF4                            ; ===========================================================================
000E1CF4                            
000E1CF4                            LevSel_SndTest:				; XREF: LevSelControls
000E1CF4 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000E1CFA 6600                       		bne.s	LevSel_NoMove	; if not, branch
000E1CFC 1238 F605                  		move.b	($FFFFF605).w,d1
000E1D00 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000E1D04 6700                       		beq.s	LevSel_NoMove	; if not, branch
000E1D06 3038 FF84                  		move.w	($FFFFFF84).w,d0
000E1D0A 0801 0002                  		btst	#2,d1		; is left pressed?
000E1D0E 6700                       		beq.s	LevSel_Right	; if not, branch
000E1D10 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000E1D12 6400                       		bcc.s	LevSel_Right
000E1D14 7064                       		moveq	#$64,d0		; if sound test	moves below 0, set to $4F
000E1D16                            
000E1D16                            LevSel_Right:
000E1D16 0801 0003                  		btst	#3,d1		; is right pressed?
000E1D1A 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000E1D1C 5240                       		addq.w	#1,d0		; add 1	to sound test
000E1D1E 0C40 0065                  		cmpi.w	#$65,d0
000E1D22 6500                       		bcs.s	LevSel_Refresh2
000E1D24 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000E1D26                            
000E1D26                            LevSel_Refresh2:
000E1D26 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000E1D2A 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
000E1D30                            
000E1D30                            LevSel_NoMove:
000E1D30 4E75                       		rts	
000E1D32                            ; End of function LevSelControls
000E1D32                            
000E1D32                            ; ---------------------------------------------------------------------------
000E1D32                            ; Subroutine to load level select text
000E1D32                            ; ---------------------------------------------------------------------------
000E1D32                            
000E1D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1D32                            
000E1D32                            
000E1D32                            LevSelTextLoad:				; XREF: TitleScreen
000E1D32 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000E1D38 4DF9 00C0 0000             		lea	(VDP_DATA).l,a6
000E1D3E 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000E1D44 363C E680                  		move.w	#$E680,d3	; VRAM setting
000E1D48 7214                       		moveq	#$14,d1		; number of lines of text
000E1D4A                            
000E1D4A                            loc_34FE:				; XREF: LevSelTextLoad+26j
000E1D4A 2D44 0004                  		move.l	d4,4(a6)
000E1D4E 4EB9 0000 0000             		jsr	LevSel_ChgLine
000E1D54 0684 0080 0000             		addi.l	#$800000,d4
000E1D5A 51C9 FFEE                  		dbf	d1,loc_34FE
000E1D5E 7000                       		moveq	#0,d0
000E1D60 3038 FF82                  		move.w	($FFFFFF82).w,d0
000E1D64 3200                       		move.w	d0,d1
000E1D66 283C 6210 0003             		move.l	#$62100003,d4
000E1D6C EF48                       		lsl.w	#7,d0
000E1D6E 4840                       		swap	d0
000E1D70 D880                       		add.l	d0,d4
000E1D72 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000E1D78 E749                       		lsl.w	#3,d1
000E1D7A 3001                       		move.w	d1,d0
000E1D7C D241                       		add.w	d1,d1
000E1D7E D240                       		add.w	d0,d1
000E1D80 D2C1                       		adda.w	d1,a1
000E1D82 363C C680                  		move.w	#$C680,d3
000E1D86 2D44 0004                  		move.l	d4,4(a6)
000E1D8A 4EB9 0000 0000             		jsr	LevSel_ChgLine
000E1D90 363C E680                  		move.w	#$E680,d3
000E1D94 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000E1D9A 6600                       		bne.s	loc_3550
000E1D9C 363C C680                  		move.w	#$C680,d3
000E1DA0                            
000E1DA0                            loc_3550:
000E1DA0 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,(VDP_CTRL).l ; screen	position (sound	test)
000E1DAA 3038 FF84                  		move.w	($FFFFFF84).w,d0
000E1DAE 0640 0080                  		addi.w	#$80,d0
000E1DB2                            
000E1DB2                            DRAWNUMBER:
000E1DB2 1400                       		move.b	d0,d2
000E1DB4 E808                       		lsr.b	#4,d0
000E1DB6 4EB9 0000 0000             		jsr	LevSel_ChgSnd
000E1DBC 1002                       		move.b	d2,d0
000E1DBE 4EB9 0000 0000             		jsr	LevSel_ChgSnd
000E1DC4 4E75                       		rts	
000E1DC6                            ; End of function LevSelTextLoad
000E1DC6                            
000E1DC6                            
000E1DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1DC6                            
000E1DC6                            
000E1DC6                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000E1DC6 0240 000F                  		andi.w	#$F,d0
000E1DCA 0C00 000A                  		cmpi.b	#$A,d0
000E1DCE 6500                       		bcs.s	loc_3580
000E1DD0 5E00                       		addi.b	#7,d0
000E1DD2                            
000E1DD2                            loc_3580:
000E1DD2 D043                       		add.w	d3,d0
000E1DD4 3C80                       		move.w	d0,(a6)
000E1DD6 4E75                       		rts	
000E1DD8                            ; End of function LevSel_ChgSnd
000E1DD8                            
000E1DD8                            
000E1DD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1DD8                            
000E1DD8                            
000E1DD8                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000E1DD8 7417                       		moveq	#$17,d2		; number of characters per line
000E1DDA                            
000E1DDA                            loc_3588:
000E1DDA 7000                       		moveq	#0,d0
000E1DDC 1019                       		move.b	(a1)+,d0
000E1DDE 6A00                       		bpl.s	loc_3598
000E1DE0 3CBC 0000                  		move.w	#0,(a6)
000E1DE4 51CA FFF4                  		dbf	d2,loc_3588
000E1DE8 4E75                       		rts	
000E1DEA                            ; ===========================================================================
000E1DEA                            
000E1DEA                            loc_3598:				; XREF: LevSel_ChgLine
000E1DEA D043                       		add.w	d3,d0
000E1DEC 3C80                       		move.w	d0,(a6)
000E1DEE 51CA FFEA                  		dbf	d2,loc_3588
000E1DF2 4E75                       		rts	
000E1DF4                            ; End of function LevSel_ChgLine
000E1DF4                            
000E1DF4                            ; ===========================================================================
000E1DF4                            ; ---------------------------------------------------------------------------
000E1DF4                            ; Level	select menu text
000E1DF4                            ; ---------------------------------------------------------------------------
000E1DF4                            LevelMenuText:	incbin	misc\menutext.bin
000E1FEC                            		even
000E1FEC                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000E20B0                            		even
000E20B0                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000E2C5A                            		even
000E2C5A                            art_water:
000E2C5A                            art_mountains:
000E2C5A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000E4E6C 00                         		even
000E4E6C                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000E4EA0                            		even
000E4EA0                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000E4F5E                            		even
000E4F5E                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000E5406                            		even
000E5406                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000E5A04                            		even
000E5A04                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
000E5F24                            		even						
000E5F24                            
000E5F24                            ; -------------------------------------------------------------------------
000E5F24                            
000E5F24                            ObjTitleSonic:
000E5F24 0C28 0001 0028                     cmpi.b  #1,oSubtype(a0)
000E5F2A 6700                       		beq.s   ObjTitleArm
000E5F2C 0C28 0002 0028             		cmpi.b  #2,oSubtype(a0)
000E5F32 6700 0000                  		beq.w   ObjTitleBanner
000E5F36 7000                       		moveq	#0,d0
000E5F38 1028 0024                  		move.b	oRoutine(a0),d0
000E5F3C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
000E5F40 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
000E5F44                            ; ===========================================================================
000E5F44                            Obj0E_Index:	
000E5F44 0000                               dc.w Obj0E_Main-Obj0E_Index
000E5F46 0000                       		dc.w Obj0E_Delay-Obj0E_Index
000E5F48 0000                       		dc.w Obj0E_Move-Obj0E_Index
000E5F4A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
000E5F4C                            ; ===========================================================================
000E5F4C                            
000E5F4C                            Obj0E_Main:				; XREF: Obj0E_Index
000E5F4C 5428 0024                  		addq.b	#2,oRoutine(a0)
000E5F50 317C 00DC 0008             		move.w	#$DC,oX(a0)
000E5F56 317C 0090 000A             		move.w	#$90,oYScr(a0)
000E5F5C 217C 0000 0000 0004        		move.l	#Map_obj0E,oMap(a0)
000E5F64 317C 6300 0002             		move.w	#$6300,oTile(a0)
000E5F6A 117C 0001 0018             		move.b	#1,oPriority(a0)
000E5F70                            ;		move.b	#29,oVar1F(a0)	; set time delay to 0.5	seconds
000E5F70 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000E5F76 4EB8 61F4                  		jsr	AnimateObject
000E5F7A                            
000E5F7A                            Obj0E_Delay:				; XREF: Obj0E_Index
000E5F7A                            ;		subq.b	#1,oVar1F(a0)	; subtract 1 from time delay
000E5F7A                            ;		bpl.s	Obj0E_Wait	; if time remains, branch
000E5F7A 5428 0024                  		addq.b	#2,oRoutine(a0)	; go to	next routine
000E5F7E 4EF8 4012                  		jmp	DrawObject
000E5F82                            ; ===========================================================================
000E5F82                            
000E5F82                            Obj0E_Wait:				; XREF: Obj0E_Delay
000E5F82 4E75                       		rts	
000E5F84                            ; ===========================================================================
000E5F84                            
000E5F84                            Obj0E_Move:				; XREF: Obj0E_Index
000E5F84                            ;		subq.w	#8,oYScr(a0)
000E5F84                            ;		cmpi.w	#$96,oYScr(a0)
000E5F84                            ;		bne.s	Obj0E_Display
000E5F84 5428 0024                  		addq.b	#2,oRoutine(a0)
000E5F88                            
000E5F88                            Obj0E_Display:
000E5F88 103C 0083                          move.b	#$83,d0		; play title screen music
000E5F8C 4EB8 270E                  		jsr	PlaySound_Special
000E5F90 4EF8 4012                  		jmp	DrawObject
000E5F94                            ; ===========================================================================
000E5F94 4E75                       		rts	
000E5F96                            ; ===========================================================================
000E5F96                            
000E5F96                            Obj0E_Animate:				; XREF: Obj0E_Index
000E5F96 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000E5F9C 4EB8 61F4                  		jsr	AnimateObject
000E5FA0 4EF8 4012                  		jmp	DrawObject
000E5FA4                            ; ===========================================================================
000E5FA4 4E75                       		rts	
000E5FA6                            
000E5FA6                            ObjTitleArm:
000E5FA6 7000                       		moveq	#0,d0
000E5FA8 1028 0024                  		move.b	oRoutine(a0),d0
000E5FAC 323B 0000                  		move.w	ObjTitleArm_Index(pc,d0.w),d1
000E5FB0 4EFB 1000                  		jmp	ObjTitleArm_Index(pc,d1.w)
000E5FB4                            ; ===========================================================================
000E5FB4                            ObjTitleArm_Index:	
000E5FB4 0000                               dc.w ObjTitleArm_Main-ObjTitleArm_Index
000E5FB6 0000                       		dc.w ObjTitleArm_Delay-ObjTitleArm_Index
000E5FB8 0000                       		dc.w ObjTitleArm_Move-ObjTitleArm_Index
000E5FBA 0000                       		dc.w ObjTitleArm_Animate-ObjTitleArm_Index
000E5FBC                            ; ===========================================================================
000E5FBC                            
000E5FBC                            ObjTitleArm_Main:				; XREF: Obj0E_Index
000E5FBC 5428 0024                  		addq.b	#2,oRoutine(a0)
000E5FC0 317C 010C 0008             		move.w	#$10C,oX(a0)
000E5FC6 317C 00E8 000A             		move.w	#$E8,oYScr(a0)
000E5FCC 217C 0000 0000 0004        		move.l	#Map_obj0E,oMap(a0)
000E5FD4 317C 6300 0002             		move.w	#$6300,oTile(a0)
000E5FDA 117C 0000 0018             		move.b	#0,oPriority(a0)
000E5FE0 117C 0032 001F             		move.b	#50,oVar1F(a0)	; set time delay to 0.5	seconds
000E5FE6 117C 0001 001C             		move.b #1,oAnim(a0)
000E5FEC 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000E5FF2 4EB8 61F4                  		jsr	AnimateObject
000E5FF6                            
000E5FF6                            ObjTitleArm_Delay:				; XREF: Obj0E_Index
000E5FF6 5328 001F                  		subq.b	#1,oVar1F(a0)	; subtract 1 from time delay
000E5FFA 6A00                       		bpl.s	ObjTitleArm_Wait	; if time remains, branch
000E5FFC 5428 0024                  		addq.b	#2,oRoutine(a0)	; go to	next routine
000E6000 4EF8 4012                  		jmp	DrawObject
000E6004                            ; ===========================================================================
000E6004                            
000E6004                            ObjTitleArm_Wait:				; XREF: Obj0E_Delay
000E6004 4E75                       		rts	
000E6006                            ; ===========================================================================
000E6006                            
000E6006                            ObjTitleArm_Move:				; XREF: Obj0E_Index
000E6006                            ;		subq.w	#8,oYScr(a0)
000E6006                            ;		cmpi.w	#$96,oYScr(a0)
000E6006                            ;		bne.s	ObjTitleArm_Display
000E6006 5428 0024                  		addq.b	#2,oRoutine(a0)
000E600A                            
000E600A                            ObjTitleArm_Display:
000E600A 4EF8 4012                  		jmp	DrawObject
000E600E                            ; ===========================================================================
000E600E 4E75                       		rts	
000E6010                            ; ===========================================================================
000E6010                            
000E6010                            ObjTitleArm_Animate:				; XREF: Obj0E_Index
000E6010 117C 0001 001C             		move.b #1,oAnim(a0)
000E6016 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000E601C 4EB8 61F4                  		jsr	AnimateObject
000E6020 4EF8 4012                  		jmp	DrawObject
000E6024                            ; ===========================================================================
000E6024 4E75                       		rts	
000E6026                            
000E6026                            ObjTitleBanner:
000E6026 7000                       		moveq	#0,d0
000E6028 1028 0024                  		move.b	oRoutine(a0),d0
000E602C 323B 0000                  		move.w	ObjTitleBanner_Index(pc,d0.w),d1
000E6030 4EFB 1000                  		jmp	ObjTitleBanner_Index(pc,d1.w)
000E6034                            ; ===========================================================================
000E6034                            ObjTitleBanner_Index:	
000E6034 0000                               dc.w ObjTitleBanner_Main-ObjTitleBanner_Index
000E6036 0000                       		dc.w ObjTitleBanner_Delay-ObjTitleBanner_Index
000E6038 0000                       		dc.w ObjTitleBanner_Move-ObjTitleBanner_Index
000E603A 0000                       		dc.w ObjTitleBanner_Animate-ObjTitleBanner_Index
000E603C                            ; ===========================================================================
000E603C                            
000E603C                            ObjTitleBanner_Main:				; XREF: Obj0E_Index
000E603C 5428 0024                  		addq.b	#2,oRoutine(a0)
000E6040 317C FF00 0008             		move.w	#-$100,oX(a0)
000E6046 317C 0100 000A             		move.w	#$100,oYScr(a0)
000E604C 217C 0000 0000 0004        		move.l	#Map_Banner,oMap(a0)
000E6054 317C 0106 0002             		move.w	#$0106,oTile(a0)
000E605A 117C 0000 0018             		move.b	#0,oPriority(a0)
000E6060                            ;		move.b	#50,oVar1F(a0)	; set time delay to 0.5	seconds
000E6060 117C 0002 001C             		move.b #2,oAnim(a0)
000E6066 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000E606C 4EB8 61F4                  		jsr	AnimateObject
000E6070                            
000E6070                            ObjTitleBanner_Delay:				; XREF: Obj0E_Index
000E6070                            ;		subq.b	#1,oVar1F(a0)	; subtract 1 from time delay
000E6070                            ;		bpl.s	ObjTitleBanner_Wait	; if time remains, branch
000E6070 5428 0024                  		addq.b	#2,oRoutine(a0)	; go to	next routine
000E6074 4EF8 4012                  		jmp	DrawObject
000E6078                            ; ===========================================================================
000E6078                            
000E6078                            ObjTitleBanner_Wait:				; XREF: Obj0E_Delay
000E6078 4E75                       		rts	
000E607A                            ; ===========================================================================
000E607A                            
000E607A                            ObjTitleBanner_Move:				; XREF: Obj0E_Index
000E607A                            ;		subq.w	#8,oYScr(a0)
000E607A                            ;		cmpi.w	#$96,oYScr(a0)
000E607A                            ;		bne.s	ObjTitleBanner_Display
000E607A 5428 0024                  		addq.b	#2,oRoutine(a0)
000E607E                            
000E607E                            ObjTitleBanner_Display:
000E607E 4EF8 4012                  		jmp	DrawObject
000E6082                            ; ===========================================================================
000E6082 4E75                       		rts	
000E6084                            ; ===========================================================================
000E6084                            
000E6084                            ObjTitleBanner_Animate:				; XREF: Obj0E_Index
000E6084 117C 0002 001C             		move.b #2,oAnim(a0)
000E608A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000E6090 4EB8 61F4                  		jsr	AnimateObject
000E6094 4EF8 4012                  		jmp	DrawObject
000E6098                            ; ===========================================================================
000E6098 4E75                       		rts	
000E609A                            
000E609A                            Pal_Title:
000E609A 0C38 0005 D01A                     cmpi.b #5,(v_player+oMapFrame).w
000E60A0 6600                       		bne.s .end
000E60A2 7001                       		moveq	#1,d0		; load Sonic's pallet
000E60A4 4EB8 06B8                  		jsr	PalLoad1
000E60A8 4EB8 057C                  		jsr Pal_FadeTo
000E60AC 13FC 0001 00FF 0F1E        		move.b #1,(v_title_final_state).l
000E60B4                             .end:
000E60B4 4E75                           rts
000E60B6                            ; -------------------------------------------------------------------------
000E60B6                            ; Sonic mappings
000E60B6                            ; -------------------------------------------------------------------------
000E60B6                            Map_obj0E:
000E60B6                            MapSpr_Title_Sonic:
000E60B6                            	include	"level/level/TitleScreen/Data/Mappings.asm"
000E60B6                            ; --------------------------------------------------------------------------------
000E60B6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000E60B6                            ; --------------------------------------------------------------------------------
000E60B6                            
000E60B6                            SME_HqwBh:	
000E60B6 0000 0000                  		dc.w SME_HqwBh_14-SME_HqwBh, SME_HqwBh_6A-SME_HqwBh	
000E60BA 0000 0000                  		dc.w SME_HqwBh_C0-SME_HqwBh, SME_HqwBh_102-SME_HqwBh	
000E60BE 0000 0000                  		dc.w SME_HqwBh_153-SME_HqwBh, SME_HqwBh_1A9-SME_HqwBh	
000E60C2 0000 0000                  		dc.w SME_HqwBh_213-SME_HqwBh, SME_HqwBh_228-SME_HqwBh	
000E60C6 0000 0000                  		dc.w SME_HqwBh_242-SME_HqwBh, SME_HqwBh_25C-SME_HqwBh	
000E60CA 11                         SME_HqwBh_14:	dc.b $11	
000E60CB 080D 0000 00               		dc.b 8, $D, 0, 0, 0	
000E60D0 080D 0008 20               		dc.b 8, $D, 0, 8, $20	
000E60D5 0801 0010 40               		dc.b 8, 1, 0, $10, $40	
000E60DA 2003 0012 38               		dc.b $20, 3, 0, $12, $38	
000E60DF 2801 0016 40               		dc.b $28, 1, 0, $16, $40	
000E60E4 180D 0018 08               		dc.b $18, $D, 0, $18, 8	
000E60E9 1806 0020 28               		dc.b $18, 6, 0, $20, $28	
000E60EE 280E 0026 00               		dc.b $28, $E, 0, $26, 0	
000E60F3 2800 0032 20               		dc.b $28, 0, 0, $32, $20	
000E60F8 3003 0033 30               		dc.b $30, 3, 0, $33, $30	
000E60FD 4001 0037 38               		dc.b $40, 1, 0, $37, $38	
000E6102 3807 0039 20               		dc.b $38, 7, 0, $39, $20	
000E6107 5803 0041 28               		dc.b $58, 3, 0, $41, $28	
000E610C 4005 0045 10               		dc.b $40, 5, 0, $45, $10	
000E6111 5806 0049 08               		dc.b $58, 6, 0, $49, 8	
000E6116 5002 004F 30               		dc.b $50, 2, 0, $4F, $30	
000E611B 6005 0052 38               		dc.b $60, 5, 0, $52, $38	
000E6120 11                         SME_HqwBh_6A:	dc.b $11	
000E6121 1007 0056 00               		dc.b $10, 7, 0, $56, 0	
000E6126 080D 005E 18               		dc.b 8, $D, 0, $5E, $18	
000E612B 0805 0066 38               		dc.b 8, 5, 0, $66, $38	
000E6130 180E 006A 10               		dc.b $18, $E, 0, $6A, $10	
000E6135 1806 0076 30               		dc.b $18, 6, 0, $76, $30	
000E613A 2006 007C 40               		dc.b $20, 6, 0, $7C, $40	
000E613F 300C 0082 00               		dc.b $30, $C, 0, $82, 0	
000E6144 3008 0086 20               		dc.b $30, 8, 0, $86, $20	
000E6149 3800 0089 08               		dc.b $38, 0, 0, $89, 8	
000E614E 380D 008A 10               		dc.b $38, $D, 0, $8A, $10	
000E6153 3807 0092 30               		dc.b $38, 7, 0, $92, $30	
000E6158 4802 009A 40               		dc.b $48, 2, 0, $9A, $40	
000E615D 4808 009D 18               		dc.b $48, 8, 0, $9D, $18	
000E6162 500A 00A0 08               		dc.b $50, $A, 0, $A0, 8	
000E6167 680D 00A9 10               		dc.b $68, $D, 0, $A9, $10	
000E616C 7804 00B1 18               		dc.b $78, 4, 0, $B1, $18	
000E6171 5805 00B3 20               		dc.b $58, 5, 0, $B3, $20	
000E6176 0D                         SME_HqwBh_C0:	dc.b $D	
000E6177 000C 00B7 18               		dc.b 0, $C, 0, $B7, $18	
000E617C 080F 00BB 00               		dc.b 8, $F, 0, $BB, 0	
000E6181 080F 00CB 20               		dc.b 8, $F, 0, $CB, $20	
000E6186 1802 00DB 40               		dc.b $18, 2, 0, $DB, $40	
000E618B 280D 00DE 00               		dc.b $28, $D, 0, $DE, 0	
000E6190 280F 00E6 20               		dc.b $28, $F, 0, $E6, $20	
000E6195 3808 00F6 08               		dc.b $38, 8, 0, $F6, 8	
000E619A 4005 00F9 10               		dc.b $40, 5, 0, $F9, $10	
000E619F 480D 00FD 20               		dc.b $48, $D, 0, $FD, $20	
000E61A4 4003 0105 40               		dc.b $40, 3, 1, 5, $40	
000E61A9 580E 0109 10               		dc.b $58, $E, 1, 9, $10	
000E61AE 5000 0115 18               		dc.b $50, 0, 1, $15, $18	
000E61B3 5801 0116 30               		dc.b $58, 1, 1, $16, $30	
000E61B8 10                         SME_HqwBh_102:	dc.b $10	
000E61B9 080D 0118 00               		dc.b 8, $D, 1, $18, 0	
000E61BE 000A 0120 20               		dc.b 0, $A, 1, $20, $20	
000E61C3 0801 0129 38               		dc.b 8, 1, 1, $29, $38	
000E61C8 180C 012B 08               		dc.b $18, $C, 1, $2B, 8	
000E61CD 180C 012F 28               		dc.b $18, $C, 1, $2F, $28	
000E61D2 200D 0133 00               		dc.b $20, $D, 1, $33, 0	
000E61D7 200D 013B 20               		dc.b $20, $D, 1, $3B, $20	
000E61DC 2005 0143 40               		dc.b $20, 5, 1, $43, $40	
000E61E1 300E 0147 08               		dc.b $30, $E, 1, $47, 8	
000E61E6 300A 0153 28               		dc.b $30, $A, 1, $53, $28	
000E61EB 3805 015C 40               		dc.b $38, 5, 1, $5C, $40	
000E61F0 4808 0160 10               		dc.b $48, 8, 1, $60, $10	
000E61F5 480E 0163 28               		dc.b $48, $E, 1, $63, $28	
000E61FA 580A 016F 10               		dc.b $58, $A, 1, $6F, $10	
000E61FF 7004 0178 18               		dc.b $70, 4, 1, $78, $18	
000E6204 6005 017A 28               		dc.b $60, 5, 1, $7A, $28	
000E6209 11                         SME_HqwBh_153:	dc.b $11	
000E620A 000C 017E 20               		dc.b 0, $C, 1, $7E, $20	
000E620F 080F 0182 00               		dc.b 8, $F, 1, $82, 0	
000E6214 080F 0192 20               		dc.b 8, $F, 1, $92, $20	
000E6219 0801 01A2 40               		dc.b 8, 1, 1, $A2, $40	
000E621E 1807 01A4 40               		dc.b $18, 7, 1, $A4, $40	
000E6223 280C 01AC 00               		dc.b $28, $C, 1, $AC, 0	
000E6228 280F 01B0 20               		dc.b $28, $F, 1, $B0, $20	
000E622D 300B 01C0 08               		dc.b $30, $B, 1, $C0, 8	
000E6232 3807 01CC 40               		dc.b $38, 7, 1, $CC, $40	
000E6237 5800 01D4 48               		dc.b $58, 0, 1, $D4, $48	
000E623C 480F 01D5 20               		dc.b $48, $F, 1, $D5, $20	
000E6241 600E 01E5 00               		dc.b $60, $E, 1, $E5, 0	
000E6246 5004 01F1 10               		dc.b $50, 4, 1, $F1, $10	
000E624B 5808 01F3 08               		dc.b $58, 8, 1, $F3, 8	
000E6250 6809 01F6 20               		dc.b $68, 9, 1, $F6, $20	
000E6255 6800 01FC 38               		dc.b $68, 0, 1, $FC, $38	
000E625A 2E0F 0279 10               		dc.b $2E, $F, 2, $79, $10	
000E625F 15                         SME_HqwBh_1A9:	dc.b $15	
000E6260 180E 0252 00               		dc.b $18, $E, 2, $52, 0	
000E6265 1806 025E 20               		dc.b $18, 6, 2, $5E, $20	
000E626A 300E 0264 08               		dc.b $30, $E, 2, $64, 8	
000E626F 3002 01B5 28               		dc.b $30, 2, 1, $B5, $28	
000E6274 400A 0270 20               		dc.b $40, $A, 2, $70, $20	
000E6279 000C 017E 20               		dc.b 0, $C, 1, $7E, $20	
000E627E 080F 0182 00               		dc.b 8, $F, 1, $82, 0	
000E6283 080F 0192 20               		dc.b 8, $F, 1, $92, $20	
000E6288 0801 01A2 40               		dc.b 8, 1, 1, $A2, $40	
000E628D 1807 01A4 40               		dc.b $18, 7, 1, $A4, $40	
000E6292 280C 01AC 00               		dc.b $28, $C, 1, $AC, 0	
000E6297 280F 01B0 20               		dc.b $28, $F, 1, $B0, $20	
000E629C 300B 01C0 08               		dc.b $30, $B, 1, $C0, 8	
000E62A1 3807 01CC 40               		dc.b $38, 7, 1, $CC, $40	
000E62A6 5800 01D4 48               		dc.b $58, 0, 1, $D4, $48	
000E62AB 480F 01D5 20               		dc.b $48, $F, 1, $D5, $20	
000E62B0 600E 01E5 00               		dc.b $60, $E, 1, $E5, 0	
000E62B5 5004 01F1 10               		dc.b $50, 4, 1, $F1, $10	
000E62BA 5808 01F3 08               		dc.b $58, 8, 1, $F3, 8	
000E62BF 6809 01F6 20               		dc.b $68, 9, 1, $F6, $20	
000E62C4 6800 01FC 38               		dc.b $68, 0, 1, $FC, $38	
000E62C9 04                         SME_HqwBh_213:	dc.b 4	
000E62CA D400 01FD F8               		dc.b $D4, 0, 1, $FD, $F8	
000E62CF DC04 01FE F8               		dc.b $DC, 4, 1, $FE, $F8	
000E62D4 E40B 0200 F8               		dc.b $E4, $B, 2, 0, $F8	
000E62D9 0405 020C 00               		dc.b 4, 5, 2, $C, 0	
000E62DE 05                         SME_HqwBh_228:	dc.b 5	
000E62DF D405 0210 00               		dc.b $D4, 5, 2, $10, 0	
000E62E4 EC00 11E6 F8               		dc.b $EC, 0, $11, $E6, $F8	
000E62E9 E40B 0214 00               		dc.b $E4, $B, 2, $14, 0	
000E62EE 0408 0220 00               		dc.b 4, 8, 2, $20, 0	
000E62F3 0C04 0223 00               		dc.b $C, 4, 2, $23, 0	
000E62F8 05                         SME_HqwBh_242:	dc.b 5	
000E62F9 D405 0225 08               		dc.b $D4, 5, 2, $25, 8	
000E62FE E408 0229 00               		dc.b $E4, 8, 2, $29, 0	
000E6303 EC0D 022C 00               		dc.b $EC, $D, 2, $2C, 0	
000E6308 FC09 0234 00               		dc.b $FC, 9, 2, $34, 0	
000E630D 0C04 023A 00               		dc.b $C, 4, 2, $3A, 0	
000E6312 05                         SME_HqwBh_25C:	dc.b 5	
000E6313 D405 023C 18               		dc.b $D4, 5, 2, $3C, $18	
000E6318 E40A 0240 08               		dc.b $E4, $A, 2, $40, 8	
000E631D FC06 0249 00               		dc.b $FC, 6, 2, $49, 0	
000E6322 FC04 024F 10               		dc.b $FC, 4, 2, $4F, $10	
000E6327 0400 0251 10               		dc.b 4, 0, 2, $51, $10	
000E632C                            		even
000E632C                            		even
000E632C                            	even
000E632C                            Ani_obj0E:
000E632C 0000                           dc.w	TitleSonic-Ani_obj0E
000E632E 0000                           dc.w	TitleArm-Ani_obj0E
000E6330 0000                       	dc.w	TitleBanner-Ani_obj0E
000E6332                            TitleSonic:
000E6332 0500 0102 0304 0505 0505+      dc.b	5, 0, 1, 2, 3, 4, 5, 5, 5, 5, 5, $FE ,1
000E633E                            TitleArm:	
000E633E 0509 0807 0606 0708 09FF       dc.b	5, 9, 8, 7, 6, 6, 7, 8, 9, $FF ,0
000E6348 0509 0807 0606 0708 09FF   	dc.b	5, 9, 8, 7, 6, 6, 7, 8, 9, $FF ,0
000E6352                            TitleBanner:
000E6352 0500 0000 0000 0000 00FF       dc.b	5, 0, 0, 0, 0, 0, 0, 0, 0,  $FF ,0	
000E635C                            Map_Banner:
000E635C                            	include	"level/level/TitleScreen/Data/BannerMappings.asm"
000E635C                            Banner: mappingsTable
000E635C 0000                       	mappingsTableEntry.w	Banner_0
000E635E                            
000E63AF                            Banner_0_End
000E63AF                            
000E63B0 00                         	even
000E63B0 00                         	even
000E63B0                            	even
000E63B0                            Art_Banner:	
000E63B0                            	incbin	"level/level/TitleScreen/Data/BannerArt.bin"
000E69A8                            	even
000E69A8                            
000E69A8                            Art_PressStartText:	
000E69A8                            	incbin	"level/level/TitleScreen/Data/Art (Text, Press Start).unc"
000E6BA8                            	even
000E6BA8                            Art_NewGameText:	
000E6BA8                            	incbin	"level/level/TitleScreen/Data/Art (Text, New Game).unc"
000E6DE8                            	even
000E6DE8                            Art_ContinueText:	
000E6DE8                            	incbin	"level/level/TitleScreen/Data/Art (Text, Continue).unc"
000E6FE8                            	even
000E6FE8                            Art_TimeAttackText:	
000E6FE8                            	incbin	"level/level/TitleScreen/Data/Art (Text, Time Attack).unc"
000E72A8                            	even			
000E72A8                            Art_RamDataText:	
000E72A8                            	incbin	"level/level/TitleScreen/Data/Art (Text, RAM Data).unc"
000E74E8                            	even	
000E74E8                            Art_DAGardenText:	
000E74E8                            	incbin	"level/level/TitleScreen/Data/Art (Text, D.A. Garden).unc"
000E7768                            	even
000E7768                            Art_VisualModeText:	
000E7768                            	incbin	"level/level/TitleScreen/Data/Art (Text, Visual Mode).unc"
000E7A28                            	even
000E7A28                            
000E7A28                            
000E7A28                                include "_incOBJ/Tested.asm"
000E7A28                            ; ===========================================================================
000E7A28                            ; ----------------------------------------------------------------------------
000E7A28                            ; Object 0F - Title screen menu
000E7A28                            ; ----------------------------------------------------------------------------
000E7A28                            ; Sprite_13600:
000E7A28                            TitleMenu:
000E7A28 7000                       	moveq	#0,d0
000E7A2A 1028 0024                  	move.b	routine(a0),d0
000E7A2E 323B 0000                  	move.w	TitleMenu_Index(pc,d0.w),d1
000E7A32 4EBB 1000                  	jsr	TitleMenu_Index(pc,d1.w)
000E7A36 4EF8 4012                  	jmp	DisplaySprite
000E7A3A                            ; ===========================================================================
000E7A3A                            ; off_13612: TitleMenu_States:
000E7A3A                            TitleMenu_Index:
000E7A3A 0000                       		dc.w TitleMenu_Init-TitleMenu_Index	; 0
000E7A3C 0000                       		dc.w TitleMenu_Main-TitleMenu_Index	; 2
000E7A3E                            ; ===========================================================================
000E7A3E                            ; loc_13616:
000E7A3E                            TitleMenu_Init:
000E7A3E 317C 010C 0008             	move.w	#$10C,x_pixel(a0)
000E7A44 317C 014C 000A             	move.w	#$14C,y_pixel(a0)
000E7A4A 217C 0000 0000 0004        	move.l	#TitleMenu_MapUnc_13B70,mappings(a0)
000E7A52 317C 217C 0002             	move.w	#$217C,art_tile(a0)
000E7A58 13FC 0008 00FF 1576        	move.b	#8,(v_load_menu_art).l
000E7A60 117C 0001 001A             	move.b  #1,oMapFrame(a0)
000E7A66 6100 0000                  	bsr.w	TitleMenu_ChkSaveRout
000E7A6A 0C39 0001 00FF 0F1B        	cmpi.b  #1,(Title_Press_Start).l
000E7A72 6600 0000                  	bne.w   EndCode
000E7A76 117C 0002 001A             	move.b  #2,oMapFrame(a0)
000E7A7C 5428 0024                  	addq.b	#2,routine(a0) ; => TitleMenu_Main
000E7A80                            
000E7A80                            ; loc_13644:
000E7A80                            TitleMenu_Main:
000E7A80 0838 0003 F605                 btst	#button_right,(v_ctrl1_pressed).w
000E7A86 6600                       	bne.s   AddOption
000E7A88 0838 0002 F605             	btst	#button_left,(v_ctrl1_pressed).w
000E7A8E 6600                       	bne.s   RestOption	
000E7A90 4E75                       	rts
000E7A92                            AddOption	
000E7A92 5239 00FF 1547                 addi.b  #1,(Title_screen_option).l
000E7A98 6100                       	bsr.s ChangeSprite
000E7A9A 4E75                           rts
000E7A9C                            RestOption:
000E7A9C 5339 00FF 1547                 subq.b  #1,(Title_screen_option).l
000E7AA2 6100                       	bsr.s ChangeSprite
000E7AA4 4E75                       	rts
000E7AA6                            ChangeSprite:
000E7AA6 1179 00FF 1547 001A            move.b	(Title_screen_option).l,mapping_frame(a0)
000E7AAE 0C39 0008 00FF 1547        	cmpi.b #8,(Title_screen_option).l
000E7AB6 6700                       	beq.s  RestartCount
000E7AB8 0C39 0001 00FF 1547        	cmpi.b #1,(Title_screen_option).l
000E7AC0 6700                       	beq.s  RestartCount_2
000E7AC2 4E75                       	rts
000E7AC4                            RestartCount:
000E7AC4 13FC 0002 00FF 1547        	move.b #2,(Title_screen_option).l
000E7ACC 4E75                       	rts
000E7ACE                            RestartCount_2:
000E7ACE 13FC 0007 00FF 1547        	move.b #7,(Title_screen_option).l
000E7AD6 4E75                       	rts	
000E7AD8                            EndCode:
000E7AD8 4E75                           rts	
000E7ADA                            TitleMenu_ChkSaveRout:
000E7ADA 1039 00FF 1576             	move.b	(v_load_menu_art).l,d0
000E7AE0 0200 000F                  	andi.b	#$F,d0
000E7AE4 0C00 0008                  	cmpi.b	#8,d0
000E7AE8 6500                       	bcs.s	.SaveRout
000E7AEA 4E75                       	rts
000E7AEC                            
000E7AEC                            ; -------------------------------------------------------------------------------
000E7AEC                            
000E7AEC                            .SaveRout:
000E7AEC B028 0024                  	cmp.b	oRoutine(a0),d0
000E7AF0 6700                       	beq.s	.Display
000E7AF2 13E8 0024 00FF 1576        	move.b	oRoutine(a0),(v_load_menu_art).l
000E7AFA 08F9 0007 00FF 1576        	bset	#7,(v_load_menu_art).l
000E7B02                            
000E7B02                            .Display:
000E7B02 4EF8 4012                  	jmp	DrawObject
000E7B06                            
000E7B06                            LoadMenuArt:
000E7B06 08B9 0007 00FF 1576        	bclr	#7,(v_load_menu_art).l
000E7B0E 6700                       	beq.s	.End
000E7B10 7000                       	moveq	#0,d0
000E7B12 1039 00FF 1576             	move.b	(v_load_menu_art).l,d0
000E7B18 5500                       	subq.b	#2,d0
000E7B1A D040                       	add.w	d0,d0
000E7B1C 227B 0000                  	movea.l	MenuArtIndex(pc,d0.w),a1
000E7B20 45F9 00FF 1980             	lea	(v_dma_buffer).l,a2
000E7B26 303C 00FF                  	move.w	#$FF,d0
000E7B2A                            
000E7B2A                            .Loop:
000E7B2A 24D9                       	move.l	(a1)+,(a2)+
000E7B2C 51C8 FFFC                  	dbf	d0,.Loop
000E7B30 4BF9 00C0 0004             	lea	(VDP_CTRL).l,a5
000E7B36 2ABC 9402 9340             	move.l	#$94029340,(a5)
000E7B3C 2ABC 968C 95C0             	move.l	#$968C95C0,(a5)
000E7B42 3ABC 977F                  	move.w	#$977F,(a5)
000E7B46 3ABC 6880                  	move.w	#$6880,(a5)
000E7B4A 31FC 0082 F640             	move.w	#$82,(v_dma_cmd_cache).w
000E7B50 3AB8 F640                  	move.w	(v_dma_cmd_cache).w,(a5)
000E7B54                            
000E7B54                            .End:
000E7B54 4E75                       	rts
000E7B56                            ; End of function LoadShieldArt
000E7B56                            
000E7B56                            ; -------------------------------------------------------------------------------
000E7B56                            MenuArtIndex:	
000E7B56 000E 69A8                      dc.l	Art_PressStartText ;0
000E7B5A 000E 6BA8                  	dc.l	Art_NewGameText    ;4
000E7B5E 000E 6DE8                  	dc.l	Art_ContinueText   ;8
000E7B62 000E 6FE8                  	dc.l	Art_TimeAttackText ;C
000E7B66 000E 72A8                  	dc.l	Art_RamDataText    ;10
000E7B6A 000E 74E8                  	dc.l	Art_DAGardenText   ;14
000E7B6E 000E 7768                  	dc.l	Art_VisualModeText ;18
000E7B72                            ; -----------------------------------------------------------------------------
000E7B72                            ; sprite mappings
000E7B72                            ; -----------------------------------------------------------------------------
000E7B72                            TitleMenu_MapUnc_13B70:	
000E7B72                                include "level/level/TitleScreen/Data/Mappings (Menu).asm"
000E7B72                            ; --------------------------------------------------------------------------------
000E7B72                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000E7B72                            ; --------------------------------------------------------------------------------
000E7B72                            
000E7B72                            SME_rriCA:	
000E7B72 0000 0000                  		dc.w SME_rriCA_10-SME_rriCA, SME_rriCA_11-SME_rriCA	
000E7B76 0000 0000                  		dc.w SME_rriCA_26-SME_rriCA, SME_rriCA_36-SME_rriCA	
000E7B7A 0000 0000                  		dc.w SME_rriCA_41-SME_rriCA, SME_rriCA_51-SME_rriCA	
000E7B7E 0000 0000                  		dc.w SME_rriCA_61-SME_rriCA, SME_rriCA_71-SME_rriCA	
000E7B82 00                         SME_rriCA_10:	dc.b 0	
000E7B83 04                         SME_rriCA_11:	dc.b 4	
000E7B84 000D 2000 00               		dc.b 0, $D, $20, 0, 0	
000E7B89 0001 2006 20               		dc.b 0, 1, $20, 6, $20	
000E7B8E 0001 2006 30               		dc.b 0, 1, $20, 6, $30	
000E7B93 000D 2008 38               		dc.b 0, $D, $20, 8, $38	
000E7B98 03                         SME_rriCA_26:	dc.b 3	
000E7B99 000D 2000 0A               		dc.b 0, $D, $20, 0, $A	
000E7B9E 000D 2008 2A               		dc.b 0, $D, $20, 8, $2A	
000E7BA3 0001 2010 4A               		dc.b 0, 1, $20, $10, $4A	
000E7BA8 02                         SME_rriCA_36:	dc.b 2	
000E7BA9 000D 2000 0D               		dc.b 0, $D, $20, 0, $D	
000E7BAE 000D 2008 2D               		dc.b 0, $D, $20, 8, $2D	
000E7BB3 03                         SME_rriCA_41:	dc.b 3	
000E7BB4 000D 2000 02               		dc.b 0, $D, $20, 0, 2	
000E7BB9 000D 2008 22               		dc.b 0, $D, $20, 8, $22	
000E7BBE 0009 2010 42               		dc.b 0, 9, $20, $10, $42	
000E7BC3 03                         SME_rriCA_51:	dc.b 3	
000E7BC4 000D 2000 0D               		dc.b 0, $D, $20, 0, $D	
000E7BC9 000D 2008 2D               		dc.b 0, $D, $20, 8, $2D	
000E7BCE 0001 2010 4D               		dc.b 0, 1, $20, $10, $4D	
000E7BD3 03                         SME_rriCA_61:	dc.b 3	
000E7BD4 000D 2000 06               		dc.b 0, $D, $20, 0, 6	
000E7BD9 000D 2008 26               		dc.b 0, $D, $20, 8, $26	
000E7BDE 0005 2010 46               		dc.b 0, 5, $20, $10, $46	
000E7BE3 03                         SME_rriCA_71:	dc.b 3	
000E7BE4 000D 2000 04               		dc.b 0, $D, $20, 0, 4	
000E7BE9 000D 2008 24               		dc.b 0, $D, $20, 8, $24	
000E7BEE 0009 2010 44               		dc.b 0, 9, $20, $10, $44	
000E7BF4 00                         		even
000E7BF4 00                         		even
000E7BF4                            	even
000E7BF4                            	even
000E7BF4                            	even
000E7BF4                            ; -------------------------------------------------------------------------------
000E7BF4                            ; Leftover data from other level files used as padding, can be replaced
000E7BF4                            ; with a "align $40000"
000E7BF4                            ; -------------------------------------------------------------------------------
000E7BF4                            
000E7BF4                            ; ---------------------------------------------------------------------------
000E7BF4                            ; Subroutine to	load the sound driver
000E7BF4                            ; ---------------------------------------------------------------------------
000E7BF4                            
000E7BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E7BF4                            
000E7BF4                            
000E7BF4                            SoundDriverLoad:
000E7BF4 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
000E7BFA 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
000E7C00 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
000E7C04 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
000E7C0C 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000E7C14 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
000E7C1C 66F6                       		bne.s	*-$08					; if not, branch
000E7C1E                            
000E7C1E                            SM_LoadZ80:
000E7C1E 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
000E7C20 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
000E7C24 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
000E7C2A 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
000E7C30 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
000E7C32 12D8                       		move.b	(a0)+,(a1)+				; ''
000E7C34 12D8                       		move.b	(a0)+,(a1)+				; ''
000E7C36 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000E7C38 12D8                       		move.b	(a0)+,(a1)+				; ''
000E7C3A 12D8                       		move.b	(a0)+,(a1)+				; ''
000E7C3C 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000E7C42 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000E7C46 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000E7C4A 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000E7C4E 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000E7C52 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000E7C56 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000E7C5A 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000E7C5E 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000E7C62 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000E7C66 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
000E7C6E 727F                       		moveq	#$7F,d1					; set repeat times
000E7C70 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
000E7C74 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
000E7C7C 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000E7C84 4E75                       		rts						; return
000E7C86                            
000E7C86                            Sound_Driver: include "Sound Driver.asm"
000E7C86 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000E7C8A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000E7C8E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000E7C92 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000E7C96 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000E7C9A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000E7C9E                            ; ---------------------------------------------------------------------------
000E7C9E                            ; PSG instruments used in music
000E7C9E                            ; ---------------------------------------------------------------------------
000E7C9E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000E7CAA 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000E7CB6 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000E7CC2 0000 0000 0000 0000 0000+  		dc.l PSG0A, PSG0B, PSG0C, PSG0D			; EXTRA
000E7CD2                            PSG1:		incbin	sound\psg1.bin
000E7CE9                            PSG2:		incbin	sound\psg2.bin
000E7CF0                            PSG3:		incbin	sound\psg3.bin
000E7D01                            PSG4:		incbin	sound\psg4.bin
000E7D0C                            PSG6:		incbin	sound\psg6.bin
000E7D1B                            PSG5:		incbin	sound\psg5.bin
000E7D45                            PSG7:		incbin	sound\psg7.bin
000E7D61                            PSG8:		incbin	sound\psg8.bin
000E7D89                            PSG9:		incbin	sound\psg9.bin
000E7D9A 0002 0304 0607 80          PSG0A:		dc.b	$00,$02,$03,$04,$06,$07,$80		; EXTRA
000E7DA1 0000 0000 0101 0101 0202+  PSG0B:		dc.b	$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03
000E7DAE 0303 0304 0404 0405 0505+  		dc.b	$03,$03,$03,$04,$04,$04,$04,$05,$05,$05,$05,$06,$06
000E7DBB 0606 0707 0707 0808 0808+  		dc.b	$06,$06,$07,$07,$07,$07,$08,$08,$08,$08,$09,$09,$09
000E7DC8 090A 0A0A 0A80             		dc.b	$09,$0A,$0A,$0A,$0A,$80
000E7DCE 0000 0000 0000 0000 0000+  PSG0C:		dc.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01
000E7DDB 0101 0101 0101 0102 0202+  		dc.b	$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$02
000E7DE8 0202 0202 0303 0303 0303+  		dc.b	$02,$02,$02,$02,$03,$03,$03,$03,$03,$03,$03,$03,$03
000E7DF5 0304 0404 0404 0404 0404+  		dc.b	$03,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05
000E7E02 0505 0505 0505 0505 0606+  		dc.b	$05,$05,$05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06
000E7E0F 0606 0606 0607 0707 0707+  		dc.b	$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$07,$07,$07
000E7E1C 0707 0808 0808 0808 0808+  		dc.b	$07,$07,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$09
000E7E29 0909 0909 0909 0909 0980   		dc.b	$09,$09,$09,$09,$09,$09,$09,$09,$09,$80
000E7E33 0002 0406 0810 80          PSG0D:		dc.b	$00,$02,$04,$06,$08,$10,$80
000E7E3A                            		even
000E7E3A                            
000E7E3A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000E7E42                            ; ---------------------------------------------------------------------------
000E7E42                            ; Music	Pointers
000E7E42                            ; ---------------------------------------------------------------------------
000E7E42 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000E7E4A 0000 0000 0000 0000        		dc.l Music83, Music84
000E7E52 0000 0000 0000 0000        		dc.l Music85, Music86
000E7E5A 0000 0000 0000 0000        		dc.l Music87, Music88
000E7E62 0000 0000 0000 0000        		dc.l Music89, Music8A
000E7E6A 0000 0000 0000 0000        		dc.l Music8B, Music8C
000E7E72 0000 0000 0000 0000        		dc.l Music8D, Music8E
000E7E7A 0000 0000 0000 0000        		dc.l Music8F, Music90
000E7E82 0000 0000 0000 0000        		dc.l Music91, Music92
000E7E8A 0000 0000 0000 0000        		dc.l Music93, Music94
000E7E92 0000 0000 0000 0000        		dc.l Music95, Music96
000E7E9A 0000 0000                  		dc.l Music97
000E7E9E                            ; ---------------------------------------------------------------------------
000E7E9E                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000E7E9E                            ; ---------------------------------------------------------------------------
000E7E9E 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000E7EAE 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000E7EBE 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000E7ECE 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000E7EDE 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000E7EEE 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000E7EFE 9090 9090                  		dc.b $90, $90, $90, $90
000E7F02                            
000E7F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E7F02                            
000E7F02                            
000E7F02                            sub_71B4C:
000E7F02 4DF9 00FF F000             		lea	($FFF000).l,a6
000E7F08                            
000E7F08                            
000E7F08 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000E7F0E 33FC 0100 00A1 1100 0839+  		stopZ80_S1						; CHG: request Z80 stop on
000E7F20 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000E7F22 33FC 0000 00A1 1100        		startZ80_S1					; CHG: request Z80 stop off
000E7F2A B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000E7F2E 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000E7F30 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000E7F32                            
000E7F32                            SD_ValidList:
000E7F32 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000E7F3A 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000E7F3C 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000E7F3E 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000E7F46                            
000E7F46                            SD_WriteBuffer1:
000E7F46 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000E7F4A                            
000E7F4A                            
000E7F4A                            ;		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000E7F4A                            ;		stopZ80_S1						; CHG: request Z80 stop on
000E7F4A                            ;		move.b	(a0),d0					; CHG: load buffer ID
000E7F4A                            ;		startZ80_S1					; CHG: request Z80 stop off
000E7F4A                            ;		move.l	#$A00000+YM_Buffer1,$10(a6)		; CHG: set the cue address to buffer 1
000E7F4A                            ;		tst.b	d0					; CHG: check buffer to use
000E7F4A                            ;		bne.s	YM_WriteBuffer1				; CHG: if Z80 is reading buffer 2, branch
000E7F4A                            ;		move.l	#$A00000+YM_Buffer2,$10(a6)		; CHG: set the cue address to buffer 2
000E7F4A                            ;
000E7F4A                            ;YM_WriteBuffer1:
000E7F4A                            
000E7F4A 422E 000E                  		clr.b	$E(a6)
000E7F4E 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000E7F52 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000E7F56 532E 0001                  		subq.b	#1,1(a6)
000E7F5A 6600                       		bne.s	loc_71B9E
000E7F5C 4EBA 0000                  		jsr	sub_7260C(pc)
000E7F60                            
000E7F60                            loc_71B9E:
000E7F60 102E 0004                  		move.b	4(a6),d0
000E7F64 6700                       		beq.s	loc_71BA8
000E7F66 4EBA 0000                  		jsr	sub_72504(pc)
000E7F6A                            
000E7F6A                            loc_71BA8:
000E7F6A 4A2E 0024                  		tst.b	$24(a6)
000E7F6E 6700                       		beq.s	loc_71BB2
000E7F70 4EBA 0000                  		jsr	sub_7267C(pc)
000E7F74                            
000E7F74                            loc_71BB2:
000E7F74 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000E7F78 6700                       		beq.s	loc_71BBC	; if not, branch
000E7F7A 4EBA 0000                  		jsr	Sound_Play(pc)
000E7F7E                            
000E7F7E                            loc_71BBC:
000E7F7E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000E7F84 6700                       		beq.s	loc_71BC8
000E7F86 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000E7F8A                            
000E7F8A                            loc_71BC8:
000E7F8A 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000E7F8E 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000E7F90 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000E7F96                            
000E7F96                            SD_NextPCM:
000E7F96 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000E7F9A 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000E7F9E 4A15                       		tst.b	(a5)
000E7FA0 6A00                       		bpl.s	loc_71BD4
000E7FA2 4EBA 0000                  		jsr	sub_71C4E(pc)
000E7FA6                            
000E7FA6                            loc_71BD4:
000E7FA6 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000E7FAA 422E 0008                  		clr.b	8(a6)
000E7FAE 7E05                       		moveq	#5,d7
000E7FB0                            
000E7FB0                            loc_71BDA:
000E7FB0 DAFC 0030                  		adda.w	#$30,a5
000E7FB4 4A15                       		tst.b	(a5)
000E7FB6 6A00                       		bpl.s	loc_71BE6
000E7FB8 4EBA 0000                  		jsr	sub_71CCA(pc)
000E7FBC                            
000E7FBC                            loc_71BE6:
000E7FBC 51CF FFF2                  		dbf	d7,loc_71BDA
000E7FC0                            
000E7FC0 7E02                       		moveq	#2,d7
000E7FC2                            
000E7FC2                            loc_71BEC:
000E7FC2 DAFC 0030                  		adda.w	#$30,a5
000E7FC6 4A15                       		tst.b	(a5)
000E7FC8 6A00                       		bpl.s	loc_71BF8
000E7FCA 4EBA 0000                  		jsr	sub_72850(pc)
000E7FCE                            
000E7FCE                            loc_71BF8:
000E7FCE 51CF FFF2                  		dbf	d7,loc_71BEC
000E7FD2                            
000E7FD2 1D7C 0080 000E             		move.b	#$80,$E(a6)
000E7FD8 7E02                       		moveq	#2,d7
000E7FDA                            
000E7FDA                            loc_71C04:
000E7FDA DAFC 0030                  		adda.w	#$30,a5
000E7FDE 4A15                       		tst.b	(a5)
000E7FE0 6A00                       		bpl.s	loc_71C10
000E7FE2 4EBA 0000                  		jsr	sub_71CCA(pc)
000E7FE6                            
000E7FE6                            loc_71C10:
000E7FE6 51CF FFF2                  		dbf	d7,loc_71C04
000E7FEA                            
000E7FEA 7E02                       		moveq	#2,d7
000E7FEC                            
000E7FEC                            loc_71C16:
000E7FEC DAFC 0030                  		adda.w	#$30,a5
000E7FF0 4A15                       		tst.b	(a5)
000E7FF2 6A00                       		bpl.s	loc_71C22
000E7FF4 4EBA 0000                  		jsr	sub_72850(pc)
000E7FF8                            
000E7FF8                            loc_71C22:
000E7FF8 51CF FFF2                  		dbf	d7,loc_71C16
000E7FFC 1D7C 0040 000E             		move.b	#$40,$E(a6)
000E8002 DAFC 0030                  		adda.w	#$30,a5
000E8006 4A15                       		tst.b	(a5)
000E8008 6A00                       		bpl.s	loc_71C38
000E800A 4EBA 0000                  		jsr	sub_71CCA(pc)
000E800E                            
000E800E                            loc_71C38:
000E800E DAFC 0030                  		adda.w	#$30,a5
000E8012 4A15                       		tst.b	(a5)
000E8014 6A00                       		bpl.s	loc_71C44
000E8016 4EBA 0000                  		jsr	sub_72850(pc)
000E801A                            
000E801A                            loc_71C44:
000E801A 4E75                       		rts	
000E801C                            ; End of function sub_71B4C
000E801C                            
000E801C                            
000E801C                            ; ===========================================================================
000E801C                            ; ---------------------------------------------------------------------------
000E801C                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000E801C                            ; ---------------------------------------------------------------------------
000E801C                            
000E801C                            SDAC_CheckMute:
000E801C 102D 0021                  	move.b	$21(a5),d0
000E8020 B02D 0022                  	cmp.b	$22(a5),d0
000E8024 6700                       	beq.s	S71C4E_NoCHG
000E8026 4A00                       	tst.b	d0
000E8028 6A00                       	bpl.s	S71C4E_NoMute
000E802A                            
000E802A 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000E802C 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000E8032 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000E8038 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000E803E 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000E8044 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000E8046 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000E804C 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000E8052                            
000E8052                            SDAC_CM_NotePCM2:
000E8052 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E8064 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000E8066 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8068 12DC                       		move.b	(a4)+,(a1)+				; ''
000E806A 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000E806C 12DC                       		move.b	(a4)+,(a1)+				; ''
000E806E 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8070 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000E8072 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8074 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8076 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000E8078 12DC                       		move.b	(a4)+,(a1)+				; ''
000E807A 12DC                       		move.b	(a4)+,(a1)+				; ''
000E807C 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000E807E 33FC 0000 00A1 1100        		startZ80_S1
000E8086                            
000E8086                            ;	jsr	sub_726FE(pc)
000E8086                            ;	move.b	$0A(a5),d1
000E8086                            ;	andi.b	#%00111111,d1
000E8086                            ;	move.b	#$B4,d0
000E8086                            ;	jsr	loc_72716
000E8086 08D5 0006                  	bset.b	#$06,(a5)
000E808A 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000E8090                            
000E8090                            S71C4E_NoCHG:
000E8090 4E75                       	rts
000E8092                            
000E8092                            S71C4E_NoMute:
000E8092 1B40 0022                  	move.b	d0,$22(a5)
000E8096                            ;	move.b	$0B(a5),d0
000E8096                            ;	jsr	SFM_UpdateVoice(pc)
000E8096                            ;	move.b	$0A(a5),d1
000E8096                            ;	move.b	#$B4,d0
000E8096                            ;	jsr	loc_72716
000E8096 08D5 0006                  	bset.b	#$06,(a5)
000E809A 4E75                       	rts
000E809C                            
000E809C                            ; ===========================================================================
000E809C                            ; ---------------------------------------------------------------------------
000E809C                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000E809C                            ; ---------------------------------------------------------------------------
000E809C                            
000E809C                            sub_71C4E:
000E809C 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000E80A0                            
000E80A0                            	; Volume is being done first, as it'll update with a single
000E80A0                            	; frame delay, the PCM playback is a frame behind, as is the
000E80A0                            	; pitch control, but the volume change happens immediately,
000E80A0                            	; thus, a delay is needed.
000E80A0                            
000E80A0                            	; *VOLUME DELAY WAS HERE*
000E80A0                            
000E80A0                            		; And now back to the normal DAC
000E80A0                            		; SMPS routine
000E80A0                            
000E80A0 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000E80A4 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000E80A8 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000E80AC 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000E80B0 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000E80B4 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000E80B6                            
000E80B6                            SDAC_ReadFlag:
000E80B6 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000E80BA                            
000E80BA                            SDAC_ReadTracker:
000E80BA 7A00                       		moveq	#$00,d5					; clear d5
000E80BC 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000E80BE 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000E80C2 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000E80C6 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000E80C8 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000E80CC                            
000E80CC                            	SDAC_Update:				; EXTRA
000E80CC 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000E80D0 0405 0080                  		subi.b	#$80,d5					; minus starting note
000E80D4 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000E80D6 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000E80D8 DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000E80DC DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000E80E0 DA45                       		add.w	d5,d5					; multiply by size of word
000E80E2 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000E80E8                            
000E80E8                            SDAC_NoFrequency:
000E80E8                            
000E80E8 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000E80EC 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000E80F0 1A1C                       		move.b	(a4)+,d5				; load next note
000E80F2 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000E80F6 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000E80F8 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000E80FE 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000E8102                            
000E8102                            ; ---------------------------------------------------------------------------
000E8102                            ; Note to PCM frequency conversion table
000E8102                            ; ---------------------------------------------------------------------------
000E8102                            ; The octave numbers below assume the samples are playing a default pitch/note
000E8102                            ; of C3 (A5)
000E8102                            ; ---------------------------------------------------------------------------
000E8102                            
000E8102                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000E8102                            
000E8102 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000E811A 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000E8132 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000E814A 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000E8162 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000E817A 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000E8192 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000E81AA 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000E81C2                            
000E81C2                            ; ---------------------------------------------------------------------------
000E81C2                            ; Writing the sample to Dual PCM
000E81C2                            ; ---------------------------------------------------------------------------
000E81C2                            
000E81C2                            SDAC_Timer:
000E81C2 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000E81C6                            
000E81C6                            SDAC_PlayNote:
000E81C6 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000E81CA                            
000E81CA                            	SDAC_MuteNote:
000E81CA 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000E81D0 4A2D 0022                  	tst.b	$22(a5)
000E81D4 6B00                       	bmi.s	SDAC_Rest
000E81D6 1015                       		move.b	(a5),d0					; load flags
000E81D8 0800 0004                  		btst	#$04,d0					; is soft key set?
000E81DC 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000E81DE E610                       		roxr.b	#$03,d0					; rotate around
000E81E0 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000E81E4 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000E81E6 7000                       		moveq	#$00,d0					; clear d0
000E81E8 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000E81EC D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000E81EE D040                       		add.w	d0,d0					; ''
000E81F0 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000E81F6 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000E81FA                            
000E81FA                            SDAC_Rest:
000E81FA 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000E81FC 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000E8202 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000E8208 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000E820E 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000E8210 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000E8216 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000E821C                            
000E821C                            SDAC_NotePCM2:
000E821C 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E822E 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000E8230 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8232 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8234 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000E8236 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8238 12DC                       		move.b	(a4)+,(a1)+				; ''
000E823A 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000E823C 12DC                       		move.b	(a4)+,(a1)+				; ''
000E823E 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8240 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000E8242 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8244 12DC                       		move.b	(a4)+,(a1)+				; ''
000E8246 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000E8248 33FC 0000 00A1 1100        		startZ80_S1
000E8250                            
000E8250                            SDAC_SoftKey:
000E8250                            
000E8250                            	SDAC_Frequency:
000E8250                            
000E8250 102D 0009                  		move.b	$09(a5),d0				; load current volume
000E8254 7200                       	moveq	#$00,d1				; EXTRA
000E8256 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000E825A                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000E825A                            ;	move.b	(a0,d1.w),d1			; EXTRA
000E825A D201                       	add.b	d1,d1
000E825C D001                       	add.b	d1,d0
000E825E                            
000E825E 1200                       		move.b	d0,d1					; copy volume to d1
000E8260 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000E8262 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000E8264                            
000E8264                            SDAC_ValidVolume:
000E8264 B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000E8268 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000E826A 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000E826E 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000E8270 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000E8276 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000E827C 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000E8282 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000E8284 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000E828A                            
000E828A                            SDAC_VolumePCM2:
000E828A 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E829C 1080                       		move.b	d0,(a0)					; change PCM volume
000E829E 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000E82A0 33FC 0000 00A1 1100        		startZ80_S1
000E82A8                            
000E82A8                            SDAC_NoVolume:
000E82A8                            
000E82A8 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000E82AC 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000E82B0 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000E82B2 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000E82B6 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000E82BA 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000E82BE 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000E82C0 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000E82C2 12DC                       		move.b	(a4)+,(a1)+				; ''
000E82C4 12DC                       		move.b	(a4)+,(a1)+				; ''
000E82C6 101C                       		move.b	(a4)+,d0				; ''
000E82C8 E208                       		lsr.b	#$01,d0					; ''
000E82CA 12C0                       		move.b	d0,(a1)+				; ''
000E82CC 4259                       		clr.w	(a1)+					; clear modulation frequency
000E82CE                            
000E82CE                            SDAC_NoResetModulation:
000E82CE DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000E82D2 6000                       		bra.s	SDAC_WriteFrequency			; continue
000E82D4                            
000E82D4                            ; ---------------------------------------------------------------------------
000E82D4                            ; Holding a note...
000E82D4                            ; ---------------------------------------------------------------------------
000E82D4                            
000E82D4                            SDAC_HoldNote:
000E82D4 1015                       		move.b	(a5),d0					; load flags
000E82D6 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000E82DA 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000E82DE                            
000E82DE 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000E82E2 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000E82E4 7A00                       	moveq	#$00,d5				; EXTRA
000E82E6 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000E82EA 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000E82EE                            
000E82EE                            	SDAC_NoUpdate:				; EXTRA
000E82EE 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000E82F2 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000E82F6                            
000E82F6                            	; d6 = frequency
000E82F6                            
000E82F6                            SDAC_WriteFrequency:
000E82F6 102D 001E                  		move.b	$1E(a5),d0				; load detune
000E82FA 4880                       		ext.w	d0					; sign extend to word
000E82FC D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000E82FE 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000E8302 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000E8304 4440                       		neg.w	d0					; reverse
000E8306                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000E8306                            
000E8306                            SDAC_NoReverse:
000E8306                            	;	move.w	d0,d3					; copy to d3
000E8306                            	;	smi	d2					; set extend byte if value is negative
000E8306                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000E8306                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000E8306                            	;	move.b	d3,d5					; load fraction to d5
000E8306                            	;	asr.l	#$08,d3					; divide by 100
000E8306                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000E8306                            	;	move.b	(sp),d4					; ''
000E8306                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000E8306                            	;	move.b	(sp),d1					; ''
000E8306                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000E8306                            								; ...index, but interrupts could be a problem).
000E8306                            	; d0 = XXXX.DD
000E8306                            	; d1 = XXQQ.XX
000E8306                            	; d2 = QQXX.XX
000E8306                            	; d3 = XXVV.XX
000E8306                            	; d4 = VVXX.XX
000E8306                            	; d5 = XXXX.OO
000E8306                            
000E8306 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000E8308 1200                       		move.b	d0,d1
000E830A E048                       		lsr.w	#$08,d0
000E830C 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000E8312 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000E8314 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E8326                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000E8326                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000E8326                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000E8326                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000E8326                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000E8326                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000E8326                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000E8326                            
000E8326 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000E832C 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000E8332 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000E8338 33FC 0000 00A1 1100        		startZ80_S1
000E8340                            
000E8340                            SDAC_Return:
000E8340 4E75                       		rts						; return
000E8342                            
000E8342                            SDAC_FrequePCM2:
000E8342 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E8354                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000E8354                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000E8354                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000E8354                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000E8354                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000E8354                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000E8354                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000E8354                            
000E8354 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000E835A 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000E8360 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000E8366 33FC 0000 00A1 1100        		startZ80_S1
000E836E 4E75                       		rts						; return
000E8370                            
000E8370                            ; ===========================================================================
000E8370                            ; ---------------------------------------------------------------------------
000E8370                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000E8370                            ; ---------------------------------------------------------------------------
000E8370                            
000E8370                            SFM_CheckMute:
000E8370 4A2E 000E                  	tst.b	$0E(a6)
000E8374 6600                       	bne.s	S71CCA_NoCHG
000E8376 102D 0021                  	move.b	$21(a5),d0
000E837A B02D 0022                  	cmp.b	$22(a5),d0
000E837E 6700                       	beq.s	S71CCA_NoCHG
000E8380 4A00                       	tst.b	d0
000E8382 6A00                       	bpl.s	S71CCA_NoMute
000E8384 4EBA 0000                  	jsr	sub_726FE(pc)
000E8388 122D 000A                  	move.b	$0A(a5),d1
000E838C 0201 003F                  	andi.b	#%00111111,d1
000E8390 103C 00B4                  	move.b	#$B4,d0
000E8394 4EB9 0000 0000             	jsr	loc_72716
000E839A 08D5 0006                  	bset.b	#$06,(a5)
000E839E 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000E83A4                            
000E83A4                            S71CCA_NoCHG:
000E83A4 4E75                       	rts
000E83A6                            
000E83A6                            S71CCA_NoMute:
000E83A6 1B40 0022                  	move.b	d0,$22(a5)
000E83AA 102D 000B                  	move.b	$0B(a5),d0
000E83AE 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000E83B2                            ;	jsr	loc_726E2(pc)
000E83B2 122D 000A                  	move.b	$0A(a5),d1
000E83B6 103C 00B4                  	move.b	#$B4,d0
000E83BA 4EB9 0000 0000             	jsr	loc_72716
000E83C0 08D5 0006                  	bset.b	#$06,(a5)
000E83C4 4E75                       	rts
000E83C6                            
000E83C6                            ; ===========================================================================
000E83C6                            ; ---------------------------------------------------------------------------
000E83C6                            ; Subroutine to run an FM channel
000E83C6                            ; ---------------------------------------------------------------------------
000E83C6                            
000E83C6                            sub_71CCA:				; XREF: sub_71B4C
000E83C6 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000E83C8                            
000E83C8 532D 000E                  		subq.b	#1,$E(a5)
000E83CC 6600                       		bne.s	loc_71CE0
000E83CE 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000E83D2 0895 0004                  		bclr	#4,(a5)
000E83D6 4EBA 0000                  		jsr	sub_71CEC(pc)
000E83DA 4EBA 0000                  		jsr	sub_71E18(pc)
000E83DE 6000 0000                  		bra.w	loc_726E2
000E83E2                            ; ===========================================================================
000E83E2                            
000E83E2                            loc_71CE0:
000E83E2 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000E83E6 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000E83E8 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000E83EE 7A00                       	moveq	#$00,d5				; EXTRA
000E83F0 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000E83F4 0405 0080                  	subi.b	#$80,d5				; EXTRA
000E83F8 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000E83FA 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000E8400 6000 0000                  	bra.w	loc_71E24			; EXTRA
000E8404                            
000E8404                            	SFM_NoUpdate:				; EXTRA
000E8404 4EBA 0000                  		jsr	sub_71D9E(pc)
000E8408 4EBA 0000                  		jsr	sub_71DC6(pc)
000E840C 6000 0000                  		bra.w	loc_71E24
000E8410                            ; End of function sub_71CCA
000E8410                            
000E8410                            
000E8410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8410                            
000E8410                            
000E8410                            sub_71CEC:				; XREF: sub_71CCA
000E8410 286D 0004                  		movea.l	4(a5),a4
000E8414 0895 0001                  		bclr	#1,(a5)
000E8418                            
000E8418                            loc_71CF4:
000E8418 7A00                       		moveq	#0,d5
000E841A 1A1C                       		move.b	(a4)+,d5
000E841C 0C05 00E0                  		cmpi.b	#-$20,d5
000E8420 6500                       		bcs.s	loc_71D04
000E8422 4EBA 0000                  		jsr	sub_72A5A(pc)
000E8426 60F0                       		bra.s	loc_71CF4
000E8428                            ; ===========================================================================
000E8428                            
000E8428                            loc_71D04:
000E8428 4EBA 0000                  		jsr	sub_726FE(pc)
000E842C 4A05                       		tst.b	d5
000E842E 6A00                       		bpl.s	loc_71D1A
000E8430 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000E8434 4EBA 0000                  		jsr	sub_71D22(pc)
000E8438 1A1C                       		move.b	(a4)+,d5
000E843A 6A00                       		bpl.s	loc_71D1A
000E843C 534C                       		subq.w	#1,a4
000E843E 6000 0000                  		bra.w	sub_71D60
000E8442                            ; ===========================================================================
000E8442                            
000E8442                            loc_71D1A:
000E8442 4EBA 0000                  		jsr	sub_71D40(pc)
000E8446 6000 0000                  		bra.w	sub_71D60
000E844A                            ; End of function sub_71CEC
000E844A                            
000E844A                            
000E844A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E844A                            
000E844A                            
000E844A                            sub_71D22:				; XREF: sub_71CEC
000E844A 0405 0080                  		subi.b	#$80,d5
000E844E 6700                       		beq.s	loc_71D58
000E8450                            
000E8450                            	SFM_UpdateFreque:			; EXTRA
000E8450 DA2D 0008                  		add.b	8(a5),d5
000E8454 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000E8458 0245 007F                  		andi.w	#$7F,d5
000E845C E34D                       		lsl.w	#1,d5
000E845E 41FA 0000                  		lea	word_72790(pc),a0
000E8462 3C30 5000                  		move.w	(a0,d5.w),d6
000E8466 3B46 0010                  		move.w	d6,$10(a5)
000E846A 4E75                       		rts	
000E846C                            ; End of function sub_71D22
000E846C                            
000E846C                            
000E846C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E846C                            
000E846C                            
000E846C                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000E846C 1005                       		move.b	d5,d0
000E846E 122D 0002                  		move.b	2(a5),d1
000E8472                            
000E8472                            loc_71D46:
000E8472 5301                       		subq.b	#1,d1
000E8474 6700                       		beq.s	loc_71D4E
000E8476 D005                       		add.b	d5,d0
000E8478 60F8                       		bra.s	loc_71D46
000E847A                            ; ===========================================================================
000E847A                            
000E847A                            loc_71D4E:
000E847A 1B40 000F                  		move.b	d0,$F(a5)
000E847E 1B40 000E                  		move.b	d0,$E(a5)
000E8482 4E75                       		rts	
000E8484                            ; End of function sub_71D40
000E8484                            
000E8484                            ; ===========================================================================
000E8484                            
000E8484                            loc_71D58:				; XREF: sub_71D22
000E8484 08D5 0001                  		bset	#1,(a5)
000E8488 426D 0010                  		clr.w	$10(a5)
000E848C                            
000E848C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E848C                            
000E848C                            
000E848C                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000E848C 2B4C 0004                  		move.l	a4,4(a5)
000E8490 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000E8496 0815 0004                  		btst	#4,(a5)
000E849A 6600                       		bne.s	locret_71D9C
000E849C 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000E84A2 422D 000C                  		clr.b	$C(a5)
000E84A6 0815 0003                  		btst	#3,(a5)
000E84AA 6700                       		beq.s	locret_71D9C
000E84AC 206D 0014                  		movea.l	$14(a5),a0
000E84B0 1B58 0018                  		move.b	(a0)+,$18(a5)
000E84B4 1B58 0019                  		move.b	(a0)+,$19(a5)
000E84B8 1B58 001A                  		move.b	(a0)+,$1A(a5)
000E84BC 1018                       		move.b	(a0)+,d0
000E84BE E208                       		lsr.b	#1,d0
000E84C0 1B40 001B                  		move.b	d0,$1B(a5)
000E84C4 426D 001C                  		clr.w	$1C(a5)
000E84C8                            
000E84C8                            locret_71D9C:
000E84C8 4E75                       		rts	
000E84CA                            ; End of function sub_71D60
000E84CA                            
000E84CA                            
000E84CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E84CA                            
000E84CA                            
000E84CA                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000E84CA 4A2D 0012                  		tst.b	$12(a5)
000E84CE 6700                       		beq.s	locret_71DC4
000E84D0 532D 0012                  		subq.b	#1,$12(a5)
000E84D4 6600                       		bne.s	locret_71DC4
000E84D6 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000E84DA 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000E84DC 08D5 0001                  		bset	#1,(a5)
000E84E0 4A2D 0001                  		tst.b	1(a5)
000E84E4 6B00 0000                  		bmi.w	loc_71DBE
000E84E8 4EBA 0000                  		jsr	sub_726FE(pc)
000E84EC 584F                       		addq.w	#4,sp
000E84EE 4E75                       		rts	
000E84F0                            ; ===========================================================================
000E84F0                            
000E84F0                            loc_71DBE:
000E84F0 4EBA 0000                  		jsr	sub_729A0(pc)
000E84F4 584F                       		addq.w	#4,sp
000E84F6                            
000E84F6                            locret_71DC4:
000E84F6 4E75                       		rts	
000E84F8                            ; End of function sub_71D9E
000E84F8                            
000E84F8                            SDCR_StopPCM:
000E84F8 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E850A 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E8510 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000E8516 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8518 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E851A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E851C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E851E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8520 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8522 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8524 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8526 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8528 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E852A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E852C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E852E 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E8536 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E853C 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000E8542 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8544 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8546 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8548 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E854A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E854C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E854E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8550 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8552 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8554 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E8556 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8558 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E855A 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E8562 33FC 0000 00A1 1100        		startZ80_S1
000E856A 584F                       		addq.w	#$04,sp						; CHG: skip return address
000E856C 4E75                       		rts							; CHG: return
000E856E                            
000E856E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E856E                            
000E856E                            
000E856E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000E856E 0815 0003                  		btst	#3,(a5)
000E8572 6700                       		beq.s	locret_71E16
000E8574 4A2D 0018                  		tst.b	$18(a5)
000E8578 6700                       		beq.s	loc_71DDA
000E857A 532D 0018                  		subq.b	#1,$18(a5)
000E857E 584F                       		addq.w	#$04,sp						; CHG: skip return address
000E8580 4E75                       		rts	
000E8582                            ; ===========================================================================
000E8582                            
000E8582                            loc_71DDA:
000E8582 532D 0019                  		subq.b	#1,$19(a5)
000E8586 6700                       		beq.s	loc_71DE2
000E8588 584F                       		addq.w	#$04,sp						; CHG: skip return address
000E858A 4E75                       		rts	
000E858C                            ; ===========================================================================
000E858C                            
000E858C                            loc_71DE2:
000E858C 206D 0014                  		movea.l	$14(a5),a0
000E8590 1B68 0001 0019             		move.b	1(a0),$19(a5)
000E8596 4A2D 001B                  		tst.b	$1B(a5)
000E859A 6600                       		bne.s	loc_71DFE
000E859C 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000E85A2 442D 001A                  		neg.b	$1A(a5)
000E85A6 584F                       		addq.w	#$04,sp						; CHG: skip return address
000E85A8 4E75                       		rts	
000E85AA                            ; ===========================================================================
000E85AA                            
000E85AA                            loc_71DFE:
000E85AA 532D 001B                  		subq.b	#1,$1B(a5)
000E85AE 1C2D 001A                  		move.b	$1A(a5),d6
000E85B2 4886                       		ext.w	d6
000E85B4 DC6D 001C                  		add.w	$1C(a5),d6
000E85B8 3B46 001C                  		move.w	d6,$1C(a5)
000E85BC DC6D 0010                  		add.w	$10(a5),d6
000E85C0 4E75                       		rts							; CHG: return (don't skip)
000E85C2                            
000E85C2                            locret_71E16:
000E85C2 584F                       		addq.w	#$04,sp						; CHG: skip return address
000E85C4 4E75                       		rts	
000E85C6                            ; End of function sub_71DC6
000E85C6                            
000E85C6                            
000E85C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E85C6                            
000E85C6                            
000E85C6                            sub_71E18:				; XREF: sub_71CCA
000E85C6 0815 0001                  		btst	#1,(a5)
000E85CA 6600                       		bne.s	locret_71E48
000E85CC 3C2D 0010                  		move.w	$10(a5),d6
000E85D0 6700                       		beq.s	loc_71E4A
000E85D2                            
000E85D2                            loc_71E24:				; XREF: sub_71CCA
000E85D2 102D 001E                  		move.b	$1E(a5),d0
000E85D6 4880                       		ext.w	d0
000E85D8 DC40                       		add.w	d0,d6
000E85DA 0815 0002                  		btst	#2,(a5)
000E85DE 6600                       		bne.s	locret_71E48
000E85E0 4A2E 000E                  	tst.b	$0E(a6)
000E85E4 6600                       	bne.s	locret_71E48_2
000E85E6 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E85EA 6600                       	bne.s	locret_71E48
000E85EC                            
000E85EC                            	locret_71E48_2:
000E85EC 3206                       		move.w	d6,d1
000E85EE E049                       		lsr.w	#8,d1
000E85F0 103C 00A4                  		move.b	#-$5C,d0
000E85F4 4EBA 0000                  		jsr	sub_72722(pc)
000E85F8 1206                       		move.b	d6,d1
000E85FA 103C 00A0                  		move.b	#-$60,d0
000E85FE 4EBA 0000                  		jsr	sub_72722(pc)
000E8602                            
000E8602                            locret_71E48:
000E8602 4E75                       		rts	
000E8604                            ; ===========================================================================
000E8604                            
000E8604                            loc_71E4A:
000E8604 08D5 0001                  		bset	#1,(a5)
000E8608 4E75                       		rts	
000E860A                            ; End of function sub_71E18
000E860A                            
000E860A                            ; ===========================================================================
000E860A                            
000E860A                            loc_71E50:				; XREF: sub_71B4C
000E860A 6B00                       		bmi.s	loc_71E94
000E860C 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000E8612 6700 0000                  		beq.w	loc_71EFE
000E8616 1D7C 0002 0003             		move.b	#2,3(a6)
000E861C 7602                       		moveq	#2,d3
000E861E 103C 00B4                  		move.b	#-$4C,d0
000E8622 7200                       		moveq	#0,d1
000E8624                            
000E8624                            loc_71E6A:
000E8624 4EBA 0000                  		jsr	sub_7272E(pc)
000E8628 4EBA 0000                  		jsr	sub_72764(pc)
000E862C 5200                       		addq.b	#1,d0
000E862E 51CB FFF4                  		dbf	d3,loc_71E6A
000E8632                            
000E8632 7602                       		moveq	#2,d3
000E8634 7028                       		moveq	#$28,d0
000E8636                            
000E8636                            loc_71E7C:
000E8636 1203                       		move.b	d3,d1
000E8638 4EBA 0000                  		jsr	sub_7272E(pc)
000E863C 5801                       		addq.b	#4,d1
000E863E 4EBA 0000                  		jsr	sub_7272E(pc)
000E8642 51CB FFF2                  		dbf	d3,loc_71E7C
000E8646                            
000E8646 4EBA 0000                  		jsr	sub_729B6(pc)
000E864A 6000 F9CE                  		bra.w	loc_71C44
000E864E                            ; ===========================================================================
000E864E                            
000E864E                            loc_71E94:				; XREF: loc_71E50
000E864E 422E 0003                  		clr.b	3(a6)
000E8652 7630                       		moveq	#$30,d3
000E8654 4BEE 0040                  		lea	$40(a6),a5
000E8658 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000E865A                            
000E865A                            loc_71EA0:
000E865A 0815 0007                  		btst	#7,(a5)
000E865E 6700                       		beq.s	loc_71EB8
000E8660 0815 0002                  		btst	#2,(a5)
000E8664 6600                       		bne.s	loc_71EB8
000E8666 4A2E 000E                  	tst.b	$0E(a6)
000E866A 6600                       	bne.s	loc_71EB8_2
000E866C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E8670 6600                       	bne.s	loc_71EB8
000E8672                            
000E8672                            	loc_71EB8_2:
000E8672 103C 00B4                  		move.b	#-$4C,d0
000E8676 122D 000A                  		move.b	$A(a5),d1
000E867A 4EBA 0000                  		jsr	sub_72722(pc)
000E867E                            
000E867E                            loc_71EB8:
000E867E DAC3                       		adda.w	d3,a5
000E8680 51CC FFD8                  		dbf	d4,loc_71EA0
000E8684                            
000E8684 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000E8688 7802                       		moveq	#2,d4
000E868A                            
000E868A                            loc_71EC4:
000E868A 0815 0007                  		btst	#7,(a5)
000E868E 6700                       		beq.s	loc_71EDC
000E8690 0815 0002                  		btst	#2,(a5)
000E8694 6600                       		bne.s	loc_71EDC
000E8696 4A2E 000E                  	tst.b	$0E(a6)
000E869A 6600                       	bne.s	loc_71EDC_2
000E869C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E86A0 6600                       	bne.s	loc_71EDC
000E86A2                            
000E86A2                            	loc_71EDC_2:
000E86A2 103C 00B4                  		move.b	#-$4C,d0
000E86A6 122D 000A                  		move.b	$A(a5),d1
000E86AA 4EBA 0000                  		jsr	sub_72722(pc)
000E86AE                            
000E86AE                            loc_71EDC:
000E86AE DAC3                       		adda.w	d3,a5
000E86B0 51CC FFD8                  		dbf	d4,loc_71EC4
000E86B4                            
000E86B4 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000E86B8 0815 0007                  		btst	#7,(a5)
000E86BC 6700                       		beq.s	loc_71EFE
000E86BE 0815 0002                  		btst	#2,(a5)
000E86C2 6600                       		bne.s	loc_71EFE
000E86C4 4A2E 000E                  	tst.b	$0E(a6)
000E86C8 6600                       	bne.s	loc_71EFE_2
000E86CA 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E86CE 6600                       	bne.s	loc_71EFE
000E86D0                            
000E86D0                            	loc_71EFE_2:
000E86D0 103C 00B4                  		move.b	#-$4C,d0
000E86D4 122D 000A                  		move.b	$A(a5),d1
000E86D8 4EBA 0000                  		jsr	sub_72722(pc)
000E86DC                            
000E86DC                            loc_71EFE:
000E86DC 6000 F93C                  		bra.w	loc_71C44
000E86E0                            
000E86E0                            ; ---------------------------------------------------------------------------
000E86E0                            ; Subroutine to	play a sound or	music track
000E86E0                            ; ---------------------------------------------------------------------------
000E86E0                            
000E86E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E86E0                            
000E86E0                            
000E86E0                            Sound_Play:				; XREF: sub_71B4C
000E86E0 2079 000E 7C86             		movea.l	(Go_SoundTypes).l,a0
000E86E6 43EE 000A                  		lea	$A(a6),a1	; load music track number
000E86EA 1616                       		move.b	0(a6),d3
000E86EC 7802                       		moveq	#2,d4
000E86EE                            
000E86EE                            loc_71F12:
000E86EE 1011                       		move.b	(a1),d0		; move track number to d0
000E86F0 1200                       		move.b	d0,d1
000E86F2 4219                       		clr.b	(a1)+
000E86F4 0400 0081                  		subi.b	#$81,d0
000E86F8 6500                       		bcs.s	loc_71F3E
000E86FA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000E8700 6700                       		beq.s	loc_71F2C
000E8702 1D41 000A                  		move.b	d1,$A(a6)
000E8706 6000                       		bra.s	loc_71F3E
000E8708                            ; ===========================================================================
000E8708                            
000E8708                            loc_71F2C:
000E8708 0240 007F                  		andi.w	#$7F,d0
000E870C 1430 0000                  		move.b	(a0,d0.w),d2
000E8710 B403                       		cmp.b	d3,d2
000E8712 6500                       		bcs.s	loc_71F3E
000E8714 1602                       		move.b	d2,d3
000E8716 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000E871A                            
000E871A                            loc_71F3E:
000E871A 51CC FFD2                  		dbf	d4,loc_71F12
000E871E                            
000E871E 4A03                       		tst.b	d3
000E8720 6B00                       		bmi.s	locret_71F4A
000E8722 1C83                       		move.b	d3,0(a6)
000E8724                            
000E8724                            locret_71F4A:
000E8724 4E75                       		rts	
000E8726                            ; End of function Sound_Play
000E8726                            
000E8726                            
000E8726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8726                            
000E8726                            
000E8726                            Sound_ChkValue:				; XREF: sub_71B4C
000E8726 7E00                       		moveq	#0,d7
000E8728 1E2E 0009                  		move.b	9(a6),d7
000E872C 6700 0000                  		beq.w	Sound_E4
000E8730 6A00                       		bpl.s	locret_71F8C
000E8732 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000E8738 0C07 009F                  		cmpi.b	#$9F,d7
000E873C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000E8740 0C07 00A0                  		cmpi.b	#$A0,d7
000E8744 6500 0000                  		bcs.w	locret_71F8C
000E8748 0C07 00CF                  		cmpi.b	#$CF,d7
000E874C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000E8750 0C07 00D0                  		cmpi.b	#$D0,d7
000E8754 6500 0000                  		bcs.w	locret_71F8C
000E8758 0C07 00E0                  		cmpi.b	#$E0,d7
000E875C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000E8760 0C07 00E4                  		cmpi.b	#$E4,d7
000E8764 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000E8766                            
000E8766                            locret_71F8C:
000E8766 4E75                       		rts	
000E8768                            ; ===========================================================================
000E8768                            
000E8768                            Sound_E0toE4:				; XREF: Sound_ChkValue
000E8768 0407 00E0                  		subi.b	#$E0,d7
000E876C E54F                       		lsl.w	#2,d7
000E876E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000E8772                            ; ===========================================================================
000E8772                            
000E8772                            Sound_ExIndex:
000E8772 6000 0000                  		bra.w	Sound_E0
000E8776                            ; ===========================================================================
000E8776 6000 0000                  		bra.w	Sound_E1
000E877A                            ; ===========================================================================
000E877A 6000 0000                  		bra.w	Sound_E2
000E877E                            ; ===========================================================================
000E877E 6000 0000                  		bra.w	Sound_E3
000E8782                            ; ===========================================================================
000E8782 6000 0000                  		bra.w	Sound_E4
000E8786                            ; ===========================================================================
000E8786                            ; ---------------------------------------------------------------------------
000E8786                            ; Play "Say-gaa" PCM sound
000E8786                            ; ---------------------------------------------------------------------------
000E8786                            
000E8786                            Sound_E1:
000E8786 33FC 0100 00A1 1100 0839+  		stopZ80_S1						; MJ: request Z80 stop "ON"
000E8798 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000E879E 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000E87A4 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000E87A8 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000E87AE 3604                       		move.w	d4,d3					; MJ: get lower word size
000E87B0 4844                       		swap	d4					; MJ: get upper word size
000E87B2                            
000E87B2                            PlayPCM_Loop:
000E87B2 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000E87B4 702B                       		moveq	#$2B,d0					; MJ: set delay time
000E87B6 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000E87BA 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000E87BE 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000E87C2 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000E87C6 584F                       		addq.w	#$04,sp					; MJ: skip return address
000E87C8 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000E87CA 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000E87CC 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000E87CE 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000E87D2 33FC 0000 00A1 1100        		startZ80_S1					; MJ: request Z80 stop "OFF"
000E87DA 4E75                       		rts						; MJ: return
000E87DC                            
000E87DC                            ; ===========================================================================
000E87DC                            ; ---------------------------------------------------------------------------
000E87DC                            ; Play music track $81-$9F
000E87DC                            ; ---------------------------------------------------------------------------
000E87DC                            
000E87DC                            Sound_81to9F:
000E87DC 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E87EE 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E87F4 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000E87FA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E87FC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E87FE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8800 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E8802 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8804 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8806 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8808 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E880A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E880C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E880E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8810 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8812 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E881A 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E8820 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000E8826 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8828 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E882A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E882C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E882E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8830 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8832 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8834 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8836 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8838 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E883A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E883C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E883E 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E8846 33FC 0000 00A1 1100        		startZ80_S1
000E884E                            
000E884E 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000E8852 6600                       		bne.s	loc_72024	; if not, branch
000E8854 4A2E 0027                  		tst.b	$27(a6)
000E8858 6600 0000                  		bne.w	loc_721B6
000E885C 4BEE 0040                  		lea	$40(a6),a5
000E8860 700A                       		moveq	#10,d0					; MJ: number of channels in total
000E8862                            
000E8862                            loc_71FE6:
000E8862 0895 0002                  		bclr	#2,(a5)
000E8866 DAFC 0030                  		adda.w	#$30,a5
000E886A 51C8 FFF6                  		dbf	d0,loc_71FE6
000E886E                            
000E886E 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000E8872 7005                       		moveq	#5,d0
000E8874                            
000E8874                            loc_71FF8:
000E8874 0895 0007                  		bclr	#7,(a5)
000E8878 DAFC 0030                  		adda.w	#$30,a5
000E887C 51C8 FFF6                  		dbf	d0,loc_71FF8
000E8880 4216                       		clr.b	0(a6)
000E8882 204E                       		movea.l	a6,a0
000E8884 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000E8888 303C 0087                  		move.w	#$87,d0
000E888C                            
000E888C                            loc_72012:
000E888C 22D8                       		move.l	(a0)+,(a1)+
000E888E 51C8 FFFC                  		dbf	d0,loc_72012
000E8892                            
000E8892 1D7C 0080 0027             		move.b	#$80,$27(a6)
000E8898 4216                       		clr.b	0(a6)
000E889A 6000                       		bra.s	loc_7202C
000E889C                            ; ===========================================================================
000E889C                            
000E889C                            loc_72024:
000E889C 422E 0027                  		clr.b	$27(a6)
000E88A0 422E 0026                  		clr.b	$26(a6)
000E88A4                            
000E88A4                            loc_7202C:
000E88A4 4EBA 0000                  		jsr	sub_725CA(pc)
000E88A8                            
000E88A8 2879 000E 7C96             		movea.l	(off_719A0).l,a4
000E88AE 0407 0081                  		subi.b	#$81,d7
000E88B2 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000E88B8 2879 000E 7C8E             		movea.l	(Go_MusicIndex).l,a4
000E88BE E54F                       		lsl.w	#2,d7
000E88C0 2874 7000                  		movea.l	(a4,d7.w),a4
000E88C4 7000                       		moveq	#0,d0
000E88C6 3014                       		move.w	(a4),d0
000E88C8 D08C                       		add.l	a4,d0
000E88CA 2D40 0018                  		move.l	d0,$18(a6)
000E88CE 102C 0005                  		move.b	5(a4),d0
000E88D2 1D40 0028                  		move.b	d0,$28(a6)
000E88D6 4A2E 002A                  		tst.b	$2A(a6)
000E88DA 6700                       		beq.s	loc_72068
000E88DC 102E 0029                  		move.b	$29(a6),d0
000E88E0                            
000E88E0                            loc_72068:
000E88E0 1D40 0002                  		move.b	d0,2(a6)
000E88E4 1D40 0001                  		move.b	d0,1(a6)
000E88E8 7200                       		moveq	#0,d1
000E88EA 264C                       		movea.l	a4,a3
000E88EC 5C4C                       		addq.w	#6,a4
000E88EE 7E00                       		moveq	#0,d7
000E88F0 1E2B 0002                  		move.b	2(a3),d7
000E88F4 6700 0000                  		beq.w	loc_72114
000E88F8 5307                       		subq.b	#1,d7
000E88FA 123C 00C0                  		move.b	#-$40,d1
000E88FE 182B 0004                  		move.b	4(a3),d4
000E8902 7C30                       		moveq	#$30,d6
000E8904 1A3C 0001                  		move.b	#1,d5
000E8908 43EE 0040                  		lea	$40(a6),a1
000E890C 45FA 0000                  		lea	byte_721BA(pc),a2
000E8910                            
000E8910                            loc_72098:
000E8910 08D1 0007                  		bset	#7,(a1)
000E8914 135A 0001                  		move.b	(a2)+,1(a1)
000E8918 1344 0002                  		move.b	d4,2(a1)
000E891C 1346 000D                  		move.b	d6,$D(a1)
000E8920 1341 000A                  		move.b	d1,$A(a1)
000E8924 1345 000E                  		move.b	d5,$E(a1)
000E8928 7000                       		moveq	#0,d0
000E892A 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000E892E 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000E8934 301C                       		move.w	(a4)+,d0
000E8936 D08B                       		add.l	a3,d0
000E8938 2340 0004                  		move.l	d0,4(a1)
000E893C 335C 0008                  		move.w	(a4)+,8(a1)
000E8940 D2C6                       		adda.w	d6,a1
000E8942 51CF FFCC                  		dbf	d7,loc_72098
000E8946 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000E8948 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000E894C 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000E8952 6600                       		bne.s	loc_720D8
000E8954                            	;	moveq	#$2B,d0					; MJ: removed...
000E8954 7200                       		moveq	#0,d1
000E8956 4EBA 0000                  		jsr	sub_7272E(pc)
000E895A 6000 0000                  		bra.w	loc_72114
000E895E                            ; ===========================================================================
000E895E                            
000E895E                            loc_720D8:
000E895E 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000E8962                            
000E8962                            	; --- Key off FM 6 ---
000E8962                            
000E8962 7028                       		moveq	#$28,d0
000E8964 7206                       		moveq	#6,d1
000E8966 4EBA 0000                  		jsr	sub_7272E(pc)
000E896A                            
000E896A                            	; --- Sets FM 6 to mute ---
000E896A                            
000E896A 103C 0042                  		move.b	#$42,d0
000E896E 727F                       		moveq	#$7F,d1
000E8970 4EBA 0000                  		jsr	sub_72764(pc)
000E8974 103C 004A                  		move.b	#$4A,d0
000E8978 727F                       		moveq	#$7F,d1
000E897A 4EBA 0000                  		jsr	sub_72764(pc)
000E897E 103C 0046                  		move.b	#$46,d0
000E8982 727F                       		moveq	#$7F,d1
000E8984 4EBA 0000                  		jsr	sub_72764(pc)
000E8988 103C 004E                  		move.b	#$4E,d0
000E898C 727F                       		moveq	#$7F,d1
000E898E 4EBA 0000                  		jsr	sub_72764(pc)
000E8992 103C 00B6                  		move.b	#-$4A,d0
000E8996 123C 00C0                  		move.b	#-$40,d1
000E899A 4EBA 0000                  		jsr	sub_72764(pc)
000E899E                            
000E899E                            loc_72114:
000E899E 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000E89A0 7E00                       		moveq	#0,d7
000E89A2 1E2B 0003                  		move.b	3(a3),d7
000E89A6 6700                       		beq.s	loc_72154
000E89A8 5307                       		subq.b	#1,d7
000E89AA 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000E89AE 45FA 0000                  		lea	byte_721C2(pc),a2
000E89B2                            
000E89B2                            loc_72126:
000E89B2 08D1 0007                  		bset	#7,(a1)
000E89B6 135A 0001                  		move.b	(a2)+,1(a1)
000E89BA 1344 0002                  		move.b	d4,2(a1)
000E89BE 1346 000D                  		move.b	d6,$D(a1)
000E89C2 1345 000E                  		move.b	d5,$E(a1)
000E89C6 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000E89CC 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000E89D2 7000                       		moveq	#0,d0
000E89D4 301C                       		move.w	(a4)+,d0
000E89D6 D08B                       		add.l	a3,d0
000E89D8 2340 0004                  		move.l	d0,4(a1)
000E89DC 335C 0008                  		move.w	(a4)+,8(a1)
000E89E0 101C                       		move.b	(a4)+,d0
000E89E2 135C 000B                  		move.b	(a4)+,$B(a1)
000E89E6 D2C6                       		adda.w	d6,a1
000E89E8 51CF FFC8                  		dbf	d7,loc_72126
000E89EC                            
000E89EC                            loc_72154:
000E89EC 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000E89F0 7E05                       		moveq	#5,d7
000E89F2                            
000E89F2                            loc_7215A:
000E89F2 4A11                       		tst.b	(a1)
000E89F4 6A00 0000                  		bpl.w	loc_7217C
000E89F8 7000                       		moveq	#0,d0
000E89FA 1029 0001                  		move.b	1(a1),d0
000E89FE 6B00                       		bmi.s	loc_7216E
000E8A00 5500                       		subq.b	#2,d0
000E8A02 E508                       		lsl.b	#2,d0
000E8A04 6000                       		bra.s	loc_72170
000E8A06                            ; ===========================================================================
000E8A06                            
000E8A06                            loc_7216E:
000E8A06 E608                       		lsr.b	#3,d0
000E8A08                            
000E8A08                            loc_72170:
000E8A08 41FA 0000                  		lea	dword_722CC(pc),a0
000E8A0C 2070 0000                  		movea.l	(a0,d0.w),a0
000E8A10 08D0 0002                  		bset	#2,(a0)
000E8A14                            
000E8A14                            loc_7217C:
000E8A14 D2C6                       		adda.w	d6,a1
000E8A16 51CF FFDA                  		dbf	d7,loc_7215A
000E8A1A                            
000E8A1A 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000E8A1E 6A00                       		bpl.s	loc_7218E
000E8A20 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000E8A26                            
000E8A26                            loc_7218E:
000E8A26 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000E8A2A 6A00                       		bpl.s	loc_7219A
000E8A2C 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000E8A32                            
000E8A32                            
000E8A32                            loc_7219A:
000E8A32 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000E8A36 7805                       		moveq	#5,d4
000E8A38                            
000E8A38                            loc_721A0:
000E8A38 4EBA 0000                  		jsr	sub_726FE(pc)
000E8A3C DAC6                       		adda.w	d6,a5
000E8A3E 51CC FFF8                  		dbf	d4,loc_721A0
000E8A42 7802                       		moveq	#2,d4
000E8A44                            
000E8A44                            loc_721AC:
000E8A44 4EBA 0000                  		jsr	sub_729A0(pc)
000E8A48 DAC6                       		adda.w	d6,a5
000E8A4A 51CC FFF8                  		dbf	d4,loc_721AC
000E8A4E                            
000E8A4E                            loc_721B6:
000E8A4E 584F                       		addq.w	#4,sp
000E8A50 4E75                       		rts	
000E8A52                            ; ===========================================================================
000E8A52 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000E8A5C 00                         		even
000E8A5C 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000E8A60                            		even
000E8A60                            ; ===========================================================================
000E8A60                            ; ---------------------------------------------------------------------------
000E8A60                            ; Play normal sound effect
000E8A60                            ; ---------------------------------------------------------------------------
000E8A60                            
000E8A60                            Sound_A0toCF:				; XREF: Sound_ChkValue
000E8A60 4A2E 0027                  		tst.b	$27(a6)
000E8A64 6600 0000                  		bne.w	loc_722C6
000E8A68 4A2E 0004                  		tst.b	4(a6)
000E8A6C 6600 0000                  		bne.w	loc_722C6
000E8A70 4A2E 0024                  		tst.b	$24(a6)
000E8A74 6600 0000                  		bne.w	loc_722C6
000E8A78 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000E8A7C 6600                       		bne.s	Sound_notB5	; if not, branch
000E8A7E 4A2E 002B                  		tst.b	$2B(a6)
000E8A82 6600                       		bne.s	loc_721EE
000E8A84 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000E8A88                            
000E8A88                            loc_721EE:
000E8A88 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000E8A8E                            
000E8A8E                            Sound_notB5:
000E8A8E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000E8A92 6600                       		bne.s	Sound_notA7	; if not, branch
000E8A94 4A2E 002C                  		tst.b	$2C(a6)
000E8A98 6600 0000                  		bne.w	locret_722C4
000E8A9C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000E8AA2                            
000E8AA2                            Sound_notA7:
000E8AA2 2079 000E 7C92             		movea.l	(Go_SoundIndex).l,a0
000E8AA8 0407 00A0                  		subi.b	#$A0,d7
000E8AAC E54F                       		lsl.w	#2,d7
000E8AAE 2670 7000                  		movea.l	(a0,d7.w),a3
000E8AB2 224B                       		movea.l	a3,a1
000E8AB4 7200                       		moveq	#0,d1
000E8AB6 3219                       		move.w	(a1)+,d1
000E8AB8 D28B                       		add.l	a3,d1
000E8ABA 1A19                       		move.b	(a1)+,d5
000E8ABC 1E19                       		move.b	(a1)+,d7
000E8ABE 5307                       		subq.b	#1,d7
000E8AC0 7C30                       		moveq	#$30,d6
000E8AC2                            
000E8AC2                            loc_72228:
000E8AC2 7600                       		moveq	#0,d3
000E8AC4 1629 0001                  		move.b	1(a1),d3
000E8AC8 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000E8ACA 1803                       		move.b	d3,d4
000E8ACC 6B00                       		bmi.s	loc_72244
000E8ACE 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000E8AD2 5543                       		subq.w	#2,d3
000E8AD4 E54B                       		lsl.w	#2,d3
000E8AD6 4BFA 0000                  		lea	dword_722CC(pc),a5
000E8ADA 2A75 3000                  		movea.l	(a5,d3.w),a5
000E8ADE 08D5 0002                  		bset	#2,(a5)
000E8AE2 6000                       		bra.s	loc_7226E
000E8AE4                            ; ===========================================================================
000E8AE4                            
000E8AE4                            loc_72244:
000E8AE4 E64B                       		lsr.w	#3,d3
000E8AE6 4BFA 0000                  		lea	dword_722CC(pc),a5
000E8AEA 2A75 3000                  		movea.l	(a5,d3.w),a5
000E8AEE 08D5 0002                  		bset	#2,(a5)
000E8AF2 0C04 00C0                  		cmpi.b	#$C0,d4
000E8AF6 6600                       		bne.s	loc_7226E
000E8AF8 1004                       		move.b	d4,d0
000E8AFA 0000 001F                  		ori.b	#$1F,d0
000E8AFE 13C0 00C0 0011             		move.b	d0,($C00011).l
000E8B04 0840 0005                  		bchg	#5,d0
000E8B08 13C0 00C0 0011             		move.b	d0,($C00011).l
000E8B0E                            
000E8B0E                            loc_7226E:
000E8B0E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000E8B12 244D                       		movea.l	a5,a2
000E8B14 700B                       		moveq	#$B,d0
000E8B16                            
000E8B16                            loc_72276:
000E8B16 429A                       		clr.l	(a2)+
000E8B18 51C8 FFFC                  		dbf	d0,loc_72276
000E8B1C                            
000E8B1C 3A99                       		move.w	(a1)+,(a5)
000E8B1E 1B45 0002                  		move.b	d5,2(a5)
000E8B22 7000                       		moveq	#0,d0
000E8B24 3019                       		move.w	(a1)+,d0
000E8B26 D08B                       		add.l	a3,d0
000E8B28 2B40 0004                  		move.l	d0,4(a5)
000E8B2C 3B59 0008                  		move.w	(a1)+,8(a5)
000E8B30 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000E8B34 1B46 000D                  		move.b	d6,$D(a5)
000E8B38 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000E8B3E 4A04                       		tst.b	d4
000E8B40 6B00                       		bmi.s	loc_722A8
000E8B42 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000E8B48 2B41 0020                  		move.l	d1,$20(a5)
000E8B4C                            
000E8B4C                            loc_722A8:
000E8B4C 51CF FF74                  		dbf	d7,loc_72228
000E8B50                            
000E8B50 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000E8B54 6A00                       		bpl.s	loc_722B8
000E8B56 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000E8B5C                            
000E8B5C                            loc_722B8:
000E8B5C 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000E8B60 6A00                       		bpl.s	locret_722C4
000E8B62 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000E8B68                            
000E8B68                            locret_722C4:
000E8B68 4E75                       		rts	
000E8B6A                            ; ===========================================================================
000E8B6A                            
000E8B6A                            loc_722C6:
000E8B6A 4216                       		clr.b	0(a6)
000E8B6C 4E75                       		rts	
000E8B6E                            ; ===========================================================================
000E8B6E 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000E8B72 0000 0000                  		dc.l 0
000E8B76 00FF F130                  		dc.l $FFF100+$30
000E8B7A 00FF F160                  		dc.l $FFF130+$30
000E8B7E 00FF F1C0                  		dc.l $FFF190+$30
000E8B82 00FF F1F0                  		dc.l $FFF1C0+$30
000E8B86 00FF F220                  		dc.l $FFF1F0+$30
000E8B8A 00FF F220                  		dc.l $FFF1F0+$30
000E8B8E 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000E8B92 0000 0000                  		dc.l 0
000E8B96 00FF F280                  		dc.l $FFF250+$30
000E8B9A 00FF F2B0                  		dc.l $FFF280+$30
000E8B9E 00FF F2E0                  		dc.l $FFF2B0+$30
000E8BA2 00FF F310                  		dc.l $FFF2E0+$30
000E8BA6 00FF F340                  		dc.l $FFF310+$30
000E8BAA 00FF F340                  		dc.l $FFF310+$30
000E8BAE                            ; ===========================================================================
000E8BAE                            ; ---------------------------------------------------------------------------
000E8BAE                            ; Play GHZ waterfall sound
000E8BAE                            ; ---------------------------------------------------------------------------
000E8BAE                            
000E8BAE                            Sound_D0toDF:				; XREF: Sound_ChkValue
000E8BAE 4A2E 0027                  		tst.b	$27(a6)
000E8BB2 6600 0000                  		bne.w	locret_723C6
000E8BB6 4A2E 0004                  		tst.b	4(a6)
000E8BBA 6600 0000                  		bne.w	locret_723C6
000E8BBE 4A2E 0024                  		tst.b	$24(a6)
000E8BC2 6600 0000                  		bne.w	locret_723C6
000E8BC6 2079 000E 7C8A             		movea.l	(Go_SoundD0).l,a0
000E8BCC 0407 00D0                  		subi.b	#$D0,d7
000E8BD0 E54F                       		lsl.w	#2,d7
000E8BD2 2670 7000                  		movea.l	(a0,d7.w),a3
000E8BD6 224B                       		movea.l	a3,a1
000E8BD8 7000                       		moveq	#0,d0
000E8BDA 3019                       		move.w	(a1)+,d0
000E8BDC D08B                       		add.l	a3,d0
000E8BDE 2D40 0020                  		move.l	d0,$20(a6)
000E8BE2 1A19                       		move.b	(a1)+,d5
000E8BE4 1E19                       		move.b	(a1)+,d7
000E8BE6 5307                       		subq.b	#1,d7
000E8BE8 7C30                       		moveq	#$30,d6
000E8BEA                            
000E8BEA                            loc_72348:
000E8BEA 1829 0001                  		move.b	1(a1),d4
000E8BEE 6B00                       		bmi.s	loc_7235A
000E8BF0 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000E8BF6 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000E8BFA 6000                       		bra.s	loc_72364
000E8BFC                            ; ===========================================================================
000E8BFC                            
000E8BFC                            loc_7235A:
000E8BFC 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000E8C02 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000E8C06                            
000E8C06                            loc_72364:
000E8C06 244D                       		movea.l	a5,a2
000E8C08 700B                       		moveq	#$B,d0
000E8C0A                            
000E8C0A                            loc_72368:
000E8C0A 429A                       		clr.l	(a2)+
000E8C0C 51C8 FFFC                  		dbf	d0,loc_72368
000E8C10                            
000E8C10 3A99                       		move.w	(a1)+,(a5)
000E8C12 1B45 0002                  		move.b	d5,2(a5)
000E8C16 7000                       		moveq	#0,d0
000E8C18 3019                       		move.w	(a1)+,d0
000E8C1A D08B                       		add.l	a3,d0
000E8C1C 2B40 0004                  		move.l	d0,4(a5)
000E8C20 3B59 0008                  		move.w	(a1)+,8(a5)
000E8C24 1B7C 0001 000E             		move.b	#1,$E(a5)
000E8C2A 1B46 000D                  		move.b	d6,$D(a5)
000E8C2E 4A04                       		tst.b	d4
000E8C30 6B00                       		bmi.s	loc_72396
000E8C32 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000E8C38                            
000E8C38                            loc_72396:
000E8C38 51CF FFB0                  		dbf	d7,loc_72348
000E8C3C                            
000E8C3C 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000E8C40 6A00                       		bpl.s	loc_723A6
000E8C42 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000E8C48                            
000E8C48                            loc_723A6:
000E8C48 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000E8C4C 6A00                       		bpl.s	locret_723C6
000E8C4E 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000E8C54 0004 001F                  		ori.b	#$1F,d4
000E8C58 13C4 00C0 0011             		move.b	d4,($C00011).l
000E8C5E 0844 0005                  		bchg	#5,d4
000E8C62 13C4 00C0 0011             		move.b	d4,($C00011).l
000E8C68                            
000E8C68                            locret_723C6:
000E8C68 4E75                       		rts	
000E8C6A                            ; End of function Sound_ChkValue
000E8C6A                            
000E8C6A                            ; ===========================================================================
000E8C6A 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000E8C6E 00FF F220                  		dc.l $FFF1F0+$30
000E8C72 00FF F280                  		dc.l $FFF250+$30
000E8C76 00FF F340                  		dc.l $FFF310+$30
000E8C7A 00FF F370                  		dc.l $FFF340+$30
000E8C7E 00FF F3A0                  		dc.l $FFF370+$30
000E8C82                            
000E8C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8C82                            
000E8C82                            
000E8C82                            Snd_FadeOut1:				; XREF: Sound_E0
000E8C82 4216                       		clr.b	0(a6)
000E8C84 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000E8C88 7E05                       		moveq	#5,d7
000E8C8A                            
000E8C8A                            loc_723EA:
000E8C8A 4A15                       		tst.b	(a5)
000E8C8C 6A00 0000                  		bpl.w	loc_72472
000E8C90 0895 0007                  		bclr	#7,(a5)
000E8C94 7600                       		moveq	#0,d3
000E8C96 162D 0001                  		move.b	1(a5),d3
000E8C9A 6B00                       		bmi.s	loc_7243C
000E8C9C 4EBA 0000                  		jsr	sub_726FE(pc)
000E8CA0 0C03 0004                  		cmpi.b	#4,d3
000E8CA4 6600                       		bne.s	loc_72416
000E8CA6 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000E8CAA 6A00                       		bpl.s	loc_72416
000E8CAC 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000E8CB0 226E 0020                  		movea.l	$20(a6),a1
000E8CB4 6000                       		bra.s	loc_72428
000E8CB6                            ; ===========================================================================
000E8CB6                            
000E8CB6                            loc_72416:
000E8CB6 5503                       		subq.b	#2,d3
000E8CB8 E50B                       		lsl.b	#2,d3
000E8CBA 41FA FEB2                  		lea	dword_722CC(pc),a0
000E8CBE 264D                       		movea.l	a5,a3
000E8CC0 2A70 3000                  		movea.l	(a0,d3.w),a5
000E8CC4 226E 0018                  		movea.l	$18(a6),a1
000E8CC8                            
000E8CC8                            loc_72428:
000E8CC8 0895 0002                  		bclr	#2,(a5)
000E8CCC 08D5 0001                  		bset	#1,(a5)
000E8CD0 102D 000B                  		move.b	$B(a5),d0
000E8CD4 4EBA 0000                  		jsr	sub_72C4E(pc)
000E8CD8 2A4B                       		movea.l	a3,a5
000E8CDA 6000                       		bra.s	loc_72472
000E8CDC                            ; ===========================================================================
000E8CDC                            
000E8CDC                            loc_7243C:
000E8CDC 4EBA 0000                  		jsr	sub_729A0(pc)
000E8CE0 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000E8CE4 0C03 00E0                  		cmpi.b	#$E0,d3
000E8CE8 6700                       		beq.s	loc_7245A
000E8CEA 0C03 00C0                  		cmpi.b	#$C0,d3
000E8CEE 6700                       		beq.s	loc_7245A
000E8CF0 E60B                       		lsr.b	#3,d3
000E8CF2 41FA FE7A                  		lea	dword_722CC(pc),a0
000E8CF6 2070 3000                  		movea.l	(a0,d3.w),a0
000E8CFA                            
000E8CFA                            loc_7245A:
000E8CFA 0890 0002                  		bclr	#2,(a0)
000E8CFE 08D0 0001                  		bset	#1,(a0)
000E8D02 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000E8D08 6600                       		bne.s	loc_72472
000E8D0A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000E8D12                            
000E8D12                            loc_72472:
000E8D12 DAFC 0030                  		adda.w	#$30,a5
000E8D16 51CF FF72                  		dbf	d7,loc_723EA
000E8D1A                            
000E8D1A 4E75                       		rts	
000E8D1C                            ; End of function Snd_FadeOut1
000E8D1C                            
000E8D1C                            
000E8D1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8D1C                            
000E8D1C                            
000E8D1C                            Snd_FadeOut2:				; XREF: Sound_E0
000E8D1C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000E8D20 4A15                       		tst.b	(a5)
000E8D22 6A00                       		bpl.s	loc_724AE
000E8D24 0895 0007                  		bclr	#7,(a5)
000E8D28 0815 0002                  		btst	#2,(a5)
000E8D2C 6600                       		bne.s	loc_724AE
000E8D2E 4A2E 000E                  	tst.b	$0E(a6)
000E8D32 6600                       	bne.s	loc_724AE_2
000E8D34 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E8D38 6600                       	bne.s	loc_724AE
000E8D3A                            
000E8D3A                            	loc_724AE_2:
000E8D3A 4EBA 0000                  		jsr	loc_7270A(pc)
000E8D3E 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000E8D42 0895 0002                  		bclr	#2,(a5)
000E8D46 08D5 0001                  		bset	#1,(a5)
000E8D4A 4A15                       		tst.b	(a5)
000E8D4C 6A00                       		bpl.s	loc_724AE
000E8D4E 226E 0018                  		movea.l	$18(a6),a1
000E8D52 102D 000B                  		move.b	$B(a5),d0
000E8D56 4EBA 0000                  		jsr	sub_72C4E(pc)
000E8D5A                            
000E8D5A                            loc_724AE:
000E8D5A 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000E8D5E 4A15                       		tst.b	(a5)
000E8D60 6A00                       		bpl.s	locret_724E4
000E8D62 0895 0007                  		bclr	#7,(a5)
000E8D66 0815 0002                  		btst	#2,(a5)
000E8D6A 6600                       		bne.s	locret_724E4
000E8D6C 4A2E 000E                  	tst.b	$0E(a6)
000E8D70 6600                       	bne.s	locret_724E4_2
000E8D72 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E8D76 6600                       	bne.s	locret_724E4
000E8D78                            
000E8D78                            	locret_724E4_2:
000E8D78 4EBA 0000                  		jsr	loc_729A6(pc)
000E8D7C 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000E8D80 0895 0002                  		bclr	#2,(a5)
000E8D84 08D5 0001                  		bset	#1,(a5)
000E8D88 4A15                       		tst.b	(a5)
000E8D8A 6A00                       		bpl.s	locret_724E4
000E8D8C 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000E8D92 6600                       		bne.s	locret_724E4
000E8D94 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000E8D9C                            
000E8D9C                            locret_724E4:
000E8D9C 4E75                       		rts	
000E8D9E                            ; End of function Snd_FadeOut2
000E8D9E                            
000E8D9E                            ; ===========================================================================
000E8D9E                            ; ---------------------------------------------------------------------------
000E8D9E                            ; Fade out music
000E8D9E                            ; ---------------------------------------------------------------------------
000E8D9E                            
000E8D9E                            Sound_E0:				; XREF: Sound_ExIndex
000E8D9E 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000E8DA2 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000E8DA6 1D7C 0003 0006             		move.b	#3,6(a6)
000E8DAC 1D7C 0028 0004             		move.b	#$28,4(a6)
000E8DB2                            	;	clr.b	$40(a6)
000E8DB2                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000E8DB2 422E 002A                  		clr.b	$2A(a6)
000E8DB6 4E75                       		rts	
000E8DB8                            
000E8DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8DB8                            
000E8DB8                            
000E8DB8                            sub_72504:				; XREF: sub_71B4C
000E8DB8 102E 0006                  		move.b	6(a6),d0
000E8DBC 6700                       		beq.s	loc_72510
000E8DBE 532E 0006                  		subq.b	#1,6(a6)
000E8DC2 4E75                       		rts	
000E8DC4                            ; ===========================================================================
000E8DC4                            
000E8DC4                            loc_72510:
000E8DC4 532E 0004                  		subq.b	#1,4(a6)
000E8DC8 6700 0000                  		beq.w	Sound_E4
000E8DCC 1D7C 0003 0006             		move.b	#3,6(a6)
000E8DD2                            
000E8DD2                            
000E8DD2 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000E8DD8 7C00                       		moveq	#$00,d6					; CHG: clear d6
000E8DDA 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000E8DDE 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000E8DE0 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000E8DE4 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000E8DEA 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000E8DEC 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000E8DF2 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000E8DF4 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000E8DF8                            
000E8DF8                            FadeOut_PCM:
000E8DF8 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000E8DFA 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000E8DFC 7000                       		moveq	#$00,d0					; CHG: clear d0
000E8DFE 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000E8E02 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000E8E04 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000E8E06 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000E8E0A 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000E8E0C                            
000E8E0C                            FOP_NoMute:
000E8E0C                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000E8E0C 5400                       	addq.b	#$02,d0					; reduce the volume
000E8E0E                            
000E8E0E                            FOP_Mute:
000E8E0E 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000E8E12 B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000E8E16 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000E8E18 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000E8E1C 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000E8E20 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000E8E24 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000E8E26 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E8E38 1080                       		move.b	d0,(a0)					; change PCM volume
000E8E3A 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000E8E3C 33FC 0000 00A1 1100        		startZ80_S1
000E8E44                            
000E8E44                            FOP_NotRunning:
000E8E44 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000E8E48 4E75                       		rts						; CHG: return
000E8E4A                            
000E8E4A                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000E8E4A                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000E8E4A                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000E8E4A                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000E8E4A                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000E8E4A                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000E8E4A                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000E8E4A                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000E8E4A                            
000E8E4A                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000E8E4A                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000E8E4A                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000E8E4A                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000E8E4A                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000E8E4A                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000E8E4A                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000E8E4A                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000E8E4A                            
000E8E4A                            ; ===========================================================================
000E8E4A                            
000E8E4A                            FadeOut_FM:
000E8E4A 7E05                       		moveq	#5,d7
000E8E4C                            
000E8E4C                            loc_72524:
000E8E4C 4A15                       		tst.b	(a5)
000E8E4E 6A00                       		bpl.s	loc_72538
000E8E50 522D 0009                  		addq.b	#1,9(a5)
000E8E54 6A00                       		bpl.s	loc_72534
000E8E56 0895 0007                  		bclr	#7,(a5)
000E8E5A 6000                       		bra.s	loc_72538
000E8E5C                            ; ===========================================================================
000E8E5C                            
000E8E5C                            loc_72534:
000E8E5C 4EBA 0000                  		jsr	sub_72CB4(pc)
000E8E60                            
000E8E60                            loc_72538:
000E8E60 DAFC 0030                  		adda.w	#$30,a5
000E8E64 51CF FFE6                  		dbf	d7,loc_72524
000E8E68                            
000E8E68 7E02                       		moveq	#2,d7
000E8E6A                            
000E8E6A                            loc_72542:
000E8E6A 4A15                       		tst.b	(a5)
000E8E6C 6A00                       		bpl.s	loc_72560
000E8E6E 522D 0009                  		addq.b	#1,9(a5)
000E8E72 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000E8E78 6500                       		bcs.s	loc_72558
000E8E7A 0895 0007                  		bclr	#7,(a5)
000E8E7E 6000                       		bra.s	loc_72560
000E8E80                            ; ===========================================================================
000E8E80                            
000E8E80                            loc_72558:
000E8E80 1C2D 0009                  		move.b	9(a5),d6
000E8E84 DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000E8E88 4EBA 0000                  		jsr	sub_7296A(pc)
000E8E8C                            
000E8E8C                            loc_72560:
000E8E8C DAFC 0030                  		adda.w	#$30,a5
000E8E90 51CF FFD8                  		dbf	d7,loc_72542
000E8E94                            
000E8E94 4E75                       		rts	
000E8E96                            ; End of function sub_72504
000E8E96                            
000E8E96                            
000E8E96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8E96                            
000E8E96                            
000E8E96                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000E8E96 7602                       		moveq	#2,d3
000E8E98 7028                       		moveq	#$28,d0
000E8E9A                            
000E8E9A                            loc_7256E:
000E8E9A 1203                       		move.b	d3,d1
000E8E9C 4EBA 0000                  		jsr	sub_7272E(pc)
000E8EA0 5801                       		addq.b	#4,d1
000E8EA2 4EBA 0000                  		jsr	sub_7272E(pc)
000E8EA6 51CB FFF2                  		dbf	d3,loc_7256E
000E8EAA                            
000E8EAA 7040                       		moveq	#$40,d0
000E8EAC 727F                       		moveq	#$7F,d1
000E8EAE 7802                       		moveq	#2,d4
000E8EB0                            
000E8EB0                            loc_72584:
000E8EB0 7603                       		moveq	#3,d3
000E8EB2                            
000E8EB2                            loc_72586:
000E8EB2 4EBA 0000                  		jsr	sub_7272E(pc)
000E8EB6 4EBA 0000                  		jsr	sub_72764(pc)
000E8EBA 5840                       		addq.w	#4,d0
000E8EBC 51CB FFF4                  		dbf	d3,loc_72586
000E8EC0                            
000E8EC0 0400 000F                  		subi.b	#$F,d0
000E8EC4 51CC FFEA                  		dbf	d4,loc_72584
000E8EC8                            
000E8EC8 4E75                       		rts	
000E8ECA                            ; End of function sub_7256A
000E8ECA                            
000E8ECA                            ; ===========================================================================
000E8ECA                            ; ---------------------------------------------------------------------------
000E8ECA                            ; Stop music
000E8ECA                            ; ---------------------------------------------------------------------------
000E8ECA                            
000E8ECA                            Sound_E4:
000E8ECA 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E8EDC 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E8EE2 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000E8EE8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8EEA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8EEC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8EEE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E8EF0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8EF2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8EF4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8EF6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8EF8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8EFA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E8EFC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8EFE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F00 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E8F08 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E8F0E 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000E8F14 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8F16 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F18 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F1A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E8F1C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F1E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F20 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E8F22 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F24 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F26 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E8F28 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F2A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E8F2C 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E8F34 33FC 0000 00A1 1100        		startZ80_S1
000E8F3C                            
000E8F3C 702B                       		moveq	#$2B,d0
000E8F3E 123C 0080                  		move.b	#$80,d1
000E8F42 4EBA 0000                  		jsr	sub_7272E(pc)
000E8F46 7027                       		moveq	#$27,d0
000E8F48 7200                       		moveq	#0,d1
000E8F4A 4EBA 0000                  		jsr	sub_7272E(pc)
000E8F4E 204E                       		movea.l	a6,a0
000E8F50 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000E8F54 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000E8F58 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000E8F5C                            
000E8F5C                            loc_725B6:
000E8F5C 4298                       		clr.l	(a0)+
000E8F5E 51C8 FFFC                  		dbf	d0,loc_725B6
000E8F62                            
000E8F62 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000E8F66 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000E8F6A 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000E8F70 4EBA FF24                  		jsr	sub_7256A(pc)
000E8F74 6000 0000                  		bra.w	sub_729B6
000E8F78                            
000E8F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8F78                            
000E8F78                            
000E8F78                            sub_725CA:				; XREF: Sound_ChkValue
000E8F78 204E                       		movea.l	a6,a0
000E8F7A 1216                       		move.b	0(a6),d1
000E8F7C 142E 0027                  		move.b	$27(a6),d2
000E8F80 162E 002A                  		move.b	$2A(a6),d3
000E8F84 182E 0026                  		move.b	$26(a6),d4
000E8F88 3A2E 000A                  		move.w	$A(a6),d5
000E8F8C 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000E8F90 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000E8F94 303C 0093                  		move.w	#$93,d0						; MJ: new size
000E8F98                            
000E8F98                            loc_725E4:
000E8F98 4298                       		clr.l	(a0)+
000E8F9A 51C8 FFFC                  		dbf	d0,loc_725E4
000E8F9E                            
000E8F9E 1C81                       		move.b	d1,0(a6)
000E8FA0 1D42 0027                  		move.b	d2,$27(a6)
000E8FA4 1D43 002A                  		move.b	d3,$2A(a6)
000E8FA8 1D44 0026                  		move.b	d4,$26(a6)
000E8FAC 3D45 000A                  		move.w	d5,$A(a6)
000E8FB0 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000E8FB4 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000E8FB8 1D7C 0080 0009             		move.b	#$80,9(a6)
000E8FBE 4EBA FED6                  		jsr	sub_7256A(pc)
000E8FC2 6000 0000                  		bra.w	sub_729B6
000E8FC6                            ; End of function sub_725CA
000E8FC6                            
000E8FC6                            
000E8FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E8FC6                            
000E8FC6                            
000E8FC6                            sub_7260C:				; XREF: sub_71B4C
000E8FC6                            	;	move.b	2(a6),1(a6)
000E8FC6 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000E8FCA 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000E8FCC D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000E8FD0 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000E8FD4 6A00                       	bpl.s	STempo_Valid			; EXTRA
000E8FD6 7002                       	moveq	#$02,d0				; EXTRA
000E8FD8 6000                       	bra.s	STempo_Valid			; EXTRA
000E8FDA                            
000E8FDA                            STempo_CheckMax:
000E8FDA D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000E8FDE                            
000E8FDE                            STempo_Valid:
000E8FDE 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000E8FE2                            
000E8FE2 41EE 004E                  		lea	$4E(a6),a0
000E8FE6 7030                       		moveq	#$30,d0
000E8FE8 720A                       		moveq	#10,d1						; MJ: new number of channels
000E8FEA                            
000E8FEA                            loc_7261A:
000E8FEA 5210                       		addq.b	#1,(a0)
000E8FEC D0C0                       		adda.w	d0,a0
000E8FEE 51C9 FFFA                  		dbf	d1,loc_7261A
000E8FF2                            
000E8FF2 4E75                       		rts	
000E8FF4                            ; End of function sub_7260C
000E8FF4                            
000E8FF4                            ; ===========================================================================
000E8FF4                            ; ---------------------------------------------------------------------------
000E8FF4                            ; Speed	up music
000E8FF4                            ; ---------------------------------------------------------------------------
000E8FF4                            
000E8FF4                            Sound_E2:				; XREF: Sound_ExIndex
000E8FF4 4A2E 0027                  		tst.b	$27(a6)
000E8FF8 6600                       		bne.s	loc_7263E
000E8FFA 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000E9000 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000E9006 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000E900C 4E75                       		rts	
000E900E                            ; ===========================================================================
000E900E                            
000E900E                            loc_7263E:
000E900E 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000E9014 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000E901A 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000E9020 4E75                       		rts	
000E9022                            ; ===========================================================================
000E9022                            ; ---------------------------------------------------------------------------
000E9022                            ; Change music back to normal speed
000E9022                            ; ---------------------------------------------------------------------------
000E9022                            
000E9022                            Sound_E3:				; XREF: Sound_ExIndex
000E9022 4A2E 0027                  		tst.b	$27(a6)
000E9026 6600                       		bne.s	loc_7266A
000E9028 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000E902E 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000E9034 422E 002A                  		clr.b	$2A(a6)
000E9038 4E75                       		rts	
000E903A                            ; ===========================================================================
000E903A                            
000E903A                            loc_7266A:
000E903A 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000E9040 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000E9046 422E 03FA                  		clr.b	$3FA(a6)
000E904A 4E75                       		rts	
000E904C                            
000E904C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E904C                            
000E904C                            
000E904C                            sub_7267C:				; XREF: sub_71B4C
000E904C 4A2E 0025                  		tst.b	$25(a6)
000E9050 6700                       		beq.s	loc_72688
000E9052 532E 0025                  		subq.b	#1,$25(a6)
000E9056 4E75                       		rts	
000E9058                            ; ===========================================================================
000E9058                            
000E9058                            loc_72688:
000E9058 4A2E 0026                  		tst.b	$26(a6)
000E905C 6700                       		beq.s	loc_726D6
000E905E 532E 0026                  		subq.b	#1,$26(a6)
000E9062 1D7C 0002 0025             		move.b	#2,$25(a6)
000E9068                            
000E9068 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000E906C 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000E906E                            
000E906E                            FadeIn_NextPCM:
000E906E 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000E9070 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000E9072 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000E9076                            
000E9076                            FadeIn_NoPCM:
000E9076 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000E907A 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000E907E                            
000E907E                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000E907E                            
000E907E 7E05                       		moveq	#5,d7
000E9080                            
000E9080                            loc_7269E:
000E9080 4A15                       		tst.b	(a5)
000E9082 6A00                       		bpl.s	loc_726AA
000E9084 532D 0009                  		subq.b	#1,9(a5)
000E9088 4EBA 0000                  		jsr	sub_72CB4(pc)
000E908C                            
000E908C                            loc_726AA:
000E908C DAFC 0030                  		adda.w	#$30,a5
000E9090 51CF FFEE                  		dbf	d7,loc_7269E
000E9094 7E02                       		moveq	#2,d7
000E9096                            
000E9096                            loc_726B4:
000E9096 4A15                       		tst.b	(a5)
000E9098 6A00                       		bpl.s	loc_726CC
000E909A 532D 0009                  		subq.b	#1,9(a5)
000E909E 1C2D 0009                  		move.b	9(a5),d6
000E90A2 0C06 0010                  		cmpi.b	#$10,d6
000E90A6 6500                       		bcs.s	loc_726C8
000E90A8 7C0F                       		moveq	#$F,d6
000E90AA                            
000E90AA                            loc_726C8:
000E90AA 4EBA 0000                  		jsr	sub_7296A(pc)
000E90AE                            
000E90AE                            loc_726CC:
000E90AE DAFC 0030                  		adda.w	#$30,a5
000E90B2 51CF FFE2                  		dbf	d7,loc_726B4
000E90B6 4E75                       		rts	
000E90B8                            ; ===========================================================================
000E90B8                            
000E90B8                            loc_726D6:
000E90B8                            	;	bclr	#2,$40(a6)
000E90B8                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000E90B8 422E 0024                  		clr.b	$24(a6)
000E90BC 4E75                       		rts	
000E90BE                            ; End of function sub_7267C
000E90BE                            
000E90BE                            ; ===========================================================================
000E90BE                            
000E90BE                            loc_726E2:				; XREF: sub_71CCA
000E90BE 0815 0001                  		btst	#1,(a5)
000E90C2 6600                       		bne.s	locret_726FC
000E90C4 0815 0002                  		btst	#2,(a5)
000E90C8 6600                       		bne.s	locret_726FC
000E90CA 4A2E 000E                  	tst.b	$0E(a6)
000E90CE 6600                       	bne.s	locret_726FC_2
000E90D0 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E90D4 6600                       	bne.s	locret_726FC
000E90D6                            
000E90D6                            	locret_726FC_2:
000E90D6 7028                       		moveq	#$28,d0
000E90D8 122D 0001                  		move.b	1(a5),d1
000E90DC 0001 00F0                  		ori.b	#-$10,d1
000E90E0 6000 0000                  		bra.w	sub_7272E
000E90E4                            ; ===========================================================================
000E90E4                            
000E90E4                            locret_726FC:
000E90E4 4E75                       		rts	
000E90E6                            
000E90E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E90E6                            
000E90E6                            
000E90E6                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000E90E6 0815 0004                  		btst	#4,(a5)
000E90EA 6600                       		bne.s	locret_72714
000E90EC 0815 0002                  		btst	#2,(a5)
000E90F0 6600                       		bne.s	locret_72714
000E90F2 4A2E 000E                  	tst.b	$0E(a6)
000E90F6 6600                       	bne.s	loc_7270A
000E90F8 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E90FC 6600                       	bne.s	locret_72714
000E90FE                            
000E90FE                            loc_7270A:				; XREF: Snd_FadeOut2
000E90FE 7028                       		moveq	#$28,d0
000E9100 122D 0001                  		move.b	1(a5),d1
000E9104 6000 0000                  		bra.w	sub_7272E
000E9108                            ; ===========================================================================
000E9108                            
000E9108                            locret_72714:
000E9108 4E75                       		rts	
000E910A                            ; End of function sub_726FE
000E910A                            
000E910A                            ; ===========================================================================
000E910A                            
000E910A                            loc_72716:				; XREF: sub_72A5A
000E910A 0815 0002                  		btst	#2,(a5)
000E910E 6600                       		bne.s	locret_72720
000E9110 4A2E 000E                  	tst.b	$0E(a6)
000E9114 6600                       	bne.s	sub_72722
000E9116 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E911A 6600                       	bne.s	locret_72720
000E911C 6000 0000                  		bra.w	sub_72722
000E9120                            ; ===========================================================================
000E9120                            
000E9120                            locret_72720:
000E9120 4E75                       		rts	
000E9122                            
000E9122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9122                            
000E9122                            
000E9122                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000E9122 082D 0002 0001             		btst	#2,1(a5)
000E9128 6600                       		bne.s	loc_7275A
000E912A D02D 0001                  		add.b	1(a5),d0
000E912E                            ; End of function sub_72722
000E912E                            
000E912E                            
000E912E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E912E                            
000E912E                            sub_7272E:
000E912E 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000E9132 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000E9136 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000E913A 33FC 0100 00A1 1100 0839+  		stopZ80_S1						; EXT: request Z80 stop "ON"
000E914C 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000E914E 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000E9150 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000E9152 50D0                       		st.b	(a0)					; EXT: set end of list marker
000E9154 33FC 0000 00A1 1100        		startZ80_S1					; EXT: request Z80 stop "OFF"
000E915C 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000E9160 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000E9164 4E75                       		rts						; EXT: return
000E9166                            
000E9166                            ; ===========================================================================
000E9166                            
000E9166                            loc_7275A:				; XREF: sub_72722
000E9166 142D 0001                  		move.b	1(a5),d2
000E916A 0882 0002                  		bclr	#2,d2
000E916E D002                       		add.b	d2,d0
000E9170                            
000E9170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9170                            
000E9170                            
000E9170                            sub_72764:
000E9170 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000E9174 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000E9178 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000E917C 33FC 0100 00A1 1100 0839+  		stopZ80_S1						; EXT: request Z80 stop "ON"
000E918E 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000E9190 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000E9192 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000E9194 50D0                       		st.b	(a0)					; EXT: set end of list marker
000E9196 33FC 0000 00A1 1100        		startZ80_S1					; EXT: request Z80 stop "OFF"
000E919E 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000E91A2 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000E91A6 4E75                       		rts						; EXT: return
000E91A8                            
000E91A8                            ; ===========================================================================
000E91A8 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000E91BA 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000E91CC 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000E91DC 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000E91EC 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000E91FC 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000E920C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000E921C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000E922C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000E923C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000E924C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000E925C 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000E9268                            
000E9268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9268                            
000E9268                            
000E9268                            ; ===========================================================================
000E9268                            ; ---------------------------------------------------------------------------
000E9268                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000E9268                            ; ---------------------------------------------------------------------------
000E9268                            
000E9268                            SPSG_CheckMute:
000E9268 4A2E 000E                  	tst.b	$0E(a6)
000E926C 6600                       	bne.s	S72850_NoCHG
000E926E 102D 0021                  	move.b	$21(a5),d0
000E9272 B02D 0022                  	cmp.b	$22(a5),d0
000E9276 6700                       	beq.s	S72850_NoCHG
000E9278 4A00                       	tst.b	d0
000E927A 6A00                       	bpl.s	S72850_NoMute
000E927C 08D5 0006                  	bset.b	#$06,(a5)
000E9280 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000E9286 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000E928C                            
000E928C                            S72850_NoCHG:
000E928C 4E75                       	rts
000E928E                            
000E928E                            S72850_NoMute:
000E928E 1B40 0022                  	move.b	d0,$22(a5)
000E9292 08D5 0006                  	bset.b	#$06,(a5)
000E9296 4EB9 0000 0000             	jsr	loc_7292E
000E929C 4E75                       	rts
000E929E                            
000E929E                            ; ===========================================================================
000E929E                            ; ---------------------------------------------------------------------------
000E929E                            ; Subroutine to run a PSG channel
000E929E                            ; ---------------------------------------------------------------------------
000E929E                            
000E929E                            sub_72850:				; XREF: sub_71B4C
000E929E 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000E92A0 532D 000E                  		subq.b	#1,$E(a5)
000E92A4 6600                       		bne.s	loc_72866
000E92A6 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000E92AA 0895 0004                  		bclr	#4,(a5)
000E92AE 4EBA 0000                  		jsr	sub_72878(pc)
000E92B2 4EBA 0000                  		jsr	sub_728DC(pc)
000E92B6 6000 0000                  		bra.w	loc_7292E
000E92BA                            ; ===========================================================================
000E92BA                            
000E92BA                            loc_72866:
000E92BA 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000E92BE 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000E92C0 7A00                       	moveq	#$00,d5				; EXTRA
000E92C2 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000E92C6 0405 0081                  	subi.b	#$81,d5				; EXTRA
000E92CA 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000E92CC 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000E92D2 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000E92D6 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000E92DA                            
000E92DA                            	SPSG_NoUpdate:				; EXTRA
000E92DA 4EBA F1EE                  		jsr	sub_71D9E(pc)
000E92DE 4EBA 0000                  		jsr	sub_72926(pc)
000E92E2 4EBA F28A                  		jsr	sub_71DC6(pc)
000E92E6                            
000E92E6                            	SPSG_Update:				; EXTRA
000E92E6 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000E92EA 4EBA 0000                  		jsr	sub_728E2(pc)
000E92EE 4E75                       		rts	
000E92F0                            ; End of function sub_72850
000E92F0                            
000E92F0                            
000E92F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E92F0                            
000E92F0                            
000E92F0                            sub_72878:				; XREF: sub_72850
000E92F0 0895 0001                  		bclr	#1,(a5)
000E92F4 286D 0004                  		movea.l	4(a5),a4
000E92F8                            
000E92F8                            loc_72880:
000E92F8 7A00                       		moveq	#0,d5
000E92FA 1A1C                       		move.b	(a4)+,d5
000E92FC 0C05 00E0                  		cmpi.b	#$E0,d5
000E9300 6500                       		bcs.s	loc_72890
000E9302 4EBA 0000                  		jsr	sub_72A5A(pc)
000E9306 60F0                       		bra.s	loc_72880
000E9308                            ; ===========================================================================
000E9308                            
000E9308                            loc_72890:
000E9308 4A05                       		tst.b	d5
000E930A 6A00                       		bpl.s	loc_728A4
000E930C 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000E9310 4EBA 0000                  		jsr	sub_728AC(pc)
000E9314 1A1C                       		move.b	(a4)+,d5
000E9316 4A05                       		tst.b	d5
000E9318 6A00                       		bpl.s	loc_728A4
000E931A 534C                       		subq.w	#1,a4
000E931C 6000 F16E                  		bra.w	sub_71D60
000E9320                            ; ===========================================================================
000E9320                            
000E9320                            loc_728A4:
000E9320 4EBA F14A                  		jsr	sub_71D40(pc)
000E9324 6000 F166                  		bra.w	sub_71D60
000E9328                            ; End of function sub_72878
000E9328                            
000E9328                            
000E9328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9328                            
000E9328                            
000E9328                            sub_728AC:				; XREF: sub_72878
000E9328 0405 0081                  		subi.b	#$81,d5
000E932C 6500                       		bcs.s	loc_728CA
000E932E                            
000E932E                            	SPSG_UpdateFreque:			; EXTRA
000E932E DA2D 0008                  		add.b	8(a5),d5
000E9332 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000E9336 0245 007F                  		andi.w	#$7F,d5
000E933A E34D                       		lsl.w	#1,d5
000E933C 41FA 0000                  		lea	word_729CE(pc),a0
000E9340 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000E9346 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000E934A 669A                       	bne.s	SPSG_Update			; EXTRA
000E934C 6000 F13E                  		bra.w	sub_71D60
000E9350                            ; ===========================================================================
000E9350                            
000E9350                            loc_728CA:
000E9350 08D5 0001                  		bset	#1,(a5)
000E9354 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000E935A 4EBA F130                  		jsr	sub_71D60(pc)
000E935E 6000 0000                  		bra.w	sub_729A0
000E9362                            ; End of function sub_728AC
000E9362                            
000E9362                            
000E9362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9362                            
000E9362                            
000E9362                            sub_728DC:				; XREF: sub_72850
000E9362 3C2D 0010                  		move.w	$10(a5),d6
000E9366 6B00                       		bmi.s	loc_72920
000E9368                            ; End of function sub_728DC
000E9368                            
000E9368                            
000E9368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9368                            
000E9368                            
000E9368                            sub_728E2:				; XREF: sub_72850
000E9368 102D 001E                  		move.b	$1E(a5),d0
000E936C 4880                       		ext.w	d0
000E936E DC40                       		add.w	d0,d6
000E9370 0815 0002                  		btst	#2,(a5)
000E9374 6600                       		bne.s	locret_7291E
000E9376 4A2E 000E                  	tst.b	$0E(a6)
000E937A 6600                       	bne.s	locret_7291E_2
000E937C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E9380 6600                       	bne.s	locret_7291E
000E9382                            
000E9382                            	locret_7291E_2:
000E9382 0815 0001                  		btst	#1,(a5)
000E9386 6600                       		bne.s	locret_7291E
000E9388 102D 0001                  		move.b	1(a5),d0
000E938C 0C00 00E0                  		cmpi.b	#$E0,d0
000E9390 6600                       		bne.s	loc_72904
000E9392 103C 00C0                  		move.b	#$C0,d0
000E9396                            
000E9396                            loc_72904:
000E9396 3206                       		move.w	d6,d1
000E9398 0201 000F                  		andi.b	#$F,d1
000E939C 8001                       		or.b	d1,d0
000E939E E84E                       		lsr.w	#4,d6
000E93A0 0206 003F                  		andi.b	#$3F,d6
000E93A4 13C0 00C0 0011             		move.b	d0,($C00011).l
000E93AA 13C6 00C0 0011             		move.b	d6,($C00011).l
000E93B0                            
000E93B0                            locret_7291E:
000E93B0 4E75                       		rts	
000E93B2                            ; End of function sub_728E2
000E93B2                            
000E93B2                            ; ===========================================================================
000E93B2                            
000E93B2                            loc_72920:				; XREF: sub_728DC
000E93B2 08D5 0001                  		bset	#1,(a5)
000E93B6 4E75                       		rts	
000E93B8                            
000E93B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E93B8                            
000E93B8                            
000E93B8                            sub_72926:				; XREF: sub_72850
000E93B8 4A2D 000B                  		tst.b	$B(a5)
000E93BC 6700 0000                  		beq.w	locret_7298A
000E93C0                            
000E93C0                            loc_7292E:				; XREF: sub_72850
000E93C0                            	;	move.b	9(a5),d6
000E93C0 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000E93C4 E406                       	asr.b	#$02,d6				; EXTRA
000E93C6 DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000E93CA 7000                       		moveq	#0,d0
000E93CC 102D 000B                  		move.b	$B(a5),d0
000E93D0 6700                       		beq.s	sub_7296A
000E93D2 2079 000E 7C9A             		movea.l	(Go_PSGIndex).l,a0
000E93D8 5340                       		subq.w	#1,d0
000E93DA E548                       		lsl.w	#2,d0
000E93DC 2070 0000                  		movea.l	(a0,d0.w),a0
000E93E0 102D 000C                  		move.b	$C(a5),d0
000E93E4 1030 0000                  		move.b	(a0,d0.w),d0
000E93E8 522D 000C                  		addq.b	#1,$C(a5)
000E93EC 0800 0007                  		btst	#7,d0
000E93F0 6700                       		beq.s	loc_72960
000E93F2 0C00 0080                  		cmpi.b	#$80,d0
000E93F6 6700                       		beq.s	loc_7299A
000E93F8                            
000E93F8                            loc_72960:
000E93F8 DC40                       		add.w	d0,d6
000E93FA 0C06 0010                  		cmpi.b	#$10,d6
000E93FE 6500                       		bcs.s	sub_7296A
000E9400 7C0F                       		moveq	#$F,d6
000E9402                            ; End of function sub_72926
000E9402                            
000E9402                            
000E9402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9402                            
000E9402                            
000E9402                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000E9402 0815 0001                  		btst	#1,(a5)
000E9406 6600                       		bne.s	locret_7298A
000E9408                            
000E9408                            	SPSG_UpdateTone:
000E9408 0815 0002                  		btst	#2,(a5)
000E940C 6600                       		bne.s	locret_7298A
000E940E 4A2E 000E                  	tst.b	$0E(a6)
000E9412 6600                       	bne.s	locret_7298A_2
000E9414 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E9418 6700                       	beq.s	locret_7298A_2
000E941A 1C2D 0001                  	move.b	$01(a5),d6
000E941E 0606 0010                  	addi.b	#$10,d6
000E9422 0006 000F                  	ori.b	#$0F,d6
000E9426 13C6 00C0 0011             	move.b	d6,($C00011).l
000E942C 4E75                       	rts
000E942E                            
000E942E                            	locret_7298A_2:
000E942E 0815 0004                  		btst	#4,(a5)
000E9432 6600                       		bne.s	loc_7298C
000E9434                            
000E9434                            loc_7297C:
000E9434 8C2D 0001                  		or.b	1(a5),d6
000E9438 0606 0010                  		addi.b	#$10,d6
000E943C 13C6 00C0 0011             		move.b	d6,($C00011).l
000E9442                            
000E9442                            locret_7298A:
000E9442 4E75                       		rts	
000E9444                            ; ===========================================================================
000E9444                            
000E9444                            loc_7298C:
000E9444 4A2D 0013                  		tst.b	$13(a5)
000E9448 67EA                       		beq.s	loc_7297C
000E944A 4A2D 0012                  		tst.b	$12(a5)
000E944E 66E4                       		bne.s	loc_7297C
000E9450 4E75                       		rts	
000E9452                            ; End of function sub_7296A
000E9452                            
000E9452                            ; ===========================================================================
000E9452                            
000E9452                            loc_7299A:				; XREF: sub_72926
000E9452 532D 000C                  		subq.b	#1,$C(a5)
000E9456 4E75                       		rts	
000E9458                            
000E9458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9458                            
000E9458                            
000E9458                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000E9458 0815 0002                  		btst	#2,(a5)
000E945C 6600                       		bne.s	locret_729B4
000E945E 4A2E 000E                  	tst.b	$0E(a6)
000E9462 6600                       	bne.s	loc_729A6
000E9464 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E9468 6600                       	bne.s	locret_729B4
000E946A                            
000E946A                            loc_729A6:				; XREF: Snd_FadeOut2
000E946A 102D 0001                  		move.b	1(a5),d0
000E946E 0000 001F                  		ori.b	#$1F,d0
000E9472 13C0 00C0 0011             		move.b	d0,($C00011).l
000E9478                            
000E9478                            locret_729B4:
000E9478 4E75                       		rts	
000E947A                            ; End of function sub_729A0
000E947A                            
000E947A                            
000E947A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E947A                            
000E947A                            
000E947A                            sub_729B6:				; XREF: loc_71E7C
000E947A 41F9 00C0 0011             		lea	($C00011).l,a0
000E9480 10BC 009F                  		move.b	#$9F,(a0)
000E9484 10BC 00BF                  		move.b	#$BF,(a0)
000E9488 10BC 00DF                  		move.b	#$DF,(a0)
000E948C 10BC 00FF                  		move.b	#$FF,(a0)
000E9490 4E75                       		rts	
000E9492                            ; End of function sub_729B6
000E9492                            
000E9492                            ; ===========================================================================
000E9492 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000E94A4 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000E94B6 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000E94CA 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000E94DE 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000E94F2 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000E9506 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000E951A 0011 0000                  		dc.w $11, 0
000E951E                            
000E951E                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000E951E                            	; but the pitch of the channel is low, and wraps to high).
000E951E                            
000E951E                            	; The flag pointers have been altered slightly, causing the frequencies
000E951E                            	; to be different, even though it's wrong in the first place, this
000E951E                            	; table will ensure it's put back the original way (not correct, just
000E951E                            	; original).
000E951E                            
000E951E 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000E952E 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000E953E 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000E954E 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000E955E 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000E956E 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000E957E 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000E958E 039A 121C                  		dc.w	$039A,$121C
000E9592                            
000E9592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9592                            
000E9592                            
000E9592                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000E9592 0445 00E0                  		subi.w	#$E0,d5
000E9596 E54D                       		lsl.w	#2,d5
000E9598 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000E959C                            ; End of function sub_72A5A
000E959C                            
000E959C                            ; ===========================================================================
000E959C                            
000E959C                            loc_72A64:
000E959C 6000 0000                  		bra.w	loc_72ACC			; E0
000E95A0                            ; ===========================================================================
000E95A0 6000 0000                  		bra.w	loc_72AEC			; E1
000E95A4                            ; ===========================================================================
000E95A4 6000 0000                  		bra.w	loc_72AF2			; E2
000E95A8                            ; ===========================================================================
000E95A8 6000 0000                  		bra.w	loc_72AF8			; E3
000E95AC                            ; ===========================================================================
000E95AC 6000 0000                  		bra.w	loc_72B14			; E4
000E95B0                            ; ===========================================================================
000E95B0 6000 0000                  		bra.w	loc_72B9E			; E5
000E95B4                            ; ===========================================================================
000E95B4 6000 0000                  		bra.w	loc_72BA4			; E6
000E95B8                            ; ===========================================================================
000E95B8 6000 0000                  		bra.w	loc_72BAE			; E7
000E95BC                            ; ===========================================================================
000E95BC 6000 0000                  		bra.w	loc_72BB4			; E8
000E95C0                            ; ===========================================================================
000E95C0 6000 0000                  		bra.w	loc_72BBE			; E9
000E95C4                            ; ===========================================================================
000E95C4 6000 0000                  		bra.w	loc_72BC6			; EA
000E95C8                            ; ===========================================================================
000E95C8 6000 0000                  		bra.w	loc_72BD0			; EB
000E95CC                            ; ===========================================================================
000E95CC 6000 0000                  		bra.w	loc_72BE6			; EC
000E95D0                            ; ===========================================================================
000E95D0 6000 0000                  		bra.w	loc_72BEE			; ED
000E95D4                            ; ===========================================================================
000E95D4 6000 0000                  		bra.w	loc_72BF4			; EE
000E95D8                            ; ===========================================================================
000E95D8 6000 0000                  		bra.w	loc_72C26			; EF
000E95DC                            ; ===========================================================================
000E95DC 6000 0000                  		bra.w	loc_72D30			; F0
000E95E0                            ; ===========================================================================
000E95E0 6000 0000                  		bra.w	loc_72D52			; F1
000E95E4                            ; ===========================================================================
000E95E4 6000 0000                  		bra.w	loc_72D58			; F2
000E95E8                            ; ===========================================================================
000E95E8 6000 0000                  		bra.w	loc_72E06			; F3
000E95EC                            ; ===========================================================================
000E95EC 6000 0000                  		bra.w	loc_72E20			; F4
000E95F0                            ; ===========================================================================
000E95F0 6000 0000                  		bra.w	loc_72E26			; F5
000E95F4                            ; ===========================================================================
000E95F4 6000 0000                  		bra.w	loc_72E2C			; F6
000E95F8                            ; ===========================================================================
000E95F8 6000 0000                  		bra.w	loc_72E38			; F7
000E95FC                            ; ===========================================================================
000E95FC 6000 0000                  		bra.w	loc_72E52			; F8
000E9600                            ; ===========================================================================
000E9600 6000 0000                  		bra.w	loc_72E64			; F9
000E9604                            ; ===========================================================================
000E9604                            ; ---------------------------------------------------------------------------
000E9604                            ; Flag FA - Reverse flag
000E9604                            ; ---------------------------------------------------------------------------
000E9604                            
000E9604                            FlagFA:
000E9604 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000E9608 4E75                       		rts					; CHG: return
000E960A                            
000E960A                            ; ===========================================================================
000E960A                            
000E960A                            loc_72ACC:				; XREF: loc_72A64
000E960A 121C                       		move.b	(a4)+,d1
000E960C 4A2D 0001                  		tst.b	1(a5)
000E9610 6B00                       		bmi.s	locret_72AEA
000E9612 102D 000A                  		move.b	$A(a5),d0
000E9616 0200 0037                  		andi.b	#$37,d0
000E961A 8200                       		or.b	d0,d1
000E961C 1B41 000A                  		move.b	d1,$A(a5)
000E9620 103C 00B4                  		move.b	#$B4,d0
000E9624 6000 FAE4                  		bra.w	loc_72716
000E9628                            ; ===========================================================================
000E9628                            
000E9628                            locret_72AEA:
000E9628 4E75                       		rts	
000E962A                            ; ===========================================================================
000E962A                            
000E962A                            loc_72AEC:				; XREF: loc_72A64
000E962A 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000E962E 4E75                       		rts	
000E9630                            ; ===========================================================================
000E9630                            
000E9630                            loc_72AF2:				; XREF: loc_72A64
000E9630 1D5C 0007                  		move.b	(a4)+,7(a6)
000E9634 4E75                       		rts	
000E9636                            ; ===========================================================================
000E9636                            
000E9636                            loc_72AF8:				; XREF: loc_72A64
000E9636 7000                       		moveq	#0,d0
000E9638 102D 000D                  		move.b	$D(a5),d0
000E963C 2875 0000                  		movea.l	(a5,d0.w),a4
000E9640 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000E9648 544C                       		addq.w	#2,a4
000E964A 5800                       		addq.b	#4,d0
000E964C 1B40 000D                  		move.b	d0,$D(a5)
000E9650 4E75                       		rts	
000E9652                            ; ===========================================================================
000E9652                            
000E9652                            loc_72B14:				; XREF: loc_72A64
000E9652 204E                       		movea.l	a6,a0
000E9654 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000E9658 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000E965E 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000E9662                            
000E9662                            loc_72B1E:
000E9662 20D9                       		move.l	(a1)+,(a0)+
000E9664 51C8 FFFC                  		dbf	d0,loc_72B1E
000E9668                            
000E9668                            	;	bset	#2,$40(a6)
000E9668                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000E9668 264D                       		movea.l	a5,a3
000E966A 1C3C 0028                  		move.b	#$28,d6
000E966E 9C2E 0026                  		sub.b	$26(a6),d6
000E9672 1A06                       	move.b	d6,d5
000E9674 DA05                       	add.b	d5,d5
000E9676 DA06                       	add.b	d6,d5
000E9678                            
000E9678 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000E967A 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000E967E                            
000E967E                            FE4_NextPCM:
000E967E 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000E9682 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000E9684                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000E9684 DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000E9688                            
000E9688                            FE4_NoPCM:
000E9688 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000E968C 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000E9690                            
000E9690 7E05                       		moveq	#5,d7
000E9692                            	;	lea	$A0(a6),a5				; MJ: new FM location
000E9692                            
000E9692                            loc_72B3A:
000E9692 0815 0007                  		btst	#7,(a5)
000E9696 6700                       		beq.s	loc_72B5C
000E9698 08D5 0001                  		bset	#1,(a5)
000E969C DD2D 0009                  		add.b	d6,9(a5)
000E96A0 0815 0002                  		btst	#2,(a5)
000E96A4 6600                       		bne.s	loc_72B5C
000E96A6 4A2E 000E                  	tst.b	$0E(a6)
000E96AA 6600                       	bne.s	locret_72B5C_2
000E96AC 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E96B0 6600                       	bne.s	loc_72B5C
000E96B2                            
000E96B2                            	locret_72B5C_2:
000E96B2 7000                       		moveq	#0,d0
000E96B4 102D 000B                  		move.b	$B(a5),d0
000E96B8 226E 0018                  		movea.l	$18(a6),a1
000E96BC 4EBA 0000                  		jsr	sub_72C4E(pc)
000E96C0                            
000E96C0                            loc_72B5C:
000E96C0 DAFC 0030                  		adda.w	#$30,a5
000E96C4 51CF FFCC                  		dbf	d7,loc_72B3A
000E96C8                            
000E96C8 7E02                       		moveq	#2,d7
000E96CA                            
000E96CA                            loc_72B66:
000E96CA 0815 0007                  		btst	#7,(a5)
000E96CE 6700                       		beq.s	loc_72B78
000E96D0 08D5 0001                  		bset	#1,(a5)
000E96D4 4EBA FD82                  		jsr	sub_729A0(pc)
000E96D8 DD2D 0009                  		add.b	d6,9(a5)
000E96DC                            
000E96DC                            loc_72B78:
000E96DC DAFC 0030                  		adda.w	#$30,a5
000E96E0 51CF FFE8                  		dbf	d7,loc_72B66
000E96E4 2A4B                       		movea.l	a3,a5
000E96E6 1D7C 0080 0024             		move.b	#$80,$24(a6)
000E96EC 1D7C 0028 0026             		move.b	#$28,$26(a6)
000E96F2 422E 0027                  		clr.b	$27(a6)
000E96F6 504F                       		addq.w	#8,sp
000E96F8 4E75                       		rts	
000E96FA                            ; ===========================================================================
000E96FA                            
000E96FA                            loc_72B9E:				; XREF: loc_72A64
000E96FA 1B5C 0002                  		move.b	(a4)+,2(a5)
000E96FE 4E75                       		rts	
000E9700                            ; ===========================================================================
000E9700                            
000E9700                            loc_72BA4:				; XREF: loc_72A64
000E9700 101C                       		move.b	(a4)+,d0
000E9702 D12D 0009                  		add.b	d0,9(a5)
000E9706 6000 0000                  		bra.w	sub_72CB4
000E970A                            ; ===========================================================================
000E970A                            
000E970A                            loc_72BAE:				; XREF: loc_72A64
000E970A 08D5 0004                  		bset	#4,(a5)
000E970E 4E75                       		rts	
000E9710                            ; ===========================================================================
000E9710                            
000E9710                            loc_72BB4:				; XREF: loc_72A64
000E9710 1B54 0012                  		move.b	(a4),$12(a5)
000E9714 1B5C 0013                  		move.b	(a4)+,$13(a5)
000E9718 4E75                       		rts	
000E971A                            ; ===========================================================================
000E971A                            
000E971A                            loc_72BBE:				; XREF: loc_72A64
000E971A 101C                       		move.b	(a4)+,d0
000E971C D12D 0008                  		add.b	d0,8(a5)
000E9720 4E75                       		rts	
000E9722                            ; ===========================================================================
000E9722                            
000E9722                            loc_72BC6:				; XREF: loc_72A64
000E9722 1D54 0002                  		move.b	(a4),2(a6)
000E9726 1D5C 0001                  		move.b	(a4)+,1(a6)
000E972A 4E75                       		rts	
000E972C                            ; ===========================================================================
000E972C                            
000E972C                            loc_72BD0:				; XREF: loc_72A64
000E972C 41EE 0040                  		lea	$40(a6),a0
000E9730 101C                       		move.b	(a4)+,d0
000E9732 7230                       		moveq	#$30,d1
000E9734 740A                       		moveq	#10,d2				; MJ: extra channel
000E9736                            
000E9736                            loc_72BDA:
000E9736 1140 0002                  		move.b	d0,2(a0)
000E973A D0C1                       		adda.w	d1,a0
000E973C 51CA FFF8                  		dbf	d2,loc_72BDA
000E9740                            
000E9740 4E75                       		rts	
000E9742                            ; ===========================================================================
000E9742                            
000E9742                            loc_72BE6:				; XREF: loc_72A64
000E9742 101C                       		move.b	(a4)+,d0
000E9744 D12D 0009                  		add.b	d0,9(a5)
000E9748 4E75                       		rts	
000E974A                            ; ===========================================================================
000E974A                            
000E974A                            loc_72BEE:				; XREF: loc_72A64
000E974A 422E 002C                  		clr.b	$2C(a6)
000E974E 4E75                       		rts	
000E9750                            ; ===========================================================================
000E9750                            
000E9750                            loc_72BF4:				; XREF: loc_72A64
000E9750 0895 0007                  		bclr	#7,(a5)
000E9754 0895 0004                  		bclr	#4,(a5)
000E9758 4EBA F98C                  		jsr	sub_726FE(pc)
000E975C 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000E9760 6B00                       		bmi.s	loc_72C22
000E9762 264D                       		movea.l	a5,a3
000E9764 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000E9768 226E 0018                  		movea.l	$18(a6),a1
000E976C 0895 0002                  		bclr	#2,(a5)
000E9770 08D5 0001                  		bset	#1,(a5)
000E9774 102D 000B                  		move.b	$B(a5),d0
000E9778 4EBA 0000                  		jsr	sub_72C4E(pc)
000E977C 2A4B                       		movea.l	a3,a5
000E977E                            
000E977E                            loc_72C22:
000E977E 504F                       		addq.w	#8,sp
000E9780 4E75                       		rts	
000E9782                            ; ===========================================================================
000E9782                            
000E9782                            loc_72C26:				; XREF: loc_72A64
000E9782 7000                       		moveq	#0,d0
000E9784 101C                       		move.b	(a4)+,d0
000E9786 1B40 000B                  		move.b	d0,$B(a5)
000E978A                            
000E978A                            SFM_UpdateVoice:
000E978A 0815 0002                  		btst	#2,(a5)
000E978E 6600 0000                  		bne.w	locret_72CAA
000E9792 4A2E 000E                  	tst.b	$0E(a6)
000E9796 6600                       	bne.s	locret_72CAA_2
000E9798 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E979C 6600                       	bne.s	locret_72CAA
000E979E                            
000E979E                            	locret_72CAA_2:
000E979E                            
000E979E 226E 0018                  		movea.l	$18(a6),a1
000E97A2 4A2E 000E                  		tst.b	$E(a6)
000E97A6 6700                       		beq.s	sub_72C4E
000E97A8 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000E97AC 4A2E 000E                  		tst.b	$E(a6)
000E97B0 6B00                       		bmi.s	sub_72C4E
000E97B2 226E 0020                  		movea.l	$20(a6),a1
000E97B6                            
000E97B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E97B6                            
000E97B6                            
000E97B6                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000E97B6 5340                       		subq.w	#1,d0
000E97B8 6B00                       		bmi.s	loc_72C5C
000E97BA 323C 0019                  		move.w	#$19,d1
000E97BE                            
000E97BE                            loc_72C56:
000E97BE D2C1                       		adda.w	d1,a1
000E97C0 51C8 FFFC                  		dbf	d0,loc_72C56
000E97C4                            
000E97C4                            loc_72C5C:
000E97C4 1219                       		move.b	(a1)+,d1
000E97C6 1B41 001F                  		move.b	d1,$1F(a5)
000E97CA 1801                       		move.b	d1,d4
000E97CC 103C 00B0                  		move.b	#$B0,d0
000E97D0 4EBA F950                  		jsr	sub_72722(pc)
000E97D4 45FA 0000                  		lea	byte_72D18(pc),a2
000E97D8 7613                       		moveq	#$13,d3
000E97DA                            
000E97DA                            loc_72C72:
000E97DA 101A                       		move.b	(a2)+,d0
000E97DC 1219                       		move.b	(a1)+,d1
000E97DE 4EBA F942                  		jsr	sub_72722(pc)
000E97E2 51CB FFF6                  		dbf	d3,loc_72C72
000E97E6 7A03                       		moveq	#3,d5
000E97E8 0244 0007                  		andi.w	#7,d4
000E97EC 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000E97F0 162D 0009                  		move.b	9(a5),d3
000E97F4 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000E97F8                            
000E97F8                            loc_72C8C:
000E97F8 101A                       		move.b	(a2)+,d0
000E97FA 1219                       		move.b	(a1)+,d1
000E97FC E20C                       		lsr.b	#1,d4
000E97FE 6400                       		bcc.s	loc_72C96
000E9800 D203                       		add.b	d3,d1
000E9802                            
000E9802                            loc_72C96:
000E9802 4EBA F91E                  		jsr	sub_72722(pc)
000E9806 51CD FFF0                  		dbf	d5,loc_72C8C
000E980A 103C 00B4                  		move.b	#$B4,d0
000E980E 122D 000A                  		move.b	$A(a5),d1
000E9812 4EBA F90E                  		jsr	sub_72722(pc)
000E9816                            
000E9816                            locret_72CAA:
000E9816 4E75                       		rts	
000E9818                            ; End of function sub_72C4E
000E9818                            
000E9818                            ; ===========================================================================
000E9818 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000E9820                            
000E9820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E9820                            
000E9820                            
000E9820                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000E9820 0815 0002                  		btst	#2,(a5)
000E9824 6600                       		bne.s	locret_72D16
000E9826                            
000E9826 4A2E 000E                  	tst.b	$0E(a6)
000E982A 6600                       	bne.s	locret_72D16_2
000E982C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E9830 6600                       	bne.s	locret_72D16
000E9832                            
000E9832                            	locret_72D16_2:
000E9832 7000                       		moveq	#0,d0
000E9834 102D 000B                  		move.b	$B(a5),d0
000E9838 226E 0018                  		movea.l	$18(a6),a1
000E983C 4A2E 000E                  		tst.b	$E(a6)
000E9840 6700                       		beq.s	loc_72CD8
000E9842 226E 0020                  		movea.l	$20(a6),a1
000E9846 4A2E 000E                  		tst.b	$E(a6)
000E984A 6B00                       		bmi.s	loc_72CD8
000E984C 226E 0020                  		movea.l	$20(a6),a1
000E9850                            
000E9850                            loc_72CD8:
000E9850 5340                       		subq.w	#1,d0
000E9852 6B00                       		bmi.s	loc_72CE6
000E9854 323C 0019                  		move.w	#$19,d1
000E9858                            
000E9858                            loc_72CE0:
000E9858 D2C1                       		adda.w	d1,a1
000E985A 51C8 FFFC                  		dbf	d0,loc_72CE0
000E985E                            
000E985E                            loc_72CE6:
000E985E D2FC 0015                  		adda.w	#$15,a1
000E9862 45FA 0000                  		lea	byte_72D2C(pc),a2
000E9866 102D 001F                  		move.b	$1F(a5),d0
000E986A 0240 0007                  		andi.w	#7,d0
000E986E 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000E9872 162D 0009                  		move.b	9(a5),d3
000E9876 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000E987A 6B00                       		bmi.s	locret_72D16
000E987C 7A03                       		moveq	#3,d5
000E987E                            
000E987E                            loc_72D02:
000E987E 101A                       		move.b	(a2)+,d0
000E9880 1219                       		move.b	(a1)+,d1
000E9882 E20C                       		lsr.b	#1,d4
000E9884 6400                       		bcc.s	loc_72D12
000E9886 D203                       		add.b	d3,d1
000E9888 6500                       		bcs.s	loc_72D12
000E988A 4EBA F896                  		jsr	sub_72722(pc)
000E988E                            
000E988E                            loc_72D12:
000E988E 51CD FFEE                  		dbf	d5,loc_72D02
000E9892                            
000E9892                            locret_72D16:
000E9892 4E75                       		rts	
000E9894                            ; End of function sub_72CB4
000E9894                            
000E9894                            ; ===========================================================================
000E9894 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000E989E 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000E98A8 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000E98AC                            ; ===========================================================================
000E98AC                            
000E98AC                            loc_72D30:				; XREF: loc_72A64
000E98AC 08D5 0003                  		bset	#3,(a5)
000E98B0 2B4C 0014                  		move.l	a4,$14(a5)
000E98B4 1B5C 0018                  		move.b	(a4)+,$18(a5)
000E98B8 1B5C 0019                  		move.b	(a4)+,$19(a5)
000E98BC 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000E98C0 101C                       		move.b	(a4)+,d0
000E98C2 E208                       		lsr.b	#1,d0
000E98C4 1B40 001B                  		move.b	d0,$1B(a5)
000E98C8 426D 001C                  		clr.w	$1C(a5)
000E98CC 4E75                       		rts	
000E98CE                            ; ===========================================================================
000E98CE                            
000E98CE                            loc_72D52:				; XREF: loc_72A64
000E98CE 08D5 0003                  		bset	#3,(a5)
000E98D2 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000E98D6 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000E98DA 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000E98DC 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000E98DE 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000E98E0 1018                       		move.b	(a0)+,d0				; CHG: ''
000E98E2 E208                       		lsr.b	#$01,d0					; CHG: ''
000E98E4 12C0                       		move.b	d0,(a1)+				; CHG: ''
000E98E6 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000E98E8 4E75                       		rts	
000E98EA                            ; ===========================================================================
000E98EA                            
000E98EA                            loc_72D58:				; XREF: loc_72A64
000E98EA 0895 0007                  		bclr	#7,(a5)
000E98EE 0895 0004                  		bclr	#4,(a5)
000E98F2 4A2D 0001                  		tst.b	1(a5)
000E98F6 6B00                       		bmi.s	loc_72D74
000E98F8 4A2E 0008                  		tst.b	8(a6)
000E98FC 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000E9900 4EBA F7E4                  		jsr	sub_726FE(pc)
000E9904 6000                       		bra.s	loc_72D78
000E9906                            ; ===========================================================================
000E9906                            
000E9906                            loc_72D74:
000E9906 4EBA FB50                  		jsr	sub_729A0(pc)
000E990A                            
000E990A                            loc_72D78:
000E990A 4A2E 000E                  		tst.b	$E(a6)
000E990E 6A00 0000                  		bpl.w	loc_72E02
000E9912 4216                       		clr.b	0(a6)
000E9914 7000                       		moveq	#0,d0
000E9916 102D 0001                  		move.b	1(a5),d0
000E991A 6B00                       		bmi.s	loc_72DCC
000E991C 41FA F250                  		lea	dword_722CC(pc),a0
000E9920 264D                       		movea.l	a5,a3
000E9922 0C00 0004                  		cmpi.b	#4,d0
000E9926 6600                       		bne.s	loc_72DA8
000E9928 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000E992C 6A00                       		bpl.s	loc_72DA8
000E992E 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000E9932 226E 0020                  		movea.l	$20(a6),a1
000E9936 6000                       		bra.s	loc_72DB8
000E9938                            ; ===========================================================================
000E9938                            
000E9938                            loc_72DA8:
000E9938 5500                       		subq.b	#2,d0
000E993A E508                       		lsl.b	#2,d0
000E993C 2A70 0000                  		movea.l	(a0,d0.w),a5
000E9940 4A15                       		tst.b	(a5)
000E9942 6A00                       		bpl.s	loc_72DC8
000E9944 226E 0018                  		movea.l	$18(a6),a1
000E9948                            
000E9948                            loc_72DB8:
000E9948 0895 0002                  		bclr	#2,(a5)
000E994C 08D5 0001                  		bset	#1,(a5)
000E9950 102D 000B                  		move.b	$B(a5),d0
000E9954 4EBA FE60                  		jsr	sub_72C4E(pc)
000E9958                            
000E9958                            loc_72DC8:
000E9958 2A4B                       		movea.l	a3,a5
000E995A 6000                       		bra.s	loc_72E02
000E995C                            ; ===========================================================================
000E995C                            
000E995C                            loc_72DCC:
000E995C 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000E9960 4A10                       		tst.b	(a0)
000E9962 6A00                       		bpl.s	loc_72DE0
000E9964 0C00 00E0                  		cmpi.b	#$E0,d0
000E9968 6700                       		beq.s	loc_72DEA
000E996A 0C00 00C0                  		cmpi.b	#$C0,d0
000E996E 6700                       		beq.s	loc_72DEA
000E9970                            
000E9970                            loc_72DE0:
000E9970 41FA F1FC                  		lea	dword_722CC(pc),a0
000E9974 E608                       		lsr.b	#3,d0
000E9976 2070 0000                  		movea.l	(a0,d0.w),a0
000E997A                            
000E997A                            loc_72DEA:
000E997A 0890 0002                  		bclr	#2,(a0)
000E997E 08D0 0001                  		bset	#1,(a0)
000E9982 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000E9988 6600                       		bne.s	loc_72E02
000E998A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000E9992                            
000E9992                            loc_72E02:
000E9992 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000E9994 4E75                       		rts	
000E9996                            
000E9996                            SF2_MutePCM:
000E9996 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000E9998 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000E999E 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000E99A0 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E99A6 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000E99AC 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E99BE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E99C0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99C2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99C4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E99C6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99C8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99CA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E99CC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99CE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99D0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E99D2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99D4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E99D6 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E99DE 33FC 0000 00A1 1100        		startZ80_S1
000E99E6 4E75                       		rts							; CHG: return
000E99E8                            
000E99E8                            SF2_MutePCM2:
000E99E8 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000E99EE 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000E99F4 33FC 0100 00A1 1100 0839+  		stopZ80_S1
000E9A06 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E9A08 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A0A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A0C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E9A0E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A10 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A12 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000E9A14 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A16 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A18 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000E9A1A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A1C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000E9A1E 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000E9A26 33FC 0000 00A1 1100        		startZ80_S1
000E9A2E 4E75                       		rts							; CHG: return
000E9A30                            
000E9A30                            ; ===========================================================================
000E9A30                            
000E9A30                            loc_72E06:				; XREF: loc_72A64
000E9A30 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000E9A36 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000E9A3A 0815 0002                  		btst	#2,(a5)
000E9A3E 6600                       		bne.s	locret_72E1E 
000E9A40 4A2E 000E                  	tst.b	$0E(a6)
000E9A44 6600                       	bne.s	locret_72E1E_2
000E9A46 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000E9A4A 6600                       	bne.s	locret_72E1E 
000E9A4C                            
000E9A4C                            	locret_72E1E_2:
000E9A4C 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000E9A50 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000E9A56 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000E9A5A 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000E9A5E 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000E9A60 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000E9A68                            
000E9A68                            locret_72E1E:
000E9A68 4E75                       		rts	
000E9A6A                            ; ===========================================================================
000E9A6A                            
000E9A6A                            loc_72E20:				; XREF: loc_72A64
000E9A6A 0895 0003                  		bclr	#3,(a5)
000E9A6E 4E75                       		rts	
000E9A70                            ; ===========================================================================
000E9A70                            
000E9A70                            loc_72E26:				; XREF: loc_72A64
000E9A70 1B5C 000B                  		move.b	(a4)+,$B(a5)
000E9A74 4E75                       		rts	
000E9A76                            ; ===========================================================================
000E9A76                            
000E9A76                            loc_72E2C:				; XREF: loc_72A64
000E9A76 101C                       		move.b	(a4)+,d0
000E9A78 E148                       		lsl.w	#8,d0
000E9A7A 101C                       		move.b	(a4)+,d0
000E9A7C D8C0                       		adda.w	d0,a4
000E9A7E 534C                       		subq.w	#1,a4
000E9A80 4E75                       		rts	
000E9A82                            ; ===========================================================================
000E9A82                            
000E9A82                            loc_72E38:				; XREF: loc_72A64
000E9A82 7000                       		moveq	#0,d0
000E9A84 101C                       		move.b	(a4)+,d0
000E9A86 121C                       		move.b	(a4)+,d1
000E9A88 4A35 0024                  		tst.b	$24(a5,d0.w)
000E9A8C 6600                       		bne.s	loc_72E48
000E9A8E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000E9A92                            
000E9A92                            loc_72E48:
000E9A92 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000E9A96 66DE                       		bne.s	loc_72E2C
000E9A98 544C                       		addq.w	#2,a4
000E9A9A 4E75                       		rts	
000E9A9C                            ; ===========================================================================
000E9A9C                            
000E9A9C                            loc_72E52:				; XREF: loc_72A64
000E9A9C 7000                       		moveq	#0,d0
000E9A9E 102D 000D                  		move.b	$D(a5),d0
000E9AA2 5900                       		subq.b	#4,d0
000E9AA4 2B8C 0000                  		move.l	a4,(a5,d0.w)
000E9AA8 1B40 000D                  		move.b	d0,$D(a5)
000E9AAC 60C8                       		bra.s	loc_72E2C
000E9AAE                            ; ===========================================================================
000E9AAE                            
000E9AAE                            loc_72E64:				; XREF: loc_72A64
000E9AAE 103C 0088                  		move.b	#$88,d0
000E9AB2 123C 000F                  		move.b	#$F,d1
000E9AB6 4EBA F676                  		jsr	sub_7272E(pc)
000E9ABA 103C 008C                  		move.b	#$8C,d0
000E9ABE 123C 000F                  		move.b	#$F,d1
000E9AC2 6000 F66A                  		bra.w	sub_7272E
000E9AC6                            ; ===========================================================================
000E9AC6                            
000E9AC6                            Music81:	include	"sound\Mus81 - GHZ.asm" ; SCD PPZ Past Theme
000E9AC6                            ; ---------------------------------------------------------------------------
000E9AC6                            		include	"sound\Macros.asm"
000E9AC6                            ; ===========================================================================
000E9AC6                            ; ---------------------------------------------------------------------------
000E9AC6                            ; Sound Driver Macros
000E9AC6                            ; ---------------------------------------------------------------------------
000E9AC6                            
000E9AC6                            	; --- Equates for the macros ---
000E9AC6                            
000E9AC6 =00000000                  NoSpeakers	=	%00000000
000E9AC6 =00000040                  RightSpeaker	=	%01000000
000E9AC6 =00000080                  LeftSpeaker	=	%10000000
000E9AC6 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000E9AC6                            
000E9AC6                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000E9AC6                            
000E9AC6 =00000080                  REST		=	$80
000E9AC6 =00000081                  N_S1Kick	=	$81
000E9AC6 =00000082                  N_S1Snare	=	$82
000E9AC6 =00000083                  N_S1Timpani	=	$83
000E9AC6 =00000088                  N_S1TimpHigh	=	$88
000E9AC6 =00000089                  N_S1TimpMid	=	$89
000E9AC6 =0000008A                  N_S1TimpLow	=	$8A
000E9AC6 =0000008B                  N_S1TimpLowest	=	$8B
000E9AC6                            
000E9AC6 =00000001                  C		=	$01
000E9AC6 =00000002                  Cs		=	$02
000E9AC6 =00000003                  D		=	$03
000E9AC6 =00000004                  Eb		=	$04
000E9AC6 =00000005                  E		=	$05
000E9AC6 =00000006                  F		=	$06
000E9AC6 =00000007                  Fs		=	$07
000E9AC6 =00000008                  G		=	$08
000E9AC6 =00000009                  Gs		=	$09
000E9AC6 =0000000A                  A		=	$0A
000E9AC6 =0000000B                  Bb		=	$0B
000E9AC6 =0000000C                  B		=	$0C
000E9AC6                            
000E9AC6 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000E9AC6 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000E9AC6 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000E9AC6 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000E9AC6 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000E9AC6 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000E9AC6 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000E9AC6 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000E9AC6 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000E9AC6 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000E9AC6 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000E9AC6 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000E9AC6                            
000E9AC6 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000E9AC6 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000E9AC6 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000E9AC6 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000E9AC6 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000E9AC6 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000E9AC6 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000E9AC6 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000E9AC6 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000E9AC6 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000E9AC6 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000E9AC6 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000E9AC6                            
000E9AC6 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000E9AC6 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000E9AC6 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000E9AC6 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000E9AC6 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000E9AC6 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000E9AC6 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000E9AC6 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000E9AC6 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000E9AC6 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000E9AC6 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000E9AC6 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000E9AC6                            
000E9AC6 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000E9AC6 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000E9AC6 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000E9AC6 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000E9AC6 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000E9AC6 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000E9AC6 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000E9AC6 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000E9AC6 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000E9AC6 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000E9AC6 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000E9AC6 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000E9AC6                            
000E9AC6 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000E9AC6 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000E9AC6 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000E9AC6 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000E9AC6 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000E9AC6 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000E9AC6 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000E9AC6 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000E9AC6 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000E9AC6 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000E9AC6 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000E9AC6 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000E9AC6                            
000E9AC6 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000E9AC6 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000E9AC6 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000E9AC6 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000E9AC6 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000E9AC6 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000E9AC6 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000E9AC6 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000E9AC6 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000E9AC6 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000E9AC6 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000E9AC6 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000E9AC6                            
000E9AC6 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000E9AC6 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000E9AC6 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000E9AC6 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000E9AC6 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000E9AC6 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000E9AC6 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000E9AC6 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000E9AC6 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000E9AC6 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000E9AC6 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000E9AC6 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000E9AC6                            
000E9AC6 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000E9AC6 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000E9AC6 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000E9AC6 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000E9AC6 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000E9AC6 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000E9AC6 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000E9AC6 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000E9AC6 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000E9AC6 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000E9AC6 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000E9AC6 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000E9AC6                            
000E9AC6                            ; ---------------------------------------------------------------------------
000E9AC6                            ; The actual macros
000E9AC6                            ; ---------------------------------------------------------------------------
000E9AC6                            
000E9AC6                            	; --- Flag E0 - Set panning ---
000E9AC6                            
000E9AC6                            Pan		macro	PanValue
000E9AC6                            		dc.b	$E0,PanValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E1 - Set detune ---
000E9AC6                            
000E9AC6                            Detune		macro	DetuneValue
000E9AC6                            		dc.b	$E1,DetuneValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000E9AC6                            
000E9AC6                            UnkFlag		macro	UnkValue
000E9AC6                            		dc.b	$E2,UnkValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E3 - Return ---
000E9AC6                            
000E9AC6                            Return		macro
000E9AC6                            		dc.b	$E3
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000E9AC6                            
000E9AC6                            FadeIn		macro
000E9AC6                            		dc.b	$E4
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000E9AC6                            
000E9AC6                            TempMul		macro	TempoMultValue
000E9AC6                            		dc.b	$E5,TempoMultValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E6 - Add volume (FM only) ---
000E9AC6                            
000E9AC6                            VolumFM		macro	VolumeValue
000E9AC6                            		dc.b	$E6,VolumeValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E7 - Set soft key on (one turn only) ---
000E9AC6                            
000E9AC6                            SoftKey		macro
000E9AC6                            		dc.b	$E7
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E8 - Set release key rate counter ---
000E9AC6                            
000E9AC6                            KeyRate		macro	ReleaseValue
000E9AC6                            		dc.b	$E8,ReleaseValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag E9 - Add pitch ---
000E9AC6                            
000E9AC6                            Pitch		macro	PitchValue
000E9AC6                            		dc.b	$E9,PitchValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag EA - Set tempo (for all channels) ---
000E9AC6                            
000E9AC6                            TempSet		macro	TempoSetValue
000E9AC6                            		dc.b	$EA,TempoSetValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000E9AC6                            
000E9AC6                            TempAll		macro	TempoAllValue
000E9AC6                            		dc.b	$EB,TempoAllValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000E9AC6                            
000E9AC6                            VoluPSG		macro	VolumeValue
000E9AC6                            		dc.b	$EC,VolumeValue
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000E9AC6                            
000E9AC6                            ClrBlck		macro
000E9AC6                            		dc.b	$ED
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000E9AC6                            
000E9AC6                            StopFM4		macro
000E9AC6                            		dc.b	$EE
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag EF - FM Voice Select ---
000E9AC6                            
000E9AC6                            VoiceFM		macro	VoiceID
000E9AC6                            		dc.b	$EF,VoiceID
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000E9AC6                            
000E9AC6                            Modulat		macro	Delay, Speed, Rate, Steps
000E9AC6                            		dc.b	$F0,Delay,Speed,Rate,Steps
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000E9AC6                            
000E9AC6                            ModulOn		macro
000E9AC6                            		dc.b	$F1
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F2 - Halt channel ---
000E9AC6                            
000E9AC6                            Halt		macro
000E9AC6                            		dc.b	$F2
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F3 - PSG 4 Control ---
000E9AC6                            
000E9AC6                            SetPSG4		macro	PSG4Value
000E9AC6                            		dc.b	$F3,PSG4Value
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000E9AC6                            
000E9AC6                            ModuOff		macro
000E9AC6                            		dc.b	$F4
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000E9AC6                            
000E9AC6                            VoicPSG		macro	VoiceID
000E9AC6                            		dc.b	$F5,VoiceID
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F6 - Jump ---
000E9AC6                            
000E9AC6                            Jump		macro	Location
000E9AC6                            		dc.b	$F6
000E9AC6                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000E9AC6                            		dc.b	(Location-*)&$FF
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F7 - Loop ---
000E9AC6                            
000E9AC6                            Loop		macro	Slot, Count, Location
000E9AC6                            		dc.b	$F7,Slot,Count
000E9AC6                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000E9AC6                            		dc.b	(Location-*)&$FF
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F8 - Call ---
000E9AC6                            
000E9AC6                            Call		macro	Location
000E9AC6                            		dc.b	$F8
000E9AC6                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000E9AC6                            		dc.b	(Location-*)&$FF
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000E9AC6                            
000E9AC6                            ForceRR		macro
000E9AC6                            		dc.b	$F9
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            	; --- Flag FA - Reverse PCM ---
000E9AC6                            
000E9AC6                            Reverse		macro
000E9AC6                            		dc.b	$FA
000E9AC6                            		endm
000E9AC6                            
000E9AC6                            ; ===========================================================================
000E9AC6                            ; ===========================================================================
000E9AC6                            ; ---------------------------------------------------------------------------
000E9AC6                            Mus81_GHZ_Header:
000E9AC6                            
000E9AC6                            ;	smpsHeaderVoice     Mus81_GHZ_Voices
000E9AC6                            ;	smpsHeaderChan      $06, $03
000E9AC6                            ;	smpsHeaderTempo     $01, $03
000E9AC6 0000                       		dc.w	Mus81_GHZ_Voices-Mus81_GHZ_Header				; Voice list address
000E9AC8 00                         		dc.b	(GHZ_DACFM_End-GHZ_DACFM)/4		; Number of DAC & FM channels
000E9AC9 00                         		dc.b	(GHZ_PSG_End-GHZ_PSG)/6			; Number of PSG channels
000E9ACA 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000E9ACC                            
000E9ACC                            
000E9ACC                            GHZ_DACFM:
000E9ACC 0000                       		dc.w	Mus81_GHZ_NO_DAC-Mus81_GHZ_Header				; 	PCM 1 tracker address
000E9ACE 00EF                       		dc.b	$00, $EF				; '' (Pitch, Volume)
000E9AD0 0000                       		dc.w	Mus81_GHZ_NO_DAC-Mus81_GHZ_Header				; PCM 2 tracker address
000E9AD2 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000E9AD4 0000                       		dc.w	Mus81_GHZ_NO_DAC-Mus81_GHZ_Header				; FM 1 tracker address
000E9AD6 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000E9AD8 0000                       		dc.w	Mus81_GHZ_FM2-Mus81_GHZ_Header				; FM 2 tracker address
000E9ADA 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000E9ADC 0000                       		dc.w	Mus81_GHZ_FM3-Mus81_GHZ_Header				; FM 3 tracker address
000E9ADE F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000E9AE0 0000                       		dc.w	Mus81_GHZ_FM4-Mus81_GHZ_Header				; FM 4 tracker address
000E9AE2 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000E9AE4 0000                       		dc.w	Mus81_GHZ_FM5-Mus81_GHZ_Header				; FM 5 tracker address
000E9AE6 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000E9AE8                            GHZ_DACFM_End:
000E9AE8                            
000E9AE8                            	; --- PSG channels ---
000E9AE8                            
000E9AE8                            GHZ_PSG:
000E9AE8 0000                       		dc.w	Mus81_GHZ_PSG1-Mus81_GHZ_Header				; PSG 1 tracker address
000E9AEA D001                       		dc.b	$D0, $01				; '' (Pitch, Volume)
000E9AEC 0003                       		dc.w	fTone_03					; '' (Starting tone)
000E9AEE 0000                       		dc.w	Mus81_GHZ_PSG2-Mus81_GHZ_Header				; PSG 2 tracker address
000E9AF0 D003                       		dc.b	$D0, $03				; '' (Pitch, Volume)
000E9AF2 0006                       		dc.w	fTone_06					; '' (Starting tone)
000E9AF4 0000                       		dc.w	Mus81_GHZ_PSG3-Mus81_GHZ_Header				; PSG 3 tracker address
000E9AF6 0300                       		dc.b	$03, $00				; '' (Pitch, Volume)
000E9AF8 0004                       		dc.w	fTone_04					; '' (Starting tone)
000E9AFA                            GHZ_PSG_End:
000E9AFA                            Mus81_GHZ_NO_DAC: 
000E9AFC                            
000E9AFC                            PalmtreePanicPast_Loop1:
000E9AFC B312 BAAE B3BA 0CAE        	dc.b	nD4, $12, nA4, nA3, nD4, nA4, $0C, nA3
000E9B04 B312 BAAE B3BA 0CAE        	dc.b	nD4, $12, nA4, nA3, nD4, nA4, $0C, nA3
000E9B0C B112 B8AC B1B8 0CAC        	dc.b	nC4, $12, nG4, nG3, nC4, nG4, $0C, nG3
000E9B14 B112 B8AC B1B8 0CAC        	dc.b	nC4, $12, nG4, nG3, nC4, nG4, $0C, nG3
000E9B21 B618 B1B6 1206 B10C        	dc.b	nF4, $18, nC4, nF4, $12, $06, nC4, $0C
000E9B29 B6B5 18B0 B512 B006        	dc.b	nF4, nE4, $18, nB3, nE4, $12, nB3, $06
000E9B31 B50C B4B3 18AE B312        	dc.b	nE4, $0C, nEb4, nD4, $18, nA3, nD4, $12
000E9B39 AE06 B30C B4B5 18B0        	dc.b	nA3, $06, nD4, $0C, nEb4, nE4, $18, nB3
000E9B41 B512 B006 B518 B6B1        	dc.b	nE4, $12, nB3, $06, nE4, $18, nF4, nC4
000E9B49 B6B1 0CB6 B518 B0B5        	dc.b	nF4, nC4, $0C, nF4, nE4, $18, nB3, nE4
000E9B51 12B0 06B5 0CB4 B318        	dc.b	$12, nB3, $06, nE4, $0C, nEb4, nD4, $18
000E9B59 AEB3 AEB3 AEB3 1206        	dc.b	nA3, nD4, nA3, nD4, nA3, nD4, $12, $06
000E9B61 AE0C ADAC 18B3 B8B3        	dc.b	nA3, $0C, nAb3, nG3, $18, nD4, nG4, nD4
000E9B69 0CAC AC12 12B3 0CB8        	dc.b	$0C, nG3, nG3, $12, $12, nD4, $0C, nG4
000E9B71 12B3 AC0C                  	dc.b	$12, nD4, nG3, $0C
000E9B75                            
000E9B75                            PalmtreePanicPast_Loop2:
000E9B75 B112 B806 0CAC B112        	dc.b	nC4, $12, nG4, $06, $0C, nG3, nC4, $12
000E9B7D B806 06AC AEAC B512        	dc.b	nG4, $06, $06, nG3, nA3, nG3, nE4, $12
000E9B85 B006 18B5 12B0 060C        	dc.b	nB3, $06, $18, nE4, $12, nB3, $06, $0C
000E9B8D B4B3 12BA 060C AEB3        	dc.b	nEb4, nD4, $12, nA4, $06, $0C, nA3, nD4
000E9B95 12BA 0606 AEB3 AEAC        	dc.b	$12, nA4, $06, $06, nA3, nD4, nA3, nG3
000E9B9D 1206 B312 06AC 12B3        	dc.b	$12, $06, nD4, $12, $06, nG3, $12, nD4
000E9BA5 06B8 0CB3 B512 B006        	dc.b	$06, nG4, $0C, nD4, nE4, $12, nB3, $06
000E9BAD 0CA9 B512 B006 0CAF        	dc.b	$0C, nE3, nE4, $12, nB3, $06, $0C, nBb3
000E9BB5 AE12 06B5 1206 AE12        	dc.b	nA3, $12, $06, nE4, $12, $06, nA3, $12
000E9BBD B506 B8BB BEC1 B312        	dc.b	nE4, $06, nG4, nBb4, nCs5, nE5, nD4, $12
000E9BC5 06AE 18B3 1206 AE0C        	dc.b	$06, nA3, $18, nD4, $12, $06, nA3, $0C
000E9BCD ADAC 1206 B312 06B6        	dc.b	nAb3, nG3, $12, $06, nD4, $12, $06, nF4
000E9BD5 B880 B6B3 ACB3 AC          	dc.b	nG4, nRst, nF4, nD4, nG3, nD4, nG3
000E9BE4                            	
000E9BE4                            
000E9BE4                            ; FM1 Data
000E9BE4                            Mus81_GHZ_FM1:
000E9BE4 F2                                     Halt
000E9BE5                            
000E9BE5                            ; FM2 Data
000E9BE5                            Mus81_GHZ_FM2:
000E9BE5 F2                                     Halt
000E9BE6                            
000E9BE6                            ; FM3 Data
000E9BE6                            Mus81_GHZ_FM3:
000E9BE6 F2                                     Halt
000E9BE7                            
000E9BE7                            ; FM4 Data
000E9BE7                            Mus81_GHZ_FM4:
000E9BE7 F2                                     Halt
000E9BE8                            
000E9BE8                            ; FM5 Data
000E9BE8                            Mus81_GHZ_FM5:
000E9BE8 F2                                     Halt
000E9BE9                            
000E9BE9                            ; PSG1 Data
000E9BE9                            Mus81_GHZ_PSG1:
000E9BE9 F2                                     Halt
000E9BEA                            
000E9BEA                            ; PSG2 Data
000E9BEA                            Mus81_GHZ_PSG2:
000E9BEA F2                                     Halt
000E9BEB                            
000E9BEB                            ; PSG3 Data
000E9BEB                            Mus81_GHZ_PSG3:
000E9BEB F2                                     Halt
000E9BEC                            
000E9BEC                            ; DAC Data
000E9BEC                            Mus81_GHZ_DAC:
000E9BEC                                        
000E9BEC F2                             Halt
000E9BED                            	
000E9BED                            Mus81_GHZ_Voices:
000E9BED F2                                     Halt
000E9BED F2                                     Halt
000E9BEE                            		even
000E9BEE                            Music82:	incbin	"sound\PPZ.bin" ; SCD PPZ Present Theme
000EB008 00                         		even
000EB008                            Music83:	include	"sound\SCD_Title.asm" ; SCD Title Theme
000EB008                            ; ---------------------------------------------------------------------------
000EB008                            		include	"sound\Macros.asm"
000EB008                            ; ===========================================================================
000EB008                            ; ---------------------------------------------------------------------------
000EB008                            ; Sound Driver Macros
000EB008                            ; ---------------------------------------------------------------------------
000EB008                            
000EB008                            	; --- Equates for the macros ---
000EB008                            
000EB008 =00000000                  NoSpeakers	=	%00000000
000EB008 =00000040                  RightSpeaker	=	%01000000
000EB008 =00000080                  LeftSpeaker	=	%10000000
000EB008 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB008                            
000EB008                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB008                            
000EB008 =00000080                  REST		=	$80
000EB008 =00000081                  N_S1Kick	=	$81
000EB008 =00000082                  N_S1Snare	=	$82
000EB008 =00000083                  N_S1Timpani	=	$83
000EB008 =00000088                  N_S1TimpHigh	=	$88
000EB008 =00000089                  N_S1TimpMid	=	$89
000EB008 =0000008A                  N_S1TimpLow	=	$8A
000EB008 =0000008B                  N_S1TimpLowest	=	$8B
000EB008                            
000EB008 =00000001                  C		=	$01
000EB008 =00000002                  Cs		=	$02
000EB008 =00000003                  D		=	$03
000EB008 =00000004                  Eb		=	$04
000EB008 =00000005                  E		=	$05
000EB008 =00000006                  F		=	$06
000EB008 =00000007                  Fs		=	$07
000EB008 =00000008                  G		=	$08
000EB008 =00000009                  Gs		=	$09
000EB008 =0000000A                  A		=	$0A
000EB008 =0000000B                  Bb		=	$0B
000EB008 =0000000C                  B		=	$0C
000EB008                            
000EB008 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB008 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB008 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB008 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB008 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB008 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB008 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB008 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB008 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB008 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB008 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB008 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB008                            
000EB008 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB008 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB008 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB008 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB008 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB008 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB008 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB008 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB008 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB008 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB008 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB008 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB008                            
000EB008 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB008 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB008 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB008 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB008 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB008 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB008 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB008 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB008 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB008 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB008 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB008 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB008                            
000EB008 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB008 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB008 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB008 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB008 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB008 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB008 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB008 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB008 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB008 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB008 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB008 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB008                            
000EB008 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB008 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB008 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB008 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB008 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB008 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB008 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB008 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB008 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB008 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB008 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB008 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB008                            
000EB008 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB008 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB008 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB008 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB008 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB008 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB008 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB008 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB008 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB008 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB008 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB008 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB008                            
000EB008 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB008 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB008 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB008 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB008 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB008 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB008 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB008 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB008 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB008 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB008 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB008 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB008                            
000EB008 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB008 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB008 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB008 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB008 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB008 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB008 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB008 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB008 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB008 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB008 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB008 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB008                            
000EB008                            ; ---------------------------------------------------------------------------
000EB008                            ; The actual macros
000EB008                            ; ---------------------------------------------------------------------------
000EB008                            
000EB008                            	; --- Flag E0 - Set panning ---
000EB008                            
000EB008                            Pan		macro	PanValue
000EB008                            		dc.b	$E0,PanValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E1 - Set detune ---
000EB008                            
000EB008                            Detune		macro	DetuneValue
000EB008                            		dc.b	$E1,DetuneValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB008                            
000EB008                            UnkFlag		macro	UnkValue
000EB008                            		dc.b	$E2,UnkValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E3 - Return ---
000EB008                            
000EB008                            Return		macro
000EB008                            		dc.b	$E3
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB008                            
000EB008                            FadeIn		macro
000EB008                            		dc.b	$E4
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB008                            
000EB008                            TempMul		macro	TempoMultValue
000EB008                            		dc.b	$E5,TempoMultValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E6 - Add volume (FM only) ---
000EB008                            
000EB008                            VolumFM		macro	VolumeValue
000EB008                            		dc.b	$E6,VolumeValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB008                            
000EB008                            SoftKey		macro
000EB008                            		dc.b	$E7
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E8 - Set release key rate counter ---
000EB008                            
000EB008                            KeyRate		macro	ReleaseValue
000EB008                            		dc.b	$E8,ReleaseValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag E9 - Add pitch ---
000EB008                            
000EB008                            Pitch		macro	PitchValue
000EB008                            		dc.b	$E9,PitchValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag EA - Set tempo (for all channels) ---
000EB008                            
000EB008                            TempSet		macro	TempoSetValue
000EB008                            		dc.b	$EA,TempoSetValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB008                            
000EB008                            TempAll		macro	TempoAllValue
000EB008                            		dc.b	$EB,TempoAllValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB008                            
000EB008                            VoluPSG		macro	VolumeValue
000EB008                            		dc.b	$EC,VolumeValue
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB008                            
000EB008                            ClrBlck		macro
000EB008                            		dc.b	$ED
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB008                            
000EB008                            StopFM4		macro
000EB008                            		dc.b	$EE
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag EF - FM Voice Select ---
000EB008                            
000EB008                            VoiceFM		macro	VoiceID
000EB008                            		dc.b	$EF,VoiceID
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB008                            
000EB008                            Modulat		macro	Delay, Speed, Rate, Steps
000EB008                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB008                            
000EB008                            ModulOn		macro
000EB008                            		dc.b	$F1
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F2 - Halt channel ---
000EB008                            
000EB008                            Halt		macro
000EB008                            		dc.b	$F2
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F3 - PSG 4 Control ---
000EB008                            
000EB008                            SetPSG4		macro	PSG4Value
000EB008                            		dc.b	$F3,PSG4Value
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB008                            
000EB008                            ModuOff		macro
000EB008                            		dc.b	$F4
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB008                            
000EB008                            VoicPSG		macro	VoiceID
000EB008                            		dc.b	$F5,VoiceID
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F6 - Jump ---
000EB008                            
000EB008                            Jump		macro	Location
000EB008                            		dc.b	$F6
000EB008                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB008                            		dc.b	(Location-*)&$FF
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F7 - Loop ---
000EB008                            
000EB008                            Loop		macro	Slot, Count, Location
000EB008                            		dc.b	$F7,Slot,Count
000EB008                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB008                            		dc.b	(Location-*)&$FF
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F8 - Call ---
000EB008                            
000EB008                            Call		macro	Location
000EB008                            		dc.b	$F8
000EB008                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB008                            		dc.b	(Location-*)&$FF
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB008                            
000EB008                            ForceRR		macro
000EB008                            		dc.b	$F9
000EB008                            		endm
000EB008                            
000EB008                            	; --- Flag FA - Reverse PCM ---
000EB008                            
000EB008                            Reverse		macro
000EB008                            		dc.b	$FA
000EB008                            		endm
000EB008                            
000EB008                            ; ===========================================================================
000EB008                            ; ===========================================================================
000EB008                            ; ---------------------------------------------------------------------------
000EB008                            Mus81_SCD_Title_Header:
000EB008                            
000EB008                            ;	smpsHeaderVoice     Mus81_SCD_Title_Voices
000EB008                            ;	smpsHeaderChan      $06, $03
000EB008                            ;	smpsHeaderTempo     $01, $03
000EB008 0000                       		dc.w	Mus81_SCD_Title_Voices-Mus81_SCD_Title_Header				; Voice list address
000EB00A 00                         		dc.b	(SCD_Title_DACFM_End-SCD_Title_DACFM)/4		; Number of DAC & FM channels
000EB00B 00                         		dc.b	(SCD_Title_PSG_End-SCD_Title_PSG)/6			; Number of PSG channels
000EB00C 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB00E                            
000EB00E                            
000EB00E                            SCD_Title_DACFM:
000EB00E 0000                       		dc.w	Mus81_SCD_Title_NO_DAC-Mus81_SCD_Title_Header				; PCM 1 tracker address
000EB010 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB012 0000                       		dc.w	Mus81_SCD_Title_DAC-Mus81_SCD_Title_Header				; PCM 2 tracker address
000EB014 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB016 0000                       		dc.w	Mus81_SCD_Title_FM1-Mus81_SCD_Title_Header				; FM 1 tracker address
000EB018 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB01A 0000                       		dc.w	Mus81_SCD_Title_FM2-Mus81_SCD_Title_Header				; FM 2 tracker address
000EB01C 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB01E 0000                       		dc.w	Mus81_SCD_Title_FM3-Mus81_SCD_Title_Header				; FM 3 tracker address
000EB020 F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB022 0000                       		dc.w	Mus81_SCD_Title_FM4-Mus81_SCD_Title_Header				; FM 4 tracker address
000EB024 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB026 0000                       		dc.w	Mus81_SCD_Title_FM5-Mus81_SCD_Title_Header				; FM 5 tracker address
000EB028 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB02A                            SCD_Title_DACFM_End:
000EB02A                            
000EB02A                            	; --- PSG channels ---
000EB02A                            
000EB02A                            SCD_Title_PSG:
000EB02A F2                                Halt
000EB02B                            SCD_Title_PSG_End:
000EB02B                            Mus81_SCD_Title_NO_DAC: 
000EB02B F51E                               dc.b    $F5,$1E            ; kick instrument
000EB02D B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB034                            
000EB034                            SCD_Title_Scratch1:	
000EB034                            
000EB034                            ; FM1 Data
000EB034                            Mus81_SCD_Title_FM1:
000EB034 F2                                     Halt
000EB035                            
000EB035                            ; FM2 Data
000EB035                            Mus81_SCD_Title_FM2:
000EB035 F2                                     Halt
000EB036                            
000EB036                            ; FM3 Data
000EB036                            Mus81_SCD_Title_FM3:
000EB036 F2                                     Halt
000EB037                            
000EB037                            ; FM4 Data
000EB037                            Mus81_SCD_Title_FM4:
000EB037 F2                                     Halt
000EB038                            
000EB038                            ; FM5 Data
000EB038                            Mus81_SCD_Title_FM5:
000EB038 F2                                     Halt
000EB039                            
000EB039                            ; PSG1 Data
000EB039                            Mus81_SCD_Title_PSG1:
000EB039 F2                                     Halt
000EB03A                            
000EB03A                            ; PSG2 Data
000EB03A                            Mus81_SCD_Title_PSG2:
000EB03A F2                                     Halt
000EB03B                            
000EB03B                            ; PSG3 Data
000EB03B                            Mus81_SCD_Title_PSG3:
000EB03B F2                                     Halt
000EB03C                            
000EB03C                            ; DAC Data
000EB03C                            Mus81_SCD_Title_DAC:
000EB03C F2                         			Halt
000EB03D                                        
000EB03D                            
000EB03D                            Mus81_SCD_Title_Voices:
000EB03D F2                                     Halt
000EB03D F2                                     Halt
000EB03E                            		even
000EB03E                            Music84:	include	"sound\Speed.asm" ; SCD Speed Shoes Theme
000EB03E                            ; ---------------------------------------------------------------------------
000EB03E                            		include	"sound\Macros.asm"
000EB03E                            ; ===========================================================================
000EB03E                            ; ---------------------------------------------------------------------------
000EB03E                            ; Sound Driver Macros
000EB03E                            ; ---------------------------------------------------------------------------
000EB03E                            
000EB03E                            	; --- Equates for the macros ---
000EB03E                            
000EB03E =00000000                  NoSpeakers	=	%00000000
000EB03E =00000040                  RightSpeaker	=	%01000000
000EB03E =00000080                  LeftSpeaker	=	%10000000
000EB03E =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB03E                            
000EB03E                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB03E                            
000EB03E =00000080                  REST		=	$80
000EB03E =00000081                  N_S1Kick	=	$81
000EB03E =00000082                  N_S1Snare	=	$82
000EB03E =00000083                  N_S1Timpani	=	$83
000EB03E =00000088                  N_S1TimpHigh	=	$88
000EB03E =00000089                  N_S1TimpMid	=	$89
000EB03E =0000008A                  N_S1TimpLow	=	$8A
000EB03E =0000008B                  N_S1TimpLowest	=	$8B
000EB03E                            
000EB03E =00000001                  C		=	$01
000EB03E =00000002                  Cs		=	$02
000EB03E =00000003                  D		=	$03
000EB03E =00000004                  Eb		=	$04
000EB03E =00000005                  E		=	$05
000EB03E =00000006                  F		=	$06
000EB03E =00000007                  Fs		=	$07
000EB03E =00000008                  G		=	$08
000EB03E =00000009                  Gs		=	$09
000EB03E =0000000A                  A		=	$0A
000EB03E =0000000B                  Bb		=	$0B
000EB03E =0000000C                  B		=	$0C
000EB03E                            
000EB03E =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB03E =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB03E =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB03E =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB03E =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB03E =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB03E =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB03E =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB03E =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB03E =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB03E =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB03E =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB03E                            
000EB03E =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB03E =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB03E =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB03E =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB03E =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB03E =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB03E =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB03E =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB03E =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB03E =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB03E =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB03E =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB03E                            
000EB03E =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB03E =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB03E =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB03E =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB03E =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB03E =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB03E =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB03E =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB03E =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB03E =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB03E =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB03E =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB03E                            
000EB03E =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB03E =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB03E =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB03E =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB03E =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB03E =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB03E =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB03E =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB03E =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB03E =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB03E =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB03E =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB03E                            
000EB03E =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB03E =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB03E =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB03E =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB03E =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB03E =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB03E =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB03E =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB03E =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB03E =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB03E =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB03E =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB03E                            
000EB03E =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB03E =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB03E =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB03E =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB03E =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB03E =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB03E =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB03E =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB03E =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB03E =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB03E =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB03E =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB03E                            
000EB03E =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB03E =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB03E =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB03E =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB03E =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB03E =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB03E =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB03E =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB03E =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB03E =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB03E =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB03E =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB03E                            
000EB03E =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB03E =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB03E =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB03E =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB03E =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB03E =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB03E =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB03E =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB03E =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB03E =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB03E =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB03E =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB03E                            
000EB03E                            ; ---------------------------------------------------------------------------
000EB03E                            ; The actual macros
000EB03E                            ; ---------------------------------------------------------------------------
000EB03E                            
000EB03E                            	; --- Flag E0 - Set panning ---
000EB03E                            
000EB03E                            Pan		macro	PanValue
000EB03E                            		dc.b	$E0,PanValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E1 - Set detune ---
000EB03E                            
000EB03E                            Detune		macro	DetuneValue
000EB03E                            		dc.b	$E1,DetuneValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB03E                            
000EB03E                            UnkFlag		macro	UnkValue
000EB03E                            		dc.b	$E2,UnkValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E3 - Return ---
000EB03E                            
000EB03E                            Return		macro
000EB03E                            		dc.b	$E3
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB03E                            
000EB03E                            FadeIn		macro
000EB03E                            		dc.b	$E4
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB03E                            
000EB03E                            TempMul		macro	TempoMultValue
000EB03E                            		dc.b	$E5,TempoMultValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E6 - Add volume (FM only) ---
000EB03E                            
000EB03E                            VolumFM		macro	VolumeValue
000EB03E                            		dc.b	$E6,VolumeValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB03E                            
000EB03E                            SoftKey		macro
000EB03E                            		dc.b	$E7
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E8 - Set release key rate counter ---
000EB03E                            
000EB03E                            KeyRate		macro	ReleaseValue
000EB03E                            		dc.b	$E8,ReleaseValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag E9 - Add pitch ---
000EB03E                            
000EB03E                            Pitch		macro	PitchValue
000EB03E                            		dc.b	$E9,PitchValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag EA - Set tempo (for all channels) ---
000EB03E                            
000EB03E                            TempSet		macro	TempoSetValue
000EB03E                            		dc.b	$EA,TempoSetValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB03E                            
000EB03E                            TempAll		macro	TempoAllValue
000EB03E                            		dc.b	$EB,TempoAllValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB03E                            
000EB03E                            VoluPSG		macro	VolumeValue
000EB03E                            		dc.b	$EC,VolumeValue
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB03E                            
000EB03E                            ClrBlck		macro
000EB03E                            		dc.b	$ED
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB03E                            
000EB03E                            StopFM4		macro
000EB03E                            		dc.b	$EE
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag EF - FM Voice Select ---
000EB03E                            
000EB03E                            VoiceFM		macro	VoiceID
000EB03E                            		dc.b	$EF,VoiceID
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB03E                            
000EB03E                            Modulat		macro	Delay, Speed, Rate, Steps
000EB03E                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB03E                            
000EB03E                            ModulOn		macro
000EB03E                            		dc.b	$F1
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F2 - Halt channel ---
000EB03E                            
000EB03E                            Halt		macro
000EB03E                            		dc.b	$F2
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F3 - PSG 4 Control ---
000EB03E                            
000EB03E                            SetPSG4		macro	PSG4Value
000EB03E                            		dc.b	$F3,PSG4Value
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB03E                            
000EB03E                            ModuOff		macro
000EB03E                            		dc.b	$F4
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB03E                            
000EB03E                            VoicPSG		macro	VoiceID
000EB03E                            		dc.b	$F5,VoiceID
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F6 - Jump ---
000EB03E                            
000EB03E                            Jump		macro	Location
000EB03E                            		dc.b	$F6
000EB03E                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB03E                            		dc.b	(Location-*)&$FF
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F7 - Loop ---
000EB03E                            
000EB03E                            Loop		macro	Slot, Count, Location
000EB03E                            		dc.b	$F7,Slot,Count
000EB03E                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB03E                            		dc.b	(Location-*)&$FF
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F8 - Call ---
000EB03E                            
000EB03E                            Call		macro	Location
000EB03E                            		dc.b	$F8
000EB03E                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB03E                            		dc.b	(Location-*)&$FF
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB03E                            
000EB03E                            ForceRR		macro
000EB03E                            		dc.b	$F9
000EB03E                            		endm
000EB03E                            
000EB03E                            	; --- Flag FA - Reverse PCM ---
000EB03E                            
000EB03E                            Reverse		macro
000EB03E                            		dc.b	$FA
000EB03E                            		endm
000EB03E                            
000EB03E                            ; ===========================================================================
000EB03E                            ; ===========================================================================
000EB03E                            ; ---------------------------------------------------------------------------
000EB03E                            Mus8E_Speed_Header:
000EB03E                            
000EB03E                            ;	smpsHeaderVoice     Mus8E_Speed_Voices
000EB03E                            ;	smpsHeaderChan      $06, $03
000EB03E                            ;	smpsHeaderTempo     $01, $03
000EB03E 0000                       		dc.w	Mus8E_Speed_Voices-Mus8E_Speed_Header				; Voice list address
000EB040 00                         		dc.b	(Speed_DACFM_End-Speed_DACFM)/4		; Number of DAC & FM channels
000EB041 00                         		dc.b	(Speed_PSG_End-Speed_PSG)/6			; Number of PSG channels
000EB042 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB044                            
000EB044                            
000EB044                            Speed_DACFM:
000EB044 0000                       		dc.w	Mus8E_Speed_NO_DAC-Mus8E_Speed_Header				; PCM 1 tracker address
000EB046 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB048 0000                       		dc.w	Mus8E_Speed_DAC-Mus8E_Speed_Header				; PCM 2 tracker address
000EB04A 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB04C 0000                       		dc.w	Mus8E_Speed_FM1-Mus8E_Speed_Header				; FM 1 tracker address
000EB04E F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB050 0000                       		dc.w	Mus8E_Speed_FM2-Mus8E_Speed_Header				; FM 2 tracker address
000EB052 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB054 0000                       		dc.w	Mus8E_Speed_FM3-Mus8E_Speed_Header				; FM 3 tracker address
000EB056 F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB058 0000                       		dc.w	Mus8E_Speed_FM4-Mus8E_Speed_Header				; FM 4 tracker address
000EB05A F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB05C 0000                       		dc.w	Mus8E_Speed_FM5-Mus8E_Speed_Header				; FM 5 tracker address
000EB05E F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB060                            Speed_DACFM_End:
000EB060                            
000EB060                            	; --- PSG channels ---
000EB060                            
000EB060                            Speed_PSG:
000EB060 F2                                Halt
000EB061                            Speed_PSG_End:
000EB061                            Mus8E_Speed_NO_DAC: 
000EB061 F523                               dc.b    $F5,$23            ; kick instrument
000EB063 B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB06A                            
000EB06A                            Speed_Scratch1:	
000EB06A                            
000EB06A                            ; FM1 Data
000EB06A                            Mus8E_Speed_FM1:
000EB06A F2                                     Halt
000EB06B                            
000EB06B                            ; FM2 Data
000EB06B                            Mus8E_Speed_FM2:
000EB06B F2                                     Halt
000EB06C                            
000EB06C                            ; FM3 Data
000EB06C                            Mus8E_Speed_FM3:
000EB06C F2                                     Halt
000EB06D                            
000EB06D                            ; FM4 Data
000EB06D                            Mus8E_Speed_FM4:
000EB06D F2                                     Halt
000EB06E                            
000EB06E                            ; FM5 Data
000EB06E                            Mus8E_Speed_FM5:
000EB06E F2                                     Halt
000EB06F                            
000EB06F                            ; PSG1 Data
000EB06F                            Mus8E_Speed_PSG1:
000EB06F F2                                     Halt
000EB070                            
000EB070                            ; PSG2 Data
000EB070                            Mus8E_Speed_PSG2:
000EB070 F2                                     Halt
000EB071                            
000EB071                            ; PSG3 Data
000EB071                            Mus8E_Speed_PSG3:
000EB071 F2                                     Halt
000EB072                            
000EB072                            ; DAC Data
000EB072                            Mus8E_Speed_DAC:
000EB072 F2                         			Halt
000EB073                                        
000EB073                            
000EB073                            Mus8E_Speed_Voices:
000EB073 F2                                     Halt
000EB073 F2                                     Halt
000EB074                            		even
000EB074                            Music85:	include	"sound\PPZ_GF.asm" ; SCD PPZ Good Future Theme
000EB074                            ; ---------------------------------------------------------------------------
000EB074                            		include	"sound\Macros.asm"
000EB074                            ; ===========================================================================
000EB074                            ; ---------------------------------------------------------------------------
000EB074                            ; Sound Driver Macros
000EB074                            ; ---------------------------------------------------------------------------
000EB074                            
000EB074                            	; --- Equates for the macros ---
000EB074                            
000EB074 =00000000                  NoSpeakers	=	%00000000
000EB074 =00000040                  RightSpeaker	=	%01000000
000EB074 =00000080                  LeftSpeaker	=	%10000000
000EB074 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB074                            
000EB074                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB074                            
000EB074 =00000080                  REST		=	$80
000EB074 =00000081                  N_S1Kick	=	$81
000EB074 =00000082                  N_S1Snare	=	$82
000EB074 =00000083                  N_S1Timpani	=	$83
000EB074 =00000088                  N_S1TimpHigh	=	$88
000EB074 =00000089                  N_S1TimpMid	=	$89
000EB074 =0000008A                  N_S1TimpLow	=	$8A
000EB074 =0000008B                  N_S1TimpLowest	=	$8B
000EB074                            
000EB074 =00000001                  C		=	$01
000EB074 =00000002                  Cs		=	$02
000EB074 =00000003                  D		=	$03
000EB074 =00000004                  Eb		=	$04
000EB074 =00000005                  E		=	$05
000EB074 =00000006                  F		=	$06
000EB074 =00000007                  Fs		=	$07
000EB074 =00000008                  G		=	$08
000EB074 =00000009                  Gs		=	$09
000EB074 =0000000A                  A		=	$0A
000EB074 =0000000B                  Bb		=	$0B
000EB074 =0000000C                  B		=	$0C
000EB074                            
000EB074 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB074 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB074 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB074 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB074 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB074 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB074 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB074 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB074 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB074 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB074 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB074 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB074                            
000EB074 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB074 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB074 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB074 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB074 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB074 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB074 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB074 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB074 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB074 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB074 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB074 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB074                            
000EB074 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB074 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB074 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB074 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB074 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB074 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB074 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB074 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB074 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB074 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB074 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB074 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB074                            
000EB074 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB074 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB074 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB074 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB074 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB074 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB074 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB074 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB074 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB074 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB074 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB074 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB074                            
000EB074 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB074 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB074 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB074 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB074 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB074 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB074 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB074 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB074 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB074 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB074 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB074 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB074                            
000EB074 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB074 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB074 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB074 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB074 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB074 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB074 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB074 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB074 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB074 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB074 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB074 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB074                            
000EB074 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB074 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB074 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB074 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB074 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB074 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB074 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB074 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB074 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB074 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB074 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB074 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB074                            
000EB074 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB074 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB074 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB074 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB074 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB074 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB074 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB074 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB074 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB074 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB074 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB074 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB074                            
000EB074                            ; ---------------------------------------------------------------------------
000EB074                            ; The actual macros
000EB074                            ; ---------------------------------------------------------------------------
000EB074                            
000EB074                            	; --- Flag E0 - Set panning ---
000EB074                            
000EB074                            Pan		macro	PanValue
000EB074                            		dc.b	$E0,PanValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E1 - Set detune ---
000EB074                            
000EB074                            Detune		macro	DetuneValue
000EB074                            		dc.b	$E1,DetuneValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB074                            
000EB074                            UnkFlag		macro	UnkValue
000EB074                            		dc.b	$E2,UnkValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E3 - Return ---
000EB074                            
000EB074                            Return		macro
000EB074                            		dc.b	$E3
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB074                            
000EB074                            FadeIn		macro
000EB074                            		dc.b	$E4
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB074                            
000EB074                            TempMul		macro	TempoMultValue
000EB074                            		dc.b	$E5,TempoMultValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E6 - Add volume (FM only) ---
000EB074                            
000EB074                            VolumFM		macro	VolumeValue
000EB074                            		dc.b	$E6,VolumeValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB074                            
000EB074                            SoftKey		macro
000EB074                            		dc.b	$E7
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E8 - Set release key rate counter ---
000EB074                            
000EB074                            KeyRate		macro	ReleaseValue
000EB074                            		dc.b	$E8,ReleaseValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag E9 - Add pitch ---
000EB074                            
000EB074                            Pitch		macro	PitchValue
000EB074                            		dc.b	$E9,PitchValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag EA - Set tempo (for all channels) ---
000EB074                            
000EB074                            TempSet		macro	TempoSetValue
000EB074                            		dc.b	$EA,TempoSetValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB074                            
000EB074                            TempAll		macro	TempoAllValue
000EB074                            		dc.b	$EB,TempoAllValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB074                            
000EB074                            VoluPSG		macro	VolumeValue
000EB074                            		dc.b	$EC,VolumeValue
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB074                            
000EB074                            ClrBlck		macro
000EB074                            		dc.b	$ED
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB074                            
000EB074                            StopFM4		macro
000EB074                            		dc.b	$EE
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag EF - FM Voice Select ---
000EB074                            
000EB074                            VoiceFM		macro	VoiceID
000EB074                            		dc.b	$EF,VoiceID
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB074                            
000EB074                            Modulat		macro	Delay, Speed, Rate, Steps
000EB074                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB074                            
000EB074                            ModulOn		macro
000EB074                            		dc.b	$F1
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F2 - Halt channel ---
000EB074                            
000EB074                            Halt		macro
000EB074                            		dc.b	$F2
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F3 - PSG 4 Control ---
000EB074                            
000EB074                            SetPSG4		macro	PSG4Value
000EB074                            		dc.b	$F3,PSG4Value
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB074                            
000EB074                            ModuOff		macro
000EB074                            		dc.b	$F4
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB074                            
000EB074                            VoicPSG		macro	VoiceID
000EB074                            		dc.b	$F5,VoiceID
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F6 - Jump ---
000EB074                            
000EB074                            Jump		macro	Location
000EB074                            		dc.b	$F6
000EB074                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB074                            		dc.b	(Location-*)&$FF
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F7 - Loop ---
000EB074                            
000EB074                            Loop		macro	Slot, Count, Location
000EB074                            		dc.b	$F7,Slot,Count
000EB074                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB074                            		dc.b	(Location-*)&$FF
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F8 - Call ---
000EB074                            
000EB074                            Call		macro	Location
000EB074                            		dc.b	$F8
000EB074                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB074                            		dc.b	(Location-*)&$FF
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB074                            
000EB074                            ForceRR		macro
000EB074                            		dc.b	$F9
000EB074                            		endm
000EB074                            
000EB074                            	; --- Flag FA - Reverse PCM ---
000EB074                            
000EB074                            Reverse		macro
000EB074                            		dc.b	$FA
000EB074                            		endm
000EB074                            
000EB074                            ; ===========================================================================
000EB074                            ; ===========================================================================
000EB074                            ; ---------------------------------------------------------------------------
000EB074                            Mus85_PPZ_GF_Header:
000EB074                            
000EB074                            ;	smpsHeaderVoice     Mus85_PPZ_GF_Voices
000EB074                            ;	smpsHeaderChan      $06, $03
000EB074                            ;	smpsHeaderTempo     $01, $03
000EB074 0000                       		dc.w	Mus85_PPZ_GF_Voices-Mus85_PPZ_GF_Header				; Voice list address
000EB076 00                         		dc.b	(PPZ_GF_DACFM_End-PPZ_GF_DACFM)/4		; Number of DAC & FM channels
000EB077 00                         		dc.b	(PPZ_GF_PSG_End-PPZ_GF_PSG)/6			; Number of PSG channels
000EB078 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB07A                            
000EB07A                            
000EB07A                            PPZ_GF_DACFM:
000EB07A 0000                       		dc.w	Mus85_PPZ_GF_NO_DAC-Mus85_PPZ_GF_Header				; PCM 1 tracker address
000EB07C 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB07E 0000                       		dc.w	Mus85_PPZ_GF_DAC-Mus85_PPZ_GF_Header				; PCM 2 tracker address
000EB080 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB082 0000                       		dc.w	Mus85_PPZ_GF_FM1-Mus85_PPZ_GF_Header				; FM 1 tracker address
000EB084 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB086 0000                       		dc.w	Mus85_PPZ_GF_FM2-Mus85_PPZ_GF_Header				; FM 2 tracker address
000EB088 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB08A 0000                       		dc.w	Mus85_PPZ_GF_FM3-Mus85_PPZ_GF_Header				; FM 3 tracker address
000EB08C F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB08E 0000                       		dc.w	Mus85_PPZ_GF_FM4-Mus85_PPZ_GF_Header				; FM 4 tracker address
000EB090 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB092 0000                       		dc.w	Mus85_PPZ_GF_FM5-Mus85_PPZ_GF_Header				; FM 5 tracker address
000EB094 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB096                            PPZ_GF_DACFM_End:
000EB096                            
000EB096                            	; --- PSG channels ---
000EB096                            
000EB096                            PPZ_GF_PSG:
000EB096 F2                                Halt
000EB097                            PPZ_GF_PSG_End:
000EB097                            
000EB097                            Mus85_PPZ_GF_NO_DAC: 
000EB097 F528                               dc.b    $F5,$28            ;  play
000EB099 B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB09E                            
000EB09E                            PPZ_GF_Scratch1:	
000EB09E                            
000EB09E                            ; FM1 Data
000EB09E                            Mus85_PPZ_GF_FM1:
000EB09E F2                                     Halt
000EB09F                            
000EB09F                            ; FM2 Data
000EB09F                            Mus85_PPZ_GF_FM2:
000EB09F F2                                     Halt
000EB0A0                            
000EB0A0                            ; FM3 Data
000EB0A0                            Mus85_PPZ_GF_FM3:
000EB0A0 F2                                     Halt
000EB0A1                            
000EB0A1                            ; FM4 Data
000EB0A1                            Mus85_PPZ_GF_FM4:
000EB0A1 F2                                     Halt
000EB0A2                            
000EB0A2                            ; FM5 Data
000EB0A2                            Mus85_PPZ_GF_FM5:
000EB0A2 F2                                     Halt
000EB0A3                            
000EB0A3                            ; PSG1 Data
000EB0A3                            Mus85_PPZ_GF_PSG1:
000EB0A3 F2                                     Halt
000EB0A4                            
000EB0A4                            ; PSG2 Data
000EB0A4                            Mus85_PPZ_GF_PSG2:
000EB0A4 F2                                     Halt
000EB0A5                            
000EB0A5                            ; PSG3 Data
000EB0A5                            Mus85_PPZ_GF_PSG3:
000EB0A5 F2                                     Halt
000EB0A6                            
000EB0A6                            ; DAC Data
000EB0A6                            Mus85_PPZ_GF_DAC:
000EB0A6                                        
000EB0A6                            
000EB0A6                            Mus85_PPZ_GF_Voices:
000EB0A6 F2                                     Halt
000EB0A6 F2                                     Halt
000EB0A8 00                         		even
000EB0A8                            Music86:	include	"sound\PPZ_BF.asm" ; SCD PPZ Bad Future Theme
000EB0A8                            ; ---------------------------------------------------------------------------
000EB0A8                            		include	"sound\Macros.asm"
000EB0A8                            ; ===========================================================================
000EB0A8                            ; ---------------------------------------------------------------------------
000EB0A8                            ; Sound Driver Macros
000EB0A8                            ; ---------------------------------------------------------------------------
000EB0A8                            
000EB0A8                            	; --- Equates for the macros ---
000EB0A8                            
000EB0A8 =00000000                  NoSpeakers	=	%00000000
000EB0A8 =00000040                  RightSpeaker	=	%01000000
000EB0A8 =00000080                  LeftSpeaker	=	%10000000
000EB0A8 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB0A8                            
000EB0A8                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB0A8                            
000EB0A8 =00000080                  REST		=	$80
000EB0A8 =00000081                  N_S1Kick	=	$81
000EB0A8 =00000082                  N_S1Snare	=	$82
000EB0A8 =00000083                  N_S1Timpani	=	$83
000EB0A8 =00000088                  N_S1TimpHigh	=	$88
000EB0A8 =00000089                  N_S1TimpMid	=	$89
000EB0A8 =0000008A                  N_S1TimpLow	=	$8A
000EB0A8 =0000008B                  N_S1TimpLowest	=	$8B
000EB0A8                            
000EB0A8 =00000001                  C		=	$01
000EB0A8 =00000002                  Cs		=	$02
000EB0A8 =00000003                  D		=	$03
000EB0A8 =00000004                  Eb		=	$04
000EB0A8 =00000005                  E		=	$05
000EB0A8 =00000006                  F		=	$06
000EB0A8 =00000007                  Fs		=	$07
000EB0A8 =00000008                  G		=	$08
000EB0A8 =00000009                  Gs		=	$09
000EB0A8 =0000000A                  A		=	$0A
000EB0A8 =0000000B                  Bb		=	$0B
000EB0A8 =0000000C                  B		=	$0C
000EB0A8                            
000EB0A8 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB0A8 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB0A8 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB0A8 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB0A8 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB0A8 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB0A8 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB0A8 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB0A8 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB0A8 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB0A8 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB0A8 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB0A8                            
000EB0A8 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB0A8 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB0A8 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB0A8 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB0A8 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB0A8 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB0A8 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB0A8 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB0A8 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB0A8 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB0A8 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB0A8 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB0A8                            
000EB0A8 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB0A8 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB0A8 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB0A8 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB0A8 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB0A8 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB0A8 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB0A8 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB0A8 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB0A8 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB0A8 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB0A8 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB0A8                            
000EB0A8 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB0A8 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB0A8 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB0A8 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB0A8 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB0A8 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB0A8 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB0A8 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB0A8 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB0A8 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB0A8 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB0A8 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB0A8                            
000EB0A8 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB0A8 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB0A8 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB0A8 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB0A8 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB0A8 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB0A8 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB0A8 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB0A8 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB0A8 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB0A8 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB0A8 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB0A8                            
000EB0A8 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB0A8 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB0A8 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB0A8 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB0A8 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB0A8 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB0A8 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB0A8 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB0A8 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB0A8 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB0A8 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB0A8 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB0A8                            
000EB0A8 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB0A8 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB0A8 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB0A8 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB0A8 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB0A8 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB0A8 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB0A8 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB0A8 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB0A8 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB0A8 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB0A8 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB0A8                            
000EB0A8 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB0A8 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB0A8 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB0A8 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB0A8 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB0A8 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB0A8 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB0A8 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB0A8 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB0A8 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB0A8 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB0A8 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB0A8                            
000EB0A8                            ; ---------------------------------------------------------------------------
000EB0A8                            ; The actual macros
000EB0A8                            ; ---------------------------------------------------------------------------
000EB0A8                            
000EB0A8                            	; --- Flag E0 - Set panning ---
000EB0A8                            
000EB0A8                            Pan		macro	PanValue
000EB0A8                            		dc.b	$E0,PanValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E1 - Set detune ---
000EB0A8                            
000EB0A8                            Detune		macro	DetuneValue
000EB0A8                            		dc.b	$E1,DetuneValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB0A8                            
000EB0A8                            UnkFlag		macro	UnkValue
000EB0A8                            		dc.b	$E2,UnkValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E3 - Return ---
000EB0A8                            
000EB0A8                            Return		macro
000EB0A8                            		dc.b	$E3
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB0A8                            
000EB0A8                            FadeIn		macro
000EB0A8                            		dc.b	$E4
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB0A8                            
000EB0A8                            TempMul		macro	TempoMultValue
000EB0A8                            		dc.b	$E5,TempoMultValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E6 - Add volume (FM only) ---
000EB0A8                            
000EB0A8                            VolumFM		macro	VolumeValue
000EB0A8                            		dc.b	$E6,VolumeValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB0A8                            
000EB0A8                            SoftKey		macro
000EB0A8                            		dc.b	$E7
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E8 - Set release key rate counter ---
000EB0A8                            
000EB0A8                            KeyRate		macro	ReleaseValue
000EB0A8                            		dc.b	$E8,ReleaseValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag E9 - Add pitch ---
000EB0A8                            
000EB0A8                            Pitch		macro	PitchValue
000EB0A8                            		dc.b	$E9,PitchValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag EA - Set tempo (for all channels) ---
000EB0A8                            
000EB0A8                            TempSet		macro	TempoSetValue
000EB0A8                            		dc.b	$EA,TempoSetValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB0A8                            
000EB0A8                            TempAll		macro	TempoAllValue
000EB0A8                            		dc.b	$EB,TempoAllValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB0A8                            
000EB0A8                            VoluPSG		macro	VolumeValue
000EB0A8                            		dc.b	$EC,VolumeValue
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB0A8                            
000EB0A8                            ClrBlck		macro
000EB0A8                            		dc.b	$ED
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB0A8                            
000EB0A8                            StopFM4		macro
000EB0A8                            		dc.b	$EE
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag EF - FM Voice Select ---
000EB0A8                            
000EB0A8                            VoiceFM		macro	VoiceID
000EB0A8                            		dc.b	$EF,VoiceID
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB0A8                            
000EB0A8                            Modulat		macro	Delay, Speed, Rate, Steps
000EB0A8                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB0A8                            
000EB0A8                            ModulOn		macro
000EB0A8                            		dc.b	$F1
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F2 - Halt channel ---
000EB0A8                            
000EB0A8                            Halt		macro
000EB0A8                            		dc.b	$F2
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F3 - PSG 4 Control ---
000EB0A8                            
000EB0A8                            SetPSG4		macro	PSG4Value
000EB0A8                            		dc.b	$F3,PSG4Value
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB0A8                            
000EB0A8                            ModuOff		macro
000EB0A8                            		dc.b	$F4
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB0A8                            
000EB0A8                            VoicPSG		macro	VoiceID
000EB0A8                            		dc.b	$F5,VoiceID
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F6 - Jump ---
000EB0A8                            
000EB0A8                            Jump		macro	Location
000EB0A8                            		dc.b	$F6
000EB0A8                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB0A8                            		dc.b	(Location-*)&$FF
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F7 - Loop ---
000EB0A8                            
000EB0A8                            Loop		macro	Slot, Count, Location
000EB0A8                            		dc.b	$F7,Slot,Count
000EB0A8                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB0A8                            		dc.b	(Location-*)&$FF
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F8 - Call ---
000EB0A8                            
000EB0A8                            Call		macro	Location
000EB0A8                            		dc.b	$F8
000EB0A8                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB0A8                            		dc.b	(Location-*)&$FF
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB0A8                            
000EB0A8                            ForceRR		macro
000EB0A8                            		dc.b	$F9
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            	; --- Flag FA - Reverse PCM ---
000EB0A8                            
000EB0A8                            Reverse		macro
000EB0A8                            		dc.b	$FA
000EB0A8                            		endm
000EB0A8                            
000EB0A8                            ; ===========================================================================
000EB0A8                            ; ===========================================================================
000EB0A8                            ; ---------------------------------------------------------------------------
000EB0A8                            Mus86_PPZ_BF_Header:
000EB0A8                            
000EB0A8                            ;	smpsHeaderVoice     Mus86_PPZ_BF_Voices
000EB0A8                            ;	smpsHeaderChan      $06, $03
000EB0A8                            ;	smpsHeaderTempo     $01, $03
000EB0A8 0000                       		dc.w	Mus86_PPZ_BF_Voices-Mus86_PPZ_BF_Header				; Voice list address
000EB0AA 00                         		dc.b	(PPZ_BF_DACFM_End-PPZ_BF_DACFM)/4		; Number of DAC & FM channels
000EB0AB 00                         		dc.b	(PPZ_BF_PSG_End-PPZ_BF_PSG)/6			; Number of PSG channels
000EB0AC 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB0AE                            
000EB0AE                            
000EB0AE                            PPZ_BF_DACFM:
000EB0AE 0000                       		dc.w	Mus86_PPZ_BF_NO_DAC-Mus86_PPZ_BF_Header				; PCM 1 tracker address
000EB0B0 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB0B2 0000                       		dc.w	Mus86_PPZ_BF_DAC-Mus86_PPZ_BF_Header				; PCM 2 tracker address
000EB0B4 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB0B6 0000                       		dc.w	Mus86_PPZ_BF_FM1-Mus86_PPZ_BF_Header				; FM 1 tracker address
000EB0B8 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB0BA 0000                       		dc.w	Mus86_PPZ_BF_FM2-Mus86_PPZ_BF_Header				; FM 2 tracker address
000EB0BC 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB0BE 0000                       		dc.w	Mus86_PPZ_BF_FM3-Mus86_PPZ_BF_Header				; FM 3 tracker address
000EB0C0 F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB0C2 0000                       		dc.w	Mus86_PPZ_BF_FM4-Mus86_PPZ_BF_Header				; FM 4 tracker address
000EB0C4 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB0C6 0000                       		dc.w	Mus86_PPZ_BF_FM5-Mus86_PPZ_BF_Header				; FM 5 tracker address
000EB0C8 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB0CA                            PPZ_BF_DACFM_End:
000EB0CA                            
000EB0CA                            	; --- PSG channels ---
000EB0CA                            
000EB0CA                            PPZ_BF_PSG:
000EB0CA F2                                Halt
000EB0CB                            PPZ_BF_PSG_End:
000EB0CB                            
000EB0CB                            Mus86_PPZ_BF_NO_DAC: 
000EB0CB F529                               dc.b    $F5,$29            ;  play
000EB0CD B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB0D2                            
000EB0D2                            PPZ_BF_Scratch1:	
000EB0D2                            
000EB0D2                            ; FM1 Data
000EB0D2                            Mus86_PPZ_BF_FM1:
000EB0D2 F2                                     Halt
000EB0D3                            
000EB0D3                            ; FM2 Data
000EB0D3                            Mus86_PPZ_BF_FM2:
000EB0D3 F2                                     Halt
000EB0D4                            
000EB0D4                            ; FM3 Data
000EB0D4                            Mus86_PPZ_BF_FM3:
000EB0D4 F2                                     Halt
000EB0D5                            
000EB0D5                            ; FM4 Data
000EB0D5                            Mus86_PPZ_BF_FM4:
000EB0D5 F2                                     Halt
000EB0D6                            
000EB0D6                            ; FM5 Data
000EB0D6                            Mus86_PPZ_BF_FM5:
000EB0D6 F2                                     Halt
000EB0D7                            
000EB0D7                            ; PSG1 Data
000EB0D7                            Mus86_PPZ_BF_PSG1:
000EB0D7 F2                                     Halt
000EB0D8                            
000EB0D8                            ; PSG2 Data
000EB0D8                            Mus86_PPZ_BF_PSG2:
000EB0D8 F2                                     Halt
000EB0D9                            
000EB0D9                            ; PSG3 Data
000EB0D9                            Mus86_PPZ_BF_PSG3:
000EB0D9 F2                                     Halt
000EB0DA                            
000EB0DA                            ; DAC Data
000EB0DA                            Mus86_PPZ_BF_DAC:
000EB0DA                                        
000EB0DA                            
000EB0DA                            Mus86_PPZ_BF_Voices:
000EB0DA F2                                     Halt
000EB0DA F2                                     Halt
000EB0DC 00                         		even
000EB0DC                            Music87:	include	"sound\Inv.asm" ; Invincibility Theme
000EB0DC                            ; ---------------------------------------------------------------------------
000EB0DC                            		include	"sound\Macros.asm"
000EB0DC                            ; ===========================================================================
000EB0DC                            ; ---------------------------------------------------------------------------
000EB0DC                            ; Sound Driver Macros
000EB0DC                            ; ---------------------------------------------------------------------------
000EB0DC                            
000EB0DC                            	; --- Equates for the macros ---
000EB0DC                            
000EB0DC =00000000                  NoSpeakers	=	%00000000
000EB0DC =00000040                  RightSpeaker	=	%01000000
000EB0DC =00000080                  LeftSpeaker	=	%10000000
000EB0DC =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB0DC                            
000EB0DC                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB0DC                            
000EB0DC =00000080                  REST		=	$80
000EB0DC =00000081                  N_S1Kick	=	$81
000EB0DC =00000082                  N_S1Snare	=	$82
000EB0DC =00000083                  N_S1Timpani	=	$83
000EB0DC =00000088                  N_S1TimpHigh	=	$88
000EB0DC =00000089                  N_S1TimpMid	=	$89
000EB0DC =0000008A                  N_S1TimpLow	=	$8A
000EB0DC =0000008B                  N_S1TimpLowest	=	$8B
000EB0DC                            
000EB0DC =00000001                  C		=	$01
000EB0DC =00000002                  Cs		=	$02
000EB0DC =00000003                  D		=	$03
000EB0DC =00000004                  Eb		=	$04
000EB0DC =00000005                  E		=	$05
000EB0DC =00000006                  F		=	$06
000EB0DC =00000007                  Fs		=	$07
000EB0DC =00000008                  G		=	$08
000EB0DC =00000009                  Gs		=	$09
000EB0DC =0000000A                  A		=	$0A
000EB0DC =0000000B                  Bb		=	$0B
000EB0DC =0000000C                  B		=	$0C
000EB0DC                            
000EB0DC =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB0DC =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB0DC =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB0DC =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB0DC =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB0DC =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB0DC =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB0DC =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB0DC =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB0DC =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB0DC =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB0DC =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB0DC                            
000EB0DC =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB0DC =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB0DC =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB0DC =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB0DC =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB0DC =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB0DC =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB0DC =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB0DC =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB0DC =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB0DC =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB0DC =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB0DC                            
000EB0DC =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB0DC =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB0DC =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB0DC =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB0DC =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB0DC =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB0DC =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB0DC =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB0DC =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB0DC =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB0DC =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB0DC =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB0DC                            
000EB0DC =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB0DC =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB0DC =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB0DC =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB0DC =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB0DC =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB0DC =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB0DC =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB0DC =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB0DC =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB0DC =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB0DC =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB0DC                            
000EB0DC =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB0DC =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB0DC =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB0DC =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB0DC =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB0DC =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB0DC =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB0DC =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB0DC =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB0DC =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB0DC =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB0DC =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB0DC                            
000EB0DC =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB0DC =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB0DC =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB0DC =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB0DC =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB0DC =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB0DC =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB0DC =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB0DC =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB0DC =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB0DC =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB0DC =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB0DC                            
000EB0DC =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB0DC =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB0DC =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB0DC =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB0DC =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB0DC =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB0DC =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB0DC =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB0DC =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB0DC =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB0DC =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB0DC =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB0DC                            
000EB0DC =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB0DC =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB0DC =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB0DC =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB0DC =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB0DC =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB0DC =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB0DC =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB0DC =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB0DC =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB0DC =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB0DC =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB0DC                            
000EB0DC                            ; ---------------------------------------------------------------------------
000EB0DC                            ; The actual macros
000EB0DC                            ; ---------------------------------------------------------------------------
000EB0DC                            
000EB0DC                            	; --- Flag E0 - Set panning ---
000EB0DC                            
000EB0DC                            Pan		macro	PanValue
000EB0DC                            		dc.b	$E0,PanValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E1 - Set detune ---
000EB0DC                            
000EB0DC                            Detune		macro	DetuneValue
000EB0DC                            		dc.b	$E1,DetuneValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB0DC                            
000EB0DC                            UnkFlag		macro	UnkValue
000EB0DC                            		dc.b	$E2,UnkValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E3 - Return ---
000EB0DC                            
000EB0DC                            Return		macro
000EB0DC                            		dc.b	$E3
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB0DC                            
000EB0DC                            FadeIn		macro
000EB0DC                            		dc.b	$E4
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB0DC                            
000EB0DC                            TempMul		macro	TempoMultValue
000EB0DC                            		dc.b	$E5,TempoMultValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E6 - Add volume (FM only) ---
000EB0DC                            
000EB0DC                            VolumFM		macro	VolumeValue
000EB0DC                            		dc.b	$E6,VolumeValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB0DC                            
000EB0DC                            SoftKey		macro
000EB0DC                            		dc.b	$E7
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E8 - Set release key rate counter ---
000EB0DC                            
000EB0DC                            KeyRate		macro	ReleaseValue
000EB0DC                            		dc.b	$E8,ReleaseValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag E9 - Add pitch ---
000EB0DC                            
000EB0DC                            Pitch		macro	PitchValue
000EB0DC                            		dc.b	$E9,PitchValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag EA - Set tempo (for all channels) ---
000EB0DC                            
000EB0DC                            TempSet		macro	TempoSetValue
000EB0DC                            		dc.b	$EA,TempoSetValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB0DC                            
000EB0DC                            TempAll		macro	TempoAllValue
000EB0DC                            		dc.b	$EB,TempoAllValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB0DC                            
000EB0DC                            VoluPSG		macro	VolumeValue
000EB0DC                            		dc.b	$EC,VolumeValue
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB0DC                            
000EB0DC                            ClrBlck		macro
000EB0DC                            		dc.b	$ED
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB0DC                            
000EB0DC                            StopFM4		macro
000EB0DC                            		dc.b	$EE
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag EF - FM Voice Select ---
000EB0DC                            
000EB0DC                            VoiceFM		macro	VoiceID
000EB0DC                            		dc.b	$EF,VoiceID
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB0DC                            
000EB0DC                            Modulat		macro	Delay, Speed, Rate, Steps
000EB0DC                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB0DC                            
000EB0DC                            ModulOn		macro
000EB0DC                            		dc.b	$F1
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F2 - Halt channel ---
000EB0DC                            
000EB0DC                            Halt		macro
000EB0DC                            		dc.b	$F2
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F3 - PSG 4 Control ---
000EB0DC                            
000EB0DC                            SetPSG4		macro	PSG4Value
000EB0DC                            		dc.b	$F3,PSG4Value
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB0DC                            
000EB0DC                            ModuOff		macro
000EB0DC                            		dc.b	$F4
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB0DC                            
000EB0DC                            VoicPSG		macro	VoiceID
000EB0DC                            		dc.b	$F5,VoiceID
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F6 - Jump ---
000EB0DC                            
000EB0DC                            Jump		macro	Location
000EB0DC                            		dc.b	$F6
000EB0DC                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB0DC                            		dc.b	(Location-*)&$FF
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F7 - Loop ---
000EB0DC                            
000EB0DC                            Loop		macro	Slot, Count, Location
000EB0DC                            		dc.b	$F7,Slot,Count
000EB0DC                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB0DC                            		dc.b	(Location-*)&$FF
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F8 - Call ---
000EB0DC                            
000EB0DC                            Call		macro	Location
000EB0DC                            		dc.b	$F8
000EB0DC                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB0DC                            		dc.b	(Location-*)&$FF
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB0DC                            
000EB0DC                            ForceRR		macro
000EB0DC                            		dc.b	$F9
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            	; --- Flag FA - Reverse PCM ---
000EB0DC                            
000EB0DC                            Reverse		macro
000EB0DC                            		dc.b	$FA
000EB0DC                            		endm
000EB0DC                            
000EB0DC                            ; ===========================================================================
000EB0DC                            ; ===========================================================================
000EB0DC                            ; ---------------------------------------------------------------------------
000EB0DC                            Mus87_Inv_Header:
000EB0DC                            
000EB0DC                            ;	smpsHeaderVoice     Mus87_Inv_Voices
000EB0DC                            ;	smpsHeaderChan      $06, $03
000EB0DC                            ;	smpsHeaderTempo     $01, $03
000EB0DC 0000                       		dc.w	Mus87_Inv_Voices-Mus87_Inv_Header				; Voice list address
000EB0DE 00                         		dc.b	(Inv_DACFM_End-Inv_DACFM)/4		; Number of DAC & FM channels
000EB0DF 00                         		dc.b	(Inv_PSG_End-Inv_PSG)/6			; Number of PSG channels
000EB0E0 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB0E2                            
000EB0E2                            
000EB0E2                            Inv_DACFM:
000EB0E2 0000                       		dc.w	Mus87_Inv_NO_DAC-Mus87_Inv_Header				; PCM 1 tracker address
000EB0E4 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB0E6 0000                       		dc.w	Mus87_Inv_DAC-Mus87_Inv_Header				; PCM 2 tracker address
000EB0E8 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB0EA 0000                       		dc.w	Mus87_Inv_FM1-Mus87_Inv_Header				; FM 1 tracker address
000EB0EC F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB0EE 0000                       		dc.w	Mus87_Inv_FM2-Mus87_Inv_Header				; FM 2 tracker address
000EB0F0 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB0F2 0000                       		dc.w	Mus87_Inv_FM3-Mus87_Inv_Header				; FM 3 tracker address
000EB0F4 F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB0F6 0000                       		dc.w	Mus87_Inv_FM4-Mus87_Inv_Header				; FM 4 tracker address
000EB0F8 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB0FA 0000                       		dc.w	Mus87_Inv_FM5-Mus87_Inv_Header				; FM 5 tracker address
000EB0FC F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB0FE                            Inv_DACFM_End:
000EB0FE                            
000EB0FE                            	; --- PSG channels ---
000EB0FE                            
000EB0FE                            Inv_PSG:
000EB0FE F2                                Halt
000EB0FF                            Inv_PSG_End:
000EB0FF                            Mus87_Inv_NO_DAC: 
000EB0FF F522                               dc.b    $F5,$22            ; kick instrument
000EB101 B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB108                            
000EB108                            Inv_Scratch1:	
000EB108                            
000EB108                            ; FM1 Data
000EB108                            Mus87_Inv_FM1:
000EB108 F2                                     Halt
000EB109                            
000EB109                            ; FM2 Data
000EB109                            Mus87_Inv_FM2:
000EB109 F2                                     Halt
000EB10A                            
000EB10A                            ; FM3 Data
000EB10A                            Mus87_Inv_FM3:
000EB10A F2                                     Halt
000EB10B                            
000EB10B                            ; FM4 Data
000EB10B                            Mus87_Inv_FM4:
000EB10B F2                                     Halt
000EB10C                            
000EB10C                            ; FM5 Data
000EB10C                            Mus87_Inv_FM5:
000EB10C F2                                     Halt
000EB10D                            
000EB10D                            ; PSG1 Data
000EB10D                            Mus87_Inv_PSG1:
000EB10D F2                                     Halt
000EB10E                            
000EB10E                            ; PSG2 Data
000EB10E                            Mus87_Inv_PSG2:
000EB10E F2                                     Halt
000EB10F                            
000EB10F                            ; PSG3 Data
000EB10F                            Mus87_Inv_PSG3:
000EB10F F2                                     Halt
000EB110                            
000EB110                            ; DAC Data
000EB110                            Mus87_Inv_DAC:
000EB110 F2                         			Halt
000EB111                                        
000EB111                            
000EB111                            Mus87_Inv_Voices:
000EB111 F2                                     Halt
000EB111 F2                                     Halt
000EB112                            		even
000EB112                            Music88:	include	"sound\SCD_Life.asm" ; SCD 1-UP Jingle v1
000EB112                            ; ---------------------------------------------------------------------------
000EB112                            		include	"sound\Macros.asm"
000EB112                            ; ===========================================================================
000EB112                            ; ---------------------------------------------------------------------------
000EB112                            ; Sound Driver Macros
000EB112                            ; ---------------------------------------------------------------------------
000EB112                            
000EB112                            	; --- Equates for the macros ---
000EB112                            
000EB112 =00000000                  NoSpeakers	=	%00000000
000EB112 =00000040                  RightSpeaker	=	%01000000
000EB112 =00000080                  LeftSpeaker	=	%10000000
000EB112 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB112                            
000EB112                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB112                            
000EB112 =00000080                  REST		=	$80
000EB112 =00000081                  N_S1Kick	=	$81
000EB112 =00000082                  N_S1Snare	=	$82
000EB112 =00000083                  N_S1Timpani	=	$83
000EB112 =00000088                  N_S1TimpHigh	=	$88
000EB112 =00000089                  N_S1TimpMid	=	$89
000EB112 =0000008A                  N_S1TimpLow	=	$8A
000EB112 =0000008B                  N_S1TimpLowest	=	$8B
000EB112                            
000EB112 =00000001                  C		=	$01
000EB112 =00000002                  Cs		=	$02
000EB112 =00000003                  D		=	$03
000EB112 =00000004                  Eb		=	$04
000EB112 =00000005                  E		=	$05
000EB112 =00000006                  F		=	$06
000EB112 =00000007                  Fs		=	$07
000EB112 =00000008                  G		=	$08
000EB112 =00000009                  Gs		=	$09
000EB112 =0000000A                  A		=	$0A
000EB112 =0000000B                  Bb		=	$0B
000EB112 =0000000C                  B		=	$0C
000EB112                            
000EB112 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB112 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB112 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB112 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB112 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB112 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB112 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB112 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB112 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB112 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB112 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB112 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB112                            
000EB112 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB112 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB112 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB112 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB112 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB112 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB112 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB112 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB112 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB112 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB112 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB112 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB112                            
000EB112 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB112 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB112 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB112 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB112 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB112 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB112 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB112 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB112 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB112 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB112 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB112 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB112                            
000EB112 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB112 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB112 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB112 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB112 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB112 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB112 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB112 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB112 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB112 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB112 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB112 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB112                            
000EB112 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB112 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB112 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB112 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB112 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB112 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB112 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB112 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB112 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB112 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB112 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB112 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB112                            
000EB112 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB112 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB112 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB112 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB112 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB112 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB112 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB112 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB112 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB112 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB112 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB112 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB112                            
000EB112 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB112 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB112 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB112 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB112 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB112 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB112 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB112 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB112 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB112 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB112 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB112 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB112                            
000EB112 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB112 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB112 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB112 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB112 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB112 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB112 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB112 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB112 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB112 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB112 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB112 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB112                            
000EB112                            ; ---------------------------------------------------------------------------
000EB112                            ; The actual macros
000EB112                            ; ---------------------------------------------------------------------------
000EB112                            
000EB112                            	; --- Flag E0 - Set panning ---
000EB112                            
000EB112                            Pan		macro	PanValue
000EB112                            		dc.b	$E0,PanValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E1 - Set detune ---
000EB112                            
000EB112                            Detune		macro	DetuneValue
000EB112                            		dc.b	$E1,DetuneValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB112                            
000EB112                            UnkFlag		macro	UnkValue
000EB112                            		dc.b	$E2,UnkValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E3 - Return ---
000EB112                            
000EB112                            Return		macro
000EB112                            		dc.b	$E3
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB112                            
000EB112                            FadeIn		macro
000EB112                            		dc.b	$E4
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB112                            
000EB112                            TempMul		macro	TempoMultValue
000EB112                            		dc.b	$E5,TempoMultValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E6 - Add volume (FM only) ---
000EB112                            
000EB112                            VolumFM		macro	VolumeValue
000EB112                            		dc.b	$E6,VolumeValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB112                            
000EB112                            SoftKey		macro
000EB112                            		dc.b	$E7
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E8 - Set release key rate counter ---
000EB112                            
000EB112                            KeyRate		macro	ReleaseValue
000EB112                            		dc.b	$E8,ReleaseValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag E9 - Add pitch ---
000EB112                            
000EB112                            Pitch		macro	PitchValue
000EB112                            		dc.b	$E9,PitchValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag EA - Set tempo (for all channels) ---
000EB112                            
000EB112                            TempSet		macro	TempoSetValue
000EB112                            		dc.b	$EA,TempoSetValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB112                            
000EB112                            TempAll		macro	TempoAllValue
000EB112                            		dc.b	$EB,TempoAllValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB112                            
000EB112                            VoluPSG		macro	VolumeValue
000EB112                            		dc.b	$EC,VolumeValue
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB112                            
000EB112                            ClrBlck		macro
000EB112                            		dc.b	$ED
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB112                            
000EB112                            StopFM4		macro
000EB112                            		dc.b	$EE
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag EF - FM Voice Select ---
000EB112                            
000EB112                            VoiceFM		macro	VoiceID
000EB112                            		dc.b	$EF,VoiceID
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB112                            
000EB112                            Modulat		macro	Delay, Speed, Rate, Steps
000EB112                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB112                            
000EB112                            ModulOn		macro
000EB112                            		dc.b	$F1
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F2 - Halt channel ---
000EB112                            
000EB112                            Halt		macro
000EB112                            		dc.b	$F2
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F3 - PSG 4 Control ---
000EB112                            
000EB112                            SetPSG4		macro	PSG4Value
000EB112                            		dc.b	$F3,PSG4Value
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB112                            
000EB112                            ModuOff		macro
000EB112                            		dc.b	$F4
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB112                            
000EB112                            VoicPSG		macro	VoiceID
000EB112                            		dc.b	$F5,VoiceID
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F6 - Jump ---
000EB112                            
000EB112                            Jump		macro	Location
000EB112                            		dc.b	$F6
000EB112                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB112                            		dc.b	(Location-*)&$FF
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F7 - Loop ---
000EB112                            
000EB112                            Loop		macro	Slot, Count, Location
000EB112                            		dc.b	$F7,Slot,Count
000EB112                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB112                            		dc.b	(Location-*)&$FF
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F8 - Call ---
000EB112                            
000EB112                            Call		macro	Location
000EB112                            		dc.b	$F8
000EB112                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB112                            		dc.b	(Location-*)&$FF
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB112                            
000EB112                            ForceRR		macro
000EB112                            		dc.b	$F9
000EB112                            		endm
000EB112                            
000EB112                            	; --- Flag FA - Reverse PCM ---
000EB112                            
000EB112                            Reverse		macro
000EB112                            		dc.b	$FA
000EB112                            		endm
000EB112                            
000EB112                            ; ===========================================================================
000EB112                            ; ===========================================================================
000EB112                            ; ---------------------------------------------------------------------------
000EB112                            Mus88_SCD_Life_Header:
000EB112                            
000EB112                            ;	smpsHeaderVoice     Mus88_SCD_Life_Voices
000EB112                            ;	smpsHeaderChan      $06, $03
000EB112                            ;	smpsHeaderTempo     $01, $03
000EB112 0000                       		dc.w	Mus88_SCD_Life_Voices-Mus88_SCD_Life_Header				; Voice list address
000EB114 00                         		dc.b	(SCD_Life_DACFM_End-SCD_Life_DACFM)/4		; Number of DAC & FM channels
000EB115 00                         		dc.b	(SCD_Life_PSG_End-SCD_Life_PSG)/6			; Number of PSG channels
000EB116 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB118                            
000EB118                            
000EB118                            SCD_Life_DACFM:
000EB118 0000                       		dc.w	Mus88_SCD_Life_NO_DAC-Mus88_SCD_Life_Header				; PCM 1 tracker address
000EB11A 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB11C 0000                       		dc.w	Mus88_SCD_Life_DAC-Mus88_SCD_Life_Header				; PCM 2 tracker address
000EB11E 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB120 0000                       		dc.w	Mus88_SCD_Life_FM1-Mus88_SCD_Life_Header				; FM 1 tracker address
000EB122 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB124 0000                       		dc.w	Mus88_SCD_Life_FM2-Mus88_SCD_Life_Header				; FM 2 tracker address
000EB126 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB128 0000                       		dc.w	Mus88_SCD_Life_FM3-Mus88_SCD_Life_Header				; FM 3 tracker address
000EB12A F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB12C 0000                       		dc.w	Mus88_SCD_Life_FM4-Mus88_SCD_Life_Header				; FM 4 tracker address
000EB12E F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB130 0000                       		dc.w	Mus88_SCD_Life_FM5-Mus88_SCD_Life_Header				; FM 5 tracker address
000EB132 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB134                            SCD_Life_DACFM_End:
000EB134                            
000EB134                            	; --- PSG channels ---
000EB134                            
000EB134                            SCD_Life_PSG:
000EB134 F2                                Halt
000EB135                            SCD_Life_PSG_End:
000EB135                            Mus88_SCD_Life_NO_DAC: 
000EB135 F544                               dc.b    $F5,$44            ; kick instrument
000EB137 B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB13C                            
000EB13C                            ; FM1 Data
000EB13C                            Mus88_SCD_Life_FM1:
000EB13C F2                                     Halt
000EB13D                            
000EB13D                            ; FM2 Data
000EB13D                            Mus88_SCD_Life_FM2:
000EB13D F2                                     Halt
000EB13E                            
000EB13E                            ; FM3 Data
000EB13E                            Mus88_SCD_Life_FM3:
000EB13E F2                                     Halt
000EB13F                            
000EB13F                            ; FM4 Data
000EB13F                            Mus88_SCD_Life_FM4:
000EB13F F2                                     Halt
000EB140                            
000EB140                            ; FM5 Data
000EB140                            Mus88_SCD_Life_FM5:
000EB140 F2                                     Halt
000EB141                            
000EB141                            ; PSG1 Data
000EB141                            Mus88_SCD_Life_PSG1:
000EB141 F2                                     Halt
000EB142                            
000EB142                            ; PSG2 Data
000EB142                            Mus88_SCD_Life_PSG2:
000EB142 F2                                     Halt
000EB143                            
000EB143                            ; PSG3 Data
000EB143                            Mus88_SCD_Life_PSG3:
000EB143 F2                                     Halt
000EB144                            
000EB144                            ; DAC Data
000EB144                            Mus88_SCD_Life_DAC:
000EB144 F2                         			Halt
000EB145                                        
000EB145                            
000EB145                            Mus88_SCD_Life_Voices:
000EB145 F2                                     Halt
000EB145 F2                                     Halt
000EB146                            		even
000EB146                            Music89:	include	"sound\SCD_OuttaHere.asm" ; SCD Outta Here Voice
000EB146                            ; ---------------------------------------------------------------------------
000EB146                            		include	"sound\Macros.asm"
000EB146                            ; ===========================================================================
000EB146                            ; ---------------------------------------------------------------------------
000EB146                            ; Sound Driver Macros
000EB146                            ; ---------------------------------------------------------------------------
000EB146                            
000EB146                            	; --- Equates for the macros ---
000EB146                            
000EB146 =00000000                  NoSpeakers	=	%00000000
000EB146 =00000040                  RightSpeaker	=	%01000000
000EB146 =00000080                  LeftSpeaker	=	%10000000
000EB146 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB146                            
000EB146                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB146                            
000EB146 =00000080                  REST		=	$80
000EB146 =00000081                  N_S1Kick	=	$81
000EB146 =00000082                  N_S1Snare	=	$82
000EB146 =00000083                  N_S1Timpani	=	$83
000EB146 =00000088                  N_S1TimpHigh	=	$88
000EB146 =00000089                  N_S1TimpMid	=	$89
000EB146 =0000008A                  N_S1TimpLow	=	$8A
000EB146 =0000008B                  N_S1TimpLowest	=	$8B
000EB146                            
000EB146 =00000001                  C		=	$01
000EB146 =00000002                  Cs		=	$02
000EB146 =00000003                  D		=	$03
000EB146 =00000004                  Eb		=	$04
000EB146 =00000005                  E		=	$05
000EB146 =00000006                  F		=	$06
000EB146 =00000007                  Fs		=	$07
000EB146 =00000008                  G		=	$08
000EB146 =00000009                  Gs		=	$09
000EB146 =0000000A                  A		=	$0A
000EB146 =0000000B                  Bb		=	$0B
000EB146 =0000000C                  B		=	$0C
000EB146                            
000EB146 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB146 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB146 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB146 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB146 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB146 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB146 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB146 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB146 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB146 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB146 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB146 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB146                            
000EB146 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB146 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB146 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB146 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB146 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB146 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB146 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB146 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB146 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB146 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB146 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB146 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB146                            
000EB146 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB146 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB146 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB146 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB146 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB146 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB146 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB146 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB146 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB146 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB146 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB146 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB146                            
000EB146 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB146 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB146 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB146 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB146 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB146 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB146 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB146 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB146 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB146 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB146 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB146 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB146                            
000EB146 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB146 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB146 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB146 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB146 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB146 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB146 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB146 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB146 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB146 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB146 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB146 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB146                            
000EB146 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB146 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB146 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB146 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB146 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB146 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB146 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB146 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB146 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB146 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB146 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB146 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB146                            
000EB146 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB146 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB146 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB146 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB146 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB146 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB146 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB146 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB146 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB146 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB146 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB146 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB146                            
000EB146 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB146 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB146 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB146 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB146 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB146 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB146 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB146 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB146 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB146 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB146 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB146 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB146                            
000EB146                            ; ---------------------------------------------------------------------------
000EB146                            ; The actual macros
000EB146                            ; ---------------------------------------------------------------------------
000EB146                            
000EB146                            	; --- Flag E0 - Set panning ---
000EB146                            
000EB146                            Pan		macro	PanValue
000EB146                            		dc.b	$E0,PanValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E1 - Set detune ---
000EB146                            
000EB146                            Detune		macro	DetuneValue
000EB146                            		dc.b	$E1,DetuneValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB146                            
000EB146                            UnkFlag		macro	UnkValue
000EB146                            		dc.b	$E2,UnkValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E3 - Return ---
000EB146                            
000EB146                            Return		macro
000EB146                            		dc.b	$E3
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB146                            
000EB146                            FadeIn		macro
000EB146                            		dc.b	$E4
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB146                            
000EB146                            TempMul		macro	TempoMultValue
000EB146                            		dc.b	$E5,TempoMultValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E6 - Add volume (FM only) ---
000EB146                            
000EB146                            VolumFM		macro	VolumeValue
000EB146                            		dc.b	$E6,VolumeValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB146                            
000EB146                            SoftKey		macro
000EB146                            		dc.b	$E7
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E8 - Set release key rate counter ---
000EB146                            
000EB146                            KeyRate		macro	ReleaseValue
000EB146                            		dc.b	$E8,ReleaseValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag E9 - Add pitch ---
000EB146                            
000EB146                            Pitch		macro	PitchValue
000EB146                            		dc.b	$E9,PitchValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag EA - Set tempo (for all channels) ---
000EB146                            
000EB146                            TempSet		macro	TempoSetValue
000EB146                            		dc.b	$EA,TempoSetValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB146                            
000EB146                            TempAll		macro	TempoAllValue
000EB146                            		dc.b	$EB,TempoAllValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB146                            
000EB146                            VoluPSG		macro	VolumeValue
000EB146                            		dc.b	$EC,VolumeValue
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB146                            
000EB146                            ClrBlck		macro
000EB146                            		dc.b	$ED
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB146                            
000EB146                            StopFM4		macro
000EB146                            		dc.b	$EE
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag EF - FM Voice Select ---
000EB146                            
000EB146                            VoiceFM		macro	VoiceID
000EB146                            		dc.b	$EF,VoiceID
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB146                            
000EB146                            Modulat		macro	Delay, Speed, Rate, Steps
000EB146                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB146                            
000EB146                            ModulOn		macro
000EB146                            		dc.b	$F1
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F2 - Halt channel ---
000EB146                            
000EB146                            Halt		macro
000EB146                            		dc.b	$F2
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F3 - PSG 4 Control ---
000EB146                            
000EB146                            SetPSG4		macro	PSG4Value
000EB146                            		dc.b	$F3,PSG4Value
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB146                            
000EB146                            ModuOff		macro
000EB146                            		dc.b	$F4
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB146                            
000EB146                            VoicPSG		macro	VoiceID
000EB146                            		dc.b	$F5,VoiceID
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F6 - Jump ---
000EB146                            
000EB146                            Jump		macro	Location
000EB146                            		dc.b	$F6
000EB146                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB146                            		dc.b	(Location-*)&$FF
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F7 - Loop ---
000EB146                            
000EB146                            Loop		macro	Slot, Count, Location
000EB146                            		dc.b	$F7,Slot,Count
000EB146                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB146                            		dc.b	(Location-*)&$FF
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F8 - Call ---
000EB146                            
000EB146                            Call		macro	Location
000EB146                            		dc.b	$F8
000EB146                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB146                            		dc.b	(Location-*)&$FF
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB146                            
000EB146                            ForceRR		macro
000EB146                            		dc.b	$F9
000EB146                            		endm
000EB146                            
000EB146                            	; --- Flag FA - Reverse PCM ---
000EB146                            
000EB146                            Reverse		macro
000EB146                            		dc.b	$FA
000EB146                            		endm
000EB146                            
000EB146                            ; ===========================================================================
000EB146                            ; ===========================================================================
000EB146                            ; ---------------------------------------------------------------------------
000EB146                            Mus89_SCD_OuttaHere_Header:
000EB146                            
000EB146                            ;	smpsHeaderVoice     Mus89_SCD_OuttaHere_Voices
000EB146                            ;	smpsHeaderChan      $06, $03
000EB146                            ;	smpsHeaderTempo     $01, $03
000EB146 0000                       		dc.w	Mus89_SCD_OuttaHere_Voices-Mus89_SCD_OuttaHere_Header				; Voice list address
000EB148 00                         		dc.b	(SCD_OuttaHere_DACFM_End-SCD_OuttaHere_DACFM)/4		; Number of DAC & FM channels
000EB149 00                         		dc.b	(SCD_OuttaHere_PSG_End-SCD_OuttaHere_PSG)/6			; Number of PSG channels
000EB14A 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB14C                            
000EB14C                            
000EB14C                            SCD_OuttaHere_DACFM:
000EB14C 0000                       		dc.w	Mus89_SCD_OuttaHere_NO_DAC-Mus89_SCD_OuttaHere_Header				; PCM 1 tracker address
000EB14E 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB150 0000                       		dc.w	Mus89_SCD_OuttaHere_DAC-Mus89_SCD_OuttaHere_Header				; PCM 2 tracker address
000EB152 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB154 0000                       		dc.w	Mus89_SCD_OuttaHere_FM1-Mus89_SCD_OuttaHere_Header				; FM 1 tracker address
000EB156 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB158 0000                       		dc.w	Mus89_SCD_OuttaHere_FM2-Mus89_SCD_OuttaHere_Header				; FM 2 tracker address
000EB15A 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB15C 0000                       		dc.w	Mus89_SCD_OuttaHere_FM3-Mus89_SCD_OuttaHere_Header				; FM 3 tracker address
000EB15E F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB160 0000                       		dc.w	Mus89_SCD_OuttaHere_FM4-Mus89_SCD_OuttaHere_Header				; FM 4 tracker address
000EB162 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB164 0000                       		dc.w	Mus89_SCD_OuttaHere_FM5-Mus89_SCD_OuttaHere_Header				; FM 5 tracker address
000EB166 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB168                            SCD_OuttaHere_DACFM_End:
000EB168                            
000EB168                            	; --- PSG channels ---
000EB168                            
000EB168                            SCD_OuttaHere_PSG:
000EB168 F2                                Halt
000EB169                            SCD_OuttaHere_PSG_End:
000EB169                            Mus89_SCD_OuttaHere_NO_DAC: 
000EB169 F527                               dc.b    $F5,$27            ; kick instrument
000EB16B B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB172                            
000EB172                            SCD_OuttaHere_Scratch1:	
000EB172                            
000EB172                            ; FM1 Data
000EB172                            Mus89_SCD_OuttaHere_FM1:
000EB172 F2                                     Halt
000EB173                            
000EB173                            ; FM2 Data
000EB173                            Mus89_SCD_OuttaHere_FM2:
000EB173 F2                                     Halt
000EB174                            
000EB174                            ; FM3 Data
000EB174                            Mus89_SCD_OuttaHere_FM3:
000EB174 F2                                     Halt
000EB175                            
000EB175                            ; FM4 Data
000EB175                            Mus89_SCD_OuttaHere_FM4:
000EB175 F2                                     Halt
000EB176                            
000EB176                            ; FM5 Data
000EB176                            Mus89_SCD_OuttaHere_FM5:
000EB176 F2                                     Halt
000EB177                            
000EB177                            ; PSG1 Data
000EB177                            Mus89_SCD_OuttaHere_PSG1:
000EB177 F2                                     Halt
000EB178                            
000EB178                            ; PSG2 Data
000EB178                            Mus89_SCD_OuttaHere_PSG2:
000EB178 F2                                     Halt
000EB179                            
000EB179                            ; PSG3 Data
000EB179                            Mus89_SCD_OuttaHere_PSG3:
000EB179 F2                                     Halt
000EB17A                            
000EB17A                            ; DAC Data
000EB17A                            Mus89_SCD_OuttaHere_DAC:
000EB17A F2                         			Halt
000EB17B                                        
000EB17B                            
000EB17B                            Mus89_SCD_OuttaHere_Voices:
000EB17B F2                                     Halt
000EB17B F2                                     Halt
000EB17C                            		even
000EB17C                            Music8A:	include	"sound\SCD_Future.asm" ; SCD Timepost Future Voice
000EB17C                            ; ---------------------------------------------------------------------------
000EB17C                            		include	"sound\Macros.asm"
000EB17C                            ; ===========================================================================
000EB17C                            ; ---------------------------------------------------------------------------
000EB17C                            ; Sound Driver Macros
000EB17C                            ; ---------------------------------------------------------------------------
000EB17C                            
000EB17C                            	; --- Equates for the macros ---
000EB17C                            
000EB17C =00000000                  NoSpeakers	=	%00000000
000EB17C =00000040                  RightSpeaker	=	%01000000
000EB17C =00000080                  LeftSpeaker	=	%10000000
000EB17C =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB17C                            
000EB17C                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB17C                            
000EB17C =00000080                  REST		=	$80
000EB17C =00000081                  N_S1Kick	=	$81
000EB17C =00000082                  N_S1Snare	=	$82
000EB17C =00000083                  N_S1Timpani	=	$83
000EB17C =00000088                  N_S1TimpHigh	=	$88
000EB17C =00000089                  N_S1TimpMid	=	$89
000EB17C =0000008A                  N_S1TimpLow	=	$8A
000EB17C =0000008B                  N_S1TimpLowest	=	$8B
000EB17C                            
000EB17C =00000001                  C		=	$01
000EB17C =00000002                  Cs		=	$02
000EB17C =00000003                  D		=	$03
000EB17C =00000004                  Eb		=	$04
000EB17C =00000005                  E		=	$05
000EB17C =00000006                  F		=	$06
000EB17C =00000007                  Fs		=	$07
000EB17C =00000008                  G		=	$08
000EB17C =00000009                  Gs		=	$09
000EB17C =0000000A                  A		=	$0A
000EB17C =0000000B                  Bb		=	$0B
000EB17C =0000000C                  B		=	$0C
000EB17C                            
000EB17C =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB17C =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB17C =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB17C =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB17C =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB17C =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB17C =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB17C =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB17C =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB17C =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB17C =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB17C =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB17C                            
000EB17C =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB17C =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB17C =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB17C =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB17C =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB17C =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB17C =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB17C =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB17C =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB17C =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB17C =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB17C =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB17C                            
000EB17C =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB17C =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB17C =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB17C =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB17C =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB17C =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB17C =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB17C =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB17C =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB17C =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB17C =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB17C =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB17C                            
000EB17C =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB17C =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB17C =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB17C =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB17C =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB17C =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB17C =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB17C =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB17C =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB17C =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB17C =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB17C =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB17C                            
000EB17C =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB17C =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB17C =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB17C =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB17C =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB17C =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB17C =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB17C =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB17C =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB17C =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB17C =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB17C =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB17C                            
000EB17C =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB17C =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB17C =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB17C =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB17C =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB17C =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB17C =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB17C =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB17C =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB17C =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB17C =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB17C =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB17C                            
000EB17C =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB17C =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB17C =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB17C =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB17C =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB17C =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB17C =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB17C =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB17C =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB17C =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB17C =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB17C =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB17C                            
000EB17C =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB17C =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB17C =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB17C =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB17C =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB17C =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB17C =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB17C =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB17C =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB17C =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB17C =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB17C =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB17C                            
000EB17C                            ; ---------------------------------------------------------------------------
000EB17C                            ; The actual macros
000EB17C                            ; ---------------------------------------------------------------------------
000EB17C                            
000EB17C                            	; --- Flag E0 - Set panning ---
000EB17C                            
000EB17C                            Pan		macro	PanValue
000EB17C                            		dc.b	$E0,PanValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E1 - Set detune ---
000EB17C                            
000EB17C                            Detune		macro	DetuneValue
000EB17C                            		dc.b	$E1,DetuneValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB17C                            
000EB17C                            UnkFlag		macro	UnkValue
000EB17C                            		dc.b	$E2,UnkValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E3 - Return ---
000EB17C                            
000EB17C                            Return		macro
000EB17C                            		dc.b	$E3
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB17C                            
000EB17C                            FadeIn		macro
000EB17C                            		dc.b	$E4
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB17C                            
000EB17C                            TempMul		macro	TempoMultValue
000EB17C                            		dc.b	$E5,TempoMultValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E6 - Add volume (FM only) ---
000EB17C                            
000EB17C                            VolumFM		macro	VolumeValue
000EB17C                            		dc.b	$E6,VolumeValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB17C                            
000EB17C                            SoftKey		macro
000EB17C                            		dc.b	$E7
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E8 - Set release key rate counter ---
000EB17C                            
000EB17C                            KeyRate		macro	ReleaseValue
000EB17C                            		dc.b	$E8,ReleaseValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag E9 - Add pitch ---
000EB17C                            
000EB17C                            Pitch		macro	PitchValue
000EB17C                            		dc.b	$E9,PitchValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag EA - Set tempo (for all channels) ---
000EB17C                            
000EB17C                            TempSet		macro	TempoSetValue
000EB17C                            		dc.b	$EA,TempoSetValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB17C                            
000EB17C                            TempAll		macro	TempoAllValue
000EB17C                            		dc.b	$EB,TempoAllValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB17C                            
000EB17C                            VoluPSG		macro	VolumeValue
000EB17C                            		dc.b	$EC,VolumeValue
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB17C                            
000EB17C                            ClrBlck		macro
000EB17C                            		dc.b	$ED
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB17C                            
000EB17C                            StopFM4		macro
000EB17C                            		dc.b	$EE
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag EF - FM Voice Select ---
000EB17C                            
000EB17C                            VoiceFM		macro	VoiceID
000EB17C                            		dc.b	$EF,VoiceID
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB17C                            
000EB17C                            Modulat		macro	Delay, Speed, Rate, Steps
000EB17C                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB17C                            
000EB17C                            ModulOn		macro
000EB17C                            		dc.b	$F1
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F2 - Halt channel ---
000EB17C                            
000EB17C                            Halt		macro
000EB17C                            		dc.b	$F2
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F3 - PSG 4 Control ---
000EB17C                            
000EB17C                            SetPSG4		macro	PSG4Value
000EB17C                            		dc.b	$F3,PSG4Value
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB17C                            
000EB17C                            ModuOff		macro
000EB17C                            		dc.b	$F4
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB17C                            
000EB17C                            VoicPSG		macro	VoiceID
000EB17C                            		dc.b	$F5,VoiceID
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F6 - Jump ---
000EB17C                            
000EB17C                            Jump		macro	Location
000EB17C                            		dc.b	$F6
000EB17C                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB17C                            		dc.b	(Location-*)&$FF
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F7 - Loop ---
000EB17C                            
000EB17C                            Loop		macro	Slot, Count, Location
000EB17C                            		dc.b	$F7,Slot,Count
000EB17C                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB17C                            		dc.b	(Location-*)&$FF
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F8 - Call ---
000EB17C                            
000EB17C                            Call		macro	Location
000EB17C                            		dc.b	$F8
000EB17C                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB17C                            		dc.b	(Location-*)&$FF
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB17C                            
000EB17C                            ForceRR		macro
000EB17C                            		dc.b	$F9
000EB17C                            		endm
000EB17C                            
000EB17C                            	; --- Flag FA - Reverse PCM ---
000EB17C                            
000EB17C                            Reverse		macro
000EB17C                            		dc.b	$FA
000EB17C                            		endm
000EB17C                            
000EB17C                            ; ===========================================================================
000EB17C                            ; ===========================================================================
000EB17C                            ; ---------------------------------------------------------------------------
000EB17C                            Mus8A_SCD_Future_Header:
000EB17C                            
000EB17C                            ;	smpsHeaderVoice     Mus8A_SCD_Future_Voices
000EB17C                            ;	smpsHeaderChan      $06, $03
000EB17C                            ;	smpsHeaderTempo     $01, $03
000EB17C 0000                       		dc.w	Mus8A_SCD_Future_Voices-Mus8A_SCD_Future_Header				; Voice list address
000EB17E 00                         		dc.b	(SCD_Future_DACFM_End-SCD_Future_DACFM)/4		; Number of DAC & FM channels
000EB17F 00                         		dc.b	(SCD_Future_PSG_End-SCD_Future_PSG)/6			; Number of PSG channels
000EB180 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB182                            
000EB182                            
000EB182                            SCD_Future_DACFM:
000EB182 0000                       		dc.w	Mus8A_SCD_Future_NO_DAC-Mus8A_SCD_Future_Header				; PCM 1 tracker address
000EB184 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB186 0000                       		dc.w	Mus8A_SCD_Future_DAC-Mus8A_SCD_Future_Header				; PCM 2 tracker address
000EB188 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB18A 0000                       		dc.w	Mus8A_SCD_Future_FM1-Mus8A_SCD_Future_Header				; FM 1 tracker address
000EB18C F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB18E 0000                       		dc.w	Mus8A_SCD_Future_FM2-Mus8A_SCD_Future_Header				; FM 2 tracker address
000EB190 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB192 0000                       		dc.w	Mus8A_SCD_Future_FM3-Mus8A_SCD_Future_Header				; FM 3 tracker address
000EB194 F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB196 0000                       		dc.w	Mus8A_SCD_Future_FM4-Mus8A_SCD_Future_Header				; FM 4 tracker address
000EB198 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB19A 0000                       		dc.w	Mus8A_SCD_Future_FM5-Mus8A_SCD_Future_Header				; FM 5 tracker address
000EB19C F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB19E                            SCD_Future_DACFM_End:
000EB19E                            
000EB19E                            	; --- PSG channels ---
000EB19E                            
000EB19E                            SCD_Future_PSG:
000EB19E F2                                Halt
000EB19F                            SCD_Future_PSG_End:
000EB19F                            Mus8A_SCD_Future_NO_DAC: 
000EB19F F525                               dc.b    $F5,$25            ; kick instrument
000EB1A1 B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB1A8                            
000EB1A8                            SCD_Future_Scratch1:	
000EB1A8                            
000EB1A8                            ; FM1 Data
000EB1A8                            Mus8A_SCD_Future_FM1:
000EB1A8 F2                                     Halt
000EB1A9                            
000EB1A9                            ; FM2 Data
000EB1A9                            Mus8A_SCD_Future_FM2:
000EB1A9 F2                                     Halt
000EB1AA                            
000EB1AA                            ; FM3 Data
000EB1AA                            Mus8A_SCD_Future_FM3:
000EB1AA F2                                     Halt
000EB1AB                            
000EB1AB                            ; FM4 Data
000EB1AB                            Mus8A_SCD_Future_FM4:
000EB1AB F2                                     Halt
000EB1AC                            
000EB1AC                            ; FM5 Data
000EB1AC                            Mus8A_SCD_Future_FM5:
000EB1AC F2                                     Halt
000EB1AD                            
000EB1AD                            ; PSG1 Data
000EB1AD                            Mus8A_SCD_Future_PSG1:
000EB1AD F2                                     Halt
000EB1AE                            
000EB1AE                            ; PSG2 Data
000EB1AE                            Mus8A_SCD_Future_PSG2:
000EB1AE F2                                     Halt
000EB1AF                            
000EB1AF                            ; PSG3 Data
000EB1AF                            Mus8A_SCD_Future_PSG3:
000EB1AF F2                                     Halt
000EB1B0                            
000EB1B0                            ; DAC Data
000EB1B0                            Mus8A_SCD_Future_DAC:
000EB1B0 F2                         			Halt
000EB1B1                                        
000EB1B1                            
000EB1B1                            Mus8A_SCD_Future_Voices:
000EB1B1 F2                                     Halt
000EB1B1 F2                                     Halt
000EB1B2                            		even
000EB1B2                            Music8B:	include	"sound\SCD_Past.asm" ; SCD Timepost Past Voice
000EB1B2                            ; ---------------------------------------------------------------------------
000EB1B2                            		include	"sound\Macros.asm"
000EB1B2                            ; ===========================================================================
000EB1B2                            ; ---------------------------------------------------------------------------
000EB1B2                            ; Sound Driver Macros
000EB1B2                            ; ---------------------------------------------------------------------------
000EB1B2                            
000EB1B2                            	; --- Equates for the macros ---
000EB1B2                            
000EB1B2 =00000000                  NoSpeakers	=	%00000000
000EB1B2 =00000040                  RightSpeaker	=	%01000000
000EB1B2 =00000080                  LeftSpeaker	=	%10000000
000EB1B2 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB1B2                            
000EB1B2                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB1B2                            
000EB1B2 =00000080                  REST		=	$80
000EB1B2 =00000081                  N_S1Kick	=	$81
000EB1B2 =00000082                  N_S1Snare	=	$82
000EB1B2 =00000083                  N_S1Timpani	=	$83
000EB1B2 =00000088                  N_S1TimpHigh	=	$88
000EB1B2 =00000089                  N_S1TimpMid	=	$89
000EB1B2 =0000008A                  N_S1TimpLow	=	$8A
000EB1B2 =0000008B                  N_S1TimpLowest	=	$8B
000EB1B2                            
000EB1B2 =00000001                  C		=	$01
000EB1B2 =00000002                  Cs		=	$02
000EB1B2 =00000003                  D		=	$03
000EB1B2 =00000004                  Eb		=	$04
000EB1B2 =00000005                  E		=	$05
000EB1B2 =00000006                  F		=	$06
000EB1B2 =00000007                  Fs		=	$07
000EB1B2 =00000008                  G		=	$08
000EB1B2 =00000009                  Gs		=	$09
000EB1B2 =0000000A                  A		=	$0A
000EB1B2 =0000000B                  Bb		=	$0B
000EB1B2 =0000000C                  B		=	$0C
000EB1B2                            
000EB1B2 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB1B2 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB1B2 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB1B2 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB1B2 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB1B2 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB1B2 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB1B2 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB1B2 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB1B2 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB1B2 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB1B2 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB1B2                            
000EB1B2 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB1B2 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB1B2 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB1B2 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB1B2 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB1B2 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB1B2 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB1B2 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB1B2 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB1B2 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB1B2 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB1B2 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB1B2                            
000EB1B2 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB1B2 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB1B2 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB1B2 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB1B2 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB1B2 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB1B2 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB1B2 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB1B2 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB1B2 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB1B2 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB1B2 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB1B2                            
000EB1B2 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB1B2 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB1B2 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB1B2 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB1B2 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB1B2 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB1B2 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB1B2 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB1B2 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB1B2 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB1B2 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB1B2 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB1B2                            
000EB1B2 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB1B2 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB1B2 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB1B2 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB1B2 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB1B2 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB1B2 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB1B2 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB1B2 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB1B2 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB1B2 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB1B2 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB1B2                            
000EB1B2 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB1B2 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB1B2 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB1B2 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB1B2 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB1B2 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB1B2 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB1B2 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB1B2 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB1B2 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB1B2 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB1B2 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB1B2                            
000EB1B2 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB1B2 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB1B2 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB1B2 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB1B2 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB1B2 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB1B2 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB1B2 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB1B2 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB1B2 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB1B2 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB1B2 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB1B2                            
000EB1B2 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB1B2 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB1B2 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB1B2 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB1B2 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB1B2 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB1B2 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB1B2 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB1B2 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB1B2 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB1B2 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB1B2 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB1B2                            
000EB1B2                            ; ---------------------------------------------------------------------------
000EB1B2                            ; The actual macros
000EB1B2                            ; ---------------------------------------------------------------------------
000EB1B2                            
000EB1B2                            	; --- Flag E0 - Set panning ---
000EB1B2                            
000EB1B2                            Pan		macro	PanValue
000EB1B2                            		dc.b	$E0,PanValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E1 - Set detune ---
000EB1B2                            
000EB1B2                            Detune		macro	DetuneValue
000EB1B2                            		dc.b	$E1,DetuneValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB1B2                            
000EB1B2                            UnkFlag		macro	UnkValue
000EB1B2                            		dc.b	$E2,UnkValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E3 - Return ---
000EB1B2                            
000EB1B2                            Return		macro
000EB1B2                            		dc.b	$E3
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB1B2                            
000EB1B2                            FadeIn		macro
000EB1B2                            		dc.b	$E4
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB1B2                            
000EB1B2                            TempMul		macro	TempoMultValue
000EB1B2                            		dc.b	$E5,TempoMultValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E6 - Add volume (FM only) ---
000EB1B2                            
000EB1B2                            VolumFM		macro	VolumeValue
000EB1B2                            		dc.b	$E6,VolumeValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB1B2                            
000EB1B2                            SoftKey		macro
000EB1B2                            		dc.b	$E7
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E8 - Set release key rate counter ---
000EB1B2                            
000EB1B2                            KeyRate		macro	ReleaseValue
000EB1B2                            		dc.b	$E8,ReleaseValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag E9 - Add pitch ---
000EB1B2                            
000EB1B2                            Pitch		macro	PitchValue
000EB1B2                            		dc.b	$E9,PitchValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag EA - Set tempo (for all channels) ---
000EB1B2                            
000EB1B2                            TempSet		macro	TempoSetValue
000EB1B2                            		dc.b	$EA,TempoSetValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB1B2                            
000EB1B2                            TempAll		macro	TempoAllValue
000EB1B2                            		dc.b	$EB,TempoAllValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB1B2                            
000EB1B2                            VoluPSG		macro	VolumeValue
000EB1B2                            		dc.b	$EC,VolumeValue
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB1B2                            
000EB1B2                            ClrBlck		macro
000EB1B2                            		dc.b	$ED
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB1B2                            
000EB1B2                            StopFM4		macro
000EB1B2                            		dc.b	$EE
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag EF - FM Voice Select ---
000EB1B2                            
000EB1B2                            VoiceFM		macro	VoiceID
000EB1B2                            		dc.b	$EF,VoiceID
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB1B2                            
000EB1B2                            Modulat		macro	Delay, Speed, Rate, Steps
000EB1B2                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB1B2                            
000EB1B2                            ModulOn		macro
000EB1B2                            		dc.b	$F1
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F2 - Halt channel ---
000EB1B2                            
000EB1B2                            Halt		macro
000EB1B2                            		dc.b	$F2
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F3 - PSG 4 Control ---
000EB1B2                            
000EB1B2                            SetPSG4		macro	PSG4Value
000EB1B2                            		dc.b	$F3,PSG4Value
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB1B2                            
000EB1B2                            ModuOff		macro
000EB1B2                            		dc.b	$F4
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB1B2                            
000EB1B2                            VoicPSG		macro	VoiceID
000EB1B2                            		dc.b	$F5,VoiceID
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F6 - Jump ---
000EB1B2                            
000EB1B2                            Jump		macro	Location
000EB1B2                            		dc.b	$F6
000EB1B2                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB1B2                            		dc.b	(Location-*)&$FF
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F7 - Loop ---
000EB1B2                            
000EB1B2                            Loop		macro	Slot, Count, Location
000EB1B2                            		dc.b	$F7,Slot,Count
000EB1B2                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB1B2                            		dc.b	(Location-*)&$FF
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F8 - Call ---
000EB1B2                            
000EB1B2                            Call		macro	Location
000EB1B2                            		dc.b	$F8
000EB1B2                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB1B2                            		dc.b	(Location-*)&$FF
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB1B2                            
000EB1B2                            ForceRR		macro
000EB1B2                            		dc.b	$F9
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            	; --- Flag FA - Reverse PCM ---
000EB1B2                            
000EB1B2                            Reverse		macro
000EB1B2                            		dc.b	$FA
000EB1B2                            		endm
000EB1B2                            
000EB1B2                            ; ===========================================================================
000EB1B2                            ; ===========================================================================
000EB1B2                            ; ---------------------------------------------------------------------------
000EB1B2                            Mus8B_SCD_Past_Header:
000EB1B2                            
000EB1B2                            ;	smpsHeaderVoice     Mus8B_SCD_Past_Voices
000EB1B2                            ;	smpsHeaderChan      $06, $03
000EB1B2                            ;	smpsHeaderTempo     $01, $03
000EB1B2 0000                       		dc.w	Mus8B_SCD_Past_Voices-Mus8B_SCD_Past_Header				; Voice list address
000EB1B4 00                         		dc.b	(SCD_Past_DACFM_End-SCD_Past_DACFM)/4		; Number of DAC & FM channels
000EB1B5 00                         		dc.b	(SCD_Past_PSG_End-SCD_Past_PSG)/6			; Number of PSG channels
000EB1B6 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB1B8                            
000EB1B8                            
000EB1B8                            SCD_Past_DACFM:
000EB1B8 0000                       		dc.w	Mus8B_SCD_Past_NO_DAC-Mus8B_SCD_Past_Header				; PCM 1 tracker address
000EB1BA 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB1BC 0000                       		dc.w	Mus8B_SCD_Past_DAC-Mus8B_SCD_Past_Header				; PCM 2 tracker address
000EB1BE 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB1C0 0000                       		dc.w	Mus8B_SCD_Past_FM1-Mus8B_SCD_Past_Header				; FM 1 tracker address
000EB1C2 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB1C4 0000                       		dc.w	Mus8B_SCD_Past_FM2-Mus8B_SCD_Past_Header				; FM 2 tracker address
000EB1C6 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB1C8 0000                       		dc.w	Mus8B_SCD_Past_FM3-Mus8B_SCD_Past_Header				; FM 3 tracker address
000EB1CA F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB1CC 0000                       		dc.w	Mus8B_SCD_Past_FM4-Mus8B_SCD_Past_Header				; FM 4 tracker address
000EB1CE F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB1D0 0000                       		dc.w	Mus8B_SCD_Past_FM5-Mus8B_SCD_Past_Header				; FM 5 tracker address
000EB1D2 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB1D4                            SCD_Past_DACFM_End:
000EB1D4                            
000EB1D4                            	; --- PSG channels ---
000EB1D4                            
000EB1D4                            SCD_Past_PSG:
000EB1D4 F2                                Halt
000EB1D5                            SCD_Past_PSG_End:
000EB1D5                            Mus8B_SCD_Past_NO_DAC: 
000EB1D5 F526                               dc.b    $F5,$26            ; kick instrument
000EB1D7 B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB1DE                            
000EB1DE                            SCD_Past_Scratch1:	
000EB1DE                            
000EB1DE                            ; FM1 Data
000EB1DE                            Mus8B_SCD_Past_FM1:
000EB1DE F2                                     Halt
000EB1DF                            
000EB1DF                            ; FM2 Data
000EB1DF                            Mus8B_SCD_Past_FM2:
000EB1DF F2                                     Halt
000EB1E0                            
000EB1E0                            ; FM3 Data
000EB1E0                            Mus8B_SCD_Past_FM3:
000EB1E0 F2                                     Halt
000EB1E1                            
000EB1E1                            ; FM4 Data
000EB1E1                            Mus8B_SCD_Past_FM4:
000EB1E1 F2                                     Halt
000EB1E2                            
000EB1E2                            ; FM5 Data
000EB1E2                            Mus8B_SCD_Past_FM5:
000EB1E2 F2                                     Halt
000EB1E3                            
000EB1E3                            ; PSG1 Data
000EB1E3                            Mus8B_SCD_Past_PSG1:
000EB1E3 F2                                     Halt
000EB1E4                            
000EB1E4                            ; PSG2 Data
000EB1E4                            Mus8B_SCD_Past_PSG2:
000EB1E4 F2                                     Halt
000EB1E5                            
000EB1E5                            ; PSG3 Data
000EB1E5                            Mus8B_SCD_Past_PSG3:
000EB1E5 F2                                     Halt
000EB1E6                            
000EB1E6                            ; DAC Data
000EB1E6                            Mus8B_SCD_Past_DAC:
000EB1E6 F2                         			Halt
000EB1E7                                        
000EB1E7                            
000EB1E7                            Mus8B_SCD_Past_Voices:
000EB1E7 F2                                     Halt
000EB1E7 F2                                     Halt
000EB1E8                            		even
000EB1E8                            Music8C:	include	"sound\SCD_Boss.asm" ; SCD Boss Theme
000EB1E8                            ; ---------------------------------------------------------------------------
000EB1E8                            		include	"sound\Macros.asm"
000EB1E8                            ; ===========================================================================
000EB1E8                            ; ---------------------------------------------------------------------------
000EB1E8                            ; Sound Driver Macros
000EB1E8                            ; ---------------------------------------------------------------------------
000EB1E8                            
000EB1E8                            	; --- Equates for the macros ---
000EB1E8                            
000EB1E8 =00000000                  NoSpeakers	=	%00000000
000EB1E8 =00000040                  RightSpeaker	=	%01000000
000EB1E8 =00000080                  LeftSpeaker	=	%10000000
000EB1E8 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB1E8                            
000EB1E8                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB1E8                            
000EB1E8 =00000080                  REST		=	$80
000EB1E8 =00000081                  N_S1Kick	=	$81
000EB1E8 =00000082                  N_S1Snare	=	$82
000EB1E8 =00000083                  N_S1Timpani	=	$83
000EB1E8 =00000088                  N_S1TimpHigh	=	$88
000EB1E8 =00000089                  N_S1TimpMid	=	$89
000EB1E8 =0000008A                  N_S1TimpLow	=	$8A
000EB1E8 =0000008B                  N_S1TimpLowest	=	$8B
000EB1E8                            
000EB1E8 =00000001                  C		=	$01
000EB1E8 =00000002                  Cs		=	$02
000EB1E8 =00000003                  D		=	$03
000EB1E8 =00000004                  Eb		=	$04
000EB1E8 =00000005                  E		=	$05
000EB1E8 =00000006                  F		=	$06
000EB1E8 =00000007                  Fs		=	$07
000EB1E8 =00000008                  G		=	$08
000EB1E8 =00000009                  Gs		=	$09
000EB1E8 =0000000A                  A		=	$0A
000EB1E8 =0000000B                  Bb		=	$0B
000EB1E8 =0000000C                  B		=	$0C
000EB1E8                            
000EB1E8 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB1E8 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB1E8 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB1E8 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB1E8 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB1E8 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB1E8 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB1E8 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB1E8 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB1E8 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB1E8 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB1E8 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB1E8                            
000EB1E8 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB1E8 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB1E8 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB1E8 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB1E8 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB1E8 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB1E8 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB1E8 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB1E8 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB1E8 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB1E8 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB1E8 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB1E8                            
000EB1E8 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB1E8 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB1E8 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB1E8 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB1E8 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB1E8 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB1E8 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB1E8 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB1E8 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB1E8 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB1E8 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB1E8 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB1E8                            
000EB1E8 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB1E8 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB1E8 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB1E8 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB1E8 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB1E8 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB1E8 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB1E8 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB1E8 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB1E8 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB1E8 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB1E8 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB1E8                            
000EB1E8 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB1E8 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB1E8 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB1E8 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB1E8 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB1E8 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB1E8 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB1E8 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB1E8 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB1E8 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB1E8 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB1E8 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB1E8                            
000EB1E8 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB1E8 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB1E8 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB1E8 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB1E8 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB1E8 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB1E8 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB1E8 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB1E8 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB1E8 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB1E8 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB1E8 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB1E8                            
000EB1E8 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB1E8 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB1E8 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB1E8 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB1E8 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB1E8 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB1E8 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB1E8 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB1E8 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB1E8 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB1E8 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB1E8 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB1E8                            
000EB1E8 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB1E8 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB1E8 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB1E8 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB1E8 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB1E8 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB1E8 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB1E8 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB1E8 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB1E8 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB1E8 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB1E8 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB1E8                            
000EB1E8                            ; ---------------------------------------------------------------------------
000EB1E8                            ; The actual macros
000EB1E8                            ; ---------------------------------------------------------------------------
000EB1E8                            
000EB1E8                            	; --- Flag E0 - Set panning ---
000EB1E8                            
000EB1E8                            Pan		macro	PanValue
000EB1E8                            		dc.b	$E0,PanValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E1 - Set detune ---
000EB1E8                            
000EB1E8                            Detune		macro	DetuneValue
000EB1E8                            		dc.b	$E1,DetuneValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB1E8                            
000EB1E8                            UnkFlag		macro	UnkValue
000EB1E8                            		dc.b	$E2,UnkValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E3 - Return ---
000EB1E8                            
000EB1E8                            Return		macro
000EB1E8                            		dc.b	$E3
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB1E8                            
000EB1E8                            FadeIn		macro
000EB1E8                            		dc.b	$E4
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB1E8                            
000EB1E8                            TempMul		macro	TempoMultValue
000EB1E8                            		dc.b	$E5,TempoMultValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E6 - Add volume (FM only) ---
000EB1E8                            
000EB1E8                            VolumFM		macro	VolumeValue
000EB1E8                            		dc.b	$E6,VolumeValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB1E8                            
000EB1E8                            SoftKey		macro
000EB1E8                            		dc.b	$E7
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E8 - Set release key rate counter ---
000EB1E8                            
000EB1E8                            KeyRate		macro	ReleaseValue
000EB1E8                            		dc.b	$E8,ReleaseValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag E9 - Add pitch ---
000EB1E8                            
000EB1E8                            Pitch		macro	PitchValue
000EB1E8                            		dc.b	$E9,PitchValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag EA - Set tempo (for all channels) ---
000EB1E8                            
000EB1E8                            TempSet		macro	TempoSetValue
000EB1E8                            		dc.b	$EA,TempoSetValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB1E8                            
000EB1E8                            TempAll		macro	TempoAllValue
000EB1E8                            		dc.b	$EB,TempoAllValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB1E8                            
000EB1E8                            VoluPSG		macro	VolumeValue
000EB1E8                            		dc.b	$EC,VolumeValue
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB1E8                            
000EB1E8                            ClrBlck		macro
000EB1E8                            		dc.b	$ED
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB1E8                            
000EB1E8                            StopFM4		macro
000EB1E8                            		dc.b	$EE
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag EF - FM Voice Select ---
000EB1E8                            
000EB1E8                            VoiceFM		macro	VoiceID
000EB1E8                            		dc.b	$EF,VoiceID
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB1E8                            
000EB1E8                            Modulat		macro	Delay, Speed, Rate, Steps
000EB1E8                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB1E8                            
000EB1E8                            ModulOn		macro
000EB1E8                            		dc.b	$F1
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F2 - Halt channel ---
000EB1E8                            
000EB1E8                            Halt		macro
000EB1E8                            		dc.b	$F2
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F3 - PSG 4 Control ---
000EB1E8                            
000EB1E8                            SetPSG4		macro	PSG4Value
000EB1E8                            		dc.b	$F3,PSG4Value
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB1E8                            
000EB1E8                            ModuOff		macro
000EB1E8                            		dc.b	$F4
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB1E8                            
000EB1E8                            VoicPSG		macro	VoiceID
000EB1E8                            		dc.b	$F5,VoiceID
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F6 - Jump ---
000EB1E8                            
000EB1E8                            Jump		macro	Location
000EB1E8                            		dc.b	$F6
000EB1E8                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB1E8                            		dc.b	(Location-*)&$FF
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F7 - Loop ---
000EB1E8                            
000EB1E8                            Loop		macro	Slot, Count, Location
000EB1E8                            		dc.b	$F7,Slot,Count
000EB1E8                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB1E8                            		dc.b	(Location-*)&$FF
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F8 - Call ---
000EB1E8                            
000EB1E8                            Call		macro	Location
000EB1E8                            		dc.b	$F8
000EB1E8                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB1E8                            		dc.b	(Location-*)&$FF
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB1E8                            
000EB1E8                            ForceRR		macro
000EB1E8                            		dc.b	$F9
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            	; --- Flag FA - Reverse PCM ---
000EB1E8                            
000EB1E8                            Reverse		macro
000EB1E8                            		dc.b	$FA
000EB1E8                            		endm
000EB1E8                            
000EB1E8                            ; ===========================================================================
000EB1E8                            ; ===========================================================================
000EB1E8                            ; ---------------------------------------------------------------------------
000EB1E8                            Mus8C_SCD_Boss_Header:
000EB1E8                            
000EB1E8                            ;	smpsHeaderVoice     Mus8C_SCD_Boss_Voices
000EB1E8                            ;	smpsHeaderChan      $06, $03
000EB1E8                            ;	smpsHeaderTempo     $01, $03
000EB1E8 0000                       		dc.w	Mus8C_SCD_Boss_Voices-Mus8C_SCD_Boss_Header				; Voice list address
000EB1EA 00                         		dc.b	(SCD_Boss_DACFM_End-SCD_Boss_DACFM)/4		; Number of DAC & FM channels
000EB1EB 00                         		dc.b	(SCD_Boss_PSG_End-SCD_Boss_PSG)/6			; Number of PSG channels
000EB1EC 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB1EE                            
000EB1EE                            
000EB1EE                            SCD_Boss_DACFM:
000EB1EE 0000                       		dc.w	Mus8C_SCD_Boss_NO_DAC-Mus8C_SCD_Boss_Header				; PCM 1 tracker address
000EB1F0 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB1F2 0000                       		dc.w	Mus8C_SCD_Boss_DAC-Mus8C_SCD_Boss_Header				; PCM 2 tracker address
000EB1F4 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB1F6 0000                       		dc.w	Mus8C_SCD_Boss_FM1-Mus8C_SCD_Boss_Header				; FM 1 tracker address
000EB1F8 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB1FA 0000                       		dc.w	Mus8C_SCD_Boss_FM2-Mus8C_SCD_Boss_Header				; FM 2 tracker address
000EB1FC 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB1FE 0000                       		dc.w	Mus8C_SCD_Boss_FM3-Mus8C_SCD_Boss_Header				; FM 3 tracker address
000EB200 F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB202 0000                       		dc.w	Mus8C_SCD_Boss_FM4-Mus8C_SCD_Boss_Header				; FM 4 tracker address
000EB204 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB206 0000                       		dc.w	Mus8C_SCD_Boss_FM5-Mus8C_SCD_Boss_Header				; FM 5 tracker address
000EB208 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB20A                            SCD_Boss_DACFM_End:
000EB20A                            
000EB20A                            	; --- PSG channels ---
000EB20A                            
000EB20A                            SCD_Boss_PSG:
000EB20A F2                                Halt
000EB20B                            SCD_Boss_PSG_End:
000EB20B                            Mus8C_SCD_Boss_NO_DAC: 
000EB20B F52A                               dc.b    $F5,$2A            ; kick instrument
000EB20D B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB214                            
000EB214                            SCD_Boss_Scratch1:	
000EB214                            
000EB214                            ; FM1 Data
000EB214                            Mus8C_SCD_Boss_FM1:
000EB214 F2                                     Halt
000EB215                            
000EB215                            ; FM2 Data
000EB215                            Mus8C_SCD_Boss_FM2:
000EB215 F2                                     Halt
000EB216                            
000EB216                            ; FM3 Data
000EB216                            Mus8C_SCD_Boss_FM3:
000EB216 F2                                     Halt
000EB217                            
000EB217                            ; FM4 Data
000EB217                            Mus8C_SCD_Boss_FM4:
000EB217 F2                                     Halt
000EB218                            
000EB218                            ; FM5 Data
000EB218                            Mus8C_SCD_Boss_FM5:
000EB218 F2                                     Halt
000EB219                            
000EB219                            ; PSG1 Data
000EB219                            Mus8C_SCD_Boss_PSG1:
000EB219 F2                                     Halt
000EB21A                            
000EB21A                            ; PSG2 Data
000EB21A                            Mus8C_SCD_Boss_PSG2:
000EB21A F2                                     Halt
000EB21B                            
000EB21B                            ; PSG3 Data
000EB21B                            Mus8C_SCD_Boss_PSG3:
000EB21B F2                                     Halt
000EB21C                            
000EB21C                            ; DAC Data
000EB21C                            Mus8C_SCD_Boss_DAC:
000EB21C F2                         			Halt
000EB21D                                        
000EB21D                            
000EB21D                            Mus8C_SCD_Boss_Voices:
000EB21D F2                                     Halt
000EB21D F2                                     Halt
000EB21E                            		even
000EB21E                            Music8D:	incbin	sound\music8D.bin ; S1 Final Zone Theme
000EB4C0                            		even
000EB4C0                            Music8E:	include	"sound\EoA.asm" ; SCD End of Act
000EB4C0                            ; ---------------------------------------------------------------------------
000EB4C0                            		include	"sound\Macros.asm"
000EB4C0                            ; ===========================================================================
000EB4C0                            ; ---------------------------------------------------------------------------
000EB4C0                            ; Sound Driver Macros
000EB4C0                            ; ---------------------------------------------------------------------------
000EB4C0                            
000EB4C0                            	; --- Equates for the macros ---
000EB4C0                            
000EB4C0 =00000000                  NoSpeakers	=	%00000000
000EB4C0 =00000040                  RightSpeaker	=	%01000000
000EB4C0 =00000080                  LeftSpeaker	=	%10000000
000EB4C0 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB4C0                            
000EB4C0                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB4C0                            
000EB4C0 =00000080                  REST		=	$80
000EB4C0 =00000081                  N_S1Kick	=	$81
000EB4C0 =00000082                  N_S1Snare	=	$82
000EB4C0 =00000083                  N_S1Timpani	=	$83
000EB4C0 =00000088                  N_S1TimpHigh	=	$88
000EB4C0 =00000089                  N_S1TimpMid	=	$89
000EB4C0 =0000008A                  N_S1TimpLow	=	$8A
000EB4C0 =0000008B                  N_S1TimpLowest	=	$8B
000EB4C0                            
000EB4C0 =00000001                  C		=	$01
000EB4C0 =00000002                  Cs		=	$02
000EB4C0 =00000003                  D		=	$03
000EB4C0 =00000004                  Eb		=	$04
000EB4C0 =00000005                  E		=	$05
000EB4C0 =00000006                  F		=	$06
000EB4C0 =00000007                  Fs		=	$07
000EB4C0 =00000008                  G		=	$08
000EB4C0 =00000009                  Gs		=	$09
000EB4C0 =0000000A                  A		=	$0A
000EB4C0 =0000000B                  Bb		=	$0B
000EB4C0 =0000000C                  B		=	$0C
000EB4C0                            
000EB4C0 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB4C0 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB4C0 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB4C0 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB4C0 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB4C0 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB4C0 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB4C0 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB4C0 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB4C0 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB4C0 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB4C0 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB4C0                            
000EB4C0 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB4C0 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB4C0 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB4C0 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB4C0 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB4C0 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB4C0 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB4C0 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB4C0 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB4C0 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB4C0 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB4C0 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB4C0                            
000EB4C0 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB4C0 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB4C0 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB4C0 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB4C0 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB4C0 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB4C0 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB4C0 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB4C0 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB4C0 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB4C0 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB4C0 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB4C0                            
000EB4C0 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB4C0 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB4C0 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB4C0 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB4C0 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB4C0 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB4C0 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB4C0 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB4C0 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB4C0 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB4C0 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB4C0 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB4C0                            
000EB4C0 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB4C0 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB4C0 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB4C0 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB4C0 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB4C0 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB4C0 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB4C0 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB4C0 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB4C0 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB4C0 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB4C0 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB4C0                            
000EB4C0 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB4C0 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB4C0 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB4C0 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB4C0 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB4C0 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB4C0 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB4C0 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB4C0 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB4C0 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB4C0 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB4C0 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB4C0                            
000EB4C0 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB4C0 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB4C0 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB4C0 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB4C0 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB4C0 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB4C0 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB4C0 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB4C0 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB4C0 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB4C0 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB4C0 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB4C0                            
000EB4C0 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB4C0 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB4C0 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB4C0 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB4C0 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB4C0 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB4C0 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB4C0 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB4C0 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB4C0 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB4C0 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB4C0 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB4C0                            
000EB4C0                            ; ---------------------------------------------------------------------------
000EB4C0                            ; The actual macros
000EB4C0                            ; ---------------------------------------------------------------------------
000EB4C0                            
000EB4C0                            	; --- Flag E0 - Set panning ---
000EB4C0                            
000EB4C0                            Pan		macro	PanValue
000EB4C0                            		dc.b	$E0,PanValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E1 - Set detune ---
000EB4C0                            
000EB4C0                            Detune		macro	DetuneValue
000EB4C0                            		dc.b	$E1,DetuneValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB4C0                            
000EB4C0                            UnkFlag		macro	UnkValue
000EB4C0                            		dc.b	$E2,UnkValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E3 - Return ---
000EB4C0                            
000EB4C0                            Return		macro
000EB4C0                            		dc.b	$E3
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB4C0                            
000EB4C0                            FadeIn		macro
000EB4C0                            		dc.b	$E4
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB4C0                            
000EB4C0                            TempMul		macro	TempoMultValue
000EB4C0                            		dc.b	$E5,TempoMultValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E6 - Add volume (FM only) ---
000EB4C0                            
000EB4C0                            VolumFM		macro	VolumeValue
000EB4C0                            		dc.b	$E6,VolumeValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB4C0                            
000EB4C0                            SoftKey		macro
000EB4C0                            		dc.b	$E7
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E8 - Set release key rate counter ---
000EB4C0                            
000EB4C0                            KeyRate		macro	ReleaseValue
000EB4C0                            		dc.b	$E8,ReleaseValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag E9 - Add pitch ---
000EB4C0                            
000EB4C0                            Pitch		macro	PitchValue
000EB4C0                            		dc.b	$E9,PitchValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag EA - Set tempo (for all channels) ---
000EB4C0                            
000EB4C0                            TempSet		macro	TempoSetValue
000EB4C0                            		dc.b	$EA,TempoSetValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB4C0                            
000EB4C0                            TempAll		macro	TempoAllValue
000EB4C0                            		dc.b	$EB,TempoAllValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB4C0                            
000EB4C0                            VoluPSG		macro	VolumeValue
000EB4C0                            		dc.b	$EC,VolumeValue
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB4C0                            
000EB4C0                            ClrBlck		macro
000EB4C0                            		dc.b	$ED
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB4C0                            
000EB4C0                            StopFM4		macro
000EB4C0                            		dc.b	$EE
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag EF - FM Voice Select ---
000EB4C0                            
000EB4C0                            VoiceFM		macro	VoiceID
000EB4C0                            		dc.b	$EF,VoiceID
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB4C0                            
000EB4C0                            Modulat		macro	Delay, Speed, Rate, Steps
000EB4C0                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB4C0                            
000EB4C0                            ModulOn		macro
000EB4C0                            		dc.b	$F1
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F2 - Halt channel ---
000EB4C0                            
000EB4C0                            Halt		macro
000EB4C0                            		dc.b	$F2
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F3 - PSG 4 Control ---
000EB4C0                            
000EB4C0                            SetPSG4		macro	PSG4Value
000EB4C0                            		dc.b	$F3,PSG4Value
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB4C0                            
000EB4C0                            ModuOff		macro
000EB4C0                            		dc.b	$F4
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB4C0                            
000EB4C0                            VoicPSG		macro	VoiceID
000EB4C0                            		dc.b	$F5,VoiceID
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F6 - Jump ---
000EB4C0                            
000EB4C0                            Jump		macro	Location
000EB4C0                            		dc.b	$F6
000EB4C0                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB4C0                            		dc.b	(Location-*)&$FF
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F7 - Loop ---
000EB4C0                            
000EB4C0                            Loop		macro	Slot, Count, Location
000EB4C0                            		dc.b	$F7,Slot,Count
000EB4C0                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB4C0                            		dc.b	(Location-*)&$FF
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F8 - Call ---
000EB4C0                            
000EB4C0                            Call		macro	Location
000EB4C0                            		dc.b	$F8
000EB4C0                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB4C0                            		dc.b	(Location-*)&$FF
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB4C0                            
000EB4C0                            ForceRR		macro
000EB4C0                            		dc.b	$F9
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            	; --- Flag FA - Reverse PCM ---
000EB4C0                            
000EB4C0                            Reverse		macro
000EB4C0                            		dc.b	$FA
000EB4C0                            		endm
000EB4C0                            
000EB4C0                            ; ===========================================================================
000EB4C0                            ; ===========================================================================
000EB4C0                            ; ---------------------------------------------------------------------------
000EB4C0                            Mus8E_EoA_Header:
000EB4C0                            
000EB4C0                            ;	smpsHeaderVoice     Mus8E_EoA_Voices
000EB4C0                            ;	smpsHeaderChan      $06, $03
000EB4C0                            ;	smpsHeaderTempo     $01, $03
000EB4C0 0000                       		dc.w	Mus8E_EoA_Voices-Mus8E_EoA_Header				; Voice list address
000EB4C2 00                         		dc.b	(EoA_DACFM_End-EoA_DACFM)/4		; Number of DAC & FM channels
000EB4C3 00                         		dc.b	(EoA_PSG_End-EoA_PSG)/6			; Number of PSG channels
000EB4C4 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB4C6                            
000EB4C6                            
000EB4C6                            EoA_DACFM:
000EB4C6 0000                       		dc.w	Mus8E_EoA_NO_DAC-Mus8E_EoA_Header				; PCM 1 tracker address
000EB4C8 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB4CA 0000                       		dc.w	Mus8E_EoA_DAC-Mus8E_EoA_Header				; PCM 2 tracker address
000EB4CC 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB4CE 0000                       		dc.w	Mus8E_EoA_FM1-Mus8E_EoA_Header				; FM 1 tracker address
000EB4D0 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB4D2 0000                       		dc.w	Mus8E_EoA_FM2-Mus8E_EoA_Header				; FM 2 tracker address
000EB4D4 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB4D6 0000                       		dc.w	Mus8E_EoA_FM3-Mus8E_EoA_Header				; FM 3 tracker address
000EB4D8 F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB4DA 0000                       		dc.w	Mus8E_EoA_FM4-Mus8E_EoA_Header				; FM 4 tracker address
000EB4DC F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB4DE 0000                       		dc.w	Mus8E_EoA_FM5-Mus8E_EoA_Header				; FM 5 tracker address
000EB4E0 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB4E2                            EoA_DACFM_End:
000EB4E2                            
000EB4E2                            	; --- PSG channels ---
000EB4E2                            
000EB4E2                            EoA_PSG:
000EB4E2 F2                                Halt
000EB4E3                            EoA_PSG_End:
000EB4E3                            Mus8E_EoA_NO_DAC: 
000EB4E3 F520                               dc.b    $F5,$20            ; kick instrument
000EB4E5 B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB4EC                            
000EB4EC                            EoA_Scratch1:	
000EB4EC                            
000EB4EC                            ; FM1 Data
000EB4EC                            Mus8E_EoA_FM1:
000EB4EC F2                                     Halt
000EB4ED                            
000EB4ED                            ; FM2 Data
000EB4ED                            Mus8E_EoA_FM2:
000EB4ED F2                                     Halt
000EB4EE                            
000EB4EE                            ; FM3 Data
000EB4EE                            Mus8E_EoA_FM3:
000EB4EE F2                                     Halt
000EB4EF                            
000EB4EF                            ; FM4 Data
000EB4EF                            Mus8E_EoA_FM4:
000EB4EF F2                                     Halt
000EB4F0                            
000EB4F0                            ; FM5 Data
000EB4F0                            Mus8E_EoA_FM5:
000EB4F0 F2                                     Halt
000EB4F1                            
000EB4F1                            ; PSG1 Data
000EB4F1                            Mus8E_EoA_PSG1:
000EB4F1 F2                                     Halt
000EB4F2                            
000EB4F2                            ; PSG2 Data
000EB4F2                            Mus8E_EoA_PSG2:
000EB4F2 F2                                     Halt
000EB4F3                            
000EB4F3                            ; PSG3 Data
000EB4F3                            Mus8E_EoA_PSG3:
000EB4F3 F2                                     Halt
000EB4F4                            
000EB4F4                            ; DAC Data
000EB4F4                            Mus8E_EoA_DAC:
000EB4F4 F2                         			Halt
000EB4F5                                        
000EB4F5                            
000EB4F5                            Mus8E_EoA_Voices:
000EB4F5 F2                                     Halt
000EB4F5 F2                                     Halt
000EB4F6                            		even
000EB4F6                            Music8F:	include	"sound\Game.asm" ; SCD Game Over
000EB4F6                            ; ---------------------------------------------------------------------------
000EB4F6                            		include	"sound\Macros.asm"
000EB4F6                            ; ===========================================================================
000EB4F6                            ; ---------------------------------------------------------------------------
000EB4F6                            ; Sound Driver Macros
000EB4F6                            ; ---------------------------------------------------------------------------
000EB4F6                            
000EB4F6                            	; --- Equates for the macros ---
000EB4F6                            
000EB4F6 =00000000                  NoSpeakers	=	%00000000
000EB4F6 =00000040                  RightSpeaker	=	%01000000
000EB4F6 =00000080                  LeftSpeaker	=	%10000000
000EB4F6 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EB4F6                            
000EB4F6                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EB4F6                            
000EB4F6 =00000080                  REST		=	$80
000EB4F6 =00000081                  N_S1Kick	=	$81
000EB4F6 =00000082                  N_S1Snare	=	$82
000EB4F6 =00000083                  N_S1Timpani	=	$83
000EB4F6 =00000088                  N_S1TimpHigh	=	$88
000EB4F6 =00000089                  N_S1TimpMid	=	$89
000EB4F6 =0000008A                  N_S1TimpLow	=	$8A
000EB4F6 =0000008B                  N_S1TimpLowest	=	$8B
000EB4F6                            
000EB4F6 =00000001                  C		=	$01
000EB4F6 =00000002                  Cs		=	$02
000EB4F6 =00000003                  D		=	$03
000EB4F6 =00000004                  Eb		=	$04
000EB4F6 =00000005                  E		=	$05
000EB4F6 =00000006                  F		=	$06
000EB4F6 =00000007                  Fs		=	$07
000EB4F6 =00000008                  G		=	$08
000EB4F6 =00000009                  Gs		=	$09
000EB4F6 =0000000A                  A		=	$0A
000EB4F6 =0000000B                  Bb		=	$0B
000EB4F6 =0000000C                  B		=	$0C
000EB4F6                            
000EB4F6 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EB4F6 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EB4F6 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EB4F6 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EB4F6 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EB4F6 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EB4F6 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EB4F6 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EB4F6 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EB4F6 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EB4F6 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EB4F6 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EB4F6                            
000EB4F6 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EB4F6 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EB4F6 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EB4F6 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EB4F6 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EB4F6 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EB4F6 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EB4F6 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EB4F6 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EB4F6 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EB4F6 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EB4F6 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EB4F6                            
000EB4F6 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EB4F6 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EB4F6 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EB4F6 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EB4F6 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EB4F6 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EB4F6 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EB4F6 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EB4F6 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EB4F6 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EB4F6 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EB4F6 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EB4F6                            
000EB4F6 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EB4F6 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EB4F6 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EB4F6 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EB4F6 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EB4F6 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EB4F6 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EB4F6 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EB4F6 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EB4F6 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EB4F6 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EB4F6 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EB4F6                            
000EB4F6 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EB4F6 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EB4F6 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EB4F6 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EB4F6 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EB4F6 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EB4F6 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EB4F6 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EB4F6 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EB4F6 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EB4F6 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EB4F6 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EB4F6                            
000EB4F6 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EB4F6 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EB4F6 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EB4F6 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EB4F6 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EB4F6 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EB4F6 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EB4F6 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EB4F6 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EB4F6 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EB4F6 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EB4F6 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EB4F6                            
000EB4F6 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EB4F6 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EB4F6 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EB4F6 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EB4F6 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EB4F6 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EB4F6 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EB4F6 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EB4F6 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EB4F6 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EB4F6 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EB4F6 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EB4F6                            
000EB4F6 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EB4F6 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EB4F6 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EB4F6 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EB4F6 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EB4F6 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EB4F6 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EB4F6 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EB4F6 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EB4F6 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EB4F6 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EB4F6 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EB4F6                            
000EB4F6                            ; ---------------------------------------------------------------------------
000EB4F6                            ; The actual macros
000EB4F6                            ; ---------------------------------------------------------------------------
000EB4F6                            
000EB4F6                            	; --- Flag E0 - Set panning ---
000EB4F6                            
000EB4F6                            Pan		macro	PanValue
000EB4F6                            		dc.b	$E0,PanValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E1 - Set detune ---
000EB4F6                            
000EB4F6                            Detune		macro	DetuneValue
000EB4F6                            		dc.b	$E1,DetuneValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EB4F6                            
000EB4F6                            UnkFlag		macro	UnkValue
000EB4F6                            		dc.b	$E2,UnkValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E3 - Return ---
000EB4F6                            
000EB4F6                            Return		macro
000EB4F6                            		dc.b	$E3
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EB4F6                            
000EB4F6                            FadeIn		macro
000EB4F6                            		dc.b	$E4
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EB4F6                            
000EB4F6                            TempMul		macro	TempoMultValue
000EB4F6                            		dc.b	$E5,TempoMultValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E6 - Add volume (FM only) ---
000EB4F6                            
000EB4F6                            VolumFM		macro	VolumeValue
000EB4F6                            		dc.b	$E6,VolumeValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EB4F6                            
000EB4F6                            SoftKey		macro
000EB4F6                            		dc.b	$E7
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E8 - Set release key rate counter ---
000EB4F6                            
000EB4F6                            KeyRate		macro	ReleaseValue
000EB4F6                            		dc.b	$E8,ReleaseValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag E9 - Add pitch ---
000EB4F6                            
000EB4F6                            Pitch		macro	PitchValue
000EB4F6                            		dc.b	$E9,PitchValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag EA - Set tempo (for all channels) ---
000EB4F6                            
000EB4F6                            TempSet		macro	TempoSetValue
000EB4F6                            		dc.b	$EA,TempoSetValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EB4F6                            
000EB4F6                            TempAll		macro	TempoAllValue
000EB4F6                            		dc.b	$EB,TempoAllValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EB4F6                            
000EB4F6                            VoluPSG		macro	VolumeValue
000EB4F6                            		dc.b	$EC,VolumeValue
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EB4F6                            
000EB4F6                            ClrBlck		macro
000EB4F6                            		dc.b	$ED
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EB4F6                            
000EB4F6                            StopFM4		macro
000EB4F6                            		dc.b	$EE
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag EF - FM Voice Select ---
000EB4F6                            
000EB4F6                            VoiceFM		macro	VoiceID
000EB4F6                            		dc.b	$EF,VoiceID
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EB4F6                            
000EB4F6                            Modulat		macro	Delay, Speed, Rate, Steps
000EB4F6                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EB4F6                            
000EB4F6                            ModulOn		macro
000EB4F6                            		dc.b	$F1
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F2 - Halt channel ---
000EB4F6                            
000EB4F6                            Halt		macro
000EB4F6                            		dc.b	$F2
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F3 - PSG 4 Control ---
000EB4F6                            
000EB4F6                            SetPSG4		macro	PSG4Value
000EB4F6                            		dc.b	$F3,PSG4Value
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EB4F6                            
000EB4F6                            ModuOff		macro
000EB4F6                            		dc.b	$F4
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EB4F6                            
000EB4F6                            VoicPSG		macro	VoiceID
000EB4F6                            		dc.b	$F5,VoiceID
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F6 - Jump ---
000EB4F6                            
000EB4F6                            Jump		macro	Location
000EB4F6                            		dc.b	$F6
000EB4F6                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB4F6                            		dc.b	(Location-*)&$FF
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F7 - Loop ---
000EB4F6                            
000EB4F6                            Loop		macro	Slot, Count, Location
000EB4F6                            		dc.b	$F7,Slot,Count
000EB4F6                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB4F6                            		dc.b	(Location-*)&$FF
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F8 - Call ---
000EB4F6                            
000EB4F6                            Call		macro	Location
000EB4F6                            		dc.b	$F8
000EB4F6                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EB4F6                            		dc.b	(Location-*)&$FF
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EB4F6                            
000EB4F6                            ForceRR		macro
000EB4F6                            		dc.b	$F9
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            	; --- Flag FA - Reverse PCM ---
000EB4F6                            
000EB4F6                            Reverse		macro
000EB4F6                            		dc.b	$FA
000EB4F6                            		endm
000EB4F6                            
000EB4F6                            ; ===========================================================================
000EB4F6                            ; ===========================================================================
000EB4F6                            ; ---------------------------------------------------------------------------
000EB4F6                            Mus8F_Game_Header:
000EB4F6                            
000EB4F6                            ;	smpsHeaderVoice     Mus8F_Game_Voices
000EB4F6                            ;	smpsHeaderChan      $06, $03
000EB4F6                            ;	smpsHeaderTempo     $01, $03
000EB4F6 0000                       		dc.w	Mus8F_Game_Voices-Mus8F_Game_Header				; Voice list address
000EB4F8 00                         		dc.b	(Game_DACFM_End-Game_DACFM)/4		; Number of DAC & FM channels
000EB4F9 00                         		dc.b	(Game_PSG_End-Game_PSG)/6			; Number of PSG channels
000EB4FA 0104                       		dc.b	$01, $04				; tempo (Multiply, Frame)
000EB4FC                            
000EB4FC                            
000EB4FC                            Game_DACFM:
000EB4FC 0000                       		dc.w	Mus8F_Game_NO_DAC-Mus8F_Game_Header				; PCM 1 tracker address
000EB4FE 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB500 0000                       		dc.w	Mus8F_Game_DAC-Mus8F_Game_Header				; PCM 2 tracker address
000EB502 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EB504 0000                       		dc.w	Mus8F_Game_FM1-Mus8F_Game_Header				; FM 1 tracker address
000EB506 F412                       		dc.b	$F4, $12				; '' (Pitch, Volume)
000EB508 0000                       		dc.w	Mus8F_Game_FM2-Mus8F_Game_Header				; FM 2 tracker address
000EB50A 000B                       		dc.b	$00, $0B				; '' (Pitch, Volume)
000EB50C 0000                       		dc.w	Mus8F_Game_FM3-Mus8F_Game_Header				; FM 3 tracker address
000EB50E F414                       		dc.b	$F4, $14				; '' (Pitch, Volume)
000EB510 0000                       		dc.w	Mus8F_Game_FM4-Mus8F_Game_Header				; FM 4 tracker address
000EB512 F408                       		dc.b	$F4, $08				; '' (Pitch, Volume)
000EB514 0000                       		dc.w	Mus8F_Game_FM5-Mus8F_Game_Header				; FM 5 tracker address
000EB516 F420                       		dc.b	$F4, $20				; '' (Pitch, Volume)
000EB518                            Game_DACFM_End:
000EB518                            
000EB518                            	; --- PSG channels ---
000EB518                            
000EB518                            Game_PSG:
000EB518 F2                                Halt
000EB519                            Game_PSG_End:
000EB519                            Mus8F_Game_NO_DAC: 
000EB519 F521                               dc.b    $F5,$21            ; kick instrument
000EB51B B1E7                               dc.b    $B1,$E7            ; play kick for 8 ticks
000EB522                            
000EB522                            Game_Scratch1:	
000EB522                            
000EB522                            ; FM1 Data
000EB522                            Mus8F_Game_FM1:
000EB522 F2                                     Halt
000EB523                            
000EB523                            ; FM2 Data
000EB523                            Mus8F_Game_FM2:
000EB523 F2                                     Halt
000EB524                            
000EB524                            ; FM3 Data
000EB524                            Mus8F_Game_FM3:
000EB524 F2                                     Halt
000EB525                            
000EB525                            ; FM4 Data
000EB525                            Mus8F_Game_FM4:
000EB525 F2                                     Halt
000EB526                            
000EB526                            ; FM5 Data
000EB526                            Mus8F_Game_FM5:
000EB526 F2                                     Halt
000EB527                            
000EB527                            ; PSG1 Data
000EB527                            Mus8F_Game_PSG1:
000EB527 F2                                     Halt
000EB528                            
000EB528                            ; PSG2 Data
000EB528                            Mus8F_Game_PSG2:
000EB528 F2                                     Halt
000EB529                            
000EB529                            ; PSG3 Data
000EB529                            Mus8F_Game_PSG3:
000EB529 F2                                     Halt
000EB52A                            
000EB52A                            ; DAC Data
000EB52A                            Mus8F_Game_DAC:
000EB52A F2                         			Halt
000EB52B                                        
000EB52B                            
000EB52B                            Mus8F_Game_Voices:
000EB52B F2                                     Halt
000EB52B F2                                     Halt
000EB52C                            		even
000EB52C                            Music90:	incbin	sound\music90.bin ; S1 Continue Theme
000EB6AC 00                         		even
000EB6AC                            Music91:	incbin	sound\music91.bin ; S1 Staff Roll Theme
000ECCD4 00                         		even
000ECCD4                            Music92:	incbin	sound\music92.bin ; S1 Drowning Theme
000ECE1C 00                         		even
000ECE1C                            Music93:	incbin	sound\music93.bin ; S1 Got Emerald Jingle
000ECEF4 00                         		even
000ECEF4                            Music94:	incbin	sound\music94.bin ; S3 Advanced MiniBoss Theme
000EDF04 00                         		even
000EDF04                            Music95:	incbin	sound\music95.bin ; Stardust Speedway Past Theme
000EF36E                            		even
000EF36E                            Music96:	include	sound\music96.asm ; Unknown Track 1
000EF36E                            ; ===========================================================================
000EF36E                            ; ---------------------------------------------------------------------------
000EF36E                            ; Music 96
000EF36E                            ; ---------------------------------------------------------------------------
000EF36E                            		include	"sound\Macros.asm"
000EF36E                            ; ===========================================================================
000EF36E                            ; ---------------------------------------------------------------------------
000EF36E                            ; Sound Driver Macros
000EF36E                            ; ---------------------------------------------------------------------------
000EF36E                            
000EF36E                            	; --- Equates for the macros ---
000EF36E                            
000EF36E =00000000                  NoSpeakers	=	%00000000
000EF36E =00000040                  RightSpeaker	=	%01000000
000EF36E =00000080                  LeftSpeaker	=	%10000000
000EF36E =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EF36E                            
000EF36E                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EF36E                            
000EF36E =00000080                  REST		=	$80
000EF36E =00000081                  N_S1Kick	=	$81
000EF36E =00000082                  N_S1Snare	=	$82
000EF36E =00000083                  N_S1Timpani	=	$83
000EF36E =00000088                  N_S1TimpHigh	=	$88
000EF36E =00000089                  N_S1TimpMid	=	$89
000EF36E =0000008A                  N_S1TimpLow	=	$8A
000EF36E =0000008B                  N_S1TimpLowest	=	$8B
000EF36E                            
000EF36E =00000001                  C		=	$01
000EF36E =00000002                  Cs		=	$02
000EF36E =00000003                  D		=	$03
000EF36E =00000004                  Eb		=	$04
000EF36E =00000005                  E		=	$05
000EF36E =00000006                  F		=	$06
000EF36E =00000007                  Fs		=	$07
000EF36E =00000008                  G		=	$08
000EF36E =00000009                  Gs		=	$09
000EF36E =0000000A                  A		=	$0A
000EF36E =0000000B                  Bb		=	$0B
000EF36E =0000000C                  B		=	$0C
000EF36E                            
000EF36E =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EF36E =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EF36E =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EF36E =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EF36E =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EF36E =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EF36E =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EF36E =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EF36E =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EF36E =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EF36E =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EF36E =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EF36E                            
000EF36E =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EF36E =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EF36E =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EF36E =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EF36E =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EF36E =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EF36E =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EF36E =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EF36E =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EF36E =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EF36E =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EF36E =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EF36E                            
000EF36E =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EF36E =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EF36E =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EF36E =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EF36E =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EF36E =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EF36E =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EF36E =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EF36E =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EF36E =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EF36E =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EF36E =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EF36E                            
000EF36E =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EF36E =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EF36E =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EF36E =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EF36E =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EF36E =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EF36E =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EF36E =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EF36E =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EF36E =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EF36E =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EF36E =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EF36E                            
000EF36E =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EF36E =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EF36E =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EF36E =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EF36E =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EF36E =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EF36E =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EF36E =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EF36E =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EF36E =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EF36E =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EF36E =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EF36E                            
000EF36E =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EF36E =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EF36E =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EF36E =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EF36E =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EF36E =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EF36E =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EF36E =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EF36E =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EF36E =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EF36E =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EF36E =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EF36E                            
000EF36E =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EF36E =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EF36E =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EF36E =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EF36E =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EF36E =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EF36E =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EF36E =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EF36E =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EF36E =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EF36E =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EF36E =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EF36E                            
000EF36E =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EF36E =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EF36E =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EF36E =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EF36E =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EF36E =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EF36E =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EF36E =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EF36E =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EF36E =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EF36E =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EF36E =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EF36E                            
000EF36E                            ; ---------------------------------------------------------------------------
000EF36E                            ; The actual macros
000EF36E                            ; ---------------------------------------------------------------------------
000EF36E                            
000EF36E                            	; --- Flag E0 - Set panning ---
000EF36E                            
000EF36E                            Pan		macro	PanValue
000EF36E                            		dc.b	$E0,PanValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E1 - Set detune ---
000EF36E                            
000EF36E                            Detune		macro	DetuneValue
000EF36E                            		dc.b	$E1,DetuneValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EF36E                            
000EF36E                            UnkFlag		macro	UnkValue
000EF36E                            		dc.b	$E2,UnkValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E3 - Return ---
000EF36E                            
000EF36E                            Return		macro
000EF36E                            		dc.b	$E3
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EF36E                            
000EF36E                            FadeIn		macro
000EF36E                            		dc.b	$E4
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EF36E                            
000EF36E                            TempMul		macro	TempoMultValue
000EF36E                            		dc.b	$E5,TempoMultValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E6 - Add volume (FM only) ---
000EF36E                            
000EF36E                            VolumFM		macro	VolumeValue
000EF36E                            		dc.b	$E6,VolumeValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EF36E                            
000EF36E                            SoftKey		macro
000EF36E                            		dc.b	$E7
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E8 - Set release key rate counter ---
000EF36E                            
000EF36E                            KeyRate		macro	ReleaseValue
000EF36E                            		dc.b	$E8,ReleaseValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag E9 - Add pitch ---
000EF36E                            
000EF36E                            Pitch		macro	PitchValue
000EF36E                            		dc.b	$E9,PitchValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag EA - Set tempo (for all channels) ---
000EF36E                            
000EF36E                            TempSet		macro	TempoSetValue
000EF36E                            		dc.b	$EA,TempoSetValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EF36E                            
000EF36E                            TempAll		macro	TempoAllValue
000EF36E                            		dc.b	$EB,TempoAllValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EF36E                            
000EF36E                            VoluPSG		macro	VolumeValue
000EF36E                            		dc.b	$EC,VolumeValue
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EF36E                            
000EF36E                            ClrBlck		macro
000EF36E                            		dc.b	$ED
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EF36E                            
000EF36E                            StopFM4		macro
000EF36E                            		dc.b	$EE
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag EF - FM Voice Select ---
000EF36E                            
000EF36E                            VoiceFM		macro	VoiceID
000EF36E                            		dc.b	$EF,VoiceID
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EF36E                            
000EF36E                            Modulat		macro	Delay, Speed, Rate, Steps
000EF36E                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EF36E                            
000EF36E                            ModulOn		macro
000EF36E                            		dc.b	$F1
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F2 - Halt channel ---
000EF36E                            
000EF36E                            Halt		macro
000EF36E                            		dc.b	$F2
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F3 - PSG 4 Control ---
000EF36E                            
000EF36E                            SetPSG4		macro	PSG4Value
000EF36E                            		dc.b	$F3,PSG4Value
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EF36E                            
000EF36E                            ModuOff		macro
000EF36E                            		dc.b	$F4
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EF36E                            
000EF36E                            VoicPSG		macro	VoiceID
000EF36E                            		dc.b	$F5,VoiceID
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F6 - Jump ---
000EF36E                            
000EF36E                            Jump		macro	Location
000EF36E                            		dc.b	$F6
000EF36E                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EF36E                            		dc.b	(Location-*)&$FF
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F7 - Loop ---
000EF36E                            
000EF36E                            Loop		macro	Slot, Count, Location
000EF36E                            		dc.b	$F7,Slot,Count
000EF36E                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EF36E                            		dc.b	(Location-*)&$FF
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F8 - Call ---
000EF36E                            
000EF36E                            Call		macro	Location
000EF36E                            		dc.b	$F8
000EF36E                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EF36E                            		dc.b	(Location-*)&$FF
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EF36E                            
000EF36E                            ForceRR		macro
000EF36E                            		dc.b	$F9
000EF36E                            		endm
000EF36E                            
000EF36E                            	; --- Flag FA - Reverse PCM ---
000EF36E                            
000EF36E                            Reverse		macro
000EF36E                            		dc.b	$FA
000EF36E                            		endm
000EF36E                            
000EF36E                            ; ===========================================================================
000EF36E                            ; ===========================================================================
000EF36E                            ; ---------------------------------------------------------------------------
000EF36E                            
000EF36E 0000                       M96:		dc.w	M96_VoiceFM-M96				; Voice list address
000EF370 00                         		dc.b	(M96_DACFM_End-M96_DACFM)/4		; Number of DAC & FM channels
000EF371 00                         		dc.b	(M96_PSG_End-M96_PSG)/6			; Number of PSG channels
000EF372 0108                       		dc.b	$01, $08				; tempo (Multiply, Frame)
000EF374                            
000EF374                            	; --- PCM & FM channels ---
000EF374                            
000EF374                            M96_DACFM:
000EF374 0000                       		dc.w	M96_PCM1-M96				; PCM 1 tracker address
000EF376 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF378 0000                       		dc.w	M96_PCM2-M96				; PCM 2 tracker address
000EF37A 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF37C 0000                       		dc.w	M96_FM1-M96				; FM 1 tracker address
000EF37E 000A                       		dc.b	$00, $0A				; '' (Pitch, Volume)
000EF380 0000                       		dc.w	M96_FM2-M96				; FM 2 tracker address
000EF382 000C                       		dc.b	$00, $0C				; '' (Pitch, Volume)
000EF384 0000                       		dc.w	M96_FM3-M96				; FM 3 tracker address
000EF386 000C                       		dc.b	$00, $0C				; '' (Pitch, Volume)
000EF388 0000                       		dc.w	M96_FM4-M96				; FM 4 tracker address
000EF38A 000C                       		dc.b	$00, $0C				; '' (Pitch, Volume)
000EF38C 0000                       		dc.w	M96_FM5-M96				; FM 5 tracker address
000EF38E 000A                       		dc.b	$00, $0A				; '' (Pitch, Volume)
000EF390                            M96_DACFM_End:
000EF390                            
000EF390                            	; --- PSG channels ---
000EF390                            
000EF390                            M96_PSG:
000EF390 0000                       		dc.w	M96_PSG1-M96				; PSG 1 tracker address
000EF392 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF394 0000                       		dc.w	$0000					; '' (Starting tone)
000EF396 0000                       		dc.w	M96_PSG2-M96				; PSG 2 tracker address
000EF398 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF39A 0000                       		dc.w	$0000					; '' (Starting tone)
000EF39C 0000                       		dc.w	M96_PSG3-M96				; PSG 3 tracker address
000EF39E 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF3A0 0000                       		dc.w	$0000					; '' (Starting tone)
000EF3A2                            M96_PSG_End:
000EF3A2                            
000EF3A2                            ; ===========================================================================
000EF3A2                            ; ---------------------------------------------------------------------------
000EF3A2                            ; FM Voices
000EF3A2                            ; ---------------------------------------------------------------------------
000EF3A2                            
000EF3A2                            M96_VoiceFM:
000EF3A2 3A                         		dc.b	$3A
000EF3A3 613C 1430 9CDB 9CDA 0409+  		dc.b	$61,$3C,$14,$30, $9C,$DB,$9C,$DA, $04,$09,$04,$03
000EF3AF 0301 0300 1F0F 0FAF 2147+  		dc.b	$03,$01,$03,$00, $1F,$0F,$0F,$AF, $21,$47,$31,$80
000EF3BB                            
000EF3BB 05                         		dc.b	$05
000EF3BC 7432 3674 1010 1010 0404+  		dc.b	$74,$32,$36,$74, $10,$10,$10,$10, $04,$04,$04,$04
000EF3C8 0D04 0D04 755F 455F 4084+  		dc.b	$0D,$04,$0D,$04, $75,$5F,$45,$5F, $40,$84,$20,$8E
000EF3D4                            
000EF3D4 02                         		dc.b	$02
000EF3D5 7131 7130 8A8A 8A1F 0000+  		dc.b	$71,$31,$71,$30, $8A,$8A,$8A,$1F, $00,$00,$00,$00
000EF3E1 0000 0000 FFFF FF0F 1C20+  		dc.b	$00,$00,$00,$00, $FF,$FF,$FF,$0F, $1C,$20,$14,$80
000EF3ED                            
000EF3ED                            ; ===========================================================================
000EF3ED                            ; ---------------------------------------------------------------------------
000EF3ED                            ; PSG 1
000EF3ED                            ; ---------------------------------------------------------------------------
000EF3ED                            
000EF3ED                            M96_PSG2:
000EF3ED EC02                       		VoluPSG	$02
000EF3EF 8008                       		dc.b	$80,$08
000EF3F1                            
000EF3F1                            M96_PSG3:
000EF3F1 E1FF                       		Detune	$FF
000EF3F3                            
000EF3F3                            M96_PSG1:
000EF3F3 8040                       		dc.b	$80,$40
000EF3F5 F700 2DFF FA               		Loop	$00,$2D,M96_PSG1
000EF3FA                            
000EF3FA F504                       		VoicPSG	$04
000EF3FC EC08                       		VoluPSG	$08
000EF3FE E9FA                       		Pitch	$FA
000EF400                            
000EF400                            M96_PSG1_MegaLoop:
000EF400 F800 00                    		Call	M96_PSG1_Loop01
000EF403                            
000EF403 8050 40                    		dc.b	$80,$50,$40
000EF406                            
000EF406                            M96_PSG1_PauseLoop:
000EF406 60                         		dc.b	$60
000EF407 F700 28FF FB               		Loop	$00,$0A*4,M96_PSG1_PauseLoop
000EF40C 4040 4040                  		dc.b	$40,$40,$40,$40
000EF410                            
000EF410 F800 00                    		Call	M96_PSG1_Loop01
000EF413                            
000EF413                            M96_PSG1_PauseLoop2:
000EF413 8040                       		dc.b	$80,$40
000EF415 F700 20FF FA               		Loop	$00,$20,M96_PSG1_PauseLoop2
000EF41A                            
000EF41A F6FF E4                    		Jump	M96_PSG1_MegaLoop
000EF41D                            
000EF41D                            ; ---------------------------------------------------------------------------
000EF41D                            ; PSG twinkling sounds
000EF41D                            ; ---------------------------------------------------------------------------
000EF41D                            
000EF41D                            M96_PSG1_Loop01:
000EF41D ECFF                       		VoluPSG	$FF
000EF41F AA04 ADB1 B6               		dc.b	$AA,$04,$AD,$B1,$B6
000EF424 B1AD AAA8                  		dc.b	$B1,$AD,$AA,$A8
000EF428 F700 04FF F1               		Loop	$00,$04,M96_PSG1_Loop01
000EF42D                            
000EF42D                            M96_PSG1_Loop02:
000EF42D EC01                       		VoluPSG	$01
000EF42F AA04 ADB1 B6               		dc.b	$AA,$04,$AD,$B1,$B6
000EF434 B1AD AAA8                  		dc.b	$B1,$AD,$AA,$A8
000EF438 F700 04FF F1               		Loop	$00,$04,M96_PSG1_Loop02
000EF43D E9FE                       		Pitch	$FE
000EF43F F701 02FF DA               		Loop	$01,$02,M96_PSG1_Loop01
000EF444 E904                       		Pitch	$04
000EF446 F702 03FF D3               		Loop	$02,$03,M96_PSG1_Loop01
000EF44B E3                         		Return
000EF44C                            
000EF44C                            ; ===========================================================================
000EF44C                            ; ---------------------------------------------------------------------------
000EF44C                            ; FM 1
000EF44C                            ; ---------------------------------------------------------------------------
000EF44C                            
000EF44C                            M96_FM5:
000EF44C E1FC                       		Detune	$FC
000EF44E                            
000EF44E                            M96_FM1:
000EF44E 8040                       		dc.b	$80,$40
000EF450 F700 09FF FA               		Loop	$00,$09,M96_FM1
000EF455 EF00                       		VoiceFM	$00
000EF457 F000 01FC FF               		Modulat	$00,$01,$FC,$FF
000EF45C A060                       		dc.b	$A0,$60
000EF45E 8060 40                    		dc.b	$80,$60,$40
000EF461                            
000EF461                            	; --- Normal bass ---
000EF461                            
000EF461                            M96_FM1_MegaLoop:
000EF461                            
000EF461                            M96_FM1_Loop01:
000EF461 A018                       		dc.b	$A0,$18
000EF463 A818                       		dc.b	$A8,$18
000EF465 A430                       		dc.b	$A4,$30
000EF467 F4                         		ModuOff
000EF468 A010                       		dc.b	$A0,$10
000EF46A 9C50                       		dc.b	$9C,$50
000EF46C A808                       		dc.b	$A8,$08
000EF46E A408                       		dc.b	$A4,$08
000EF470 F1                         		ModulOn
000EF471 A030                       		dc.b	$A0,$30
000EF473 F700 08FF EA               		Loop	$00,$08,M96_FM1_Loop01
000EF478 F600 00                    		Jump	M96_FM1_Loop02_Start
000EF47B                            
000EF47B                            M96_FM1_Loop02:
000EF47B 04                         		dc.b	$04
000EF47C                            
000EF47C                            M96_FM1_Loop02_Start:
000EF47C 8040 4040 40               		dc.b	$80,$40,$40,$40,$40
000EF481 A060                       		dc.b	$A0,$60
000EF483 8060 3C                    		dc.b	$80,$60,$40-$04
000EF486 F700 03FF F1               		Loop	$00,$03,M96_FM1_Loop02
000EF48B                            
000EF48B                            	; --- Subwoofer bass section ---
000EF48B                            
000EF48B F800 00                    		Call	M96_FM_Subwoofer
000EF48E                            
000EF48E                            	; --- Bass crash ---
000EF48E                            
000EF48E 8068                       		dc.b	$80,$68
000EF490 EF00                       		VoiceFM	$00
000EF492 F000 01FC FF               		Modulat	$00,$01,$FC,$FF
000EF497 A028                       		dc.b	$A0,$28
000EF499                            
000EF499                            	; --- Normal bass again ---
000EF499                            
000EF499                            M96_FM1_Loop04:
000EF499 A018                       		dc.b	$A0,$18
000EF49B A818                       		dc.b	$A8,$18
000EF49D A430                       		dc.b	$A4,$30
000EF49F F4                         		ModuOff
000EF4A0 A010                       		dc.b	$A0,$10
000EF4A2 9C50                       		dc.b	$9C,$50
000EF4A4 A808                       		dc.b	$A8,$08
000EF4A6 A408                       		dc.b	$A4,$08
000EF4A8 F1                         		ModulOn
000EF4A9 A030                       		dc.b	$A0,$30
000EF4AB F700 06FF EA               		Loop	$00,$06,M96_FM1_Loop04
000EF4B0                            
000EF4B0 8060 6060 6060             		dc.b	$80,$60,$60,$60,$60,$60
000EF4B6 1C                         		dc.b	$20-$04
000EF4B7                            
000EF4B7                            	; --- Subwoofer bass section again ---
000EF4B7                            
000EF4B7 F800 00                    		Call	M96_FM_Subwoofer
000EF4BA                            
000EF4BA EF00                       		VoiceFM	$00
000EF4BC F000 01FC FF               		Modulat	$00,$01,$FC,$FF
000EF4C1                            
000EF4C1                            M96_FM1_Loop05:
000EF4C1 8040 4040 40               		dc.b	$80,$40,$40,$40,$40
000EF4C6 A060                       		dc.b	$A0,$60
000EF4C8 8060 40                    		dc.b	$80,$60,$40
000EF4CB F700 03FF F2               		Loop	$00,$03,M96_FM1_Loop05
000EF4D0                            
000EF4D0 F6FF 8F                    		Jump	M96_FM1_MegaLoop
000EF4D3                            
000EF4D3                            ; ---------------------------------------------------------------------------
000EF4D3                            ; Subwoofer bass section (ensure the tracker is -$04 on the timer before calling)
000EF4D3                            ; ---------------------------------------------------------------------------
000EF4D3                            
000EF4D3                            M96_FM_Subwoofer:
000EF4D3 F4                         		ModuOff
000EF4D4 E608                       		VolumFM	$08
000EF4D6 EF02                       		VoiceFM	$02
000EF4D8 F000 01FC 60               		Modulat	$00,$01,$FC,$60
000EF4DD                            
000EF4DD                            M96_FM1_Loop03:
000EF4DD A417 8001                  		dc.b	$A4,$18-1,$80,$01
000EF4E1 A017 8001                  		dc.b	$A0,$18-1,$80,$01
000EF4E5 F1                         		ModulOn
000EF4E6 9C4F 8001                  		dc.b	$9C,$50-1,$80,$01
000EF4EA F4                         		ModuOff
000EF4EB 9817 8001                  		dc.b	$98,$18-1,$80,$01
000EF4EF 9C17 8001                  		dc.b	$9C,$18-1,$80,$01
000EF4F3 F1                         		ModulOn
000EF4F4 A04F 8001                  		dc.b	$A0,$50-1,$80,$01
000EF4F8 F4                         		ModuOff
000EF4F9 E902                       		Pitch	$02
000EF4FB A417 8001                  		dc.b	$A4,$18-1,$80,$01
000EF4FF A017 8001                  		dc.b	$A0,$18-1,$80,$01
000EF503 F1                         		ModulOn
000EF504 9C4F 8001                  		dc.b	$9C,$50-1,$80,$01
000EF508 F4                         		ModuOff
000EF509 9817 8001                  		dc.b	$98,$18-1,$80,$01
000EF50D 9C17 8001                  		dc.b	$9C,$18-1,$80,$01
000EF511 F1                         		ModulOn
000EF512 A04F 8001                  		dc.b	$A0,$50-1,$80,$01
000EF516 F4                         		ModuOff
000EF517 E9FE                       		Pitch	$FE
000EF519 F700 02FF C0               		Loop	$00,$02,M96_FM1_Loop03
000EF51E 8004                       		dc.b	$80,$04
000EF520 E6F8                       		VolumFM	$F8
000EF522 E3                         		Return
000EF523                            
000EF523                            ; ===========================================================================
000EF523                            ; ---------------------------------------------------------------------------
000EF523                            ; FM 2
000EF523                            ; ---------------------------------------------------------------------------
000EF523                            
000EF523                            M96_FM4:
000EF523 E606                       		VolumFM	$06
000EF525 E080                       		Pan	$80
000EF527 E108                       		Detune	$08
000EF529 8008                       		dc.b	$80,$08
000EF52B F600 00                    		Jump	M96_FM2
000EF52E                            
000EF52E                            M96_FM3:
000EF52E E603                       		VolumFM	$03
000EF530 E040                       		Pan	$40
000EF532 E104                       		Detune	$04
000EF534 8004                       		dc.b	$80,$04
000EF536                            
000EF536                            M96_FM2:
000EF536 8040                       		dc.b	$80,$40
000EF538 F700 1DFF FA               		Loop	$00,$1D,M96_FM2
000EF53D                            
000EF53D                            	; --- Computer bleeps section ---
000EF53D                            
000EF53D EF01                       		VoiceFM	$01
000EF53F                            
000EF53F                            M96_FM2_MegaLoop:
000EF53F                            
000EF53F                            M96_FM2_Loop02:
000EF53F F800 00                    		Call	M96_FM_Computer
000EF542 E9FE                       		Pitch	$FE
000EF544 F800 00                    		Call	M96_FM_Computer
000EF547 E902                       		Pitch	$02
000EF549 F701 02FF F2               		Loop	$01,$02,M96_FM2_Loop02
000EF54E                            
000EF54E                            M96_FM2_Loop03:
000EF54E 8040                       		dc.b	$80,$40
000EF550 F700 20FF FA               		Loop	$00,$20,M96_FM2_Loop03
000EF555                            
000EF555                            	; --- Computer bleeps distanced ---
000EF555                            
000EF555 E902                       		Pitch	$02
000EF557                            
000EF557                            M96_FM2_Loop04:
000EF557 F800 00                    		Call	M96_FM_Computer
000EF55A 8040 40                    		dc.b	$80,$40,$40
000EF55D E902                       		Pitch	$02
000EF55F F800 00                    		Call	M96_FM_Computer
000EF562 8040 40                    		dc.b	$80,$40,$40
000EF565 E9FE                       		Pitch	$FE
000EF567 F701 02FF EC               		Loop	$01,$02,M96_FM2_Loop04
000EF56C E9FE                       		Pitch	$FE
000EF56E                            
000EF56E                            	; --- Computer bleeps section again ---
000EF56E                            
000EF56E 807F 11                    		dc.b	$80,$80-1,$10+1
000EF571                            
000EF571                            M96_FM2_PauseLoop:
000EF571 40                         		dc.b	$40
000EF572 F700 08FF FB               		Loop	$00,$08,M96_FM2_PauseLoop
000EF577                            
000EF577                            M96_FM2_Loop05:
000EF577 F800 00                    		Call	M96_FM_Computer
000EF57A E9FE                       		Pitch	$FE
000EF57C F800 00                    		Call	M96_FM_Computer
000EF57F E902                       		Pitch	$02
000EF581 F800 00                    		Call	M96_FM_Computer
000EF584 E903                       		Pitch	$03
000EF586 F800 00                    		Call	M96_FM_Computer
000EF589 E9FD                       		Pitch	$FD
000EF58B F701 02FF E8               		Loop	$01,$02,M96_FM2_Loop05
000EF590                            
000EF590 8060 6060 6060 20          		dc.b	$80,$60,$60,$60,$60,$60,$20
000EF597                            
000EF597                            	; --- Computer bleeps distanced ---
000EF597                            
000EF597 E902                       		Pitch	$02
000EF599                            
000EF599                            M96_FM2_Loop06:
000EF599 F800 00                    		Call	M96_FM_Computer
000EF59C 8040 40                    		dc.b	$80,$40,$40
000EF59F E902                       		Pitch	$02
000EF5A1 F800 00                    		Call	M96_FM_Computer
000EF5A4 8040 40                    		dc.b	$80,$40,$40
000EF5A7 E9FE                       		Pitch	$FE
000EF5A9 F701 02FF EC               		Loop	$01,$02,M96_FM2_Loop06
000EF5AE E9FE                       		Pitch	$FE
000EF5B0                            
000EF5B0                            M96_FM2_PauseLoop2:
000EF5B0 40                         		dc.b	$40
000EF5B1 F700 28FF FB               		Loop	$00,$28,M96_FM2_PauseLoop2
000EF5B6                            
000EF5B6 F6FF 87                    		Jump	M96_FM2_MegaLoop
000EF5B9                            
000EF5B9                            ; ---------------------------------------------------------------------------
000EF5B9                            ; Computer sound loop
000EF5B9                            ; ---------------------------------------------------------------------------
000EF5B9                            
000EF5B9                            M96_FM_Computer:
000EF5B9 AA04 ADB1 B6               		dc.b	$AA,$04,$AD,$B1,$B6
000EF5BE E604                       		VolumFM	$04
000EF5C0 AA04 ADB1 B6               		dc.b	$AA,$04,$AD,$B1,$B6
000EF5C5 E604                       		VolumFM	$04
000EF5C7 F700 03FF EE               		Loop	$00,$03,M96_FM_Computer
000EF5CC AA04 ADB1 B6               		dc.b	$AA,$04,$AD,$B1,$B6
000EF5D1 E604                       		VolumFM	$04
000EF5D3 AA04 ADB1 80               		dc.b	$AA,$04,$AD,$B1,$80
000EF5D8 E6E4                       		VolumFM	$E4
000EF5DA E3                         		Return
000EF5DB                            
000EF5DB                            ; ===========================================================================
000EF5DB                            ; ---------------------------------------------------------------------------
000EF5DB                            ; PCM 1
000EF5DB                            ; ---------------------------------------------------------------------------
000EF5DB                            
000EF5DB                            M96_PCM1:
000EF5DB                            
000EF5DB                            	; --- Intro Synth ---
000EF5DB                            
000EF5DB E101                       		Detune	$01
000EF5DD F800 00                    		Call	M96_PCM_SynthIntro
000EF5E0 EC10                       		VoluPSG	$10
000EF5E2 E7                         		SoftKey
000EF5E3 AB10                       		dc.b	$AB,$10
000EF5E5 EC10                       		VoluPSG	$10
000EF5E7 E7                         		SoftKey
000EF5E8 10                         		dc.b	$10
000EF5E9 EC10                       		VoluPSG	$10
000EF5EB E7                         		SoftKey
000EF5EC 10                         		dc.b	$10
000EF5ED EC10                       		VoluPSG	$10
000EF5EF E7                         		SoftKey
000EF5F0 10                         		dc.b	$10
000EF5F1 ECC0                       		VoluPSG	$C0
000EF5F3 E100                       		Detune	$00
000EF5F5                            
000EF5F5                            	; --- Intro Vocals ---
000EF5F5                            
000EF5F5 F800 00                    		Call	M96_PCM_DreadEcho
000EF5F8 F800 00                    		Call	M96_PCM_SnareEcho
000EF5FB F800 00                    		Call	M96_PCM_DreadControl
000EF5FE                            
000EF5FE                            	; --- Small snares ---
000EF5FE                            
000EF5FE                            M96_PCM1_MegaLoop:
000EF5FE                            
000EF5FE                            M96_PCM1_Loop01:
000EF5FE 8040                       		dc.b	$80,$40
000EF600 F700 07FF FA               		Loop	$00,$07,M96_PCM1_Loop01
000EF605 F800 00                    		Call	M96_PCM_QuickSnares
000EF608                            
000EF608                            	; --- Synth Backgrounds ---
000EF608                            
000EF608 F020 02FF FF               		Modulat	$20,$02,$FF,$FF
000EF60D F4                         		ModuOff
000EF60E                            
000EF60E                            M96_PCM1_Loop02:
000EF60E F529                       		VoicPSG	$29
000EF610 B140                       		dc.b	$B1,$40
000EF612 F1                         		ModulOn
000EF613 E7                         		SoftKey
000EF614 40                         		dc.b	$40
000EF615 F4                         		ModuOff
000EF616 E7                         		SoftKey
000EF617 AF40                       		dc.b	$AF,$40
000EF619 E7                         		SoftKey
000EF61A 28                         		dc.b	$28
000EF61B F52A                       		VoicPSG	$2A
000EF61D 18                         		dc.b	$18
000EF61E F700 04FF EC               		Loop	$00,$04,M96_PCM1_Loop02
000EF623                            
000EF623                            	; --- Vocal section ---
000EF623                            
000EF623 F800 00                    		Call	M96_PCM_DreadEcho_Short
000EF626 8008                       		dc.b	$80,$08
000EF628 F52E                       		VoicPSG	$2E
000EF62A B14A                       		dc.b	$B1,$4A
000EF62C F52F                       		VoicPSG	$2F
000EF62E EC10                       		VoluPSG	$10
000EF630 10                         		dc.b	$10
000EF631 EC14                       		VoluPSG	$14
000EF633 10                         		dc.b	$10
000EF634 EC18                       		VoluPSG	$18
000EF636 10                         		dc.b	$10
000EF637 EC1C                       		VoluPSG	$1C
000EF639 06                         		dc.b	$06
000EF63A ECA8                       		VoluPSG	$A8
000EF63C                            
000EF63C 8040 4040                  		dc.b	$80,$40,$40,$40
000EF640 F800 00                    		Call	M96_PCM_QuickSnares
000EF643                            
000EF643                            	; --- Idle drums section ---
000EF643                            
000EF643                            M96_PCM1_Loop03:
000EF643 8040                       		dc.b	$80,$40
000EF645 F700 07FF FA               		Loop	$00,$07,M96_PCM1_Loop03
000EF64A F800 00                    		Call	M96_PCM_QuickSnares
000EF64D                            
000EF64D                            	; --- Soft Synth area ---
000EF64D                            
000EF64D F528                       		VoicPSG	$28
000EF64F                            
000EF64F                            M96_PCM1_Loop04:
000EF64F AC40                       		dc.b	$AC,$40
000EF651 E7                         		SoftKey
000EF652 40                         		dc.b	$40
000EF653 E7                         		SoftKey
000EF654 40                         		dc.b	$40
000EF655 E7                         		SoftKey
000EF656 20                         		dc.b	$20
000EF657 EC10                       		VoluPSG	$10
000EF659 E7                         		SoftKey
000EF65A 10                         		dc.b	$10
000EF65B EC10                       		VoluPSG	$10
000EF65D E7                         		SoftKey
000EF65E 10                         		dc.b	$10
000EF65F ECE0                       		VoluPSG	$E0
000EF661 E9FE                       		Pitch	$FE
000EF663 F700 02FF E8               		Loop	$00,$02,M96_PCM1_Loop04
000EF668 E904                       		Pitch	$04
000EF66A F701 02FF E1               		Loop	$01,$02,M96_PCM1_Loop04
000EF66F                            
000EF66F                            	; --- Echo drum section ---
000EF66F                            
000EF66F                            M96_PCM1_Loop05:
000EF66F EC0C                       		VoluPSG	$0C
000EF671 8004                       		dc.b	$80,$04
000EF673 F800 00                    		Call	M96_PCM_AmenLoop01_Crash
000EF676 F800 00                    		Call	M96_PCM_AmenLoop03
000EF679 F800 00                    		Call	M96_PCM_AmenLoop01
000EF67C F800 00                    		Call	M96_PCM_AmenLoop02
000EF67F F800 00                    		Call	M96_PCM_AmenLoop01
000EF682 F800 00                    		Call	M96_PCM_AmenLoop03
000EF685 F800 00                    		Call	M96_PCM_AmenLoop01
000EF688 F520                       		VoicPSG	$20
000EF68A AF08 B2                    		dc.b	$AF,$08,$B2
000EF68D F522                       		VoicPSG	$22
000EF68F B4                         		dc.b	$B4
000EF690 F520                       		VoicPSG	$20
000EF692 AE04                       		dc.b	$AE,$04
000EF694 ECF4                       		VoluPSG	$F4
000EF696 F522                       		VoicPSG	$22
000EF698 B104                       		dc.b	$B1,$04
000EF69A B104                       		dc.b	$B1,$04
000EF69C B104                       		dc.b	$B1,$04
000EF69E B204                       		dc.b	$B2,$04
000EF6A0 B202                       		dc.b	$B2,$02
000EF6A2 B202                       		dc.b	$B2,$02
000EF6A4 B302                       		dc.b	$B3,$02
000EF6A6 B302                       		dc.b	$B3,$02
000EF6A8 B402                       		dc.b	$B4,$02
000EF6AA B402                       		dc.b	$B4,$02
000EF6AC B502                       		dc.b	$B5,$02
000EF6AE B602                       		dc.b	$B6,$02
000EF6B0 F700 02FF BB               		Loop	$00,$02,M96_PCM1_Loop05
000EF6B5                            
000EF6B5                            	; --- Crash break ---
000EF6B5                            
000EF6B5 F531                       		VoicPSG	$31
000EF6B7 AC7F                       		dc.b	$AC,$80-1
000EF6B9 8011                       		dc.b	$80,$10+1
000EF6BB                            
000EF6BB                            	; --- Synth Backgrounds again ---
000EF6BB                            
000EF6BB                            
000EF6BB                            M96_PCM1_Loop06:
000EF6BB F020 02FF FF               		Modulat	$20,$02,$FF,$FF
000EF6C0 F4                         		ModuOff
000EF6C1 F529                       		VoicPSG	$29
000EF6C3 B140                       		dc.b	$B1,$40
000EF6C5 F1                         		ModulOn
000EF6C6 E7                         		SoftKey
000EF6C7 40                         		dc.b	$40
000EF6C8 F4                         		ModuOff
000EF6C9 E7                         		SoftKey
000EF6CA AF40                       		dc.b	$AF,$40
000EF6CC E7                         		SoftKey
000EF6CD 28                         		dc.b	$28
000EF6CE F52A                       		VoicPSG	$2A
000EF6D0 18                         		dc.b	$18
000EF6D1                            
000EF6D1 F020 0202 FF               		Modulat	$20,$02,$02,$FF
000EF6D6 F4                         		ModuOff
000EF6D7 F529                       		VoicPSG	$29
000EF6D9 B140                       		dc.b	$B1,$40
000EF6DB F1                         		ModulOn
000EF6DC E7                         		SoftKey
000EF6DD 40                         		dc.b	$40
000EF6DE F4                         		ModuOff
000EF6DF E7                         		SoftKey
000EF6E0 B440                       		dc.b	$B4,$40
000EF6E2 E7                         		SoftKey
000EF6E3 28                         		dc.b	$28
000EF6E4 F52A                       		VoicPSG	$2A
000EF6E6 18                         		dc.b	$18
000EF6E7 F700 04FF D0               		Loop	$00,$04,M96_PCM1_Loop06
000EF6EC                            
000EF6EC                            	; --- Idle drum section ---
000EF6EC                            
000EF6EC                            M96_PCM1_Loop06_2:
000EF6EC 8040                       		dc.b	$80,$40
000EF6EE F700 07FF FA               		Loop	$00,$07,M96_PCM1_Loop06_2
000EF6F3 F800 00                    		Call	M96_PCM_QuickSnares
000EF6F6                            
000EF6F6                            M96_PCM1_Loop06_3:
000EF6F6 8040                       		dc.b	$80,$40
000EF6F8 F700 07FF FA               		Loop	$00,$07,M96_PCM1_Loop06_3
000EF6FD 20                         		dc.b	$20
000EF6FE F522                       		VoicPSG	$22
000EF700 B104                       		dc.b	$B1,$04
000EF702 B104                       		dc.b	$B1,$04
000EF704 B104                       		dc.b	$B1,$04
000EF706 B204                       		dc.b	$B2,$04
000EF708 B202                       		dc.b	$B2,$02
000EF70A B202                       		dc.b	$B2,$02
000EF70C B302                       		dc.b	$B3,$02
000EF70E B302                       		dc.b	$B3,$02
000EF710 B402                       		dc.b	$B4,$02
000EF712 B402                       		dc.b	$B4,$02
000EF714 B502                       		dc.b	$B5,$02
000EF716 B602                       		dc.b	$B6,$02
000EF718                            
000EF718                            	; --- Soft Synth area ---
000EF718                            
000EF718 F528                       		VoicPSG	$28
000EF71A                            
000EF71A                            M96_PCM1_Loop07:
000EF71A AC40                       		dc.b	$AC,$40
000EF71C E7                         		SoftKey
000EF71D 40                         		dc.b	$40
000EF71E E7                         		SoftKey
000EF71F 40                         		dc.b	$40
000EF720 E7                         		SoftKey
000EF721 20                         		dc.b	$20
000EF722 EC10                       		VoluPSG	$10
000EF724 E7                         		SoftKey
000EF725 10                         		dc.b	$10
000EF726 EC10                       		VoluPSG	$10
000EF728 E7                         		SoftKey
000EF729 10                         		dc.b	$10
000EF72A ECE0                       		VoluPSG	$E0
000EF72C E9FE                       		Pitch	$FE
000EF72E F700 02FF E8               		Loop	$00,$02,M96_PCM1_Loop07
000EF733 E904                       		Pitch	$04
000EF735 F701 03FF E1               		Loop	$01,$03,M96_PCM1_Loop07
000EF73A                            
000EF73A F6FE C2                    		Jump	M96_PCM1_MegaLoop
000EF73D                            
000EF73D                            ; ===========================================================================
000EF73D                            ; ---------------------------------------------------------------------------
000EF73D                            ; Quick snares at the end of a bar
000EF73D                            ; ---------------------------------------------------------------------------
000EF73D                            
000EF73D                            M96_PCM_QuickSnares:
000EF73D F522                       		VoicPSG	$22
000EF73F 8020                       		dc.b	$80,$20
000EF741 B108                       		dc.b	$B1,$08
000EF743 B208                       		dc.b	$B2,$08
000EF745 B504                       		dc.b	$B5,$04
000EF747 B604                       		dc.b	$B6,$04
000EF749 B804                       		dc.b	$B8,$04
000EF74B B904                       		dc.b	$B9,$04
000EF74D E3                         		Return
000EF74E                            
000EF74E                            ; ===========================================================================
000EF74E                            ; ---------------------------------------------------------------------------
000EF74E                            ; PCM 2
000EF74E                            ; ---------------------------------------------------------------------------
000EF74E                            
000EF74E                            M96_PCM2:
000EF74E                            
000EF74E                            	; --- Intro Synth ---
000EF74E                            
000EF74E F800 00                    		Call	M96_PCM_SynthIntro
000EF751                            
000EF751                            M96_PCM2_Loop01:
000EF751 E7                         		SoftKey
000EF752 AB40                       		dc.b	$AB,$40
000EF754 F700 05FF F9               		Loop	$00,$05,M96_PCM2_Loop01
000EF759                            
000EF759                            M96_PCM2_Loop02:
000EF759 E7                         		SoftKey
000EF75A EC08                       		VoluPSG	$08
000EF75C AB10                       		dc.b	$AB,$10
000EF75E F700 08FF F7               		Loop	$00,$08,M96_PCM2_Loop02
000EF763 ECC0                       		VoluPSG	$C0
000EF765                            
000EF765                            	; --- Drums ---
000EF765                            
000EF765 F800 00                    		Call	M96_PCM_SnareIntro
000EF768                            
000EF768                            M96_PCM2_MegaLoop:
000EF768 F800 00                    		Call	M96_PCM_AmenLoops
000EF76B F800 00                    		Call	M96_PCM_AmenLoops
000EF76E                            
000EF76E F800 00                    		Call	M96_PCM_RespectFade
000EF771 8040 40                    		dc.b	$80,$40,$40
000EF774 F800 00                    		Call	M96_PCM_RespectFade
000EF777 F800 00                    		Call	M96_PCM_SnareIn
000EF77A                            
000EF77A F800 00                    		Call	M96_PCM_AmenLoopsCrash
000EF77D F800 00                    		Call	M96_PCM_AmenLoops
000EF780 F800 00                    		Call	M96_PCM_AmenLoopsCrash
000EF783                            
000EF783 F800 00                    		Call	M96_PCM_BurnSection
000EF786                            
000EF786                            
000EF786 F800 00                    		Call	M96_PCM_AmenLoops
000EF789 F800 00                    		Call	M96_PCM_AmenLoops
000EF78C                            
000EF78C F527                       		VoicPSG	$27
000EF78E B510                       		dc.b	$B5,$10
000EF790                            
000EF790 F522                       		VoicPSG	$22
000EF792 8017                       		dc.b	$80,$0F+$08
000EF794 EC2C                       		VoluPSG	$2C
000EF796 F800 00                    		Call	M96_PCM_SIT_Loop01
000EF799                            
000EF799 F527                       		VoicPSG	$27
000EF79B B510                       		dc.b	$B5,$10
000EF79D                            
000EF79D F800 00                    		Call	M96_PCM_AmenLoops
000EF7A0 F800 00                    		Call	M96_PCM_AmenLoops
000EF7A3                            
000EF7A3 F800 00                    		Call	M96_PCM_DreadEcho
000EF7A6 8040                       		dc.b	$80,$40
000EF7A8 F800 00                    		Call	M96_PCM_DreadEcho
000EF7AB 8040                       		dc.b	$80,$40
000EF7AD F800 00                    		Call	M96_PCM_DreadControl
000EF7B0 8040 4040                  		dc.b	$80,$40,$40,$40
000EF7B4 F800 00                    		Call	M96_PCM_SnareIn
000EF7B7 F800 00                    		Call	M96_PCM_AmenLoops
000EF7BA F800 00                    		Call	M96_PCM_AmenLoops
000EF7BD F800 00                    		Call	M96_PCM_AmenLoops
000EF7C0 F800 00                    		Call	M96_PCM_AmenLoops
000EF7C3                            
000EF7C3 F800 00                    		Call	M96_PCM_BurnSection
000EF7C6                            
000EF7C6 F6FF A0                    		Jump	M96_PCM2_MegaLoop
000EF7C9                            
000EF7C9                            ; ===========================================================================
000EF7C9                            ; ---------------------------------------------------------------------------
000EF7C9                            ; Burning vocal section
000EF7C9                            ; ---------------------------------------------------------------------------
000EF7C9                            
000EF7C9                            M96_PCM_BurnSection:			; done
000EF7C9 8038                       		dc.b	$80,$38
000EF7CB F600 00                    		Jump	M96_PCM2_BurnStart
000EF7CE                            
000EF7CE                            M96_PCM2_BurnLoop:
000EF7CE 8040 40                    		dc.b	$80,$40,$40
000EF7D1                            
000EF7D1                            M96_PCM2_BurnStart:
000EF7D1 F530                       		VoicPSG	$30
000EF7D3 8020                       		dc.b	$80,$20
000EF7D5 EC40                       		VoluPSG	$40
000EF7D7 B108                       		dc.b	$B1,$08
000EF7D9 ECF0                       		VoluPSG	$F0
000EF7DB B108                       		dc.b	$B1,$08
000EF7DD ECF0                       		VoluPSG	$F0
000EF7DF B108                       		dc.b	$B1,$08
000EF7E1 ECF0                       		VoluPSG	$F0
000EF7E3 B108                       		dc.b	$B1,$08
000EF7E5 ECF0                       		VoluPSG	$F0
000EF7E7 B140                       		dc.b	$B1,$40
000EF7E9 F700 02FF E1               		Loop	$00,$02,M96_PCM2_BurnLoop
000EF7EE FA                         		Reverse
000EF7EF B128                       		dc.b	$B1,$28
000EF7F1 FA                         		Reverse
000EF7F2 F522                       		VoicPSG	$22
000EF7F4 B108                       		dc.b	$B1,$08
000EF7F6 B208                       		dc.b	$B2,$08
000EF7F8 B504                       		dc.b	$B5,$04
000EF7FA B604                       		dc.b	$B6,$04
000EF7FC B804                       		dc.b	$B8,$04
000EF7FE B904                       		dc.b	$B9,$04
000EF800 E3                         		Return
000EF801                            
000EF801                            ; ---------------------------------------------------------------------------
000EF801                            ; Amen loop series
000EF801                            ; ---------------------------------------------------------------------------
000EF801                            
000EF801                            M96_PCM_AmenLoops:
000EF801 F800 00                    		Call	M96_PCM_AmenLoop01_Crash
000EF804 F800 00                    		Call	M96_PCM_AmenLoop03
000EF807 F800 00                    		Call	M96_PCM_AmenLoop01
000EF80A F800 00                    		Call	M96_PCM_AmenLoop02
000EF80D F800 00                    		Call	M96_PCM_AmenLoop01
000EF810 F800 00                    		Call	M96_PCM_AmenLoop03
000EF813 F800 00                    		Call	M96_PCM_AmenLoop01
000EF816 F600 00                    		Jump	M96_PCM_AmenLoop02
000EF819                            
000EF819                            
000EF819                            M96_PCM_AmenLoopsCrash:
000EF819 F800 00                    		Call	M96_PCM_AmenLoop01_Crash
000EF81C F800 00                    		Call	M96_PCM_AmenLoop03
000EF81F F800 00                    		Call	M96_PCM_AmenLoop01
000EF822 F800 00                    		Call	M96_PCM_AmenLoop02
000EF825 F800 00                    		Call	M96_PCM_AmenLoop01
000EF828 F800 00                    		Call	M96_PCM_AmenLoop03
000EF82B F600 00                    		Jump	M96_PCM_AmenCrashEnd
000EF82E                            
000EF82E                            ; ---------------------------------------------------------------------------
000EF82E                            ; Crashing end segment
000EF82E                            ; ---------------------------------------------------------------------------
000EF82E                            
000EF82E                            M96_PCM_AmenCrashEnd:
000EF82E F527                       		VoicPSG	$27
000EF830 B110                       		dc.b	$B1,$10
000EF832 F522                       		VoicPSG	$22
000EF834 B408                       		dc.b	$B4,$08
000EF836 F527                       		VoicPSG	$27
000EF838 AD10                       		dc.b	$AD,$10
000EF83A F522                       		VoicPSG	$22
000EF83C B208                       		dc.b	$B2,$08
000EF83E F527                       		VoicPSG	$27
000EF840 A420                       		dc.b	$A4,$20
000EF842 8030                       		dc.b	$80,$30
000EF844 E3                         		Return
000EF845                            
000EF845                            ; ===========================================================================
000EF845                            ; ---------------------------------------------------------------------------
000EF845                            ; Respect vocal fading
000EF845                            ; ---------------------------------------------------------------------------
000EF845                            
000EF845                            M96_PCM_RespectFade:			; DONE
000EF845 F52E                       		VoicPSG	$2E
000EF847 B110                       		dc.b	$B1,$10
000EF849 EC08                       		VoluPSG	$08
000EF84B B010                       		dc.b	$B0,$10
000EF84D EC08                       		VoluPSG	$08
000EF84F AF10                       		dc.b	$AF,$10
000EF851 EC08                       		VoluPSG	$08
000EF853 AE10                       		dc.b	$AE,$10
000EF855 EC08                       		VoluPSG	$08
000EF857 AD10                       		dc.b	$AD,$10
000EF859 EC08                       		VoluPSG	$08
000EF85B AC10                       		dc.b	$AC,$10
000EF85D EC08                       		VoluPSG	$08
000EF85F AB10                       		dc.b	$AB,$10
000EF861 EC08                       		VoluPSG	$08
000EF863 AA10                       		dc.b	$AA,$10
000EF865 ECC8                       		VoluPSG	$C8
000EF867 E3                         		Return
000EF868                            
000EF868                            ; ---------------------------------------------------------------------------
000EF868                            ; Synth intro
000EF868                            ; ---------------------------------------------------------------------------
000EF868                            
000EF868                            M96_PCM_SynthIntro:
000EF868 F528                       		VoicPSG	$28
000EF86A B140                       		dc.b	$B1,$40
000EF86C E7                         		SoftKey
000EF86D 40                         		dc.b	$40
000EF86E E7                         		SoftKey
000EF86F 40                         		dc.b	$40
000EF870 F000 01FF FF               		Modulat	$00,$01,$FF,$FF
000EF875 E7                         		SoftKey
000EF876 40                         		dc.b	$40
000EF877 F4                         		ModuOff
000EF878 E3                         		Return
000EF879                            
000EF879                            ; ---------------------------------------------------------------------------
000EF879                            ; Amen Snare Echo
000EF879                            ; ---------------------------------------------------------------------------
000EF879                            
000EF879                            M96_PCM_SnareEcho:		; done
000EF879 F522                       		VoicPSG	$22
000EF87B B508 08                    		dc.b	$B5,$08,$08		; 00
000EF87E EC20                       		VoluPSG	$20
000EF880 0808                       		dc.b	$08,$08			; 60
000EF882 ECF0                       		VoluPSG	$F0
000EF884 0808                       		dc.b	$08,$08			; 40
000EF886 EC20                       		VoluPSG	$20
000EF888 0808                       		dc.b	$08,$08			; 70
000EF88A ECF0                       		VoluPSG	$F0
000EF88C 0808                       		dc.b	$08,$08			; 60
000EF88E EC20                       		VoluPSG	$20
000EF890 0808                       		dc.b	$08,$08			; 78
000EF892 ECF0                       		VoluPSG	$F0
000EF894 0808                       		dc.b	$08,$08			; 70
000EF896 EC20                       		VoluPSG	$20
000EF898 0808                       		dc.b	$08,$08			; 7C
000EF89A ECB0                       		VoluPSG	$B0
000EF89C E3                         		Return
000EF89D                            
000EF89D                            ; ---------------------------------------------------------------------------
000EF89D                            ; Amen Snare Intro
000EF89D                            ; ---------------------------------------------------------------------------
000EF89D                            
000EF89D                            M96_PCM_SnareIn:			; done
000EF89D F522                       		VoicPSG	$22
000EF89F B503                       		dc.b	$B5,$03
000EF8A1 EC10                       		VoluPSG	$10
000EF8A3 0303                       		dc.b	$03,$03
000EF8A5 EC10                       		VoluPSG	$10
000EF8A7 0303                       		dc.b	$03,$03
000EF8A9 EC1C                       		VoluPSG	$1C
000EF8AB                            
000EF8AB                            M96_PCM_SI_Loop01:
000EF8AB B5                         		dc.b	$B5
000EF8AC 03                         		dc.b	$03
000EF8AD 03                         		dc.b	$03
000EF8AE ECFC                       		VoluPSG	$FC
000EF8B0 03                         		dc.b	$03
000EF8B1 03                         		dc.b	$03
000EF8B2 ECFC                       		VoluPSG	$FC
000EF8B4 F700 08FF F3               		Loop	$00,$08,M96_PCM_SI_Loop01
000EF8B9 EC04                       		VoluPSG	$04
000EF8BB                            
000EF8BB                            M96_PCM_SI_Loop02:
000EF8BB 03                         		dc.b	$03
000EF8BC F700 05FF FB               		Loop	$00,$05,M96_PCM_SI_Loop02
000EF8C1 02                         		dc.b	$02
000EF8C2 E3                         		Return
000EF8C3                            
000EF8C3                            ; ---------------------------------------------------------------------------
000EF8C3                            ; Amen Snare Intro (Cut off to prevent vocal roughness)
000EF8C3                            ; ---------------------------------------------------------------------------
000EF8C3                            
000EF8C3                            M96_PCM_SnareIntro:		; done
000EF8C3 F522                       		VoicPSG	$22
000EF8C5 8027                       		dc.b	$80,$0F+$18
000EF8C7 EC2C                       		VoluPSG	$2C
000EF8C9                            
000EF8C9                            M96_PCM_SIT_Loop01:
000EF8C9 B5                         		dc.b	$B5
000EF8CA 03                         		dc.b	$03
000EF8CB 03                         		dc.b	$03
000EF8CC ECFC                       		VoluPSG	$FC
000EF8CE 03                         		dc.b	$03
000EF8CF 03                         		dc.b	$03
000EF8D0 ECFC                       		VoluPSG	$FC
000EF8D2 F700 06FF F3               		Loop	$00,$06,M96_PCM_SIT_Loop01
000EF8D7 EC04                       		VoluPSG	$04
000EF8D9                            
000EF8D9                            M96_PCM_SIT_Loop02:
000EF8D9 03                         		dc.b	$03
000EF8DA F700 05FF FB               		Loop	$00,$05,M96_PCM_SIT_Loop02
000EF8DF 02                         		dc.b	$02
000EF8E0 E3                         		Return
000EF8E1                            
000EF8E1                            ; ---------------------------------------------------------------------------
000EF8E1                            ; Amen Loop 1
000EF8E1                            ; ---------------------------------------------------------------------------
000EF8E1                            
000EF8E1                            M96_PCM_AmenLoop01_Crash:
000EF8E1 F527                       		VoicPSG	$27
000EF8E3 B110                       		dc.b	$B1,$10
000EF8E5 F600 00                    		Jump	M96_PCM_AmenLoop
000EF8E8                            
000EF8E8                            M96_PCM_AmenLoop01:
000EF8E8 F520                       		VoicPSG	$20
000EF8EA AF08 B2                    		dc.b	$AF,$08,$B2
000EF8ED                            
000EF8ED                            M96_PCM_AmenLoop:
000EF8ED F522                       		VoicPSG	$22
000EF8EF B408                       		dc.b	$B4,$08
000EF8F1 F520                       		VoicPSG	$20
000EF8F3 AE08 B2                    		dc.b	$AE,$08,$B2
000EF8F6 F522                       		VoicPSG	$22
000EF8F8 B3                         		dc.b	$B3
000EF8F9 F526                       		VoicPSG	$26
000EF8FB B404                       		dc.b	$B4,$04
000EF8FD F523                       		VoicPSG	$23
000EF8FF 04                         		dc.b	$04
000EF900 F526                       		VoicPSG	$26
000EF902 04                         		dc.b	$04
000EF903 F523                       		VoicPSG	$23
000EF905 04                         		dc.b	$04
000EF906 E3                         		Return
000EF907                            
000EF907                            ; ---------------------------------------------------------------------------
000EF907                            ; Amen Loop 2
000EF907                            ; ---------------------------------------------------------------------------
000EF907                            
000EF907                            M96_PCM_AmenLoop02:
000EF907 F520                       		VoicPSG	$20
000EF909 AF08 B2                    		dc.b	$AF,$08,$B2
000EF90C F522                       		VoicPSG	$22
000EF90E B4                         		dc.b	$B4
000EF90F F520                       		VoicPSG	$20
000EF911 AE                         		dc.b	$AE
000EF912 F522                       		VoicPSG	$22
000EF914 B3                         		dc.b	$B3
000EF915 F521                       		VoicPSG	$21
000EF917 B1                         		dc.b	$B1
000EF918 F527                       		VoicPSG	$27
000EF91A AF0C                       		dc.b	$AF,$0C
000EF91C F523                       		VoicPSG	$23
000EF91E 04                         		dc.b	$04
000EF91F E3                         		Return
000EF920                            
000EF920                            ; ---------------------------------------------------------------------------
000EF920                            ; Amen Loop 3
000EF920                            ; ---------------------------------------------------------------------------
000EF920                            
000EF920                            M96_PCM_AmenLoop03:
000EF920 F520                       		VoicPSG	$20
000EF922 AF08 B2                    		dc.b	$AF,$08,$B2
000EF925 F522                       		VoicPSG	$22
000EF927 B2                         		dc.b	$B2
000EF928 F520                       		VoicPSG	$20
000EF92A AE                         		dc.b	$AE
000EF92B F522                       		VoicPSG	$22
000EF92D B308 B4                    		dc.b	$B3,$08,$B4
000EF930 F520                       		VoicPSG	$20
000EF932 AE08                       		dc.b	$AE,$08
000EF934 F526                       		VoicPSG	$26
000EF936 B404                       		dc.b	$B4,$04
000EF938 F523                       		VoicPSG	$23
000EF93A 04                         		dc.b	$04
000EF93B E3                         		Return
000EF93C                            
000EF93C                            ; ---------------------------------------------------------------------------
000EF93C                            ; "Dread Control"
000EF93C                            ; ---------------------------------------------------------------------------
000EF93C                            
000EF93C                            M96_PCM_DreadControl:	; DONE
000EF93C F52B                       		VoicPSG	$2B
000EF93E B168                       		dc.b	$B1,$68
000EF940 F52D                       		VoicPSG	$2D
000EF942 EC10                       		VoluPSG	$10
000EF944 10                         		dc.b	$10
000EF945 EC10                       		VoluPSG	$10
000EF947 10                         		dc.b	$10
000EF948 EC14                       		VoluPSG	$14
000EF94A 10                         		dc.b	$10
000EF94B 8028                       		dc.b	$80,$28
000EF94D ECCC                       		VoluPSG	$CC
000EF94F E3                         		Return
000EF950                            
000EF950                            ; ---------------------------------------------------------------------------
000EF950                            ; "Dread" Echo
000EF950                            ; ---------------------------------------------------------------------------
000EF950                            
000EF950                            M96_PCM_DreadEcho:			; done
000EF950 F52C                       		VoicPSG	$2C
000EF952 B114 8004                  		dc.b	$B1,$14,$80,$04
000EF956 EC10                       		VoluPSG	$10
000EF958 B114 8004                  		dc.b	$B1,$14,$80,$04
000EF95C EC10                       		VoluPSG	$10
000EF95E B114 8004                  		dc.b	$B1,$14,$80,$04
000EF962 EC14                       		VoluPSG	$14
000EF964 B114 8004                  		dc.b	$B1,$14,$80,$04
000EF968 EC18                       		VoluPSG	$18
000EF96A B114 8004                  		dc.b	$B1,$14,$80,$04
000EF96E 8048                       		dc.b	$80,$48
000EF970 ECB4                       		VoluPSG	$B4
000EF972 E3                         		Return
000EF973                            
000EF973                            M96_PCM_DreadEcho_Short:		; done
000EF973 F52C                       		VoicPSG	$2C
000EF975 B114 8004                  		dc.b	$B1,$14,$80,$04
000EF979 EC10                       		VoluPSG	$10
000EF97B B114 8004                  		dc.b	$B1,$14,$80,$04
000EF97F EC10                       		VoluPSG	$10
000EF981 B114 8004                  		dc.b	$B1,$14,$80,$04
000EF985 EC14                       		VoluPSG	$14
000EF987 B114 8004                  		dc.b	$B1,$14,$80,$04
000EF98B EC18                       		VoluPSG	$18
000EF98D B114 8004                  		dc.b	$B1,$14,$80,$04
000EF991 ECB4                       		VoluPSG	$B4
000EF993 E3                         		Return
000EF994                            
000EF994                            ; ===========================================================================
000EF994                            ; ===========================================================================
000EF994                            		even
000EF994                            Music97:	include	sound\music97.asm ; 2Unlimited - Get Ready For This
000EF994                            ; ===========================================================================
000EF994                            ; ---------------------------------------------------------------------------
000EF994                            ; Music 97 - 2Unlimited - Get Ready For This
000EF994                            ; ---------------------------------------------------------------------------
000EF994                            		include	"sound\Macros.asm"
000EF994                            ; ===========================================================================
000EF994                            ; ---------------------------------------------------------------------------
000EF994                            ; Sound Driver Macros
000EF994                            ; ---------------------------------------------------------------------------
000EF994                            
000EF994                            	; --- Equates for the macros ---
000EF994                            
000EF994 =00000000                  NoSpeakers	=	%00000000
000EF994 =00000040                  RightSpeaker	=	%01000000
000EF994 =00000080                  LeftSpeaker	=	%10000000
000EF994 =000000C0                  BothSpeakers	=	LeftSpeaker|RightSpeaker
000EF994                            
000EF994                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000EF994                            
000EF994 =00000080                  REST		=	$80
000EF994 =00000081                  N_S1Kick	=	$81
000EF994 =00000082                  N_S1Snare	=	$82
000EF994 =00000083                  N_S1Timpani	=	$83
000EF994 =00000088                  N_S1TimpHigh	=	$88
000EF994 =00000089                  N_S1TimpMid	=	$89
000EF994 =0000008A                  N_S1TimpLow	=	$8A
000EF994 =0000008B                  N_S1TimpLowest	=	$8B
000EF994                            
000EF994 =00000001                  C		=	$01
000EF994 =00000002                  Cs		=	$02
000EF994 =00000003                  D		=	$03
000EF994 =00000004                  Eb		=	$04
000EF994 =00000005                  E		=	$05
000EF994 =00000006                  F		=	$06
000EF994 =00000007                  Fs		=	$07
000EF994 =00000008                  G		=	$08
000EF994 =00000009                  Gs		=	$09
000EF994 =0000000A                  A		=	$0A
000EF994 =0000000B                  Bb		=	$0B
000EF994 =0000000C                  B		=	$0C
000EF994                            
000EF994 =00000081                  N_C0		=	$80+(0*$C)+C		; 81
000EF994 =00000082                  N_Cs0		=	$80+(0*$C)+Cs		; 82
000EF994 =00000083                  N_D0		=	$80+(0*$C)+D		; 83
000EF994 =00000084                  N_Eb0		=	$80+(0*$C)+Eb		; 84
000EF994 =00000085                  N_E0		=	$80+(0*$C)+E		; 85
000EF994 =00000086                  N_F0		=	$80+(0*$C)+F		; 86
000EF994 =00000087                  N_Fs0		=	$80+(0*$C)+Fs		; 87
000EF994 =00000088                  N_G0		=	$80+(0*$C)+G		; 88
000EF994 =00000089                  N_Gs0		=	$80+(0*$C)+Gs		; 89
000EF994 =0000008A                  N_A0		=	$80+(0*$C)+A		; 8A
000EF994 =0000008B                  N_Bb0		=	$80+(0*$C)+Bb		; 8B
000EF994 =0000008C                  N_B0		=	$80+(0*$C)+B		; 8C
000EF994                            
000EF994 =0000008D                  N_C1		=	$80+(1*$C)+C		; 8D
000EF994 =0000008E                  N_Cs1		=	$80+(1*$C)+Cs		; 8E
000EF994 =0000008F                  N_D1		=	$80+(1*$C)+D		; 8F
000EF994 =00000090                  N_Eb1		=	$80+(1*$C)+Eb		; 90
000EF994 =00000091                  N_E1		=	$80+(1*$C)+E		; 91
000EF994 =00000092                  N_F1		=	$80+(1*$C)+F		; 92
000EF994 =00000093                  N_Fs1		=	$80+(1*$C)+Fs		; 93
000EF994 =00000094                  N_G1		=	$80+(1*$C)+G		; 94
000EF994 =00000095                  N_Gs1		=	$80+(1*$C)+Gs		; 95
000EF994 =00000096                  N_A1		=	$80+(1*$C)+A		; 96
000EF994 =00000097                  N_Bb1		=	$80+(1*$C)+Bb		; 97
000EF994 =00000098                  N_B1		=	$80+(1*$C)+B		; 98
000EF994                            
000EF994 =00000099                  N_C2		=	$80+(2*$C)+C		; 99
000EF994 =0000009A                  N_Cs2		=	$80+(2*$C)+Cs		; 9A
000EF994 =0000009B                  N_D2		=	$80+(2*$C)+D		; 9B
000EF994 =0000009C                  N_Eb2		=	$80+(2*$C)+Eb		; 9C
000EF994 =0000009D                  N_E2		=	$80+(2*$C)+E		; 9D
000EF994 =0000009E                  N_F2		=	$80+(2*$C)+F		; 9E
000EF994 =0000009F                  N_Fs2		=	$80+(2*$C)+Fs		; 9F
000EF994 =000000A0                  N_G2		=	$80+(2*$C)+G		; A0
000EF994 =000000A1                  N_Gs2		=	$80+(2*$C)+Gs		; A1
000EF994 =000000A2                  N_A2		=	$80+(2*$C)+A		; A2
000EF994 =000000A3                  N_Bb2		=	$80+(2*$C)+Bb		; A3
000EF994 =000000A4                  N_B2		=	$80+(2*$C)+B		; A4
000EF994                            
000EF994 =000000A5                  N_C3		=	$80+(3*$C)+C		; A5
000EF994 =000000A6                  N_Cs3		=	$80+(3*$C)+Cs		; A6
000EF994 =000000A7                  N_D3		=	$80+(3*$C)+D		; A7
000EF994 =000000A8                  N_Eb3		=	$80+(3*$C)+Eb		; A8
000EF994 =000000A9                  N_E3		=	$80+(3*$C)+E		; A9
000EF994 =000000AA                  N_F3		=	$80+(3*$C)+F		; AA
000EF994 =000000AB                  N_Fs3		=	$80+(3*$C)+Fs		; AB
000EF994 =000000AC                  N_G3		=	$80+(3*$C)+G		; AC
000EF994 =000000AD                  N_Gs3		=	$80+(3*$C)+Gs		; AD
000EF994 =000000AE                  N_A3		=	$80+(3*$C)+A		; AE
000EF994 =000000AF                  N_Bb3		=	$80+(3*$C)+Bb		; AF
000EF994 =000000B0                  N_B3		=	$80+(3*$C)+B		; B0
000EF994                            
000EF994 =000000B1                  N_C4		=	$80+(4*$C)+C		; B1
000EF994 =000000B2                  N_Cs4		=	$80+(4*$C)+Cs		; B2
000EF994 =000000B3                  N_D4		=	$80+(4*$C)+D		; B3
000EF994 =000000B4                  N_Eb4		=	$80+(4*$C)+Eb		; B4
000EF994 =000000B5                  N_E4		=	$80+(4*$C)+E		; B5
000EF994 =000000B6                  N_F4		=	$80+(4*$C)+F		; B6
000EF994 =000000B7                  N_Fs4		=	$80+(4*$C)+Fs		; B7
000EF994 =000000B8                  N_G4		=	$80+(4*$C)+G		; B8
000EF994 =000000B9                  N_Gs4		=	$80+(4*$C)+Gs		; B9
000EF994 =000000BA                  N_A4		=	$80+(4*$C)+A		; BA
000EF994 =000000BB                  N_Bb4		=	$80+(4*$C)+Bb		; BB
000EF994 =000000BC                  N_B4		=	$80+(4*$C)+B		; BC
000EF994                            
000EF994 =000000BD                  N_C5		=	$80+(5*$C)+C		; BD
000EF994 =000000BE                  N_Cs5		=	$80+(5*$C)+Cs		; BE
000EF994 =000000BF                  N_D5		=	$80+(5*$C)+D		; BF
000EF994 =000000C0                  N_Eb5		=	$80+(5*$C)+Eb		; C0
000EF994 =000000C1                  N_E5		=	$80+(5*$C)+E		; C1
000EF994 =000000C2                  N_F5		=	$80+(5*$C)+F		; C2
000EF994 =000000C3                  N_Fs5		=	$80+(5*$C)+Fs		; C3
000EF994 =000000C4                  N_G5		=	$80+(5*$C)+G		; C4
000EF994 =000000C5                  N_Gs5		=	$80+(5*$C)+Gs		; C5
000EF994 =000000C6                  N_A5		=	$80+(5*$C)+A		; C6
000EF994 =000000C7                  N_Bb5		=	$80+(5*$C)+Bb		; C7
000EF994 =000000C8                  N_B5		=	$80+(5*$C)+B		; C8
000EF994                            
000EF994 =000000C9                  N_C6		=	$80+(6*$C)+C		; C9
000EF994 =000000CA                  N_Cs6		=	$80+(6*$C)+Cs		; CA
000EF994 =000000CB                  N_D6		=	$80+(6*$C)+D		; CB
000EF994 =000000CC                  N_Eb6		=	$80+(6*$C)+Eb		; CC
000EF994 =000000CD                  N_E6		=	$80+(6*$C)+E		; CD
000EF994 =000000CE                  N_F6		=	$80+(6*$C)+F		; CE
000EF994 =000000CF                  N_Fs6		=	$80+(6*$C)+Fs		; CF
000EF994 =000000D0                  N_G6		=	$80+(6*$C)+G		; D0
000EF994 =000000D1                  N_Gs6		=	$80+(6*$C)+Gs		; D1
000EF994 =000000D2                  N_A6		=	$80+(6*$C)+A		; D2
000EF994 =000000D3                  N_Bb6		=	$80+(6*$C)+Bb		; D3
000EF994 =000000D4                  N_B6		=	$80+(6*$C)+B		; D4
000EF994                            
000EF994 =000000D5                  N_C7		=	$80+(7*$C)+C		; D5
000EF994 =000000D6                  N_Cs7		=	$80+(7*$C)+Cs		; D6
000EF994 =000000D7                  N_D7		=	$80+(7*$C)+D		; D7
000EF994 =000000D8                  N_Eb7		=	$80+(7*$C)+Eb		; D8
000EF994 =000000D9                  N_E7		=	$80+(7*$C)+E		; D9
000EF994 =000000DA                  N_F7		=	$80+(7*$C)+F		; DA
000EF994 =000000DB                  N_Fs7		=	$80+(7*$C)+Fs		; DB
000EF994 =000000DC                  N_G7		=	$80+(7*$C)+G		; DC
000EF994 =000000DD                  N_Gs7		=	$80+(7*$C)+Gs		; DD
000EF994 =000000DE                  N_A7		=	$80+(7*$C)+A		; DE
000EF994 =000000DF                  N_Bb7		=	$80+(7*$C)+Bb		; DF
000EF994 =000000E0                  N_B7		=	$80+(7*$C)+B		; E0
000EF994                            
000EF994                            ; ---------------------------------------------------------------------------
000EF994                            ; The actual macros
000EF994                            ; ---------------------------------------------------------------------------
000EF994                            
000EF994                            	; --- Flag E0 - Set panning ---
000EF994                            
000EF994                            Pan		macro	PanValue
000EF994                            		dc.b	$E0,PanValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E1 - Set detune ---
000EF994                            
000EF994                            Detune		macro	DetuneValue
000EF994                            		dc.b	$E1,DetuneValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E2 - Set unknown (unused in Sonic 1) ---
000EF994                            
000EF994                            UnkFlag		macro	UnkValue
000EF994                            		dc.b	$E2,UnkValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E3 - Return ---
000EF994                            
000EF994                            Return		macro
000EF994                            		dc.b	$E3
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E4 - Fade in (from 1-Up jingle) ---
000EF994                            
000EF994                            FadeIn		macro
000EF994                            		dc.b	$E4
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E5 - Set tempo multiplier (for current channel only) ---
000EF994                            
000EF994                            TempMul		macro	TempoMultValue
000EF994                            		dc.b	$E5,TempoMultValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E6 - Add volume (FM only) ---
000EF994                            
000EF994                            VolumFM		macro	VolumeValue
000EF994                            		dc.b	$E6,VolumeValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E7 - Set soft key on (one turn only) ---
000EF994                            
000EF994                            SoftKey		macro
000EF994                            		dc.b	$E7
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E8 - Set release key rate counter ---
000EF994                            
000EF994                            KeyRate		macro	ReleaseValue
000EF994                            		dc.b	$E8,ReleaseValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag E9 - Add pitch ---
000EF994                            
000EF994                            Pitch		macro	PitchValue
000EF994                            		dc.b	$E9,PitchValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag EA - Set tempo (for all channels) ---
000EF994                            
000EF994                            TempSet		macro	TempoSetValue
000EF994                            		dc.b	$EA,TempoSetValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag EB - Set tempo multiplier (for all channels) ---
000EF994                            
000EF994                            TempAll		macro	TempoAllValue
000EF994                            		dc.b	$EB,TempoAllValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag EC - Add volume (PSG only, though it can be used for FM with no update) ---
000EF994                            
000EF994                            VoluPSG		macro	VolumeValue
000EF994                            		dc.b	$EC,VolumeValue
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag ED - Clearing "Block Push SFX" wait flag ---
000EF994                            
000EF994                            ClrBlck		macro
000EF994                            		dc.b	$ED
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag EE - Stop Special SFX FM 4 channel from running ---
000EF994                            
000EF994                            StopFM4		macro
000EF994                            		dc.b	$EE
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag EF - FM Voice Select ---
000EF994                            
000EF994                            VoiceFM		macro	VoiceID
000EF994                            		dc.b	$EF,VoiceID
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F0 - Set modulation (frequency LFO) and turn it on ---
000EF994                            
000EF994                            Modulat		macro	Delay, Speed, Rate, Steps
000EF994                            		dc.b	$F0,Delay,Speed,Rate,Steps
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F1 - Turn modulation (frequency LFO) on ---
000EF994                            
000EF994                            ModulOn		macro
000EF994                            		dc.b	$F1
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F2 - Halt channel ---
000EF994                            
000EF994                            Halt		macro
000EF994                            		dc.b	$F2
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F3 - PSG 4 Control ---
000EF994                            
000EF994                            SetPSG4		macro	PSG4Value
000EF994                            		dc.b	$F3,PSG4Value
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F4 - Turn modulation (frequency LFO) off ---
000EF994                            
000EF994                            ModuOff		macro
000EF994                            		dc.b	$F4
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F5 - PSG Voice Select (FM can used this, but without updating the YM2612) ---
000EF994                            
000EF994                            VoicPSG		macro	VoiceID
000EF994                            		dc.b	$F5,VoiceID
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F6 - Jump ---
000EF994                            
000EF994                            Jump		macro	Location
000EF994                            		dc.b	$F6
000EF994                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EF994                            		dc.b	(Location-*)&$FF
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F7 - Loop ---
000EF994                            
000EF994                            Loop		macro	Slot, Count, Location
000EF994                            		dc.b	$F7,Slot,Count
000EF994                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EF994                            		dc.b	(Location-*)&$FF
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F8 - Call ---
000EF994                            
000EF994                            Call		macro	Location
000EF994                            		dc.b	$F8
000EF994                            		dc.b	(((Location-*)-$01)>>$08)&$FF
000EF994                            		dc.b	(Location-*)&$FF
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag F9 - Force FM channel 1's operator 3 & 4 release rate to immediate (Used at the end of SYZ's first verse) ---
000EF994                            
000EF994                            ForceRR		macro
000EF994                            		dc.b	$F9
000EF994                            		endm
000EF994                            
000EF994                            	; --- Flag FA - Reverse PCM ---
000EF994                            
000EF994                            Reverse		macro
000EF994                            		dc.b	$FA
000EF994                            		endm
000EF994                            
000EF994                            ; ===========================================================================
000EF994                            ; ===========================================================================
000EF994                            ; ---------------------------------------------------------------------------
000EF994                            
000EF994 0000                       M97:		dc.w	M97_VoiceFM-M97				; Voice list address
000EF996 00                         		dc.b	(M97_DACFM_End-M97_DACFM)/4		; Number of DAC & FM channels
000EF997 00                         		dc.b	(M97_PSG_End-M97_PSG)/6			; Number of PSG channels
000EF998 0106                       		dc.b	$01, $06				; tempo (Multiply, Frame)
000EF99A                            
000EF99A                            	; --- PCM & FM channels ---
000EF99A                            
000EF99A                            M97_DACFM:
000EF99A 0000                       		dc.w	M97_PCM1-M97				; PCM 1 tracker address
000EF99C 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF99E 0000                       		dc.w	M97_PCM2-M97				; PCM 2 tracker address
000EF9A0 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF9A2 0000                       		dc.w	M97_FM1-M97				; FM 1 tracker address
000EF9A4 0008                       		dc.b	$00, $08				; '' (Pitch, Volume)
000EF9A6 0000                       		dc.w	M97_FM2-M97				; FM 2 tracker address
000EF9A8 0008                       		dc.b	$00, $08				; '' (Pitch, Volume)
000EF9AA 0000                       		dc.w	M97_FM3-M97				; FM 3 tracker address
000EF9AC 0008                       		dc.b	$00, $08				; '' (Pitch, Volume)
000EF9AE 0000                       		dc.w	M97_FM4-M97				; FM 4 tracker address
000EF9B0 0008                       		dc.b	$00, $08				; '' (Pitch, Volume)
000EF9B2 0000                       		dc.w	M97_FM5-M97				; FM 5 tracker address
000EF9B4 0008                       		dc.b	$00, $08				; '' (Pitch, Volume)
000EF9B6                            M97_DACFM_End:
000EF9B6                            
000EF9B6                            	; --- PSG channels ---
000EF9B6                            
000EF9B6                            M97_PSG:
000EF9B6 0000                       		dc.w	M97_PSG1-M97				; PSG 1 tracker address
000EF9B8 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF9BA 0000                       		dc.w	$0000					; '' (Starting tone)
000EF9BC 0000                       		dc.w	M97_PSG2-M97				; PSG 2 tracker address
000EF9BE 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF9C0 0000                       		dc.w	$0000					; '' (Starting tone)
000EF9C2 0000                       		dc.w	M97_PSG3-M97				; PSG 3 tracker address
000EF9C4 0000                       		dc.b	$00, $00				; '' (Pitch, Volume)
000EF9C6 0000                       		dc.w	$0000					; '' (Starting tone)
000EF9C8                            M97_PSG_End:
000EF9C8                            
000EF9C8                            ; ===========================================================================
000EF9C8                            ; ---------------------------------------------------------------------------
000EF9C8                            ; FM Voices
000EF9C8                            ; ---------------------------------------------------------------------------
000EF9C8                            
000EF9C8                            M97_VoiceFM:
000EF9C8 3A                         		dc.b	$3A
000EF9C9 613C 1430 9CDB 9CDA 0409+  		dc.b	$61,$3C,$14,$30, $9C,$DB,$9C,$DA, $04,$09,$04,$03
000EF9D5 0301 0300 1F0F 0FAF 2147+  		dc.b	$03,$01,$03,$00, $1F,$0F,$0F,$AF, $21,$47,$31,$80
000EF9E1                            
000EF9E1                            ; ===========================================================================
000EF9E1                            ; ---------------------------------------------------------------------------
000EF9E1                            ; PSG 1
000EF9E1                            ; ---------------------------------------------------------------------------
000EF9E1                            
000EF9E1                            M97_PSG1:
000EF9E1 F2                         		Halt
000EF9E2                            
000EF9E2                            ; ===========================================================================
000EF9E2                            ; ---------------------------------------------------------------------------
000EF9E2                            ; PSG 2
000EF9E2                            ; ---------------------------------------------------------------------------
000EF9E2                            
000EF9E2                            M97_PSG2:
000EF9E2 F2                         		Halt
000EF9E3                            
000EF9E3                            ; ===========================================================================
000EF9E3                            ; ---------------------------------------------------------------------------
000EF9E3                            ; PSG 3
000EF9E3                            ; ---------------------------------------------------------------------------
000EF9E3                            
000EF9E3                            M97_PSG3:
000EF9E3 F2                         		Halt
000EF9E4                            
000EF9E4                            ; ===========================================================================
000EF9E4                            ; ---------------------------------------------------------------------------
000EF9E4                            ; FM 1
000EF9E4                            ; ---------------------------------------------------------------------------
000EF9E4                            
000EF9E4                            M97_FM1:
000EF9E4 F2                         		Halt
000EF9E5                            
000EF9E5                            ; ===========================================================================
000EF9E5                            ; ---------------------------------------------------------------------------
000EF9E5                            ; FM 2
000EF9E5                            ; ---------------------------------------------------------------------------
000EF9E5                            
000EF9E5                            M97_FM2:
000EF9E5 F2                         		Halt
000EF9E6                            
000EF9E6                            ; ===========================================================================
000EF9E6                            ; ---------------------------------------------------------------------------
000EF9E6                            ; FM 3
000EF9E6                            ; ---------------------------------------------------------------------------
000EF9E6                            
000EF9E6                            M97_FM3:
000EF9E6 F2                         		Halt
000EF9E7                            
000EF9E7                            ; ===========================================================================
000EF9E7                            ; ---------------------------------------------------------------------------
000EF9E7                            ; FM 4
000EF9E7                            ; ---------------------------------------------------------------------------
000EF9E7                            
000EF9E7                            M97_FM4:
000EF9E7 F2                         		Halt
000EF9E8                            
000EF9E8                            ; ===========================================================================
000EF9E8                            ; ---------------------------------------------------------------------------
000EF9E8                            ; FM 5
000EF9E8                            ; ---------------------------------------------------------------------------
000EF9E8                            
000EF9E8                            M97_FM5:
000EF9E8 F2                         		Halt
000EF9E9                            
000EF9E9                            ; ===========================================================================
000EF9E9                            ; ---------------------------------------------------------------------------
000EF9E9                            ; PCM 1
000EF9E9                            ; ---------------------------------------------------------------------------
000EF9E9                            
000EF9E9                            M97_PCM1:
000EF9E9 F538                       		VoicPSG	$38
000EF9EB                            
000EF9EB                            M97P1_Loop01:
000EF9EB F800 00                    		Call	M97P1_Scratch1
000EF9EE F800 00                    		Call	M97P1_Scratch2
000EF9F1 F800 00                    		Call	M97P1_Scratch1
000EF9F4 F800 00                    		Call	M97P1_Scratch3
000EF9F7 F700 02FF F0               		Loop	$00,$02,M97P1_Loop01
000EF9FC 800C                       		dc.b	$80,$0C
000EF9FE F53A                       		VoicPSG	$3A
000EFA00 B130                       		dc.b	$B1,$30
000EFA02 F538                       		VoicPSG	$38
000EFA04 AA0C                       		dc.b	$AA,$0C
000EFA06 AC0C                       		dc.b	$AC,$0C
000EFA08 AF0C                       		dc.b	$AF,$0C
000EFA0A                            
000EFA0A                            M97P1_Loop02:
000EFA0A F800 00                    		Call	M97P1_Scratch1
000EFA0D F800 00                    		Call	M97P1_Scratch2
000EFA10 F800 00                    		Call	M97P1_Scratch1
000EFA13 F800 00                    		Call	M97P1_Scratch3
000EFA16 F700 02FF F0               		Loop	$00,$02,M97P1_Loop02
000EFA1B                            
000EFA1B                            M97P1_Loop03:
000EFA1B F800 00                    		Call	M97P1_Verse
000EFA1E B408                       		dc.b	$B4,$08
000EFA20 F53B                       		VoicPSG	$3B
000EFA22 B11C                       		dc.b	$B1,$1C
000EFA24 F538                       		VoicPSG	$38
000EFA26                            
000EFA26 F800 00                    		Call	M97P1_Verse
000EFA29 AC08                       		dc.b	$AC,$08
000EFA2B F53B                       		VoicPSG	$3B
000EFA2D B11C                       		dc.b	$B1,$1C
000EFA2F F538                       		VoicPSG	$38
000EFA31                            
000EFA31 F800 00                    		Call	M97P1_Verse
000EFA34 B408                       		dc.b	$B4,$08
000EFA36 F53B                       		VoicPSG	$3B
000EFA38 B11C                       		dc.b	$B1,$1C
000EFA3A F538                       		VoicPSG	$38
000EFA3C                            
000EFA3C F800 00                    		Call	M97P1_VerseEnd
000EFA3F F700 02FF D8               		Loop	$00,$02,M97P1_Loop03
000EFA44                            
000EFA44 F2                         		Halt
000EFA45                            
000EFA45                            M97P1_Verse:
000EFA45 B108                       		dc.b	$B1,$08
000EFA47 EC70                       		VoluPSG	$70
000EFA49 04                         		dc.b	$04
000EFA4A EC90                       		VoluPSG	$90
000EFA4C AF06                       		dc.b	$AF,$06
000EFA4E B108                       		dc.b	$B1,$08
000EFA50 EC70                       		VoluPSG	$70
000EFA52 04                         		dc.b	$04
000EFA53 EC90                       		VoluPSG	$90
000EFA55 AF06                       		dc.b	$AF,$06
000EFA57 B108                       		dc.b	$B1,$08
000EFA59 EC70                       		VoluPSG	$70
000EFA5B 04                         		dc.b	$04
000EFA5C EC90                       		VoluPSG	$90
000EFA5E B108                       		dc.b	$B1,$08
000EFA60 EC70                       		VoluPSG	$70
000EFA62 04                         		dc.b	$04
000EFA63 EC90                       		VoluPSG	$90
000EFA65 E3                         		Return
000EFA66                            
000EFA66                            M97P1_VerseEnd:
000EFA66 B108                       		dc.b	$B1,$08
000EFA68 EC70                       		VoluPSG	$70
000EFA6A 04                         		dc.b	$04
000EFA6B EC90                       		VoluPSG	$90
000EFA6D AF06                       		dc.b	$AF,$06
000EFA6F B108                       		dc.b	$B1,$08
000EFA71 EC70                       		VoluPSG	$70
000EFA73 04                         		dc.b	$04
000EFA74 EC90                       		VoluPSG	$90
000EFA76 B106                       		dc.b	$B1,$06
000EFA78 AF08                       		dc.b	$AF,$08
000EFA7A EC70                       		VoluPSG	$70
000EFA7C 04                         		dc.b	$04
000EFA7D EC90                       		VoluPSG	$90
000EFA7F AA06                       		dc.b	$AA,$06
000EFA81 EC70                       		VoluPSG	$70
000EFA83 06                         		dc.b	$06
000EFA84 EC90                       		VoluPSG	$90
000EFA86 AA0C                       		dc.b	$AA,$0C
000EFA88 AC0C                       		dc.b	$AC,$0C
000EFA8A AF0C                       		dc.b	$AF,$0C
000EFA8C E3                         		Return
000EFA8D                            
000EFA8D                            
000EFA8D                            M97P1_Scratch1:
000EFA8D B112                       		dc.b	$B1,$12
000EFA8F B112                       		dc.b	$B1,$12
000EFA91 B10C                       		dc.b	$B1,$0C
000EFA93 AA08                       		dc.b	$AA,$08
000EFA95 EC70                       		VoluPSG	$70
000EFA97 04                         		dc.b	$04
000EFA98 EC90                       		VoluPSG	$90
000EFA9A AA0C                       		dc.b	$AA,$0C
000EFA9C AC08                       		dc.b	$AC,$08
000EFA9E EC70                       		VoluPSG	$70
000EFAA0 04                         		dc.b	$04
000EFAA1 EC90                       		VoluPSG	$90
000EFAA3 AC0C                       		dc.b	$AC,$0C
000EFAA5 E3                         		Return
000EFAA6                            
000EFAA6                            M97P1_Scratch2:
000EFAA6 B112                       		dc.b	$B1,$12
000EFAA8 B112                       		dc.b	$B1,$12
000EFAAA B10C                       		dc.b	$B1,$0C
000EFAAC B408                       		dc.b	$B4,$08
000EFAAE EC70                       		VoluPSG	$70
000EFAB0 04                         		dc.b	$04
000EFAB1 EC90                       		VoluPSG	$90
000EFAB3 B40C                       		dc.b	$B4,$0C
000EFAB5 B608                       		dc.b	$B6,$08
000EFAB7 EC70                       		VoluPSG	$70
000EFAB9 04                         		dc.b	$04
000EFABA EC90                       		VoluPSG	$90
000EFABC B60C                       		dc.b	$B6,$0C
000EFABE E3                         		Return
000EFABF                            
000EFABF                            M97P1_Scratch3:
000EFABF B112                       		dc.b	$B1,$12
000EFAC1 B112                       		dc.b	$B1,$12
000EFAC3 B10C                       		dc.b	$B1,$0C
000EFAC5 B408                       		dc.b	$B4,$08
000EFAC7 EC70                       		VoluPSG	$70
000EFAC9 B404                       		dc.b	$B4,$04
000EFACB EC90                       		VoluPSG	$90
000EFACD B40C                       		dc.b	$B4,$0C
000EFACF B608                       		dc.b	$B6,$08
000EFAD1 EC70                       		VoluPSG	$70
000EFAD3 B604                       		dc.b	$B6,$04
000EFAD5 EC90                       		VoluPSG	$90
000EFAD7 B80C                       		dc.b	$B8,$0C
000EFAD9 E3                         		Return
000EFADA                            
000EFADA                            ; ===========================================================================
000EFADA                            ; ---------------------------------------------------------------------------
000EFADA                            ; PCM 2
000EFADA                            ; ---------------------------------------------------------------------------
000EFADA                            
000EFADA                            M97_PCM2:
000EFADA 8060 6060 6060 6060 60     		dc.b	$80,$60,$60,$60,$60,$60,$60,$60,$60
000EFAE3 8060                       		dc.b	$80,$60
000EFAE5 8060 6060 6060 6060 60     		dc.b	$80,$60,$60,$60,$60,$60,$60,$60,$60
000EFAEE                            
000EFAEE                            M97_P2_Loop1:
000EFAEE 8060 6060 2C               		dc.b	$80,$60,$60,$60,$30-4
000EFAF3 F53B                       		VoicPSG	$3B
000EFAF5 B134                       		dc.b	$B1,$30+4
000EFAF7 F700 02FF F3               		Loop	$00,$02,M97_P2_Loop1
000EFAFC F2                         		Halt
000EFAFD                            
000EFAFD                            ; ===========================================================================
000EFAFD                            ; ===========================================================================
000EFAFE 00                         		even
000EFAFE                            ; ---------------------------------------------------------------------------
000EFAFE                            ; Sound	effect pointers
000EFAFE                            ; ---------------------------------------------------------------------------
000EFAFE 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000EFB0A 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000EFB16 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000EFB22 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000EFB2E 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000EFB3A 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000EFB46 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000EFB52 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000EFB5E 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000EFB6A 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000EFB76 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000EFB82 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000EFB8E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000EFB9A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000EFBA6 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000EFBB2 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000EFBBE 0000 0000                  SoundD0Index:	dc.l SoundD0
000EFBC2                            SoundA0:	include	sound\soundA0.asm
000EFBC2                            SonicCD_92_Header:
000EFBC4 01                         	smpsHeaderTempoSFX	$01
000EFBC5 01                         	smpsHeaderChanSFX	$01
000EFBCC                            
000EFBCC                            SonicCD_92_FM1:
000EFBD0 AA04                       	dc.b	nF3, $04
000EFBD9 AF15                       	dc.b	nBb3, $15
000EFBDB F2                         	smpsStop
000EFBDC                            
000EFBDC                            SonicCD_92_Voices:
000EFBDC                            ;	Voice $00
000EFBDC                            ;	$0C
000EFBDC                            ;	$08, $08, $08, $08,	$1F, $1F, $1F, $1F,	$00, $0A, $00, $0A
000EFBDC                            ;	$00, $00, $00, $0A,	$FF, $FF, $FF, $FF,	$55, $81, $33, $81
000EFBDC                            	smpsVcAlgorithm		$04
000EFBDC                            	smpsVcFeedback		$01
000EFBDC                            	smpsVcDetune		$00, $00, $00, $00
000EFBDC                            	smpsVcCoarseFreq	$08, $08, $08, $08
000EFBDC                            	smpsVcRateScale		$00, $00, $00, $00
000EFBDC                            	smpsVcAttackRate	$1F, $1F, $1F, $1F
000EFBDC                            	smpsVcDecayRate1	$0A, $00, $0A, $00
000EFBDC                            	smpsVcDecayLevel	$0F, $0F, $0F, $0F
000EFBDC                            	smpsVcDecayRate2	$0A, $00, $00, $00
000EFBDC                            	smpsVcReleaseRate	$0F, $0F, $0F, $0F
000EFBF5                            	
000EFBF5                            	
000EFBF6 00                         		even
000EFBF6                            SoundA1:	incbin	sound\soundA1.bin
000EFC20                            		even
000EFC20                            SoundA2:	incbin	sound\soundA2.bin
000EFC40                            		even
000EFC40                            SoundA3:	incbin	sound\soundA3.bin
000EFC72                            		even
000EFC72                            SoundA4:	incbin	sound\soundA4.bin
000EFCA8                            		even
000EFCA8                            SoundA5:	incbin	sound\soundA5.bin
000EFCD4                            		even
000EFCD4                            SoundA6:	incbin	sound\soundA6.bin
000EFD04                            		even
000EFD04                            SoundA7:	incbin	sound\soundA7.bin
000EFD34                            		even
000EFD34                            SoundA8:	incbin	sound\soundA8.bin
000EFD68                            		even
000EFD68                            SoundA9:	incbin	sound\soundA9.bin
000EFD7A                            		even
000EFD7A                            SoundAA:	incbin	sound\soundAA.bin
000EFDBC                            		even
000EFDBC                            SoundAB:	incbin	sound\soundAB.bin
000EFDDC                            		even
000EFDDC                            SoundAC:	incbin	sound\soundAC.bin
000EFE10                            		even
000EFE10                            SoundAD:	incbin	sound\soundAD.bin
000EFE46                            		even
000EFE46                            SoundAE:	incbin	sound\soundAE.bin
000EFE90                            		even
000EFE90                            SoundAF:	incbin	sound\soundAF.bin
000EFEBE                            		even
000EFEBE                            SoundB0:	incbin	sound\soundB0.bin
000EFEF0                            		even
000EFEF0                            SoundB1:	incbin	sound\soundB1.bin
000EFF1C                            		even
000EFF1C                            SoundB2:	incbin	sound\soundB2.bin
000EFF6C                            		even
000EFF6C                            SoundB3:	incbin	sound\soundB3.bin
000EFFB6                            		even
000EFFB6                            SoundB4:	incbin	sound\soundB4.bin
000F0012                            		even
000F0012                            SoundB5:	incbin	sound\soundB5.bin
000F0040                            		even
000F0040                            SoundB6:	incbin	sound\soundB6.bin
000F005E                            		even
000F005E                            SoundB7:	incbin	sound\soundB7.bin
000F009A                            		even
000F009A                            SoundB8:	incbin	sound\soundB8.bin
000F00B8                            		even
000F00B8                            SoundB9:	incbin	sound\soundB9.bin
000F011C                            		even
000F011C                            SoundBA:	incbin	sound\soundBA.bin
000F0144                            		even
000F0144                            SoundBB:	incbin	sound\soundBB.bin
000F0170                            		even
000F0170                            SoundBC:	incbin	sound\soundBC.bin
000F01B2                            		even
000F01B2                            SoundBD:	incbin	sound\soundBD.bin
000F0206                            		even
000F0206                            SoundBE:	include	sound\soundBE.asm
000F0206                            SonicCD_9C_Header:
000F0208 01                         	smpsHeaderTempoSFX	$01
000F0209 01                         	smpsHeaderChanSFX	$01
000F0210                            
000F0210                            SonicCD_9C_FM1:
000F0212 8001                       	dc.b	nRst, $01
000F0219 CA22                       	dc.b	nCs6, $22
000F021E                            
000F021E                            SonicCD_9C_Jump1:
000F021E E7D1 02                    	dc.b	smpsNoAttack, nAb6, $02
000F0224 F2                         	smpsStop	; Unused
000F0225                            
000F0225                            SonicCD_9C_Voices:
000F0225                            ;	Voice $00
000F0225                            ;	$3C
000F0225                            ;	$00, $44, $02, $02,	$1F, $1F, $1F, $15,	$00, $1F, $00, $00
000F0225                            ;	$00, $00, $00, $00,	$0F, $0F, $0F, $0F,	$0D, $80, $28, $80
000F0225                            	smpsVcAlgorithm		$04
000F0225                            	smpsVcFeedback		$07
000F0225                            	smpsVcDetune		$00, $00, $04, $00
000F0225                            	smpsVcCoarseFreq	$02, $02, $04, $00
000F0225                            	smpsVcRateScale		$00, $00, $00, $00
000F0225                            	smpsVcAttackRate	$15, $1F, $1F, $1F
000F0225                            	smpsVcDecayRate1	$00, $00, $1F, $00
000F0225                            	smpsVcDecayLevel	$00, $00, $00, $00
000F0225                            	smpsVcDecayRate2	$00, $00, $00, $00
000F0225                            	smpsVcReleaseRate	$0F, $0F, $0F, $0F
000F023E                            	
000F023E                            	
000F023E                            		even
000F023E                            SoundBF:	incbin	sound\soundBF.bin
000F02B0                            		even
000F02B0                            SoundC0:	incbin	sound\soundC0.bin
000F02DE                            		even
000F02DE                            SoundC1:	incbin	sound\soundC1.bin
000F0318                            		even
000F0318                            SoundC2:	incbin	sound\soundC2.bin
000F0342                            		even
000F0342                            SoundC3:	incbin	sound\soundC3.bin
000F03BC                            		even
000F03BC                            SoundC4:	incbin	sound\soundC4.bin
000F03E4                            		even
000F03E4                            SoundC5:	incbin	sound\soundC5.bin
000F044C                            		even
000F044C                            SoundC6:	incbin	sound\soundC6.bin
000F048E                            		even
000F048E                            SoundC7:	incbin	sound\soundC7.bin
000F04BC                            		even
000F04BC                            SoundC8:	incbin	sound\soundC8.bin
000F04CE                            		even
000F04CE                            SoundC9:	incbin	sound\soundC9.bin
000F04FC                            		even
000F04FC                            SoundCA:	incbin	sound\soundCA.bin
000F052A                            		even
000F052A                            SoundCB:	incbin	sound\soundCB.bin
000F0576                            		even
000F0576                            SoundCC:	incbin	sound\soundCC.bin
000F05B0                            		even
000F05B0                            SoundCD:	incbin	sound\soundCD.bin
000F05BE                            		even
000F05BE                            SoundCE:	incbin	sound\soundCE.bin
000F05EC                            		even
000F05EC                            SoundCF:	incbin	sound\soundCF.bin
000F0624                            		even
000F0624                            SoundD0:	incbin	sound\soundD0.bin
000F065E                            		even
000F065E                            SegaPCM:	incbin	sound\segapcm.wav,$3A
000F6FD6                            SegaPCM_End:	even
000F6FD6                            
000F6FD6                            ; ===========================================================================
000F6FD6                            ; ---------------------------------------------------------------------------
000F6FD6                            ; Sound Test Screen
000F6FD6                            ; ---------------------------------------------------------------------------
000F6FD6                            ; SoundTest:
000F6FD6                            		include	"Screen Sound Test\Source - Sound Test.asm"
000F6FD6                            ; ===========================================================================
000F6FD6                            ; ---------------------------------------------------------------------------
000F6FD6                            ; Sound Test Screen
000F6FD6                            ; ---------------------------------------------------------------------------
000F6FD6                            
000F6FD6                            SoundTest:
000F6FD6 70E0                       		moveq	#$FFFFFFE0,d0				; set sound ID to "Fade music"
000F6FD8 4EB8 270E                  		jsr	PlaySound_Special			; play sound ID
000F6FDC 4EB8 292C                  		jsr	ClearPLC				; clear PLC list
000F6FE0 4EB8 04FE                  		jsr	Pal_FadeFrom				; fade the screen out
000F6FE4                            
000F6FE4                            	; --- Setup/clearing ---
000F6FE4                            
000F6FE4 21FC 0000 0AAA FF92        		move.l	#NullBlank,(HBlankRout).w		; set H-blank routine
000F6FEC 21FC 0000 0000 FF98        		move.l	#VB_SoundTest_NoHB,(VBlankRout).w	; set V-blank routine
000F6FF4 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port
000F6FFA 4DED 0004                  		lea	$04(a5),a6				; load VDP control port
000F6FFE 3CBC 8004                  		move.w	#$8000|%00000100,(a6)			; 00LH 01CD - Leftover SMS bar (0N|1Y) | H-Interrupt (0N|1Y) | H,V Counter (0N|1Y) | Disable video signal (0N|1Y)
000F7002 3CBC 8174                  		move.w	#$8100|%01110100,(a6)			; SDVM P100 - SMS mode (0N|1Y) | Display (0N|1Y) | V-Interrupt (0N|1Y) | DMA (0N|1Y) | V-resolution (0-1C|1-1E)
000F7006 3CBC 8230                  		move.w	#$8200|((($C000)>>$0A)&$FF),(a6)	; 00FE DCBA - Scroll Plane A Map Table VRam address
000F700A 3CBC 833C                  		move.w	#$8300|((($F000)>>$0A)&$FF),(a6)	; 00FE DCB0 / 00FE DC00 (20 H-resol) - Window Plane A Map Table VRam address
000F700E 3CBC 8407                  		move.w	#$8400|((($E000)>>$0D)&$FF),(a6)	; 0000 0FED - Scroll Plane B Map Table VRam address
000F7012 3CBC 857C                  		move.w	#$8500|((($F800)>>$09)&$FF),(a6)	; 0FED CBA9 / 0FED CBA0 (20 H-resol) - Sprite Plane Map Table VRam address
000F7016 3CBC 8600                  		move.w	#$8600|%00000000,(a6)			; 0000 0000 - Unknown/Unused Register
000F701A 3CBC 8720                  		move.w	#$8700|$20,(a6)				; 00PP CCCC - Backdrop Colour: Palette Line | Colour ID
000F701E 3CBC 8800                  		move.w	#$8800|%00000000,(a6)			; 0000 0000 - Unknown/Unused Register
000F7022 3CBC 8900                  		move.w	#$8900|%00000000,(a6)			; 0000 0000 - Unknown/Unused Register
000F7026 3CBC 8ADF                  		move.w	#$8A00|$DF,(a6)				; 7654 3210 - H-Interrupt Register
000F702A 3CBC 8B03                  		move.w	#$8B00|%00000011,(a6)			; 0000 EVHH - External Interrupt (0N|1Y) | V-Scroll (0-Full|1-2Celled) | H-Scroll: (00-Full|10-Celled|11-Sliced)
000F702E 3CBC 8C81                  		move.w	#$8C00|%10000001,(a6)			; APHE SNNB - H-resol (0N|1Y) | Pixel int (0N|1Y) | H-sync (0N|1Y) | Extern-pix (0N|1Y) | S/H (0N|1Y) | Interlace (00N|01Y|11-Split) | H-resol (0-20|1-28)
000F7032 3CBC 8D3F                  		move.w	#$8D00|((($FC00)>>$0A)&$FF),(a6)	; 00FE DCBA - Horizontal Scroll Table VRam address
000F7036 3CBC 8E00                  		move.w	#$8E00|%00000000,(a6)			; 0000 0000 - Unknown/Unused Register
000F703A 3CBC 8F02                  		move.w	#$8F00|$02,(a6)				; 7654 3210 - Auto Increament
000F703E 3CBC 9011                  		move.w	#$9000|%00010001,(a6)			; 00VV 00HH - Plane Y Size (00-20|01-40|11-80) | Plane X size (00-20|01-40|11-80)
000F7042 3CBC 9100                  		move.w	#$9100|$00,(a6)				; 7654 3210 - Window Horizontal Position
000F7046 3CBC 9200                  		move.w	#$9200|$00,(a6)				; 7654 3210 - Window Vertical Position
000F704A                            
000F704A                            	; --- VDP Memory ---
000F704A                            
000F704A 203C 4000 0080             		move.l	#$40000080,d0				; VRAM
000F7050 323C FFFF                  		move.w	#$FFFF,d1				; size to clear
000F7054 6100 0000                  		bsr.w	ClearVDP				; clear VDP memory section
000F7058                            
000F7058 203C 4000 0090             		move.l	#$40000090,d0				; VSRAM
000F705E 323C 0080                  		move.w	#$0080,d1				; size to clear
000F7062 6100 0000                  		bsr.w	ClearVDP				; clear VDP memory section
000F7066                            
000F7066                            	; I don't think DMA "Fill" works for CRAM (plus it should be black already)
000F7066                            	;	move.l	#$C0000080,d0				; CRAM
000F7066                            	;	move.w	#$0080,d1				; size to clear
000F7066                            	;	bsr.w	ClearVDP				; clear VDP memory section
000F7066                            
000F7066                            	; --- 68k Memory ---
000F7066                            
000F7066 7000                       		moveq	#$00,d0					; clear d0
000F7068                            
000F7068 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; main RAM
000F706E 323C 0A3F                  		move.w	#(($A400/$04)/$04)-1,d1			; set size of RAM
000F7072                            
000F7072                            ST_ClearMain:
000F7072 22C0                       		move.l	d0,(a1)+				; clear RAM
000F7074 22C0                       		move.l	d0,(a1)+				; ''
000F7076 22C0                       		move.l	d0,(a1)+				; ''
000F7078 22C0                       		move.l	d0,(a1)+				; ''
000F707A 51C9 FFF6                  		dbf	d1,ST_ClearMain				; repeat til main RAM is clear
000F707E                            
000F707E 43F8 F800                  		lea	($FFFFF800).w,a1			; sprite RAM
000F7082 724F                       		moveq	#(($280/$04)/$02)-1,d1			; set size of RAM
000F7084                            
000F7084                            ST_ClearSprites:
000F7084 22C0                       		move.l	d0,(a1)+				; clear RAM
000F7086 22C0                       		move.l	d0,(a1)+				; ''
000F7088 51C9 FFFA                  		dbf	d1,ST_ClearSprites			; repeat til sprites art clear
000F708C                            
000F708C 43F8 CC00                  		lea	($FFFFCC00).w,a1			; H-Scroll RAM
000F7090 727F                       		moveq	#(($400/$04)/$02)-1,d1			; set size of RAM
000F7092                            
000F7092                            ST_ClearHScroll:
000F7092 22C0                       		move.l	d0,(a1)+				; clear RAM
000F7094 22C0                       		move.l	d0,(a1)+				; ''
000F7096 51C9 FFFA                  		dbf	d1,ST_ClearHScroll			; repeat til H-Scroll is clear
000F709A                            
000F709A 21C0 F616                  		move.l	d0,($FFFFF616).w			; clear V-scroll
000F709E                            
000F709E                            	; --- Loading data ---
000F709E                            
000F709E 41F9 0000 0000             		lea	(Pal_Sound).l,a0			; load palette data
000F70A4 43F8 FB80                  		lea	($FFFFFB80).w,a1			; load palette RAM
000F70A8 7200                       		moveq	#(((Pal_Sound_End-Pal_Sound)/4)/2)-1,d1	; set size of palette to laod
000F70AA                            
000F70AA                            ST_LoadPal:
000F70AA 22D8                       		move.l	(a0)+,(a1)+				; load palette
000F70AC 22D8                       		move.l	(a0)+,(a1)+				; ''
000F70AE 51C9 FFFA                  		dbf	d1,ST_LoadPal				; repeat until entire palette is loaded
000F70B2                            
000F70B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l			; set VRAM address to decompress to
000F70BC 41F9 0000 0000             		lea	(Art_Piano).l,a0			; load art to decompress
000F70C2 4EB8 277E                  		jsr	NemDec					; decompress and dump
000F70C6                            
000F70C6 23FC 5000 0002 00C0 0004   		move.l	#$50000002,($C00004).l			; set VRAM address to decompress to
000F70D0 41F9 0000 0000             		lea	(Art_Keys).l,a0				; load art to decompress
000F70D6 4EB8 277E                  		jsr	NemDec					; decompress and dump
000F70DA                            
000F70DA 23FC 5800 0002 00C0 0004   		move.l	#$58000002,($C00004).l			; set VRAM address to decompress to
000F70E4 41F9 0000 0000             		lea	(Art_Font).l,a0				; load art to decompress
000F70EA 4EB8 277E                  		jsr	NemDec					; decompress and dump
000F70EE                            
000F70EE 23FC 6C00 0002 00C0 0004   		move.l	#$6C000002,($C00004).l			; set VRAM address to decompress to
000F70F8 41F9 0000 0000             		lea	(Art_Extras).l,a0			; load art to decompress
000F70FE 4EB8 277E                  		jsr	NemDec					; decompress and dump
000F7102                            
000F7102 41F9 0000 0000             		lea	(Map_Piano).l,a0			; load plane A map address
000F7108 43F9 FFFF 6000             		lea	($FFFF6000).l,a1			; load map dumping area to a1
000F710E 7000                       		moveq	#$00,d0					; clear map add value
000F7110 4EB8 2A72                  		jsr	EniDec					; decompress and dump
000F7114 43F9 FFFF 6000             		lea	($FFFF6000).l,a1			; load mappings
000F711A 203C 6000 0003             		move.l	#$60000003,d0				; set VRAM address
000F7120 7227                       		moveq	#$28-1,d1				; set width
000F7122 741B                       		moveq	#$1C-1,d2				; set height
000F7124 4EB9 0000 0000             		jsr	MapScreen				; load mappings to plane in VRAM
000F712A 43F9 FFFF 7220             		lea	($FFFF7220).l,a1			; load mappings of brighter bottom font bar area
000F7130 7227                       		moveq	#$28-1,d1				; set width
000F7132 740E                       		moveq	#$0F-1,d2				; set height
000F7134 4EB9 0000 0000             		jsr	MapScreen				; load mappings to plane in VRAM
000F713A                            
000F713A                            	; --- Final subroutines ---
000F713A                            
000F713A 41F9 FFFF 6050             		lea	($FFFF6050).l,a0			; load piano mappings
000F7140 43F8 8000                  		lea	($FFFF8000).w,a1			; load plane buffer
000F7144 7415                       		moveq	#$16-1,d2				; set number of rows to copy
000F7146                            
000F7146                            ST_LoadMapRow:
000F7146 45D1                       		lea	(a1),a2					; load address to a2
000F7148 43E9 0080                  		lea	$80(a1),a1				; advance to next row for next pass
000F714C 7204                       		moveq	#($28/$08)-1,d1				; set number of tile maps to copy
000F714E                            
000F714E                            ST_LoadMapLine:
000F714E 24D8                       		move.l	(a0)+,(a2)+				; copy mappings to buffer
000F7150 24D8                       		move.l	(a0)+,(a2)+				; ''
000F7152 24D8                       		move.l	(a0)+,(a2)+				; ''
000F7154 24D8                       		move.l	(a0)+,(a2)+				; ''
000F7156 51C9 FFF6                  		dbf	d1,ST_LoadMapLine			; repeat for entire row
000F715A 51CA FFEA                  		dbf	d2,ST_LoadMapRow			; repeat for all rows
000F715E 08F8 0000 A000             		bset.b	#$00,($FFFFA000).w			; set to redraw the plane
000F7164                            
000F7164 6100 0000                  		bsr.w	ST_SetupKeyColours			; setup the colour fades/variations for the keys
000F7168                            
000F7168                            	; --- Final variables ---
000F7168                            
000F7168 70FF                       		moveq	#$FFFFFFFF,d0				; set "previous" X and Y menu positions to something null
000F716A 21C0 A024                  		move.l	d0,($FFFFA020+4).w			; ''
000F716E 21C0 A034                  		move.l	d0,($FFFFA030+4).w			; ''
000F7172 31FC 0118 A026             		move.w	#$0118,($FFFFA026).w			; set X position of text scroll
000F7178                            
000F7178 11FC 0080 900B             		move.b	#$80,($FFFF9000+$0B).w			; set PCM1 and2 as already rendered (this'll force FM6 to render if no music is playing)
000F717E                            
000F717E                            		; reloading a5/a6 just in case...
000F717E                            
000F717E 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port
000F7184 4DED 0004                  		lea	$04(a5),a6				; load VDP control port
000F7188 3CBC 8014                  		move.w	#$8000|%00010100,(a6)			; 00LH 01CD - Leftover SMS bar (0N|1Y) | H-Interrupt (0N|1Y) | H,V Counter (0N|1Y) | Disable video signal (0N|1Y)
000F718C 3CBC 8174                  		move.w	#$8100|%01110100,(a6)			; SDVM P100 - SMS mode (0N|1Y) | Display (0N|1Y) | V-Interrupt (0N|1Y) | DMA (0N|1Y) | V-resolution (0-1C|1-1E)
000F7190 21FC 0000 0000 FF98        		move.l	#VB_SoundTest,(VBlankRout).w		; set V-blank routine
000F7198 70E4                       		moveq	#$FFFFFFE4,d0				; set sound ID to "Stop music"
000F719A 4EB8 270E                  		jsr	PlaySound_Special			; play sound ID
000F719E 50F8 F62A                  		st.b	($FFFFF62A).w				; set 68k as ready
000F71A2 4EB8 0A9E                  		jsr	WaitVBlank				; wait for V-blank
000F71A6 4EB9 0000 0000             		jsr	SB_SoundTest				; rub subroutines
000F71AC 4EB8 057C                  		jsr	Pal_FadeTo				; fade in
000F71B0                            
000F71B0                            ; ---------------------------------------------------------------------------
000F71B0                            ; Main Loop - Sound Test
000F71B0                            ; ---------------------------------------------------------------------------
000F71B0                            
000F71B0                            ML_SoundTest:
000F71B0 50F8 F62A                  		st.b	($FFFFF62A).w				; set 68k as ready
000F71B4 4EB8 0A9E                  		jsr	WaitVBlank				; wait for V-blank
000F71B8 6100                       		bsr.s	SB_SoundTest				; run subroutines
000F71BA 60F4                       	bra.s	ML_SoundTest
000F71BC 4A38 F605                  		tst.b	($FFFFF605).w				; has start been pressed?
000F71C0 6AEE                       		bpl.s	ML_SoundTest				; if not, branch
000F71C2 21FC 0000 244E FF92        		move.l	#PalToCRAM,(HBlankRout).w		; set H-blank routine
000F71CA 21FC 0000 1FC4 FF98        		move.l	#loc_B10,(VBlankRout).w			; set V-blank routine
000F71D2 11FC 0004 F600             		move.b	#$04,($FFFFF600).w			; set game mode to 04 (Title Screen)
000F71D8 4E75                       		rts						; return
000F71DA                            
000F71DA                            ; ---------------------------------------------------------------------------
000F71DA                            ; Subroutines - Sound Test
000F71DA                            ; ---------------------------------------------------------------------------
000F71DA                            
000F71DA                            SB_SoundTest:
000F71DA 6100 0000                  		bsr.w	ST_DrawFont				; draw the font (doing this BEFORE the control so scroll remains in sync)
000F71DE 6100 0000                  		bsr.w	ST_Control				; read controls and perform options
000F71E2 6100                       		bsr.s	ST_DrawBars				; draw the transparent bars correctly
000F71E4 6100 0000                  		bsr.w	ST_DrawPaino				; draw the piano background boards correctly
000F71E8 6100 0000                  		bsr.w	ST_DrawKeys				; draw the keys on the piano
000F71EC                            
000F71EC                            ; ---------------------------------------------------------------------------
000F71EC                            ; Subroutine to scroll the text font of the music/sound being played
000F71EC                            ; ---------------------------------------------------------------------------
000F71EC                            
000F71EC                            ST_ScrollFont:
000F71EC 7000                       		moveq	#$00,d0					; clear d0
000F71EE 3038 A026                  		move.w	($FFFFA026).w,d0			; load text position
000F71F2 4840                       		swap	d0					; send to FG word
000F71F4 43F8 CEF4                  		lea	($FFFFCEF4).w,a1			; load scroll buffer area where text is
000F71F8 22C0                       		move.l	d0,(a1)+				; set scroll position of text
000F71FA 22C0                       		move.l	d0,(a1)+				; ''
000F71FC 22C0                       		move.l	d0,(a1)+				; ''
000F71FE 22C0                       		move.l	d0,(a1)+				; ''
000F7200 22C0                       		move.l	d0,(a1)+				; ''
000F7202 22C0                       		move.l	d0,(a1)+				; ''
000F7204 22C0                       		move.l	d0,(a1)+				; ''
000F7206 22C0                       		move.l	d0,(a1)+				; ''
000F7208 22C0                       		move.l	d0,(a1)+				; ''
000F720A 22C0                       		move.l	d0,(a1)+				; ''
000F720C 22C0                       		move.l	d0,(a1)+				; ''
000F720E 22C0                       		move.l	d0,(a1)+				; ''
000F7210 22C0                       		move.l	d0,(a1)+				; ''
000F7212 22C0                       		move.l	d0,(a1)+				; ''
000F7214 4E75                       		rts						; return
000F7216                            
000F7216                            ; ===========================================================================
000F7216                            ; ---------------------------------------------------------------------------
000F7216                            ; Drawing the transparent font bars
000F7216                            ; ---------------------------------------------------------------------------
000F7216                            
000F7216                            ST_DrawBars:
000F7216 203C 002D 0000             		move.l	#$002D0000,d0				; clear all registers
000F721C 2200                       		move.l	d0,d1					; ''
000F721E 2400                       		move.l	d0,d2					; ''
000F7220 2600                       		move.l	d0,d3					; ''
000F7222 2800                       		move.l	d0,d4					; ''
000F7224 2A00                       		move.l	d0,d5					; ''
000F7226 2C00                       		move.l	d0,d6					; ''
000F7228 2E00                       		move.l	d0,d7					; ''
000F722A 43F9 FFFF 5EA0             		lea	($FFFF5E00+($28*4)).l,a1		; load bar VSRAM buffer
000F7230 48E1 FF00                  		movem.l	d0-d7,-(a1)				; clear buffer
000F7234 48E1 FF00                  		movem.l	d0-d7,-(a1)				; ''
000F7238 48E1 FF00                  		movem.l	d0-d7,-(a1)				; ''
000F723C 48E1 FF00                  		movem.l	d0-d7,-(a1)				; ''
000F7240 48E1 FF00                  		movem.l	d0-d7,-(a1)				; ''
000F7244 41F9 FFFF A010             		lea	($FFFFA010).l,a0			; load bar to display
000F724A 45F9 0000 0000             		lea	(STDB_Dark).l,a2			; load brightness to use
000F7250 6100                       		bsr.s	STDB_Draw				; draw the bar
000F7252 41F9 FFFF A014             		lea	($FFFFA014).l,a0			; load bar to display
000F7258 45F9 0000 0000             		lea	(STDB_LightIn).l,a2			; load brightness to use
000F725E 6100                       		bsr.s	STDB_Draw				; draw the bar
000F7260 41F9 FFFF A018             		lea	($FFFFA018).l,a0			; load bar to display
000F7266 45F9 0000 0000             		lea	(STDB_Dark).l,a2			; load brightness to use
000F726C 6100                       		bsr.s	STDB_Draw				; draw the bar
000F726E 41F9 FFFF A01C             		lea	($FFFFA01C).l,a0			; load bar to display
000F7274 45F9 0000 0000             		lea	(STDB_LightIn).l,a2			; load brightness to use
000F727A                            
000F727A                            STDB_Draw:
000F727A 7C00                       		moveq	#$00,d6					; clear d6
000F727C 1C28 0002                  		move.b	$02(a0),d6				; load size
000F7280 5346                       		subq.w	#$01,d6					; minus 1 for dbf
000F7282 6B00                       		bmi.s	STDB_NoDraw				; if there is no size, branch
000F7284 7000                       		moveq	#$00,d0					; clear d0
000F7286 1010                       		move.b	(a0),d0					; load bar position
000F7288 0C00 0028                  		cmpi.b	#$28,d0					; is it too far down?
000F728C 6400                       		bhs.s	STDB_NoDraw				; if so, branch
000F728E D040                       		add.w	d0,d0					; multiply by long-word
000F7290 D040                       		add.w	d0,d0					; ''
000F7292 43F9 FFFF 5E00             		lea	($FFFF5E00).l,a1			; load buffer
000F7298 D2C0                       		adda.w	d0,a1					; advance to correct starting point
000F729A 0C06 002A                  		cmpi.b	#$28+$02,d6				; is the size too large?
000F729E 6300                       		bls.s	STDB_NoMaxSize				; if not, branch
000F72A0 7C2A                       		moveq	#$28+$02,d6				; set to maximum size
000F72A2                            
000F72A2                            STDB_NoMaxSize:
000F72A2 22EA 0004                  		move.l	$04(a2),(a1)+				; draw edge
000F72A6 51CE 0000                  		dbf	d6,STDB_NoSingle			; if not finished, branch
000F72AA 4E75                       		rts						; return
000F72AC                            
000F72AC                            STDB_NoSingle:
000F72AC 5546                       		subq.w	#$02,d6					; minus size of minimum without middle
000F72AE 6B00                       		bmi.s	STDB_End				; if there's no middle, branch
000F72B0                            
000F72B0                            STDB_NoEnd:
000F72B0 22D2                       		move.l	(a2),(a1)+				; draw ligh section
000F72B2 51CE FFFC                  		dbf	d6,STDB_NoEnd				; repeat until all done
000F72B6                            
000F72B6                            STDB_End:
000F72B6 5246                       		addq.w	#$01,d6					; adjust counter
000F72B8 6B00                       		bmi.s	STDB_NoEdge				; if it was 0001 originaly, branch
000F72BA 22EA 0004                  		move.l	$04(a2),(a1)+				; draw egde again
000F72BE                            
000F72BE                            STDB_NoEdge:
000F72BE 22EA 0008                  		move.l	$08(a2),(a1)+				; draw black line
000F72C2                            
000F72C2                            STDB_NoDraw:
000F72C2 4E75                       		rts						; return
000F72C4                            
000F72C4                            	; --- Bright bar colours ---
000F72C4                            
000F72C4 0005 0050                  STDB_Light:	dc.l	$00050050				; middle
000F72C8 002D 0028                  		dc.l	$002D0028				; edges
000F72CC 0055 0078                  		dc.l	$00550078				; black line
000F72D0                            
000F72D0                            	; --- Dark bar colours ---
000F72D0                            
000F72D0 002D 0028                  STDB_Dark:	dc.l	$002D0028				; middle
000F72D4 002D 0028                  		dc.l	$002D0028				; edges
000F72D8 0055 0078                  		dc.l	$00550078				; black line
000F72DC                            
000F72DC                            	; --- Bright bar colours (WITHOUT THE EDGE) ---
000F72DC                            	; For being displayed INSIDE a dark bar ONLY
000F72DC                            
000F72DC 0005 0050                  STDB_LightIn:	dc.l	$00050050				; middle
000F72E0 0005 0050                  		dc.l	$00050050				; edges
000F72E4 0005 0050                  		dc.l	$00050050				; black line	
000F72E8                            
000F72E8                            ; ===========================================================================
000F72E8                            ; ---------------------------------------------------------------------------
000F72E8                            ; Subroutine to draw the font onto the bars correctly
000F72E8                            ; ---------------------------------------------------------------------------
000F72E8                            
000F72E8                            ST_DrawFont:
000F72E8                            
000F72E8                            	; --- The song name ---
000F72E8                            
000F72E8 3038 A020                  		move.w	($FFFFA020).w,d0			; load top menu X position
000F72EC 3238 A022                  		move.w	($FFFFA022).w,d1			; is a change in progress?
000F72F0 6600                       		bne.s	STDF_Name				; if so, branch
000F72F2 B078 A024                  		cmp.w	($FFFFA024).w,d0			; has it changed?
000F72F6 6700                       		beq.s	STDF_NoName				; if not, branch
000F72F8 31C0 A024                  		move.w	d0,($FFFFA024).w			; update change
000F72FC                            
000F72FC                            STDF_Name:
000F72FC D040                       		add.w	d0,d0					; multiply by size of long-word
000F72FE D040                       		add.w	d0,d0					; ''
000F7300 41F9 0000 0000             		lea	(STC_List).l,a0				; load font list
000F7306 2070 0000                  		movea.l	(a0,d0.w),a0				; load correct string
000F730A D0C1                       		adda.w	d1,a0					; advance to correct character
000F730C D241                       		add.w	d1,d1					; multiply by size of word for VRAM
000F730E 5478 A022                  		addq.w	#$02,($FFFFA022).w			; advance to next character for next frame
000F7312 0478 0010 A026             		subi.w	#$0010,($FFFFA026).w			; decrease position
000F7318 1618                       		move.b	(a0)+,d3				; load character
000F731A 6600                       		bne.s	STDF_NoNameFinish			; if valid, branch
000F731C 4278 A022                  		clr.w	($FFFFA022).w				; clear change position
000F7320                            
000F7320                            STDF_NoNameFinish:
000F7320                            
000F7320 203C 0003 4C04             		move.l	#$00034C04,d0				; prepare VRAM address
000F7326 D041                       		add.w	d1,d0
000F7328 4840                       		swap	d0
000F732A 46FC 2700                  		move	#$2700,sr				; disable interrupts
000F732E 3CBC 8F80                  		move.w	#$8F80,(a6)				; set to increment a single line
000F7332 6100 0000                  		bsr.w	ST_DrawChar				; render the character
000F7336 1618                       		move.b	(a0)+,d3				; load character
000F7338 6600                       		bne.s	STDF_NoNameFinish2			; if valid, branch
000F733A 4278 A022                  		clr.w	($FFFFA022).w				; clear change position
000F733E 7620                       		moveq	#' ',d3
000F7340                            
000F7340                            STDF_NoNameFinish2:
000F7340 6100 0000                  		bsr.w	ST_DrawChar				; render the character
000F7344 7620                       		moveq	#' ',d3					; set to load the space character
000F7346 6100 0000                  		bsr.w	ST_DrawChar				; ''
000F734A 3CBC 8F02                  		move.w	#$8F02,(a6)				; revert increment mode
000F734E 46FC 2300                  		move	#$2300,sr				; re-enable interrupts
000F7352                            
000F7352                            STDF_NoName:
000F7352                            
000F7352                            	; --- The options ---
000F7352                            
000F7352 3038 A030                  		move.w	($FFFFA030).w,d0			; load top menu X position
000F7356 B078 A034                  		cmp.w	($FFFFA034).w,d0			; has it changed?
000F735A 6700                       		beq.s	STDF_NoOption				; if not, branch
000F735C 31C0 A034                  		move.w	d0,($FFFFA034).w			; update change
000F7360 E748                       		lsl.w	#$03,d0					; multiply by size of 2 long-words
000F7362 41F9 0000 0000             		lea	(STC_Opt).l,a0				; load font list
000F7368 2070 0000                  		movea.l	(a0,d0.w),a0				; load correct string
000F736C                            
000F736C                            
000F736C 203C 4D02 0003             		move.l	#$4D020003,d0
000F7372 46FC 2700                  		move	#$2700,sr				; disable interrupts
000F7376 3CBC 8F80                  		move.w	#$8F80,(a6)				; set to increment a single line
000F737A 6100                       		bsr.s	ST_DrawText
000F737C 3CBC 8F02                  		move.w	#$8F02,(a6)				; revert increment mode
000F7380 46FC 2300                  		move	#$2300,sr				; re-enable interrupts
000F7384                            
000F7384                            STDF_NoOption:
000F7384 4E75                       		rts						; return
000F7386                            
000F7386                            ; ---------------------------------------------------------------------------
000F7386                            ; Drawing text correctly to VRAM
000F7386                            ; ---------------------------------------------------------------------------
000F7386                            
000F7386                            ST_DrawText:
000F7386 2200                       		move.l	d0,d1					; get dark VRAM address
000F7388 0681 0280 0000             		addi.l	#(($05*$80)<<$10),d1			; ''
000F738E 243C 0002 0000             		move.l	#$00020000,d2				; set advance amount
000F7394 45F9 0000 0000             		lea	(Map_Font).l,a2				; load mappings address
000F739A 1618                       		move.b	(a0)+,d3				; load character
000F739C                            
000F739C                            STDT_NextChar:
000F739C 6100                       		bsr.s	STDT_RenderChar				; draw character
000F739E 1618                       		move.b	(a0)+,d3				; load next character
000F73A0 66FA                       		bne.s	STDT_NextChar				; if not finished, branch
000F73A2 4E75                       		rts						; return
000F73A4                            
000F73A4                            ; ---------------------------------------------------------------------------
000F73A4                            ; Subroutine to render a single character
000F73A4                            ; ---------------------------------------------------------------------------
000F73A4                            
000F73A4                            ST_DrawChar:
000F73A4 2200                       		move.l	d0,d1					; get dark VRAM address
000F73A6 0681 0280 0000             		addi.l	#(($05*$80)<<$10),d1			; ''
000F73AC 243C 0002 0000             		move.l	#$00020000,d2				; set advance amount
000F73B2 45F9 0000 0000             		lea	(Map_Font).l,a2				; load mappings address
000F73B8                            
000F73B8                            STDT_RenderChar:
000F73B8 7800                       		moveq	#$00,d4					; set size as single tile
000F73BA 43D2                       		lea	(a2),a1					; reload font mappings
000F73BC 0C03 0020                  		cmpi.b	#' ',d3					; is it a space?
000F73C0 6700 0000                  		beq.w	STDT_Space				; if so, branch
000F73C4 5849                       		addq.w	#$04,a1					; skip to next special character
000F73C6 0C03 003C                  		cmpi.b	#'<',d3					; is it a *insert symbol here*?
000F73CA 6700 0000                  		beq.w	STDT_Space				; if so, branch
000F73CE 5849                       		addq.w	#$04,a1					; skip to next special character
000F73D0 0C03 003E                  		cmpi.b	#'>',d3					; is it a *insert symbol here*?
000F73D4 6700 0000                  		beq.w	STDT_Space				; if so, branch
000F73D8 0C03 0023                  		cmpi.b	#'#',d3					; is it a variable?
000F73DC 6600                       		bne.s	STDT_NoVar				; if not, branch
000F73DE 7600                       		moveq	#$00,d3					; clear d3
000F73E0 1618                       		move.b	(a0)+,d3				; load variable number
000F73E2 0403 0030                  		subi.b	#'0',d3					; ''
000F73E6 D643                       		add.w	d3,d3					; multiply by word
000F73E8 78FF                       		moveq	#$FFFFFFFF,d4				; load RAM address of variable
000F73EA 383B 3000                  		move.w	STDT_VarList(pc,d3.w),d4		; ''
000F73EE 2244                       		move.l	d4,a1					; ''
000F73F0 1611                       		move.b	(a1),d3					; load variable
000F73F2 1803                       		move.b	d3,d4					; get first nybble
000F73F4 E80C                       		lsr.b	#$04,d4					; ''
000F73F6 0244 000F                  		andi.w	#$000F,d4				; ''
000F73FA 5604                       		addq.b	#$03,d4					; adjust it
000F73FC D844                       		add.w	d4,d4					; multiply by long-word
000F73FE D844                       		add.w	d4,d4					; ''
000F7400 43F2 4000                  		lea	(a2,d4.w),a1				; load correct font mappings
000F7404 2C81                       		move.l	d1,(a6)					; set VRAM for dark
000F7406 2AA9 00B8                  		move.l	$2E*4(a1),(a5)				; write character
000F740A 2C80                       		move.l	d0,(a6)					; set VRAM address
000F740C 2A99                       		move.l	(a1)+,(a5)				; write character
000F740E D082                       		add.l	d2,d0					; advance addresses
000F7410 D282                       		add.l	d2,d1					; ''
000F7412 7800                       		moveq	#$00,d4					; clear nybble size
000F7414 0243 000F                  		andi.w	#$000F,d3				; get second nybble
000F7418 5603                       		addq.b	#$03,d3					; adjust it
000F741A 43D2                       		lea	(a2),a1					; load font mappings address
000F741C 6000                       		bra.s	STDT_Special				; continue normally
000F741E                            
000F741E F014                       STDT_VarList:	dc.w	$F014					; #0 - Pitch
000F7420 F015                       		dc.w	$F015					; #1 - Tempo
000F7422 F016                       		dc.w	$F016					; #2 - Volume
000F7424 0000                       		dc.w	$0000					; #3 - Unused...
000F7426                            								; #4
000F7426                            								; #5 ...etc up to #9...
000F7426                            
000F7426                            STDT_NoVar:
000F7426 0C03 002D                  		cmpi.b	#'-',d3					; is it a dash symbol?
000F742A 6600                       		bne.s	STDT_NoDash				; if not, branch
000F742C 43EA 009C                  		lea	$27*4(a2),a1
000F7430 6000                       		bra.s	STDT_Space
000F7432                            
000F7432                            STDT_NoDash:
000F7432 0C03 005A                  		cmpi.b	#'Z',d3					; is it a regular letter or number?
000F7436 6300                       		bls.s	STDT_Letter				; if so, branch
000F7438 0403 0061                  		subi.b	#'a',d3					; subtract "a" for rendering button graphics
000F743C D643                       		add.w	d3,d3					; multiply by 2 (since the tiles are twice the size
000F743E 43EA 00A0                  		lea	$28*4(a2),a1				; advance to button graphics
000F7442 7801                       		moveq	#$01,d4					; set size as double tile
000F7444 6000                       		bra.s	STDT_Special				; render the buttons
000F7446                            
000F7446                            STDT_Letter:
000F7446 0C03 0039                  		cmpi.b	#'9',d3					; is it a number?
000F744A 6300                       		bls.s	STDT_Number				; if so, branch
000F744C 5F03                       		subq.b	#'A'-('9'+1),d3				; adjust to letters
000F744E                            
000F744E                            STDT_Number:
000F744E 0403 002F                  		subi.b	#'0'-1,d3				; adjust character
000F7452                            
000F7452                            STDT_Special:
000F7452 4883                       		ext.w	d3					; clear upper byte
000F7454 D643                       		add.w	d3,d3					; multiply by long-word
000F7456 D643                       		add.w	d3,d3					; ''
000F7458 D2C3                       		adda.w	d3,a1					; advance to correct character
000F745A                            
000F745A                            STDT_Space:
000F745A 2C81                       		move.l	d1,(a6)					; set VRAM for dark
000F745C 2AA9 00B8                  		move.l	$2E*4(a1),(a5)				; write character
000F7460 2C80                       		move.l	d0,(a6)					; set VRAM address
000F7462 2A99                       		move.l	(a1)+,(a5)				; write character
000F7464 D082                       		add.l	d2,d0					; advance addresses
000F7466 D282                       		add.l	d2,d1					; ''
000F7468 51CC FFF0                  		dbf	d4,STDT_Space				; repeat for size
000F746C 4E75                       		rts						; return
000F746E                            
000F746E                            ; ===========================================================================
000F746E                            ; ---------------------------------------------------------------------------
000F746E                            ; Subroutine to control the menu correctly
000F746E                            ; ---------------------------------------------------------------------------
000F746E                            
000F746E                            ST_Control:
000F746E 2038 A004                  		move.l	($FFFFA004).w,d0			; load routine
000F7472 6600                       		bne.s	STC_ValidRoutine			; if the routine is valid, branch
000F7474 203C 0000 0000             		move.l	#STC_Intro,d0				; set starting routine
000F747A 21C0 A004                  		move.l	d0,($FFFFA004).w			; ''
000F747E                            
000F747E                            STC_ValidRoutine:
000F747E 2040                       		movea.l	d0,a0					; set address
000F7480 4ED0                       		jmp	(a0)					; run address
000F7482                            
000F7482                            ; ===========================================================================
000F7482                            ; ---------------------------------------------------------------------------
000F7482                            ; The intro
000F7482                            ; ---------------------------------------------------------------------------
000F7482                            
000F7482                            STC_Intro:
000F7482 21FC 0C00 0000 A010        		move.l	#$0C000000,($FFFFA010).w		; set starting position/size of bars
000F748A 21FC 0C00 0000 A014        		move.l	#$0C000000,($FFFFA014).w		; ''
000F7492 21FC 1C00 0000 A018        		move.l	#$1C000000,($FFFFA018).w		; ''
000F749A 21FC 1C00 0000 A01C        		move.l	#$1C000000,($FFFFA01C).w		; ''
000F74A2 21FC 0000 0000 A004        		move.l	#STC_Intro_BarsIn,($FFFFA004).w		; set next routine
000F74AA 4E75                       		rts						; return
000F74AC                            
000F74AC                            	; --- Top bar in ---
000F74AC                            
000F74AC                            STC_Intro_BarsIn:
000F74AC 43F8 A010                  		lea	($FFFFA010).w,a1			; load bar
000F74B0 1011                       		move.b	(a1),d0					; load position
000F74B2 5429 0002                  		addq.b	#$02,$02(a1)				; increase size
000F74B6 5300                       		subq.b	#$01,d0					; decrease position
000F74B8 0C00 0005                  		cmpi.b	#$05,d0					; has it reached 5?
000F74BC 6200                       		bhi.s	STC_IBI_NoFinish			; if so, branch
000F74BE 21FC 0000 0000 A004        		move.l	#STC_IBI_NextBar,($FFFFA004).w		; set next routine
000F74C6                            
000F74C6                            STC_IBI_NoFinish:
000F74C6 1280                       		move.b	d0,(a1)					; set position
000F74C8 4E75                       		rts						; return
000F74CA                            
000F74CA                            	; --- Bottom bar in ---
000F74CA                            
000F74CA                            STC_IBI_NextBar:
000F74CA 43F8 A018                  		lea	($FFFFA018).w,a1			; load bar
000F74CE 1011                       		move.b	(a1),d0					; load position
000F74D0 5429 0002                  		addq.b	#$02,$02(a1)				; increase size
000F74D4 5300                       		subq.b	#$01,d0					; decrease position
000F74D6 0C00 0015                  		cmpi.b	#$15,d0					; has it reached 15?
000F74DA 6200                       		bhi.s	STC_IBI_NoFinishNext			; if so, branch
000F74DC 21FC 0000 0000 A004        		move.l	#STC_IBI_Highlight,($FFFFA004).w	; set next routine
000F74E4                            
000F74E4                            STC_IBI_NoFinishNext:
000F74E4 1280                       		move.b	d0,(a1)					; set position
000F74E6 4E75                       		rts						; return
000F74E8                            
000F74E8                            	; --- Highlighter ---
000F74E8                            
000F74E8                            STC_IBI_Highlight:
000F74E8 43F8 A014                  		lea	($FFFFA014).w,a1			; load bar
000F74EC 3011                       		move.w	(a1),d0					; load position
000F74EE 5229 0002                  		addq.b	#$01,$02(a1)				; increase size
000F74F2 0440 0080                  		subi.w	#$0080,d0				; decrease position
000F74F6 0C40 0600                  		cmpi.w	#$0600,d0				; has it reached 5?
000F74FA 6200                       		bhi.s	STC_IBI_NoFinishHigh			; if so, branch
000F74FC 21FC 0000 0000 A004        		move.l	#STC_TopBar,($FFFFA004).w		; set next routine
000F7504 5329 0002                  		subq.b	#$01,$02(a1)				; decrease size once
000F7508                            
000F7508                            STC_IBI_NoFinishHigh:
000F7508 3280                       		move.w	d0,(a1)					; set position
000F750A 4E75                       		rts						; return
000F750C                            
000F750C                            ; ===========================================================================
000F750C                            ; ---------------------------------------------------------------------------
000F750C                            ; Controls for top bar
000F750C                            ; ---------------------------------------------------------------------------
000F750C                            
000F750C                            STC_TopBar:
000F750C 6100 0000                  		bsr.w	STC_MoveHighlight			; move the highlight bar correctly
000F7510 1A38 F605                  		move.b	($FFFFF605).w,d5			; load pressed buttons
000F7514 0805 0001                  		btst.l	#$01,d5					; was down pressed?
000F7518 6700                       		beq.s	STC_TB_NoDown				; if not, branch
000F751A 0278 FCFC F604             		andi.w	#%1111110011111100,($FFFFF604).w	; clear up/down buttons
000F7520 21FC 0000 0000 A004        		move.l	#STC_BottomBar,($FFFFA004).w		; set next routine
000F7528 4EF9 0000 0000             		jmp	STC_BottomBar				; run the routine
000F752E                            
000F752E                            STC_TB_NoDown:
000F752E 0205 000C                  		andi.b	#%00001100,d5				; get only left/right
000F7532 6700                       		beq.s	STC_TB_NoPress				; if neither were pressed, branch
000F7534 4278 A022                  		clr.w	($FFFFA022).w				; reset draw position
000F7538 31FC 0118 A026             		move.w	#$0118,($FFFFA026).w			; set X position of text scroll
000F753E 11FC 0040 A00F             		move.b	#$40,($FFFFA00F).w			; reset held timer
000F7544 6000                       		bra.s	STC_TB_NoHeld				; continue
000F7546                            
000F7546                            STC_TB_Release:
000F7546 11FC 0040 A00F             		move.b	#$40,($FFFFA00F).w			; reset held timer
000F754C 6000                       		bra.s	STC_TB_NoRight				; continue
000F754E                            
000F754E                            STC_TB_NoPress:
000F754E 1A38 F604                  		move.b	($FFFFF604).w,d5			; load held buttons
000F7552 0205 000C                  		andi.b	#%00001100,d5				; get only left/right
000F7556 67EE                       		beq.s	STC_TB_Release				; if neither were pressed, branch
000F7558 5338 A00F                  		subq.b	#$01,($FFFFA00F).w			; decrease hold timer
000F755C 6400                       		bcc.s	STC_TB_NoRight				; if still running, branch
000F755E 4278 A022                  		clr.w	($FFFFA022).w				; reset draw position
000F7562 31FC 0118 A026             		move.w	#$0118,($FFFFA026).w			; set X position of text scroll
000F7568 51F8 A00F                  		sf.b	($FFFFA00F).w				; keep at 0
000F756C                            
000F756C                            STC_TB_NoHeld:
000F756C E60D                       		lsr.b	#$03,d5					; shift left into carry
000F756E 6400                       		bcc.s	STC_TB_NoLeft				; if left was not pressed, branch
000F7570 5378 A020                  		subq.w	#$01,($FFFFA020).w			; decrease top menu X position
000F7574 6400                       		bcc.s	STC_TB_NoLeft				; if it hasn't gone below the bottom, branch
000F7576 31FC 0000 A020             		move.w	#((STC_List_End-STC_List)/$04)-1,($FFFFA020).w ; set to end of list
000F757C                            
000F757C                            STC_TB_NoLeft:
000F757C E20D                       		lsr.b	#$01,d5					; shift right into carry
000F757E 6400                       		bcc.s	STC_TB_NoRight				; if right was not pressed, branch
000F7580 5278 A020                  		addq.w	#$01,($FFFFA020).w			; increase top menu X position
000F7584 0C78 0000 A020             		cmpi.w	#((STC_List_End-STC_List)/$04),($FFFFA020).w ; has it reached the end of the list?
000F758A 6500                       		blo.s	STC_TB_NoRight				; if not, branch
000F758C 4278 A020                  		clr.w	($FFFFA020).w				; set to beginning of list
000F7590                            
000F7590                            STC_TB_NoRight:
000F7590 6000 0000                  		bra.w	STC_BB_NoRight
000F7594                            
000F7594                            STC_TB_Play:
000F7594 3038 A020                  		move.w	($FFFFA020).w,d0			; load list position
000F7598 D040                       		add.w	d0,d0					; multiply by size of long-word
000F759A D040                       		add.w	d0,d0					; ''
000F759C 103B 0000                  		move.b	STC_List(pc,d0.w),d0			; load correct ID
000F75A0                            
000F75A0                            STC_TB_PlaySFX:
000F75A0 0C00 00A0                  		cmpi.b	#$A0,d0					; is it a music track from 80 to 9F?
000F75A4 6400                       		bhs.s	STC_TB_NoDelay				; if not, branch
000F75A6 11FC 0003 A001             		move.b	#$03,($FFFFA001).w			; set the "postpone" draw timer
000F75AC                            
000F75AC                            STC_TB_NoDelay:
000F75AC 4EB8 2708                  		jsr	PlaySound				; play the sound
000F75B0                            
000F75B0                            STC_TB_NoPlay:
000F75B0 4E75                       		rts						; return
000F75B2                            
000F75B2                            ; ---------------------------------------------------------------------------
000F75B2                            ; Sound Test - list
000F75B2                            ; ---------------------------------------------------------------------------
000F75B2                            
000F75B2 0000 0000                  STC_List:	dc.l	($97<<$18)|STC_2U_GetReady
000F75B6 0000 0000                  		dc.l	($96<<$18)|STC_DJMJ_BOC
000F75BA 0000 0000                  		dc.l	($95<<$18)|STC_SCD_SSZPast
000F75BE 0000 0000                  		dc.l	($94<<$18)|STC_S3MiniBoss
000F75C2                            
000F75C2 0000 0000                  		dc.l	($8A<<$18)|STC_Title
000F75C6 0000 0000                  		dc.l	($81<<$18)|STC_GHZ
000F75CA 0000 0000                  		dc.l	($83<<$18)|STC_MZ
000F75CE 0000 0000                  		dc.l	($85<<$18)|STC_SYZ
000F75D2 0000 0000                  		dc.l	($82<<$18)|STC_LZ
000F75D6 0000 0000                  		dc.l	($84<<$18)|STC_SLZ
000F75DA 0000 0000                  		dc.l	($86<<$18)|STC_SBZ
000F75DE 0000 0000                  		dc.l	($8D<<$18)|STC_FZ
000F75E2 0000 0000                  		dc.l	($89<<$18)|STC_SS
000F75E6 0000 0000                  		dc.l	($93<<$18)|STC_Emerald
000F75EA 0000 0000                  		dc.l	($87<<$18)|STC_Invincible
000F75EE 0000 0000                  		dc.l	($88<<$18)|STC_1Up
000F75F2 0000 0000                  		dc.l	($8C<<$18)|STC_Boss
000F75F6 0000 0000                  		dc.l	($8E<<$18)|STC_LevelComp
000F75FA 0000 0000                  		dc.l	($92<<$18)|STC_Drowning
000F75FE 0000 0000                  		dc.l	($8F<<$18)|STC_GameOver
000F7602 0000 0000                  		dc.l	($90<<$18)|STC_Continue
000F7606 0000 0000                  		dc.l	($8B<<$18)|STC_Ending
000F760A 0000 0000                  		dc.l	($91<<$18)|STC_Credits
000F760E                            
000F760E 0000 0000 0000 0000 0000+  		dc.l	($A0<<$18)|STC_SoundA0, ($A1<<$18)|STC_SoundA1, ($A2<<$18)|STC_SoundA2, ($A3<<$18)|STC_SoundA3
000F761E 0000 0000 0000 0000 0000+  		dc.l	($A4<<$18)|STC_SoundA4, ($A5<<$18)|STC_SoundA5, ($A6<<$18)|STC_SoundA6, ($A7<<$18)|STC_SoundA7
000F762E 0000 0000 0000 0000 0000+  		dc.l	($A8<<$18)|STC_SoundA8, ($A9<<$18)|STC_SoundA9, ($AA<<$18)|STC_SoundAA, ($AB<<$18)|STC_SoundAB
000F763E 0000 0000 0000 0000 0000+  		dc.l	($AC<<$18)|STC_SoundAC, ($AD<<$18)|STC_SoundAD, ($AE<<$18)|STC_SoundAE, ($AF<<$18)|STC_SoundAF
000F764E 0000 0000 0000 0000 0000+  		dc.l	($B0<<$18)|STC_SoundB0, ($B1<<$18)|STC_SoundB1, ($B2<<$18)|STC_SoundB2, ($B3<<$18)|STC_SoundB3
000F765E 0000 0000 0000 0000 0000+  		dc.l	($B4<<$18)|STC_SoundB4, ($B5<<$18)|STC_SoundB5, ($B6<<$18)|STC_SoundB6, ($B7<<$18)|STC_SoundB7
000F766E 0000 0000 0000 0000 0000+  		dc.l	($B8<<$18)|STC_SoundB8, ($B9<<$18)|STC_SoundB9, ($BA<<$18)|STC_SoundBA, ($BB<<$18)|STC_SoundBB
000F767E 0000 0000 0000 0000 0000+  		dc.l	($BC<<$18)|STC_SoundBC, ($BD<<$18)|STC_SoundBD, ($BE<<$18)|STC_SoundBE, ($BF<<$18)|STC_SoundBF
000F768E 0000 0000 0000 0000 0000+  		dc.l	($C0<<$18)|STC_SoundC0, ($C1<<$18)|STC_SoundC1, ($C2<<$18)|STC_SoundC2, ($C3<<$18)|STC_SoundC3
000F769E 0000 0000 0000 0000 0000+  		dc.l	($C4<<$18)|STC_SoundC4, ($C5<<$18)|STC_SoundC5, ($C6<<$18)|STC_SoundC6, ($C7<<$18)|STC_SoundC7
000F76AE 0000 0000 0000 0000 0000+  		dc.l	($C8<<$18)|STC_SoundC8, ($C9<<$18)|STC_SoundC9, ($CA<<$18)|STC_SoundCA, ($CB<<$18)|STC_SoundCB
000F76BE 0000 0000 0000 0000 0000+  		dc.l	($CC<<$18)|STC_SoundCC, ($CD<<$18)|STC_SoundCD, ($CE<<$18)|STC_SoundCE, ($CF<<$18)|STC_SoundCF
000F76CE 0000 0000                  		dc.l	($D0<<$18)|STC_SoundD0
000F76D2                            STC_List_End:
000F76D2                            
000F76D2 2053 4F4E 4943 2043 4420+  STC_GHZ:	dc.b	" SONIC CD - PALM TREE PANIC PAST   ",$00
000F76F6 2053 4F4E 4943 2043 4420+  STC_LZ:		dc.b	" SONIC CD - PALM TREE PANIC PRESENT",$00
000F771A 2053 4F4E 4943 2043 4420+  STC_MZ:		dc.b	" SONIC CD - YOU CAN DO ANYTHING    ",$00
000F773E 2053 4F4E 4943 2031 202D+  STC_SLZ:	dc.b	" SONIC 1 - STAR LIGHT ZONE         ",$00
000F7762 2053 4F4E 4943 2031 202D+  STC_SYZ:	dc.b	" SONIC 1 - SPRING YARD ZONE        ",$00
000F7786 2053 4F4E 4943 2031 202D+  STC_SBZ:	dc.b	" SONIC 1 - SCRAP BRAIN ZONE        ",$00
000F77AA 2053 4F4E 4943 2031 202D+  STC_Invincible:	dc.b	" SONIC 1 - INVINCIBLE              ",$00
000F77CE 2053 4F4E 4943 2031 202D+  STC_1Up:	dc.b	" SONIC 1 - 1 UP                    ",$00
000F77F2 2053 4F4E 4943 2031 202D+  STC_SS:		dc.b	" SONIC 1 - SPECIAL STAGE           ",$00
000F7816 2053 4F4E 4943 2031 202D+  STC_Title:	dc.b	" SONIC 1 - TITLE THEME             ",$00
000F783A 2053 4F4E 4943 2031 202D+  STC_Ending:	dc.b	" SONIC 1 - ENDING THEME            ",$00
000F785E 2053 4F4E 4943 2031 202D+  STC_Boss:	dc.b	" SONIC 1 - BOSS THEME              ",$00
000F7882 2053 4F4E 4943 2031 202D+  STC_FZ:		dc.b	" SONIC 1 - FINAL ZONE              ",$00
000F78A6 2053 4F4E 4943 2031 202D+  STC_LevelComp:	dc.b	" SONIC 1 - LEVEL COMPLETE          ",$00
000F78CA 2053 4F4E 4943 2031 202D+  STC_GameOver:	dc.b	" SONIC 1 - GAME OVER               ",$00
000F78EE 2053 4F4E 4943 2031 202D+  STC_Continue:	dc.b	" SONIC 1 - CONTINUE                ",$00
000F7912 2053 4F4E 4943 2031 202D+  STC_Credits:	dc.b	" SONIC 1 - CREDITS                 ",$00
000F7936 2053 4F4E 4943 2031 202D+  STC_Drowning:	dc.b	" SONIC 1 - DROWNING THEME          ",$00
000F795A 2053 4F4E 4943 2031 202D+  STC_Emerald:	dc.b	" SONIC 1 - EMERALD COLLECT         ",$00
000F797E                            
000F797E 2053 4F4E 4943 2033 202D+  STC_S3MiniBoss:	dc.b	" SONIC 3 - MINI BOSS <ADVANCED>    ",$00
000F79A2 2053 4F4E 4943 2043 4420+  STC_SCD_SSZPast:dc.b	" SONIC CD - STARDUST SPEEDWAY PAST ",$00
000F79C6 2044 4A20 4D2E 4A45 5354+  STC_DJMJ_BOC:	dc.b	" DJ M.JESTER - BRINK OF CONTROL    ",$00
000F79EA 2032 554E 4C49 4D49 5445+  STC_2U_GetReady:dc.b	" 2UNLIMITED - GET READY FOR THIS   ",$00
000F7A0E                            
000F7A0E 2053 4658 202D 204A 554D+  STC_SoundA0:	dc.b	" SFX - JUMP                        ",$00
000F7A32 2053 4658 202D 2043 4845+  STC_SoundA1:	dc.b	" SFX - CHECKPOINT                  ",$00
000F7A56 2053 4658 202D 2049 4420+  STC_SoundA2:	dc.b	" SFX - ID A2 UNKNOWN               ",$00
000F7A7A 2053 4658 202D 2048 5552+  STC_SoundA3:	dc.b	" SFX - HURT                        ",$00
000F7A9E 2053 4658 202D 2053 4B49+  STC_SoundA4:	dc.b	" SFX - SKIDDING                    ",$00
000F7AC2 2053 4658 202D 2049 4420+  STC_SoundA5:	dc.b	" SFX - ID A5 UNKNOWN               ",$00
000F7AE6 2053 4658 202D 2048 5552+  STC_SoundA6:	dc.b	" SFX - HURT BY SPIKES              ",$00
000F7B0A 2053 4658 202D 2050 5553+  STC_SoundA7:	dc.b	" SFX - PUSHING A BLOCK             ",$00
000F7B2E 2053 4658 202D 2053 5045+  STC_SoundA8:	dc.b	" SFX - SPECIAL STAGE EXIT          ",$00
000F7B52 2053 4658 202D 2053 5045+  STC_SoundA9:	dc.b	" SFX - SPECIAL STAGE R BLOCK       ",$00
000F7B76 2053 4658 202D 2057 4154+  STC_SoundAA:	dc.b	" SFX - WATER SPLASH                ",$00
000F7B9A 2053 4658 202D 2049 4420+  STC_SoundAB:	dc.b	" SFX - ID AB UNKNOWN               ",$00
000F7BBE 2053 4658 202D 2048 4954+  STC_SoundAC:	dc.b	" SFX - HIT ROBOTNIK                ",$00
000F7BE2 2053 4658 202D 2041 4952+  STC_SoundAD:	dc.b	" SFX - AIR BUBBLE                  ",$00
000F7C06 2053 4658 202D 2046 4C41+  STC_SoundAE:	dc.b	" SFX - FLAME SHOOTING              ",$00
000F7C2A 2053 4658 202D 2053 4849+  STC_SoundAF:	dc.b	" SFX - SHIELD COLLECT              ",$00
000F7C4E 2053 4658 202D 2053 4157+  STC_SoundB0:	dc.b	" SFX - SAW                         ",$00
000F7C72 2053 4658 202D 2045 4C45+  STC_SoundB1:	dc.b	" SFX - ELECTRIC DISCHARGE          ",$00
000F7C96 2053 4658 202D 2044 524F+  STC_SoundB2:	dc.b	" SFX - DROWNING                    ",$00
000F7CBA 2053 4658 202D 204C 4156+  STC_SoundB3:	dc.b	" SFX - LAVA GEYSER SHOOT UP        ",$00
000F7CDE 2053 4658 202D 2050 494E+  STC_SoundB4:	dc.b	" SFX - PINBALL BUMPER              ",$00
000F7D02 2053 4658 202D 2052 494E+  STC_SoundB5:	dc.b	" SFX - RING COLLECT                ",$00
000F7D26 2053 4658 202D 2053 5049+  STC_SoundB6:	dc.b	" SFX - SPIKES MOVE                 ",$00
000F7D4A 2053 4658 202D 204C 4142+  STC_SoundB7:	dc.b	" SFX - LABYRINTH WALL CHANGE       ",$00
000F7D6E 2053 4658 202D 2049 4420+  STC_SoundB8:	dc.b	" SFX - ID B8 UNKNOWN               ",$00
000F7D92 2053 4658 202D 2050 4C41+  STC_SoundB9:	dc.b	" SFX - PLATFORM COLLAPSE FULL      ",$00
000F7DB6 2053 4658 202D 2053 5045+  STC_SoundBA:	dc.b	" SFX - SPECIAL STAGE CRYSTAL BLOCK ",$00
000F7DDA 2053 4658 202D 2044 4F4F+  STC_SoundBB:	dc.b	" SFX - DOOR OPEN OR CLOSE          ",$00
000F7DFE 2053 4658 202D 2053 5049+  STC_SoundBC:	dc.b	" SFX - SPIN CHARGE RELEASE         ",$00
000F7E22 2053 4658 202D 2043 4841+  STC_SoundBD:	dc.b	" SFX - CHANDERLIER DROP            ",$00
000F7E46 2053 4658 202D 2053 5049+  STC_SoundBE:	dc.b	" SFX - SPIN ATTACK                 ",$00
000F7E6A 2053 4658 202D 2053 5045+  STC_SoundBF:	dc.b	" SFX - SPECIAL STAGE CONTINUE      ",$00
000F7E8E 2053 4658 202D 2042 4153+  STC_SoundC0:	dc.b	" SFX - BASARAN FLYING              ",$00
000F7EB2 2053 4658 202D 2044 4553+  STC_SoundC1:	dc.b	" SFX - DESTROYED DEVICE            ",$00
000F7ED6 2053 4658 202D 2042 5245+  STC_SoundC2:	dc.b	" SFX - BREATHING CHIME             ",$00
000F7EFA 2053 4658 202D 2045 4E54+  STC_SoundC3:	dc.b	" SFX - ENTERING LARGE RING         ",$00
000F7F1E 2053 4658 202D 2045 4E45+  STC_SoundC4:	dc.b	" SFX - ENEMY PROJECTILE EPLODE     ",$00
000F7F42 2053 4658 202D 2045 4E44+  STC_SoundC5:	dc.b	" SFX - END SCORE TALLY             ",$00
000F7F66 2053 4658 202D 2052 494E+  STC_SoundC6:	dc.b	" SFX - RING LOSS                   ",$00
000F7F8A 2053 4658 202D 2043 4841+  STC_SoundC7:	dc.b	" SFX - CHANDERLIER LIFT            ",$00
000F7FAE 2053 4658 202D 204C 4156+  STC_SoundC8:	dc.b	" SFX - LAVA GEYSER DROP            ",$00
000F7FD2 2053 4658 202D 2048 4944+  STC_SoundC9:	dc.b	" SFX - HIDDEN POINTS               ",$00
000F7FF6 2053 4658 202D 2053 5045+  STC_SoundCA:	dc.b	" SFX - SPECIAL STAGE TRANSITION    ",$00
000F801A 2053 4658 202D 2050 4C41+  STC_SoundCB:	dc.b	" SFX - PLATFORM COLLAPSE REDUCED   ",$00
000F803E 2053 4658 202D 2053 5052+  STC_SoundCC:	dc.b	" SFX - SPRING BOUNCE               ",$00
000F8062 2053 4658 202D 2042 5554+  STC_SoundCD:	dc.b	" SFX - BUTTON PRESS                ",$00
000F8086 2053 4658 202D 2052 494E+  STC_SoundCE:	dc.b	" SFX - RING COLLECT LEFT SPEAKER   ",$00
000F80AA 2053 4658 202D 2050 4153+  STC_SoundCF:	dc.b	" SFX - PASSING END SIGN            ",$00
000F80CE 2053 4658 202D 2057 4154+  STC_SoundD0:	dc.b	" SFX - WATERFALL AMBIENCE          ",$00
000F80F2                            		even
000F80F2                            
000F80F2                            ; ===========================================================================
000F80F2                            ; ---------------------------------------------------------------------------
000F80F2                            ; Controls for bottom bar
000F80F2                            ; ---------------------------------------------------------------------------
000F80F2                            
000F80F2                            STC_BottomBar:
000F80F2 6100 0000                  		bsr.w	STC_MoveHighlight			; move the highlight bar
000F80F6 1A38 F605                  		move.b	($FFFFF605).w,d5			; load pressed buttons
000F80FA 0805 0000                  		btst.l	#$00,d5					; was up pressed?
000F80FE 6700                       		beq.s	STC_BB_NoUp				; if not, branch
000F8100 0278 FCFC F604             		andi.w	#%1111110011111100,($FFFFF604).w	; clear up/down buttons
000F8106 21FC 000F 750C A004        		move.l	#STC_TopBar,($FFFFA004).w		; set next routine
000F810E 4EFA F3FC                  		jmp	STC_TopBar				; run the routine
000F8112                            
000F8112                            STC_BB_NoUp:
000F8112 0205 000C                  		andi.b	#%00001100,d5				; get only left/right
000F8116 6700                       		beq.s	STC_BB_NoRight				; if neither were pressed, branch
000F8118 E60D                       		lsr.b	#$03,d5					; shift left into carry
000F811A 6400                       		bcc.s	STC_BB_NoLeft				; if left was not pressed, branch
000F811C 5378 A030                  		subq.w	#$01,($FFFFA030).w			; decrease bottom menu X position
000F8120 6400                       		bcc.s	STC_BB_NoLeft				; if it hasn't gone below the bottom, branch
000F8122 31FC 0000 A030             		move.w	#((STC_Opt_End-STC_Opt)/$08)-1,($FFFFA030).w ; set to end of list
000F8128                            
000F8128                            STC_BB_NoLeft:
000F8128 E20D                       		lsr.b	#$01,d5					; shift right into carry
000F812A 6400                       		bcc.s	STC_BB_NoRight				; if right was not pressed, branch
000F812C 5278 A030                  		addq.w	#$01,($FFFFA030).w			; increase bottom menu X position
000F8130 0C78 0000 A030             		cmpi.w	#((STC_Opt_End-STC_Opt)/$08),($FFFFA030).w ; has it reached the end of the list?
000F8136 6500                       		blo.s	STC_BB_NoRight				; if not, branch
000F8138 4278 A030                  		clr.w	($FFFFA030).w				; set to beginning of list
000F813C                            
000F813C                            STC_BB_NoRight:
000F813C 1A38 F605                  		move.b	($FFFFF605).w,d5			; reload pressed buttons
000F8140 0205 0070                  		andi.b	#%01110000,d5				; get A, B or C
000F8144 6700                       		beq.s	STC_BB_NoPlay				; if nothing was pressed, branch
000F8146 0805 0005                  		btst.l	#$05,d5					; was C pressed?
000F814A 6600 F448                  		bne.w	STC_TB_Play				; if so, branch
000F814E 31FC FFFF A034             		move.w	#$FFFF,($FFFFA034).w			; invalidate the "options" text area (so it renders the changing numbers)
000F8154 3038 A030                  		move.w	($FFFFA030).w,d0			; load list position
000F8158 E748                       		lsl.w	#$03,d0					; multiply by size of 2 long-words
000F815A 207B 0000                  		movea.l	STC_Opt+$04(pc,d0.w),a0			; load correct address
000F815E 4ED0                       		jmp	(a0)					; run address
000F8160                            
000F8160                            STC_BB_NoPlay:
000F8160 4E75                       		rts						; return
000F8162                            
000F8162                            ; ---------------------------------------------------------------------------
000F8162                            ; Sound Test - options
000F8162                            ; ---------------------------------------------------------------------------
000F8162                            
000F8162 0000 0000 0000 0000        STC_Opt:	dc.l	STC_ST_Pitch,	STC_Pitch
000F816A 0000 0000 0000 0000        		dc.l	STC_ST_Tempo,	STC_Tempo
000F8172 0000 0000 0000 0000        		dc.l	STC_ST_Volume,	STC_Volume
000F817A 0000 0000 0000 0000        		dc.l	STC_ST_Fade,	STC_Fade
000F8182 0000 0000 0000 0000        		dc.l	STC_ST_FM1,	STC_FM1
000F818A 0000 0000 0000 0000        		dc.l	STC_ST_FM2,	STC_FM2
000F8192 0000 0000 0000 0000        		dc.l	STC_ST_FM3,	STC_FM3
000F819A 0000 0000 0000 0000        		dc.l	STC_ST_FM4,	STC_FM4
000F81A2 0000 0000 0000 0000        		dc.l	STC_ST_FM5,	STC_FM5
000F81AA 0000 0000 0000 0000        		dc.l	STC_ST_FM6,	STC_FM6
000F81B2 0000 0000 0000 0000        		dc.l	STC_ST_PCM1,	STC_PCM1
000F81BA 0000 0000 0000 0000        		dc.l	STC_ST_PCM2,	STC_PCM2
000F81C2 0000 0000 0000 0000        		dc.l	STC_ST_PSG1,	STC_PSG1
000F81CA 0000 0000 0000 0000        		dc.l	STC_ST_PSG2,	STC_PSG2
000F81D2 0000 0000 0000 0000        		dc.l	STC_ST_PSG3,	STC_PSG3
000F81DA                            STC_Opt_End:
000F81DA                            
000F81DA 2061 2044 4F57 4E20 2020+  STC_ST_Pitch:	dc.b	" a DOWN    <  PITCH  #0 >      UP b ",$00
000F81FF 2061 2044 4F57 4E20 2020+  STC_ST_Tempo:	dc.b	" a DOWN    <  TEMPO  #1 >      UP b ",$00
000F8224 2061 204C 4F55 4420 2020+  STC_ST_Volume:	dc.b	" a LOUD    <  VOLUME #2 >   QUIET b ",$00
000F8249 2061 204F 5220 6220 2020+  STC_ST_Fade:	dc.b	" a OR b   <  FADE OUT  >   a OR b ",$00
000F826C 2061 204F 5220 6220 2020+  STC_ST_FM1:	dc.b	" a OR b   < FM  1 MUTE >   a OR b ",$00
000F828F 2061 204F 5220 6220 2020+  STC_ST_FM2:	dc.b	" a OR b   < FM  2 MUTE >   a OR b ",$00
000F82B2 2061 204F 5220 6220 2020+  STC_ST_FM3:	dc.b	" a OR b   < FM  3 MUTE >   a OR b ",$00
000F82D5 2061 204F 5220 6220 2020+  STC_ST_FM4:	dc.b	" a OR b   < FM  4 MUTE >   a OR b ",$00
000F82F8 2061 204F 5220 6220 2020+  STC_ST_FM5:	dc.b	" a OR b   < FM  5 MUTE >   a OR b ",$00
000F831B 2061 204F 5220 6220 2020+  STC_ST_FM6:	dc.b	" a OR b   < FM  6 MUTE >   a OR b ",$00
000F833E 2061 204F 5220 6220 2020+  STC_ST_PCM1:	dc.b	" a OR b   < PCM 1 MUTE >   a OR b ",$00
000F8361 2061 204F 5220 6220 2020+  STC_ST_PCM2:	dc.b	" a OR b   < PCM 2 MUTE >   a OR b ",$00
000F8384 2061 204F 5220 6220 2020+  STC_ST_PSG1:	dc.b	" a OR b   < PSG 1 MUTE >   a OR b ",$00
000F83A7 2061 204F 5220 6220 2020+  STC_ST_PSG2:	dc.b	" a OR b   < PSG 2 MUTE >   a OR b ",$00
000F83CA 2061 204F 5220 6220 2020+  STC_ST_PSG3:	dc.b	" a OR b   < PSG 3 MUTE >   a OR b ",$00
000F83EE 00                         		even
000F83EE                            
000F83EE                            	; --- Pitch control ---
000F83EE                            
000F83EE                            STC_Pitch:
000F83EE DA05                       		add.b	d5,d5					; shift button A to MSB
000F83F0 6A00                       		bpl.s	STC_P_NoA				; if it was not A, branch for B
000F83F2 5538 F014                  		subq.b	#$02,($FFFFF014).w			; decrease the music pitch
000F83F6                            
000F83F6                            STC_P_NoA:
000F83F6 5238 F014                  		addq.b	#$01,($FFFFF014).w			; increase the music pitch
000F83FA                            
000F83FA                            STC_UpdateChannels:
000F83FA 43F8 F040                  		lea	($FFFFF040).w,a1			; load channel RAM
000F83FE 7E0A                       		moveq	#(2+6+3)-1,d7				; set number of channels to do
000F8400 7030                       		moveq	#$30,d0					; prepare channel advance amount
000F8402                            
000F8402                            STC_P_Next:
000F8402 08D1 0006                  		bset.b	#$06,(a1)				; set channel to update
000F8406 D2C0                       		adda.w	d0,a1					; advance to next channel
000F8408 51CF FFF8                  		dbf	d7,STC_P_Next				; repeat for all channels
000F840C 4E75                       		rts						; return
000F840E                            
000F840E                            	; --- Tempo control ---
000F840E                            
000F840E                            STC_Tempo:
000F840E DA05                       		add.b	d5,d5					; shift button A to MSB
000F8410 6A00                       		bpl.s	STC_T_NoA				; if it was not A, branch for B
000F8412 5538 F015                  		subq.b	#$02,($FFFFF015).w			; decrease the music tempo
000F8416                            
000F8416                            STC_T_NoA:
000F8416 5238 F015                  		addq.b	#$01,($FFFFF015).w			; increase the music tempo
000F841A 4E75                       		rts						; return
000F841C                            
000F841C                            	; --- Volume control ---
000F841C                            
000F841C                            STC_Volume:
000F841C DA05                       		add.b	d5,d5					; shift button A to MSB
000F841E 6A00                       		bpl.s	STC_V_NoA				; if it was not A, branch for B
000F8420 5338 F016                  		subq.b	#$01,($FFFFF016).w			; decrease the music volume
000F8424 6AD4                       		bpl.s	STC_UpdateChannels			; if still valid, branch
000F8426 51F8 F016                  		sf.b	($FFFFF016).w				; keep volume at 00
000F842A 60CE                       		bra.s	STC_UpdateChannels			; continue and trigger channels to update
000F842C                            
000F842C                            STC_V_NoA:
000F842C 5238 F016                  		addq.b	#$01,($FFFFF016).w			; increase the music volume
000F8430 0C38 0028 F016             		cmpi.b	#$28,($FFFFF016).W			; is it at maximum volume?
000F8436 63C2                       		bls.s	STC_UpdateChannels			; if not, branch
000F8438 11FC 0028 F016             		move.b	#$28,($FFFFF016).W			; force to maximum volume
000F843E 60BA                       		bra.s	STC_UpdateChannels			; continue and trigger channels to update
000F8440                            
000F8440                            	; --- Fade out ---
000F8440                            
000F8440                            STC_Fade:
000F8440 70E0                       		moveq	#$FFFFFFE0,d0
000F8442 4EF8 270E                  		jmp	PlaySound_Special
000F8446                            
000F8446                            	; --- Channel control ---
000F8446                            
000F8446                            STC_FM1:
000F8446 4638 F0C1                  		not.b	($FFFFF0A0+$21).w
000F844A 4E75                       		rts
000F844C                            
000F844C                            STC_FM2:
000F844C 4638 F0F1                  		not.b	($FFFFF0D0+$21).w
000F8450 4E75                       		rts
000F8452                            
000F8452                            STC_FM3:
000F8452 4638 F121                  		not.b	($FFFFF100+$21).w
000F8456 4E75                       		rts
000F8458                            
000F8458                            STC_FM4:
000F8458 4638 F151                  		not.b	($FFFFF130+$21).w
000F845C 4E75                       		rts
000F845E                            
000F845E                            STC_FM5:
000F845E 4638 F181                  		not.b	($FFFFF160+$21).w
000F8462 4E75                       		rts
000F8464                            
000F8464                            STC_FM6:
000F8464 4638 F1B1                  		not.b	($FFFFF190+$21).w
000F8468 4E75                       		rts
000F846A                            
000F846A                            STC_PCM1:
000F846A 4638 F061                  		not.b	($FFFFF040+$21).w
000F846E 4E75                       		rts
000F8470                            
000F8470                            STC_PCM2:
000F8470 4638 F091                  		not.b	($FFFFF070+$21).w
000F8474 4E75                       		rts
000F8476                            
000F8476                            STC_PSG1:
000F8476 4638 F1E1                  		not.b	($FFFFF1C0+$21).w
000F847A 4E75                       		rts
000F847C                            
000F847C                            STC_PSG2:
000F847C 4638 F211                  		not.b	($FFFFF1F0+$21).w
000F8480 4E75                       		rts
000F8482                            
000F8482                            STC_PSG3:
000F8482 4638 F241                  		not.b	($FFFFF220+$21).w
000F8486 4E75                       		rts
000F8488                            
000F8488                            ; ===========================================================================
000F8488                            ; ---------------------------------------------------------------------------
000F8488                            ; Subroutine to move the highlighter to the correct position
000F8488                            ; ---------------------------------------------------------------------------
000F8488                            
000F8488                            STC_MoveHighlight:
000F8488 43F8 A014                  		lea	($FFFFA014).w,a1			; load highlighters
000F848C 0CB8 000F 750C A004        		cmpi.l	#STC_TopBar,($FFFFA004).w		; is the routine set to bottom bar?
000F8494 6600                       		bne.s	STC_MH_MoveDown				; if not, branch
000F8496 4A29 000A                  		tst.b	$0A(a1)					; has the top bar's size been reduced to 0?
000F849A 6700                       		beq.s	STC_MH_Finish				; if so, branch
000F849C 5329 000A                  		subq.b	#$01,$0A(a1)				; decrease size
000F84A0 0669 0080 0008             		addi.w	#$0080,$08(a1)				; increase position
000F84A6 5229 0002                  		addq.b	#$01,$02(a1)				; increase size
000F84AA 0451 0080                  		subi.w	#$0080,(a1)				; decrease position
000F84AE                            
000F84AE                            STC_MH_Finish:
000F84AE 4E75                       		rts						; return
000F84B0                            
000F84B0                            STC_MH_MoveDown:
000F84B0 4A29 0002                  		tst.b	$02(a1)					; has the top bar's size been reduced to 0?
000F84B4 67F8                       		beq.s	STC_MH_Finish				; if so, branch
000F84B6 5329 0002                  		subq.b	#$01,$02(a1)				; decrease size
000F84BA 0651 0080                  		addi.w	#$0080,(a1)				; increase position
000F84BE 5229 000A                  		addq.b	#$01,$0A(a1)				; increase size
000F84C2 0469 0080 0008             		subi.w	#$0080,$08(a1)				; decrease position
000F84C8 4E75                       		rts						; return
000F84CA                            
000F84CA                            ; ===========================================================================
000F84CA                            ; ---------------------------------------------------------------------------
000F84CA                            ; Subroutine to create all possible colour fading values for all channels and types
000F84CA                            ; ---------------------------------------------------------------------------
000F84CA                            
000F84CA                            ST_SetupKeyColours:
000F84CA 41F9 0000 0000             		lea	(ST_ColourList).l,a0			; load colours list
000F84D0 47F9 FFFF 5800             		lea	($FFFF5800).l,a3			; load palette RAM data
000F84D6                            
000F84D6 7E05                       		moveq	#$06-1,d7				; number of key colours (2 FM, 2 PCM, 2 PSG (one for BGM, one for SFX))
000F84D8                            
000F84D8                            STSKC_NextKey:
000F84D8 2F07                       		move.l	d7,-(sp)				; store counter
000F84DA 7C01                       		moveq	#$02-1,d6				; set to do twice (once for white, once for black)
000F84DC 43F9 0000 0000             		lea	(ST_ColourBlank).l,a1			; load blank colours list to fade to
000F84E2                            
000F84E2                            STSKC_NextBlack:
000F84E2 2F06                       		move.l	d6,-(sp)				; store counter
000F84E4                            
000F84E4                            		; normal
000F84E4 45D3                       		lea	(a3),a2					; load first colour address
000F84E6 6100                       		bsr.s	STSKC_CreateColour			; create white variations
000F84E8 544B                       		addq.w	#$02,a3					; advance for next colour
000F84EA 45D3                       		lea	(a3),a2					; load second colour address
000F84EC 6100                       		bsr.s	STSKC_CreateColour			; create white variations
000F84EE 47EB 001E                  		lea	$1E(a3),a3				; advance for next colour
000F84F2                            
000F84F2                            		; attack
000F84F2 5949                       		subq.w	#$04,a1					; go back and redo colours but for attack keys
000F84F4 45D3                       		lea	(a3),a2					; load first colour address
000F84F6 6100                       		bsr.s	STSKC_CreateColour			; create white variations
000F84F8 544B                       		addq.w	#$02,a3					; advance for next colour
000F84FA 45D3                       		lea	(a3),a2					; load second colour address
000F84FC 6100                       		bsr.s	STSKC_CreateColour			; create white variations
000F84FE 47EB 001E                  		lea	$1E(a3),a3				; advance for next colour
000F8502                            
000F8502 5148                       		subq.w	#$08,a0					; go back and redo colour but for black keys
000F8504                            
000F8504 2C1F                       		move.l	(sp)+,d6				; reload counter
000F8506 51CE FFDA                  		dbf	d6,STSKC_NextBlack			; repeat for black keys
000F850A 5048                       		addq.w	#$08,a0					; continue to next colours
000F850C                            
000F850C 2E1F                       		move.l	(sp)+,d7				; restore counter
000F850E 51CF FFC8                  		dbf	d7,STSKC_NextKey			; repeat for all keys
000F8512 4E75                       		rts						; return
000F8514                            
000F8514                            STSKC_CreateColour:
000F8514 4252                       		clr.w	(a2)					; clear multiplication area
000F8516 3018                       		move.w	(a0)+,d0				; load colour source
000F8518 3219                       		move.w	(a1)+,d1				; load colour destination
000F851A                            
000F851A                            	; --- Blue fraction ---
000F851A                            
000F851A 3400                       		move.w	d0,d2					; load blue
000F851C 51C2                       		sf.b	d2					; ''
000F851E 3601                       		move.w	d1,d3					; load destination
000F8520 51C3                       		sf.b	d3					; ''
000F8522 9642                       		sub.w	d2,d3					; get distance
000F8524 48C3                       		ext.l	d3					; extend to long-word
000F8526 87FC 0007                  		divs.w	#$07,d3					; divide by 7 colours
000F852A                            
000F852A                            	; --- Green fraction ---
000F852A                            
000F852A 1400                       		move.b	d0,d2					; load green
000F852C 0282 0000 00E0             		andi.l	#$000000E0,d2				; ''
000F8532 1482                       		move.b	d2,(a2)					; multiply by 100
000F8534 3412                       		move.w	(a2),d2					; ''
000F8536 1801                       		move.b	d1,d4					; load distance
000F8538 0284 0000 00E0             		andi.l	#$000000E0,d4				; ''
000F853E 1484                       		move.b	d4,(a2)					; multiply by 100
000F8540 3812                       		move.w	(a2),d4					; ''
000F8542 9882                       		sub.l	d2,d4					; get distance
000F8544 89FC 0007                  		divs.w	#$07,d4					; divide by 7 colours
000F8548 48C4                       		ext.l	d4					; clear remainder
000F854A E184                       		asl.l	#$08,d4					; align into position
000F854C                            
000F854C                            	; --- Red fraction ---
000F854C                            
000F854C 1400                       		move.b	d0,d2					; load red
000F854E 0282 0000 000E             		andi.l	#$0000000E,d2				; ''
000F8554 1482                       		move.b	d2,(a2)					; multiply by 100
000F8556 3412                       		move.w	(a2),d2					; ''
000F8558 1A01                       		move.b	d1,d5					; load distance
000F855A 0285 0000 000E             		andi.l	#$0000000E,d5				; ''
000F8560 1485                       		move.b	d5,(a2)					; multiply by 100
000F8562 3A12                       		move.w	(a2),d5					; ''
000F8564 9A82                       		sub.l	d2,d5					; get distance
000F8566 8BFC 0007                  		divs.w	#$07,d5					; divide by 7 colours
000F856A 48C5                       		ext.l	d5					; clear remainder
000F856C E185                       		asl.l	#$08,d5					; align into position
000F856E                            
000F856E                            	; --- creating starting colours ---
000F856E                            
000F856E 3400                       		move.w	d0,d2					; get red
000F8570 0282 0000 000E             		andi.l	#$0000000E,d2				; ''
000F8576 4842                       		swap	d2					; align to quotient
000F8578 3200                       		move.w	d0,d1					; get green
000F857A 0281 0000 00E0             		andi.l	#$000000E0,d1				; ''
000F8580 4841                       		swap	d1					; align to quotient
000F8582 0240 0E00                  		andi.w	#$0E00,d0				; get blue
000F8586                            
000F8586 7E07                       		moveq	#$08-1,d7				; set number of colours to do
000F8588 6000                       		bra.s	STSKC_StartColour			; branch into loop
000F858A                            
000F858A                            STSKC_NextColour:
000F858A D043                       		add.w	d3,d0					; advance blue
000F858C D284                       		add.l	d4,d1					; advance green
000F858E D485                       		add.l	d5,d2					; advance red
000F8590                            
000F8590                            STSKC_StartColour:
000F8590 4841                       		swap	d1					; get quotients
000F8592 4842                       		swap	d2					; ''
000F8594 3C00                       		move.w	d0,d6					; get blue
000F8596 0246 0F00                  		andi.w	#$0F00,d6				; ''
000F859A 8C01                       		or.b	d1,d6					; get green
000F859C 0246 0FF0                  		andi.w	#$0FF0,d6				; ''
000F85A0 8C02                       		or.b	d2,d6					; get red
000F85A2 0246 0FFF                  		andi.w	#$0FFF,d6				; ''
000F85A6 3486                       		move.w	d6,(a2)					; save colour
000F85A8 0246 0111                  		andi.w	#$0111,d6				; get half fractions
000F85AC DC52                       		add.w	(a2),d6					; add to colour
000F85AE 0246 0EEE                  		andi.w	#$0EEE,d6				; get only the colour
000F85B2 34C6                       		move.w	d6,(a2)+				; save to palette correctly
000F85B4 544A                       		addq.w	#$02,a2					; skip slot
000F85B6 4841                       		swap	d1					; restore quotients
000F85B8 4842                       		swap	d2					; ''
000F85BA 51CF FFCE                  		dbf	d7,STSKC_NextColour			; repeat for all 8 colours
000F85BE                            
000F85BE 4E75                       		rts						; return
000F85C0                            
000F85C0                            		;	Light, Dark
000F85C0                            
000F85C0 0EEA 0886                  ST_ColourBlank:	dc.w	$0EEA,$0886				; white keys
000F85C4 0EEA 0000                  		dc.w	$0EEA,$0000				; black keys
000F85C8                            
000F85C8                            		;	  Normal	Attack
000F85C8                            
000F85C8 000E 0008 00AE 0068        ST_ColourList:	dc.w	$000E,$0008, $00AE,$0068		; FM BGM
000F85D0 080C 0206 0C8E 0628        		dc.w	$080C,$0206, $0C8E,$0628		; FM SFX
000F85D8 0E00 0800 0E0C 0806        		dc.w	$0E00,$0800, $0E0C,$0806		; PCM BGM
000F85E0 0000 0000 0000 0000        		dc.w	$0000,$0000, $0000,$0000		; PCM SFX
000F85E8 00A0 0060 08C0 0680        		dc.w	$00A0,$0060, $08C0,$0680		; PSG BGM
000F85F0 008E 0048 00CC 008C        		dc.w	$008E,$0048, $00CC,$008C		; PSG SFX
000F85F8                            
000F85F8                            ; ===========================================================================
000F85F8                            ; ---------------------------------------------------------------------------
000F85F8                            ; Subroutine to draw the key sprites on the piano
000F85F8                            ; ---------------------------------------------------------------------------
000F85F8                            
000F85F8                            ST_DrawKeys:
000F85F8 49F9 0000 0000             		lea	(ST_BGMRAM).l,a4			; load channel RAM list
000F85FE 43F8 F800                  		lea	($FFFFF800).w,a1			; load sprite RAM
000F8602 7E00                       		moveq	#$00,d7					; clear key counter
000F8604 4A38 A001                  		tst.b	($FFFFA001).w				; is render being delayed?
000F8608 6600 0000                  		bne.w	STDK_FinishKeys				; if so, branch
000F860C 7A00                       		moveq	#$00,d5					; reset keyboard ID
000F860E 7C00                       		moveq	#$00,d6					; reset sprite count
000F8610                            
000F8610                            STDK_NextKey:
000F8610 7800                       		moveq	#$00,d4					; set to use BGM colours
000F8612 3454                       		movea.w	(a4),a2					; load channel
000F8614 0812 0002                  		btst	#$02,(a2)				; is the channel being interrupted by SFX?
000F8618 6600                       		bne.s	STDK_CheckSPE				; if so, branch
000F861A 4A2A 0021                  	tst.b	$21(a2)					; is the channel muted?
000F861E 6700                       	beq.s	STDK_NoSPE				; if not, branch
000F8620 4A12                       	tst.b	(a2)
000F8622 6A00                       	bpl.s	STDK_NoSPE
000F8624 3205                       	move.w	d5,d1					; adjust Y position
000F8626 E949                       	lsl.w	#$04,d1					; ''
000F8628 0641 0088                  	addi.w	#$0088,d1				; ''
000F862C 32C1                       	move.w	d1,(a1)+				; Y position
000F862E 12FC 0009                  	move.b	#$09,(a1)+				; shape
000F8632 5206                       	addq.b	#$01,d6					; sprite link
000F8634 12C6                       	move.b	d6,(a1)+				; ''
000F8636 32FC 0560                  	move.w	#($AC00/$20),(a1)+			; VRAM
000F863A 32FC 0088                  	move.w	#$0088,(a1)+				; X pos
000F863E 6000 0000                  		bra.w	STDK_NoChannel				; continue
000F8642                            
000F8642                            STDK_CheckSPE:
000F8642 0644 0080                  		addi.w	#$0080,d4				; advance to SFX colours
000F8646 302C 0000                  		move.w	ST_SPERAM-ST_BGMRAM(a4),d0		; load Special SFX channel
000F864A 6700                       		beq.s	STDK_CheckSFX				; if there is no special SFX channel, branch
000F864C 3440                       		movea.w	d0,a2					; set address
000F864E 0812 0002                  		btst	#$02,(a2)				; is the channel being interrupted by SFX?
000F8652 6700                       		beq.s	STDK_NoSPE				; if not, branch
000F8654                            
000F8654                            STDK_CheckSFX:
000F8654 302C 0000                  		move.w	ST_SFXRAM-ST_BGMRAM(a4),d0		; load SFX channel
000F8658 6700                       		beq.s	STDK_NoChannel				; if there is no SFX channel, branch
000F865A 3440                       		movea.w	d0,a2					; set address
000F865C                            
000F865C                            STDK_NoSPE:
000F865C                            
000F865C                            	; --- Reading channel ---
000F865C                            
000F865C 1012                       		move.b	(a2),d0					; load channel status
000F865E 6A00                       		bpl.s	STDK_NoChannel				; if the channel is not running, branch
000F8660 0800 0001                  		btst	#$01,d0					; is the channel resting?
000F8664 6600                       		bne.s	STDK_NoChannel				; if so, branch
000F8666 0800 0004                  		btst	#$04,d0					; is soft key on?
000F866A 6600                       		bne.s	STDK_NoHitKey				; if so, branch
000F866C 102A 000F                  		move.b	$0F(a2),d0				; load main timer
000F8670 902A 000E                  		sub.b	$0E(a2),d0				; minus current timer
000F8674 0C00 0003                  		cmpi.b	#$03,d0					; has the key been hit recently?
000F8678 6E00                       		bgt.s	STDK_NoHitKey				; if not, branch
000F867A 0644 0020                  		addi.w	#$0020,d4				; advance to key hit colours
000F867E                            
000F867E                            STDK_NoHitKey:
000F867E 3007                       		move.w	d7,d0					; load channel counter
000F8680 E748                       		lsl.w	#$03,d0					; multiply by size of two long-words
000F8682 41F9 0000 0000             		lea	(STDK_ChanRouts).l,a0			; load routine/palette list
000F8688 D0C0                       		adda.w	d0,a0					; load correct routine list
000F868A 2658                       		move.l	(a0)+,a3				; load palette RAM to edit
000F868C 2058                       		move.l	(a0)+,a0				; load routine
000F868E 4E90                       		jsr	(a0)					; run routine
000F8690 6700                       		beq.s	STDK_NoChannel				; if there's no frequency to read, branch
000F8692 0C02 0053                  		cmpi.b	#$5F-$0C,d2				; has the note gone outside of the keyboard?
000F8696                            	;	bhi.s	STDK_NoChannel				; if so, branch and ignore
000F8696                            
000F8696                            	; This is to allow SFX to display the highest octave (by moving the note down an octave)
000F8696                            
000F8696 6300                       	bls.s	STDK_InRange				; if not, branch
000F8698 6B00                       	bmi.s	STDK_NoChannel				; if negative, branch (outside of keyboard to the left)
000F869A 4A04                       	tst.b	d4					; is this an SFX?
000F869C 6A00                       	bpl.s	STDK_NoChannel				; if not, branch and don't display keys
000F869E 0402 000C                  	subi.b	#$0C,d2					; move the note down an octave
000F86A2 0C02 0053                  	cmpi.b	#$5F-$0C,d2				; has the note gone outside of the keyboard?
000F86A6 6200                       	bhi.s	STDK_NoChannel				; if not, branch
000F86A8                            
000F86A8                            STDK_InRange:
000F86A8 6100 0000                  		bsr.w	STDK_GetPos				; load the correct X and VRAM positions
000F86AC 0640 00A0                  		addi.w	#$00A0,d0				; adjust X position
000F86B0 3205                       		move.w	d5,d1					; adjust Y position
000F86B2 E949                       		lsl.w	#$04,d1					; ''
000F86B4 0641 0088                  		addi.w	#$0088,d1				; ''
000F86B8 3607                       		move.w	d7,d3					; adjust VRAM
000F86BA D643                       		add.w	d3,d3					; ''
000F86BC D47B 3000                  		add.w	STDK_NoteVRAM(pc,d3.w),d2		; ''
000F86C0                            
000F86C0 32C1                       		move.w	d1,(a1)+				; Y position
000F86C2 12FC 0001                  		move.b	#$01,(a1)+				; shape
000F86C6 5206                       		addq.b	#$01,d6					; sprite link
000F86C8 12C6                       		move.b	d6,(a1)+				; ''
000F86CA 32C2                       		move.w	d2,(a1)+				; VRAM
000F86CC 32C0                       		move.w	d0,(a1)+				; X pos
000F86CE                            
000F86CE                            STDK_NoChannel:
000F86CE 544C                       		addq.w	#$02,a4					; advance to next channel
000F86D0 5207                       		addq.b	#$01,d7					; increase key counter
000F86D2 5205                       		addq.b	#$01,d5					; increase keyboard ID
000F86D4 0C07 000A                  		cmpi.b	#10,d7					; have all 10 keys been accounted for?
000F86D8 6500 FF36                  		blo.w	STDK_NextKey				; if not, branch
000F86DC 0C07 000B                  		cmpi.b	#11,d7					; has FM6 been checked for?
000F86E0 6400                       		bhs.s	STDK_FinishKeys				; if so, branch
000F86E2 7A05                       		moveq	#$05,d5					; set to use PCM 1's keyboard (for FM6)
000F86E4 1038 F040                  		move.b	($FFFFF040).w,d0			; check PCM 1 and 2
000F86E8 8038 F070                  		or.b	($FFFFF070).w,d0			; ''
000F86EC 6A00 FF22                  		bpl.w	STDK_NextKey				; if neither of them are running, do another check for FM 6
000F86F0                            
000F86F0                            STDK_FinishKeys:
000F86F0 7000                       		moveq	#$00,d0					; set end of sprite list
000F86F2 22C0                       		move.l	d0,(a1)+				; ''
000F86F4 4E75                       		rts						; return
000F86F6                            
000F86F6                            ; ---------------------------------------------------------------------------
000F86F6                            ; 
000F86F6                            ; ---------------------------------------------------------------------------
000F86F6                            
000F86F6 2480                       STDK_NoteVRAM:	dc.w	$2480		; FM 1
000F86F8 2488                       		dc.w	$2488		; FM 2
000F86FA 2490                       		dc.w	$2490		; FM 3
000F86FC 2498                       		dc.w	$2498		; FM 4
000F86FE 24A0                       		dc.w	$24A0		; FM 5
000F8700 4480                       		dc.w	$4480		; PCM 1
000F8702 4488                       		dc.w	$4488		; PCM 2
000F8704 4490                       		dc.w	$4490		; PSG 1
000F8706 4498                       		dc.w	$4498		; PSG 2
000F8708 44A0                       		dc.w	$44A0		; PSG 3/4
000F870A 24A8                       		dc.w	$24A8		; FM 6
000F870C                            
000F870C                            ; ---------------------------------------------------------------------------
000F870C                            ; Channel specific controls
000F870C                            ; ---------------------------------------------------------------------------
000F870C                            
000F870C FFFF FB22 0000 0000        STDK_ChanRouts:	dc.l	$FFFFFB22, STDK_ChanFM
000F8714 FFFF FB26 0000 0000        		dc.l	$FFFFFB26, STDK_ChanFM
000F871C FFFF FB2A 0000 0000        		dc.l	$FFFFFB2A, STDK_ChanFM
000F8724 FFFF FB2E 0000 0000        		dc.l	$FFFFFB2E, STDK_ChanFM
000F872C FFFF FB32 0000 0000        		dc.l	$FFFFFB32, STDK_ChanFM
000F8734 FFFF FB42 0000 0000        		dc.l	$FFFFFB42, STDK_ChanPCM
000F873C FFFF FB46 0000 0000        		dc.l	$FFFFFB46, STDK_ChanPCM
000F8744 FFFF FB4A 0000 0000        		dc.l	$FFFFFB4A, STDK_ChanPSG
000F874C FFFF FB4E 0000 0000        		dc.l	$FFFFFB4E, STDK_ChanPSG
000F8754 FFFF FB52 0000 0000        		dc.l	$FFFFFB52, STDK_ChanPSG
000F875C FFFF FB36 0000 0000        		dc.l	$FFFFFB36, STDK_ChanFM
000F8764                            
000F8764                            	; --- FM ---
000F8764                            
000F8764                            STDK_ChanFM:
000F8764 102A 0009                  		move.b	$09(a2),d0				; load volume
000F8768 D038 F016                  		add.b	($FFFFF016).w,d0			; add master volume
000F876C 0400 0010                  		subi.b	#$10,d0					; subtract maximum cap
000F8770 6A00                       		bpl.s	STDK_VolFM_Max				; if the volume is not inside the cap, branch
000F8772 7000                       		moveq	#$00,d0					; force to maximum
000F8774                            
000F8774                            STDK_VolFM_Max:
000F8774 0200 007C                  		andi.b	#%01111100,d0				; get volume range 7C
000F8778 0C00 0020                  		cmpi.b	#%00100000,d0				; is the volume below 20?
000F877C 6500                       		blo.s	STDK_VolFM_Min				; if not, branch
000F877E 103C 001C                  		move.b	#%00011100,d0				; set to maximum 1C
000F8782                            
000F8782                            STDK_VolFM_Min:
000F8782 D800                       		add.b	d0,d4					; add to key palette
000F8784                            
000F8784 41F9 0000 0000             		lea	(FreqListFM).l,a0			; load FM frequency table
000F878A 302A 0010                  		move.w	$10(a2),d0				; load frequency
000F878E 6700                       		beq.s	STDK_InvalidFM				; if it's 0000, branch
000F8790 122A 001E                  		move.b	$1E(a2),d1				; load detune
000F8794 4881                       		ext.w	d1					; ''
000F8796 D041                       		add.w	d1,d0					; add to frequency
000F8798 0812 0003                  		btst.b	#$03,(a2)				; is modulation enabled?
000F879C 6700                       		beq.s	STDK_NoFM_Mod				; if not, branch
000F879E D06A 001C                  		add.w	$1C(a2),d0				; add modulation frequency
000F87A2                            
000F87A2                            STDK_NoFM_Mod:
000F87A2 6100 0000                  		bsr.w	STDK_GetNoteFM				; load the correct note
000F87A6 41F9 FFFF 5800             		lea	($FFFF5800).l,a0			; load FM colours for keys
000F87AC 023C 001B                  		andi.b	#%11011,ccr				; clear the Z flag (so it's non-zero)
000F87B0                            
000F87B0                            STDK_InvalidFM:
000F87B0 4E75                       		rts						; return
000F87B2                            
000F87B2                            	; --- PCM ---
000F87B2                            
000F87B2                            STDK_ChanPCM:
000F87B2 102A 0009                  		move.b	$09(a2),d0				; load volume
000F87B6 7200                       	moveq	#$00,d1				; EXTRA
000F87B8 1238 F016                  	move.b	($FFFFF016).w,d1		; EXTRA
000F87BC                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000F87BC                            ;	move.b	(a0,d1.w),d1			; EXTRA
000F87BC D201                       	add.b	d1,d1
000F87BE D001                       	add.b	d1,d0
000F87C0                            	;	add.b	($FFFFF016).w,d0			; add master volume
000F87C0 6A00                       		bpl.s	STDK_VolPCM_Max				; if the volume hasn't overflown to 40 (mute), branch
000F87C2 707F                       		moveq	#$7F,d0					; force to maximum
000F87C4                            
000F87C4                            STDK_VolPCM_Max:
000F87C4 0200 007C                  		andi.b	#%01111100,d0				; get volume range 7C
000F87C8 0C38 0020 F016             		cmpi.b	#%00100000,($FFFFF016).w		; is the volume below 20?
000F87CE 6500                       		blo.s	STDK_VolPCM_Min				; if not, branch
000F87D0 707C                       		moveq	#%01111100,d0				; set to maximum 1C
000F87D2                            
000F87D2                            STDK_VolPCM_Min:
000F87D2 E408                       	lsr.b	#$02,d0
000F87D4 0200 001C                  	andi.b	#%00011100,d0
000F87D8 D800                       		add.b	d0,d4					; add to key palette
000F87DA                            
000F87DA 41F9 0000 0000             		lea	(FreqListPCM).l,a0			; load PCM frequency table
000F87E0 302A 0010                  		move.w	$10(a2),d0				; load frequency
000F87E4 122A 001E                  		move.b	$1E(a2),d1				; load detune
000F87E8 4881                       		ext.w	d1					; ''
000F87EA D041                       		add.w	d1,d0					; add to frequency
000F87EC 0812 0003                  		btst.b	#$03,(a2)				; is modulation enabled?
000F87F0 6700                       		beq.s	STDK_NoPCM_Mod				; if not, branch
000F87F2 D06A 001C                  		add.w	$1C(a2),d0				; add modulation frequency
000F87F6                            
000F87F6                            STDK_NoPCM_Mod:
000F87F6 6100 0000                  		bsr.w	STDK_GetNote				; load the correct note
000F87FA 41F9 FFFF 5900             		lea	($FFFF5900).l,a0			; load PCM colours for keys
000F8800 023C 001B                  		andi.b	#%11011,ccr				; clear the Z flag (so it's non-zero)
000F8804 4E75                       		rts						; return
000F8806                            
000F8806                            	; --- PSG ---
000F8806                            
000F8806                            STDK_ChanPSG:
000F8806 1038 F016                  		move.b	($FFFFF016).w,d0			; load master volume
000F880A E400                       		asr.b	#$02,d0					; divide by 4
000F880C D02A 0009                  		add.b	$09(a2),d0				; add total volume
000F8810 0C00 0010                  		cmpi.b	#$10,d0					; it is at maximum?
000F8814 6500                       		blo.s	STDK_VolPSG_Max				; if not, branch
000F8816 700E                       		moveq	#%00001110,d0				; set to maximum E
000F8818                            
000F8818                            STDK_VolPSG_Max:
000F8818 0200 000E                  		andi.b	#%00001110,d0				; get volume range E
000F881C D000                       		add.b	d0,d0					; align to position
000F881E D800                       		add.b	d0,d4					; add to key palette
000F8820                            
000F8820 41F9 0000 0000             		lea	(FreqListPSG).l,a0			; load PSG frequency table
000F8826 302A 0010                  		move.w	$10(a2),d0				; load frequency
000F882A 6B00                       		bmi.s	STDK_InvalidPSG				; if it's not FFFF, branch
000F882C 122A 001E                  		move.b	$1E(a2),d1				; load detune
000F8830 4881                       		ext.w	d1					; ''
000F8832 D041                       		add.w	d1,d0					; add to frequency
000F8834 0812 0003                  		btst.b	#$03,(a2)				; is modulation enabled?
000F8838 6700                       		beq.s	STDK_NoPSG_Mod				; if not, branch
000F883A D06A 001C                  		add.w	$1C(a2),d0				; add modulation frequency
000F883E                            
000F883E                            STDK_NoPSG_Mod:
000F883E 6100 0000                  		bsr.w	STDK_GetNoteRev				; load the correct note
000F8842 41F9 FFFF 5A00             		lea	($FFFF5A00).l,a0			; load PSG colours for keys
000F8848 023C 001B                  		andi.b	#%11011,ccr				; clear the Z flag (so it's non-zero)
000F884C 4E75                       		rts						; return
000F884E                            
000F884E                            STDK_InvalidPSG:
000F884E 003C 0004                  		ori.b	#%00100,ccr				; set the Z flag (so it's zero)
000F8852 4E75                       		rts						; return
000F8854                            
000F8854                            ; ===========================================================================
000F8854                            ; ---------------------------------------------------------------------------
000F8854                            ; Getting the right X and Y keyboard positions as well as correct frame
000F8854                            ; ---------------------------------------------------------------------------
000F8854                            
000F8854                            STDK_GetPos:
000F8854 84FC 000C                  		divu.w	#$000C,d2				; ''
000F8858 E74A                       		lsl.w	#$03,d2					; multiply by 28 (size of octave piece on keyboard)
000F885A 3002                       		move.w	d2,d0					; ''
000F885C D442                       		add.w	d2,d2					; ''
000F885E D442                       		add.w	d2,d2					; ''
000F8860 D042                       		add.w	d2,d0					; ''
000F8862 4842                       		swap	d2					; get key position
000F8864 D83B 2000                  		add.b	STDK_KeyCol(pc,d2.w),d4			; add the black key's palette address
000F8868 26B0 4000                  		move.l	(a0,d4.w),(a3)				; save colours to palete buffer
000F886C D442                       		add.w	d2,d2					; multiply by size of long-word
000F886E D442                       		add.w	d2,d2					; ''
000F8870 41FB 2000                  		lea	STDK_KeyPos(pc,d2.w),a0			; load key positions
000F8874 D058                       		add.w	(a0)+,d0				; add X position to octave position
000F8876 3418                       		move.w	(a0)+,d2				; load VRAM art piece
000F8878 4E75                       		rts						; return
000F887A                            
000F887A 0040 0040 0000 4000 4000+  STDK_KeyCol:	dc.b	$00,$40,$00,$40,$00,$00,$40,$00,$40,$00,$40,$00
000F8886                            
000F8886                            
000F8886                            		;	 XXXX  VRAM
000F8886 FFFF 0000                  STDK_KeyPos:	dc.w	$FFFF,$0000
000F888A 0002 0002                  		dc.w	$0002,$0002
000F888E 0005 0004                  		dc.w	$0005,$0004
000F8892 0008 0002                  		dc.w	$0008,$0002
000F8896 000A 0006                  		dc.w	$000A,$0006
000F889A 0010 0000                  		dc.w	$0010,$0000
000F889E 0013 0002                  		dc.w	$0013,$0002
000F88A2 0016 0004                  		dc.w	$0016,$0004
000F88A6 0019 0002                  		dc.w	$0019,$0002
000F88AA 001C 0004                  		dc.w	$001C,$0004
000F88AE 001F 0002                  		dc.w	$001F,$0002
000F88B2 0021 0006                  		dc.w	$0021,$0006
000F88B6                            
000F88B6                            ; ===========================================================================
000F88B6                            ; ---------------------------------------------------------------------------
000F88B6                            ; Working out the right note based on frequency (also accounts for detune/LFO)
000F88B6                            ; ---------------------------------------------------------------------------
000F88B6                            
000F88B6                            	; --- Special octave version for FM ---
000F88B6                            
000F88B6                            STDK_GetNoteFM:
000F88B6 3400                       		move.w	d0,d2					; load frequency
000F88B8 0242 07FF                  		andi.w	#$07FF,d2				; clear octave
000F88BC 0C42 0239                  		cmpi.w	#$025E-$25,d2				; is it down an octave?
000F88C0 6200                       		bhi.s	STDKGNFM_NoDown				; if not, branch
000F88C2 0440 05A2                  		subi.w	#$05E2-$40,d0				; move frequency down a single octave
000F88C6 6000                       		bra.s	STDK_GetNote				; continue
000F88C8                            
000F88C8                            STDKGNFM_NoDown:
000F88C8 0C42 04BC                  		cmpi.w	#$047C+$40,d2				; is it up an octave?
000F88CC 6500                       		blo.s	STDK_GetNote				; if not, branch
000F88CE 0640 05A2                  		addi.w	#$05E2-$40,d0				; move frequency up a single octave
000F88D2                            
000F88D2                            	; --- Normal get note (just happens that only PCM is normal, how ironic) ---
000F88D2                            
000F88D2                            STDK_GetNote:
000F88D2 2F04                       		move.l	d4,-(sp)				; store d4
000F88D4 7460                       		moveq	#$60,d2					; set number of notes to check
000F88D6 3618                       		move.w	(a0)+,d3				; load first frequency
000F88D8                            
000F88D8                            STDKGN_Next:
000F88D8 3803                       		move.w	d3,d4					; store last note
000F88DA 3618                       		move.w	(a0)+,d3				; load next note
000F88DC 3203                       		move.w	d3,d1					; get distance between them
000F88DE 9244                       		sub.w	d4,d1					; ''
000F88E0 E249                       		lsr.w	#$01,d1					; get the exact middle
000F88E2 D244                       		add.w	d4,d1					; ''
000F88E4 B041                       		cmp.w	d1,d0					; has the frequency passed this point?
000F88E6 5FCA FFF0                  		dble	d2,STDKGN_Next				; if not, branch
000F88EA 4442                       		neg.w	d2					; reverse
000F88EC 0642 005F                  		addi.w	#$005F,d2				; ''
000F88F0 281F                       		move.l	(sp)+,d4				; restore d4
000F88F2 4E75                       		rts						; return
000F88F4                            
000F88F4                            	; --- Reverse version for PSG ---
000F88F4                            
000F88F4                            STDK_GetNoteRev:
000F88F4 2F04                       		move.l	d4,-(sp)				; store d4
000F88F6 7460                       		moveq	#$60,d2					; set number of notes to check
000F88F8 3618                       		move.w	(a0)+,d3				; load first frequency
000F88FA                            
000F88FA                            STDKGNR_Next:
000F88FA 3803                       		move.w	d3,d4					; store last note
000F88FC 3618                       		move.w	(a0)+,d3				; load next note
000F88FE 3204                       		move.w	d4,d1					; get distance between them
000F8900 9243                       		sub.w	d3,d1					; ''
000F8902 E249                       		lsr.w	#$01,d1					; get the exact middle
000F8904 D243                       		add.w	d3,d1					; ''
000F8906 B041                       		cmp.w	d1,d0					; has the frequency passed this point?
000F8908 5CCA FFF0                  		dbge	d2,STDKGNR_Next				; if not, branch
000F890C 4442                       		neg.w	d2					; reverse
000F890E 0642 005F                  		addi.w	#$005F,d2				; ''
000F8912 281F                       		move.l	(sp)+,d4				; restore d4
000F8914 4E75                       		rts						; return
000F8916                            
000F8916                            ; ===========================================================================
000F8916                            ; ---------------------------------------------------------------------------
000F8916                            ; Subroutine to draw the paino mappings properly
000F8916                            ; ---------------------------------------------------------------------------
000F8916                            
000F8916                            ST_DrawPaino:
000F8916 47F8 9000                  		lea	($FFFF9000).w,a3			; load status
000F891A                            
000F891A 49F9 0000 0000             		lea	(ST_BGMRAM).l,a4			; load channel RAM list
000F8920 41F9 FFFF 6052             		lea	($FFFF6052).l,a0			; load piano mappings
000F8926 43F8 8002                  		lea	($FFFF8002).w,a1			; load plane buffer
000F892A                            
000F892A 3A3C 0870                  		move.w	#$0870,d5				; load ON mappings address advancement
000F892E 7C01                       		moveq	#$02-1,d6				; set number of rows to render per piano
000F8930 7E09                       		moveq	#$0A-1,d7				; do all channels
000F8932 6100 0000                  		bsr.w	ST_DrawChannels				; ''
000F8936                            
000F8936                            	; --- PSG 4 ---
000F8936                            
000F8936 4A12                       		tst.b	(a2)					; was PSG 3 running?
000F8938 6B00                       		bmi.s	ST_CheckPSG4				; if so, branch
000F893A                            
000F893A                            ST_NoPSG4:
000F893A 089B 0007                  		bclr.b	#$07,(a3)+				; clear PSG 4 flag
000F893E 6700 0000                  		beq.w	ST_CheckFM6				; if it was already cleared, branch
000F8942                            
000F8942 7201                       		moveq	#$02-1,d1				; set number of rows to draw
000F8944 41F9 FFFF 6692             		lea	($FFFF6692).l,a0			; load piano mappings
000F894A 43F8 8A02                  		lea	($FFFF8A02).w,a1			; load plane buffer
000F894E 6100 0000                  		bsr.w	ST_DrawPiano
000F8952                            
000F8952 08F8 0000 A000             		bset.b	#$00,($FFFFA000).w			; set plane redraw flag
000F8958 6000 0000                  		bra.w	ST_CheckFM6				; continue
000F895C                            
000F895C                            ST_CheckPSG4:
000F895C 182A 001F                  		move.b	$1F(a2),d4				; load PSG 3's PSG 4 mode flags
000F8960 67D8                       		beq.s	ST_NoPSG4				; if PSG 4 mode is off, branch
000F8962 0204 0007                  		andi.b	#$07,d4					; get only the mode bits
000F8966 0004 0080                  		ori.b	#$80,d4					; enable the PSG 4 on bit
000F896A B813                       		cmp.b	(a3),d4					; has the mode changed?
000F896C 6700 0000                  		beq.w	ST_FinishPSG4				; if not, branch
000F8970 1684                       		move.b	d4,(a3)					; update mode
000F8972 08F8 0000 A000             		bset.b	#$00,($FFFFA000).w			; set plane redraw flag
000F8978                            
000F8978                            		; "PSG 4"
000F8978                            
000F8978 41F9 FFFF 6692             		lea	($FFFF6692).l,a0			; load piano mappings
000F897E 43F8 8A02                  		lea	($FFFF8A02).w,a1			; load plane buffer
000F8982 7402                       		moveq	#$03-1,d2				; set width of piece
000F8984 6100 0000                  		bsr.w	ST_DrawPiece_On				; draw "PSG 4" on
000F8988                            
000F8988                            		; "WHITE/PERIODIC"
000F8988                            
000F8988 5448                       		addq.w	#$02,a0					; advance to noise type
000F898A 5449                       		addq.w	#$02,a1					; ''
000F898C 7407                       		moveq	#$08-1,d2				; set width of piece
000F898E 0804 0002                  		btst	#$02,d4					; is white noise set?
000F8992 6600                       		bne.s	ST_WhiteNoise				; if so, branch
000F8994 6100 0000                  		bsr.w	ST_DrawPiece				; "WHITE"
000F8998 6100 0000                  		bsr.w	ST_DrawPiece_On				; "PERIODIC"
000F899C 6000                       		bra.s	ST_PeriodicNoise			; continue
000F899E                            
000F899E                            ST_WhiteNoise:
000F899E 6100 0000                  		bsr.w	ST_DrawPiece_On				; "WHITE"
000F89A2 6100 0000                  		bsr.w	ST_DrawPiece				; "PERIODIC"
000F89A6                            
000F89A6                            ST_PeriodicNoise:
000F89A6 5448                       		addq.w	#$02,a0					; advance to noise type
000F89A8 5449                       		addq.w	#$02,a1					; ''
000F89AA 7403                       		moveq	#$04-1,d2				; set width of piece
000F89AC 0244 0003                  		andi.w	#$0003,d4				; get only the frequency type
000F89B0 E90C                       		lsl.b	#$04,d4					; multiply by 10
000F89B2 4EBB 4000                  		jsr	ST_FrequList(pc,d4.w)			; run correct display list
000F89B6 6000                       		bra.s	ST_FinishPSG4				; continue
000F89B8                            
000F89B8                            ST_FrequList:
000F89B8 6100 0000                  		bsr.w	ST_DrawPiece				; "LOW"
000F89BC 6100 0000                  		bsr.w	ST_DrawPiece				; "MID"
000F89C0 6100 0000                  		bsr.w	ST_DrawPiece_On				; "HIGH"
000F89C4 6000 0000                  		bra.w	ST_DrawPiece				; "PSG3"
000F89C8                            
000F89C8 6100 0000                  		bsr.w	ST_DrawPiece				; "LOW"
000F89CC 6100 0000                  		bsr.w	ST_DrawPiece_On				; "MID"
000F89D0 6100 0000                  		bsr.w	ST_DrawPiece				; "HIGH"
000F89D4 6000 0000                  		bra.w	ST_DrawPiece				; "PSG3"
000F89D8                            
000F89D8 6100 0000                  		bsr.w	ST_DrawPiece_On				; "LOW"
000F89DC 6100 0000                  		bsr.w	ST_DrawPiece				; "MID"
000F89E0 6100 0000                  		bsr.w	ST_DrawPiece				; "HIGH"
000F89E4 6000 0000                  		bra.w	ST_DrawPiece				; "PSG3"
000F89E8                            
000F89E8 6100 0000                  		bsr.w	ST_DrawPiece				; "LOW"
000F89EC 6100 0000                  		bsr.w	ST_DrawPiece				; "MID"
000F89F0 6100 0000                  		bsr.w	ST_DrawPiece				; "HIGH"
000F89F4 6000 0000                  		bra.w	ST_DrawPiece_On				; "PSG3"
000F89F8                            
000F89F8                            ST_FinishPSG4:
000F89F8 524B                       		addq.w	#$01,a3					; skip passed PSG 4 flag
000F89FA                            
000F89FA                            ST_CheckFM6:
000F89FA                            
000F89FA                            	; --- FM 6 ---
000F89FA                            
000F89FA 1038 F040                  		move.b	($FFFFF040).w,d0			; load PCM 1 and 2 statuses
000F89FE 8038 F070                  		or.b	($FFFFF070).w,d0			; ''
000F8A02 0200 0080                  		andi.b	#$80,d0					; get only running status
000F8A06 6600                       		bne.s	ST_NoDrawFM6				; if neither are on, branch
000F8A08                            
000F8A08 49F9 0000 0000             		lea	(ST_BGMFM6).l,a4			; load channel RAM list
000F8A0E 41F9 FFFF 6FA2             		lea	($FFFF6FA2).l,a0			; load piano mappings
000F8A14 43F8 8502                  		lea	($FFFF8502).w,a1			; load plane buffer
000F8A18                            
000F8A18 3A3C 0140                  		move.w	#$0140,d5				; load ON mappings address advancement
000F8A1C 7C03                       		moveq	#$04-1,d6				; set number of rows to render per piano
000F8A1E 7E00                       		moveq	#$01-1,d7				; do only 1 channel
000F8A20 6100                       		bsr.s	ST_DrawChannels				; ''
000F8A22 4E75                       		rts						; return
000F8A24                            
000F8A24                            ST_NoDrawFM6:
000F8A24 0893 0007                  		bclr.b	#$07,(a3)				; clear FM 6 flag
000F8A28 6700                       		beq.s	ST_NoRedraw				; if it was already clear, branch
000F8A2A 08F8 0000 A000             		bset.b	#$00,($FFFFA000).w			; set plane redraw flag
000F8A30                            
000F8A30                            ST_NoRedraw:
000F8A30 16BC 0001                  		move.b	#$01,(a3)				; keep low bit set so it registers as "changed" when stopped
000F8A34 4E75                       		rts						; return
000F8A36                            
000F8A36                            ; ---------------------------------------------------------------------------
000F8A36                            ; Checking normal channels
000F8A36                            ; ---------------------------------------------------------------------------
000F8A36                            
000F8A36                            ST_DrawChannels:
000F8A36 3454                       		movea.w	(a4),a2					; load channel
000F8A38 0812 0002                  		btst	#$02,(a2)				; is the channel being interrupted by SFX?
000F8A3C 6600                       		bne.s	ST_CheckSPE				; if so, branch
000F8A3E 102A 0021                  	move.b	$21(a2),d0			; is the channel muted?
000F8A42 4600                       	not.b	d0
000F8A44 4A00                       	tst.b	d0
000F8A46 6A00                       	bpl.s	ST_Mute				; if so, branch
000F8A48 6000                       		bra.s	ST_NoSPE
000F8A4A                            
000F8A4A                            ST_CheckSPE:
000F8A4A 302C 0000                  		move.w	ST_SPERAM-ST_BGMRAM(a4),d0		; load Special SFX channel
000F8A4E 6700                       		beq.s	ST_CheckSFX				; if there is no special SFX channel, branch
000F8A50 3440                       		movea.w	d0,a2					; set address
000F8A52 0812 0002                  		btst	#$02,(a2)				; is the channel being interrupted by SFX?
000F8A56 6700                       		beq.s	ST_NoSPE				; if not, branch
000F8A58                            
000F8A58                            ST_CheckSFX:
000F8A58 302C 0000                  		move.w	ST_SFXRAM-ST_BGMRAM(a4),d0		; load SFX channel
000F8A5C 6700                       		beq.s	ST_NoChannel				; if there is no SFX channel, branch
000F8A5E 3440                       		movea.w	d0,a2					; set address
000F8A60                            
000F8A60                            ST_NoSPE:
000F8A60 1012                       		move.b	(a2),d0					; load channel status
000F8A62                            	ST_Mute:
000F8A62 0200 0080                  		andi.b	#$80,d0					; get only running flag
000F8A66 B013                       		cmp.b	(a3),d0					; has the channel's status changed?
000F8A68 6700                       		beq.s	ST_NoChannel				; no change...
000F8A6A 08F8 0000 A000             		bset.b	#$00,($FFFFA000).w			; set plane redraw flag
000F8A70                            
000F8A70 48E7 00C0                  		movem.l	a0-a1,-(sp)				; store registers
000F8A74 3206                       		move.w	d6,d1					; set number of rows to do
000F8A76 1680                       		move.b	d0,(a3)					; update status
000F8A78 6A00                       		bpl.s	ST_PianoOff				; if turned off, branch
000F8A7A D0C5                       		adda.w	d5,a0					; load ON mappings
000F8A7C                            
000F8A7C                            ST_PianoOff:
000F8A7C 6100                       		bsr.s	ST_DrawPiano				; draw piano
000F8A7E 4CDF 0300                  		movem.l	(sp)+,a0-a1				; restore registers
000F8A82                            
000F8A82                            ST_NoChannel:
000F8A82 41E8 00A0                  		lea	$50*2(a0),a0				; advance to next source mappings
000F8A86 43E9 0100                  		lea	$80*2(a1),a1				; advance to next destination plane
000F8A8A 524B                       		addq.w	#$01,a3					; advance to next status storage
000F8A8C 544C                       		addq.w	#$02,a4					; advance to next channel
000F8A8E 51CF FFA6                  		dbf	d7,ST_DrawChannels			; repeat for all channels
000F8A92 4E75                       		rts						; return
000F8A94                            
000F8A94                            ST_DrawPiano:
000F8A94 22D8                       		move.l	(a0)+,(a1)+				; copy mappings
000F8A96 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8A98 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8A9A 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8A9C 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8A9E 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AA0 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AA2 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AA4 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AA6 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AA8 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AAA 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AAC 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AAE 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AB0 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AB2 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AB4 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AB6 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8AB8 22D8                       		move.l	(a0)+,(a1)+				; ''
000F8ABA 5848                       		addq.w	#$04,a0					; advance to next source mappings
000F8ABC 43E9 0034                  		lea	$80-($26*2)(a1),a1			; advance to next plane row
000F8AC0 51C9 FFD2                  		dbf	d1,ST_DrawPiano				; repeat for both rows
000F8AC4 4E75                       		rts						; return
000F8AC6                            
000F8AC6                            ; ---------------------------------------------------------------------------
000F8AC6                            ; Subroutine to draw a PSG 4 piece
000F8AC6                            ; ---------------------------------------------------------------------------
000F8AC6                            
000F8AC6                            ST_DrawPiece_On:
000F8AC6 48E7 00C0                  		movem.l	a0-a1,-(sp)				; store registers
000F8ACA D0FC 0870                  		adda.w	#$1B*$50,a0				; advance to "ON" graphics
000F8ACE 6000                       		bra.s	STDP_Start				; continue
000F8AD0                            
000F8AD0                            ST_DrawPiece:
000F8AD0 48E7 00C0                  		movem.l	a0-a1,-(sp)				; store registers
000F8AD4                            
000F8AD4                            STDP_Start:
000F8AD4 7001                       		moveq	#$01,d0					; set height
000F8AD6                            
000F8AD6                            STDP_NextColumn:
000F8AD6 48E7 00C0                  		movem.l	a0-a1,-(sp)				; store registers
000F8ADA 3202                       		move.w	d2,d1					; load width
000F8ADC                            
000F8ADC                            STDP_NextRow:
000F8ADC 32D8                       		move.w	(a0)+,(a1)+
000F8ADE 51C9 FFFC                  		dbf	d1,STDP_NextRow				; repeat for width
000F8AE2 4CDF 0300                  		movem.l	(sp)+,a0-a1				; restore registers
000F8AE6 41E8 0050                  		lea	$50(a0),a0				; advance to next source mappings
000F8AEA 43E9 0080                  		lea	$80(a1),a1				; advance to next destination plane
000F8AEE 51C8 FFE6                  		dbf	d0,STDP_NextColumn			; repeat for height
000F8AF2 4CDF 0300                  		movem.l	(sp)+,a0-a1				; restore registers
000F8AF6 3202                       		move.w	d2,d1					; advance mapping address to end
000F8AF8 5241                       		addq.w	#$01,d1					; increase by 1 (due to dbf)
000F8AFA D241                       		add.w	d1,d1					; ''
000F8AFC D0C1                       		adda.w	d1,a0					; ''
000F8AFE D2C1                       		adda.w	d1,a1					; ''
000F8B00 4E75                       		rts						; return
000F8B02                            
000F8B02                            ; ---------------------------------------------------------------------------
000F8B02                            ; Channel RAM list
000F8B02                            ; ---------------------------------------------------------------------------
000F8B02                            
000F8B02 F0A0                       ST_BGMRAM:	dc.w	$F0A0					; FM 1
000F8B04 F0D0                       		dc.w	$F0D0					; FM 2
000F8B06 F100                       		dc.w	$F100					; FM 3
000F8B08 F130                       		dc.w	$F130					; FM 4
000F8B0A F160                       		dc.w	$F160					; FM 5
000F8B0C F040                       		dc.w	$F040					; PCM 1
000F8B0E F070                       		dc.w	$F070					; PCM 2
000F8B10 F1C0                       		dc.w	$F1C0					; PSG 1
000F8B12 F1F0                       		dc.w	$F1F0					; PSG 2
000F8B14 F220                       		dc.w	$F220					; PSG 3/4
000F8B16 F190                       ST_BGMFM6:	dc.w	$F190					; FM 6
000F8B18                            
000F8B18 0000                       ST_SFXRAM:	dc.w	$0000					; FM 1
000F8B1A 0000                       		dc.w	$0000					; FM 2
000F8B1C F250                       		dc.w	$F250					; FM 3
000F8B1E F280                       		dc.w	$F280					; FM 4
000F8B20 F2B0                       		dc.w	$F2B0					; FM 5
000F8B22 0000                       		dc.w	$0000					; PCM 1
000F8B24 0000                       		dc.w	$0000					; PCM 2
000F8B26 F2E0                       		dc.w	$F2E0					; PSG 1
000F8B28 F310                       		dc.w	$F310					; PSG 2
000F8B2A F340                       		dc.w	$F340					; PSG 3
000F8B2C 0000                       		dc.w	$0000					; FM 6
000F8B2E                            
000F8B2E 0000                       ST_SPERAM:	dc.w	$0000					; FM 1
000F8B30 0000                       		dc.w	$0000					; FM 2
000F8B32 0000                       		dc.w	$0000					; FM 3
000F8B34 F370                       		dc.w	$F370					; FM 4
000F8B36 0000                       		dc.w	$0000					; FM 5
000F8B38 0000                       		dc.w	$0000					; PCM 1
000F8B3A 0000                       		dc.w	$0000					; PCM 2
000F8B3C 0000                       		dc.w	$0000					; PSG 1
000F8B3E 0000                       		dc.w	$0000					; PSG 2
000F8B40 F3A0                       		dc.w	$F3A0					; PSG 3
000F8B42 0000                       		dc.w	$0000					; FM 6
000F8B44                            
000F8B44                            ; ===========================================================================
000F8B44                            ; ---------------------------------------------------------------------------
000F8B44                            ; V-blank - Sound Test (Text bar at bottom)
000F8B44                            ; ---------------------------------------------------------------------------
000F8B44                            
000F8B44                            HB_SoundTest:
000F8B44 33FC 8A00 00C0 0004        		move.w	#$8A00|$00,($C00004).l			; set new interrupt line occurance amount
000F8B4C 21FC FFFF 5D00 FF92        		move.l	#$FFFF5D00,(HBlankRout).w		; set H-blank routine
000F8B54 13FC 0027 FFFF 5FFF        		move.b	#$28-1,($FFFF5FFF).l			; set counter
000F8B5C 4E73                       		rte						; return
000F8B5E                            
000F8B5E                            	; --- Copied to RAM 5C00
000F8B5E                            
000F8B5E                            HBST_FontBar:
000F8B5E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l			; set VDP to VSRAM write mode
000F8B68 23F9 FFFF 5E00 00C0 0000   HBST_FontPos:	move.l	($FFFF5E00).l,($C00000).l		; change V-scroll position
000F8B72 5879 FFFF 5D0E             		addq.w	#$04,((HBST_FontPos-HBST_FontBar)+$FFFF5D00)+$04
000F8B78 5339 FFFF 5FFF             		subq.b	#$01,($FFFF5FFF).l			; decrease counter
000F8B7E 6A00                       		bpl.s	HBST_NoFinish				; if not finished, branch
000F8B80 33FC 8ADF 00C0 0004        		move.w	#$8A00|$DF,($C00004).l			; revert align amount
000F8B88 21FC 0000 0AAA FF92        		move.l	#NullBlank,(HBlankRout).w		; set H-blank routine
000F8B90                            
000F8B90                            HBST_NoFinish:
000F8B90 4E73                       		rte						; return
000F8B92                            HBST_FontBar_End:
000F8B92                            
000F8B92                            ; ===========================================================================
000F8B92                            ; ---------------------------------------------------------------------------
000F8B92                            ; V-blank - Sound Test (Normal)
000F8B92                            ; ---------------------------------------------------------------------------
000F8B92                            
000F8B92                            VB_SoundTest:
000F8B92 48E7 01C0                  		movem.l	d7/a0-a1,-(sp)				; store registers
000F8B96 41F9 000F 8B5E             		lea	(HBST_FontBar).l,a0
000F8B9C 43F9 FFFF 5D00             		lea	($FFFF5D00).l,a1
000F8BA2                            
000F8BA2                            		rept	(HBST_FontBar_End-HBST_FontBar)/$04
000F8BA2                            		move.l	(a0)+,(a1)+
000F8BA2 22D8 22D8 22D8 22D8 22D8+  		endr
000F8BBC                            
000F8BBC 4CDF 0380                  		movem.l	(sp)+,d7/a0-a1				; restore registers
000F8BC0 33FC 8A5B 00C0 0004        		move.w	#$8A00|($B7/$02),($C00004).l		; set interrupt line address
000F8BC8 21FC 000F 8B44 FF92        		move.l	#HB_SoundTest,(HBlankRout).w		; set H-blank routine
000F8BD0                            
000F8BD0                            VB_SoundTest_NoHB:
000F8BD0 48E7 FFFE                  		movem.l	d0-a6,-(sp)				; store register data
000F8BD4 4A38 F62A                  		tst.b	($FFFFF62A).w				; was the 68k late?
000F8BD8 6700 0000                  		beq.w	VBST_68kLate				; if so, branch
000F8BDC 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port
000F8BE2 4DED 0004                  		lea	$04(a5),a6				; load VDP control port
000F8BE6 5338 A001                  		subq.b	#$01,($FFFFA001).w			; decrease postpone draw timer
000F8BEA 6A00                       		bpl.s	VBST_NoDrawPlane			; if it's still running, branch
000F8BEC 51F8 A001                  		sf.b	($FFFFA001).w				; keep at 0
000F8BF0 08B8 0000 A000             		bclr.b	#$00,($FFFFA000).w			; clear plane drawn flag
000F8BF6 6700                       		beq.s	VBST_NoDrawPlane			; if it was already clear, branch (no drawing required)
000F8BF8 2CBC 9405 9380 2CBC 96C0+  		DMA	$0B00, $FFFF8000, $60800003		; background plane
000F8C0E                            
000F8C0E                            VBST_NoDrawPlane:
000F8C0E 2CBC 9400 9340 2CBC 96FD+  		DMA	$0080, $FFFFFB00, $C0000000		; palette
000F8C24 2CBC 9401 9340 2CBC 96FC+  		DMA	$0280, $FFFFF800, $78000003		; sprites
000F8C3A 2CBC 9401 93C0 2CBC 96E6+  		DMA	$0380, $FFFFCC00, $7C000003		; h-scroll
000F8C50 2CBC 4000 0010             		move.l	#$40000010,(a6)				; v-scroll
000F8C56 2AB8 F616                  		move.l	($FFFFF616).w,(a5)			; ''
000F8C5A 4EB8 2548                  		jsr	ReadJoypads				; read the controller pads
000F8C5E                            
000F8C5E                            VBST_68kLate:
000F8C5E 51F8 F62A                  		sf.b	($FFFFF62A).w				; clear V-blank flag
000F8C62 46FC 2300                  		move.w	#$2300,sr				; enable interrupts
000F8C66 4EB9 000E 7F02             		jsr	sub_71B4C				; run sound driver
000F8C6C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6				; restore register data
000F8C70 4E77                       		rtr						; return and restore ccr (does not affect sr)
000F8C72                            
000F8C72                            ; ===========================================================================
000F8C72                            ; ---------------------------------------------------------------------------
000F8C72                            ; Subroutine to clear a section of VDP memory using DMA fill
000F8C72                            ; ---------------------------------------------------------------------------
000F8C72                            ;		move.l	#$40000080,d0				; VDP mode/address
000F8C72                            ;		move.w	#$0400,d1				; size to clear
000F8C72                            ;		jsr	(ClearVDP).w				; clear VDP memory section
000F8C72                            ; ---------------------------------------------------------------------------
000F8C72                            
000F8C72                            ClearVDP:
000F8C72 3CBC 8F01                  		move.w	#$8F01,(a6)				; set increment mode to 1
000F8C76 243C 9780 9300             		move.l	#$97809300,d2				; prepare size register data
000F8C7C 5341                       		subq.w	#$01,d1					; decrease size by 1
000F8C7E 1401                       		move.b	d1,d2					; get low byte
000F8C80 2C82                       		move.l	d2,(a6)					; set DMA source & DMA size low byte
000F8C82 E049                       		lsr.w	#$08,d1					; get high byte
000F8C84 0041 9400                  		ori.w	#$9400,d1				; load size register
000F8C88 3C81                       		move.w	d1,(a6)					; set DMA size high byte
000F8C8A 2C80                       		move.l	d0,(a6)					; set DMA destination
000F8C8C 3ABC 0000                  		move.w	#$0000,(a5)				; fill location with 0000
000F8C90 4E71                       		nop						; delay
000F8C92                            
000F8C92                            CVD_Wait:
000F8C92 44D6                       		move.w	(a6),ccr				; load status (this resets the 2nd write flag too)
000F8C94 69FC                       		bvs.s	CVD_Wait				; if the VDP DMA busy flag was set (bit 1), branch to wait til finished...
000F8C96 3CBC 8F02                  		move.w	#$8F02,(a6)				; set increment mode to normal
000F8C9A 4E75                       		rts						; return
000F8C9C                            
000F8C9C                            ; ===========================================================================
000F8C9C                            ; ---------------------------------------------------------------------------
000F8C9C                            ; Subroutine to write mapping tiles correctly to a plane
000F8C9C                            ; --- Inputs ----------------------------------------------------------------
000F8C9C                            ; d3.l = Line advance value
000F8C9C                            ; d0.l = VRAM address of plane to write to
000F8C9C                            ; d1.w = X size
000F8C9C                            ; d2.w = Y size
000F8C9C                            ; ---------------------------------------------------------------------------
000F8C9C                            
000F8C9C                            MapScreen:
000F8C9C 263C 0080 0000             		move.l	#$00800000,d3				; prepare line advance amount
000F8CA2                            
000F8CA2                            MapRow:
000F8CA2 2C80                       		move.l	d0,(a6)					; set VDP to VRAM write mode
000F8CA4 D083                       		add.l	d3,d0					; advance to next line
000F8CA6 3801                       		move.w	d1,d4					; load X size
000F8CA8                            
000F8CA8                            MapColumn:
000F8CA8 3A99                       		move.w	(a1)+,(a5)				; copy tile mappings over
000F8CAA 51CC FFFC                  		dbf	d4,MapColumn				; repeat until all done
000F8CAE 51CA FFF2                  		dbf	d2,MapRow				; repeat for all rows
000F8CB2 4E75                       		rts	
000F8CB4                            
000F8CB4                            ; ===========================================================================
000F8CB4                            ; ---------------------------------------------------------------------------
000F8CB4                            ; Frequency lists for channels
000F8CB4                            ; ---------------------------------------------------------------------------
000F8CB4                            
000F8CB4                            ; --- FM ---
000F8CB4                            
000F8CB4                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000F8CB4                            
000F8CB4 025E                       FreqListFM:	dc.w	                                                            	  $025E	; Octave-1 - (80 <- accessible via pitch alteration)
000F8CB6 0284 02AB 02D3 02FE 032D+  		dc.w	$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C,$0A5E	; Octave 0 - (81 - 8C)
000F8CCE 0A84 0AAB 0AD3 0AFE 0B2D+  		dc.w	$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C,$125E	; Octave 1 - (8D - 98)
000F8CE6 1284 12AB 12D3 12FE 132D+  		dc.w	$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C,$1A5E	; Octave 2 - (99 - A4)
000F8CFE 1A84 1AAB 1AD3 1AFE 1B2D+  		dc.w	$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C,$225E	; Octave 3 - (A5 - B0)
000F8D16 2284 22AB 22D3 22FE 232D+  		dc.w	$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C,$2A5E	; Octave 4 - (B1 - BC)
000F8D2E 2A84 2AAB 2AD3 2AFE 2B2D+  		dc.w	$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C,$325E	; Octave 5 - (BD - C8)
000F8D46 3284 32AB 32D3 32FE 332D+  		dc.w	$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C,$3A5E	; Octave 6 - (c9 - D4)
000F8D5E 3A84 3AAB 3AD3 3AFE 3B2D+  		dc.w	$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C	; Octave 7 - (D5 - DF)
000F8D74                            
000F8D74                            ; --- PSG ---
000F8D74                            
000F8D74                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000F8D74                            
000F8D74 0389                       FreqListPSG:	dc.w	$0389	; < Added note 80 for calculation
000F8D76 0356 0326 02F9 02CE 02A5+  		dc.w	$0356,$0326,$02F9,$02CE,$02A5,$0280,$025C,$023A,$021A,$01FB,$01DF,$01C4	; Octave 3 - (81 - 8C)
000F8D8E 01AB 0193 017D 0167 0153+  		dc.w	$01AB,$0193,$017D,$0167,$0153,$0140,$012E,$011D,$010D,$00FE,$00EF,$00E2	; Octave 4 - (8D - 98)
000F8DA6 00D6 00C9 00BE 00B4 00A9+  		dc.w	$00D6,$00C9,$00BE,$00B4,$00A9,$00A0,$0097,$008F,$0087,$007F,$0078,$0071	; Octave 5 - (99 - A4)
000F8DBE 006B 0065 005F 005A 0055+  		dc.w	$006B,$0065,$005F,$005A,$0055,$0050,$004B,$0047,$0043,$0040,$003C,$0039	; Octave 6 - (A5 - B0)
000F8DD6 0036 0033 0030 002D 002B+  		dc.w	$0036,$0033,$0030,$002D,$002B,$0028,$0026,$0024,$0022,$0020,$001F,$001D	; Octave 7 - (B1 - BC)
000F8DEE                            
000F8DEE                            	; --- 8D to C5 ---
000F8DEE                            	; These last notes are from BD to C5, but they are difficult to place
000F8DEE                            	; the notes at.
000F8DEE                            	; I am suspecious however, that they do not follow the exact order from
000F8DEE                            	; "C" to "B", it gets impossible as you cannot have half a binary, though
000F8DEE                            	; if someone could clarify for me, that would be great.
000F8DEE                            	; ----------------
000F8DEE                            
000F8DEE 001B 001A 0018 0017 0016+  		dc.w	$001B,$001A,$0018,$0017,$0016,$0015,$0013,$0012,$0011			; Notes (BD - C5)
000F8E00                            
000F8E00                            	; --- C6 ---
000F8E00                            	; The highest frequency noise the PSG can make, this is usually used for Hi-hats in Sonic 1.
000F8E00                            	; ----------
000F8E00                            
000F8E00 0000                       		dc.w	$0000									; Note (C6)
000F8E02                            
000F8E02                            	; --- C7 to DF ---
000F8E02                            	; These notes access random frequencies created from the instructions
000F8E02                            	; below, so it's best to avoid accessing them.
000F8E02                            	; ----------------
000F8E02                            
000F8E02 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000
000F8E12 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000F8E22 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000F8E32 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000F8E42 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000F8E52 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000F8E62 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000F8E72 039A 121C                  		dc.w	$039A,$121C
000F8E76                            
000F8E76                            ; --- PCM ---
000F8E76                            
000F8E76                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000F8E76                            
000F8E76 000E                       FreqListPCM:	dc.w	$000E	; < Added note 80 for calculation
000F8E78 000F 0010 0011 0012 0013+  		dc.w	$000F,$0010,$0011,$0012,$0013,$0014,$0016,$0017,$0019,$001B,$001D,$001F	; Octave 0 - (81 - 8C)
000F8E90 0021 0023 0025 0027 0029+  		dc.w	$0021,$0023,$0025,$0027,$0029,$002B,$002E,$0031,$0034,$0037,$003A,$003C	; Octave 1 - (8D - 98)
000F8EA8 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0056,$005A,$0060,$0066,$006C,$0072,$007A	; Octave 2 - (99 - A4)
000F8EC0 0080 0088 0090 0098 00A2+  		dc.w	$0080,$0088,$0090,$0098,$00A2,$00AC,$00B6,$00C2,$00CE,$00DA,$00E6,$00F2	; Octave 3 - (A5 - B0)
000F8ED8 0100 0110 0121 0132 0144+  		dc.w	$0100,$0110,$0121,$0132,$0144,$0156,$016B,$0184,$0198,$01B2,$01C8,$01E4	; Octave 4 - (B1 - BC)
000F8EF0 0204 0220 0240 0262 0286+  		dc.w	$0204,$0220,$0240,$0262,$0286,$02AC,$02D4,$0300,$032C,$035C,$0390,$03C4	; Octave 5 - (BD - C8)
000F8F08 0404 0440 0488 04C8 0510+  		dc.w	$0404,$0440,$0488,$04C8,$0510,$0558,$05A8,$05FC,$0658,$06C4,$0730,$078C	; Octave 6 - (C9 - D4)
000F8F20 0806 0888 090C 0990 0A20+  		dc.w	$0806,$0888,$090C,$0990,$0A20,$0AB0,$0B48,$0BF8,$0CA8,$0D74,$0E48	; Octave 7 - (D5 - DF)
000F8F36                            
000F8F36                            ; ===========================================================================
000F8F36                            ; ---------------------------------------------------------------------------
000F8F36                            ; Data includes
000F8F36                            ; ---------------------------------------------------------------------------
000F8F36                            
000F8F36                            Pal_Sound:	incbin	"Screen Sound Test\Data\Pal Piano.bin"
000F8F56 0000 000E 0008 000E 0008+  		dc.w	$0000,$000E,$0008,$000E,$0008,$000E,$0008,$000E
000F8F66 0008 000E 0008 000E 0008+  		dc.w	$0008,$000E,$0008,$000E,$0008,$0E84,$0800,$0000
000F8F76 0000 0E00 0800 0E00 0800+  		dc.w	$0000,$0E00,$0800,$0E00,$0800,$00E0,$0080,$00E0
000F8F86 0080 00E0 0080 0000 0000+  		dc.w	$0080,$00E0,$0080,$0000,$0000,$0000,$0000,$0000
000F8F96 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000F8FA6 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000F8FB6                            Pal_Sound_End:	even
000F8FB6                            
000F8FB6                            Art_Piano:	incbin	"Screen Sound Test\Data\Art Piano.nem"
000FCF24                            		even
000FCF24                            Map_Piano:	incbin	"Screen Sound Test\Data\Map Piano.eni"
000FD7C4                            		even
000FD7C4                            
000FD7C4                            Art_Keys:	incbin	"Screen Sound Test\Data\Art Keys.nem"
000FD930                            		even
000FD930                            
000FD930                            Art_Font:	incbin	"Screen Sound Test\Data\Art Font.nem"
000FDF04                            		even
000FDF04                            Map_Font:	incbin	"Screen Sound Test\Data\Map Font.bin"
000FE074                            		even
000FE074                            
000FE074                            Art_Extras:	incbin	"Screen Sound Test\Data\Art Extras.nem"
000FE0CE                            		even
000FE0CE                            
000FE0CE                            ; ===========================================================================
000FE0CE                            
000FE0CE                            
000FE0CE                            
000FE0CE                            
000FE0CE                            ; ===========================================================================
000FE0CE                            ; ---------------------------------------------------------------------------
000FE0CE                            ; Z80 ROM address
000FE0CE                            ; ---------------------------------------------------------------------------
000FE0CE                            
000FE0CE                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000FFC06 00                         Z80ROM_End:	even
000FFC06                            
000FFC06                            ; ===========================================================================
000FFC06                            ; ---------------------------------------------------------------------------
000FFC06                            ; Sample 68k PCM list
000FFC06                            ; ---------------------------------------------------------------------------
000FFC06                            ; SampleList:
000FFC06                            		include	"Dual PCM\Samples.asm"
000FFC06                            ; ===========================================================================
000FFC06                            ; ---------------------------------------------------------------------------
000FFC06                            ; Sample 68k PCM list
000FFC06                            ; ---------------------------------------------------------------------------
000FFC06                            
000FFC06                            SampleList:
000FFC06                            
000FFC06                            	; --- Sonic 1 Samples ---
000FFC06                            
000FFC06 0000 0000                  		dc.l	Sonic1Kick				; 00
000FFC0A 0000 0000                  		dc.l	Sonic1Snare				; 01
000FFC0E 0000 0000                  		dc.l	Sonic1Timpani			; 02
000FFC12 0000 0000                  		dc.l	StopSample	; Free slot	; 03
000FFC16 0000 0000                  		dc.l	StopSample	; Free slot	; 04
000FFC1A 0000 0000                  		dc.l	StopSample	; Free slot	; 05
000FFC1E 0000 0000                  		dc.l	StopSample	; Free slot	; 06
000FFC22 0000 0000                  		dc.l	StopSample	; Free slot	; 07
000FFC26                            
000FFC26                            	; --- Sonic 3 Samples ---
000FFC26                            
000FFC26 0000 0000                  		dc.l	Sonic3WHOOCRASH			; 08
000FFC2A 0000 0000                  		dc.l	Sonic3WHOO				; 09
000FFC2E 0000 0000                  		dc.l	Sonic3ComeOn			; 0A
000FFC32 0000 0000                  		dc.l	Sonic3KickEh			; 0B
000FFC36 0000 0000                  		dc.l	Sonic3HardSnare			; 0C
000FFC3A 0000 0000                  		dc.l	Sonic3Hit				; 0D
000FFC3E 0000 0000                  		dc.l	Sonic3Kick				; 0E
000FFC42 0000 0000                  		dc.l	Sonic3Snare				; 0F
000FFC46                            
000FFC46                            	; --- Sonic CD Samples ---
000FFC46                            
000FFC46 0000 0000                  		dc.l	SonicCDYe				; 10
000FFC4A 0000 0000                  		dc.l	SonicCDheah				; 11
000FFC4E 0000 0000                  		dc.l	SonicCDTom				; 12
000FFC52 0000 0000                  		dc.l	SonicCDKick				; 13
000FFC56 0000 0000                  		dc.l	SonicCDSnare			; 14
000FFC5A 0000 0000                  		dc.l	SonicCDSax				; 15
000FFC5E 0000 0000                  		dc.l	SonicCDScQuick			; 16
000FFC62 0000 0000                  		dc.l	SonicCDScSlow			; 17
000FFC66 0000 0000                  		dc.l	SonicCDBoink			; 18
000FFC6A 0000 0000                  		dc.l	SonicCDPadLow			; 19
000FFC6E 0000 0000                  		dc.l	SonicCDPadHigh			; 1A
000FFC72 0000 0000                  		dc.l	SonicCDPPZDrumsP		; Free slot	; 1B
000FFC76 0000 0000                  		dc.l	SonicCDPPZBassP			; Free slot	; 1C
000FFC7A 0000 0000                  		dc.l	SonicCDPPZFluteP		; Free slot	; 1D
000FFC7E 0000 0000                  		dc.l	SCD_Title				; 1E
000FFC82 0000 0000                  		dc.l	SCD_PPZ					; 1F
000FFC86                            	
000FFC86                            	; --- Jungle Samples ---
000FFC86                            
000FFC86 0000 0000                  		dc.l	JungleAmenKick			; 20
000FFC8A 0000 0000                  		dc.l	JungleAmenKickLight		; 21
000FFC8E 0000 0000                  		dc.l	JungleAmenSnare			; 22
000FFC92 0000 0000                  		dc.l	JungleAmenSnareLight	; 23
000FFC96 0000 0000                  		dc.l	JungleAmenSnareLow		; 24
000FFC9A 0000 0000                  		dc.l	JungleAmenSnareSoft		; 25
000FFC9E 0000 0000                  		dc.l	JungleAmenHat			; 26
000FFCA2 0000 0000                  		dc.l	JungleAmenCrash			; 27
000FFCA6 0000 0000                  		dc.l	JungleSynthScience		; 28
000FFCAA 0000 0000                  		dc.l	JungleSynthShakatak		; 29
000FFCAE 0000 0000                  		dc.l	JungleSynthShakatakEnd	; 2A
000FFCB2 0000 0000                  		dc.l	JungleVocalDreadFull	; 2B
000FFCB6 0000 0000                  		dc.l	JungleVocalDread		; 2C
000FFCBA 0000 0000                  		dc.l	JungleVocalDreadEnd		; 2D
000FFCBE 0000 0000                  		dc.l	JungleVocalRespect		; 2E
000FFCC2 0000 0000                  		dc.l	JungleVocalRespectEnd	; 2F
000FFCC6 0000 0000                  		dc.l	JungleVocalBurning		; 30
000FFCCA 0000 0000                  		dc.l	JungleVocalFemale		; 31
000FFCCE 0000 0000                  		dc.l	JungleVocalFemaleEnd	; 32
000FFCD2 0000 0000                  		dc.l	StopSample	; Free slot	; 33
000FFCD6 0000 0000                  		dc.l	StopSample	; Free slot	; 34
000FFCDA 0000 0000                  		dc.l	StopSample	; Free slot	; 35
000FFCDE 0000 0000                  		dc.l	StopSample	; Free slot	; 36
000FFCE2 0000 0000                  		dc.l	StopSample	; Free slot	; 37
000FFCE6                            
000FFCE6                            	; --- 2-Unlimited Samples ---
000FFCE6                            
000FFCE6 0000 0000                  		dc.l	M2U_Scratch				; 38
000FFCEA 0000 0000                  		dc.l	M2U_Hat					; 39
000FFCEE 0000 0000                  		dc.l	M2U_YallReady			; 3A
000FFCF2 0000 0000                  		dc.l	M2U_YeahYeah			; 3B
000FFCF6 0000 0000                  		dc.l	StopSample	; Free slot	; 3C
000FFCFA 0000 0000                  		dc.l	StopSample	; Free slot	; 3D
000FFCFE 0000 0000                  		dc.l	StopSample	; Free slot	; 3E
000FFD02 0000 0000                  		dc.l	StopSample	; Free slot	; 3F
000FFD06                            
000FFD06                                ; --- Other Sonic CD Samples ---
000FFD06 0000 0000                  		dc.l	StopSample	; Free slot	; 40
000FFD0A 0000 0000                  		dc.l	StopSample  ; Free slot ; 41
000FFD0E 0000 0000                  		dc.l	StopSample  ; Free slot ; 42
000FFD12 0000 0000                  		dc.l	StopSample  ; Free slot ; 43
000FFD16 0000 0000                  		dc.l 	SCD_Life                ; 44
000FFD1A 0000 0000                  		dc.l	SCD_Future              ; 45
000FFD1E 0000 0000                  		dc.l	SCD_Past                ; 46
000FFD22 0000 0000                  		dc.l	SCD_OuttaHere           ; 47
000FFD26 0000 0000                  		dc.l	StopSample ; Free slot  ; 48
000FFD2A 0000 0000                  		dc.l	StopSample ; Free slot  ; 49
000FFD2E 0000 0000                  		dc.l	StopSample ; Free slot  ; 4A
000FFD32 0000 0000                  		dc.l	StopSample ; Free slot  ; 4B
000FFD36 0000 0000                  		dc.l	SCD_EoA					; 4C
000FFD3A 0000 0000                  		dc.l	SCD_Game 				; 4D
000FFD3E 0000 0000                  		dc.l	SCD_Inv 				; 4E
000FFD42 0000 0000                  		dc.l	SCD_Speed 				; 4F 
000FFD46 0000 0000                  		dc.l 	StopSample 				; 50
000FFD4A 0000 0000                  		dc.l	SCD_Future 				; 51
000FFD4E 0000 0000                  		dc.l	SCD_Past 				; 52
000FFD52 0000 0000                  		dc.l	SCD_OuttaHere 			; 53
000FFD56 0000 0000                  		dc.l	SCD_PPZ_GF				; 54
000FFD5A 0000 0000                  		dc.l	SCD_PPZ_BF 				; 55
000FFD5E 0000 0000                  		dc.l	SCD_Boss 				; 56
000FFD62                            		;dc.l	SCD_YDA					; Unused Line
000FFD62                            
000FFD62                            ; ---------------------------------------------------------------------------
000FFD62                            ; Sample z80 pointers
000FFD62                            ; ---------------------------------------------------------------------------
000FFD62 =000036B0                  Sec	=	14000	; Hz per second
000FFD62 =000003E8                  Mil	=	1000	; centi-seconds per second
000FFD62                            
000FFD62                            	; --- Stop Sample (used by note 80) ---
000FFD62                            
000FFD62 0000 0000 0000 0000 0000+  StopSample:		dcz80	SWF_StopSample,		SWF_StopSample_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFD6E                            
000FFD6E                            	; --- Sonic 1 Samples ---
000FFD6E                            
000FFD6E 0000 0000 0000 0000 0000+  Sonic1Kick:		dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFD7A 0000 0000 0000 0000 0000+  Sonic1Snare:		dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFD86 0000 0000 0000 0000 0000+  Sonic1Timpani:		dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,		SWF_StopSample,		SWF_StopSample_Rev
000FFD92                            
000FFD92                            	; --- Sonic 3 Samples ---
000FFD92                            
000FFD92 0000 0000 0000 0000 0000+  Sonic3WHOOCRASH:	dcz80	SWF_S3_WHOOCRASH,	SWF_S3_WHOOCRASH_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFD9E 0000 0000 0000 0000 0000+  Sonic3WHOO:		dcz80	SWF_S3_WHOO,		SWF_S3_WHOO_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFDAA 0000 0000 0000 0000 0000+  Sonic3ComeOn:		dcz80	SWF_S3_ComeOn,		SWF_S3_ComeOn_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFDB6 0000 0000 0000 0000 0000+  Sonic3KickEh		dcz80	SWF_S3_KickEh,		SWF_S3_KickEh_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFDC2 0000 0000 0000 0000 0000+  Sonic3HardSnare:	dcz80	SWF_S3_HardSnare,	SWF_S3_HardSnare_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFDCE 0000 0000 0000 0000 0000+  Sonic3Hit:		dcz80	SWF_S3_Hit,		SWF_S3_Hit_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000FFDDA 0000 0000 0000 0000 0000+  Sonic3Kick:		dcz80	SWF_S3_Kick,		SWF_S3_Kick_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFDE6 0000 0000 0000 0000 0000+  Sonic3Snare:		dcz80	SWF_S3_Snare,		SWF_S3_Snare_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFDF2                            
000FFDF2                            	; --- Sonic CD Samples ---
000FFDF2                            
000FFDF2 0000 0000 0000 0000 0000+  SonicCDYe:		    dcz80	SWF_SCD_Ye,		SWF_SCD_Yeheah_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFDFE 0000 0000 0000 0000 0000+  SonicCDheah:		dcz80	SWF_SCD_heah,		SWF_SCD_Yeheah_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE0A 0000 0000 0000 0000 0000+  SonicCDTom:		    dcz80	SWF_SCD_Tom,		SWF_SCD_Tom_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE16 0000 0000 0000 0000 0000+  SonicCDKick:		dcz80	SWF_SCD_Kick,		SWF_SCD_Kick_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE22 0000 0000 0000 0000 0000+  SonicCDSnare:		dcz80	SWF_SCD_Snare,		SWF_SCD_Snare_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE2E 0000 0000 0000 0000 0000+  SonicCDSax:		    dcz80	SWF_SCD_Sax,		SWF_SCD_Sax_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE3A 0000 0000 0000 0000 0000+  SonicCDScQuick:		dcz80	SWF_SCD_ScQuick,	SWF_SCD_ScQuick_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE46 0000 0000 0000 0000 0000+  SonicCDScSlow:		dcz80	SWF_SCD_ScSlow,		SWF_SCD_ScSlow_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE52 0000 0000 0000 0000 0000+  SonicCDBoink:		dcz80	SWF_SCD_Boink,		SWF_SCD_Boink_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE5E 0000 0000 0000 0000 0000+  SonicCDPadLow:		dcz80	SWF_SCD_PadLow,		SWF_SCD_PadLow_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE6A 0000 0000 0000 0000 0000+  SonicCDPadHigh:		dcz80	SWF_SCD_PadHigh,	SWF_SCD_PadHigh_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFE76 0000 0000 0000 0000 0000+  SonicCDPPZDrumsP:   dcz80   SWF_SCD_PPZDrumP,   SWF_SCD_PPZDrumP_Rev, SWF_StopSample, SWF_StopSample
000FFE82 0000 0000 0000 0000 0000+  SonicCDPPZBassP:    dcz80   SWF_SCD_PPZBassP,   SWF_SCD_PPZBassP_Rev,  SWF_StopSample, SWF_StopSample
000FFE8E 0000 0000 0000 0000 0000+  SonicCDPPZFluteP:   dcz80   SWF_SCD_PPZFluteP,  SWF_SCD_PPZFluteP_Rev,  SWF_StopSample, SWF_StopSample
000FFE9A                            ;SCD_YDA:   dcz80   SWF_SCD_YDA,  SWF_SCD_YDA_Rev,  SWF_StopSample, SWF_StopSample
000FFE9A 0000 0000 0000 0000 0000+  SCD_Title:   dcz80   SWF_SCD_Title,  SWF_SCD_Title_Rev,  SWF_StopSample, SWF_StopSample
000FFEA6 0000 0000 0000 0000 0000+  SCD_PPZ:   		 dcz80   SWF_SCD_PPZ,  SWF_SCD_PPZ_Rev,  SWF_StopSample, SWF_StopSample
000FFEB2 0000 0000 0000 0000 0000+  SCD_EoA:		 dcz80   SWF_SCD_EoA,  SWF_SCD_EoA_Rev,  SWF_StopSample, SWF_StopSample
000FFEBE 0000 0000 0000 0000 0000+  SCD_Game:		 dcz80   SWF_SCD_Game,  SWF_SCD_Game_Rev,  SWF_StopSample, SWF_StopSample
000FFECA 0000 0000 0000 0000 0000+  SCD_Inv:		 dcz80   SWF_SCD_Inv,  SWF_SCD_Inv_Rev,  SWF_StopSample, SWF_StopSample
000FFED6 0000 0000 0000 0000 0000+  SCD_Speed:		 dcz80   SWF_SCD_Speed,  SWF_SCD_Speed_Rev,  SWF_StopSample, SWF_StopSample
000FFEE2 0000 0000 0000 0000 0000+  SCD_Life:	 dcz80   SWF_SCD_Life,  SWF_SCD_Life_Rev,  SWF_StopSample, SWF_StopSample
000FFEEE 0000 0000 0000 0000 0000+  SCD_Future:	 dcz80   SWF_SCD_Future,  SWF_SCD_Future_Rev,  SWF_StopSample, SWF_StopSample
000FFEFA 0000 0000 0000 0000 0000+  SCD_Past:	 dcz80   SWF_SCD_Past,  SWF_SCD_Past_Rev,  SWF_StopSample, SWF_StopSample
000FFF06 0000 0000 0000 0000 0000+  SCD_OuttaHere:	 dcz80   SWF_SCD_OuttaHere,  SWF_SCD_OuttaHere_Rev,  SWF_StopSample, SWF_StopSample
000FFF12 0000 0000 0000 0000 0000+  SCD_PPZ_GF:		 dcz80   SWF_SCD_PPZ_GF,  SWF_SCD_PPZ_GF_Rev,  SWF_StopSample, SWF_StopSample
000FFF1E 0000 0000 0000 0000 0000+  SCD_PPZ_BF:		 dcz80   SWF_SCD_PPZ_BF,  SWF_SCD_PPZ_BF_Rev,  SWF_StopSample, SWF_StopSample
000FFF2A 0000 0000 0000 0000 0000+  SCD_Boss:	 dcz80   SWF_SCD_Boss,  SWF_SCD_Boss_Rev,  SWF_StopSample, SWF_StopSample
000FFF36                            
000FFF36                            	; --- Jungle Samples ---
000FFF36                            
000FFF36 0000 0000 0000 0000 0000+  JungleAmenKick:		dcz80	SWF_JUN_AmenKick,	SWF_JUN_AmenKick_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFF42 0000 0000 0000 0000 0000+  JungleAmenKickLight:	dcz80	SWF_JUN_AmenKickLig,	SWF_JUN_AmenKickLig_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFF4E 0000 0000 0000 0000 0000+  JungleAmenSnare:	dcz80	SWF_JUN_AmenSnare,	SWF_JUN_AmenSnare_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFF5A 0000 0000 0000 0000 0000+  JungleAmenSnareLight:	dcz80	SWF_JUN_AmenSnareLi,	SWF_JUN_AmenSnareLi_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFF66 0000 0000 0000 0000 0000+  JungleAmenSnareLow:	dcz80	SWF_JUN_AmenSnareLo,	SWF_JUN_AmenSnareLo_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFF72 0000 0000 0000 0000 0000+  JungleAmenSnareSoft:	dcz80	SWF_JUN_AmenSnareSo,	SWF_JUN_AmenSnareSo_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFF7E 0000 0000 0000 0000 0000+  JungleAmenHat:		dcz80	SWF_JUN_AmenHat,	SWF_JUN_AmenHat_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFF8A 0000 0000 0000 0000 0000+  JungleAmenCrash:	dcz80	SWF_JUN_AmenCrash,	SWF_JUN_AmenCrash_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFF96 0000 0000 0000 0000 0000+  JungleSynthScience:	dcz80	SWF_JUN_SynthScienc,	SWF_JUN_SynthScienc_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFFA2 0000 0000 0000 0000 0000+  JungleSynthShakatak:	dcz80	SWF_JUN_SynthShakat,	SWF_JUN_SynthShakat_Rev,SWF_JUN_SynthShakatLoop,SWF_JUN_SynthShakat_Rev
000FFFAE 0000 0000 0000 0000 0000+  JungleSynthShakatakEnd:	dcz80	SWF_JUN_SynthShaEnd,	SWF_JUN_SynthShaEnd_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFFBA 0000 0000 0000 0000 0000+  JungleVocalDreadFull:	dcz80	SWF_JUN_VocalDreadFull,	SWF_JUN_VocalDread_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFFC6 0000 0000 0000 0000 0000+  JungleVocalDread:	dcz80	SWF_JUN_VocalDread,	SWF_JUN_VocalDread_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFFD2 0000 0000 0000 0000 0000+  JungleVocalDreadEnd:	dcz80	SWF_JUN_VocalDreadEnd,	SWF_JUN_VocalDread_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000FFFDE 0000 0000 0000 0000 0000+  JungleVocalRespect:	dcz80	SWF_JUN_VocalRespect,	SWF_JUN_VocalRespct_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFFEA 0000 0000 0000 0000 0000+  JungleVocalRespectEnd:	dcz80	SWF_JUN_VocalRespectEnd,SWF_JUN_VocalRespct_Rev,SWF_StopSample,		SWF_StopSample_Rev
000FFFF6 0000 0000 0000 0000 0000+  JungleVocalBurning:	dcz80	SWF_JUN_VocalBurn,	SWF_JUN_VocalBurn_Rev,	SWF_StopSample,		SWF_StopSample_Rev
00100002 0000 0000 0000 0000 0000+  JungleVocalFemale:	dcz80	SWF_JUN_VocalFemale,	SWF_JUN_VocalFemale_Rev,SWF_StopSample,		SWF_StopSample_Rev
0010000E 0000 0000 0000 0000 0000+  JungleVocalFemaleEnd:	dcz80	SWF_JUN_VocalFemaleEnd,	SWF_JUN_VocalFemale_Rev,SWF_StopSample,		SWF_StopSample_Rev
0010001A                            
0010001A                            	; --- 2-Unlimited Samples ---
0010001A                            
0010001A 0000 0000 0000 0000 0000+  M2U_Scratch:		dcz80	SWF_2U_Scratch,		SWF_2U_Scratch_Rev,	SWF_StopSample,		SWF_StopSample_Rev
00100026 0000 0000 0000 0000 0000+  M2U_Hat:		dcz80	SWF_2U_Hat,		SWF_2U_Hat_Rev,		SWF_StopSample,		SWF_StopSample_Rev
00100032 0000 0000 0000 0000 0000+  M2U_YallReady:		dcz80	SWF_2U_YallReady,	SWF_2U_YallReady_Rev,	SWF_StopSample,		SWF_StopSample_Rev
0010003E 0000 0000 0000 0000 0000+  M2U_YeahYeah:		dcz80	SWF_2U_YeahYeah,	SWF_2U_YeahYeah_Rev,	SWF_StopSample,		SWF_StopSample_Rev
0010004A                            
0010004A                            ; ---------------------------------------------------------------------------
0010004A                            ; Sample file includes
0010004A                            ; ---------------------------------------------------------------------------
00108000                            ; ---------------------------------------------------------------------------
00108000                            
00108000                            	; --- Volume tables ---
00108000                            
00108000                            PCM_Volumes:		incbin	"Volume Maker\Volumes.bin"
00110000                            
00110000                            	; --- Stop Sample (used by note 80) ---
00110000                            
00110000                            			EndMarker
00110198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
00117E68                            SWF_StopSample_Rev:	EndMarker
00118000                            
00118000                            	; --- Sonic 1 Samples ---
00118000                            
00118000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
001188B3                            SWF_S1_Kick_Rev:	EndMarker
00118A4B                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
00119342                            SWF_S1_Snare_Rev:	EndMarker
001194DA                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
0011C50B                            SWF_S1_Timpani_Rev:	EndMarker
0011C6A3                            
0011C6A3                            	; --- Sonic 3 Samples ---
0011C6A3                            
0011C6A3                            SWF_S3_WHOOCRASH:	incbin	"Dual PCM\Samples\incswf\Sonic 3 WHOO! (With Crash).swf"
0011D6D6                            SWF_S3_WHOOCRASH_Rev:	EndMarker
0011D86E                            SWF_S3_WHOO:		incbin	"Dual PCM\Samples\incswf\Sonic 3 WHOO!.swf"
0011F013                            SWF_S3_WHOO_Rev:	EndMarker
0011F1AB                            SWF_S3_ComeOn:		incbin	"Dual PCM\Samples\incswf\Sonic 3 Come On!.swf"
00120E0E                            SWF_S3_ComeOn_Rev:	EndMarker
00120FA6                            SWF_S3_KickEh:		incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick Eh!.swf"
00121BE1                            SWF_S3_KickEh_Rev:	EndMarker
00121D79                            SWF_S3_HardSnare:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Hard Snare.swf"
00123052                            SWF_S3_HardSnare_Rev:	EndMarker
001231EA                            SWF_S3_Hit:		incbin	"Dual PCM\Samples\incswf\Sonic 3 Hit.swf"
00123FE0                            SWF_S3_Hit_Rev:		EndMarker
00124178                            SWF_S3_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick.swf"
00124C68                            SWF_S3_Kick_Rev:	EndMarker
00124E00                            SWF_S3_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 3 Snare.swf"
00125C48                            SWF_S3_Snare_Rev:	EndMarker
00125DE0                            
00125DE0                            	; --- Sonic CD Samples ---
00125DE0                            
00125DE0                            SWF_SCD_Ye:		incbin	"Dual PCM\Samples\incswf\Sonic CD Ye-.swf"
00127AF4                            SWF_SCD_Heah:		incbin	"Dual PCM\Samples\incswf\Sonic CD -heah.swf"
00129704                            SWF_SCD_Yeheah_Rev:	EndMarker
0012989C                            SWF_SCD_Tom:		incbin	"Dual PCM\Samples\incswf\Sonic CD Tom.swf"
0012A5D7                            SWF_SCD_Tom_Rev:	EndMarker
0012A76F                            SWF_SCD_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic CD Kick.swf"
0012AE04                            SWF_SCD_Kick_Rev:	EndMarker
0012AF9C                            SWF_SCD_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic CD Snare.swf"
0012B8FC                            SWF_SCD_Snare_Rev:	EndMarker
0012BA94                            SWF_SCD_Sax:		incbin	"Dual PCM\Samples\incswf\Sonic CD Sax.swf"
0012C50F                            SWF_SCD_Sax_Rev:	EndMarker
0012C6A7                            SWF_SCD_ScQuick:	incbin	"Dual PCM\Samples\incswf\Sonic CD Scratch Quick.swf"
0012CEC6                            SWF_SCD_ScQuick_Rev:	EndMarker
0012D05E                            SWF_SCD_ScSlow:		incbin	"Dual PCM\Samples\incswf\Sonic CD Scratch Slow.swf"
0012E5C0                            SWF_SCD_ScSlow_Rev:	EndMarker
0012E758                            SWF_SCD_Boink:		incbin	"Dual PCM\Samples\incswf\Sonic CD Boink.swf"
0012FD9B                            SWF_SCD_Boink_Rev:	EndMarker
0012FF33                            SWF_SCD_PadLow:		incbin	"Dual PCM\Samples\incswf\Sonic CD Pad Low.swf"
00133FB6                            SWF_SCD_PadLow_Rev:	EndMarker
0013414E                            SWF_SCD_PadHigh:	incbin	"Dual PCM\Samples\incswf\Sonic CD Pad High.swf"
00138C29                            SWF_SCD_PadHigh_Rev:	EndMarker
00138DC1                            SWF_SCD_PPZDrumP:	incbin	"Dual PCM\Samples\incswf\Drum Loop.bin"
00141F1C                            SWF_SCD_PPZDrumP_Rev:	EndMarker
001420B4                            SWF_SCD_PPZBassP:	incbin	"Dual PCM\Samples\incswf\Sonic CD Bass PPZ Past.swf"
00144F14                            SWF_SCD_PPZBassP_Rev:	EndMarker
001450AC                            SWF_SCD_PPZFluteP:	incbin	"Dual PCM\Samples\incswf\Sonic CD Flute PPZ Past.swf"
0014756F                            SWF_SCD_PPZFluteP_Rev:	EndMarker
00147707                            
00147707                            SWF_SCD_Life: incbin "Dual PCM\Samples\incswf\SCD_Life_1.swf"
00148E34                            SWF_SCD_Life_Rev: EndMarker
00148FCC                            
00148FCC                            SWF_SCD_Future: incbin "Dual PCM\Samples\incswf\SCD_Future!.swf"
0014BE19                            SWF_SCD_Future_Rev: EndMarker
0014BFB1                            SWF_SCD_Past: incbin "Dual PCM\Samples\incswf\SCD Past!.swf"
0014E722                            SWF_SCD_Past_Rev: EndMarker
0014E8BA                            SWF_SCD_OuttaHere: incbin "Dual PCM\Samples\incswf\SCD_OuttaHere!.swf"
00150F4F                            SWF_SCD_OuttaHere_Rev: EndMarker
001510E7                            SWF_SCD_Title: ;incbin "Dual PCM\Samples\incswf\26 Title Screen.swf"
001510E7                            SWF_SCD_Title_Rev: EndMarker
0015127F                            SWF_SCD_PPZ: ;incbin "Dual PCM\Samples\incswf\PPZ Present.swf"
0015127F                            SWF_SCD_PPZ_Rev: EndMarker
00151417                            SWF_SCD_EoA: ;incbin "Dual PCM\Samples\incswf\28 Act Clear.swf"
00151417                            SWF_SCD_EoA_Rev: EndMarker
001515AF                            SWF_SCD_Game: ;incbin "Dual PCM\Samples\incswf\31 Game Over.swf"
001515AF                            SWF_SCD_Game_Rev: EndMarker
00151747                            SWF_SCD_Inv: ;incbin "Dual PCM\Samples\incswf\30 Invincble.swf"
00151747                            SWF_SCD_Inv_Rev: EndMarker
001518DF                            SWF_SCD_Speed: ;incbin "Dual PCM\Samples\incswf\29 Speed Up.swf"
001518DF                            SWF_SCD_Speed_Rev: EndMarker
00151A77                            SWF_SCD_PPZ_GF: ;incbin "Dual PCM\Samples\incswf\04 Palmtree Panic Good Future.swf"
00151A77                            SWF_SCD_PPZ_GF_Rev: EndMarker
00151C0F                            SWF_SCD_PPZ_BF: ;incbin "Dual PCM\Samples\incswf\05 Palmtree Panic Bad Future.swf"
00151C0F                            SWF_SCD_PPZ_BF_Rev: EndMarker
00151DA7                            SWF_SCD_Boss: ;incbin "Dual PCM\Samples\incswf\24 Boss.swf"
00151DA7                            SWF_SCD_Boss_Rev: EndMarker
00151F3F                            
00151F3F                            
00151F3F                            	; --- Jungle Samples ---
00151F3F                            
00151F3F                            SWF_JUN_AmenKick:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Kick.swf"
001529D8                            SWF_JUN_AmenKick_Rev:	EndMarker
00152B70                            SWF_JUN_AmenKickLig:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Kick Light.swf"
001537BA                            SWF_JUN_AmenKickLig_Rev:EndMarker
00153952                            SWF_JUN_AmenSnare:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Snare.swf"
001545D1                            SWF_JUN_AmenSnare_Rev:	EndMarker
00154769                            SWF_JUN_AmenSnareLi:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Snare Light.swf"
00154D75                            SWF_JUN_AmenSnareLi_Rev:EndMarker
00154F0D                            SWF_JUN_AmenSnareLo:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Snare Low.swf"
00155BA9                            SWF_JUN_AmenSnareLo_Rev:EndMarker
00155D41                            SWF_JUN_AmenSnareSo:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Snare Soft.swf"
0015690D                            SWF_JUN_AmenSnareSo_Rev:EndMarker
00156AA5                            SWF_JUN_AmenHat:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Hat.swf"
001574A2                            SWF_JUN_AmenHat_Rev:	EndMarker
0015763A                            SWF_JUN_AmenCrash:	incbin	"Dual PCM\Samples\incswf\Jungle Amen Crash.swf"
00158DEC                            SWF_JUN_AmenCrash_Rev:	EndMarker
00158F84                            SWF_JUN_SynthScienc:	incbin	"Dual PCM\Samples\incswf\Jungle Synth Science.swf"
001951BA                            SWF_JUN_SynthScienc_Rev:EndMarker
00195352                            SWF_JUN_SynthShakat:	incbin	"Dual PCM\Samples\incswf\Jungle Synth Shakatak 01.swf"
0019E823                            SWF_JUN_SynthShakatLoop:incbin	"Dual PCM\Samples\incswf\Jungle Synth Shakatak 02.swf"
001A0D68                            SWF_JUN_SynthShakat_Rev:EndMarker
001A0F00                            SWF_JUN_SynthShaEnd:	incbin	"Dual PCM\Samples\incswf\Jungle Synth Shakatak 03.swf"
001A3FE0                            SWF_JUN_SynthShaEnd_Rev:EndMarker
001A4178                            SWF_JUN_VocalDreadFull:	incbin	"Dual PCM\Samples\incswf\Jungle Vocal Dread Control 01.swf"
001A4895                            SWF_JUN_VocalDread:	incbin	"Dual PCM\Samples\incswf\Jungle Vocal Dread Control 02.swf"
001A9C37                            SWF_JUN_VocalDreadEnd:	incbin	"Dual PCM\Samples\incswf\Jungle Vocal Dread Control 03.swf"
001AB790                            SWF_JUN_VocalDread_Rev:	EndMarker
001AB928                            SWF_JUN_VocalRespect:	incbin	"Dual PCM\Samples\incswf\Jungle Vocal Respect 01.swf"
001AF4B7                            SWF_JUN_VocalRespectEnd:incbin	"Dual PCM\Samples\incswf\Jungle Vocal Respect 02.swf"
001B0520                            SWF_JUN_VocalRespct_Rev:EndMarker
001B06B8                            SWF_JUN_VocalBurn:	incbin	"Dual PCM\Samples\incswf\Jungle Vocal Burning.swf"
001B2F69                            SWF_JUN_VocalBurn_Rev:	EndMarker
001B3101                            SWF_JUN_VocalFemale:	incbin	"Dual PCM\Samples\incswf\Jungle Vocal Female 01.swf"
001B6632                            SWF_JUN_VocalFemaleEnd:	incbin	"Dual PCM\Samples\incswf\Jungle Vocal Female 02.swf"
001B84D3                            SWF_JUN_VocalFemale_Rev:EndMarker
001B866B                            
001B866B                            	; --- 2-Unlimited Samples ---
001B866B                            
001B866B                            SWF_2U_Scratch:		incbin	"Dual PCM\Samples\incswf\2U Scratch.swf"
001B9A20                            SWF_2U_Scratch_Rev:	EndMarker
001B9BB8                            SWF_2U_Hat:		incbin	"Dual PCM\Samples\incswf\2U Hat.swf"
001BA632                            SWF_2U_Hat_Rev:		EndMarker
001BA7CA                            SWF_2U_YallReady:	incbin	"Dual PCM\Samples\incswf\2U Yall Ready.swf"
001BDE00                            SWF_2U_YallReady_Rev:	EndMarker
001BDF98                            SWF_2U_YeahYeah:	incbin	"Dual PCM\Samples\incswf\2U YeahYeah.swf"
001C1900                            SWF_2U_YeahYeah_Rev:	EndMarker
001C1A98                            
001C1A98                            ; ===========================================================================
001C1A98                            ; ===========================================================================
001C1A98                            
001C1A98                            ; ===========================================================================
001C1A98                            ; ===========================================================================
001C1A98                            Sound_Driver_End:
001C1A98                            	even
001C1A98                            	
001C1A98                            SoundDriver_2Load:
001C1A98 303C 0100                  	move.w	#$100,d0
001C1A9C 33C0 00A1 1100             	move.w	d0,(Z80_BUS).l				; Stop the Z80
001C1AA2 33C0 00A1 1200             	move.w	d0,(Z80_RESET).l			; Disable Z80 reset
001C1AA8                            
001C1AA8                            @Wait:
001C1AA8 0839 0000 00A1 1100        	btst	#0,(Z80_BUS).l
001C1AB0 66F6                       	bne.s	@Wait
001C1AB2                            
001C1AB2 41F9 0000 0000             	lea	SoundDriver_2,a0				; Load sound driver
001C1AB8 43F9 00A0 0000             	lea	Z80_RAM,a1
001C1ABE 323C 0000                  	move.w	#SoundDriver_2_End-SoundDriver_2-1,d1
001C1AC2                            
001C1AC2                            @Load:
001C1AC2 12D8                       	move.b	(a0)+,(a1)+
001C1AC4 51C9 FFFC                  	dbf	d1,@Load
001C1AC8                            
001C1AC8 7200                       	moveq	#0,d1					; Reset Z80
001C1ACA 33C1 00A1 1200             	move.w	d1,(Z80_RESET).l
001C1AD0 4E71                       	nop
001C1AD2 4E71                       	nop
001C1AD4 4E71                       	nop
001C1AD6 4E71                       	nop
001C1AD8 33C0 00A1 1200             	move.w	d0,(Z80_RESET).l			; Disable Z80 reset
001C1ADE 33C1 00A1 1100             	move.w	d1,(Z80_BUS).l				; Start the Z80
001C1AE4 4E75                       	rts
001C1AE6                            
001C1AE6                            SoundDriver_2: incbin "Sound Driver SCD.bin"
001C35BC                            SoundDriver_2_End:
001C35BC                            	even
001C35BC                            ; ==============================================================
001C35BC                            ; --------------------------------------------------------------
001C35BC                            ; Debugging modules
001C35BC                            ; --------------------------------------------------------------
001C35BC                            
001C35BC                               include   "ErrorHandler.asm"
001C35BC                            
001C35BC                            ; ===============================================================
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            ; Error handling and debugging modules
001C35BC                            ;
001C35BC                            ; (c) 2016-2023, Vladikcomper
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            ; Error handler functions and calls
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            ; Error handler control flags
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            
001C35BC                            ; Screen appearence flags
001C35BC =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
001C35BC =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
001C35BC                            
001C35BC                            ; Advanced execution flags
001C35BC                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
001C35BC =00000020                  _eh_return			equ	$20
001C35BC =00000040                  _eh_enter_console	equ	$40
001C35BC =00000080                  _eh_align_offset	equ	$80
001C35BC                            
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            ; Errors vector table
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            
001C35BC                            ; Default screen configuration
001C35BC =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
001C35BC                            
001C35BC                            ; ---------------------------------------------------------------
001C35BC                            
001C35BC                            BusError:
001C35D4                            
001C35D4                            AddressError:
001C35F0                            
001C35F0                            IllegalInstr:
001C3612                            
001C3612                            ZeroDivide:
001C362C                            
001C362C                            ChkInstr:
001C364A                            
001C364A                            TrapvInstr:
001C366A                            
001C366A                            PrivilegeViol:
001C368C                            
001C368C                            Trace:
001C36A0                            
001C36A0                            Line1010Emu:
001C36C0                            
001C36C0                            Line1111Emu:
001C36E0                            
001C36E0                            ErrorExcept:
001C36FE                            
001C36FE                            
001C36FE                            ; ---------------------------------------------------------------
001C36FE                            ; Import error handler global functions
001C36FE                            ; ---------------------------------------------------------------
001C36FE                            
001C36FE                            ; Debugger extension functions
001C36FE                            __global__ErrorHandler_ConsoleOnly: equ DebuggerExtensions+$0
001C36FE                            __global__ErrorHandler_ClearConsole: equ DebuggerExtensions+$26
001C36FE                            __global__KDebug_WriteLine_Formatted: equ DebuggerExtensions+$50
001C36FE                            __global__KDebug_Write_Formatted: equ DebuggerExtensions+$54
001C36FE                            __global__KDebug_FlushLine: equ DebuggerExtensions+$AA
001C36FE                            __global__ErrorHandler_PauseConsole: equ DebuggerExtensions+$C2
001C36FE                            __global__ErrorHandler_PagesController: equ DebuggerExtensions+$F8
001C36FE                            __global__VSync: equ DebuggerExtensions+$158
001C36FE                            
001C36FE                            ; Error handler & core functions
001C36FE                            __global__ErrorHandler: equ ErrorHandler+$0
001C36FE                            __global__Error_IdleLoop: equ ErrorHandler+$122
001C36FE                            __global__Error_InitConsole: equ ErrorHandler+$13C
001C36FE                            __global__Error_MaskStackBoundaries: equ ErrorHandler+$148
001C36FE                            __global__Error_DrawOffsetLocation: equ ErrorHandler+$1B2
001C36FE                            __global__Error_DrawOffsetLocation2: equ ErrorHandler+$1B6
001C36FE                            __global__ErrorHandler_SetupVDP: equ ErrorHandler+$23C
001C36FE                            __global__ErrorHandler_VDPConfig: equ ErrorHandler+$274
001C36FE                            __global__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$28A
001C36FE                            __global__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2C6
001C36FE                            __global__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2CA
001C36FE                            __global__Art1bpp_Font: equ ErrorHandler+$334
001C36FE                            __global__FormatString: equ ErrorHandler+$8F8
001C36FE                            __global__Console_Init: equ ErrorHandler+$9CE
001C36FE                            __global__Console_Reset: equ ErrorHandler+$A10
001C36FE                            __global__Console_InitShared: equ ErrorHandler+$A12
001C36FE                            __global__Console_SetPosAsXY_Stack: equ ErrorHandler+$A4E
001C36FE                            __global__Console_SetPosAsXY: equ ErrorHandler+$A54
001C36FE                            __global__Console_GetPosAsXY: equ ErrorHandler+$A82
001C36FE                            __global__Console_StartNewLine: equ ErrorHandler+$AA4
001C36FE                            __global__Console_SetBasePattern: equ ErrorHandler+$ACC
001C36FE                            __global__Console_SetWidth: equ ErrorHandler+$AE0
001C36FE                            __global__Console_WriteLine_WithPattern: equ ErrorHandler+$AF6
001C36FE                            __global__Console_WriteLine: equ ErrorHandler+$AF8
001C36FE                            __global__Console_Write: equ ErrorHandler+$AFC
001C36FE                            __global__Console_WriteLine_Formatted: equ ErrorHandler+$BA8
001C36FE                            __global__Console_Write_Formatted: equ ErrorHandler+$BAC
001C36FE                            __global__Decomp1bpp: equ ErrorHandler+$BDC
001C36FE                            
001C36FE                            ; ---------------------------------------------------------------
001C36FE                            ; Built-in debuggers
001C36FE                            ; ---------------------------------------------------------------
001C36FE                            
001C36FE                            Debugger_AddressRegisters:
001C36FE                            
001C36FE 48E7 00FE 41FA 002A        	dc.l	$48E700FE, $41FA002A
001C3706 4EBA 0000                  	jsr		__global__Console_Write(pc)
001C370A 49D7 7C06 3F3C 2000 2F3C+  	dc.l	$49D77C06, $3F3C2000, $2F3CE861, $303A41D7
001C371A 221C                       	dc.w	$221C
001C371C 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation(pc)
001C3720 522F 0002 51CE FFF2 4FEF+  	dc.l	$522F0002, $51CEFFF2, $4FEF0022, $4E75E0FA, $01F026EA, $41646472, $65737320, $52656769
001C3740 7374 6572 733A E0E0        	dc.l	$73746572, $733AE0E0
001C3748 0000                       	dc.w	$0000
001C374A                            
001C374A                            Debugger_Backtrace:
001C374A                            
001C374A 41FA 0088                  	dc.l	$41FA0088
001C374E 4EBA 0000                  	jsr		__global__Console_Write(pc)
001C3752 2278 0000 5989 45D7        	dc.l	$22780000, $598945D7
001C375A 4EBA 0000                  	jsr		__global__Error_MaskStackBoundaries(pc)
001C375E B3CA 6570 0C52 0040 6464+  	dc.l	$B3CA6570, $0C520040, $64642012, $67602040, $02400001, $66581220, $10200C00, $00616604
001C377E 4A01 663A 0C00 004E 660A+  	dc.l	$4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A, $30200C40, $61006722, $12004200
001C379E 0C40 4E00 6612 0C01 00A8+  	dc.l	$0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01, $00B96606, $0C604EB9, $66102F0A
001C37BE 2F09 2208                  	dc.l	$2F092208
001C37C2 4EBA 0000                  	jsr		__global__Error_DrawOffsetLocation2(pc)
001C37C6 225F 245F 548A 548A B3CA+  	dc.l	$225F245F, $548A548A, $B3CA6490, $4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
001C37E6 0000                       	dc.w	$0000
001C37E8                            
001C37E8                            ; ---------------------------------------------------------------
001C37E8                            ; Debugger extensions
001C37E8                            ; ---------------------------------------------------------------
001C37E8                            
001C37E8                            DebuggerExtensions:
001C37E8                            
001C37E8 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $47EF003C
001C37F8 4EBA 0000                  	jsr		__global__ErrorHandler_SetupVDP(pc)
001C37FC 4EBA 0000                  	jsr		__global__Error_InitConsole(pc)
001C3800 4CDF 7FFF                  	dc.l	$4CDF7FFF
001C3804 487A 0000                  	pea		__global__Error_IdleLoop(pc)
001C3808 2F2F 0012 4E75 2F0B 4E6B+  	dc.l	$2F2F0012, $4E752F0B, $4E6B0C2B, $005D000C, $661A48E7, $C4464BF9, $00C00004, $4DEDFFFC
001C3828 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Initial(pc), a1
001C382C 4EBA 0000                  	jsr		__global__Console_Reset(pc)
001C3830 4CDF 6223 265F 4E75 487A+  	dc.l	$4CDF6223, $265F4E75, $487A0058, $4E680C28, $005D000C, $67182F0C, $49FA0016, $4FEFFFF0
001C3850 41D7 7E0E                  	dc.l	$41D77E0E
001C3854 4EBA 0000                  	jsr		__global__FormatString(pc)
001C3858 4FEF 0010 285F 4E75 4218+  	dc.l	$4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00
001C3878 6002 3A87 1E18 6EFA 6708+  	dc.l	$60023A87, $1E186EFA, $67080407, $00E067F2, $60F22A5F, $205F7E0E, $4E752F08, $4E680C28
001C3898 005D 000C 6708 33FC 9E00+  	dc.l	$005D000C, $670833FC, $9E0000C0, $0004205F, $4E7548E7, $C0D04E6B, $0C2B005D, $000C660C
001C38B8 3F3C 0000 610C 610A 67FC+  	dc.l	$3F3C0000, $610C610A, $67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178
001C38D8 70F0 C02F 0005 4E75 48E7+  	dc.l	$70F0C02F, $00054E75, $48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2
001C38F8 6B40 41FA 0076 5888 D000+  	dc.l	$6B4041FA, $00765888, $D00064FA, $20106F32, $20404FEF
001C390C FFF2                       	dc.w	$FFF2
001C390E 43FA 0000                  	lea		__global__ErrorHandler_ConsoleConfig_Shared(pc), a1
001C3912 47D7 2A3C 4000 0003        	dc.l	$47D72A3C, $40000003
001C391A 4EBA 0000                  	jsr		__global__Console_InitShared(pc)
001C391E 2ABC 8230 8406 2A85 487A+  	dc.l	$2ABC8230, $84062A85, $487A000C, $48504CEF, $7FFF0014, $4E754FEF, $000E60B0
001C393A 2ABA 0000                  	move.l	__global__ErrorHandler_VDPConfig_Nametables(pc), (a5)
001C393E 60AA 41F9 00C0 0004 44D0+  	dc.l	$60AA41F9, $00C00004, $44D06BFC, $44D06AFC, $4E7512BC, $00004E71, $72C01011, $E50812BC
001C395E 0040 4E71 C001 1211 0201+  	dc.l	$00404E71, $C0011211, $0201003F, $80014600, $1210B101, $10C0C200, $10C14E75
001C397A                            
001C397A                            ; WARNING! Don't move! This must be placed directly below "DebuggerExtensions"
001C397A                            DebuggerExtensions_ExtraDebuggerList:
001C397A 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER	; for button A
001C397E 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER	; for button C (not B)
001C3982 0000 0000                  	dc.l	DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER	; for button B (not C)
001C3986                            
001C3986                            ; ---------------------------------------------------------------
001C3986                            ; Error handler blob
001C3986                            ; ---------------------------------------------------------------
001C3986                            
001C3986                            ErrorHandler:
001C3986                            
001C3986 46FC 2700 4FEF FFF2 48E7+  	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $4EBA022E, $49EF004A, $4E682F08, $47EF0040, $4EBA011E
001C39A6 41FA 02B2 4EBA 0AD6 225C+  	dc.l	$41FA02B2, $4EBA0AD6, $225C45D4, $4EBA0B7A, $4EBA0A72, $49D21C19, $6A025249, $47D10806
001C39C6 0000 670E 41FA 0295 222C+  	dc.l	$0000670E, $41FA0295, $222C0002, $4EBA0164, $504C41FA, $0292222C, $00024EBA, $01562278
001C39E6 0000 45EC 0006 4EBA 01AE+  	dc.l	$000045EC, $00064EBA, $01AE41FA, $02844EBA, $01424EBA, $0A300806, $00066600, $00AA45EF
001C3A06 0004 4EBA 09FE 3F01 7003+  	dc.l	$00044EBA, $09FE3F01, $70034EBA, $09C8303C, $64307A07, $4EBA0132, $321F7011, $4EBA09B6
001C3A26 303C 6130 7A06 4EBA 0120+  	dc.l	$303C6130, $7A064EBA, $0120303C, $73707A00, $2F0C45D7, $4EBA0112, $584F0806, $00016714
001C3A46 43FA 0240 45D7 4EBA 0AE4+  	dc.l	$43FA0240, $45D74EBA, $0AE443FA, $024145D4, $4EBA0AD6, $584F4EBA, $09AA5241, $70014EBA
001C3A66 0974 2038 0078 41FA 022F+  	dc.l	$09742038, $007841FA, $022F4EBA, $010A2038, $007041FA, $022B4EBA, $00FE4EBA, $09A82278
001C3A86 0000 45D4 5389 6140 4EBA+  	dc.l	$000045D4, $53896140, $4EBA0978, $7A199A41, $6B0A6148, $4EBA005A, $51CDFFFA, $08060005
001C3AA6 660A 4E71 60FC 7200 4EBA+  	dc.l	$660A4E71, $60FC7200, $4EBA09A2, $2ECB4CDF, $7FFF487A, $FFEE2F2F, $FFC44E75, $43FA0152
001C3AC6 45FA 01F2 4EFA 0888 223C+  	dc.l	$45FA01F2, $4EFA0888, $223C00FF, $FFFF2409, $C4812242, $240AC481, $24424E75, $4FEFFFD0
001C3AE6 41D7 7EFF 20FC 2853 5029+  	dc.l	$41D77EFF, $20FC2853, $502930FC, $3A206018, $4FEFFFD0, $41D77EFF, $30FC202B, $320A924C
001C3B06 4EBA 05A4 30FC 3A20 7005+  	dc.l	$4EBA05A4, $30FC3A20, $700572EC, $B5C96502, $72EE10C1, $321A4EBA, $05AC10FC, $002051C8
001C3B26 FFEA 4218 41D7 7200 4EBA+  	dc.l	$FFEA4218, $41D77200, $4EBA094C, $4FEF0030, $4E754EBA, $09482F01, $2F0145D7, $43FA013C
001C3B46 4EBA 09E6 504F 4E75 4FEF+  	dc.l	$4EBA09E6, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA055E
001C3B66 4218 41D7 7200 4EBA 090E+  	dc.l	$421841D7, $72004EBA, $090E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
001C3B86 0C5A 4EF9 6604 2212 60A8+  	dc.l	$0C5A4EF9, $66042212, $60A84EBA, $09A043FA, $01174EFA, $09945989, $4EBAFF2E, $B3CA650C
001C3BA6 0C52 0040 650A 548A B3CA+  	dc.l	$0C520040, $650A548A, $B3CA64F4, $72004E75, $221267F2, $08010000, $66EC4E75, $4BF900C0
001C3BC6 0004 4DED FFFC 4A55 44D5+  	dc.l	$00044DED, $FFFC4A55, $44D569FC, $41FA0026, $30186A04, $3A8060F8, $70002ABC, $40000000
001C3BE6 2C80 2ABC 4000 0010 2C80+  	dc.l	$2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75, $80048134, $85008700, $8B008C81
001C3C06 8D00 8F02 9011 9100 9200+  	dc.l	$8D008F02, $90119100, $92008220, $84040000, $44000000, $00000001, $00100011, $01000101
001C3C26 0110 0111 1000 1001 1010+  	dc.l	$01100111, $10001001, $10101011, $11001101, $11101111, $FFFF0EEE, $FFF200CE, $FFF20EEA
001C3C46 FFF2 0E86 FFF2 4000 0002+  	dc.l	$FFF20E86, $FFF24000, $00020028, $00280000, $008000FF, $EAE0FA01, $F02600EA, $41646472
001C3C66 6573 733A 2000 EA4F 6666+  	dc.l	$6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C, $6C65723A, $2000EC83, $20E8BFEC
001C3C86 C800 FA10 E875 7370 3A20+  	dc.l	$C800FA10, $E8757370, $3A20EC83, $00FA03E8, $73723A20, $EC8100EA, $56496E74, $3A2000EA
001C3CA6 4849 6E74 3A20 00E8 3C75+  	dc.l	$48496E74, $3A2000E8, $3C756E64, $6566696E, $65643E00, $02F70000, $00000000, $0000183C
001C3CC6 3C18 1800 1800 6C6C 6C00+  	dc.l	$3C181800, $18006C6C, $6C000000, $00006C6C, $FE6CFE6C, $6C00187E, $C07C06FC, $180000C6
001C3CE6 0C18 3060 C600 386C 3876+  	dc.l	$0C183060, $C600386C, $3876CCCC, $76001818, $30000000, $00001830, $60606030, $18006030
001C3D06 1818 1830 6000 00EE 7CFE+  	dc.l	$18181830, $600000EE, $7CFE7CEE, $00000018, $187E1818, $00000000, $00001818, $30000000
001C3D26 00FE 0000 0000 0000 0000+  	dc.l	$00FE0000, $00000000, $00000038, $3800060C, $183060C0, $80007CC6, $CEDEF6E6, $7C001878
001C3D46 1818 1818 7E00 7CC6 0C18+  	dc.l	$18181818, $7E007CC6, $0C183066, $FE007CC6, $063C06C6, $7C000C1C, $3C6CFE0C, $0C00FEC0
001C3D66 FC06 06C6 7C00 7CC6 C0FC+  	dc.l	$FC0606C6, $7C007CC6, $C0FCC6C6, $7C00FEC6, $060C1818, $18007CC6, $C67CC6C6, $7C007CC6
001C3D86 C67E 06C6 7C00 001C 1C00+  	dc.l	$C67E06C6, $7C00001C, $1C00001C, $1C000018, $18000018, $18300C18, $30603018, $0C000000
001C3DA6 FE00 00FE 0000 6030 180C+  	dc.l	$FE0000FE, $00006030, $180C1830, $60007CC6, $060C1800, $18007CC6, $C6DEDCC0, $7E00386C
001C3DC6 C6C6 FEC6 C600 FC66 667C+  	dc.l	$C6C6FEC6, $C600FC66, $667C6666, $FC003C66, $C0C0C066, $3C00F86C, $6666666C, $F800FEC2
001C3DE6 C0F8 C0C2 FE00 FE62 607C+  	dc.l	$C0F8C0C2, $FE00FE62, $607C6060, $F0007CC6, $C0C0DEC6, $7C00C6C6, $C6FEC6C6, $C6003C18
001C3E06 1818 1818 3C00 3C18 1818+  	dc.l	$18181818, $3C003C18, $1818D8D8, $7000C6CC, $D8F0D8CC, $C600F060, $60606062, $FE00C6EE
001C3E26 FED6 D6C6 C600 C6E6 E6F6+  	dc.l	$FED6D6C6, $C600C6E6, $E6F6DECE, $C6007CC6, $C6C6C6C6, $7C00FC66, $667C6060, $F0007CC6
001C3E46 C6C6 C6D6 7C06 FCC6 C6FC+  	dc.l	$C6C6C6D6, $7C06FCC6, $C6FCD8CC, $C6007CC6, $C07C06C6, $7C007E5A, $18181818, $3C00C6C6
001C3E66 C6C6 C6C6 7C00 C6C6 C6C6+  	dc.l	$C6C6C6C6, $7C00C6C6, $C6C66C38, $1000C6C6, $D6D6FEEE, $C600C66C, $3838386C, $C6006666
001C3E86 663C 1818 3C00 FE86 0C18+  	dc.l	$663C1818, $3C00FE86, $0C183062, $FE007C60, $60606060, $7C00C060, $30180C06, $02007C0C
001C3EA6 0C0C 0C0C 7C00 1038 6CC6+  	dc.l	$0C0C0C0C, $7C001038, $6CC60000, $00000000, $00000000, $00FF3030, $18000000, $00000000
001C3EC6 780C 7CCC 7E00 E060 7C66+  	dc.l	$780C7CCC, $7E00E060, $7C666666, $FC000000, $7CC6C0C6, $7C001C0C, $7CCCCCCC, $7E000000
001C3EE6 7CC6 FEC0 7C00 1C36 30FC+  	dc.l	$7CC6FEC0, $7C001C36, $30FC3030, $78000000, $76CEC67E, $067CE060, $7C666666, $E6001800
001C3F06 3818 1818 3C00 0C00 1C0C+  	dc.l	$38181818, $3C000C00, $1C0C0C0C, $CC78E060, $666C786C, $E6001818, $18181818, $1C000000
001C3F26 6CFE D6D6 C600 0000 DC66+  	dc.l	$6CFED6D6, $C6000000, $DC666666, $66000000, $7CC6C6C6, $7C000000, $DC66667C, $60F00000
001C3F46 76CC CC7C 0C1E 0000 DC66+  	dc.l	$76CCCC7C, $0C1E0000, $DC666060, $F0000000, $7CC07C06, $7C003030, $FC303036, $1C000000
001C3F66 CCCC CCCC 7600 0000 C6C6+  	dc.l	$CCCCCCCC, $76000000, $C6C66C38, $10000000, $C6C6D6FE, $6C000000, $C66C386C, $C6000000
001C3F86 C6C6 CE76 067C 0000 FC98+  	dc.l	$C6C6CE76, $067C0000, $FC983064, $FC000E18, $18701818, $0E001818, $18001818, $18007018
001C3FA6 180E 1818 7000 76DC 0000+  	dc.l	$180E1818, $700076DC, $00000000, $000043FA, $05C80C59, $DEB26672, $70FED059, $74FC7600
001C3FC6 4841 0241 00FF D241 D241+  	dc.l	$48410241, $00FFD241, $D241B240, $625C675E, $20311000, $675847F1, $08004841, $7000301B
001C3FE6 B253 654C 43F3 08FE 45E9+  	dc.l	$B253654C, $43F308FE, $45E9FFFC, $E248C042, $B2730000, $65146204, $D6C0601A, $47F30004
001C4006 200A 908B 6AE6 594B 600C+  	dc.l	$200A908B, $6AE6594B, $600C45F3, $00FC200A, $908B6AD8, $47D2925B, $7400341B, $D3C24841
001C4026 4241 4841 D283 7000 4E75+  	dc.l	$42414841, $D2837000, $4E7570FF, $4E754841, $70003001, $D6805283, $323CFFFF, $48415941
001C4046 6A8E 70FF 4E75 47FA 0530+  	dc.l	$6A8E70FF, $4E7547FA, $05300C5B, $DEB2664A, $D6D37800, $72007400, $45D351CC, $00061619
001C4066 7807 D603 D341 5242 B252+  	dc.l	$7807D603, $D3415242, $B252620A, $65ECB42A, $00026712, $65E4584A, $B25262FA, $65DCB42A
001C4086 0002 65D6 66F0 10EA 0003+  	dc.l	$000265D6, $66F010EA, $0003670A, $51CFFFC6, $4E9464C0, $4E755348, $4E757000, $4E754EFA
001C40A6 0024 4EFA 0018 760F 3401+  	dc.l	$00244EFA, $0018760F, $3401E84A, $C44310FB, $205E51CF, $004C4E94, $64464E75, $48416104
001C40C6 654A 4841 7404 760F E579+  	dc.l	$654A4841, $7404760F, $E5791801, $C84310FB, $403E51CF, $00044E94, $6532E579, $1801C843
001C40E6 10FB 402C 51CF 0004 4E94+  	dc.l	$10FB402C, $51CF0004, $4E946520, $E5791801, $C84310FB, $401A51CF, $00044E94, $650EE579
001C4106 C243 10FB 100A 51CF 0004+  	dc.l	$C24310FB, $100A51CF, $00044ED4, $4E753031, $32333435, $36373839, $41424344, $45464EFA
001C4126 0026 4EFA 001A 7407 7018+  	dc.l	$00264EFA, $001A7407, $7018D201, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754841
001C4146 6104 6518 4841 740F 7018+  	dc.l	$61046518, $4841740F, $7018D241, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754EFA
001C4166 0010 4EFA 0048 47FA 009A+  	dc.l	$00104EFA, $004847FA, $009A0241, $00FF6004, $47FA008C, $42007609, $381B3403, $924455CA
001C4186 FFFC D244 9443 4442 8002+  	dc.l	$FFFCD244, $94434442, $8002670E, $06020030, $10C251CF, $00064E94, $6510381B, $6ADC0601
001C41A6 0030 10C1 51CF 0004 4ED4+  	dc.l	$003010C1, $51CF0004, $4ED44E75, $47FA002E, $42007609, $281B3403, $928455CA, $FFFCD284
001C41C6 9443 4442 8002 670E 0602+  	dc.l	$94434442, $8002670E, $06020030, $10C251CF, $00064E94, $65D4281B, $6ADC609E, $3B9ACA00
001C41E6 05F5 E100 0098 9680 000F+  	dc.l	$05F5E100, $00989680, $000F4240, $000186A0, $00002710, $FFFF03E8, $0064000A, $FFFF2710
001C4206 03E8 0064 000A FFFF 48C1+  	dc.l	$03E80064, $000AFFFF, $48C16008, $4EFA0006, $488148C1, $48E75060, $4EBAFD94, $66182E81
001C4226 4EBA FE24 4CDF 060A 650A+  	dc.l	$4EBAFE24, $4CDF060A, $650A0803, $00036604, $4EFA00B6, $4E754CDF, $060A0803, $00026708
001C4246 47FA 000A 4EFA 00B4 70FF+  	dc.l	$47FA000A, $4EFA00B4, $70FF60DE, $3C756E6B, $6E6F776E, $3E0010FC, $002B51CF, $00064E94
001C4266 65D2 4841 4A41 6700 FE5A+  	dc.l	$65D24841, $4A416700, $FE5A6000, $FE520803, $000366C0, $4EFAFE46, $48E7F810, $10D95FCF
001C4286 FFFC 6E14 6718 1620 7470+  	dc.l	$FFFC6E14, $67181620, $7470C403, $4EBB201A, $64EA4CDF, $081F4E75, $4E9464E0, $60F45348
001C42A6 4E94 4CDF 081F 4E75 47FA+  	dc.l	$4E944CDF, $081F4E75, $47FAFDF4, $B702D402, $4EFB205A, $4E714E71, $47FAFEA4, $B702D402
001C42C6 4EFB 204A 4E71 4E71 47FA+  	dc.l	$4EFB204A, $4E714E71, $47FAFE54, $B702D402, $4EFB203A, $53484E75, $47FAFF2E, $14030242
001C42E6 0003 D442 4EFB 2026 4A40+  	dc.l	$0003D442, $4EFB2026, $4A406B08, $4A816716, $4EFAFF64, $4EFAFF78, $265A10DB, $57CFFFFC
001C4306 67D2 4E94 64F4 4E75 5248+  	dc.l	$67D24E94, $64F44E75, $5248603C, $504B321A, $4ED3584B, $221A4ED3, $52486022, $504B321A
001C4326 6004 584B 221A 6A08 4481+  	dc.l	$6004584B, $221A6A08, $448110FC, $002D6004, $10FC002B, $51CF0006, $4E9465CA, $4ED351CF
001C4346 0006 4E94 65C0 10D9 51CF+  	dc.l	$00064E94, $65C010D9, $51CFFFBC, $4ED44BF9, $00C00004, $4DEDFFFC, $4A516B10, $2A9941D2
001C4366 3818 4EBA 01F8 43E9 0020+  	dc.l	$38184EBA, $01F843E9, $002060EC, $544941FA, $00482ABC, $C0000000, $70007603, $3C803419
001C4386 3C82 3419 6AFA 7200 4EB0+  	dc.l	$3C823419, $6AFA7200, $4EB02010, $51CBFFEE, $2A194E63, $26C526D9, $26D936FC, $5D002A85
001C43A6 7000 3219 6112 2ABC 4000+  	dc.l	$70003219, $61122ABC, $40000000, $72006108, $3ABC8174, $2A854E75, $2C802C80, $2C802C80
001C43C6 2C80 2C80 2C80 2C80 51C9+  	dc.l	$2C802C80, $2C802C80, $51C9FFEE, $4E754CAF, $00030004, $48E76010, $4E6B0C2B, $005D000C
001C43E6 661A 3413 0242 E000 C2EB+  	dc.l	$661A3413, $0242E000, $C2EB000A, $D441D440, $D4403682, $23DB00C0, $000436DB, $4CDF0806
001C4406 4E75 2F0B 4E6B 0C2B 005D+  	dc.l	$4E752F0B, $4E6B0C2B, $005D000C, $66127200, $32130241, $1FFF82EB, $000A2001, $4840E248
001C4426 265F 4E75 2F0B 4E6B 0C2B+  	dc.l	$265F4E75, $2F0B4E6B, $0C2B005D, $000C6618, $3F003013, $D06B000A, $02405FFF, $368023DB
001C4446 00C0 0004 36DB 301F 265F+  	dc.l	$00C00004, $36DB301F, $265F4E75, $2F0B4E6B, $0C2B005D, $000C6604, $37410008, $265F4E75
001C4466 2F0B 4E6B 0C2B 005D 000C+  	dc.l	$2F0B4E6B, $0C2B005D, $000C6606, $584B36C1, $36C1265F, $4E7561D4, $487AFFAA, $48E77E12
001C4486 4E6B 0C2B 005D 000C 661C+  	dc.l	$4E6B0C2B, $005D000C, $661C2A1B, $4C93005C, $48464DF9, $00C00000, $72001218, $6E0E6B28
001C44A6 4893 001C 2705 4CDF 487E+  	dc.l	$4893001C, $27054CDF, $487E4E75, $51CB000E, $D642DA86, $0885001D, $2D450004, $D2443C81
001C44C6 7200 1218 6EE6 67D8 0241+  	dc.l	$72001218, $6EE667D8, $0241001E, $4EFB1002, $DA86721D, $03856020, $6026602A, $6032603A
001C44E6 1418 6014 1818 60D8 6036+  	dc.l	$14186014, $181860D8, $60361218, $D2417680, $4843CA83, $48418A81, $36022D45, $000460C0
001C4506 0244 07FF 60BA 0244 07FF+  	dc.l	$024407FF, $60BA0244, $07FF0044, $200060B0, $024407FF, $00444000, $60A60044, $600060A0
001C4526 3F04 1E98 381F 6098 487A+  	dc.l	$3F041E98, $381F6098, $487AFEFA, $2F0C49FA, $00164FEF, $FFF041D7, $7E0E4EBA, $FD3C4FEF
001C4546 0010 285F 4E75 4218 4447+  	dc.l	$0010285F, $4E754218, $44470647, $000F90C7, $2F084EBA, $FF28205F, $7E0E4E75, $741E1018
001C4566 1200 E609 C242 3CB1 1000+  	dc.l	$1200E609, $C2423CB1, $1000D000, $C0423CB1, $000051CC, $FFEA4E75
001C457E                            
001C457E                            ; ---------------------------------------------------------------
001C457E                            ; WARNING!
001C457E                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001C457E                            ;	Symbol data should be appended here after ROM is compiled
001C457E                            ;	by ConvSym utility, otherwise debugger modules won't be able
001C457E                            ;	to resolve symbol names.
001C457E                            ; ---------------------------------------------------------------
001C457E                            ; ---------------------------------------------------------------
001C457E                            
001C457E                            ; --------------------------------------------------------------
001C457E                            ; WARNING!
001C457E                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001C457E                            ;	Symbol data should be appended here after ROM is compiled
001C457E                            ;	by ConvSym utility, otherwise debugger modules won't be able
001C457E                            ;	to resolve symbol names.
001C457E                            ; --------------------------------------------------------------
001C457E                            EndOfRom:
